
var BOX2D = (() => {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  
  return (
function(BOX2D = {})  {

// include: shell.js
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof BOX2D != 'undefined' ? BOX2D : {};

// Set up the promise that indicates the Module is initialized
var readyPromiseResolve, readyPromiseReject;
Module['ready'] = new Promise((resolve, reject) => {
  readyPromiseResolve = resolve;
  readyPromiseReject = reject;
});

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = Object.assign({}, Module);

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = true;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE, this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {
// include: web_or_worker_shell_read.js
read_ = (url) => {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  }

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = (url) => {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = (url, onload, onerror) => {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = () => {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  }

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = (title) => document.title = title;
} else
{
}

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.error.bind(console);

// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];

if (Module['thisProgram']) thisProgram = Module['thisProgram'];

if (Module['quit']) quit_ = Module['quit'];

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message


// end include: shell.js
// include: preamble.js
// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
var noExitRuntime = Module['noExitRuntime'] || true;

// include: wasm2js.js
// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  /** @constructor */
  Instance: function(module, info) {
    // TODO: use the module somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
// EMSCRIPTEN_START_ASM
function instantiate(info) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
  base64DecodeToExistingUint8Array(bufferView, 20608, "AwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGA");
  base64DecodeToExistingUint8Array(bufferView, 23395, "QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNRkACgAZGRkAAAAABQAAAAAAAAkAAAAACwAAAAAAAAAAGQARChkZGQMKBwABAAkLGAAACQYLAAALAAYZAAAAGRkZ");
  base64DecodeToExistingUint8Array(bufferView, 23537, "DgAAAAAAAAAAGQAKDRkZGQANAAACAAkOAAAACQAOAAAO");
  base64DecodeToExistingUint8Array(bufferView, 23595, "DA==");
  base64DecodeToExistingUint8Array(bufferView, 23607, "EwAAAAATAAAAAAkMAAAAAAAMAAAM");
  base64DecodeToExistingUint8Array(bufferView, 23653, "EA==");
  base64DecodeToExistingUint8Array(bufferView, 23665, "DwAAAAQPAAAAAAkQAAAAAAAQAAAQ");
  base64DecodeToExistingUint8Array(bufferView, 23711, "Eg==");
  base64DecodeToExistingUint8Array(bufferView, 23723, "EQAAAAARAAAAAAkSAAAAAAASAAASAAAaAAAAGhoa");
  base64DecodeToExistingUint8Array(bufferView, 23778, "GgAAABoaGgAAAAAAAAk=");
  base64DecodeToExistingUint8Array(bufferView, 23827, "FA==");
  base64DecodeToExistingUint8Array(bufferView, 23839, "FwAAAAAXAAAAAAkUAAAAAAAUAAAU");
  base64DecodeToExistingUint8Array(bufferView, 23885, "Fg==");
  base64DecodeToExistingUint8Array(bufferView, 23897, "FQAAAAAVAAAAAAkWAAAAAAAWAAAWAAAwMTIzNDU2Nzg5QUJDREVGTjEwX19jeHhhYml2MTE2X19zaGltX3R5cGVfaW5mb0UAAAAAPGAAAIBdAAAYYQAATjEwX19jeHhhYml2MTE3X19jbGFzc190eXBlX2luZm9FAAAAPGAAALBdAACkXQAATjEwX19jeHhhYml2MTE3X19wYmFzZV90eXBlX2luZm9FAAAAPGAAAOBdAACkXQAATjEwX19jeHhhYml2MTE5X19wb2ludGVyX3R5cGVfaW5mb0UAPGAAABBeAAAEXgAATjEwX19jeHhhYml2MTIwX19mdW5jdGlvbl90eXBlX2luZm9FAAAAADxgAABAXgAApF0AAE4xMF9fY3h4YWJpdjEyOV9fcG9pbnRlcl90b19tZW1iZXJfdHlwZV9pbmZvRQAAADxgAAB0XgAABF4AAAAAAAD0XgAAxAMAAMUDAADGAwAAxwMAAMgDAABOMTBfX2N4eGFiaXYxMjNfX2Z1bmRhbWVudGFsX3R5cGVfaW5mb0UAPGAAAMxeAACkXQAAdgAAALheAAAAXwAARG4AALheAAAMXwAAYgAAALheAAAYXwAAYwAAALheAAAkXwAAaAAAALheAAAwXwAAYQAAALheAAA8XwAAcwAAALheAABIXwAAdAAAALheAABUXwAAaQAAALheAABgXwAAagAAALheAABsXwAAbAAAALheAAB4XwAAbQAAALheAACEXwAAeAAAALheAACQXwAAeQAAALheAACcXwAAZgAAALheAACoXwAAZAAAALheAAC0XwAAAAAAAABgAADEAwAAyQMAAMYDAADHAwAAygMAAE4xMF9fY3h4YWJpdjExNl9fZW51bV90eXBlX2luZm9FAAAAADxgAADcXwAApF0AAAAAAADUXQAAxAMAAMsDAADGAwAAxwMAAMwDAADNAwAAzgMAAM8DAAAAAAAAhGAAAMQDAADQAwAAxgMAAMcDAADMAwAA0QMAANIDAADTAwAATjEwX19jeHhhYml2MTIwX19zaV9jbGFzc190eXBlX2luZm9FAAAAADxgAABcYAAA1F0AAAAAAADgYAAAxAMAANQDAADGAwAAxwMAAMwDAADVAwAA1gMAANcDAABOMTBfX2N4eGFiaXYxMjFfX3ZtaV9jbGFzc190eXBlX2luZm9FAAAAPGAAALhgAADUXQAAAAAAADReAADEAwAA2AMAAMYDAADHAwAA2QMAAFN0OXR5cGVfaW5mbwAAAAAUYAAACGE=");
  base64DecodeToExistingUint8Array(bufferView, 24864, "rF8AAHBfAABkXwAAOGEAAEBhAAA4YQAAFGAAAHI8AAAUYAAAejwAAARfAABwXwAAHF8AABxfAABwXwAABF8AAHBfAACsXwAArF8AAHBfAAAEXwAAcF8AAHBfAABwXwAABF8AAHBfAABwXwAAcF8AAHBfAABkXwAAcF8AAGRfAABwXwAAyF8AAKY8AADIXwAAtjwAABRgAADDPAAA9GAAAOc8AAAAAAAAtGEAAPRgAAAMPQAAAQAAALRhAAC8YQAABF8AALxhAABkXwAAAAAAAARfAAC8YQAAiF8AAGRfAACIXwAAzGEAABRiAAC0YQAAiF8AABRgAAA9PQAAAAAAABxfAAC0YQAAiF8AAGRfAAAUYAAAWD0AAPRgAACEPQAAAAAAADBiAAD0YAAAsT0AAAEAAAAwYgAAOGIAAARfAAA4YgAAOGE=");
  base64DecodeToExistingUint8Array(bufferView, 25200, "BF8AADhiAACIXwAAOGEAAIhfAABIYgAAFGIAADBiAACIXw==");
  base64DecodeToExistingUint8Array(bufferView, 25248, "HF8AADBiAACIXwAAOGEAABRgAADfPQAAFGAAAOY9AAAUYAAA7z0AABRgAAAAPgAAFGAAABI+AAAUYAAAHz4AABRgAAApPgAA9GAAADs+AAAAAAAA4GIAAPRgAABOPgAAAQAAAOBiAAAcXwAA6GIAAHBfAAAUYAAApT4AAJhgAAB7PgAAAAAAAAIAAADgYgAAAgAAABRjAAACBAAAPGAAAGI+AAAcYwAA9GAAAMo+AAAAAAAAPGMAAPRgAADkPgAAAQAAADxjAAAEXwAAPGMAAEhjAAAUYgAAAAAAADxjAADVAgAA1gIAANcCAAAAAAAAHGMAANgCAADZAgAA2gIAAAAAAADgYgAA2wIAANwCAADaAgAABF8AABxfAABwXwAAFGIAAMxjAAAUYgAAFGAAAP8+AAAUYAAAPj8AAPRgAABSPwAAAAAAANRjAAD0YAAAZz8AAAEAAADUYwAAAAAAAKxfAADcYwAAcF8AADhhAAA4YQAArF8AAJhgAACgPwAAAAAAAAIAAADUYwAAAgAAABRjAAACBAAAPGAAAIU/AAAYZAAA9GAAAMw/AAAAAAAAOGQAAPRgAADoPwAAAQAAADhkAAAEXwAAOGQAAERkAAAUYgAAAAAAADhkAADdAgAA3gIAAN8CAAAAAAAAGGQAAOACAADhAgAA2gIAAAAAAADUYwAA4gIAAOMCAADaAgAArF8AAHBfAAA4YQAAOGEAAKxfAAAUYAAABUAAAPRgAAAZQAAAAAAAAMRkAAD0YAAALkAAAAEAAADEZAAABF8AAMxkAABwXw==");
  base64DecodeToExistingUint8Array(bufferView, 25856, "BF8AAMxkAABwXwAAcF8AAJhgAABfQAAAAAAAAAIAAADEZAAAAgAAABRjAAACBAAAPGAAAERAAAAQZQAABF8AAEhlAABwXwAA9GAAAItAAAAAAAAAMGUAABxfAABIZQAAcF8AAPRgAACnQAAAAQAAADBlAAAEXwAAMGUAAEhlAAAUYgAAAAAAADBlAADkAgAA5QIAAOYCAADnAgAA6AIAAOkCAAAAAAAAEGUAAOoCAADrAgAA7AIAAO0CAADuAgAA7wIAAAAAAADEZAAA8AIAAPECAADsAgAA7QIAAO4CAADvAgAABF8AAHBfAAAEXwAAcF8AAHBfAAAUYAAAxEAAAPRgAADMQAAAAAAAAPhlAAD0YAAA1UAAAAEAAAD4ZQAABF8AAABmAABwXwAAcF8AABBm");
  base64DecodeToExistingUint8Array(bufferView, 26176, "BF8AAABmAABwXwAAZF8AALhi");
  base64DecodeToExistingUint8Array(bufferView, 26208, "BF8AAABmAAA4YQAArF8AALhi");
  base64DecodeToExistingUint8Array(bufferView, 26240, "BF8AAABmAAA4YQAArF8AADhhAAC4Yg==");
  base64DecodeToExistingUint8Array(bufferView, 26272, "BF8AAABmAAA4YQAAOGEAALhiAAAEXwAAAGYAAEBhAACYYAAABUEAAAAAAAACAAAA+GUAAAIAAAAUYwAAAggAADxgAAD1QAAAwGYAAPRgAAAlQQAAAAAAAOBmAAD0YAAANkEAAAEAAADgZgAABF8AAOBmAADsZgAAFGIAAAAAAADgZgAA8gIAAPMCAAD0AgAA9QIAAPYCAAD3AgAA+AIAAPkCAAD6AgAAAAAAAMBmAAD7AgAA/AIAANoCAADaAgAA2gIAANoCAADaAgAA2gIAANoC");
  base64DecodeToExistingUint8Array(bufferView, 26496, "BF8AAHBfAABkXwAAuGIAAARfAAA4YQAArF8AALhiAAAEXwAAOGEAAKxfAAA4YQAAuGI=");
  base64DecodeToExistingUint8Array(bufferView, 26560, "BF8AADhhAAA4YQAAuGIAAARfAABAYQAAFGAAAEhBAAD0YAAAUEEAAAAAAADYZwAA9GAAAFlBAAABAAAA2GcAAOBnAAAcXwAA8GcAADhhAADwZwAArF8AAPBnAAAEXwAA4GcAAOBn");
  base64DecodeToExistingUint8Array(bufferView, 26672, "BF8AAOBnAADgZwAA4GcAABxfAADwZwAA2GcAAAAAAAAcXwAA8GcAAGBoAADAYgAA9GAAAGNBAAAAAAAAyGIAABRgAAB2QQAA9GAAAH9BAAAAAAAAcGgAAPRgAACJQQAAAQAAAHBoAAB4aAAAOGEAAARfAAB4aAAAzGQAAARfAAB4aAAAAGYAAARfAAB4aAAA1GgAAHhoAADsaAAAFGAAAJ1BAAD0YAAAlEEAAAAAAADMaAAAFGAAALJBAAD0YAAApUEAAAEAAADkaAAABF8AAHhoAADUaAAAHGkAAHhoAAA0aQAAFGAAAMdBAAD0YAAAvUEAAAAAAAAUaQAAFGAAAN9BAAD0YAAA0EEAAAEAAAAsaQAABF8AAHhoAAAcaQAABF8AAHhoAACsXwAAZF8AAGRf");
  base64DecodeToExistingUint8Array(bufferView, 26992, "BF8AAIhoAADoYgAA2GcAAARfAACIaAAA3GMAADhhAAA4YQAABF8AAHhoAAAcXwAAHF8AAIhoAAAEXwAAeGgAADhhAAA4YQAAiGgAABRgAADzQQAA9GAAAPxBAAAAAAAAvGkAAPRgAAAGQgAAAQAAALxpAACkYQAA1GkAAGRfAADUaQ==");
  base64DecodeToExistingUint8Array(bufferView, 27136, "HF8AANRpAABAYQAAOGEAABxfAADUaQAAYGgAAMBiAABAYQAAZF8=");
  base64DecodeToExistingUint8Array(bufferView, 27184, "BF8AANRpAADgZwAAQGEAAGRf");
  base64DecodeToExistingUint8Array(bufferView, 27216, "BF8AANRpAABgagAArF8AAPRgAAAZQgAAAAAAANBiAAAEXwAAxGkAAKxfAACsXwAAxGkAAPRgAAAtQgAAAAAAAKhGAAD0YAAAPkIAAAEAAACoRgAAhGoAAAAAAAC8aQAA/QIAAP4CAADaAgAA2gIAANoCAADaAgAA2gIAANoCAADEaQAAlGoAAORqAAAUYAAAZEIAAPRgAABQQgAAAAAAANxqAABkXwAAlGoAAAAAAAAcXwAAlGoAAEBhAAA4YQAAHF8AAJRqAABgaAAAwGIAAEBhAABkXw==");
  base64DecodeToExistingUint8Array(bufferView, 27440, "BF8AAJRqAADgZwAAQGEAAGRf");
  base64DecodeToExistingUint8Array(bufferView, 27472, "BF8AAJRqAABgagAArF8AAPRgAAB3QgAAAAAAAOxGAAD0YAAAhkIAAAEAAADsRgAAxGkAAHBrAADkagAAZF8AAHBr");
  base64DecodeToExistingUint8Array(bufferView, 27552, "HF8AAHBrAABAYQAAOGEAABxfAABwawAAYGgAAMBiAABAYQAAZF8=");
  base64DecodeToExistingUint8Array(bufferView, 27600, "BF8AAHBrAADgZwAAQGEAAGRf");
  base64DecodeToExistingUint8Array(bufferView, 27632, "BF8AAHBrAABgagAArF8AAPRgAACWQgAAAAAAADRHAAD0YAAAqEIAAAEAAAA0RwAAAGwAAMRpAAAQbAAA5GoAAGRfAAAQbA==");
  base64DecodeToExistingUint8Array(bufferView, 27712, "BF8AAABsAAAwYgAAZF8AABxfAAAQbAAAQGEAADhhAAAcXwAAEGwAAGBoAADAYgAAQGEAAGRf");
  base64DecodeToExistingUint8Array(bufferView, 27776, "BF8AABBsAADgZwAAQGEAAGRf");
  base64DecodeToExistingUint8Array(bufferView, 27808, "BF8AABBsAABgagAArF8AABxfAAAQbA==");
  base64DecodeToExistingUint8Array(bufferView, 27840, "BF8AAABsAACsXwAArF8AAARfAAAAbAAArF8AAKxfAAA4YQAArF8AABRgAADJQgAA9GAAANhCAAAAAAAA6GwAAPRgAADoQgAAAQAAAOhsAADwbAAABF8AAPBsAADUaQAA1GkAAPBsAAAUYAAA+UIAAPRgAAAEQwAAAAAAAChtAAD0YAAAEEMAAAEAAAAobQAApGEAAEBtAADEaQAAMG0AAARfAAAwbQAAHF8AABxfAABAbQAABF8AADBtAADYYgAA2GIAAEBtAAAEXwAAMG0AANRoAAAwbQAAMG0AADBtAAAcXwAAQG0AADhhAAAAAAAAHF8AAEBtAABgaAAAwGIAAGRfAAAEXwAAQG0AAGBqAAAEXwAAMG0AAKxfAACsXwAAQG0AANhnAABAbQAAZF8AAARfAAAwbQAAZF8AAPRgAAAkQwAAAAAAAORoAAD8bQAA9GAAADBDAAABAAAAzGgAADBtAADUaAAAAG0AAAAAAAAwbQAA1GgAANRpAACsXwAABF8AANRoAAAwbQAAAAAAAARfAADUaAAAOGEAAKxfAABAYQAAEG4AADhhAAAQbgAArF8AABBuAAAEXwAA1GgAADhhAAAEXwAA1GgAAKxfAAAEXwAA1GgAADhhAAA4YQAAHF8=");
  base64DecodeToExistingUint8Array(bufferView, 28336, "BF8AANRoAAA4YQAAHF8AAARfAADUaAAArF8AABxfAAAEXwAAEG4AAGBqAAAEXwAA1GgAANBiAAAEXwAA1GgAADhhAAAQbgAAOGEAAARfAADUaAAArGEAAKxhAAAQbgAABF8AANRoAAAcXwAAHF8AABBuAAAwbQAA1GgAAHBfAADUaAAAeGgAANRoAAD0YAAARkMAAAAAAAAsaQAAPG8AAMhfAABUQwAABF8AADxvAADUaAAA1GgAADxvAAD0YAAAYkMAAAEAAAAUaQAAUG8AAGxvAADUaAAAHGkAADhhAABsbwAAOGEAAGxvAACsXwAArF8AAGxvAACsXwAAHF8AAGxvAAAEXwAAHGkAADxgAAB3QwAALGkAAPRgAACMQwAAAAAAALxvAAD0YAAAokMAAAEAAAC8bwAAyG8AAPRgAAC5QwAAAAAAAMBIAAD0YAAAzEMAAAEAAADASAAAOGEAAPxvAAAEXwAA7G8AAKxfAACsXwAA/G8AAARfAADsbwAAPGAAAOBDAAAsaQAA9GAAAPJDAAAAAAAAMHAAAPRgAAAFRAAAAQAAADBwAAA8cAAA9GAAABlEAAAAAAAAYEoAAPRgAAApRAAAAQAAAGBKAAAEXwAAYHAAADhhAAA4YQAAcHAAAARfAABgcAAArF8AAKxfAABwcAAABF8AAGBwAAA8YAAAOkQAACxpAAD0YAAATEQAAAAAAACwcAAA9GAAAF9EAAABAAAAsHAAALxwAAD0YAAAc0QAAAAAAACwSgAA9GAAAINEAAABAAAAsEoAAARfAADgcAAAOGEAADhhAADwcAAABF8AAOBwAACsXwAArF8AAPBwAAAEXwAA4HAAADxgAACURAAALGkAAPRgAACqRAAAAAAAADBxAAD0YAAAwUQAAAEAAAAwcQAAPHEAAPRgAADZRAAAAAAAAHRLAAD0YAAA7UQAAAEAAAB0SwAAOGEAAHBxAACsXwAAcHEAABxfAABwcQAABF8AAGBxAAAcXw==");
  base64DecodeToExistingUint8Array(bufferView, 29104, "BF8AAGBxAACsXwAArF8AAARfAABgcQAArF8AAKxfAABwcQAArF8AAARfAABgcQAAPGAAAAJFAAAsaQAA9GAAABdFAAAAAAAA4HEAAPRgAAAtRQAAAQAAAOBxAADscQAA9GAAAERFAAAAAAAAGEwAAPRgAABXRQAAAQAAABhMAAA4YQAAIHIAAKxfAAAgcgAAHF8AACByAAAEXwAAEHIAABxf");
  base64DecodeToExistingUint8Array(bufferView, 29280, "BF8AABByAACsXwAArF8AAARfAAAQcgAArF8AAKxfAAAgcgAArF8AAARfAAAQcgAAPGAAAGtFAAAsaQAA9GAAAHxFAAAAAAAAkHIAAPRgAACORQAAAQAAAJByAACccgAA9GAAAKFFAAAAAAAAaEwAAPRgAACwRQAAAQAAAGhMAAA4YQAA0HIAADhhAADQcgAArF8AAKxfAADQcgAArF8AAARfAADAcgAArF8AAKxfAADQcgAABF8AAMByAAA8YAAAwEUAACxpAAD0YAAA0UUAAAAAAAAccwAA9GAAAONFAAABAAAAHHMAAChzAAD0YAAA9kUAAAAAAAC4TAAA9GAAAAVGAAABAAAAuEwAADhhAABccwAArF8AAFxzAAAEXwAATHMAAKxfAAAEXwAATHMAADxgAAAVRgAALGkAAPRgAAAnRgAAAAAAAJBzAAD0YAAAOkYAAAEAAACQcwAAnHMAAPRgAABORgAAAAAAAAhNAAD0YAAAXkYAAAEAAAAITQAAOGEAANBzAACsXwAA0HMAABxfAADQcwAABF8AAMBzAAAcXwAABF8AAMBzAACsXwAArF8AANBzAACsXwAABF8AAMBzAAACAAAABAAAAAAAAAAcTQAAzGUAAAEAAAAAAAAABQ==");
  base64DecodeToExistingUint8Array(bufferView, 29772, "vwM=");
  base64DecodeToExistingUint8Array(bufferView, 29796, "wAMAAMEDAADIeAAAAAQ=");
  base64DecodeToExistingUint8Array(bufferView, 29820, "AQ==");
  base64DecodeToExistingUint8Array(bufferView, 29836, "/////wo=");
  base64DecodeToExistingUint8Array(bufferView, 29904, "gH8B");
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      function wasm2js_trap() { throw new Error('abort'); }

  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(imports) {
 var env = imports.env;
 var memory = env.memory;
 var buffer = memory.buffer;
 memory.grow = __wasm_memory_grow;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var _embind_register_class = env._embind_register_class;
 var _embind_register_class_class_function = env._embind_register_class_class_function;
 var _embind_register_class_property = env._embind_register_class_property;
 var _embind_register_constant = env._embind_register_constant;
 var _embind_register_function = env._embind_register_function;
 var _embind_register_enum = env._embind_register_enum;
 var _embind_register_enum_value = env._embind_register_enum_value;
 var _embind_register_value_object = env._embind_register_value_object;
 var _embind_register_value_object_field = env._embind_register_value_object_field;
 var _embind_finalize_value_object = env._embind_finalize_value_object;
 var __assert_fail = env.__assert_fail;
 var abort = env.abort;
 var _embind_register_class_constructor = env._embind_register_class_constructor;
 var _embind_register_class_function = env._embind_register_class_function;
 var _emval_incref = env._emval_incref;
 var _emval_decref = env._emval_decref;
 var _emval_take_value = env._emval_take_value;
 var _embind_create_inheriting_constructor = env._embind_create_inheriting_constructor;
 var _emval_call_void_method = env._emval_call_void_method;
 var _emval_get_method_caller = env._emval_get_method_caller;
 var _emval_call_method = env._emval_call_method;
 var _emval_run_destructors = env._emval_run_destructors;
 var _embind_register_void = env._embind_register_void;
 var _embind_register_bool = env._embind_register_bool;
 var _embind_register_integer = env._embind_register_integer;
 var _embind_register_float = env._embind_register_float;
 var _embind_register_std_string = env._embind_register_std_string;
 var _embind_register_std_wstring = env._embind_register_std_wstring;
 var _embind_register_emval = env._embind_register_emval;
 var _embind_register_memory_view = env._embind_register_memory_view;
 var emscripten_memcpy_big = env.emscripten_memcpy_big;
 var wasi_snapshot_preview1 = imports.wasi_snapshot_preview1;
 var __wasi_fd_write = wasi_snapshot_preview1.fd_write;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var legalimport$_embind_register_bigint = env._embind_register_bigint;
 var __stack_pointer = 98176;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
function embind_init_b2_28_29() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $0 = __stack_pointer - 16288 | 0;
 __stack_pointer = $0;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(10640, 29732);
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(10626, 29736);
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(10654, 29740);
 HEAP32[$0 + 4316 >> 2] = 8;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(3596, $0 + 4316 | 0);
 void_20emscripten__function_float_2c_20unsigned_20int_2c_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_2c_20int_29_29(11876, 2);
 void_20emscripten__function_b2Vec2_2c_20b2Transform_20const__2c_20b2Vec2_20const__2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Vec2_20_28__29_28b2Transform_20const__2c_20b2Vec2_20const__29_2c_20emscripten__allow_raw_pointers_29(11851, 3);
 void_20emscripten__function_void_2c_20unsigned_20int_2c_20bool__28char_20const__2c_20void_20_28__29_28unsigned_20int_2c_20bool_29_29(10054, 4);
 void_20emscripten__function_bool_2c_20unsigned_20int__28char_20const__2c_20bool_20_28__29_28unsigned_20int_29_29(7685, 5);
 void_20emscripten__function_void_2c_20unsigned_20int_2c_20float__28char_20const__2c_20void_20_28__29_28unsigned_20int_2c_20float_29_29(10111, 6);
 void_20emscripten__function_float_2c_20unsigned_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_29_29(10134, 7);
 void_20emscripten__function_void_2c_20unsigned_20int_2c_20float__28char_20const__2c_20void_20_28__29_28unsigned_20int_2c_20float_29_29(6405, 8);
 void_20emscripten__function_float_2c_20unsigned_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_29_29(6424, 9);
 void_20emscripten__function_void_2c_20unsigned_20int__28char_20const__2c_20void_20_28__29_28unsigned_20int_29_29(6384, 10);
 void_20emscripten__function_void_2c_20unsigned_20int_2c_20float__28char_20const__2c_20void_20_28__29_28unsigned_20int_2c_20float_29_29(6290, 11);
 void_20emscripten__function_float_2c_20unsigned_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_29_29(6312, 12);
 void_20emscripten__function_void_2c_20unsigned_20int__28char_20const__2c_20void_20_28__29_28unsigned_20int_29_29(6266, 13);
 void_20emscripten__function_unsigned_20int_2c_20unsigned_20int__28char_20const__2c_20unsigned_20int_20_28__29_28unsigned_20int_29_29(11055, 14);
 void_20emscripten__function_unsigned_20int_2c_20unsigned_20int__28char_20const__2c_20unsigned_20int_20_28__29_28unsigned_20int_29_29(10848, 15);
 void_20emscripten__function_void_2c_20unsigned_20int_2c_20unsigned_20int__28char_20const__2c_20void_20_28__29_28unsigned_20int_2c_20unsigned_20int_29_29(9892, 16);
 void_20emscripten__function_unsigned_20int_2c_20unsigned_20int__28char_20const__2c_20unsigned_20int_20_28__29_28unsigned_20int_29_29(9873, 17);
 void_20emscripten__function_unsigned_20int_2c_20unsigned_20int__28char_20const__2c_20unsigned_20int_20_28__29_28unsigned_20int_29_29(9073, 18);
 void_20emscripten__function_unsigned_20int_2c_20unsigned_20int__28char_20const__2c_20unsigned_20int_20_28__29_28unsigned_20int_29_29(2179, 19);
 void_20emscripten__function_unsigned_20int_2c_20unsigned_20int_2c_20int__28char_20const__2c_20unsigned_20int_20_28__29_28unsigned_20int_2c_20int_29_29(3615, 20);
 void_20emscripten__function_float_2c_20unsigned_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_29_29(10516, 21);
 void_20emscripten__function_float_2c_20unsigned_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_29_29(10374, 22);
 void_20emscripten__function_float_2c_20unsigned_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_29_29(10573, 23);
 void_20emscripten__function_float_2c_20unsigned_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_29_29(10431, 24);
 void_20emscripten__function_float_2c_20unsigned_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_29_29(10460, 25);
 void_20emscripten__function_float_2c_20unsigned_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_29_29(10318, 26);
 void_20emscripten__function_float_2c_20unsigned_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_29_29(8891, 27);
 void_20emscripten__function_float_2c_20unsigned_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_29_29(8789, 28);
 void_20emscripten__function_unsigned_20int_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20unsigned_20int_20_28__29_28_29_2c_20emscripten__allow_raw_pointers_29(1836, 29);
 void_20emscripten__function_float_2c_20unsigned_20int_2c_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_2c_20int_29_29(10488, 30);
 void_20emscripten__function_float_2c_20unsigned_20int_2c_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_2c_20int_29_29(10346, 31);
 void_20emscripten__function_float_2c_20unsigned_20int_2c_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_2c_20int_29_29(8703, 32);
 void_20emscripten__function_float_2c_20unsigned_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_29_29(10544, 33);
 void_20emscripten__function_float_2c_20unsigned_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_29_29(10402, 34);
 void_20emscripten__function_void_2c_20unsigned_20int__28char_20const__2c_20void_20_28__29_28unsigned_20int_29_29(8735, 35);
 void_20emscripten__function_float_2c_20unsigned_20int_2c_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_2c_20int_29_29(8921, 36);
 void_20emscripten__function_float_2c_20unsigned_20int_2c_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_2c_20int_29_29(8820, 37);
 void_20emscripten__function_int_2c_20unsigned_20int__28char_20const__2c_20int_20_28__29_28unsigned_20int_29_29(2201, 38);
 void_20emscripten__function_unsigned_20int_2c_20unsigned_20int_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20unsigned_20int_20_28__29_28unsigned_20int_29_2c_20emscripten__allow_raw_pointers_29(4087, 39);
 void_20emscripten__function_unsigned_20int_2c_20unsigned_20int_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20unsigned_20int_20_28__29_28unsigned_20int_29_2c_20emscripten__allow_raw_pointers_29(2584, 40);
 void_20emscripten__function_unsigned_20int_2c_20unsigned_20int_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20unsigned_20int_20_28__29_28unsigned_20int_29_2c_20emscripten__allow_raw_pointers_29(1866, 41);
 void_20emscripten__function_unsigned_20int_2c_20unsigned_20int_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20unsigned_20int_20_28__29_28unsigned_20int_29_2c_20emscripten__allow_raw_pointers_29(1883, 42);
 emscripten__enum__b2Shape__Type___enum__28char_20const__29($0 + 4309 | 0, 9110);
 emscripten__enum__b2Shape__Type___value_28char_20const__2c_20b2Shape__Type_29(emscripten__enum__b2Shape__Type___value_28char_20const__2c_20b2Shape__Type_29(emscripten__enum__b2Shape__Type___value_28char_20const__2c_20b2Shape__Type_29(emscripten__enum__b2Shape__Type___value_28char_20const__2c_20b2Shape__Type_29(emscripten__enum__b2Shape__Type___value_28char_20const__2c_20b2Shape__Type_29($0 + 4309 | 0, 9416, 0), 9594, 1), 6712, 2), 6785, 3), 2403, 4);
 emscripten__enum__b2BodyType___enum__28char_20const__29($0 + 4308 | 0, 9056);
 emscripten__enum__b2BodyType___value_28char_20const__2c_20b2BodyType_29(emscripten__enum__b2BodyType___value_28char_20const__2c_20b2BodyType_29(emscripten__enum__b2BodyType___value_28char_20const__2c_20b2BodyType_29($0 + 4308 | 0, 1688, 0), 1702, 1), 1729, 2);
 emscripten__class__std____2__vector_int_2c_20std____2__allocator_int___2c_20emscripten__internal__NoBaseClass__20emscripten__register_vector_int__28char_20const__29(3715);
 emscripten__value_object_b2Vec2___value_object_28char_20const__29($0 + 4306 | 0, 11871);
 emscripten__value_object_b2Vec2___20emscripten__value_object_b2Vec2___field_b2Vec2_2c_20float__28char_20const__2c_20float_20b2Vec2____29(emscripten__value_object_b2Vec2___20emscripten__value_object_b2Vec2___field_b2Vec2_2c_20float__28char_20const__2c_20float_20b2Vec2____29($0 + 4306 | 0, 1834, 0), 1775, 4);
 emscripten__value_object_b2Vec2____value_object_28_29($0 + 4306 | 0);
 emscripten__class__std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___2c_20emscripten__internal__NoBaseClass__20emscripten__register_vector_b2Vec2__28char_20const__29(3704);
 emscripten__value_object_b2Rot___value_object_28char_20const__29($0 + 4304 | 0, 1978);
 emscripten__value_object_b2Rot___20emscripten__value_object_b2Rot___field_b2Rot_2c_20float__28char_20const__2c_20float_20b2Rot____29(emscripten__value_object_b2Rot___20emscripten__value_object_b2Rot___field_b2Rot_2c_20float__28char_20const__2c_20float_20b2Rot____29($0 + 4304 | 0, 3613, 0), 10208, 4);
 emscripten__value_object_b2Rot____value_object_28_29($0 + 4304 | 0);
 emscripten__value_object_b2Transform___value_object_28char_20const__29($0 + 4303 | 0, 6827);
 emscripten__value_object_b2Transform___20emscripten__value_object_b2Transform___field_b2Transform_2c_20b2Rot__28char_20const__2c_20b2Rot_20b2Transform____29(emscripten__value_object_b2Transform___20emscripten__value_object_b2Transform___field_b2Transform_2c_20b2Vec2__28char_20const__2c_20b2Vec2_20b2Transform____29($0 + 4303 | 0, 6152, 0), 4119, 8);
 emscripten__value_object_b2Transform____value_object_28_29($0 + 4303 | 0);
 emscripten__value_object_b2Color___value_object_28char_20const__29($0 + 4302 | 0, 3830);
 emscripten__value_object_b2Color___20emscripten__value_object_b2Color___field_b2Color_2c_20float__28char_20const__2c_20float_20b2Color____29(emscripten__value_object_b2Color___20emscripten__value_object_b2Color___field_b2Color_2c_20float__28char_20const__2c_20float_20b2Color____29(emscripten__value_object_b2Color___20emscripten__value_object_b2Color___field_b2Color_2c_20float__28char_20const__2c_20float_20b2Color____29(emscripten__value_object_b2Color___20emscripten__value_object_b2Color___field_b2Color_2c_20float__28char_20const__2c_20float_20b2Color____29($0 + 4302 | 0, 4117, 0), 7701, 4), 10210, 8), 10316, 12);
 emscripten__value_object_b2Color____value_object_28_29($0 + 4302 | 0);
 emscripten__value_object_b2RayCastInput___value_object_28char_20const__29($0 + 4301 | 0, 1914);
 emscripten__value_object_b2RayCastInput___20emscripten__value_object_b2RayCastInput___field_b2RayCastInput_2c_20float__28char_20const__2c_20float_20b2RayCastInput____29(emscripten__value_object_b2RayCastInput___20emscripten__value_object_b2RayCastInput___field_b2RayCastInput_2c_20b2Vec2__28char_20const__2c_20b2Vec2_20b2RayCastInput____29(emscripten__value_object_b2RayCastInput___20emscripten__value_object_b2RayCastInput___field_b2RayCastInput_2c_20b2Vec2__28char_20const__2c_20b2Vec2_20b2RayCastInput____29($0 + 4301 | 0, 11922, 0), 11868, 8), 6503, 16);
 emscripten__value_object_b2RayCastInput____value_object_28_29($0 + 4301 | 0);
 emscripten__value_object_b2RayCastOutput___value_object_28char_20const__29($0 + 4300 | 0, 1900);
 emscripten__value_object_b2RayCastOutput___20emscripten__value_object_b2RayCastOutput___field_b2RayCastOutput_2c_20float__28char_20const__2c_20float_20b2RayCastOutput____29(emscripten__value_object_b2RayCastOutput___20emscripten__value_object_b2RayCastOutput___field_b2RayCastOutput_2c_20b2Vec2__28char_20const__2c_20b2Vec2_20b2RayCastOutput____29($0 + 4300 | 0, 6858, 0), 6462, 8);
 emscripten__value_object_b2RayCastOutput____value_object_28_29($0 + 4300 | 0);
 emscripten__value_object_b2MassData___value_object_28char_20const__29($0 + 4299 | 0, 10258);
 emscripten__value_object_b2MassData___20emscripten__value_object_b2MassData___field_b2MassData_2c_20float__28char_20const__2c_20float_20b2MassData____29(emscripten__value_object_b2MassData___20emscripten__value_object_b2MassData___field_b2MassData_2c_20b2Vec2__28char_20const__2c_20b2Vec2_20b2MassData____29(emscripten__value_object_b2MassData___20emscripten__value_object_b2MassData___field_b2MassData_2c_20float__28char_20const__2c_20float_20b2MassData____29($0 + 4299 | 0, 3449, 0), 3852, 4), 10682, 12);
 emscripten__value_object_b2MassData____value_object_28_29($0 + 4299 | 0);
 emscripten__value_object_b2Filter___value_object_28char_20const__29($0 + 4298 | 0, 3954);
 emscripten__value_object_b2Filter___20emscripten__value_object_b2Filter___field_b2Filter_2c_20short__28char_20const__2c_20short_20b2Filter____29(emscripten__value_object_b2Filter___20emscripten__value_object_b2Filter___field_b2Filter_2c_20unsigned_20short__28char_20const__2c_20unsigned_20short_20b2Filter____29(emscripten__value_object_b2Filter___20emscripten__value_object_b2Filter___field_b2Filter_2c_20unsigned_20short__28char_20const__2c_20unsigned_20short_20b2Filter____29($0 + 4298 | 0, 3427, 0), 3440, 2), 1796, 4);
 emscripten__value_object_b2Filter____value_object_28_29($0 + 4298 | 0);
 HEAP32[$0 + 4340 >> 2] = $0 + 4297;
 HEAP32[$0 + 4336 >> 2] = 6865;
 void_20emscripten__internal__NoBaseClass__verify_b2QueryCallback__28_29();
 HEAP32[$0 + 4332 >> 2] = 43;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2QueryCallback__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 4328 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2QueryCallback__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 4324 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 4320 >> 2] = 44;
 $1 = emscripten__internal__TypeID_b2QueryCallback_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2QueryCallback__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2QueryCallback_20const__2c_20void___get_28_29();
 $4 = emscripten__internal__NoBaseClass__get_28_29();
 HEAP32[$0 + 14776 >> 2] = HEAP32[$0 + 4332 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 4332 >> 2];
 HEAP32[$0 + 14772 >> 2] = HEAP32[$0 + 4328 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $8 = HEAP32[$0 + 4328 >> 2];
 HEAP32[$0 + 14768 >> 2] = HEAP32[$0 + 4324 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $10 = HEAP32[$0 + 4324 >> 2];
 $11 = HEAP32[$0 + 4336 >> 2];
 HEAP32[$0 + 14780 >> 2] = HEAP32[$0 + 4320 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 4320 >> 2]);
 HEAP32[$0 + 4292 >> 2] = 1;
 HEAP32[$0 + 4288 >> 2] = 8;
 $1 = HEAP32[$0 + 4292 >> 2];
 $2 = HEAP32[$0 + 4288 >> 2];
 HEAP32[$0 + 4344 >> 2] = $2;
 HEAP32[$0 + 4348 >> 2] = $1;
 $1 = HEAP32[$0 + 4344 >> 2];
 $2 = HEAP32[$0 + 4348 >> 2];
 HEAP32[$0 + 4376 >> 2] = $0 + 4297;
 HEAP32[$0 + 4372 >> 2] = 8996;
 HEAP32[$0 + 4368 >> 2] = $2;
 HEAP32[$0 + 4364 >> 2] = $1;
 $3 = HEAP32[$0 + 4376 >> 2];
 $4 = HEAP32[$0 + 4372 >> 2];
 $1 = HEAP32[$0 + 4364 >> 2];
 HEAP32[$0 + 4360 >> 2] = HEAP32[$0 + 4368 >> 2];
 HEAP32[$0 + 4356 >> 2] = $1;
 $2 = HEAP32[$0 + 4360 >> 2];
 $1 = HEAP32[$0 + 4356 >> 2];
 HEAP32[$0 + 1968 >> 2] = $1;
 HEAP32[$0 + 1972 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2QueryCallback____29_28unsigned_20int_29___invoke_b2QueryCallback_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20bool_20_28b2QueryCallback____29_28unsigned_20int_29_29($4, $0 + 1968 | 0);
 HEAP32[$0 + 4388 >> 2] = $3;
 HEAP32[$0 + 4384 >> 2] = 4024;
 $1 = HEAP32[$0 + 4388 >> 2];
 $2 = HEAP32[$0 + 4384 >> 2];
 HEAP32[$0 + 14804 >> 2] = $0 + 4383;
 HEAP32[$0 + 14800 >> 2] = $2;
 void_20emscripten__base_b2QueryCallback___verify_b2QueryCallbackWrapper__28_29();
 HEAP32[$0 + 14796 >> 2] = 45;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2QueryCallback__20_28_emscripten__base_b2QueryCallback___getUpcaster_b2QueryCallbackWrapper__28_29_29_28b2QueryCallbackWrapper__29(), 
 HEAP32[wasm2js_i32$0 + 14792 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2QueryCallbackWrapper__20_28_emscripten__base_b2QueryCallback___getDowncaster_b2QueryCallbackWrapper__28_29_29_28b2QueryCallback__29(), 
 HEAP32[wasm2js_i32$0 + 14788 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 14784 >> 2] = 46;
 $2 = emscripten__internal__TypeID_b2QueryCallbackWrapper_2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2QueryCallbackWrapper__2c_20void___get_28_29();
 $4 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2QueryCallbackWrapper_20const__2c_20void___get_28_29();
 $5 = emscripten__base_b2QueryCallback___get_28_29();
 HEAP32[$0 + 14860 >> 2] = HEAP32[$0 + 14796 >> 2];
 $6 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $7 = HEAP32[$0 + 14796 >> 2];
 HEAP32[$0 + 14864 >> 2] = HEAP32[$0 + 14792 >> 2];
 $8 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $9 = HEAP32[$0 + 14792 >> 2];
 HEAP32[$0 + 14868 >> 2] = HEAP32[$0 + 14788 >> 2];
 $10 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $11 = HEAP32[$0 + 14788 >> 2];
 $12 = HEAP32[$0 + 14800 >> 2];
 HEAP32[$0 + 14872 >> 2] = HEAP32[$0 + 14784 >> 2];
 _embind_register_class($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, $12 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 14784 >> 2]);
 $2 = void_20_28_emscripten__select_overload_void_20_28b2QueryCallbackWrapper__29__28void_20_28__29_28b2QueryCallbackWrapper__29_29_29_28b2QueryCallbackWrapper__29(emscripten__class__b2QueryCallback_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2QueryCallback_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2QueryCallbackWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2QueryCallbackWrapper__29__operator_20void_20_28__29_28b2QueryCallbackWrapper__29_28_29_20const($0 + 4382 | 0));
 HEAP32[$0 + 14816 >> 2] = $0 + 4383;
 HEAP32[$0 + 14812 >> 2] = 6355;
 HEAP32[$0 + 14808 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2QueryCallbackWrapper__29___invoke_b2QueryCallbackWrapper__28char_20const__2c_20void_20_28__29_28b2QueryCallbackWrapper__29_29(HEAP32[$0 + 14812 >> 2], HEAP32[$0 + 14808 >> 2]);
 HEAP32[$0 + 14836 >> 2] = $1;
 HEAP32[$0 + 14832 >> 2] = 2873;
 HEAP32[$0 + 14828 >> 2] = 47;
 $1 = HEAP32[$0 + 14836 >> 2];
 HEAP32[$0 + 14820 >> 2] = 48;
 $2 = emscripten__internal__TypeID_b2QueryCallback_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 14832 >> 2];
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointer_emscripten__ret_val____ArgTypeList_b2QueryCallbackWrapper__2c_20emscripten__val_____getCount_28_29_20const($0 + 14827 | 0);
 $5 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointer_emscripten__ret_val____ArgTypeList_b2QueryCallbackWrapper__2c_20emscripten__val_____getTypes_28_29_20const($0 + 14827 | 0);
 HEAP32[$0 + 14876 >> 2] = HEAP32[$0 + 14820 >> 2];
 _embind_register_class_class_function($2 | 0, $3 | 0, $4 | 0, $5 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 14820 >> 2], HEAP32[$0 + 14828 >> 2], 0);
 HEAP32[$0 + 14856 >> 2] = $1;
 HEAP32[$0 + 14852 >> 2] = 9857;
 HEAP32[$0 + 14848 >> 2] = 49;
 HEAP32[$0 + 14840 >> 2] = 50;
 $1 = emscripten__internal__TypeID_b2QueryCallback_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 14852 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const____getCount_28_29_20const($0 + 14847 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const____getTypes_28_29_20const($0 + 14847 | 0);
 HEAP32[$0 + 14880 >> 2] = HEAP32[$0 + 14840 >> 2];
 _embind_register_class_class_function($1 | 0, $2 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 14840 >> 2], HEAP32[$0 + 14848 >> 2], 0);
 HEAP32[$0 + 4412 >> 2] = $0 + 4286;
 HEAP32[$0 + 4408 >> 2] = 6879;
 void_20emscripten__internal__NoBaseClass__verify_b2RayCastCallback__28_29();
 HEAP32[$0 + 4404 >> 2] = 51;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2RayCastCallback__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 4400 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2RayCastCallback__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 4396 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 4392 >> 2] = 52;
 $1 = emscripten__internal__TypeID_b2RayCastCallback_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RayCastCallback__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RayCastCallback_20const__2c_20void___get_28_29();
 $4 = emscripten__internal__NoBaseClass__get_28_29();
 HEAP32[$0 + 14884 >> 2] = HEAP32[$0 + 4404 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 4404 >> 2];
 HEAP32[$0 + 14764 >> 2] = HEAP32[$0 + 4400 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $8 = HEAP32[$0 + 4400 >> 2];
 HEAP32[$0 + 14760 >> 2] = HEAP32[$0 + 4396 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $10 = HEAP32[$0 + 4396 >> 2];
 $11 = HEAP32[$0 + 4408 >> 2];
 HEAP32[$0 + 14888 >> 2] = HEAP32[$0 + 4392 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 4392 >> 2]);
 HEAP32[$0 + 4280 >> 2] = 1;
 HEAP32[$0 + 4276 >> 2] = 8;
 $1 = HEAP32[$0 + 4280 >> 2];
 $2 = HEAP32[$0 + 4276 >> 2];
 HEAP32[$0 + 4416 >> 2] = $2;
 HEAP32[$0 + 4420 >> 2] = $1;
 $1 = HEAP32[$0 + 4416 >> 2];
 $2 = HEAP32[$0 + 4420 >> 2];
 HEAP32[$0 + 4448 >> 2] = $0 + 4286;
 HEAP32[$0 + 4444 >> 2] = 8996;
 HEAP32[$0 + 4440 >> 2] = $2;
 HEAP32[$0 + 4436 >> 2] = $1;
 $3 = HEAP32[$0 + 4448 >> 2];
 $4 = HEAP32[$0 + 4444 >> 2];
 $1 = HEAP32[$0 + 4436 >> 2];
 HEAP32[$0 + 4432 >> 2] = HEAP32[$0 + 4440 >> 2];
 HEAP32[$0 + 4428 >> 2] = $1;
 $2 = HEAP32[$0 + 4432 >> 2];
 $1 = HEAP32[$0 + 4428 >> 2];
 HEAP32[$0 + 1960 >> 2] = $1;
 HEAP32[$0 + 1964 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2RayCastCallback____29_28unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_29___invoke_b2RayCastCallback_2c_20emscripten__pure_virtual_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20float_20_28b2RayCastCallback____29_28unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_29_29($4, $0 + 1960 | 0);
 HEAP32[$0 + 4460 >> 2] = $3;
 HEAP32[$0 + 4456 >> 2] = 4045;
 $1 = HEAP32[$0 + 4460 >> 2];
 $2 = HEAP32[$0 + 4456 >> 2];
 HEAP32[$0 + 14912 >> 2] = $0 + 4455;
 HEAP32[$0 + 14908 >> 2] = $2;
 void_20emscripten__base_b2RayCastCallback___verify_b2RayCastCallbackWrapper__28_29();
 HEAP32[$0 + 14904 >> 2] = 53;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2RayCastCallback__20_28_emscripten__base_b2RayCastCallback___getUpcaster_b2RayCastCallbackWrapper__28_29_29_28b2RayCastCallbackWrapper__29(), 
 HEAP32[wasm2js_i32$0 + 14900 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2RayCastCallbackWrapper__20_28_emscripten__base_b2RayCastCallback___getDowncaster_b2RayCastCallbackWrapper__28_29_29_28b2RayCastCallback__29(), 
 HEAP32[wasm2js_i32$0 + 14896 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 14892 >> 2] = 54;
 $2 = emscripten__internal__TypeID_b2RayCastCallbackWrapper_2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RayCastCallbackWrapper__2c_20void___get_28_29();
 $4 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RayCastCallbackWrapper_20const__2c_20void___get_28_29();
 $5 = emscripten__base_b2RayCastCallback___get_28_29();
 HEAP32[$0 + 14972 >> 2] = HEAP32[$0 + 14904 >> 2];
 $6 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $7 = HEAP32[$0 + 14904 >> 2];
 HEAP32[$0 + 14976 >> 2] = HEAP32[$0 + 14900 >> 2];
 $8 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $9 = HEAP32[$0 + 14900 >> 2];
 HEAP32[$0 + 14980 >> 2] = HEAP32[$0 + 14896 >> 2];
 $10 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $11 = HEAP32[$0 + 14896 >> 2];
 $12 = HEAP32[$0 + 14908 >> 2];
 HEAP32[$0 + 14984 >> 2] = HEAP32[$0 + 14892 >> 2];
 _embind_register_class($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, $12 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 14892 >> 2]);
 $2 = void_20_28_emscripten__select_overload_void_20_28b2RayCastCallbackWrapper__29__28void_20_28__29_28b2RayCastCallbackWrapper__29_29_29_28b2RayCastCallbackWrapper__29(emscripten__class__b2RayCastCallback_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2RayCastCallback_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2RayCastCallbackWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2RayCastCallbackWrapper__29__operator_20void_20_28__29_28b2RayCastCallbackWrapper__29_28_29_20const($0 + 4454 | 0));
 HEAP32[$0 + 14924 >> 2] = $0 + 4455;
 HEAP32[$0 + 14920 >> 2] = 6355;
 HEAP32[$0 + 14916 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2RayCastCallbackWrapper__29___invoke_b2RayCastCallbackWrapper__28char_20const__2c_20void_20_28__29_28b2RayCastCallbackWrapper__29_29(HEAP32[$0 + 14920 >> 2], HEAP32[$0 + 14916 >> 2]);
 HEAP32[$0 + 14944 >> 2] = $1;
 HEAP32[$0 + 14940 >> 2] = 2873;
 HEAP32[$0 + 14936 >> 2] = 55;
 $1 = HEAP32[$0 + 14944 >> 2];
 HEAP32[$0 + 14928 >> 2] = 56;
 $2 = emscripten__internal__TypeID_b2RayCastCallback_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 14940 >> 2];
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointer_emscripten__ret_val____ArgTypeList_b2RayCastCallbackWrapper__2c_20emscripten__val_____getCount_28_29_20const($0 + 14935 | 0);
 $5 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointer_emscripten__ret_val____ArgTypeList_b2RayCastCallbackWrapper__2c_20emscripten__val_____getTypes_28_29_20const($0 + 14935 | 0);
 HEAP32[$0 + 14988 >> 2] = HEAP32[$0 + 14928 >> 2];
 _embind_register_class_class_function($2 | 0, $3 | 0, $4 | 0, $5 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 14928 >> 2], HEAP32[$0 + 14936 >> 2], 0);
 HEAP32[$0 + 14964 >> 2] = $1;
 HEAP32[$0 + 14960 >> 2] = 9857;
 HEAP32[$0 + 14956 >> 2] = 57;
 HEAP32[$0 + 14948 >> 2] = 50;
 $1 = emscripten__internal__TypeID_b2RayCastCallback_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 14960 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const____getCount_28_29_20const($0 + 14955 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const____getTypes_28_29_20const($0 + 14955 | 0);
 HEAP32[$0 + 14968 >> 2] = HEAP32[$0 + 14948 >> 2];
 _embind_register_class_class_function($1 | 0, $2 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 14948 >> 2], HEAP32[$0 + 14956 >> 2], 0);
 HEAP32[$0 + 4484 >> 2] = $0 + 4274;
 HEAP32[$0 + 4480 >> 2] = 4071;
 void_20emscripten__internal__NoBaseClass__verify_b2ContactListener__28_29();
 HEAP32[$0 + 4476 >> 2] = 58;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2ContactListener__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 4472 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2ContactListener__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 4468 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 4464 >> 2] = 59;
 $1 = emscripten__internal__TypeID_b2ContactListener_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2ContactListener__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2ContactListener_20const__2c_20void___get_28_29();
 $4 = emscripten__internal__NoBaseClass__get_28_29();
 HEAP32[$0 + 14992 >> 2] = HEAP32[$0 + 4476 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 4476 >> 2];
 HEAP32[$0 + 14756 >> 2] = HEAP32[$0 + 4472 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $8 = HEAP32[$0 + 4472 >> 2];
 HEAP32[$0 + 14752 >> 2] = HEAP32[$0 + 4468 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $10 = HEAP32[$0 + 4468 >> 2];
 $11 = HEAP32[$0 + 4480 >> 2];
 HEAP32[$0 + 14996 >> 2] = HEAP32[$0 + 4464 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 4464 >> 2]);
 HEAP32[$0 + 4268 >> 2] = 1;
 HEAP32[$0 + 4264 >> 2] = 8;
 $1 = HEAP32[$0 + 4268 >> 2];
 $2 = HEAP32[$0 + 4264 >> 2];
 HEAP32[$0 + 4520 >> 2] = $2;
 HEAP32[$0 + 4524 >> 2] = $1;
 $1 = HEAP32[$0 + 4520 >> 2];
 $2 = HEAP32[$0 + 4524 >> 2];
 HEAP32[$0 + 4548 >> 2] = $0 + 4274;
 HEAP32[$0 + 4544 >> 2] = 3162;
 HEAP32[$0 + 4540 >> 2] = $2;
 HEAP32[$0 + 4536 >> 2] = $1;
 $3 = HEAP32[$0 + 4548 >> 2];
 $4 = HEAP32[$0 + 4544 >> 2];
 $1 = HEAP32[$0 + 4536 >> 2];
 HEAP32[$0 + 4532 >> 2] = HEAP32[$0 + 4540 >> 2];
 HEAP32[$0 + 4528 >> 2] = $1;
 $2 = HEAP32[$0 + 4532 >> 2];
 $1 = HEAP32[$0 + 4528 >> 2];
 HEAP32[$0 + 1952 >> 2] = $1;
 HEAP32[$0 + 1956 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2ContactListener____29_28unsigned_20int_29___invoke_b2ContactListener_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2ContactListener____29_28unsigned_20int_29_29($4, $0 + 1952 | 0);
 HEAP32[$0 + 4256 >> 2] = 1;
 HEAP32[$0 + 4252 >> 2] = 12;
 $1 = HEAP32[$0 + 4256 >> 2];
 $2 = HEAP32[$0 + 4252 >> 2];
 HEAP32[$0 + 4488 >> 2] = $2;
 HEAP32[$0 + 4492 >> 2] = $1;
 $1 = HEAP32[$0 + 4488 >> 2];
 $2 = HEAP32[$0 + 4492 >> 2];
 HEAP32[$0 + 4516 >> 2] = $3;
 HEAP32[$0 + 4512 >> 2] = 3264;
 HEAP32[$0 + 4508 >> 2] = $2;
 HEAP32[$0 + 4504 >> 2] = $1;
 $3 = HEAP32[$0 + 4516 >> 2];
 $4 = HEAP32[$0 + 4512 >> 2];
 $1 = HEAP32[$0 + 4504 >> 2];
 HEAP32[$0 + 4500 >> 2] = HEAP32[$0 + 4508 >> 2];
 HEAP32[$0 + 4496 >> 2] = $1;
 $2 = HEAP32[$0 + 4500 >> 2];
 $1 = HEAP32[$0 + 4496 >> 2];
 HEAP32[$0 + 1944 >> 2] = $1;
 HEAP32[$0 + 1948 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2ContactListener____29_28unsigned_20int_29___invoke_b2ContactListener_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2ContactListener____29_28unsigned_20int_29_29($4, $0 + 1944 | 0);
 HEAP32[$0 + 4244 >> 2] = 1;
 HEAP32[$0 + 4240 >> 2] = 16;
 $1 = HEAP32[$0 + 4244 >> 2];
 $2 = HEAP32[$0 + 4240 >> 2];
 HEAP32[$0 + 4584 >> 2] = $2;
 HEAP32[$0 + 4588 >> 2] = $1;
 $1 = HEAP32[$0 + 4584 >> 2];
 $2 = HEAP32[$0 + 4588 >> 2];
 HEAP32[$0 + 4612 >> 2] = $3;
 HEAP32[$0 + 4608 >> 2] = 8517;
 HEAP32[$0 + 4604 >> 2] = $2;
 HEAP32[$0 + 4600 >> 2] = $1;
 $3 = HEAP32[$0 + 4612 >> 2];
 $4 = HEAP32[$0 + 4608 >> 2];
 $1 = HEAP32[$0 + 4600 >> 2];
 HEAP32[$0 + 4596 >> 2] = HEAP32[$0 + 4604 >> 2];
 HEAP32[$0 + 4592 >> 2] = $1;
 $2 = HEAP32[$0 + 4596 >> 2];
 $1 = HEAP32[$0 + 4592 >> 2];
 HEAP32[$0 + 1936 >> 2] = $1;
 HEAP32[$0 + 1940 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2ContactListener____29_28unsigned_20int_2c_20unsigned_20int_29___invoke_b2ContactListener_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2ContactListener____29_28unsigned_20int_2c_20unsigned_20int_29_29($4, $0 + 1936 | 0);
 HEAP32[$0 + 4232 >> 2] = 1;
 HEAP32[$0 + 4228 >> 2] = 20;
 $1 = HEAP32[$0 + 4232 >> 2];
 $2 = HEAP32[$0 + 4228 >> 2];
 HEAP32[$0 + 4552 >> 2] = $2;
 HEAP32[$0 + 4556 >> 2] = $1;
 $1 = HEAP32[$0 + 4552 >> 2];
 $2 = HEAP32[$0 + 4556 >> 2];
 HEAP32[$0 + 4580 >> 2] = $3;
 HEAP32[$0 + 4576 >> 2] = 8507;
 HEAP32[$0 + 4572 >> 2] = $2;
 HEAP32[$0 + 4568 >> 2] = $1;
 $3 = HEAP32[$0 + 4580 >> 2];
 $4 = HEAP32[$0 + 4576 >> 2];
 $1 = HEAP32[$0 + 4568 >> 2];
 HEAP32[$0 + 4564 >> 2] = HEAP32[$0 + 4572 >> 2];
 HEAP32[$0 + 4560 >> 2] = $1;
 $2 = HEAP32[$0 + 4564 >> 2];
 $1 = HEAP32[$0 + 4560 >> 2];
 HEAP32[$0 + 1928 >> 2] = $1;
 HEAP32[$0 + 1932 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2ContactListener____29_28unsigned_20int_2c_20unsigned_20int_29___invoke_b2ContactListener_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2ContactListener____29_28unsigned_20int_2c_20unsigned_20int_29_29($4, $0 + 1928 | 0);
 HEAP32[$0 + 4224 >> 2] = 0;
 HEAP32[$0 + 4220 >> 2] = 60;
 $1 = HEAP32[$0 + 4224 >> 2];
 $2 = HEAP32[$0 + 4220 >> 2];
 HEAP32[$0 + 4648 >> 2] = $2;
 HEAP32[$0 + 4652 >> 2] = $1;
 $1 = HEAP32[$0 + 4648 >> 2];
 $2 = HEAP32[$0 + 4652 >> 2];
 HEAP32[$0 + 4676 >> 2] = $3;
 HEAP32[$0 + 4672 >> 2] = 9012;
 HEAP32[$0 + 4668 >> 2] = $2;
 HEAP32[$0 + 4664 >> 2] = $1;
 $3 = HEAP32[$0 + 4676 >> 2];
 $4 = HEAP32[$0 + 4672 >> 2];
 $1 = HEAP32[$0 + 4664 >> 2];
 HEAP32[$0 + 4660 >> 2] = HEAP32[$0 + 4668 >> 2];
 HEAP32[$0 + 4656 >> 2] = $1;
 $2 = HEAP32[$0 + 4660 >> 2];
 $1 = HEAP32[$0 + 4656 >> 2];
 HEAP32[$0 + 1920 >> 2] = $1;
 HEAP32[$0 + 1924 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2ContactListenerWrapper____29_28unsigned_20int_29___invoke_b2ContactListener__28char_20const__2c_20void_20_28b2ContactListenerWrapper____29_28unsigned_20int_29_29($4, $0 + 1920 | 0);
 HEAP32[$0 + 4216 >> 2] = 0;
 HEAP32[$0 + 4212 >> 2] = 61;
 $1 = HEAP32[$0 + 4216 >> 2];
 $2 = HEAP32[$0 + 4212 >> 2];
 HEAP32[$0 + 4616 >> 2] = $2;
 HEAP32[$0 + 4620 >> 2] = $1;
 $1 = HEAP32[$0 + 4616 >> 2];
 $2 = HEAP32[$0 + 4620 >> 2];
 HEAP32[$0 + 4644 >> 2] = $3;
 HEAP32[$0 + 4640 >> 2] = 9010;
 HEAP32[$0 + 4636 >> 2] = $2;
 HEAP32[$0 + 4632 >> 2] = $1;
 $3 = HEAP32[$0 + 4644 >> 2];
 $4 = HEAP32[$0 + 4640 >> 2];
 $1 = HEAP32[$0 + 4632 >> 2];
 HEAP32[$0 + 4628 >> 2] = HEAP32[$0 + 4636 >> 2];
 HEAP32[$0 + 4624 >> 2] = $1;
 $2 = HEAP32[$0 + 4628 >> 2];
 $1 = HEAP32[$0 + 4624 >> 2];
 HEAP32[$0 + 1912 >> 2] = $1;
 HEAP32[$0 + 1916 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2ContactListenerWrapper____29_28unsigned_20int_29___invoke_b2ContactListener__28char_20const__2c_20void_20_28b2ContactListenerWrapper____29_28unsigned_20int_29_29($4, $0 + 1912 | 0);
 HEAP32[$0 + 4208 >> 2] = 0;
 HEAP32[$0 + 4204 >> 2] = 62;
 $1 = HEAP32[$0 + 4208 >> 2];
 $2 = HEAP32[$0 + 4204 >> 2];
 HEAP32[$0 + 4680 >> 2] = $2;
 HEAP32[$0 + 4684 >> 2] = $1;
 $1 = HEAP32[$0 + 4680 >> 2];
 $2 = HEAP32[$0 + 4684 >> 2];
 HEAP32[$0 + 4712 >> 2] = $3;
 HEAP32[$0 + 4708 >> 2] = 7857;
 HEAP32[$0 + 4704 >> 2] = $2;
 HEAP32[$0 + 4700 >> 2] = $1;
 $3 = HEAP32[$0 + 4712 >> 2];
 $4 = HEAP32[$0 + 4708 >> 2];
 $1 = HEAP32[$0 + 4700 >> 2];
 HEAP32[$0 + 4696 >> 2] = HEAP32[$0 + 4704 >> 2];
 HEAP32[$0 + 4692 >> 2] = $1;
 $2 = HEAP32[$0 + 4696 >> 2];
 $1 = HEAP32[$0 + 4692 >> 2];
 HEAP32[$0 + 1904 >> 2] = $1;
 HEAP32[$0 + 1908 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2ContactListenerWrapper____29_28unsigned_20int_29___invoke_b2ContactListener__28char_20const__2c_20bool_20_28b2ContactListenerWrapper____29_28unsigned_20int_29_29($4, $0 + 1904 | 0);
 HEAP32[$0 + 4724 >> 2] = $3;
 HEAP32[$0 + 4720 >> 2] = 4001;
 $1 = HEAP32[$0 + 4724 >> 2];
 $2 = HEAP32[$0 + 4720 >> 2];
 HEAP32[$0 + 15020 >> 2] = $0 + 4719;
 HEAP32[$0 + 15016 >> 2] = $2;
 void_20emscripten__base_b2ContactListener___verify_b2ContactListenerWrapper__28_29();
 HEAP32[$0 + 15012 >> 2] = 63;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2ContactListener__20_28_emscripten__base_b2ContactListener___getUpcaster_b2ContactListenerWrapper__28_29_29_28b2ContactListenerWrapper__29(), 
 HEAP32[wasm2js_i32$0 + 15008 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2ContactListenerWrapper__20_28_emscripten__base_b2ContactListener___getDowncaster_b2ContactListenerWrapper__28_29_29_28b2ContactListener__29(), 
 HEAP32[wasm2js_i32$0 + 15004 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 15e3 >> 2] = 64;
 $2 = emscripten__internal__TypeID_b2ContactListenerWrapper_2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper__2c_20void___get_28_29();
 $4 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper_20const__2c_20void___get_28_29();
 $5 = emscripten__base_b2ContactListener___get_28_29();
 HEAP32[$0 + 15080 >> 2] = HEAP32[$0 + 15012 >> 2];
 $6 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $7 = HEAP32[$0 + 15012 >> 2];
 HEAP32[$0 + 15084 >> 2] = HEAP32[$0 + 15008 >> 2];
 $8 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $9 = HEAP32[$0 + 15008 >> 2];
 HEAP32[$0 + 15088 >> 2] = HEAP32[$0 + 15004 >> 2];
 $10 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $11 = HEAP32[$0 + 15004 >> 2];
 $12 = HEAP32[$0 + 15016 >> 2];
 HEAP32[$0 + 15092 >> 2] = HEAP32[$0 + 15e3 >> 2];
 _embind_register_class($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, $12 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 15e3 >> 2]);
 $2 = void_20_28_emscripten__select_overload_void_20_28b2ContactListenerWrapper__29__28void_20_28__29_28b2ContactListenerWrapper__29_29_29_28b2ContactListenerWrapper__29(emscripten__class__b2ContactListener_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2ContactListener_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2ContactListenerWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2ContactListenerWrapper__29__operator_20void_20_28__29_28b2ContactListenerWrapper__29_28_29_20const($0 + 4718 | 0));
 HEAP32[$0 + 15032 >> 2] = $0 + 4719;
 HEAP32[$0 + 15028 >> 2] = 6355;
 HEAP32[$0 + 15024 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2ContactListenerWrapper__29___invoke_b2ContactListenerWrapper__28char_20const__2c_20void_20_28__29_28b2ContactListenerWrapper__29_29(HEAP32[$0 + 15028 >> 2], HEAP32[$0 + 15024 >> 2]);
 HEAP32[$0 + 15052 >> 2] = $1;
 HEAP32[$0 + 15048 >> 2] = 2873;
 HEAP32[$0 + 15044 >> 2] = 65;
 $1 = HEAP32[$0 + 15052 >> 2];
 HEAP32[$0 + 15036 >> 2] = 66;
 $2 = emscripten__internal__TypeID_b2ContactListener_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 15048 >> 2];
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointer_emscripten__ret_val____ArgTypeList_b2ContactListenerWrapper__2c_20emscripten__val_____getCount_28_29_20const($0 + 15043 | 0);
 $5 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointer_emscripten__ret_val____ArgTypeList_b2ContactListenerWrapper__2c_20emscripten__val_____getTypes_28_29_20const($0 + 15043 | 0);
 HEAP32[$0 + 15096 >> 2] = HEAP32[$0 + 15036 >> 2];
 _embind_register_class_class_function($2 | 0, $3 | 0, $4 | 0, $5 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 15036 >> 2], HEAP32[$0 + 15044 >> 2], 0);
 HEAP32[$0 + 15072 >> 2] = $1;
 HEAP32[$0 + 15068 >> 2] = 9857;
 HEAP32[$0 + 15064 >> 2] = 67;
 HEAP32[$0 + 15056 >> 2] = 50;
 $1 = emscripten__internal__TypeID_b2ContactListener_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 15068 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const____getCount_28_29_20const($0 + 15063 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const____getTypes_28_29_20const($0 + 15063 | 0);
 HEAP32[$0 + 15076 >> 2] = HEAP32[$0 + 15056 >> 2];
 _embind_register_class_class_function($1 | 0, $2 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 15056 >> 2], HEAP32[$0 + 15064 >> 2], 0);
 HEAP32[$0 + 4748 >> 2] = $0 + 4202;
 HEAP32[$0 + 4744 >> 2] = 1861;
 void_20emscripten__internal__NoBaseClass__verify_b2Draw__28_29();
 HEAP32[$0 + 4740 >> 2] = 68;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2Draw__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 4736 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2Draw__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 4732 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 4728 >> 2] = 69;
 $1 = emscripten__internal__TypeID_b2Draw_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Draw__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Draw_20const__2c_20void___get_28_29();
 $4 = emscripten__internal__NoBaseClass__get_28_29();
 HEAP32[$0 + 15100 >> 2] = HEAP32[$0 + 4740 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 4740 >> 2];
 HEAP32[$0 + 14748 >> 2] = HEAP32[$0 + 4736 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $8 = HEAP32[$0 + 4736 >> 2];
 HEAP32[$0 + 14744 >> 2] = HEAP32[$0 + 4732 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $10 = HEAP32[$0 + 4732 >> 2];
 $11 = HEAP32[$0 + 4744 >> 2];
 HEAP32[$0 + 15104 >> 2] = HEAP32[$0 + 4728 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 4728 >> 2]);
 HEAP32[$0 + 4196 >> 2] = 0;
 HEAP32[$0 + 4192 >> 2] = 70;
 $1 = HEAP32[$0 + 4196 >> 2];
 $2 = HEAP32[$0 + 4192 >> 2];
 HEAP32[$0 + 4816 >> 2] = $2;
 HEAP32[$0 + 4820 >> 2] = $1;
 $1 = HEAP32[$0 + 4816 >> 2];
 $2 = HEAP32[$0 + 4820 >> 2];
 HEAP32[$0 + 4844 >> 2] = $0 + 4202;
 HEAP32[$0 + 4840 >> 2] = 3507;
 HEAP32[$0 + 4836 >> 2] = $2;
 HEAP32[$0 + 4832 >> 2] = $1;
 $3 = HEAP32[$0 + 4844 >> 2];
 $4 = HEAP32[$0 + 4840 >> 2];
 $1 = HEAP32[$0 + 4832 >> 2];
 HEAP32[$0 + 4828 >> 2] = HEAP32[$0 + 4836 >> 2];
 HEAP32[$0 + 4824 >> 2] = $1;
 $2 = HEAP32[$0 + 4828 >> 2];
 $1 = HEAP32[$0 + 4824 >> 2];
 HEAP32[$0 + 1896 >> 2] = $1;
 HEAP32[$0 + 1900 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Draw____29_28unsigned_20int_29___invoke_b2Draw__28char_20const__2c_20void_20_28b2Draw____29_28unsigned_20int_29_29($4, $0 + 1896 | 0);
 HEAP32[$0 + 4188 >> 2] = 0;
 HEAP32[$0 + 4184 >> 2] = 71;
 $1 = HEAP32[$0 + 4188 >> 2];
 $2 = HEAP32[$0 + 4184 >> 2];
 HEAP32[$0 + 4848 >> 2] = $2;
 HEAP32[$0 + 4852 >> 2] = $1;
 $1 = HEAP32[$0 + 4848 >> 2];
 $2 = HEAP32[$0 + 4852 >> 2];
 HEAP32[$0 + 4876 >> 2] = $3;
 HEAP32[$0 + 4872 >> 2] = 3516;
 HEAP32[$0 + 4868 >> 2] = $2;
 HEAP32[$0 + 4864 >> 2] = $1;
 $3 = HEAP32[$0 + 4876 >> 2];
 $4 = HEAP32[$0 + 4872 >> 2];
 $1 = HEAP32[$0 + 4864 >> 2];
 HEAP32[$0 + 4860 >> 2] = HEAP32[$0 + 4868 >> 2];
 HEAP32[$0 + 4856 >> 2] = $1;
 $2 = HEAP32[$0 + 4860 >> 2];
 $1 = HEAP32[$0 + 4856 >> 2];
 HEAP32[$0 + 1888 >> 2] = $1;
 HEAP32[$0 + 1892 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_unsigned_20int_20_28b2Draw____29_28_29_20const___invoke_b2Draw__28char_20const__2c_20unsigned_20int_20_28b2Draw____29_28_29_20const_29($4, $0 + 1888 | 0);
 HEAP32[$0 + 4180 >> 2] = 0;
 HEAP32[$0 + 4176 >> 2] = 72;
 $1 = HEAP32[$0 + 4180 >> 2];
 $2 = HEAP32[$0 + 4176 >> 2];
 HEAP32[$0 + 4784 >> 2] = $2;
 HEAP32[$0 + 4788 >> 2] = $1;
 $1 = HEAP32[$0 + 4784 >> 2];
 $2 = HEAP32[$0 + 4788 >> 2];
 HEAP32[$0 + 4812 >> 2] = $3;
 HEAP32[$0 + 4808 >> 2] = 3536;
 HEAP32[$0 + 4804 >> 2] = $2;
 HEAP32[$0 + 4800 >> 2] = $1;
 $3 = HEAP32[$0 + 4812 >> 2];
 $4 = HEAP32[$0 + 4808 >> 2];
 $1 = HEAP32[$0 + 4800 >> 2];
 HEAP32[$0 + 4796 >> 2] = HEAP32[$0 + 4804 >> 2];
 HEAP32[$0 + 4792 >> 2] = $1;
 $2 = HEAP32[$0 + 4796 >> 2];
 $1 = HEAP32[$0 + 4792 >> 2];
 HEAP32[$0 + 1880 >> 2] = $1;
 HEAP32[$0 + 1884 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Draw____29_28unsigned_20int_29___invoke_b2Draw__28char_20const__2c_20void_20_28b2Draw____29_28unsigned_20int_29_29($4, $0 + 1880 | 0);
 HEAP32[$0 + 4172 >> 2] = 0;
 HEAP32[$0 + 4168 >> 2] = 73;
 $1 = HEAP32[$0 + 4172 >> 2];
 $2 = HEAP32[$0 + 4168 >> 2];
 HEAP32[$0 + 4752 >> 2] = $2;
 HEAP32[$0 + 4756 >> 2] = $1;
 $1 = HEAP32[$0 + 4752 >> 2];
 $2 = HEAP32[$0 + 4756 >> 2];
 HEAP32[$0 + 4780 >> 2] = $3;
 HEAP32[$0 + 4776 >> 2] = 3525;
 HEAP32[$0 + 4772 >> 2] = $2;
 HEAP32[$0 + 4768 >> 2] = $1;
 $3 = HEAP32[$0 + 4780 >> 2];
 $4 = HEAP32[$0 + 4776 >> 2];
 $1 = HEAP32[$0 + 4768 >> 2];
 HEAP32[$0 + 4764 >> 2] = HEAP32[$0 + 4772 >> 2];
 HEAP32[$0 + 4760 >> 2] = $1;
 $2 = HEAP32[$0 + 4764 >> 2];
 $1 = HEAP32[$0 + 4760 >> 2];
 HEAP32[$0 + 1872 >> 2] = $1;
 HEAP32[$0 + 1876 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Draw____29_28unsigned_20int_29___invoke_b2Draw__28char_20const__2c_20void_20_28b2Draw____29_28unsigned_20int_29_29($4, $0 + 1872 | 0);
 HEAP32[$0 + 4160 >> 2] = 1;
 HEAP32[$0 + 4156 >> 2] = 8;
 $1 = HEAP32[$0 + 4160 >> 2];
 $2 = HEAP32[$0 + 4156 >> 2];
 HEAP32[$0 + 4912 >> 2] = $2;
 HEAP32[$0 + 4916 >> 2] = $1;
 $1 = HEAP32[$0 + 4912 >> 2];
 $2 = HEAP32[$0 + 4916 >> 2];
 HEAP32[$0 + 4940 >> 2] = $3;
 HEAP32[$0 + 4936 >> 2] = 6722;
 HEAP32[$0 + 4932 >> 2] = $2;
 HEAP32[$0 + 4928 >> 2] = $1;
 $3 = HEAP32[$0 + 4940 >> 2];
 $4 = HEAP32[$0 + 4936 >> 2];
 $1 = HEAP32[$0 + 4928 >> 2];
 HEAP32[$0 + 4924 >> 2] = HEAP32[$0 + 4932 >> 2];
 HEAP32[$0 + 4920 >> 2] = $1;
 $2 = HEAP32[$0 + 4924 >> 2];
 $1 = HEAP32[$0 + 4920 >> 2];
 HEAP32[$0 + 1864 >> 2] = $1;
 HEAP32[$0 + 1868 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Draw____29_28unsigned_20int_2c_20int_2c_20b2Color_20const__29___invoke_b2Draw_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Draw____29_28unsigned_20int_2c_20int_2c_20b2Color_20const__29_29($4, $0 + 1864 | 0);
 HEAP32[$0 + 4148 >> 2] = 1;
 HEAP32[$0 + 4144 >> 2] = 12;
 $1 = HEAP32[$0 + 4148 >> 2];
 $2 = HEAP32[$0 + 4144 >> 2];
 HEAP32[$0 + 4880 >> 2] = $2;
 HEAP32[$0 + 4884 >> 2] = $1;
 $1 = HEAP32[$0 + 4880 >> 2];
 $2 = HEAP32[$0 + 4884 >> 2];
 HEAP32[$0 + 4908 >> 2] = $3;
 HEAP32[$0 + 4904 >> 2] = 6734;
 HEAP32[$0 + 4900 >> 2] = $2;
 HEAP32[$0 + 4896 >> 2] = $1;
 $3 = HEAP32[$0 + 4908 >> 2];
 $4 = HEAP32[$0 + 4904 >> 2];
 $1 = HEAP32[$0 + 4896 >> 2];
 HEAP32[$0 + 4892 >> 2] = HEAP32[$0 + 4900 >> 2];
 HEAP32[$0 + 4888 >> 2] = $1;
 $2 = HEAP32[$0 + 4892 >> 2];
 $1 = HEAP32[$0 + 4888 >> 2];
 HEAP32[$0 + 1856 >> 2] = $1;
 HEAP32[$0 + 1860 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Draw____29_28unsigned_20int_2c_20int_2c_20b2Color_20const__29___invoke_b2Draw_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Draw____29_28unsigned_20int_2c_20int_2c_20b2Color_20const__29_29($4, $0 + 1856 | 0);
 HEAP32[$0 + 4136 >> 2] = 1;
 HEAP32[$0 + 4132 >> 2] = 16;
 $1 = HEAP32[$0 + 4136 >> 2];
 $2 = HEAP32[$0 + 4132 >> 2];
 HEAP32[$0 + 4976 >> 2] = $2;
 HEAP32[$0 + 4980 >> 2] = $1;
 $1 = HEAP32[$0 + 4976 >> 2];
 $2 = HEAP32[$0 + 4980 >> 2];
 HEAP32[$0 + 5004 >> 2] = $3;
 HEAP32[$0 + 5e3 >> 2] = 9425;
 HEAP32[$0 + 4996 >> 2] = $2;
 HEAP32[$0 + 4992 >> 2] = $1;
 $3 = HEAP32[$0 + 5004 >> 2];
 $4 = HEAP32[$0 + 5e3 >> 2];
 $1 = HEAP32[$0 + 4992 >> 2];
 HEAP32[$0 + 4988 >> 2] = HEAP32[$0 + 4996 >> 2];
 HEAP32[$0 + 4984 >> 2] = $1;
 $2 = HEAP32[$0 + 4988 >> 2];
 $1 = HEAP32[$0 + 4984 >> 2];
 HEAP32[$0 + 1848 >> 2] = $1;
 HEAP32[$0 + 1852 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29___invoke_b2Draw_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29_29($4, $0 + 1848 | 0);
 HEAP32[$0 + 4124 >> 2] = 1;
 HEAP32[$0 + 4120 >> 2] = 20;
 $1 = HEAP32[$0 + 4124 >> 2];
 $2 = HEAP32[$0 + 4120 >> 2];
 HEAP32[$0 + 5008 >> 2] = $2;
 HEAP32[$0 + 5012 >> 2] = $1;
 $1 = HEAP32[$0 + 5008 >> 2];
 $2 = HEAP32[$0 + 5012 >> 2];
 HEAP32[$0 + 5036 >> 2] = $3;
 HEAP32[$0 + 5032 >> 2] = 9459;
 HEAP32[$0 + 5028 >> 2] = $2;
 HEAP32[$0 + 5024 >> 2] = $1;
 $3 = HEAP32[$0 + 5036 >> 2];
 $4 = HEAP32[$0 + 5032 >> 2];
 $1 = HEAP32[$0 + 5024 >> 2];
 HEAP32[$0 + 5020 >> 2] = HEAP32[$0 + 5028 >> 2];
 HEAP32[$0 + 5016 >> 2] = $1;
 $2 = HEAP32[$0 + 5020 >> 2];
 $1 = HEAP32[$0 + 5016 >> 2];
 HEAP32[$0 + 1840 >> 2] = $1;
 HEAP32[$0 + 1844 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const__29___invoke_b2Draw_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const__29_29($4, $0 + 1840 | 0);
 HEAP32[$0 + 4112 >> 2] = 1;
 HEAP32[$0 + 4108 >> 2] = 24;
 $1 = HEAP32[$0 + 4112 >> 2];
 $2 = HEAP32[$0 + 4108 >> 2];
 HEAP32[$0 + 5040 >> 2] = $2;
 HEAP32[$0 + 5044 >> 2] = $1;
 $1 = HEAP32[$0 + 5040 >> 2];
 $2 = HEAP32[$0 + 5044 >> 2];
 HEAP32[$0 + 5068 >> 2] = $3;
 HEAP32[$0 + 5064 >> 2] = 2861;
 HEAP32[$0 + 5060 >> 2] = $2;
 HEAP32[$0 + 5056 >> 2] = $1;
 $3 = HEAP32[$0 + 5068 >> 2];
 $4 = HEAP32[$0 + 5064 >> 2];
 $1 = HEAP32[$0 + 5056 >> 2];
 HEAP32[$0 + 5052 >> 2] = HEAP32[$0 + 5060 >> 2];
 HEAP32[$0 + 5048 >> 2] = $1;
 $2 = HEAP32[$0 + 5052 >> 2];
 $1 = HEAP32[$0 + 5048 >> 2];
 HEAP32[$0 + 1832 >> 2] = $1;
 HEAP32[$0 + 1836 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Draw____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29___invoke_b2Draw_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Draw____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29_29($4, $0 + 1832 | 0);
 HEAP32[$0 + 4100 >> 2] = 1;
 HEAP32[$0 + 4096 >> 2] = 28;
 $1 = HEAP32[$0 + 4100 >> 2];
 $2 = HEAP32[$0 + 4096 >> 2];
 HEAP32[$0 + 5072 >> 2] = $2;
 HEAP32[$0 + 5076 >> 2] = $1;
 $1 = HEAP32[$0 + 5072 >> 2];
 $2 = HEAP32[$0 + 5076 >> 2];
 HEAP32[$0 + 5100 >> 2] = $3;
 HEAP32[$0 + 5096 >> 2] = 6797;
 HEAP32[$0 + 5092 >> 2] = $2;
 HEAP32[$0 + 5088 >> 2] = $1;
 $3 = HEAP32[$0 + 5100 >> 2];
 $4 = HEAP32[$0 + 5096 >> 2];
 $1 = HEAP32[$0 + 5088 >> 2];
 HEAP32[$0 + 5084 >> 2] = HEAP32[$0 + 5092 >> 2];
 HEAP32[$0 + 5080 >> 2] = $1;
 $2 = HEAP32[$0 + 5084 >> 2];
 $1 = HEAP32[$0 + 5080 >> 2];
 HEAP32[$0 + 1824 >> 2] = $1;
 HEAP32[$0 + 1828 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Draw____29_28b2Transform_20const__29___invoke_b2Draw_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Draw____29_28b2Transform_20const__29_29($4, $0 + 1824 | 0);
 HEAP32[$0 + 4088 >> 2] = 1;
 HEAP32[$0 + 4084 >> 2] = 32;
 $1 = HEAP32[$0 + 4088 >> 2];
 $2 = HEAP32[$0 + 4084 >> 2];
 HEAP32[$0 + 4944 >> 2] = $2;
 HEAP32[$0 + 4948 >> 2] = $1;
 $1 = HEAP32[$0 + 4944 >> 2];
 $2 = HEAP32[$0 + 4948 >> 2];
 HEAP32[$0 + 4972 >> 2] = $3;
 HEAP32[$0 + 4968 >> 2] = 2445;
 HEAP32[$0 + 4964 >> 2] = $2;
 HEAP32[$0 + 4960 >> 2] = $1;
 $3 = HEAP32[$0 + 4972 >> 2];
 $4 = HEAP32[$0 + 4968 >> 2];
 $1 = HEAP32[$0 + 4960 >> 2];
 HEAP32[$0 + 4956 >> 2] = HEAP32[$0 + 4964 >> 2];
 HEAP32[$0 + 4952 >> 2] = $1;
 $2 = HEAP32[$0 + 4956 >> 2];
 $1 = HEAP32[$0 + 4952 >> 2];
 HEAP32[$0 + 1816 >> 2] = $1;
 HEAP32[$0 + 1820 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29___invoke_b2Draw_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29_29($4, $0 + 1816 | 0);
 HEAP32[$0 + 5112 >> 2] = $3;
 HEAP32[$0 + 5108 >> 2] = 3989;
 $1 = HEAP32[$0 + 5112 >> 2];
 $2 = HEAP32[$0 + 5108 >> 2];
 HEAP32[$0 + 15128 >> 2] = $0 + 5107;
 HEAP32[$0 + 15124 >> 2] = $2;
 void_20emscripten__base_b2Draw___verify_b2DrawWrapper__28_29();
 HEAP32[$0 + 15120 >> 2] = 74;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Draw__20_28_emscripten__base_b2Draw___getUpcaster_b2DrawWrapper__28_29_29_28b2DrawWrapper__29(), 
 HEAP32[wasm2js_i32$0 + 15116 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2DrawWrapper__20_28_emscripten__base_b2Draw___getDowncaster_b2DrawWrapper__28_29_29_28b2Draw__29(), 
 HEAP32[wasm2js_i32$0 + 15112 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 15108 >> 2] = 75;
 $2 = emscripten__internal__TypeID_b2DrawWrapper_2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2DrawWrapper__2c_20void___get_28_29();
 $4 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2DrawWrapper_20const__2c_20void___get_28_29();
 $5 = emscripten__base_b2Draw___get_28_29();
 HEAP32[$0 + 15188 >> 2] = HEAP32[$0 + 15120 >> 2];
 $6 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $7 = HEAP32[$0 + 15120 >> 2];
 HEAP32[$0 + 15192 >> 2] = HEAP32[$0 + 15116 >> 2];
 $8 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $9 = HEAP32[$0 + 15116 >> 2];
 HEAP32[$0 + 15196 >> 2] = HEAP32[$0 + 15112 >> 2];
 $10 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $11 = HEAP32[$0 + 15112 >> 2];
 $12 = HEAP32[$0 + 15124 >> 2];
 HEAP32[$0 + 15200 >> 2] = HEAP32[$0 + 15108 >> 2];
 _embind_register_class($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, $12 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 15108 >> 2]);
 $2 = void_20_28_emscripten__select_overload_void_20_28b2DrawWrapper__29__28void_20_28__29_28b2DrawWrapper__29_29_29_28b2DrawWrapper__29(emscripten__class__b2Draw_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2Draw_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2DrawWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2DrawWrapper__29__operator_20void_20_28__29_28b2DrawWrapper__29_28_29_20const($0 + 5106 | 0));
 HEAP32[$0 + 15140 >> 2] = $0 + 5107;
 HEAP32[$0 + 15136 >> 2] = 6355;
 HEAP32[$0 + 15132 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2DrawWrapper__29___invoke_b2DrawWrapper__28char_20const__2c_20void_20_28__29_28b2DrawWrapper__29_29(HEAP32[$0 + 15136 >> 2], HEAP32[$0 + 15132 >> 2]);
 HEAP32[$0 + 15160 >> 2] = $1;
 HEAP32[$0 + 15156 >> 2] = 2873;
 HEAP32[$0 + 15152 >> 2] = 76;
 $1 = HEAP32[$0 + 15160 >> 2];
 HEAP32[$0 + 15144 >> 2] = 77;
 $2 = emscripten__internal__TypeID_b2Draw_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 15156 >> 2];
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointer_emscripten__ret_val____ArgTypeList_b2DrawWrapper__2c_20emscripten__val_____getCount_28_29_20const($0 + 15151 | 0);
 $5 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointer_emscripten__ret_val____ArgTypeList_b2DrawWrapper__2c_20emscripten__val_____getTypes_28_29_20const($0 + 15151 | 0);
 HEAP32[$0 + 15204 >> 2] = HEAP32[$0 + 15144 >> 2];
 _embind_register_class_class_function($2 | 0, $3 | 0, $4 | 0, $5 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 15144 >> 2], HEAP32[$0 + 15152 >> 2], 0);
 HEAP32[$0 + 15180 >> 2] = $1;
 HEAP32[$0 + 15176 >> 2] = 9857;
 HEAP32[$0 + 15172 >> 2] = 78;
 HEAP32[$0 + 15164 >> 2] = 50;
 $1 = emscripten__internal__TypeID_b2Draw_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 15176 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const____getCount_28_29_20const($0 + 15171 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const____getTypes_28_29_20const($0 + 15171 | 0);
 HEAP32[$0 + 15184 >> 2] = HEAP32[$0 + 15164 >> 2];
 _embind_register_class_class_function($1 | 0, $2 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 15164 >> 2], HEAP32[$0 + 15172 >> 2], 0);
 HEAP32[$0 + 5136 >> 2] = $0 + 4082;
 HEAP32[$0 + 5132 >> 2] = 10903;
 void_20emscripten__internal__NoBaseClass__verify_b2AABB__28_29();
 HEAP32[$0 + 5128 >> 2] = 79;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2AABB__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 5124 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2AABB__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 5120 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 5116 >> 2] = 80;
 $1 = emscripten__internal__TypeID_b2AABB_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2AABB__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2AABB_20const__2c_20void___get_28_29();
 $4 = emscripten__internal__NoBaseClass__get_28_29();
 HEAP32[$0 + 15208 >> 2] = HEAP32[$0 + 5128 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 5128 >> 2];
 HEAP32[$0 + 14740 >> 2] = HEAP32[$0 + 5124 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $8 = HEAP32[$0 + 5124 >> 2];
 HEAP32[$0 + 14736 >> 2] = HEAP32[$0 + 5120 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $10 = HEAP32[$0 + 5120 >> 2];
 $11 = HEAP32[$0 + 5132 >> 2];
 HEAP32[$0 + 15212 >> 2] = HEAP32[$0 + 5116 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 5116 >> 2]);
 HEAP32[$0 + 5140 >> 2] = $0 + 4082;
 HEAP32[$0 + 15220 >> 2] = HEAP32[$0 + 5140 >> 2];
 HEAP32[$0 + 15216 >> 2] = 81;
 $3 = HEAP32[$0 + 15220 >> 2];
 void_20emscripten__internal__RegisterClassConstructor_b2AABB__20_28__29_28_29___invoke_b2AABB__28b2AABB__20_28__29_28_29_29(HEAP32[$0 + 15216 >> 2]);
 HEAP32[$0 + 4076 >> 2] = 0;
 HEAP32[$0 + 4072 >> 2] = 82;
 $1 = HEAP32[$0 + 4076 >> 2];
 $2 = HEAP32[$0 + 4072 >> 2];
 HEAP32[$0 + 5144 >> 2] = $2;
 HEAP32[$0 + 5148 >> 2] = $1;
 $1 = HEAP32[$0 + 5144 >> 2];
 $2 = HEAP32[$0 + 5148 >> 2];
 HEAP32[$0 + 5172 >> 2] = $3;
 HEAP32[$0 + 5168 >> 2] = 9937;
 HEAP32[$0 + 5164 >> 2] = $2;
 HEAP32[$0 + 5160 >> 2] = $1;
 $3 = HEAP32[$0 + 5172 >> 2];
 $4 = HEAP32[$0 + 5168 >> 2];
 $1 = HEAP32[$0 + 5160 >> 2];
 HEAP32[$0 + 5156 >> 2] = HEAP32[$0 + 5164 >> 2];
 HEAP32[$0 + 5152 >> 2] = $1;
 $2 = HEAP32[$0 + 5156 >> 2];
 $1 = HEAP32[$0 + 5152 >> 2];
 HEAP32[$0 + 1808 >> 2] = $1;
 HEAP32[$0 + 1812 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2AABB____29_28_29_20const___invoke_b2AABB__28char_20const__2c_20bool_20_28b2AABB____29_28_29_20const_29($4, $0 + 1808 | 0);
 HEAP32[$0 + 4068 >> 2] = 0;
 HEAP32[$0 + 4064 >> 2] = 83;
 $1 = HEAP32[$0 + 4068 >> 2];
 $2 = HEAP32[$0 + 4064 >> 2];
 HEAP32[$0 + 5208 >> 2] = $2;
 HEAP32[$0 + 5212 >> 2] = $1;
 $1 = HEAP32[$0 + 5208 >> 2];
 $2 = HEAP32[$0 + 5212 >> 2];
 HEAP32[$0 + 5236 >> 2] = $3;
 HEAP32[$0 + 5232 >> 2] = 3859;
 HEAP32[$0 + 5228 >> 2] = $2;
 HEAP32[$0 + 5224 >> 2] = $1;
 $3 = HEAP32[$0 + 5236 >> 2];
 $4 = HEAP32[$0 + 5232 >> 2];
 $1 = HEAP32[$0 + 5224 >> 2];
 HEAP32[$0 + 5220 >> 2] = HEAP32[$0 + 5228 >> 2];
 HEAP32[$0 + 5216 >> 2] = $1;
 $2 = HEAP32[$0 + 5220 >> 2];
 $1 = HEAP32[$0 + 5216 >> 2];
 HEAP32[$0 + 1800 >> 2] = $1;
 HEAP32[$0 + 1804 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2AABB____29_28_29_20const___invoke_b2AABB__28char_20const__2c_20b2Vec2_20_28b2AABB____29_28_29_20const_29($4, $0 + 1800 | 0);
 HEAP32[$0 + 4060 >> 2] = 0;
 HEAP32[$0 + 4056 >> 2] = 84;
 $1 = HEAP32[$0 + 4060 >> 2];
 $2 = HEAP32[$0 + 4056 >> 2];
 HEAP32[$0 + 5176 >> 2] = $2;
 HEAP32[$0 + 5180 >> 2] = $1;
 $1 = HEAP32[$0 + 5176 >> 2];
 $2 = HEAP32[$0 + 5180 >> 2];
 HEAP32[$0 + 5204 >> 2] = $3;
 HEAP32[$0 + 5200 >> 2] = 3406;
 HEAP32[$0 + 5196 >> 2] = $2;
 HEAP32[$0 + 5192 >> 2] = $1;
 $3 = HEAP32[$0 + 5204 >> 2];
 $4 = HEAP32[$0 + 5200 >> 2];
 $1 = HEAP32[$0 + 5192 >> 2];
 HEAP32[$0 + 5188 >> 2] = HEAP32[$0 + 5196 >> 2];
 HEAP32[$0 + 5184 >> 2] = $1;
 $2 = HEAP32[$0 + 5188 >> 2];
 $1 = HEAP32[$0 + 5184 >> 2];
 HEAP32[$0 + 1792 >> 2] = $1;
 HEAP32[$0 + 1796 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2AABB____29_28_29_20const___invoke_b2AABB__28char_20const__2c_20b2Vec2_20_28b2AABB____29_28_29_20const_29($4, $0 + 1792 | 0);
 HEAP32[$0 + 4052 >> 2] = 0;
 HEAP32[$0 + 4048 >> 2] = 85;
 $1 = HEAP32[$0 + 4052 >> 2];
 $2 = HEAP32[$0 + 4048 >> 2];
 HEAP32[$0 + 5240 >> 2] = $2;
 HEAP32[$0 + 5244 >> 2] = $1;
 $1 = HEAP32[$0 + 5240 >> 2];
 $2 = HEAP32[$0 + 5244 >> 2];
 HEAP32[$0 + 5268 >> 2] = $3;
 HEAP32[$0 + 5264 >> 2] = 3961;
 HEAP32[$0 + 5260 >> 2] = $2;
 HEAP32[$0 + 5256 >> 2] = $1;
 $3 = HEAP32[$0 + 5268 >> 2];
 $4 = HEAP32[$0 + 5264 >> 2];
 $1 = HEAP32[$0 + 5256 >> 2];
 HEAP32[$0 + 5252 >> 2] = HEAP32[$0 + 5260 >> 2];
 HEAP32[$0 + 5248 >> 2] = $1;
 $2 = HEAP32[$0 + 5252 >> 2];
 $1 = HEAP32[$0 + 5248 >> 2];
 HEAP32[$0 + 1784 >> 2] = $1;
 HEAP32[$0 + 1788 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2AABB____29_28_29_20const___invoke_b2AABB__28char_20const__2c_20float_20_28b2AABB____29_28_29_20const_29($4, $0 + 1784 | 0);
 $1 = emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_0__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_0__28embind_init_b2_28_29__$_0_20const__29($0 + 4047 | 0);
 HEAP32[$0 + 5280 >> 2] = $3;
 HEAP32[$0 + 5276 >> 2] = 9220;
 HEAP32[$0 + 5272 >> 2] = $1;
 $1 = HEAP32[$0 + 5280 >> 2];
 void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2AABB__2c_20b2AABB__29___invoke_b2AABB_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28__29_28b2AABB__2c_20b2AABB__29_29(HEAP32[$0 + 5276 >> 2], HEAP32[$0 + 5272 >> 2]);
 $2 = emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_1__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_1__28embind_init_b2_28_29__$_1_20const__29($0 + 4045 | 0);
 HEAP32[$0 + 5292 >> 2] = $1;
 HEAP32[$0 + 5288 >> 2] = 6154;
 HEAP32[$0 + 5284 >> 2] = $2;
 $3 = HEAP32[$0 + 5292 >> 2];
 void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29___invoke_b2AABB_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28__29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29_29(HEAP32[$0 + 5288 >> 2], HEAP32[$0 + 5284 >> 2]);
 HEAP32[$0 + 4040 >> 2] = 0;
 HEAP32[$0 + 4036 >> 2] = 86;
 $1 = HEAP32[$0 + 4040 >> 2];
 $2 = HEAP32[$0 + 4036 >> 2];
 HEAP32[$0 + 5296 >> 2] = $2;
 HEAP32[$0 + 5300 >> 2] = $1;
 $1 = HEAP32[$0 + 5296 >> 2];
 $2 = HEAP32[$0 + 5300 >> 2];
 HEAP32[$0 + 5324 >> 2] = $3;
 HEAP32[$0 + 5320 >> 2] = 3474;
 HEAP32[$0 + 5316 >> 2] = $2;
 HEAP32[$0 + 5312 >> 2] = $1;
 $3 = HEAP32[$0 + 5324 >> 2];
 $4 = HEAP32[$0 + 5320 >> 2];
 $1 = HEAP32[$0 + 5312 >> 2];
 HEAP32[$0 + 5308 >> 2] = HEAP32[$0 + 5316 >> 2];
 HEAP32[$0 + 5304 >> 2] = $1;
 $2 = HEAP32[$0 + 5308 >> 2];
 $1 = HEAP32[$0 + 5304 >> 2];
 HEAP32[$0 + 1776 >> 2] = $1;
 HEAP32[$0 + 1780 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2AABB____29_28b2AABB_20const__29_20const___invoke_b2AABB__28char_20const__2c_20bool_20_28b2AABB____29_28b2AABB_20const__29_20const_29($4, $0 + 1776 | 0);
 HEAP32[$0 + 4028 >> 2] = 0;
 HEAP32[$0 + 4024 >> 2] = 87;
 $1 = HEAP32[$0 + 4028 >> 2];
 $2 = HEAP32[$0 + 4024 >> 2];
 HEAP32[$0 + 5328 >> 2] = $2;
 HEAP32[$0 + 5332 >> 2] = $1;
 $1 = HEAP32[$0 + 5328 >> 2];
 $2 = HEAP32[$0 + 5332 >> 2];
 HEAP32[$0 + 5360 >> 2] = $3;
 HEAP32[$0 + 5356 >> 2] = 1955;
 HEAP32[$0 + 5352 >> 2] = $2;
 HEAP32[$0 + 5348 >> 2] = $1;
 $3 = HEAP32[$0 + 5360 >> 2];
 $4 = HEAP32[$0 + 5356 >> 2];
 $1 = HEAP32[$0 + 5348 >> 2];
 HEAP32[$0 + 5344 >> 2] = HEAP32[$0 + 5352 >> 2];
 HEAP32[$0 + 5340 >> 2] = $1;
 $2 = HEAP32[$0 + 5344 >> 2];
 $1 = HEAP32[$0 + 5340 >> 2];
 HEAP32[$0 + 1768 >> 2] = $1;
 HEAP32[$0 + 1772 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2AABB____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__29_20const___invoke_b2AABB_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20bool_20_28b2AABB____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__29_20const_29($4, $0 + 1768 | 0);
 HEAP32[$0 + 5400 >> 2] = $3;
 HEAP32[$0 + 5396 >> 2] = 9835;
 HEAP32[$0 + 5392 >> 2] = 0;
 $1 = HEAP32[$0 + 5400 >> 2];
 HEAP32[$0 + 5388 >> 2] = 88;
 HEAP32[$0 + 5384 >> 2] = 89;
 $2 = emscripten__internal__TypeID_b2AABB_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 5396 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15224 >> 2] = HEAP32[$0 + 5388 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 5388 >> 2];
 $7 = b2Vec2_20b2AABB_____20emscripten__internal__getContext_b2Vec2_20b2AABB_____28b2Vec2_20b2AABB____20const__29($0 + 5392 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15232 >> 2] = HEAP32[$0 + 5384 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 5384 >> 2], b2Vec2_20b2AABB_____20emscripten__internal__getContext_b2Vec2_20b2AABB_____28b2Vec2_20b2AABB____20const__29($0 + 5392 | 0) | 0);
 HEAP32[$0 + 5380 >> 2] = $1;
 HEAP32[$0 + 5376 >> 2] = 9846;
 HEAP32[$0 + 5372 >> 2] = 8;
 HEAP32[$0 + 5368 >> 2] = 88;
 HEAP32[$0 + 5364 >> 2] = 89;
 $1 = emscripten__internal__TypeID_b2AABB_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 5376 >> 2];
 $3 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15228 >> 2] = HEAP32[$0 + 5368 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $5 = HEAP32[$0 + 5368 >> 2];
 $6 = b2Vec2_20b2AABB_____20emscripten__internal__getContext_b2Vec2_20b2AABB_____28b2Vec2_20b2AABB____20const__29($0 + 5372 | 0);
 $7 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15236 >> 2] = HEAP32[$0 + 5364 >> 2];
 _embind_register_class_property($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 5364 >> 2], b2Vec2_20b2AABB_____20emscripten__internal__getContext_b2Vec2_20b2AABB_____28b2Vec2_20b2AABB____20const__29($0 + 5372 | 0) | 0);
 HEAP32[$0 + 5424 >> 2] = $0 + 4023;
 HEAP32[$0 + 5420 >> 2] = 9867;
 void_20emscripten__internal__NoBaseClass__verify_b2World__28_29();
 HEAP32[$0 + 5416 >> 2] = 90;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2World__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 5412 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2World__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 5408 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 5404 >> 2] = 91;
 $1 = emscripten__internal__TypeID_b2World_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2World__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2World_20const__2c_20void___get_28_29();
 $4 = emscripten__internal__NoBaseClass__get_28_29();
 HEAP32[$0 + 15240 >> 2] = HEAP32[$0 + 5416 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 5416 >> 2];
 HEAP32[$0 + 14732 >> 2] = HEAP32[$0 + 5412 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $8 = HEAP32[$0 + 5412 >> 2];
 HEAP32[$0 + 14728 >> 2] = HEAP32[$0 + 5408 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $10 = HEAP32[$0 + 5408 >> 2];
 $11 = HEAP32[$0 + 5420 >> 2];
 HEAP32[$0 + 15244 >> 2] = HEAP32[$0 + 5404 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 5404 >> 2]);
 HEAP32[$0 + 5428 >> 2] = $0 + 4023;
 HEAP32[$0 + 15252 >> 2] = HEAP32[$0 + 5428 >> 2];
 HEAP32[$0 + 15248 >> 2] = 92;
 $3 = HEAP32[$0 + 15252 >> 2];
 void_20emscripten__internal__RegisterClassConstructor_b2World__20_28__29_28b2Vec2___29___invoke_b2World__28b2World__20_28__29_28b2Vec2___29_29(HEAP32[$0 + 15248 >> 2]);
 HEAP32[$0 + 4016 >> 2] = 0;
 HEAP32[$0 + 4012 >> 2] = 93;
 $1 = HEAP32[$0 + 4016 >> 2];
 $2 = HEAP32[$0 + 4012 >> 2];
 HEAP32[$0 + 5432 >> 2] = $2;
 HEAP32[$0 + 5436 >> 2] = $1;
 $1 = HEAP32[$0 + 5432 >> 2];
 $2 = HEAP32[$0 + 5436 >> 2];
 HEAP32[$0 + 5460 >> 2] = $3;
 HEAP32[$0 + 5456 >> 2] = 4068;
 HEAP32[$0 + 5452 >> 2] = $2;
 HEAP32[$0 + 5448 >> 2] = $1;
 $3 = HEAP32[$0 + 5460 >> 2];
 $4 = HEAP32[$0 + 5456 >> 2];
 $1 = HEAP32[$0 + 5448 >> 2];
 HEAP32[$0 + 5444 >> 2] = HEAP32[$0 + 5452 >> 2];
 HEAP32[$0 + 5440 >> 2] = $1;
 $2 = HEAP32[$0 + 5444 >> 2];
 $1 = HEAP32[$0 + 5440 >> 2];
 HEAP32[$0 + 1760 >> 2] = $1;
 HEAP32[$0 + 1764 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28b2ContactListener__29___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2World____29_28b2ContactListener__29_29($4, $0 + 1760 | 0);
 HEAP32[$0 + 4004 >> 2] = 0;
 HEAP32[$0 + 4e3 >> 2] = 94;
 $1 = HEAP32[$0 + 4004 >> 2];
 $2 = HEAP32[$0 + 4e3 >> 2];
 HEAP32[$0 + 5464 >> 2] = $2;
 HEAP32[$0 + 5468 >> 2] = $1;
 $1 = HEAP32[$0 + 5464 >> 2];
 $2 = HEAP32[$0 + 5468 >> 2];
 HEAP32[$0 + 5492 >> 2] = $3;
 HEAP32[$0 + 5488 >> 2] = 1853;
 HEAP32[$0 + 5484 >> 2] = $2;
 HEAP32[$0 + 5480 >> 2] = $1;
 $3 = HEAP32[$0 + 5492 >> 2];
 $4 = HEAP32[$0 + 5488 >> 2];
 $1 = HEAP32[$0 + 5480 >> 2];
 HEAP32[$0 + 5476 >> 2] = HEAP32[$0 + 5484 >> 2];
 HEAP32[$0 + 5472 >> 2] = $1;
 $2 = HEAP32[$0 + 5476 >> 2];
 $1 = HEAP32[$0 + 5472 >> 2];
 HEAP32[$0 + 1752 >> 2] = $1;
 HEAP32[$0 + 1756 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28b2Draw__29___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2World____29_28b2Draw__29_29($4, $0 + 1752 | 0);
 HEAP32[$0 + 3992 >> 2] = 0;
 HEAP32[$0 + 3988 >> 2] = 95;
 $1 = HEAP32[$0 + 3992 >> 2];
 $2 = HEAP32[$0 + 3988 >> 2];
 HEAP32[$0 + 5496 >> 2] = $2;
 HEAP32[$0 + 5500 >> 2] = $1;
 $1 = HEAP32[$0 + 5496 >> 2];
 $2 = HEAP32[$0 + 5500 >> 2];
 HEAP32[$0 + 5524 >> 2] = $3;
 HEAP32[$0 + 5520 >> 2] = 1856;
 HEAP32[$0 + 5516 >> 2] = $2;
 HEAP32[$0 + 5512 >> 2] = $1;
 $3 = HEAP32[$0 + 5524 >> 2];
 $4 = HEAP32[$0 + 5520 >> 2];
 $1 = HEAP32[$0 + 5512 >> 2];
 HEAP32[$0 + 5508 >> 2] = HEAP32[$0 + 5516 >> 2];
 HEAP32[$0 + 5504 >> 2] = $1;
 $2 = HEAP32[$0 + 5508 >> 2];
 $1 = HEAP32[$0 + 5504 >> 2];
 HEAP32[$0 + 1744 >> 2] = $1;
 HEAP32[$0 + 1748 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28_29___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2World____29_28_29_29($4, $0 + 1744 | 0);
 HEAP32[$0 + 3980 >> 2] = 0;
 HEAP32[$0 + 3976 >> 2] = 96;
 $1 = HEAP32[$0 + 3980 >> 2];
 $2 = HEAP32[$0 + 3976 >> 2];
 HEAP32[$0 + 5528 >> 2] = $2;
 HEAP32[$0 + 5532 >> 2] = $1;
 $1 = HEAP32[$0 + 5528 >> 2];
 $2 = HEAP32[$0 + 5532 >> 2];
 HEAP32[$0 + 5556 >> 2] = $3;
 HEAP32[$0 + 5552 >> 2] = 1677;
 HEAP32[$0 + 5548 >> 2] = $2;
 HEAP32[$0 + 5544 >> 2] = $1;
 $3 = HEAP32[$0 + 5556 >> 2];
 $4 = HEAP32[$0 + 5552 >> 2];
 $1 = HEAP32[$0 + 5544 >> 2];
 HEAP32[$0 + 5540 >> 2] = HEAP32[$0 + 5548 >> 2];
 HEAP32[$0 + 5536 >> 2] = $1;
 $2 = HEAP32[$0 + 5540 >> 2];
 $1 = HEAP32[$0 + 5536 >> 2];
 HEAP32[$0 + 1736 >> 2] = $1;
 HEAP32[$0 + 1740 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Body__20_28b2World____29_28b2BodyDef_20const__29___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Body__20_28b2World____29_28b2BodyDef_20const__29_29($4, $0 + 1736 | 0);
 HEAP32[$0 + 3968 >> 2] = 0;
 HEAP32[$0 + 3964 >> 2] = 97;
 $1 = HEAP32[$0 + 3968 >> 2];
 $2 = HEAP32[$0 + 3964 >> 2];
 HEAP32[$0 + 5560 >> 2] = $2;
 HEAP32[$0 + 5564 >> 2] = $1;
 $1 = HEAP32[$0 + 5560 >> 2];
 $2 = HEAP32[$0 + 5564 >> 2];
 HEAP32[$0 + 5588 >> 2] = $3;
 HEAP32[$0 + 5584 >> 2] = 1657;
 HEAP32[$0 + 5580 >> 2] = $2;
 HEAP32[$0 + 5576 >> 2] = $1;
 $3 = HEAP32[$0 + 5588 >> 2];
 $4 = HEAP32[$0 + 5584 >> 2];
 $1 = HEAP32[$0 + 5576 >> 2];
 HEAP32[$0 + 5572 >> 2] = HEAP32[$0 + 5580 >> 2];
 HEAP32[$0 + 5568 >> 2] = $1;
 $2 = HEAP32[$0 + 5572 >> 2];
 $1 = HEAP32[$0 + 5568 >> 2];
 HEAP32[$0 + 1728 >> 2] = $1;
 HEAP32[$0 + 1732 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28b2Body__29___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2World____29_28b2Body__29_29($4, $0 + 1728 | 0);
 HEAP32[$0 + 3956 >> 2] = 0;
 HEAP32[$0 + 3952 >> 2] = 98;
 $1 = HEAP32[$0 + 3956 >> 2];
 $2 = HEAP32[$0 + 3952 >> 2];
 HEAP32[$0 + 5592 >> 2] = $2;
 HEAP32[$0 + 5596 >> 2] = $1;
 $1 = HEAP32[$0 + 5592 >> 2];
 $2 = HEAP32[$0 + 5596 >> 2];
 HEAP32[$0 + 5620 >> 2] = $3;
 HEAP32[$0 + 5616 >> 2] = 2650;
 HEAP32[$0 + 5612 >> 2] = $2;
 HEAP32[$0 + 5608 >> 2] = $1;
 $3 = HEAP32[$0 + 5620 >> 2];
 $4 = HEAP32[$0 + 5616 >> 2];
 $1 = HEAP32[$0 + 5608 >> 2];
 HEAP32[$0 + 5604 >> 2] = HEAP32[$0 + 5612 >> 2];
 HEAP32[$0 + 5600 >> 2] = $1;
 $2 = HEAP32[$0 + 5604 >> 2];
 $1 = HEAP32[$0 + 5600 >> 2];
 HEAP32[$0 + 1720 >> 2] = $1;
 HEAP32[$0 + 1724 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Joint__20_28b2World____29_28b2JointDef_20const__29___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Joint__20_28b2World____29_28b2JointDef_20const__29_29($4, $0 + 1720 | 0);
 HEAP32[$0 + 3944 >> 2] = 0;
 HEAP32[$0 + 3940 >> 2] = 99;
 $1 = HEAP32[$0 + 3944 >> 2];
 $2 = HEAP32[$0 + 3940 >> 2];
 HEAP32[$0 + 5624 >> 2] = $2;
 HEAP32[$0 + 5628 >> 2] = $1;
 $1 = HEAP32[$0 + 5624 >> 2];
 $2 = HEAP32[$0 + 5628 >> 2];
 HEAP32[$0 + 5652 >> 2] = $3;
 HEAP32[$0 + 5648 >> 2] = 2557;
 HEAP32[$0 + 5644 >> 2] = $2;
 HEAP32[$0 + 5640 >> 2] = $1;
 $3 = HEAP32[$0 + 5652 >> 2];
 $4 = HEAP32[$0 + 5648 >> 2];
 $1 = HEAP32[$0 + 5640 >> 2];
 HEAP32[$0 + 5636 >> 2] = HEAP32[$0 + 5644 >> 2];
 HEAP32[$0 + 5632 >> 2] = $1;
 $2 = HEAP32[$0 + 5636 >> 2];
 $1 = HEAP32[$0 + 5632 >> 2];
 HEAP32[$0 + 1712 >> 2] = $1;
 HEAP32[$0 + 1716 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28b2Joint__29___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2World____29_28b2Joint__29_29($4, $0 + 1712 | 0);
 HEAP32[$0 + 3936 >> 2] = 0;
 HEAP32[$0 + 3932 >> 2] = 100;
 $1 = HEAP32[$0 + 3936 >> 2];
 $2 = HEAP32[$0 + 3932 >> 2];
 HEAP32[$0 + 5656 >> 2] = $2;
 HEAP32[$0 + 5660 >> 2] = $1;
 $1 = HEAP32[$0 + 5656 >> 2];
 $2 = HEAP32[$0 + 5660 >> 2];
 HEAP32[$0 + 5684 >> 2] = $3;
 HEAP32[$0 + 5680 >> 2] = 6124;
 HEAP32[$0 + 5676 >> 2] = $2;
 HEAP32[$0 + 5672 >> 2] = $1;
 $3 = HEAP32[$0 + 5684 >> 2];
 $4 = HEAP32[$0 + 5680 >> 2];
 $1 = HEAP32[$0 + 5672 >> 2];
 HEAP32[$0 + 5668 >> 2] = HEAP32[$0 + 5676 >> 2];
 HEAP32[$0 + 5664 >> 2] = $1;
 $2 = HEAP32[$0 + 5668 >> 2];
 $1 = HEAP32[$0 + 5664 >> 2];
 HEAP32[$0 + 1704 >> 2] = $1;
 HEAP32[$0 + 1708 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28float_2c_20int_2c_20int_29___invoke_b2World__28char_20const__2c_20void_20_28b2World____29_28float_2c_20int_2c_20int_29_29($4, $0 + 1704 | 0);
 HEAP32[$0 + 3924 >> 2] = 0;
 HEAP32[$0 + 3920 >> 2] = 101;
 $1 = HEAP32[$0 + 3924 >> 2];
 $2 = HEAP32[$0 + 3920 >> 2];
 HEAP32[$0 + 5688 >> 2] = $2;
 HEAP32[$0 + 5692 >> 2] = $1;
 $1 = HEAP32[$0 + 5688 >> 2];
 $2 = HEAP32[$0 + 5692 >> 2];
 HEAP32[$0 + 5716 >> 2] = $3;
 HEAP32[$0 + 5712 >> 2] = 10867;
 HEAP32[$0 + 5708 >> 2] = $2;
 HEAP32[$0 + 5704 >> 2] = $1;
 $3 = HEAP32[$0 + 5716 >> 2];
 $4 = HEAP32[$0 + 5712 >> 2];
 $1 = HEAP32[$0 + 5704 >> 2];
 HEAP32[$0 + 5700 >> 2] = HEAP32[$0 + 5708 >> 2];
 HEAP32[$0 + 5696 >> 2] = $1;
 $2 = HEAP32[$0 + 5700 >> 2];
 $1 = HEAP32[$0 + 5696 >> 2];
 HEAP32[$0 + 1696 >> 2] = $1;
 HEAP32[$0 + 1700 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28b2QueryCallback__2c_20b2AABB_20const__29_20const___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2World____29_28b2QueryCallback__2c_20b2AABB_20const__29_20const_29($4, $0 + 1696 | 0);
 HEAP32[$0 + 3912 >> 2] = 0;
 HEAP32[$0 + 3908 >> 2] = 102;
 $1 = HEAP32[$0 + 3912 >> 2];
 $2 = HEAP32[$0 + 3908 >> 2];
 HEAP32[$0 + 5720 >> 2] = $2;
 HEAP32[$0 + 5724 >> 2] = $1;
 $1 = HEAP32[$0 + 5720 >> 2];
 $2 = HEAP32[$0 + 5724 >> 2];
 HEAP32[$0 + 5748 >> 2] = $3;
 HEAP32[$0 + 5744 >> 2] = 1955;
 HEAP32[$0 + 5740 >> 2] = $2;
 HEAP32[$0 + 5736 >> 2] = $1;
 $3 = HEAP32[$0 + 5748 >> 2];
 $4 = HEAP32[$0 + 5744 >> 2];
 $1 = HEAP32[$0 + 5736 >> 2];
 HEAP32[$0 + 5732 >> 2] = HEAP32[$0 + 5740 >> 2];
 HEAP32[$0 + 5728 >> 2] = $1;
 $2 = HEAP32[$0 + 5732 >> 2];
 $1 = HEAP32[$0 + 5728 >> 2];
 HEAP32[$0 + 1688 >> 2] = $1;
 HEAP32[$0 + 1692 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const__29_20const___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2World____29_28b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const__29_20const_29($4, $0 + 1688 | 0);
 HEAP32[$0 + 3904 >> 2] = 0;
 HEAP32[$0 + 3900 >> 2] = 103;
 $1 = HEAP32[$0 + 3904 >> 2];
 $2 = HEAP32[$0 + 3900 >> 2];
 HEAP32[$0 + 5752 >> 2] = $2;
 HEAP32[$0 + 5756 >> 2] = $1;
 $1 = HEAP32[$0 + 5752 >> 2];
 $2 = HEAP32[$0 + 5756 >> 2];
 HEAP32[$0 + 5780 >> 2] = $3;
 HEAP32[$0 + 5776 >> 2] = 7651;
 HEAP32[$0 + 5772 >> 2] = $2;
 HEAP32[$0 + 5768 >> 2] = $1;
 $3 = HEAP32[$0 + 5780 >> 2];
 $4 = HEAP32[$0 + 5776 >> 2];
 $1 = HEAP32[$0 + 5768 >> 2];
 HEAP32[$0 + 5764 >> 2] = HEAP32[$0 + 5772 >> 2];
 HEAP32[$0 + 5760 >> 2] = $1;
 $2 = HEAP32[$0 + 5764 >> 2];
 $1 = HEAP32[$0 + 5760 >> 2];
 HEAP32[$0 + 1680 >> 2] = $1;
 HEAP32[$0 + 1684 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28bool_29___invoke_b2World__28char_20const__2c_20void_20_28b2World____29_28bool_29_29($4, $0 + 1680 | 0);
 HEAP32[$0 + 3896 >> 2] = 0;
 HEAP32[$0 + 3892 >> 2] = 104;
 $1 = HEAP32[$0 + 3896 >> 2];
 $2 = HEAP32[$0 + 3892 >> 2];
 HEAP32[$0 + 5784 >> 2] = $2;
 HEAP32[$0 + 5788 >> 2] = $1;
 $1 = HEAP32[$0 + 5784 >> 2];
 $2 = HEAP32[$0 + 5788 >> 2];
 HEAP32[$0 + 5812 >> 2] = $3;
 HEAP32[$0 + 5808 >> 2] = 7668;
 HEAP32[$0 + 5804 >> 2] = $2;
 HEAP32[$0 + 5800 >> 2] = $1;
 $3 = HEAP32[$0 + 5812 >> 2];
 $4 = HEAP32[$0 + 5808 >> 2];
 $1 = HEAP32[$0 + 5800 >> 2];
 HEAP32[$0 + 5796 >> 2] = HEAP32[$0 + 5804 >> 2];
 HEAP32[$0 + 5792 >> 2] = $1;
 $2 = HEAP32[$0 + 5796 >> 2];
 $1 = HEAP32[$0 + 5792 >> 2];
 HEAP32[$0 + 1672 >> 2] = $1;
 HEAP32[$0 + 1676 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2World____29_28_29_20const___invoke_b2World__28char_20const__2c_20bool_20_28b2World____29_28_29_20const_29($4, $0 + 1672 | 0);
 HEAP32[$0 + 3888 >> 2] = 0;
 HEAP32[$0 + 3884 >> 2] = 105;
 $1 = HEAP32[$0 + 3888 >> 2];
 $2 = HEAP32[$0 + 3884 >> 2];
 HEAP32[$0 + 5816 >> 2] = $2;
 HEAP32[$0 + 5820 >> 2] = $1;
 $1 = HEAP32[$0 + 5816 >> 2];
 $2 = HEAP32[$0 + 5820 >> 2];
 HEAP32[$0 + 5844 >> 2] = $3;
 HEAP32[$0 + 5840 >> 2] = 1101;
 HEAP32[$0 + 5836 >> 2] = $2;
 HEAP32[$0 + 5832 >> 2] = $1;
 $3 = HEAP32[$0 + 5844 >> 2];
 $4 = HEAP32[$0 + 5840 >> 2];
 $1 = HEAP32[$0 + 5832 >> 2];
 HEAP32[$0 + 5828 >> 2] = HEAP32[$0 + 5836 >> 2];
 HEAP32[$0 + 5824 >> 2] = $1;
 $2 = HEAP32[$0 + 5828 >> 2];
 $1 = HEAP32[$0 + 5824 >> 2];
 HEAP32[$0 + 1664 >> 2] = $1;
 HEAP32[$0 + 1668 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28b2Vec2_20const__29___invoke_b2World__28char_20const__2c_20void_20_28b2World____29_28b2Vec2_20const__29_29($4, $0 + 1664 | 0);
 HEAP32[$0 + 3880 >> 2] = 0;
 HEAP32[$0 + 3876 >> 2] = 106;
 $1 = HEAP32[$0 + 3880 >> 2];
 $2 = HEAP32[$0 + 3876 >> 2];
 HEAP32[$0 + 5848 >> 2] = $2;
 HEAP32[$0 + 5852 >> 2] = $1;
 $1 = HEAP32[$0 + 5848 >> 2];
 $2 = HEAP32[$0 + 5852 >> 2];
 HEAP32[$0 + 5876 >> 2] = $3;
 HEAP32[$0 + 5872 >> 2] = 1112;
 HEAP32[$0 + 5868 >> 2] = $2;
 HEAP32[$0 + 5864 >> 2] = $1;
 $3 = HEAP32[$0 + 5876 >> 2];
 $4 = HEAP32[$0 + 5872 >> 2];
 $1 = HEAP32[$0 + 5864 >> 2];
 HEAP32[$0 + 5860 >> 2] = HEAP32[$0 + 5868 >> 2];
 HEAP32[$0 + 5856 >> 2] = $1;
 $2 = HEAP32[$0 + 5860 >> 2];
 $1 = HEAP32[$0 + 5856 >> 2];
 HEAP32[$0 + 1656 >> 2] = $1;
 HEAP32[$0 + 1660 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2World____29_28_29_20const___invoke_b2World__28char_20const__2c_20b2Vec2_20_28b2World____29_28_29_20const_29($4, $0 + 1656 | 0);
 HEAP32[$0 + 3872 >> 2] = 0;
 HEAP32[$0 + 3868 >> 2] = 107;
 $1 = HEAP32[$0 + 3872 >> 2];
 $2 = HEAP32[$0 + 3868 >> 2];
 HEAP32[$0 + 5880 >> 2] = $2;
 HEAP32[$0 + 5884 >> 2] = $1;
 $1 = HEAP32[$0 + 5880 >> 2];
 $2 = HEAP32[$0 + 5884 >> 2];
 HEAP32[$0 + 5908 >> 2] = $3;
 HEAP32[$0 + 5904 >> 2] = 6119;
 HEAP32[$0 + 5900 >> 2] = $2;
 HEAP32[$0 + 5896 >> 2] = $1;
 $3 = HEAP32[$0 + 5904 >> 2];
 $1 = HEAP32[$0 + 5896 >> 2];
 HEAP32[$0 + 5892 >> 2] = HEAP32[$0 + 5900 >> 2];
 HEAP32[$0 + 5888 >> 2] = $1;
 $2 = HEAP32[$0 + 5892 >> 2];
 $1 = HEAP32[$0 + 5888 >> 2];
 HEAP32[$0 + 1648 >> 2] = $1;
 HEAP32[$0 + 1652 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28_29___invoke_b2World__28char_20const__2c_20void_20_28b2World____29_28_29_29($3, $0 + 1648 | 0);
 HEAP32[$0 + 5932 >> 2] = $0 + 3867;
 HEAP32[$0 + 5928 >> 2] = 9208;
 void_20emscripten__internal__NoBaseClass__verify_b2Shape__28_29();
 HEAP32[$0 + 5924 >> 2] = 108;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2Shape__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 5920 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2Shape__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 5916 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 5912 >> 2] = 109;
 $1 = emscripten__internal__TypeID_b2Shape_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Shape__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20void___get_28_29();
 $4 = emscripten__internal__NoBaseClass__get_28_29();
 HEAP32[$0 + 15256 >> 2] = HEAP32[$0 + 5924 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 5924 >> 2];
 HEAP32[$0 + 14724 >> 2] = HEAP32[$0 + 5920 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $8 = HEAP32[$0 + 5920 >> 2];
 HEAP32[$0 + 14720 >> 2] = HEAP32[$0 + 5916 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $10 = HEAP32[$0 + 5916 >> 2];
 $11 = HEAP32[$0 + 5928 >> 2];
 HEAP32[$0 + 15260 >> 2] = HEAP32[$0 + 5912 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 5912 >> 2]);
 HEAP32[$0 + 5952 >> 2] = $0 + 3867;
 HEAP32[$0 + 5948 >> 2] = 9049;
 HEAP32[$0 + 5944 >> 2] = 4;
 $1 = HEAP32[$0 + 5952 >> 2];
 HEAP32[$0 + 5940 >> 2] = 110;
 HEAP32[$0 + 5936 >> 2] = 111;
 $2 = emscripten__internal__TypeID_b2Shape_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 5948 >> 2];
 $4 = emscripten__internal__TypeID_b2Shape__Type_2c_20void___get_28_29();
 HEAP32[$0 + 15264 >> 2] = HEAP32[$0 + 5940 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 5940 >> 2];
 $7 = b2Shape__Type_20b2Shape_____20emscripten__internal__getContext_b2Shape__Type_20b2Shape_____28b2Shape__Type_20b2Shape____20const__29($0 + 5944 | 0);
 $8 = emscripten__internal__TypeID_b2Shape__Type_2c_20void___get_28_29();
 HEAP32[$0 + 15268 >> 2] = HEAP32[$0 + 5936 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 5936 >> 2], b2Shape__Type_20b2Shape_____20emscripten__internal__getContext_b2Shape__Type_20b2Shape_____28b2Shape__Type_20b2Shape____20const__29($0 + 5944 | 0) | 0);
 HEAP32[$0 + 5972 >> 2] = $1;
 HEAP32[$0 + 5968 >> 2] = 3305;
 HEAP32[$0 + 5964 >> 2] = 8;
 $3 = HEAP32[$0 + 5972 >> 2];
 HEAP32[$0 + 5960 >> 2] = 112;
 HEAP32[$0 + 5956 >> 2] = 113;
 $1 = emscripten__internal__TypeID_b2Shape_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 5968 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15272 >> 2] = HEAP32[$0 + 5960 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 5960 >> 2];
 $7 = float_20b2Shape_____20emscripten__internal__getContext_float_20b2Shape_____28float_20b2Shape____20const__29($0 + 5964 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15276 >> 2] = HEAP32[$0 + 5956 >> 2];
 _embind_register_class_property($1 | 0, $2 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 5956 >> 2], float_20b2Shape_____20emscripten__internal__getContext_float_20b2Shape_____28float_20b2Shape____20const__29($0 + 5964 | 0) | 0);
 HEAP32[$0 + 3860 >> 2] = 0;
 HEAP32[$0 + 3856 >> 2] = 114;
 $1 = HEAP32[$0 + 3860 >> 2];
 $2 = HEAP32[$0 + 3856 >> 2];
 HEAP32[$0 + 5976 >> 2] = $2;
 HEAP32[$0 + 5980 >> 2] = $1;
 $1 = HEAP32[$0 + 5976 >> 2];
 $2 = HEAP32[$0 + 5980 >> 2];
 HEAP32[$0 + 6004 >> 2] = $3;
 HEAP32[$0 + 6e3 >> 2] = 9081;
 HEAP32[$0 + 5996 >> 2] = $2;
 HEAP32[$0 + 5992 >> 2] = $1;
 $3 = HEAP32[$0 + 6004 >> 2];
 $4 = HEAP32[$0 + 6e3 >> 2];
 $1 = HEAP32[$0 + 5992 >> 2];
 HEAP32[$0 + 5988 >> 2] = HEAP32[$0 + 5996 >> 2];
 HEAP32[$0 + 5984 >> 2] = $1;
 $2 = HEAP32[$0 + 5988 >> 2];
 $1 = HEAP32[$0 + 5984 >> 2];
 HEAP32[$0 + 1640 >> 2] = $1;
 HEAP32[$0 + 1644 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Shape__Type_20_28b2Shape____29_28_29_20const___invoke_b2Shape__28char_20const__2c_20b2Shape__Type_20_28b2Shape____29_28_29_20const_29($4, $0 + 1640 | 0);
 HEAP32[$0 + 3852 >> 2] = 1;
 HEAP32[$0 + 3848 >> 2] = 12;
 $1 = HEAP32[$0 + 3852 >> 2];
 $2 = HEAP32[$0 + 3848 >> 2];
 HEAP32[$0 + 6008 >> 2] = $2;
 HEAP32[$0 + 6012 >> 2] = $1;
 $1 = HEAP32[$0 + 6008 >> 2];
 $2 = HEAP32[$0 + 6012 >> 2];
 HEAP32[$0 + 6036 >> 2] = $3;
 HEAP32[$0 + 6032 >> 2] = 2431;
 HEAP32[$0 + 6028 >> 2] = $2;
 HEAP32[$0 + 6024 >> 2] = $1;
 $3 = HEAP32[$0 + 6036 >> 2];
 $4 = HEAP32[$0 + 6032 >> 2];
 $1 = HEAP32[$0 + 6024 >> 2];
 HEAP32[$0 + 6020 >> 2] = HEAP32[$0 + 6028 >> 2];
 HEAP32[$0 + 6016 >> 2] = $1;
 $2 = HEAP32[$0 + 6020 >> 2];
 $1 = HEAP32[$0 + 6016 >> 2];
 HEAP32[$0 + 1632 >> 2] = $1;
 HEAP32[$0 + 1636 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_int_20_28b2Shape____29_28_29_20const___invoke_b2Shape__28char_20const__2c_20int_20_28b2Shape____29_28_29_20const_29($4, $0 + 1632 | 0);
 HEAP32[$0 + 3844 >> 2] = 1;
 HEAP32[$0 + 3840 >> 2] = 16;
 $1 = HEAP32[$0 + 3844 >> 2];
 $2 = HEAP32[$0 + 3840 >> 2];
 HEAP32[$0 + 6040 >> 2] = $2;
 HEAP32[$0 + 6044 >> 2] = $1;
 $1 = HEAP32[$0 + 6040 >> 2];
 $2 = HEAP32[$0 + 6044 >> 2];
 HEAP32[$0 + 6068 >> 2] = $3;
 HEAP32[$0 + 6064 >> 2] = 2455;
 HEAP32[$0 + 6060 >> 2] = $2;
 HEAP32[$0 + 6056 >> 2] = $1;
 $3 = HEAP32[$0 + 6068 >> 2];
 $4 = HEAP32[$0 + 6064 >> 2];
 $1 = HEAP32[$0 + 6056 >> 2];
 HEAP32[$0 + 6052 >> 2] = HEAP32[$0 + 6060 >> 2];
 HEAP32[$0 + 6048 >> 2] = $1;
 $2 = HEAP32[$0 + 6052 >> 2];
 $1 = HEAP32[$0 + 6048 >> 2];
 HEAP32[$0 + 1624 >> 2] = $1;
 HEAP32[$0 + 1628 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Shape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const___invoke_b2Shape__28char_20const__2c_20bool_20_28b2Shape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_29($4, $0 + 1624 | 0);
 HEAP32[$0 + 3832 >> 2] = 1;
 HEAP32[$0 + 3828 >> 2] = 20;
 $1 = HEAP32[$0 + 3832 >> 2];
 $2 = HEAP32[$0 + 3828 >> 2];
 HEAP32[$0 + 6072 >> 2] = $2;
 HEAP32[$0 + 6076 >> 2] = $1;
 $1 = HEAP32[$0 + 6072 >> 2];
 $2 = HEAP32[$0 + 6076 >> 2];
 HEAP32[$0 + 6100 >> 2] = $3;
 HEAP32[$0 + 6096 >> 2] = 1955;
 HEAP32[$0 + 6092 >> 2] = $2;
 HEAP32[$0 + 6088 >> 2] = $1;
 $3 = HEAP32[$0 + 6100 >> 2];
 $4 = HEAP32[$0 + 6096 >> 2];
 $1 = HEAP32[$0 + 6088 >> 2];
 HEAP32[$0 + 6084 >> 2] = HEAP32[$0 + 6092 >> 2];
 HEAP32[$0 + 6080 >> 2] = $1;
 $2 = HEAP32[$0 + 6084 >> 2];
 $1 = HEAP32[$0 + 6080 >> 2];
 HEAP32[$0 + 1616 >> 2] = $1;
 HEAP32[$0 + 1620 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Shape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const___invoke_b2Shape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20bool_20_28b2Shape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_29($4, $0 + 1616 | 0);
 HEAP32[$0 + 3820 >> 2] = 1;
 HEAP32[$0 + 3816 >> 2] = 24;
 $1 = HEAP32[$0 + 3820 >> 2];
 $2 = HEAP32[$0 + 3816 >> 2];
 HEAP32[$0 + 6104 >> 2] = $2;
 HEAP32[$0 + 6108 >> 2] = $1;
 $1 = HEAP32[$0 + 6104 >> 2];
 $2 = HEAP32[$0 + 6108 >> 2];
 HEAP32[$0 + 6132 >> 2] = $3;
 HEAP32[$0 + 6128 >> 2] = 10896;
 HEAP32[$0 + 6124 >> 2] = $2;
 HEAP32[$0 + 6120 >> 2] = $1;
 $3 = HEAP32[$0 + 6132 >> 2];
 $4 = HEAP32[$0 + 6128 >> 2];
 $1 = HEAP32[$0 + 6120 >> 2];
 HEAP32[$0 + 6116 >> 2] = HEAP32[$0 + 6124 >> 2];
 HEAP32[$0 + 6112 >> 2] = $1;
 $2 = HEAP32[$0 + 6116 >> 2];
 $1 = HEAP32[$0 + 6112 >> 2];
 HEAP32[$0 + 1608 >> 2] = $1;
 HEAP32[$0 + 1612 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Shape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const___invoke_b2Shape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Shape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_29($4, $0 + 1608 | 0);
 HEAP32[$0 + 3808 >> 2] = 1;
 HEAP32[$0 + 3804 >> 2] = 28;
 $1 = HEAP32[$0 + 3808 >> 2];
 $2 = HEAP32[$0 + 3804 >> 2];
 HEAP32[$0 + 6136 >> 2] = $2;
 HEAP32[$0 + 6140 >> 2] = $1;
 $1 = HEAP32[$0 + 6136 >> 2];
 $2 = HEAP32[$0 + 6140 >> 2];
 HEAP32[$0 + 6164 >> 2] = $3;
 HEAP32[$0 + 6160 >> 2] = 3462;
 HEAP32[$0 + 6156 >> 2] = $2;
 HEAP32[$0 + 6152 >> 2] = $1;
 $3 = HEAP32[$0 + 6164 >> 2];
 $4 = HEAP32[$0 + 6160 >> 2];
 $1 = HEAP32[$0 + 6152 >> 2];
 HEAP32[$0 + 6148 >> 2] = HEAP32[$0 + 6156 >> 2];
 HEAP32[$0 + 6144 >> 2] = $1;
 $2 = HEAP32[$0 + 6148 >> 2];
 $1 = HEAP32[$0 + 6144 >> 2];
 HEAP32[$0 + 1600 >> 2] = $1;
 HEAP32[$0 + 1604 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Shape____29_28b2MassData__2c_20float_29_20const___invoke_b2Shape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Shape____29_28b2MassData__2c_20float_29_20const_29($4, $0 + 1600 | 0);
 $1 = emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_2__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_2__28embind_init_b2_28_29__$_2_20const__29($0 + 3803 | 0);
 HEAP32[$0 + 6176 >> 2] = $3;
 HEAP32[$0 + 6172 >> 2] = 3314;
 HEAP32[$0 + 6168 >> 2] = $1;
 $1 = HEAP32[$0 + 6176 >> 2];
 void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2Shape__2c_20float_29___invoke_b2Shape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28__29_28b2Shape__2c_20float_29_29(HEAP32[$0 + 6172 >> 2], HEAP32[$0 + 6168 >> 2]);
 $2 = emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_3__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_3__28embind_init_b2_28_29__$_3_20const__29($0 + 3801 | 0);
 HEAP32[$0 + 6188 >> 2] = $1;
 HEAP32[$0 + 6184 >> 2] = 3324;
 HEAP32[$0 + 6180 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28__29_28b2Shape__29___invoke_b2Shape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20float_20_28__29_28b2Shape__29_29(HEAP32[$0 + 6184 >> 2], HEAP32[$0 + 6180 >> 2]);
 HEAP32[$0 + 6212 >> 2] = $0 + 3799;
 HEAP32[$0 + 6208 >> 2] = 9192;
 void_20emscripten__base_b2Shape___verify_b2CircleShape__28_29();
 HEAP32[$0 + 6204 >> 2] = 115;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Shape__20_28_emscripten__base_b2Shape___getUpcaster_b2CircleShape__28_29_29_28b2CircleShape__29(), 
 HEAP32[wasm2js_i32$0 + 6200 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2CircleShape__20_28_emscripten__base_b2Shape___getDowncaster_b2CircleShape__28_29_29_28b2Shape__29(), 
 HEAP32[wasm2js_i32$0 + 6196 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 6192 >> 2] = 116;
 $1 = emscripten__internal__TypeID_b2CircleShape_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2CircleShape__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2Shape___get_28_29();
 HEAP32[$0 + 15280 >> 2] = HEAP32[$0 + 6204 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 6204 >> 2];
 HEAP32[$0 + 15284 >> 2] = HEAP32[$0 + 6200 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 6200 >> 2];
 HEAP32[$0 + 15288 >> 2] = HEAP32[$0 + 6196 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 6196 >> 2];
 $11 = HEAP32[$0 + 6208 >> 2];
 HEAP32[$0 + 15292 >> 2] = HEAP32[$0 + 6192 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 6192 >> 2]);
 HEAP32[$0 + 6216 >> 2] = $0 + 3799;
 HEAP32[$0 + 15300 >> 2] = HEAP32[$0 + 6216 >> 2];
 HEAP32[$0 + 15296 >> 2] = 117;
 $1 = HEAP32[$0 + 15300 >> 2];
 void_20emscripten__internal__RegisterClassConstructor_b2CircleShape__20_28__29_28_29___invoke_b2CircleShape__28b2CircleShape__20_28__29_28_29_29(HEAP32[$0 + 15296 >> 2]);
 HEAP32[$0 + 6236 >> 2] = $1;
 HEAP32[$0 + 6232 >> 2] = 6150;
 HEAP32[$0 + 6228 >> 2] = 12;
 $3 = HEAP32[$0 + 6236 >> 2];
 HEAP32[$0 + 6224 >> 2] = 118;
 HEAP32[$0 + 6220 >> 2] = 119;
 $1 = emscripten__internal__TypeID_b2CircleShape_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 6232 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15304 >> 2] = HEAP32[$0 + 6224 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 6224 >> 2];
 $7 = b2Vec2_20b2CircleShape_____20emscripten__internal__getContext_b2Vec2_20b2CircleShape_____28b2Vec2_20b2CircleShape____20const__29($0 + 6228 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15308 >> 2] = HEAP32[$0 + 6220 >> 2];
 _embind_register_class_property($1 | 0, $2 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 6220 >> 2], b2Vec2_20b2CircleShape_____20emscripten__internal__getContext_b2Vec2_20b2CircleShape_____28b2Vec2_20b2CircleShape____20const__29($0 + 6228 | 0) | 0);
 HEAP32[$0 + 3792 >> 2] = 1;
 HEAP32[$0 + 3788 >> 2] = 8;
 $1 = HEAP32[$0 + 3792 >> 2];
 $2 = HEAP32[$0 + 3788 >> 2];
 HEAP32[$0 + 6240 >> 2] = $2;
 HEAP32[$0 + 6244 >> 2] = $1;
 $1 = HEAP32[$0 + 6240 >> 2];
 $2 = HEAP32[$0 + 6244 >> 2];
 HEAP32[$0 + 6268 >> 2] = $3;
 HEAP32[$0 + 6264 >> 2] = 9214;
 HEAP32[$0 + 6260 >> 2] = $2;
 HEAP32[$0 + 6256 >> 2] = $1;
 $3 = HEAP32[$0 + 6268 >> 2];
 $4 = HEAP32[$0 + 6264 >> 2];
 $1 = HEAP32[$0 + 6256 >> 2];
 HEAP32[$0 + 6252 >> 2] = HEAP32[$0 + 6260 >> 2];
 HEAP32[$0 + 6248 >> 2] = $1;
 $2 = HEAP32[$0 + 6252 >> 2];
 $1 = HEAP32[$0 + 6248 >> 2];
 HEAP32[$0 + 1592 >> 2] = $1;
 HEAP32[$0 + 1596 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Shape__20_28b2CircleShape____29_28b2BlockAllocator__29_20const___invoke_b2CircleShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Shape__20_28b2CircleShape____29_28b2BlockAllocator__29_20const_29($4, $0 + 1592 | 0);
 HEAP32[$0 + 3784 >> 2] = 1;
 HEAP32[$0 + 3780 >> 2] = 12;
 $1 = HEAP32[$0 + 3784 >> 2];
 $2 = HEAP32[$0 + 3780 >> 2];
 HEAP32[$0 + 6272 >> 2] = $2;
 HEAP32[$0 + 6276 >> 2] = $1;
 $1 = HEAP32[$0 + 6272 >> 2];
 $2 = HEAP32[$0 + 6276 >> 2];
 HEAP32[$0 + 6300 >> 2] = $3;
 HEAP32[$0 + 6296 >> 2] = 2431;
 HEAP32[$0 + 6292 >> 2] = $2;
 HEAP32[$0 + 6288 >> 2] = $1;
 $3 = HEAP32[$0 + 6300 >> 2];
 $4 = HEAP32[$0 + 6296 >> 2];
 $1 = HEAP32[$0 + 6288 >> 2];
 HEAP32[$0 + 6284 >> 2] = HEAP32[$0 + 6292 >> 2];
 HEAP32[$0 + 6280 >> 2] = $1;
 $2 = HEAP32[$0 + 6284 >> 2];
 $1 = HEAP32[$0 + 6280 >> 2];
 HEAP32[$0 + 1584 >> 2] = $1;
 HEAP32[$0 + 1588 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_int_20_28b2CircleShape____29_28_29_20const___invoke_b2CircleShape__28char_20const__2c_20int_20_28b2CircleShape____29_28_29_20const_29($4, $0 + 1584 | 0);
 HEAP32[$0 + 3776 >> 2] = 1;
 HEAP32[$0 + 3772 >> 2] = 16;
 $1 = HEAP32[$0 + 3776 >> 2];
 $2 = HEAP32[$0 + 3772 >> 2];
 HEAP32[$0 + 6304 >> 2] = $2;
 HEAP32[$0 + 6308 >> 2] = $1;
 $1 = HEAP32[$0 + 6304 >> 2];
 $2 = HEAP32[$0 + 6308 >> 2];
 HEAP32[$0 + 6332 >> 2] = $3;
 HEAP32[$0 + 6328 >> 2] = 2455;
 HEAP32[$0 + 6324 >> 2] = $2;
 HEAP32[$0 + 6320 >> 2] = $1;
 $3 = HEAP32[$0 + 6332 >> 2];
 $4 = HEAP32[$0 + 6328 >> 2];
 $1 = HEAP32[$0 + 6320 >> 2];
 HEAP32[$0 + 6316 >> 2] = HEAP32[$0 + 6324 >> 2];
 HEAP32[$0 + 6312 >> 2] = $1;
 $2 = HEAP32[$0 + 6316 >> 2];
 $1 = HEAP32[$0 + 6312 >> 2];
 HEAP32[$0 + 1576 >> 2] = $1;
 HEAP32[$0 + 1580 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2CircleShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const___invoke_b2CircleShape__28char_20const__2c_20bool_20_28b2CircleShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_29($4, $0 + 1576 | 0);
 HEAP32[$0 + 3764 >> 2] = 1;
 HEAP32[$0 + 3760 >> 2] = 20;
 $1 = HEAP32[$0 + 3764 >> 2];
 $2 = HEAP32[$0 + 3760 >> 2];
 HEAP32[$0 + 6336 >> 2] = $2;
 HEAP32[$0 + 6340 >> 2] = $1;
 $1 = HEAP32[$0 + 6336 >> 2];
 $2 = HEAP32[$0 + 6340 >> 2];
 HEAP32[$0 + 6364 >> 2] = $3;
 HEAP32[$0 + 6360 >> 2] = 1955;
 HEAP32[$0 + 6356 >> 2] = $2;
 HEAP32[$0 + 6352 >> 2] = $1;
 $3 = HEAP32[$0 + 6364 >> 2];
 $4 = HEAP32[$0 + 6360 >> 2];
 $1 = HEAP32[$0 + 6352 >> 2];
 HEAP32[$0 + 6348 >> 2] = HEAP32[$0 + 6356 >> 2];
 HEAP32[$0 + 6344 >> 2] = $1;
 $2 = HEAP32[$0 + 6348 >> 2];
 $1 = HEAP32[$0 + 6344 >> 2];
 HEAP32[$0 + 1568 >> 2] = $1;
 HEAP32[$0 + 1572 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2CircleShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const___invoke_b2CircleShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20bool_20_28b2CircleShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_29($4, $0 + 1568 | 0);
 HEAP32[$0 + 3752 >> 2] = 1;
 HEAP32[$0 + 3748 >> 2] = 24;
 $1 = HEAP32[$0 + 3752 >> 2];
 $2 = HEAP32[$0 + 3748 >> 2];
 HEAP32[$0 + 6368 >> 2] = $2;
 HEAP32[$0 + 6372 >> 2] = $1;
 $1 = HEAP32[$0 + 6368 >> 2];
 $2 = HEAP32[$0 + 6372 >> 2];
 HEAP32[$0 + 6396 >> 2] = $3;
 HEAP32[$0 + 6392 >> 2] = 10896;
 HEAP32[$0 + 6388 >> 2] = $2;
 HEAP32[$0 + 6384 >> 2] = $1;
 $3 = HEAP32[$0 + 6396 >> 2];
 $4 = HEAP32[$0 + 6392 >> 2];
 $1 = HEAP32[$0 + 6384 >> 2];
 HEAP32[$0 + 6380 >> 2] = HEAP32[$0 + 6388 >> 2];
 HEAP32[$0 + 6376 >> 2] = $1;
 $2 = HEAP32[$0 + 6380 >> 2];
 $1 = HEAP32[$0 + 6376 >> 2];
 HEAP32[$0 + 1560 >> 2] = $1;
 HEAP32[$0 + 1564 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2CircleShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const___invoke_b2CircleShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2CircleShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_29($4, $0 + 1560 | 0);
 HEAP32[$0 + 3740 >> 2] = 1;
 HEAP32[$0 + 3736 >> 2] = 28;
 $1 = HEAP32[$0 + 3740 >> 2];
 $2 = HEAP32[$0 + 3736 >> 2];
 HEAP32[$0 + 6400 >> 2] = $2;
 HEAP32[$0 + 6404 >> 2] = $1;
 $1 = HEAP32[$0 + 6400 >> 2];
 $2 = HEAP32[$0 + 6404 >> 2];
 HEAP32[$0 + 6428 >> 2] = $3;
 HEAP32[$0 + 6424 >> 2] = 3462;
 HEAP32[$0 + 6420 >> 2] = $2;
 HEAP32[$0 + 6416 >> 2] = $1;
 $3 = HEAP32[$0 + 6424 >> 2];
 $1 = HEAP32[$0 + 6416 >> 2];
 HEAP32[$0 + 6412 >> 2] = HEAP32[$0 + 6420 >> 2];
 HEAP32[$0 + 6408 >> 2] = $1;
 $2 = HEAP32[$0 + 6412 >> 2];
 $1 = HEAP32[$0 + 6408 >> 2];
 HEAP32[$0 + 1552 >> 2] = $1;
 HEAP32[$0 + 1556 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2CircleShape____29_28b2MassData__2c_20float_29_20const___invoke_b2CircleShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2CircleShape____29_28b2MassData__2c_20float_29_20const_29($3, $0 + 1552 | 0);
 HEAP32[$0 + 6452 >> 2] = $0 + 3735;
 HEAP32[$0 + 6448 >> 2] = 9204;
 void_20emscripten__base_b2Shape___verify_b2EdgeShape__28_29();
 HEAP32[$0 + 6444 >> 2] = 120;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Shape__20_28_emscripten__base_b2Shape___getUpcaster_b2EdgeShape__28_29_29_28b2EdgeShape__29(), 
 HEAP32[wasm2js_i32$0 + 6440 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2EdgeShape__20_28_emscripten__base_b2Shape___getDowncaster_b2EdgeShape__28_29_29_28b2Shape__29(), 
 HEAP32[wasm2js_i32$0 + 6436 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 6432 >> 2] = 121;
 $1 = emscripten__internal__TypeID_b2EdgeShape_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2EdgeShape__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2Shape___get_28_29();
 HEAP32[$0 + 15312 >> 2] = HEAP32[$0 + 6444 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 6444 >> 2];
 HEAP32[$0 + 15316 >> 2] = HEAP32[$0 + 6440 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 6440 >> 2];
 HEAP32[$0 + 15320 >> 2] = HEAP32[$0 + 6436 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 6436 >> 2];
 $11 = HEAP32[$0 + 6448 >> 2];
 HEAP32[$0 + 15324 >> 2] = HEAP32[$0 + 6432 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 6432 >> 2]);
 HEAP32[$0 + 3728 >> 2] = 1;
 HEAP32[$0 + 3724 >> 2] = 8;
 $1 = HEAP32[$0 + 3728 >> 2];
 $2 = HEAP32[$0 + 3724 >> 2];
 HEAP32[$0 + 6456 >> 2] = $2;
 HEAP32[$0 + 6460 >> 2] = $1;
 $1 = HEAP32[$0 + 6456 >> 2];
 $2 = HEAP32[$0 + 6460 >> 2];
 HEAP32[$0 + 6484 >> 2] = $0 + 3735;
 HEAP32[$0 + 6480 >> 2] = 9214;
 HEAP32[$0 + 6476 >> 2] = $2;
 HEAP32[$0 + 6472 >> 2] = $1;
 $3 = HEAP32[$0 + 6484 >> 2];
 $4 = HEAP32[$0 + 6480 >> 2];
 $1 = HEAP32[$0 + 6472 >> 2];
 HEAP32[$0 + 6468 >> 2] = HEAP32[$0 + 6476 >> 2];
 HEAP32[$0 + 6464 >> 2] = $1;
 $2 = HEAP32[$0 + 6468 >> 2];
 $1 = HEAP32[$0 + 6464 >> 2];
 HEAP32[$0 + 1544 >> 2] = $1;
 HEAP32[$0 + 1548 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Shape__20_28b2EdgeShape____29_28b2BlockAllocator__29_20const___invoke_b2EdgeShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Shape__20_28b2EdgeShape____29_28b2BlockAllocator__29_20const_29($4, $0 + 1544 | 0);
 HEAP32[$0 + 3720 >> 2] = 1;
 HEAP32[$0 + 3716 >> 2] = 12;
 $1 = HEAP32[$0 + 3720 >> 2];
 $2 = HEAP32[$0 + 3716 >> 2];
 HEAP32[$0 + 6488 >> 2] = $2;
 HEAP32[$0 + 6492 >> 2] = $1;
 $1 = HEAP32[$0 + 6488 >> 2];
 $2 = HEAP32[$0 + 6492 >> 2];
 HEAP32[$0 + 6516 >> 2] = $3;
 HEAP32[$0 + 6512 >> 2] = 2431;
 HEAP32[$0 + 6508 >> 2] = $2;
 HEAP32[$0 + 6504 >> 2] = $1;
 $3 = HEAP32[$0 + 6516 >> 2];
 $4 = HEAP32[$0 + 6512 >> 2];
 $1 = HEAP32[$0 + 6504 >> 2];
 HEAP32[$0 + 6500 >> 2] = HEAP32[$0 + 6508 >> 2];
 HEAP32[$0 + 6496 >> 2] = $1;
 $2 = HEAP32[$0 + 6500 >> 2];
 $1 = HEAP32[$0 + 6496 >> 2];
 HEAP32[$0 + 1536 >> 2] = $1;
 HEAP32[$0 + 1540 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_int_20_28b2EdgeShape____29_28_29_20const___invoke_b2EdgeShape__28char_20const__2c_20int_20_28b2EdgeShape____29_28_29_20const_29($4, $0 + 1536 | 0);
 HEAP32[$0 + 3712 >> 2] = 1;
 HEAP32[$0 + 3708 >> 2] = 16;
 $1 = HEAP32[$0 + 3712 >> 2];
 $2 = HEAP32[$0 + 3708 >> 2];
 HEAP32[$0 + 6520 >> 2] = $2;
 HEAP32[$0 + 6524 >> 2] = $1;
 $1 = HEAP32[$0 + 6520 >> 2];
 $2 = HEAP32[$0 + 6524 >> 2];
 HEAP32[$0 + 6548 >> 2] = $3;
 HEAP32[$0 + 6544 >> 2] = 2455;
 HEAP32[$0 + 6540 >> 2] = $2;
 HEAP32[$0 + 6536 >> 2] = $1;
 $3 = HEAP32[$0 + 6548 >> 2];
 $4 = HEAP32[$0 + 6544 >> 2];
 $1 = HEAP32[$0 + 6536 >> 2];
 HEAP32[$0 + 6532 >> 2] = HEAP32[$0 + 6540 >> 2];
 HEAP32[$0 + 6528 >> 2] = $1;
 $2 = HEAP32[$0 + 6532 >> 2];
 $1 = HEAP32[$0 + 6528 >> 2];
 HEAP32[$0 + 1528 >> 2] = $1;
 HEAP32[$0 + 1532 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2EdgeShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const___invoke_b2EdgeShape__28char_20const__2c_20bool_20_28b2EdgeShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_29($4, $0 + 1528 | 0);
 HEAP32[$0 + 3700 >> 2] = 1;
 HEAP32[$0 + 3696 >> 2] = 20;
 $1 = HEAP32[$0 + 3700 >> 2];
 $2 = HEAP32[$0 + 3696 >> 2];
 HEAP32[$0 + 6552 >> 2] = $2;
 HEAP32[$0 + 6556 >> 2] = $1;
 $1 = HEAP32[$0 + 6552 >> 2];
 $2 = HEAP32[$0 + 6556 >> 2];
 HEAP32[$0 + 6580 >> 2] = $3;
 HEAP32[$0 + 6576 >> 2] = 1955;
 HEAP32[$0 + 6572 >> 2] = $2;
 HEAP32[$0 + 6568 >> 2] = $1;
 $3 = HEAP32[$0 + 6580 >> 2];
 $4 = HEAP32[$0 + 6576 >> 2];
 $1 = HEAP32[$0 + 6568 >> 2];
 HEAP32[$0 + 6564 >> 2] = HEAP32[$0 + 6572 >> 2];
 HEAP32[$0 + 6560 >> 2] = $1;
 $2 = HEAP32[$0 + 6564 >> 2];
 $1 = HEAP32[$0 + 6560 >> 2];
 HEAP32[$0 + 1520 >> 2] = $1;
 HEAP32[$0 + 1524 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2EdgeShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const___invoke_b2EdgeShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20bool_20_28b2EdgeShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_29($4, $0 + 1520 | 0);
 HEAP32[$0 + 3688 >> 2] = 1;
 HEAP32[$0 + 3684 >> 2] = 24;
 $1 = HEAP32[$0 + 3688 >> 2];
 $2 = HEAP32[$0 + 3684 >> 2];
 HEAP32[$0 + 6584 >> 2] = $2;
 HEAP32[$0 + 6588 >> 2] = $1;
 $1 = HEAP32[$0 + 6584 >> 2];
 $2 = HEAP32[$0 + 6588 >> 2];
 HEAP32[$0 + 6612 >> 2] = $3;
 HEAP32[$0 + 6608 >> 2] = 10896;
 HEAP32[$0 + 6604 >> 2] = $2;
 HEAP32[$0 + 6600 >> 2] = $1;
 $3 = HEAP32[$0 + 6612 >> 2];
 $4 = HEAP32[$0 + 6608 >> 2];
 $1 = HEAP32[$0 + 6600 >> 2];
 HEAP32[$0 + 6596 >> 2] = HEAP32[$0 + 6604 >> 2];
 HEAP32[$0 + 6592 >> 2] = $1;
 $2 = HEAP32[$0 + 6596 >> 2];
 $1 = HEAP32[$0 + 6592 >> 2];
 HEAP32[$0 + 1512 >> 2] = $1;
 HEAP32[$0 + 1516 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2EdgeShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const___invoke_b2EdgeShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2EdgeShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_29($4, $0 + 1512 | 0);
 HEAP32[$0 + 3676 >> 2] = 1;
 HEAP32[$0 + 3672 >> 2] = 28;
 $1 = HEAP32[$0 + 3676 >> 2];
 $2 = HEAP32[$0 + 3672 >> 2];
 HEAP32[$0 + 6616 >> 2] = $2;
 HEAP32[$0 + 6620 >> 2] = $1;
 $1 = HEAP32[$0 + 6616 >> 2];
 $2 = HEAP32[$0 + 6620 >> 2];
 HEAP32[$0 + 6648 >> 2] = $3;
 HEAP32[$0 + 6644 >> 2] = 3462;
 HEAP32[$0 + 6640 >> 2] = $2;
 HEAP32[$0 + 6636 >> 2] = $1;
 $3 = HEAP32[$0 + 6644 >> 2];
 $1 = HEAP32[$0 + 6636 >> 2];
 HEAP32[$0 + 6632 >> 2] = HEAP32[$0 + 6640 >> 2];
 HEAP32[$0 + 6628 >> 2] = $1;
 $2 = HEAP32[$0 + 6632 >> 2];
 $1 = HEAP32[$0 + 6628 >> 2];
 HEAP32[$0 + 1504 >> 2] = $1;
 HEAP32[$0 + 1508 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2EdgeShape____29_28b2MassData__2c_20float_29_20const___invoke_b2EdgeShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2EdgeShape____29_28b2MassData__2c_20float_29_20const_29($3, $0 + 1504 | 0);
 HEAP32[$0 + 6672 >> 2] = $0 + 3671;
 HEAP32[$0 + 6668 >> 2] = 9156;
 void_20emscripten__base_b2Shape___verify_b2PolygonShape__28_29();
 HEAP32[$0 + 6664 >> 2] = 122;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Shape__20_28_emscripten__base_b2Shape___getUpcaster_b2PolygonShape__28_29_29_28b2PolygonShape__29(), 
 HEAP32[wasm2js_i32$0 + 6660 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2PolygonShape__20_28_emscripten__base_b2Shape___getDowncaster_b2PolygonShape__28_29_29_28b2Shape__29(), 
 HEAP32[wasm2js_i32$0 + 6656 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 6652 >> 2] = 123;
 $1 = emscripten__internal__TypeID_b2PolygonShape_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2PolygonShape__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2Shape___get_28_29();
 HEAP32[$0 + 15328 >> 2] = HEAP32[$0 + 6664 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 6664 >> 2];
 HEAP32[$0 + 15332 >> 2] = HEAP32[$0 + 6660 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 6660 >> 2];
 HEAP32[$0 + 15336 >> 2] = HEAP32[$0 + 6656 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 6656 >> 2];
 $11 = HEAP32[$0 + 6668 >> 2];
 HEAP32[$0 + 15340 >> 2] = HEAP32[$0 + 6652 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 6652 >> 2]);
 HEAP32[$0 + 6676 >> 2] = $0 + 3671;
 HEAP32[$0 + 15348 >> 2] = HEAP32[$0 + 6676 >> 2];
 HEAP32[$0 + 15344 >> 2] = 124;
 $3 = HEAP32[$0 + 15348 >> 2];
 void_20emscripten__internal__RegisterClassConstructor_b2PolygonShape__20_28__29_28_29___invoke_b2PolygonShape__28b2PolygonShape__20_28__29_28_29_29(HEAP32[$0 + 15344 >> 2]);
 HEAP32[$0 + 3664 >> 2] = 1;
 HEAP32[$0 + 3660 >> 2] = 8;
 $1 = HEAP32[$0 + 3664 >> 2];
 $2 = HEAP32[$0 + 3660 >> 2];
 HEAP32[$0 + 6680 >> 2] = $2;
 HEAP32[$0 + 6684 >> 2] = $1;
 $1 = HEAP32[$0 + 6680 >> 2];
 $2 = HEAP32[$0 + 6684 >> 2];
 HEAP32[$0 + 6708 >> 2] = $3;
 HEAP32[$0 + 6704 >> 2] = 9214;
 HEAP32[$0 + 6700 >> 2] = $2;
 HEAP32[$0 + 6696 >> 2] = $1;
 $3 = HEAP32[$0 + 6708 >> 2];
 $4 = HEAP32[$0 + 6704 >> 2];
 $1 = HEAP32[$0 + 6696 >> 2];
 HEAP32[$0 + 6692 >> 2] = HEAP32[$0 + 6700 >> 2];
 HEAP32[$0 + 6688 >> 2] = $1;
 $2 = HEAP32[$0 + 6692 >> 2];
 $1 = HEAP32[$0 + 6688 >> 2];
 HEAP32[$0 + 1496 >> 2] = $1;
 HEAP32[$0 + 1500 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Shape__20_28b2PolygonShape____29_28b2BlockAllocator__29_20const___invoke_b2PolygonShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Shape__20_28b2PolygonShape____29_28b2BlockAllocator__29_20const_29($4, $0 + 1496 | 0);
 HEAP32[$0 + 3656 >> 2] = 1;
 HEAP32[$0 + 3652 >> 2] = 12;
 $1 = HEAP32[$0 + 3656 >> 2];
 $2 = HEAP32[$0 + 3652 >> 2];
 HEAP32[$0 + 6712 >> 2] = $2;
 HEAP32[$0 + 6716 >> 2] = $1;
 $1 = HEAP32[$0 + 6712 >> 2];
 $2 = HEAP32[$0 + 6716 >> 2];
 HEAP32[$0 + 6744 >> 2] = $3;
 HEAP32[$0 + 6740 >> 2] = 2431;
 HEAP32[$0 + 6736 >> 2] = $2;
 HEAP32[$0 + 6732 >> 2] = $1;
 $3 = HEAP32[$0 + 6744 >> 2];
 $4 = HEAP32[$0 + 6740 >> 2];
 $1 = HEAP32[$0 + 6732 >> 2];
 HEAP32[$0 + 6728 >> 2] = HEAP32[$0 + 6736 >> 2];
 HEAP32[$0 + 6724 >> 2] = $1;
 $2 = HEAP32[$0 + 6728 >> 2];
 $1 = HEAP32[$0 + 6724 >> 2];
 HEAP32[$0 + 1488 >> 2] = $1;
 HEAP32[$0 + 1492 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_int_20_28b2PolygonShape____29_28_29_20const___invoke_b2PolygonShape__28char_20const__2c_20int_20_28b2PolygonShape____29_28_29_20const_29($4, $0 + 1488 | 0);
 $1 = emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_4__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_4__28embind_init_b2_28_29__$_4_20const__29($0 + 3651 | 0);
 HEAP32[$0 + 6756 >> 2] = $3;
 HEAP32[$0 + 6752 >> 2] = 3081;
 HEAP32[$0 + 6748 >> 2] = $1;
 $3 = HEAP32[$0 + 6756 >> 2];
 void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29___invoke_b2PolygonShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28__29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29_29(HEAP32[$0 + 6752 >> 2], HEAP32[$0 + 6748 >> 2]);
 HEAP32[$0 + 3644 >> 2] = 1;
 HEAP32[$0 + 3640 >> 2] = 16;
 $1 = HEAP32[$0 + 3644 >> 2];
 $2 = HEAP32[$0 + 3640 >> 2];
 HEAP32[$0 + 6760 >> 2] = $2;
 HEAP32[$0 + 6764 >> 2] = $1;
 $1 = HEAP32[$0 + 6760 >> 2];
 $2 = HEAP32[$0 + 6764 >> 2];
 HEAP32[$0 + 6788 >> 2] = $3;
 HEAP32[$0 + 6784 >> 2] = 2455;
 HEAP32[$0 + 6780 >> 2] = $2;
 HEAP32[$0 + 6776 >> 2] = $1;
 $3 = HEAP32[$0 + 6788 >> 2];
 $4 = HEAP32[$0 + 6784 >> 2];
 $1 = HEAP32[$0 + 6776 >> 2];
 HEAP32[$0 + 6772 >> 2] = HEAP32[$0 + 6780 >> 2];
 HEAP32[$0 + 6768 >> 2] = $1;
 $2 = HEAP32[$0 + 6772 >> 2];
 $1 = HEAP32[$0 + 6768 >> 2];
 HEAP32[$0 + 1480 >> 2] = $1;
 HEAP32[$0 + 1484 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2PolygonShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const___invoke_b2PolygonShape__28char_20const__2c_20bool_20_28b2PolygonShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_29($4, $0 + 1480 | 0);
 HEAP32[$0 + 3632 >> 2] = 1;
 HEAP32[$0 + 3628 >> 2] = 20;
 $1 = HEAP32[$0 + 3632 >> 2];
 $2 = HEAP32[$0 + 3628 >> 2];
 HEAP32[$0 + 6792 >> 2] = $2;
 HEAP32[$0 + 6796 >> 2] = $1;
 $1 = HEAP32[$0 + 6792 >> 2];
 $2 = HEAP32[$0 + 6796 >> 2];
 HEAP32[$0 + 6820 >> 2] = $3;
 HEAP32[$0 + 6816 >> 2] = 1955;
 HEAP32[$0 + 6812 >> 2] = $2;
 HEAP32[$0 + 6808 >> 2] = $1;
 $3 = HEAP32[$0 + 6820 >> 2];
 $4 = HEAP32[$0 + 6816 >> 2];
 $1 = HEAP32[$0 + 6808 >> 2];
 HEAP32[$0 + 6804 >> 2] = HEAP32[$0 + 6812 >> 2];
 HEAP32[$0 + 6800 >> 2] = $1;
 $2 = HEAP32[$0 + 6804 >> 2];
 $1 = HEAP32[$0 + 6800 >> 2];
 HEAP32[$0 + 1472 >> 2] = $1;
 HEAP32[$0 + 1476 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2PolygonShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const___invoke_b2PolygonShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20bool_20_28b2PolygonShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_29($4, $0 + 1472 | 0);
 HEAP32[$0 + 3620 >> 2] = 1;
 HEAP32[$0 + 3616 >> 2] = 24;
 $1 = HEAP32[$0 + 3620 >> 2];
 $2 = HEAP32[$0 + 3616 >> 2];
 HEAP32[$0 + 6824 >> 2] = $2;
 HEAP32[$0 + 6828 >> 2] = $1;
 $1 = HEAP32[$0 + 6824 >> 2];
 $2 = HEAP32[$0 + 6828 >> 2];
 HEAP32[$0 + 6852 >> 2] = $3;
 HEAP32[$0 + 6848 >> 2] = 10896;
 HEAP32[$0 + 6844 >> 2] = $2;
 HEAP32[$0 + 6840 >> 2] = $1;
 $3 = HEAP32[$0 + 6852 >> 2];
 $4 = HEAP32[$0 + 6848 >> 2];
 $1 = HEAP32[$0 + 6840 >> 2];
 HEAP32[$0 + 6836 >> 2] = HEAP32[$0 + 6844 >> 2];
 HEAP32[$0 + 6832 >> 2] = $1;
 $2 = HEAP32[$0 + 6836 >> 2];
 $1 = HEAP32[$0 + 6832 >> 2];
 HEAP32[$0 + 1464 >> 2] = $1;
 HEAP32[$0 + 1468 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2PolygonShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const___invoke_b2PolygonShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2PolygonShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_29($4, $0 + 1464 | 0);
 HEAP32[$0 + 3608 >> 2] = 1;
 HEAP32[$0 + 3604 >> 2] = 28;
 $1 = HEAP32[$0 + 3608 >> 2];
 $2 = HEAP32[$0 + 3604 >> 2];
 HEAP32[$0 + 6856 >> 2] = $2;
 HEAP32[$0 + 6860 >> 2] = $1;
 $1 = HEAP32[$0 + 6856 >> 2];
 $2 = HEAP32[$0 + 6860 >> 2];
 HEAP32[$0 + 6884 >> 2] = $3;
 HEAP32[$0 + 6880 >> 2] = 3462;
 HEAP32[$0 + 6876 >> 2] = $2;
 HEAP32[$0 + 6872 >> 2] = $1;
 $3 = HEAP32[$0 + 6884 >> 2];
 $4 = HEAP32[$0 + 6880 >> 2];
 $1 = HEAP32[$0 + 6872 >> 2];
 HEAP32[$0 + 6868 >> 2] = HEAP32[$0 + 6876 >> 2];
 HEAP32[$0 + 6864 >> 2] = $1;
 $2 = HEAP32[$0 + 6868 >> 2];
 $1 = HEAP32[$0 + 6864 >> 2];
 HEAP32[$0 + 1456 >> 2] = $1;
 HEAP32[$0 + 1460 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2PolygonShape____29_28b2MassData__2c_20float_29_20const___invoke_b2PolygonShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2PolygonShape____29_28b2MassData__2c_20float_29_20const_29($4, $0 + 1456 | 0);
 HEAP32[$0 + 3600 >> 2] = 0;
 HEAP32[$0 + 3596 >> 2] = 125;
 $1 = HEAP32[$0 + 3600 >> 2];
 $2 = HEAP32[$0 + 3596 >> 2];
 HEAP32[$0 + 6888 >> 2] = $2;
 HEAP32[$0 + 6892 >> 2] = $1;
 $1 = HEAP32[$0 + 6888 >> 2];
 $2 = HEAP32[$0 + 6892 >> 2];
 HEAP32[$0 + 6916 >> 2] = $3;
 HEAP32[$0 + 6912 >> 2] = 8771;
 HEAP32[$0 + 6908 >> 2] = $2;
 HEAP32[$0 + 6904 >> 2] = $1;
 $3 = HEAP32[$0 + 6916 >> 2];
 $4 = HEAP32[$0 + 6912 >> 2];
 $1 = HEAP32[$0 + 6904 >> 2];
 HEAP32[$0 + 6900 >> 2] = HEAP32[$0 + 6908 >> 2];
 HEAP32[$0 + 6896 >> 2] = $1;
 $2 = HEAP32[$0 + 6900 >> 2];
 $1 = HEAP32[$0 + 6896 >> 2];
 HEAP32[$0 + 1448 >> 2] = $1;
 HEAP32[$0 + 1452 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2PolygonShape____29_28_29_20const___invoke_b2PolygonShape__28char_20const__2c_20bool_20_28b2PolygonShape____29_28_29_20const_29($4, $0 + 1448 | 0);
 HEAP32[$0 + 3584 >> 2] = 0;
 HEAP32[$0 + 3580 >> 2] = 126;
 $1 = HEAP32[$0 + 3584 >> 2];
 $2 = HEAP32[$0 + 3580 >> 2];
 HEAP32[$0 + 1440 >> 2] = $2;
 HEAP32[$0 + 1444 >> 2] = $1;
 decltype_28fp_29_20emscripten__select_overload_void_20_28float_2c_20float_29_2c_20b2PolygonShape__28void_20_28b2PolygonShape____29_28float_2c_20float_29_29($0 + 3588 | 0, $0 + 1440 | 0);
 $1 = HEAP32[$0 + 3588 >> 2];
 HEAP32[$0 + 3576 >> 2] = HEAP32[$0 + 3592 >> 2];
 HEAP32[$0 + 3572 >> 2] = $1;
 $2 = HEAP32[$0 + 3576 >> 2];
 $1 = HEAP32[$0 + 3572 >> 2];
 HEAP32[$0 + 6920 >> 2] = $1;
 HEAP32[$0 + 6924 >> 2] = $2;
 $1 = HEAP32[$0 + 6920 >> 2];
 $2 = HEAP32[$0 + 6924 >> 2];
 HEAP32[$0 + 6948 >> 2] = $3;
 HEAP32[$0 + 6944 >> 2] = 1777;
 HEAP32[$0 + 6940 >> 2] = $2;
 HEAP32[$0 + 6936 >> 2] = $1;
 $3 = HEAP32[$0 + 6948 >> 2];
 $4 = HEAP32[$0 + 6944 >> 2];
 $1 = HEAP32[$0 + 6936 >> 2];
 HEAP32[$0 + 6932 >> 2] = HEAP32[$0 + 6940 >> 2];
 HEAP32[$0 + 6928 >> 2] = $1;
 $1 = HEAP32[$0 + 6932 >> 2];
 $2 = HEAP32[$0 + 6928 >> 2];
 HEAP32[$0 + 1432 >> 2] = $2;
 HEAP32[$0 + 1436 >> 2] = $1;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2PolygonShape____29_28float_2c_20float_29___invoke_b2PolygonShape__28char_20const__2c_20void_20_28b2PolygonShape____29_28float_2c_20float_29_29($4, $0 + 1432 | 0);
 HEAP32[$0 + 3560 >> 2] = 0;
 HEAP32[$0 + 3556 >> 2] = 127;
 $2 = HEAP32[$0 + 3560 >> 2];
 $1 = HEAP32[$0 + 3556 >> 2];
 HEAP32[$0 + 1424 >> 2] = $1;
 HEAP32[$0 + 1428 >> 2] = $2;
 decltype_28fp_29_20emscripten__select_overload_void_20_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29_2c_20b2PolygonShape__28void_20_28b2PolygonShape____29_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29_29($0 + 3564 | 0, $0 + 1424 | 0);
 $1 = HEAP32[$0 + 3564 >> 2];
 HEAP32[$0 + 3552 >> 2] = HEAP32[$0 + 3568 >> 2];
 HEAP32[$0 + 3548 >> 2] = $1;
 $1 = HEAP32[$0 + 3552 >> 2];
 $2 = HEAP32[$0 + 3548 >> 2];
 HEAP32[$0 + 6952 >> 2] = $2;
 HEAP32[$0 + 6956 >> 2] = $1;
 $1 = HEAP32[$0 + 6952 >> 2];
 $2 = HEAP32[$0 + 6956 >> 2];
 HEAP32[$0 + 6980 >> 2] = $3;
 HEAP32[$0 + 6976 >> 2] = 9312;
 HEAP32[$0 + 6972 >> 2] = $2;
 HEAP32[$0 + 6968 >> 2] = $1;
 $3 = HEAP32[$0 + 6976 >> 2];
 $1 = HEAP32[$0 + 6968 >> 2];
 HEAP32[$0 + 6964 >> 2] = HEAP32[$0 + 6972 >> 2];
 HEAP32[$0 + 6960 >> 2] = $1;
 $2 = HEAP32[$0 + 6964 >> 2];
 $1 = HEAP32[$0 + 6960 >> 2];
 HEAP32[$0 + 1416 >> 2] = $1;
 HEAP32[$0 + 1420 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2PolygonShape____29_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29___invoke_b2PolygonShape__28char_20const__2c_20void_20_28b2PolygonShape____29_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29_29($3, $0 + 1416 | 0);
 HEAP32[$0 + 7004 >> 2] = $0 + 3547;
 HEAP32[$0 + 7e3 >> 2] = 7835;
 void_20emscripten__internal__NoBaseClass__verify_b2FixtureDef__28_29();
 HEAP32[$0 + 6996 >> 2] = 128;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2FixtureDef__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 6992 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2FixtureDef__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 6988 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 6984 >> 2] = 129;
 $1 = emscripten__internal__TypeID_b2FixtureDef_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2FixtureDef__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2FixtureDef_20const__2c_20void___get_28_29();
 $4 = emscripten__internal__NoBaseClass__get_28_29();
 HEAP32[$0 + 15352 >> 2] = HEAP32[$0 + 6996 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 6996 >> 2];
 HEAP32[$0 + 14716 >> 2] = HEAP32[$0 + 6992 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $8 = HEAP32[$0 + 6992 >> 2];
 HEAP32[$0 + 14712 >> 2] = HEAP32[$0 + 6988 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $10 = HEAP32[$0 + 6988 >> 2];
 $11 = HEAP32[$0 + 7e3 >> 2];
 HEAP32[$0 + 15356 >> 2] = HEAP32[$0 + 6984 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 6984 >> 2]);
 HEAP32[$0 + 7008 >> 2] = $0 + 3547;
 HEAP32[$0 + 15364 >> 2] = HEAP32[$0 + 7008 >> 2];
 HEAP32[$0 + 15360 >> 2] = 130;
 $1 = HEAP32[$0 + 15364 >> 2];
 void_20emscripten__internal__RegisterClassConstructor_b2FixtureDef__20_28__29_28_29___invoke_b2FixtureDef__28b2FixtureDef__20_28__29_28_29_29(HEAP32[$0 + 15360 >> 2]);
 $2 = emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_5__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_5__28embind_init_b2_28_29__$_5_20const__29($0 + 3546 | 0);
 HEAP32[$0 + 7020 >> 2] = $1;
 HEAP32[$0 + 7016 >> 2] = 9138;
 HEAP32[$0 + 7012 >> 2] = $2;
 $1 = HEAP32[$0 + 7020 >> 2];
 void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2FixtureDef__2c_20b2Shape_20const__29___invoke_b2FixtureDef_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28__29_28b2FixtureDef__2c_20b2Shape_20const__29_29(HEAP32[$0 + 7016 >> 2], HEAP32[$0 + 7012 >> 2]);
 $2 = emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_6__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_6__28embind_init_b2_28_29__$_6_20const__29($0 + 3544 | 0);
 HEAP32[$0 + 7032 >> 2] = $1;
 HEAP32[$0 + 7028 >> 2] = 9147;
 HEAP32[$0 + 7024 >> 2] = $2;
 $1 = HEAP32[$0 + 7032 >> 2];
 void_20emscripten__internal__RegisterClassMethod_b2Shape_20const__20_28__29_28b2FixtureDef__29___invoke_b2FixtureDef_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Shape_20const__20_28__29_28b2FixtureDef__29_29(HEAP32[$0 + 7028 >> 2], HEAP32[$0 + 7024 >> 2]);
 HEAP32[$0 + 7092 >> 2] = $1;
 HEAP32[$0 + 7088 >> 2] = 6375;
 HEAP32[$0 + 7084 >> 2] = 8;
 $1 = HEAP32[$0 + 7092 >> 2];
 HEAP32[$0 + 7080 >> 2] = 131;
 HEAP32[$0 + 7076 >> 2] = 132;
 $2 = emscripten__internal__TypeID_b2FixtureDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 7088 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15368 >> 2] = HEAP32[$0 + 7080 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 7080 >> 2];
 $7 = float_20b2FixtureDef_____20emscripten__internal__getContext_float_20b2FixtureDef_____28float_20b2FixtureDef____20const__29($0 + 7084 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15380 >> 2] = HEAP32[$0 + 7076 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 7076 >> 2], float_20b2FixtureDef_____20emscripten__internal__getContext_float_20b2FixtureDef_____28float_20b2FixtureDef____20const__29($0 + 7084 | 0) | 0);
 HEAP32[$0 + 7072 >> 2] = $1;
 HEAP32[$0 + 7068 >> 2] = 6254;
 HEAP32[$0 + 7064 >> 2] = 12;
 $1 = HEAP32[$0 + 7072 >> 2];
 HEAP32[$0 + 7060 >> 2] = 131;
 HEAP32[$0 + 7056 >> 2] = 132;
 $2 = emscripten__internal__TypeID_b2FixtureDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 7068 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15372 >> 2] = HEAP32[$0 + 7060 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 7060 >> 2];
 $7 = float_20b2FixtureDef_____20emscripten__internal__getContext_float_20b2FixtureDef_____28float_20b2FixtureDef____20const__29($0 + 7064 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15384 >> 2] = HEAP32[$0 + 7056 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 7056 >> 2], float_20b2FixtureDef_____20emscripten__internal__getContext_float_20b2FixtureDef_____28float_20b2FixtureDef____20const__29($0 + 7064 | 0) | 0);
 HEAP32[$0 + 7052 >> 2] = $1;
 HEAP32[$0 + 7048 >> 2] = 1123;
 HEAP32[$0 + 7044 >> 2] = 16;
 $1 = HEAP32[$0 + 7052 >> 2];
 HEAP32[$0 + 7040 >> 2] = 131;
 HEAP32[$0 + 7036 >> 2] = 132;
 $2 = emscripten__internal__TypeID_b2FixtureDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 7048 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15376 >> 2] = HEAP32[$0 + 7040 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 7040 >> 2];
 $7 = float_20b2FixtureDef_____20emscripten__internal__getContext_float_20b2FixtureDef_____28float_20b2FixtureDef____20const__29($0 + 7044 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15388 >> 2] = HEAP32[$0 + 7036 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 7036 >> 2], float_20b2FixtureDef_____20emscripten__internal__getContext_float_20b2FixtureDef_____28float_20b2FixtureDef____20const__29($0 + 7044 | 0) | 0);
 HEAP32[$0 + 7112 >> 2] = $1;
 HEAP32[$0 + 7108 >> 2] = 3812;
 HEAP32[$0 + 7104 >> 2] = 20;
 $1 = HEAP32[$0 + 7112 >> 2];
 HEAP32[$0 + 7100 >> 2] = 133;
 HEAP32[$0 + 7096 >> 2] = 134;
 $2 = emscripten__internal__TypeID_b2FixtureDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 7108 >> 2];
 $4 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 15392 >> 2] = HEAP32[$0 + 7100 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 7100 >> 2];
 $7 = bool_20b2FixtureDef_____20emscripten__internal__getContext_bool_20b2FixtureDef_____28bool_20b2FixtureDef____20const__29($0 + 7104 | 0);
 $8 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 15396 >> 2] = HEAP32[$0 + 7096 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 7096 >> 2], bool_20b2FixtureDef_____20emscripten__internal__getContext_bool_20b2FixtureDef_____28bool_20b2FixtureDef____20const__29($0 + 7104 | 0) | 0);
 HEAP32[$0 + 7132 >> 2] = $1;
 HEAP32[$0 + 7128 >> 2] = 3947;
 HEAP32[$0 + 7124 >> 2] = 22;
 HEAP32[$0 + 7120 >> 2] = 135;
 HEAP32[$0 + 7116 >> 2] = 136;
 $1 = emscripten__internal__TypeID_b2FixtureDef_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 7128 >> 2];
 $3 = emscripten__internal__TypeID_b2Filter_2c_20void___get_28_29();
 HEAP32[$0 + 15400 >> 2] = HEAP32[$0 + 7120 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $5 = HEAP32[$0 + 7120 >> 2];
 $6 = b2Filter_20b2FixtureDef_____20emscripten__internal__getContext_b2Filter_20b2FixtureDef_____28b2Filter_20b2FixtureDef____20const__29($0 + 7124 | 0);
 $7 = emscripten__internal__TypeID_b2Filter_2c_20void___get_28_29();
 HEAP32[$0 + 15404 >> 2] = HEAP32[$0 + 7116 >> 2];
 _embind_register_class_property($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 7116 >> 2], b2Filter_20b2FixtureDef_____20emscripten__internal__getContext_b2Filter_20b2FixtureDef_____28b2Filter_20b2FixtureDef____20const__29($0 + 7124 | 0) | 0);
 HEAP32[$0 + 7156 >> 2] = $0 + 3542;
 HEAP32[$0 + 7152 >> 2] = 9041;
 void_20emscripten__internal__NoBaseClass__verify_b2Fixture__28_29();
 HEAP32[$0 + 7148 >> 2] = 137;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2Fixture__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 7144 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2Fixture__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 7140 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 7136 >> 2] = 138;
 $1 = emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Fixture__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20void___get_28_29();
 $4 = emscripten__internal__NoBaseClass__get_28_29();
 HEAP32[$0 + 15408 >> 2] = HEAP32[$0 + 7148 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 7148 >> 2];
 HEAP32[$0 + 14708 >> 2] = HEAP32[$0 + 7144 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $8 = HEAP32[$0 + 7144 >> 2];
 HEAP32[$0 + 14704 >> 2] = HEAP32[$0 + 7140 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $10 = HEAP32[$0 + 7140 >> 2];
 $11 = HEAP32[$0 + 7152 >> 2];
 HEAP32[$0 + 15412 >> 2] = HEAP32[$0 + 7136 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 7136 >> 2]);
 HEAP32[$0 + 3536 >> 2] = 0;
 HEAP32[$0 + 3532 >> 2] = 139;
 $1 = HEAP32[$0 + 3536 >> 2];
 $2 = HEAP32[$0 + 3532 >> 2];
 HEAP32[$0 + 7160 >> 2] = $2;
 HEAP32[$0 + 7164 >> 2] = $1;
 $1 = HEAP32[$0 + 7160 >> 2];
 $2 = HEAP32[$0 + 7164 >> 2];
 HEAP32[$0 + 7188 >> 2] = $0 + 3542;
 HEAP32[$0 + 7184 >> 2] = 9081;
 HEAP32[$0 + 7180 >> 2] = $2;
 HEAP32[$0 + 7176 >> 2] = $1;
 $3 = HEAP32[$0 + 7188 >> 2];
 $4 = HEAP32[$0 + 7184 >> 2];
 $1 = HEAP32[$0 + 7176 >> 2];
 HEAP32[$0 + 7172 >> 2] = HEAP32[$0 + 7180 >> 2];
 HEAP32[$0 + 7168 >> 2] = $1;
 $2 = HEAP32[$0 + 7172 >> 2];
 $1 = HEAP32[$0 + 7168 >> 2];
 HEAP32[$0 + 1408 >> 2] = $1;
 HEAP32[$0 + 1412 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Shape__Type_20_28b2Fixture____29_28_29_20const___invoke_b2Fixture__28char_20const__2c_20b2Shape__Type_20_28b2Fixture____29_28_29_20const_29($4, $0 + 1408 | 0);
 HEAP32[$0 + 3524 >> 2] = 0;
 HEAP32[$0 + 3520 >> 2] = 140;
 $1 = HEAP32[$0 + 3524 >> 2];
 $2 = HEAP32[$0 + 3520 >> 2];
 HEAP32[$0 + 7192 >> 2] = $2;
 HEAP32[$0 + 7196 >> 2] = $1;
 $1 = HEAP32[$0 + 7192 >> 2];
 $2 = HEAP32[$0 + 7196 >> 2];
 HEAP32[$0 + 7220 >> 2] = $3;
 HEAP32[$0 + 7216 >> 2] = 9147;
 HEAP32[$0 + 7212 >> 2] = $2;
 HEAP32[$0 + 7208 >> 2] = $1;
 $3 = HEAP32[$0 + 7220 >> 2];
 $4 = HEAP32[$0 + 7216 >> 2];
 $1 = HEAP32[$0 + 7208 >> 2];
 HEAP32[$0 + 7204 >> 2] = HEAP32[$0 + 7212 >> 2];
 HEAP32[$0 + 7200 >> 2] = $1;
 $2 = HEAP32[$0 + 7204 >> 2];
 $1 = HEAP32[$0 + 7200 >> 2];
 HEAP32[$0 + 1400 >> 2] = $1;
 HEAP32[$0 + 1404 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Shape__20_28b2Fixture____29_28_29___invoke_b2Fixture_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Shape__20_28b2Fixture____29_28_29_29($4, $0 + 1400 | 0);
 HEAP32[$0 + 3516 >> 2] = 0;
 HEAP32[$0 + 3512 >> 2] = 141;
 $1 = HEAP32[$0 + 3516 >> 2];
 $2 = HEAP32[$0 + 3512 >> 2];
 HEAP32[$0 + 7224 >> 2] = $2;
 HEAP32[$0 + 7228 >> 2] = $1;
 $1 = HEAP32[$0 + 7224 >> 2];
 $2 = HEAP32[$0 + 7228 >> 2];
 HEAP32[$0 + 7252 >> 2] = $3;
 HEAP32[$0 + 7248 >> 2] = 3802;
 HEAP32[$0 + 7244 >> 2] = $2;
 HEAP32[$0 + 7240 >> 2] = $1;
 $3 = HEAP32[$0 + 7252 >> 2];
 $4 = HEAP32[$0 + 7248 >> 2];
 $1 = HEAP32[$0 + 7240 >> 2];
 HEAP32[$0 + 7236 >> 2] = HEAP32[$0 + 7244 >> 2];
 HEAP32[$0 + 7232 >> 2] = $1;
 $2 = HEAP32[$0 + 7236 >> 2];
 $1 = HEAP32[$0 + 7232 >> 2];
 HEAP32[$0 + 1392 >> 2] = $1;
 HEAP32[$0 + 1396 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Fixture____29_28bool_29___invoke_b2Fixture__28char_20const__2c_20void_20_28b2Fixture____29_28bool_29_29($4, $0 + 1392 | 0);
 HEAP32[$0 + 3508 >> 2] = 0;
 HEAP32[$0 + 3504 >> 2] = 142;
 $1 = HEAP32[$0 + 3508 >> 2];
 $2 = HEAP32[$0 + 3504 >> 2];
 HEAP32[$0 + 7256 >> 2] = $2;
 HEAP32[$0 + 7260 >> 2] = $1;
 $1 = HEAP32[$0 + 7256 >> 2];
 $2 = HEAP32[$0 + 7260 >> 2];
 HEAP32[$0 + 7284 >> 2] = $3;
 HEAP32[$0 + 7280 >> 2] = 3821;
 HEAP32[$0 + 7276 >> 2] = $2;
 HEAP32[$0 + 7272 >> 2] = $1;
 $3 = HEAP32[$0 + 7284 >> 2];
 $4 = HEAP32[$0 + 7280 >> 2];
 $1 = HEAP32[$0 + 7272 >> 2];
 HEAP32[$0 + 7268 >> 2] = HEAP32[$0 + 7276 >> 2];
 HEAP32[$0 + 7264 >> 2] = $1;
 $2 = HEAP32[$0 + 7268 >> 2];
 $1 = HEAP32[$0 + 7264 >> 2];
 HEAP32[$0 + 1384 >> 2] = $1;
 HEAP32[$0 + 1388 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Fixture____29_28_29_20const___invoke_b2Fixture__28char_20const__2c_20bool_20_28b2Fixture____29_28_29_20const_29($4, $0 + 1384 | 0);
 HEAP32[$0 + 3500 >> 2] = 0;
 HEAP32[$0 + 3496 >> 2] = 143;
 $1 = HEAP32[$0 + 3500 >> 2];
 $2 = HEAP32[$0 + 3496 >> 2];
 HEAP32[$0 + 7288 >> 2] = $2;
 HEAP32[$0 + 7292 >> 2] = $1;
 $1 = HEAP32[$0 + 7288 >> 2];
 $2 = HEAP32[$0 + 7292 >> 2];
 HEAP32[$0 + 7316 >> 2] = $3;
 HEAP32[$0 + 7312 >> 2] = 10267;
 HEAP32[$0 + 7308 >> 2] = $2;
 HEAP32[$0 + 7304 >> 2] = $1;
 $3 = HEAP32[$0 + 7316 >> 2];
 $4 = HEAP32[$0 + 7312 >> 2];
 $1 = HEAP32[$0 + 7304 >> 2];
 HEAP32[$0 + 7300 >> 2] = HEAP32[$0 + 7308 >> 2];
 HEAP32[$0 + 7296 >> 2] = $1;
 $2 = HEAP32[$0 + 7300 >> 2];
 $1 = HEAP32[$0 + 7296 >> 2];
 HEAP32[$0 + 1376 >> 2] = $1;
 HEAP32[$0 + 1380 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Fixture____29_28b2Filter_20const__29___invoke_b2Fixture__28char_20const__2c_20void_20_28b2Fixture____29_28b2Filter_20const__29_29($4, $0 + 1376 | 0);
 HEAP32[$0 + 3492 >> 2] = 0;
 HEAP32[$0 + 3488 >> 2] = 144;
 $1 = HEAP32[$0 + 3492 >> 2];
 $2 = HEAP32[$0 + 3488 >> 2];
 HEAP32[$0 + 7320 >> 2] = $2;
 HEAP32[$0 + 7324 >> 2] = $1;
 $1 = HEAP32[$0 + 7320 >> 2];
 $2 = HEAP32[$0 + 7324 >> 2];
 HEAP32[$0 + 7348 >> 2] = $3;
 HEAP32[$0 + 7344 >> 2] = 10281;
 HEAP32[$0 + 7340 >> 2] = $2;
 HEAP32[$0 + 7336 >> 2] = $1;
 $3 = HEAP32[$0 + 7348 >> 2];
 $4 = HEAP32[$0 + 7344 >> 2];
 $1 = HEAP32[$0 + 7336 >> 2];
 HEAP32[$0 + 7332 >> 2] = HEAP32[$0 + 7340 >> 2];
 HEAP32[$0 + 7328 >> 2] = $1;
 $2 = HEAP32[$0 + 7332 >> 2];
 $1 = HEAP32[$0 + 7328 >> 2];
 HEAP32[$0 + 1368 >> 2] = $1;
 HEAP32[$0 + 1372 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Filter_20const__20_28b2Fixture____29_28_29_20const___invoke_b2Fixture__28char_20const__2c_20b2Filter_20const__20_28b2Fixture____29_28_29_20const_29($4, $0 + 1368 | 0);
 HEAP32[$0 + 3484 >> 2] = 0;
 HEAP32[$0 + 3480 >> 2] = 145;
 $1 = HEAP32[$0 + 3484 >> 2];
 $2 = HEAP32[$0 + 3480 >> 2];
 HEAP32[$0 + 7352 >> 2] = $2;
 HEAP32[$0 + 7356 >> 2] = $1;
 $1 = HEAP32[$0 + 7352 >> 2];
 $2 = HEAP32[$0 + 7356 >> 2];
 HEAP32[$0 + 7380 >> 2] = $3;
 HEAP32[$0 + 7376 >> 2] = 3945;
 HEAP32[$0 + 7372 >> 2] = $2;
 HEAP32[$0 + 7368 >> 2] = $1;
 $3 = HEAP32[$0 + 7380 >> 2];
 $4 = HEAP32[$0 + 7376 >> 2];
 $1 = HEAP32[$0 + 7368 >> 2];
 HEAP32[$0 + 7364 >> 2] = HEAP32[$0 + 7372 >> 2];
 HEAP32[$0 + 7360 >> 2] = $1;
 $2 = HEAP32[$0 + 7364 >> 2];
 $1 = HEAP32[$0 + 7360 >> 2];
 HEAP32[$0 + 1360 >> 2] = $1;
 HEAP32[$0 + 1364 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Fixture____29_28_29___invoke_b2Fixture__28char_20const__2c_20void_20_28b2Fixture____29_28_29_29($4, $0 + 1360 | 0);
 HEAP32[$0 + 3472 >> 2] = 0;
 HEAP32[$0 + 3468 >> 2] = 146;
 $1 = HEAP32[$0 + 3472 >> 2];
 $2 = HEAP32[$0 + 3468 >> 2];
 HEAP32[$0 + 7384 >> 2] = $2;
 HEAP32[$0 + 7388 >> 2] = $1;
 $1 = HEAP32[$0 + 7384 >> 2];
 $2 = HEAP32[$0 + 7388 >> 2];
 HEAP32[$0 + 7412 >> 2] = $3;
 HEAP32[$0 + 7408 >> 2] = 1669;
 HEAP32[$0 + 7404 >> 2] = $2;
 HEAP32[$0 + 7400 >> 2] = $1;
 $3 = HEAP32[$0 + 7412 >> 2];
 $4 = HEAP32[$0 + 7408 >> 2];
 $1 = HEAP32[$0 + 7400 >> 2];
 HEAP32[$0 + 7396 >> 2] = HEAP32[$0 + 7404 >> 2];
 HEAP32[$0 + 7392 >> 2] = $1;
 $2 = HEAP32[$0 + 7396 >> 2];
 $1 = HEAP32[$0 + 7392 >> 2];
 HEAP32[$0 + 1352 >> 2] = $1;
 HEAP32[$0 + 1356 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Body__20_28b2Fixture____29_28_29___invoke_b2Fixture_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Body__20_28b2Fixture____29_28_29_29($4, $0 + 1352 | 0);
 HEAP32[$0 + 3460 >> 2] = 0;
 HEAP32[$0 + 3456 >> 2] = 147;
 $1 = HEAP32[$0 + 3460 >> 2];
 $2 = HEAP32[$0 + 3456 >> 2];
 HEAP32[$0 + 7416 >> 2] = $2;
 HEAP32[$0 + 7420 >> 2] = $1;
 $1 = HEAP32[$0 + 7416 >> 2];
 $2 = HEAP32[$0 + 7420 >> 2];
 HEAP32[$0 + 7444 >> 2] = $3;
 HEAP32[$0 + 7440 >> 2] = 1892;
 HEAP32[$0 + 7436 >> 2] = $2;
 HEAP32[$0 + 7432 >> 2] = $1;
 $3 = HEAP32[$0 + 7444 >> 2];
 $4 = HEAP32[$0 + 7440 >> 2];
 $1 = HEAP32[$0 + 7432 >> 2];
 HEAP32[$0 + 7428 >> 2] = HEAP32[$0 + 7436 >> 2];
 HEAP32[$0 + 7424 >> 2] = $1;
 $2 = HEAP32[$0 + 7428 >> 2];
 $1 = HEAP32[$0 + 7424 >> 2];
 HEAP32[$0 + 1344 >> 2] = $1;
 HEAP32[$0 + 1348 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Fixture__20_28b2Fixture____29_28_29___invoke_b2Fixture_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Fixture__20_28b2Fixture____29_28_29_29($4, $0 + 1344 | 0);
 HEAP32[$0 + 3452 >> 2] = 0;
 HEAP32[$0 + 3448 >> 2] = 148;
 $1 = HEAP32[$0 + 3452 >> 2];
 $2 = HEAP32[$0 + 3448 >> 2];
 HEAP32[$0 + 7448 >> 2] = $2;
 HEAP32[$0 + 7452 >> 2] = $1;
 $1 = HEAP32[$0 + 7448 >> 2];
 $2 = HEAP32[$0 + 7452 >> 2];
 HEAP32[$0 + 7476 >> 2] = $3;
 HEAP32[$0 + 7472 >> 2] = 2455;
 HEAP32[$0 + 7468 >> 2] = $2;
 HEAP32[$0 + 7464 >> 2] = $1;
 $3 = HEAP32[$0 + 7476 >> 2];
 $4 = HEAP32[$0 + 7472 >> 2];
 $1 = HEAP32[$0 + 7464 >> 2];
 HEAP32[$0 + 7460 >> 2] = HEAP32[$0 + 7468 >> 2];
 HEAP32[$0 + 7456 >> 2] = $1;
 $2 = HEAP32[$0 + 7460 >> 2];
 $1 = HEAP32[$0 + 7456 >> 2];
 HEAP32[$0 + 1336 >> 2] = $1;
 HEAP32[$0 + 1340 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Fixture____29_28b2Vec2_20const__29_20const___invoke_b2Fixture__28char_20const__2c_20bool_20_28b2Fixture____29_28b2Vec2_20const__29_20const_29($4, $0 + 1336 | 0);
 HEAP32[$0 + 3440 >> 2] = 0;
 HEAP32[$0 + 3436 >> 2] = 149;
 $1 = HEAP32[$0 + 3440 >> 2];
 $2 = HEAP32[$0 + 3436 >> 2];
 HEAP32[$0 + 7480 >> 2] = $2;
 HEAP32[$0 + 7484 >> 2] = $1;
 $1 = HEAP32[$0 + 7480 >> 2];
 $2 = HEAP32[$0 + 7484 >> 2];
 HEAP32[$0 + 7508 >> 2] = $3;
 HEAP32[$0 + 7504 >> 2] = 1955;
 HEAP32[$0 + 7500 >> 2] = $2;
 HEAP32[$0 + 7496 >> 2] = $1;
 $3 = HEAP32[$0 + 7508 >> 2];
 $4 = HEAP32[$0 + 7504 >> 2];
 $1 = HEAP32[$0 + 7496 >> 2];
 HEAP32[$0 + 7492 >> 2] = HEAP32[$0 + 7500 >> 2];
 HEAP32[$0 + 7488 >> 2] = $1;
 $2 = HEAP32[$0 + 7492 >> 2];
 $1 = HEAP32[$0 + 7488 >> 2];
 HEAP32[$0 + 1328 >> 2] = $1;
 HEAP32[$0 + 1332 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Fixture____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int_29_20const___invoke_b2Fixture_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20bool_20_28b2Fixture____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int_29_20const_29($4, $0 + 1328 | 0);
 HEAP32[$0 + 3428 >> 2] = 0;
 HEAP32[$0 + 3424 >> 2] = 150;
 $1 = HEAP32[$0 + 3428 >> 2];
 $2 = HEAP32[$0 + 3424 >> 2];
 HEAP32[$0 + 7512 >> 2] = $2;
 HEAP32[$0 + 7516 >> 2] = $1;
 $1 = HEAP32[$0 + 7512 >> 2];
 $2 = HEAP32[$0 + 7516 >> 2];
 HEAP32[$0 + 7540 >> 2] = $3;
 HEAP32[$0 + 7536 >> 2] = 10255;
 HEAP32[$0 + 7532 >> 2] = $2;
 HEAP32[$0 + 7528 >> 2] = $1;
 $3 = HEAP32[$0 + 7540 >> 2];
 $4 = HEAP32[$0 + 7536 >> 2];
 $1 = HEAP32[$0 + 7528 >> 2];
 HEAP32[$0 + 7524 >> 2] = HEAP32[$0 + 7532 >> 2];
 HEAP32[$0 + 7520 >> 2] = $1;
 $2 = HEAP32[$0 + 7524 >> 2];
 $1 = HEAP32[$0 + 7520 >> 2];
 HEAP32[$0 + 1320 >> 2] = $1;
 HEAP32[$0 + 1324 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Fixture____29_28b2MassData__29_20const___invoke_b2Fixture_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Fixture____29_28b2MassData__29_20const_29($4, $0 + 1320 | 0);
 HEAP32[$0 + 3420 >> 2] = 0;
 HEAP32[$0 + 3416 >> 2] = 151;
 $1 = HEAP32[$0 + 3420 >> 2];
 $2 = HEAP32[$0 + 3416 >> 2];
 HEAP32[$0 + 7608 >> 2] = $2;
 HEAP32[$0 + 7612 >> 2] = $1;
 $1 = HEAP32[$0 + 7608 >> 2];
 $2 = HEAP32[$0 + 7612 >> 2];
 HEAP32[$0 + 7636 >> 2] = $3;
 HEAP32[$0 + 7632 >> 2] = 1131;
 HEAP32[$0 + 7628 >> 2] = $2;
 HEAP32[$0 + 7624 >> 2] = $1;
 $3 = HEAP32[$0 + 7636 >> 2];
 $4 = HEAP32[$0 + 7632 >> 2];
 $1 = HEAP32[$0 + 7624 >> 2];
 HEAP32[$0 + 7620 >> 2] = HEAP32[$0 + 7628 >> 2];
 HEAP32[$0 + 7616 >> 2] = $1;
 $2 = HEAP32[$0 + 7620 >> 2];
 $1 = HEAP32[$0 + 7616 >> 2];
 HEAP32[$0 + 1312 >> 2] = $1;
 HEAP32[$0 + 1316 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Fixture____29_28float_29___invoke_b2Fixture__28char_20const__2c_20void_20_28b2Fixture____29_28float_29_29($4, $0 + 1312 | 0);
 HEAP32[$0 + 3412 >> 2] = 0;
 HEAP32[$0 + 3408 >> 2] = 152;
 $1 = HEAP32[$0 + 3412 >> 2];
 $2 = HEAP32[$0 + 3408 >> 2];
 HEAP32[$0 + 7704 >> 2] = $2;
 HEAP32[$0 + 7708 >> 2] = $1;
 $1 = HEAP32[$0 + 7704 >> 2];
 $2 = HEAP32[$0 + 7708 >> 2];
 HEAP32[$0 + 7732 >> 2] = $3;
 HEAP32[$0 + 7728 >> 2] = 1142;
 HEAP32[$0 + 7724 >> 2] = $2;
 HEAP32[$0 + 7720 >> 2] = $1;
 $3 = HEAP32[$0 + 7732 >> 2];
 $4 = HEAP32[$0 + 7728 >> 2];
 $1 = HEAP32[$0 + 7720 >> 2];
 HEAP32[$0 + 7716 >> 2] = HEAP32[$0 + 7724 >> 2];
 HEAP32[$0 + 7712 >> 2] = $1;
 $2 = HEAP32[$0 + 7716 >> 2];
 $1 = HEAP32[$0 + 7712 >> 2];
 HEAP32[$0 + 1304 >> 2] = $1;
 HEAP32[$0 + 1308 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2Fixture____29_28_29_20const___invoke_b2Fixture__28char_20const__2c_20float_20_28b2Fixture____29_28_29_20const_29($4, $0 + 1304 | 0);
 HEAP32[$0 + 3404 >> 2] = 0;
 HEAP32[$0 + 3400 >> 2] = 153;
 $1 = HEAP32[$0 + 3404 >> 2];
 $2 = HEAP32[$0 + 3400 >> 2];
 HEAP32[$0 + 7672 >> 2] = $2;
 HEAP32[$0 + 7676 >> 2] = $1;
 $1 = HEAP32[$0 + 7672 >> 2];
 $2 = HEAP32[$0 + 7676 >> 2];
 HEAP32[$0 + 7700 >> 2] = $3;
 HEAP32[$0 + 7696 >> 2] = 6431;
 HEAP32[$0 + 7692 >> 2] = $2;
 HEAP32[$0 + 7688 >> 2] = $1;
 $3 = HEAP32[$0 + 7700 >> 2];
 $4 = HEAP32[$0 + 7696 >> 2];
 $1 = HEAP32[$0 + 7688 >> 2];
 HEAP32[$0 + 7684 >> 2] = HEAP32[$0 + 7692 >> 2];
 HEAP32[$0 + 7680 >> 2] = $1;
 $2 = HEAP32[$0 + 7684 >> 2];
 $1 = HEAP32[$0 + 7680 >> 2];
 HEAP32[$0 + 1296 >> 2] = $1;
 HEAP32[$0 + 1300 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2Fixture____29_28_29_20const___invoke_b2Fixture__28char_20const__2c_20float_20_28b2Fixture____29_28_29_20const_29($4, $0 + 1296 | 0);
 HEAP32[$0 + 3396 >> 2] = 0;
 HEAP32[$0 + 3392 >> 2] = 154;
 $1 = HEAP32[$0 + 3396 >> 2];
 $2 = HEAP32[$0 + 3392 >> 2];
 HEAP32[$0 + 7576 >> 2] = $2;
 HEAP32[$0 + 7580 >> 2] = $1;
 $1 = HEAP32[$0 + 7576 >> 2];
 $2 = HEAP32[$0 + 7580 >> 2];
 HEAP32[$0 + 7604 >> 2] = $3;
 HEAP32[$0 + 7600 >> 2] = 6412;
 HEAP32[$0 + 7596 >> 2] = $2;
 HEAP32[$0 + 7592 >> 2] = $1;
 $3 = HEAP32[$0 + 7604 >> 2];
 $4 = HEAP32[$0 + 7600 >> 2];
 $1 = HEAP32[$0 + 7592 >> 2];
 HEAP32[$0 + 7588 >> 2] = HEAP32[$0 + 7596 >> 2];
 HEAP32[$0 + 7584 >> 2] = $1;
 $2 = HEAP32[$0 + 7588 >> 2];
 $1 = HEAP32[$0 + 7584 >> 2];
 HEAP32[$0 + 1288 >> 2] = $1;
 HEAP32[$0 + 1292 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Fixture____29_28float_29___invoke_b2Fixture__28char_20const__2c_20void_20_28b2Fixture____29_28float_29_29($4, $0 + 1288 | 0);
 HEAP32[$0 + 3388 >> 2] = 0;
 HEAP32[$0 + 3384 >> 2] = 155;
 $1 = HEAP32[$0 + 3388 >> 2];
 $2 = HEAP32[$0 + 3384 >> 2];
 HEAP32[$0 + 7640 >> 2] = $2;
 HEAP32[$0 + 7644 >> 2] = $1;
 $1 = HEAP32[$0 + 7640 >> 2];
 $2 = HEAP32[$0 + 7644 >> 2];
 HEAP32[$0 + 7668 >> 2] = $3;
 HEAP32[$0 + 7664 >> 2] = 6319;
 HEAP32[$0 + 7660 >> 2] = $2;
 HEAP32[$0 + 7656 >> 2] = $1;
 $3 = HEAP32[$0 + 7668 >> 2];
 $4 = HEAP32[$0 + 7664 >> 2];
 $1 = HEAP32[$0 + 7656 >> 2];
 HEAP32[$0 + 7652 >> 2] = HEAP32[$0 + 7660 >> 2];
 HEAP32[$0 + 7648 >> 2] = $1;
 $2 = HEAP32[$0 + 7652 >> 2];
 $1 = HEAP32[$0 + 7648 >> 2];
 HEAP32[$0 + 1280 >> 2] = $1;
 HEAP32[$0 + 1284 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2Fixture____29_28_29_20const___invoke_b2Fixture__28char_20const__2c_20float_20_28b2Fixture____29_28_29_20const_29($4, $0 + 1280 | 0);
 HEAP32[$0 + 3380 >> 2] = 0;
 HEAP32[$0 + 3376 >> 2] = 156;
 $1 = HEAP32[$0 + 3380 >> 2];
 $2 = HEAP32[$0 + 3376 >> 2];
 HEAP32[$0 + 7544 >> 2] = $2;
 HEAP32[$0 + 7548 >> 2] = $1;
 $1 = HEAP32[$0 + 7544 >> 2];
 $2 = HEAP32[$0 + 7548 >> 2];
 HEAP32[$0 + 7572 >> 2] = $3;
 HEAP32[$0 + 7568 >> 2] = 6297;
 HEAP32[$0 + 7564 >> 2] = $2;
 HEAP32[$0 + 7560 >> 2] = $1;
 $3 = HEAP32[$0 + 7572 >> 2];
 $4 = HEAP32[$0 + 7568 >> 2];
 $1 = HEAP32[$0 + 7560 >> 2];
 HEAP32[$0 + 7556 >> 2] = HEAP32[$0 + 7564 >> 2];
 HEAP32[$0 + 7552 >> 2] = $1;
 $2 = HEAP32[$0 + 7556 >> 2];
 $1 = HEAP32[$0 + 7552 >> 2];
 HEAP32[$0 + 1272 >> 2] = $1;
 HEAP32[$0 + 1276 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Fixture____29_28float_29___invoke_b2Fixture__28char_20const__2c_20void_20_28b2Fixture____29_28float_29_29($4, $0 + 1272 | 0);
 HEAP32[$0 + 3372 >> 2] = 0;
 HEAP32[$0 + 3368 >> 2] = 157;
 $1 = HEAP32[$0 + 3372 >> 2];
 $2 = HEAP32[$0 + 3368 >> 2];
 HEAP32[$0 + 7736 >> 2] = $2;
 HEAP32[$0 + 7740 >> 2] = $1;
 $1 = HEAP32[$0 + 7736 >> 2];
 $2 = HEAP32[$0 + 7740 >> 2];
 HEAP32[$0 + 7764 >> 2] = $3;
 HEAP32[$0 + 7760 >> 2] = 10877;
 HEAP32[$0 + 7756 >> 2] = $2;
 HEAP32[$0 + 7752 >> 2] = $1;
 $3 = HEAP32[$0 + 7764 >> 2];
 $4 = HEAP32[$0 + 7760 >> 2];
 $1 = HEAP32[$0 + 7752 >> 2];
 HEAP32[$0 + 7748 >> 2] = HEAP32[$0 + 7756 >> 2];
 HEAP32[$0 + 7744 >> 2] = $1;
 $2 = HEAP32[$0 + 7748 >> 2];
 $1 = HEAP32[$0 + 7744 >> 2];
 HEAP32[$0 + 1264 >> 2] = $1;
 HEAP32[$0 + 1268 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2AABB_20const__20_28b2Fixture____29_28int_29_20const___invoke_b2Fixture__28char_20const__2c_20b2AABB_20const__20_28b2Fixture____29_28int_29_20const_29($4, $0 + 1264 | 0);
 HEAP32[$0 + 3364 >> 2] = 0;
 HEAP32[$0 + 3360 >> 2] = 158;
 $1 = HEAP32[$0 + 3364 >> 2];
 $2 = HEAP32[$0 + 3360 >> 2];
 HEAP32[$0 + 7768 >> 2] = $2;
 HEAP32[$0 + 7772 >> 2] = $1;
 $1 = HEAP32[$0 + 7768 >> 2];
 $2 = HEAP32[$0 + 7772 >> 2];
 HEAP32[$0 + 7800 >> 2] = $3;
 HEAP32[$0 + 7796 >> 2] = 6119;
 HEAP32[$0 + 7792 >> 2] = $2;
 HEAP32[$0 + 7788 >> 2] = $1;
 $3 = HEAP32[$0 + 7796 >> 2];
 $1 = HEAP32[$0 + 7788 >> 2];
 HEAP32[$0 + 7784 >> 2] = HEAP32[$0 + 7792 >> 2];
 HEAP32[$0 + 7780 >> 2] = $1;
 $2 = HEAP32[$0 + 7784 >> 2];
 $1 = HEAP32[$0 + 7780 >> 2];
 HEAP32[$0 + 1256 >> 2] = $1;
 HEAP32[$0 + 1260 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Fixture____29_28int_29___invoke_b2Fixture__28char_20const__2c_20void_20_28b2Fixture____29_28int_29_29($3, $0 + 1256 | 0);
 HEAP32[$0 + 7824 >> 2] = $0 + 3359;
 HEAP32[$0 + 7820 >> 2] = 7707;
 void_20emscripten__internal__NoBaseClass__verify_b2BodyDef__28_29();
 HEAP32[$0 + 7816 >> 2] = 159;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2BodyDef__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 7812 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2BodyDef__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 7808 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 7804 >> 2] = 160;
 $1 = emscripten__internal__TypeID_b2BodyDef_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2BodyDef__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2BodyDef_20const__2c_20void___get_28_29();
 $4 = emscripten__internal__NoBaseClass__get_28_29();
 HEAP32[$0 + 15416 >> 2] = HEAP32[$0 + 7816 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 7816 >> 2];
 HEAP32[$0 + 14700 >> 2] = HEAP32[$0 + 7812 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $8 = HEAP32[$0 + 7812 >> 2];
 HEAP32[$0 + 14696 >> 2] = HEAP32[$0 + 7808 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $10 = HEAP32[$0 + 7808 >> 2];
 $11 = HEAP32[$0 + 7820 >> 2];
 HEAP32[$0 + 15420 >> 2] = HEAP32[$0 + 7804 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 7804 >> 2]);
 HEAP32[$0 + 7828 >> 2] = $0 + 3359;
 HEAP32[$0 + 15428 >> 2] = HEAP32[$0 + 7828 >> 2];
 HEAP32[$0 + 15424 >> 2] = 161;
 $1 = HEAP32[$0 + 15428 >> 2];
 void_20emscripten__internal__RegisterClassConstructor_b2BodyDef__20_28__29_28_29___invoke_b2BodyDef__28b2BodyDef__20_28__29_28_29_29(HEAP32[$0 + 15424 >> 2]);
 HEAP32[$0 + 7848 >> 2] = $1;
 HEAP32[$0 + 7844 >> 2] = 9051;
 HEAP32[$0 + 7840 >> 2] = 0;
 $1 = HEAP32[$0 + 7848 >> 2];
 HEAP32[$0 + 7836 >> 2] = 162;
 HEAP32[$0 + 7832 >> 2] = 163;
 $2 = emscripten__internal__TypeID_b2BodyDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 7844 >> 2];
 $4 = emscripten__internal__TypeID_b2BodyType_2c_20void___get_28_29();
 HEAP32[$0 + 15432 >> 2] = HEAP32[$0 + 7836 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 7836 >> 2];
 $7 = b2BodyType_20b2BodyDef_____20emscripten__internal__getContext_b2BodyType_20b2BodyDef_____28b2BodyType_20b2BodyDef____20const__29($0 + 7840 | 0);
 $8 = emscripten__internal__TypeID_b2BodyType_2c_20void___get_28_29();
 HEAP32[$0 + 15436 >> 2] = HEAP32[$0 + 7832 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 7832 >> 2], b2BodyType_20b2BodyDef_____20emscripten__internal__getContext_b2BodyType_20b2BodyDef_____28b2BodyType_20b2BodyDef____20const__29($0 + 7840 | 0) | 0);
 HEAP32[$0 + 7888 >> 2] = $1;
 HEAP32[$0 + 7884 >> 2] = 6334;
 HEAP32[$0 + 7880 >> 2] = 4;
 $1 = HEAP32[$0 + 7888 >> 2];
 HEAP32[$0 + 7876 >> 2] = 164;
 HEAP32[$0 + 7872 >> 2] = 165;
 $2 = emscripten__internal__TypeID_b2BodyDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 7884 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15440 >> 2] = HEAP32[$0 + 7876 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 7876 >> 2];
 $7 = b2Vec2_20b2BodyDef_____20emscripten__internal__getContext_b2Vec2_20b2BodyDef_____28b2Vec2_20b2BodyDef____20const__29($0 + 7880 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15448 >> 2] = HEAP32[$0 + 7872 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 7872 >> 2], b2Vec2_20b2BodyDef_____20emscripten__internal__getContext_b2Vec2_20b2BodyDef_____28b2Vec2_20b2BodyDef____20const__29($0 + 7880 | 0) | 0);
 HEAP32[$0 + 7988 >> 2] = $1;
 HEAP32[$0 + 7984 >> 2] = 9228;
 HEAP32[$0 + 7980 >> 2] = 12;
 $1 = HEAP32[$0 + 7988 >> 2];
 HEAP32[$0 + 7976 >> 2] = 166;
 HEAP32[$0 + 7972 >> 2] = 167;
 $2 = emscripten__internal__TypeID_b2BodyDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 7984 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15456 >> 2] = HEAP32[$0 + 7976 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 7976 >> 2];
 $7 = float_20b2BodyDef_____20emscripten__internal__getContext_float_20b2BodyDef_____28float_20b2BodyDef____20const__29($0 + 7980 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15476 >> 2] = HEAP32[$0 + 7972 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 7972 >> 2], float_20b2BodyDef_____20emscripten__internal__getContext_float_20b2BodyDef_____28float_20b2BodyDef____20const__29($0 + 7980 | 0) | 0);
 HEAP32[$0 + 7868 >> 2] = $1;
 HEAP32[$0 + 7864 >> 2] = 1207;
 HEAP32[$0 + 7860 >> 2] = 16;
 $1 = HEAP32[$0 + 7868 >> 2];
 HEAP32[$0 + 7856 >> 2] = 164;
 HEAP32[$0 + 7852 >> 2] = 165;
 $2 = emscripten__internal__TypeID_b2BodyDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 7864 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15444 >> 2] = HEAP32[$0 + 7856 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 7856 >> 2];
 $7 = b2Vec2_20b2BodyDef_____20emscripten__internal__getContext_b2Vec2_20b2BodyDef_____28b2Vec2_20b2BodyDef____20const__29($0 + 7860 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15452 >> 2] = HEAP32[$0 + 7852 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 7852 >> 2], b2Vec2_20b2BodyDef_____20emscripten__internal__getContext_b2Vec2_20b2BodyDef_____28b2Vec2_20b2BodyDef____20const__29($0 + 7860 | 0) | 0);
 HEAP32[$0 + 7968 >> 2] = $1;
 HEAP32[$0 + 7964 >> 2] = 1153;
 HEAP32[$0 + 7960 >> 2] = 24;
 $1 = HEAP32[$0 + 7968 >> 2];
 HEAP32[$0 + 7956 >> 2] = 166;
 HEAP32[$0 + 7952 >> 2] = 167;
 $2 = emscripten__internal__TypeID_b2BodyDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 7964 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15460 >> 2] = HEAP32[$0 + 7956 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 7956 >> 2];
 $7 = float_20b2BodyDef_____20emscripten__internal__getContext_float_20b2BodyDef_____28float_20b2BodyDef____20const__29($0 + 7960 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15480 >> 2] = HEAP32[$0 + 7952 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 7952 >> 2], float_20b2BodyDef_____20emscripten__internal__getContext_float_20b2BodyDef_____28float_20b2BodyDef____20const__29($0 + 7960 | 0) | 0);
 HEAP32[$0 + 7948 >> 2] = $1;
 HEAP32[$0 + 7944 >> 2] = 7603;
 HEAP32[$0 + 7940 >> 2] = 28;
 $1 = HEAP32[$0 + 7948 >> 2];
 HEAP32[$0 + 7936 >> 2] = 166;
 HEAP32[$0 + 7932 >> 2] = 167;
 $2 = emscripten__internal__TypeID_b2BodyDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 7944 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15464 >> 2] = HEAP32[$0 + 7936 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 7936 >> 2];
 $7 = float_20b2BodyDef_____20emscripten__internal__getContext_float_20b2BodyDef_____28float_20b2BodyDef____20const__29($0 + 7940 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15484 >> 2] = HEAP32[$0 + 7932 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 7932 >> 2], float_20b2BodyDef_____20emscripten__internal__getContext_float_20b2BodyDef_____28float_20b2BodyDef____20const__29($0 + 7940 | 0) | 0);
 HEAP32[$0 + 7928 >> 2] = $1;
 HEAP32[$0 + 7924 >> 2] = 7552;
 HEAP32[$0 + 7920 >> 2] = 32;
 $1 = HEAP32[$0 + 7928 >> 2];
 HEAP32[$0 + 7916 >> 2] = 166;
 HEAP32[$0 + 7912 >> 2] = 167;
 $2 = emscripten__internal__TypeID_b2BodyDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 7924 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15468 >> 2] = HEAP32[$0 + 7916 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 7916 >> 2];
 $7 = float_20b2BodyDef_____20emscripten__internal__getContext_float_20b2BodyDef_____28float_20b2BodyDef____20const__29($0 + 7920 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15488 >> 2] = HEAP32[$0 + 7912 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 7912 >> 2], float_20b2BodyDef_____20emscripten__internal__getContext_float_20b2BodyDef_____28float_20b2BodyDef____20const__29($0 + 7920 | 0) | 0);
 HEAP32[$0 + 8068 >> 2] = $1;
 HEAP32[$0 + 8064 >> 2] = 6129;
 HEAP32[$0 + 8060 >> 2] = 36;
 $1 = HEAP32[$0 + 8068 >> 2];
 HEAP32[$0 + 8056 >> 2] = 168;
 HEAP32[$0 + 8052 >> 2] = 169;
 $2 = emscripten__internal__TypeID_b2BodyDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 8064 >> 2];
 $4 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 15496 >> 2] = HEAP32[$0 + 8056 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 8056 >> 2];
 $7 = bool_20b2BodyDef_____20emscripten__internal__getContext_bool_20b2BodyDef_____28bool_20b2BodyDef____20const__29($0 + 8060 | 0);
 $8 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 15512 >> 2] = HEAP32[$0 + 8052 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 8052 >> 2], bool_20b2BodyDef_____20emscripten__internal__getContext_bool_20b2BodyDef_____28bool_20b2BodyDef____20const__29($0 + 8060 | 0) | 0);
 HEAP32[$0 + 8048 >> 2] = $1;
 HEAP32[$0 + 8044 >> 2] = 9527;
 HEAP32[$0 + 8040 >> 2] = 37;
 $1 = HEAP32[$0 + 8048 >> 2];
 HEAP32[$0 + 8036 >> 2] = 168;
 HEAP32[$0 + 8032 >> 2] = 169;
 $2 = emscripten__internal__TypeID_b2BodyDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 8044 >> 2];
 $4 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 15500 >> 2] = HEAP32[$0 + 8036 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 8036 >> 2];
 $7 = bool_20b2BodyDef_____20emscripten__internal__getContext_bool_20b2BodyDef_____28bool_20b2BodyDef____20const__29($0 + 8040 | 0);
 $8 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 15516 >> 2] = HEAP32[$0 + 8032 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 8032 >> 2], bool_20b2BodyDef_____20emscripten__internal__getContext_bool_20b2BodyDef_____28bool_20b2BodyDef____20const__29($0 + 8040 | 0) | 0);
 HEAP32[$0 + 8028 >> 2] = $1;
 HEAP32[$0 + 8024 >> 2] = 6515;
 HEAP32[$0 + 8020 >> 2] = 38;
 $1 = HEAP32[$0 + 8028 >> 2];
 HEAP32[$0 + 8016 >> 2] = 168;
 HEAP32[$0 + 8012 >> 2] = 169;
 $2 = emscripten__internal__TypeID_b2BodyDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 8024 >> 2];
 $4 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 15504 >> 2] = HEAP32[$0 + 8016 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 8016 >> 2];
 $7 = bool_20b2BodyDef_____20emscripten__internal__getContext_bool_20b2BodyDef_____28bool_20b2BodyDef____20const__29($0 + 8020 | 0);
 $8 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 15520 >> 2] = HEAP32[$0 + 8012 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 8012 >> 2], bool_20b2BodyDef_____20emscripten__internal__getContext_bool_20b2BodyDef_____28bool_20b2BodyDef____20const__29($0 + 8020 | 0) | 0);
 HEAP32[$0 + 8008 >> 2] = $1;
 HEAP32[$0 + 8004 >> 2] = 3028;
 HEAP32[$0 + 8e3 >> 2] = 39;
 $1 = HEAP32[$0 + 8008 >> 2];
 HEAP32[$0 + 7996 >> 2] = 168;
 HEAP32[$0 + 7992 >> 2] = 169;
 $2 = emscripten__internal__TypeID_b2BodyDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 8004 >> 2];
 $4 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 15508 >> 2] = HEAP32[$0 + 7996 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 7996 >> 2];
 $7 = bool_20b2BodyDef_____20emscripten__internal__getContext_bool_20b2BodyDef_____28bool_20b2BodyDef____20const__29($0 + 8e3 | 0);
 $8 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 15524 >> 2] = HEAP32[$0 + 7992 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 7992 >> 2], bool_20b2BodyDef_____20emscripten__internal__getContext_bool_20b2BodyDef_____28bool_20b2BodyDef____20const__29($0 + 8e3 | 0) | 0);
 HEAP32[$0 + 7908 >> 2] = $1;
 HEAP32[$0 + 7904 >> 2] = 9482;
 HEAP32[$0 + 7900 >> 2] = 48;
 HEAP32[$0 + 7896 >> 2] = 166;
 HEAP32[$0 + 7892 >> 2] = 167;
 $1 = emscripten__internal__TypeID_b2BodyDef_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 7904 >> 2];
 $3 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15472 >> 2] = HEAP32[$0 + 7896 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $5 = HEAP32[$0 + 7896 >> 2];
 $6 = float_20b2BodyDef_____20emscripten__internal__getContext_float_20b2BodyDef_____28float_20b2BodyDef____20const__29($0 + 7900 | 0);
 $7 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15492 >> 2] = HEAP32[$0 + 7892 >> 2];
 _embind_register_class_property($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 7892 >> 2], float_20b2BodyDef_____20emscripten__internal__getContext_float_20b2BodyDef_____28float_20b2BodyDef____20const__29($0 + 7900 | 0) | 0);
 HEAP32[$0 + 8092 >> 2] = $0 + 3358;
 HEAP32[$0 + 8088 >> 2] = 1746;
 void_20emscripten__internal__NoBaseClass__verify_b2Body__28_29();
 HEAP32[$0 + 8084 >> 2] = 170;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2Body__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 8080 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2Body__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 8076 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 8072 >> 2] = 171;
 $1 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Body__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Body_20const__2c_20void___get_28_29();
 $4 = emscripten__internal__NoBaseClass__get_28_29();
 HEAP32[$0 + 15528 >> 2] = HEAP32[$0 + 8084 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 8084 >> 2];
 HEAP32[$0 + 14692 >> 2] = HEAP32[$0 + 8080 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $8 = HEAP32[$0 + 8080 >> 2];
 HEAP32[$0 + 14688 >> 2] = HEAP32[$0 + 8076 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $10 = HEAP32[$0 + 8076 >> 2];
 $11 = HEAP32[$0 + 8088 >> 2];
 HEAP32[$0 + 15532 >> 2] = HEAP32[$0 + 8072 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 8072 >> 2]);
 HEAP32[$0 + 3344 >> 2] = 0;
 HEAP32[$0 + 3340 >> 2] = 172;
 $1 = HEAP32[$0 + 3344 >> 2];
 $2 = HEAP32[$0 + 3340 >> 2];
 HEAP32[$0 + 1248 >> 2] = $2;
 HEAP32[$0 + 1252 >> 2] = $1;
 decltype_28fp_29_20emscripten__select_overload_b2Fixture__20_28b2FixtureDef_20const__29_2c_20b2Body__28b2Fixture__20_28b2Body____29_28b2FixtureDef_20const__29_29($0 + 3348 | 0, $0 + 1248 | 0);
 $1 = HEAP32[$0 + 3348 >> 2];
 HEAP32[$0 + 3332 >> 2] = HEAP32[$0 + 3352 >> 2];
 HEAP32[$0 + 3328 >> 2] = $1;
 $2 = HEAP32[$0 + 3332 >> 2];
 $1 = HEAP32[$0 + 3328 >> 2];
 HEAP32[$0 + 8096 >> 2] = $1;
 HEAP32[$0 + 8100 >> 2] = $2;
 $1 = HEAP32[$0 + 8096 >> 2];
 $2 = HEAP32[$0 + 8100 >> 2];
 HEAP32[$0 + 8124 >> 2] = $0 + 3358;
 HEAP32[$0 + 8120 >> 2] = 9035;
 HEAP32[$0 + 8116 >> 2] = $2;
 HEAP32[$0 + 8112 >> 2] = $1;
 $3 = HEAP32[$0 + 8124 >> 2];
 $4 = HEAP32[$0 + 8120 >> 2];
 $1 = HEAP32[$0 + 8112 >> 2];
 HEAP32[$0 + 8108 >> 2] = HEAP32[$0 + 8116 >> 2];
 HEAP32[$0 + 8104 >> 2] = $1;
 $1 = HEAP32[$0 + 8108 >> 2];
 $2 = HEAP32[$0 + 8104 >> 2];
 HEAP32[$0 + 1240 >> 2] = $2;
 HEAP32[$0 + 1244 >> 2] = $1;
 void_20emscripten__internal__RegisterClassMethod_b2Fixture__20_28b2Body____29_28b2FixtureDef_20const__29___invoke_b2Body_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Fixture__20_28b2Body____29_28b2FixtureDef_20const__29_29($4, $0 + 1240 | 0);
 HEAP32[$0 + 3316 >> 2] = 0;
 HEAP32[$0 + 3312 >> 2] = 173;
 $2 = HEAP32[$0 + 3316 >> 2];
 $1 = HEAP32[$0 + 3312 >> 2];
 HEAP32[$0 + 1232 >> 2] = $1;
 HEAP32[$0 + 1236 >> 2] = $2;
 decltype_28fp_29_20emscripten__select_overload_b2Fixture__20_28b2Shape_20const__2c_20float_29_2c_20b2Body__28b2Fixture__20_28b2Body____29_28b2Shape_20const__2c_20float_29_29($0 + 3320 | 0, $0 + 1232 | 0);
 $1 = HEAP32[$0 + 3320 >> 2];
 HEAP32[$0 + 3304 >> 2] = HEAP32[$0 + 3324 >> 2];
 HEAP32[$0 + 3300 >> 2] = $1;
 $1 = HEAP32[$0 + 3304 >> 2];
 $2 = HEAP32[$0 + 3300 >> 2];
 HEAP32[$0 + 8128 >> 2] = $2;
 HEAP32[$0 + 8132 >> 2] = $1;
 $1 = HEAP32[$0 + 8128 >> 2];
 $2 = HEAP32[$0 + 8132 >> 2];
 HEAP32[$0 + 8156 >> 2] = $3;
 HEAP32[$0 + 8152 >> 2] = 9169;
 HEAP32[$0 + 8148 >> 2] = $2;
 HEAP32[$0 + 8144 >> 2] = $1;
 $3 = HEAP32[$0 + 8156 >> 2];
 $4 = HEAP32[$0 + 8152 >> 2];
 $1 = HEAP32[$0 + 8144 >> 2];
 HEAP32[$0 + 8140 >> 2] = HEAP32[$0 + 8148 >> 2];
 HEAP32[$0 + 8136 >> 2] = $1;
 $2 = HEAP32[$0 + 8140 >> 2];
 $1 = HEAP32[$0 + 8136 >> 2];
 HEAP32[$0 + 1224 >> 2] = $1;
 HEAP32[$0 + 1228 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Fixture__20_28b2Body____29_28b2Shape_20const__2c_20float_29___invoke_b2Body_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Fixture__20_28b2Body____29_28b2Shape_20const__2c_20float_29_29($4, $0 + 1224 | 0);
 HEAP32[$0 + 3292 >> 2] = 0;
 HEAP32[$0 + 3288 >> 2] = 174;
 $1 = HEAP32[$0 + 3292 >> 2];
 $2 = HEAP32[$0 + 3288 >> 2];
 HEAP32[$0 + 8160 >> 2] = $2;
 HEAP32[$0 + 8164 >> 2] = $1;
 $1 = HEAP32[$0 + 8160 >> 2];
 $2 = HEAP32[$0 + 8164 >> 2];
 HEAP32[$0 + 8188 >> 2] = $3;
 HEAP32[$0 + 8184 >> 2] = 8981;
 HEAP32[$0 + 8180 >> 2] = $2;
 HEAP32[$0 + 8176 >> 2] = $1;
 $3 = HEAP32[$0 + 8188 >> 2];
 $4 = HEAP32[$0 + 8184 >> 2];
 $1 = HEAP32[$0 + 8176 >> 2];
 HEAP32[$0 + 8172 >> 2] = HEAP32[$0 + 8180 >> 2];
 HEAP32[$0 + 8168 >> 2] = $1;
 $2 = HEAP32[$0 + 8172 >> 2];
 $1 = HEAP32[$0 + 8168 >> 2];
 HEAP32[$0 + 1216 >> 2] = $1;
 HEAP32[$0 + 1220 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28b2Fixture__29___invoke_b2Body_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Body____29_28b2Fixture__29_29($4, $0 + 1216 | 0);
 HEAP32[$0 + 3284 >> 2] = 0;
 HEAP32[$0 + 3280 >> 2] = 175;
 $1 = HEAP32[$0 + 3284 >> 2];
 $2 = HEAP32[$0 + 3280 >> 2];
 HEAP32[$0 + 8192 >> 2] = $2;
 HEAP32[$0 + 8196 >> 2] = $1;
 $1 = HEAP32[$0 + 8192 >> 2];
 $2 = HEAP32[$0 + 8196 >> 2];
 HEAP32[$0 + 8220 >> 2] = $3;
 HEAP32[$0 + 8216 >> 2] = 6811;
 HEAP32[$0 + 8212 >> 2] = $2;
 HEAP32[$0 + 8208 >> 2] = $1;
 $3 = HEAP32[$0 + 8220 >> 2];
 $4 = HEAP32[$0 + 8216 >> 2];
 $1 = HEAP32[$0 + 8208 >> 2];
 HEAP32[$0 + 8204 >> 2] = HEAP32[$0 + 8212 >> 2];
 HEAP32[$0 + 8200 >> 2] = $1;
 $2 = HEAP32[$0 + 8204 >> 2];
 $1 = HEAP32[$0 + 8200 >> 2];
 HEAP32[$0 + 1208 >> 2] = $1;
 HEAP32[$0 + 1212 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28b2Vec2_20const__2c_20float_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28b2Vec2_20const__2c_20float_29_29($4, $0 + 1208 | 0);
 HEAP32[$0 + 3276 >> 2] = 0;
 HEAP32[$0 + 3272 >> 2] = 176;
 $1 = HEAP32[$0 + 3276 >> 2];
 $2 = HEAP32[$0 + 3272 >> 2];
 HEAP32[$0 + 8224 >> 2] = $2;
 HEAP32[$0 + 8228 >> 2] = $1;
 $1 = HEAP32[$0 + 8224 >> 2];
 $2 = HEAP32[$0 + 8228 >> 2];
 HEAP32[$0 + 8252 >> 2] = $3;
 HEAP32[$0 + 8248 >> 2] = 6824;
 HEAP32[$0 + 8244 >> 2] = $2;
 HEAP32[$0 + 8240 >> 2] = $1;
 $3 = HEAP32[$0 + 8252 >> 2];
 $4 = HEAP32[$0 + 8248 >> 2];
 $1 = HEAP32[$0 + 8240 >> 2];
 HEAP32[$0 + 8236 >> 2] = HEAP32[$0 + 8244 >> 2];
 HEAP32[$0 + 8232 >> 2] = $1;
 $2 = HEAP32[$0 + 8236 >> 2];
 $1 = HEAP32[$0 + 8232 >> 2];
 HEAP32[$0 + 1200 >> 2] = $1;
 HEAP32[$0 + 1204 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Transform_20const__20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20b2Transform_20const__20_28b2Body____29_28_29_20const_29($4, $0 + 1200 | 0);
 HEAP32[$0 + 3268 >> 2] = 0;
 HEAP32[$0 + 3264 >> 2] = 177;
 $1 = HEAP32[$0 + 3268 >> 2];
 $2 = HEAP32[$0 + 3264 >> 2];
 HEAP32[$0 + 8352 >> 2] = $2;
 HEAP32[$0 + 8356 >> 2] = $1;
 $1 = HEAP32[$0 + 8352 >> 2];
 $2 = HEAP32[$0 + 8356 >> 2];
 HEAP32[$0 + 8380 >> 2] = $3;
 HEAP32[$0 + 8376 >> 2] = 6343;
 HEAP32[$0 + 8372 >> 2] = $2;
 HEAP32[$0 + 8368 >> 2] = $1;
 $3 = HEAP32[$0 + 8380 >> 2];
 $4 = HEAP32[$0 + 8376 >> 2];
 $1 = HEAP32[$0 + 8368 >> 2];
 HEAP32[$0 + 8364 >> 2] = HEAP32[$0 + 8372 >> 2];
 HEAP32[$0 + 8360 >> 2] = $1;
 $2 = HEAP32[$0 + 8364 >> 2];
 $1 = HEAP32[$0 + 8360 >> 2];
 HEAP32[$0 + 1192 >> 2] = $1;
 HEAP32[$0 + 1196 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20b2Vec2_20const__20_28b2Body____29_28_29_20const_29($4, $0 + 1192 | 0);
 HEAP32[$0 + 3260 >> 2] = 0;
 HEAP32[$0 + 3256 >> 2] = 178;
 $1 = HEAP32[$0 + 3260 >> 2];
 $2 = HEAP32[$0 + 3256 >> 2];
 HEAP32[$0 + 8576 >> 2] = $2;
 HEAP32[$0 + 8580 >> 2] = $1;
 $1 = HEAP32[$0 + 8576 >> 2];
 $2 = HEAP32[$0 + 8580 >> 2];
 HEAP32[$0 + 8604 >> 2] = $3;
 HEAP32[$0 + 8600 >> 2] = 9248;
 HEAP32[$0 + 8596 >> 2] = $2;
 HEAP32[$0 + 8592 >> 2] = $1;
 $3 = HEAP32[$0 + 8604 >> 2];
 $4 = HEAP32[$0 + 8600 >> 2];
 $1 = HEAP32[$0 + 8592 >> 2];
 HEAP32[$0 + 8588 >> 2] = HEAP32[$0 + 8596 >> 2];
 HEAP32[$0 + 8584 >> 2] = $1;
 $2 = HEAP32[$0 + 8588 >> 2];
 $1 = HEAP32[$0 + 8584 >> 2];
 HEAP32[$0 + 1184 >> 2] = $1;
 HEAP32[$0 + 1188 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20float_20_28b2Body____29_28_29_20const_29($4, $0 + 1184 | 0);
 HEAP32[$0 + 3252 >> 2] = 0;
 HEAP32[$0 + 3248 >> 2] = 179;
 $1 = HEAP32[$0 + 3252 >> 2];
 $2 = HEAP32[$0 + 3248 >> 2];
 HEAP32[$0 + 8320 >> 2] = $2;
 HEAP32[$0 + 8324 >> 2] = $1;
 $1 = HEAP32[$0 + 8320 >> 2];
 $2 = HEAP32[$0 + 8324 >> 2];
 HEAP32[$0 + 8348 >> 2] = $3;
 HEAP32[$0 + 8344 >> 2] = 3930;
 HEAP32[$0 + 8340 >> 2] = $2;
 HEAP32[$0 + 8336 >> 2] = $1;
 $3 = HEAP32[$0 + 8348 >> 2];
 $4 = HEAP32[$0 + 8344 >> 2];
 $1 = HEAP32[$0 + 8336 >> 2];
 HEAP32[$0 + 8332 >> 2] = HEAP32[$0 + 8340 >> 2];
 HEAP32[$0 + 8328 >> 2] = $1;
 $2 = HEAP32[$0 + 8332 >> 2];
 $1 = HEAP32[$0 + 8328 >> 2];
 HEAP32[$0 + 1176 >> 2] = $1;
 HEAP32[$0 + 1180 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20b2Vec2_20const__20_28b2Body____29_28_29_20const_29($4, $0 + 1176 | 0);
 HEAP32[$0 + 3244 >> 2] = 0;
 HEAP32[$0 + 3240 >> 2] = 180;
 $1 = HEAP32[$0 + 3244 >> 2];
 $2 = HEAP32[$0 + 3240 >> 2];
 HEAP32[$0 + 8288 >> 2] = $2;
 HEAP32[$0 + 8292 >> 2] = $1;
 $1 = HEAP32[$0 + 8288 >> 2];
 $2 = HEAP32[$0 + 8292 >> 2];
 HEAP32[$0 + 8316 >> 2] = $3;
 HEAP32[$0 + 8312 >> 2] = 3915;
 HEAP32[$0 + 8308 >> 2] = $2;
 HEAP32[$0 + 8304 >> 2] = $1;
 $3 = HEAP32[$0 + 8316 >> 2];
 $4 = HEAP32[$0 + 8312 >> 2];
 $1 = HEAP32[$0 + 8304 >> 2];
 HEAP32[$0 + 8300 >> 2] = HEAP32[$0 + 8308 >> 2];
 HEAP32[$0 + 8296 >> 2] = $1;
 $2 = HEAP32[$0 + 8300 >> 2];
 $1 = HEAP32[$0 + 8296 >> 2];
 HEAP32[$0 + 1168 >> 2] = $1;
 HEAP32[$0 + 1172 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20b2Vec2_20const__20_28b2Body____29_28_29_20const_29($4, $0 + 1168 | 0);
 HEAP32[$0 + 3236 >> 2] = 0;
 HEAP32[$0 + 3232 >> 2] = 181;
 $1 = HEAP32[$0 + 3236 >> 2];
 $2 = HEAP32[$0 + 3232 >> 2];
 HEAP32[$0 + 8608 >> 2] = $2;
 HEAP32[$0 + 8612 >> 2] = $1;
 $1 = HEAP32[$0 + 8608 >> 2];
 $2 = HEAP32[$0 + 8612 >> 2];
 HEAP32[$0 + 8636 >> 2] = $3;
 HEAP32[$0 + 8632 >> 2] = 1222;
 HEAP32[$0 + 8628 >> 2] = $2;
 HEAP32[$0 + 8624 >> 2] = $1;
 $3 = HEAP32[$0 + 8636 >> 2];
 $4 = HEAP32[$0 + 8632 >> 2];
 $1 = HEAP32[$0 + 8624 >> 2];
 HEAP32[$0 + 8620 >> 2] = HEAP32[$0 + 8628 >> 2];
 HEAP32[$0 + 8616 >> 2] = $1;
 $2 = HEAP32[$0 + 8620 >> 2];
 $1 = HEAP32[$0 + 8616 >> 2];
 HEAP32[$0 + 1160 >> 2] = $1;
 HEAP32[$0 + 1164 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28b2Vec2_20const__29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28b2Vec2_20const__29_29($4, $0 + 1160 | 0);
 HEAP32[$0 + 3228 >> 2] = 0;
 HEAP32[$0 + 3224 >> 2] = 182;
 $1 = HEAP32[$0 + 3228 >> 2];
 $2 = HEAP32[$0 + 3224 >> 2];
 HEAP32[$0 + 8256 >> 2] = $2;
 HEAP32[$0 + 8260 >> 2] = $1;
 $1 = HEAP32[$0 + 8256 >> 2];
 $2 = HEAP32[$0 + 8260 >> 2];
 HEAP32[$0 + 8284 >> 2] = $3;
 HEAP32[$0 + 8280 >> 2] = 1240;
 HEAP32[$0 + 8276 >> 2] = $2;
 HEAP32[$0 + 8272 >> 2] = $1;
 $3 = HEAP32[$0 + 8284 >> 2];
 $4 = HEAP32[$0 + 8280 >> 2];
 $1 = HEAP32[$0 + 8272 >> 2];
 HEAP32[$0 + 8268 >> 2] = HEAP32[$0 + 8276 >> 2];
 HEAP32[$0 + 8264 >> 2] = $1;
 $2 = HEAP32[$0 + 8268 >> 2];
 $1 = HEAP32[$0 + 8264 >> 2];
 HEAP32[$0 + 1152 >> 2] = $1;
 HEAP32[$0 + 1156 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20b2Vec2_20const__20_28b2Body____29_28_29_20const_29($4, $0 + 1152 | 0);
 HEAP32[$0 + 3220 >> 2] = 0;
 HEAP32[$0 + 3216 >> 2] = 183;
 $1 = HEAP32[$0 + 3220 >> 2];
 $2 = HEAP32[$0 + 3216 >> 2];
 HEAP32[$0 + 8736 >> 2] = $2;
 HEAP32[$0 + 8740 >> 2] = $1;
 $1 = HEAP32[$0 + 8736 >> 2];
 $2 = HEAP32[$0 + 8740 >> 2];
 HEAP32[$0 + 8764 >> 2] = $3;
 HEAP32[$0 + 8760 >> 2] = 1169;
 HEAP32[$0 + 8756 >> 2] = $2;
 HEAP32[$0 + 8752 >> 2] = $1;
 $3 = HEAP32[$0 + 8764 >> 2];
 $4 = HEAP32[$0 + 8760 >> 2];
 $1 = HEAP32[$0 + 8752 >> 2];
 HEAP32[$0 + 8748 >> 2] = HEAP32[$0 + 8756 >> 2];
 HEAP32[$0 + 8744 >> 2] = $1;
 $2 = HEAP32[$0 + 8748 >> 2];
 $1 = HEAP32[$0 + 8744 >> 2];
 HEAP32[$0 + 1144 >> 2] = $1;
 HEAP32[$0 + 1148 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28float_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28float_29_29($4, $0 + 1144 | 0);
 HEAP32[$0 + 3212 >> 2] = 0;
 HEAP32[$0 + 3208 >> 2] = 184;
 $1 = HEAP32[$0 + 3212 >> 2];
 $2 = HEAP32[$0 + 3208 >> 2];
 HEAP32[$0 + 8544 >> 2] = $2;
 HEAP32[$0 + 8548 >> 2] = $1;
 $1 = HEAP32[$0 + 8544 >> 2];
 $2 = HEAP32[$0 + 8548 >> 2];
 HEAP32[$0 + 8572 >> 2] = $3;
 HEAP32[$0 + 8568 >> 2] = 1188;
 HEAP32[$0 + 8564 >> 2] = $2;
 HEAP32[$0 + 8560 >> 2] = $1;
 $3 = HEAP32[$0 + 8572 >> 2];
 $4 = HEAP32[$0 + 8568 >> 2];
 $1 = HEAP32[$0 + 8560 >> 2];
 HEAP32[$0 + 8556 >> 2] = HEAP32[$0 + 8564 >> 2];
 HEAP32[$0 + 8552 >> 2] = $1;
 $2 = HEAP32[$0 + 8556 >> 2];
 $1 = HEAP32[$0 + 8552 >> 2];
 HEAP32[$0 + 1136 >> 2] = $1;
 HEAP32[$0 + 1140 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20float_20_28b2Body____29_28_29_20const_29($4, $0 + 1136 | 0);
 HEAP32[$0 + 3204 >> 2] = 0;
 HEAP32[$0 + 3200 >> 2] = 185;
 $1 = HEAP32[$0 + 3204 >> 2];
 $2 = HEAP32[$0 + 3200 >> 2];
 HEAP32[$0 + 8800 >> 2] = $2;
 HEAP32[$0 + 8804 >> 2] = $1;
 $1 = HEAP32[$0 + 8800 >> 2];
 $2 = HEAP32[$0 + 8804 >> 2];
 HEAP32[$0 + 8828 >> 2] = $3;
 HEAP32[$0 + 8824 >> 2] = 9660;
 HEAP32[$0 + 8820 >> 2] = $2;
 HEAP32[$0 + 8816 >> 2] = $1;
 $3 = HEAP32[$0 + 8828 >> 2];
 $4 = HEAP32[$0 + 8824 >> 2];
 $1 = HEAP32[$0 + 8816 >> 2];
 HEAP32[$0 + 8812 >> 2] = HEAP32[$0 + 8820 >> 2];
 HEAP32[$0 + 8808 >> 2] = $1;
 $2 = HEAP32[$0 + 8812 >> 2];
 $1 = HEAP32[$0 + 8808 >> 2];
 HEAP32[$0 + 1128 >> 2] = $1;
 HEAP32[$0 + 1132 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29_29($4, $0 + 1128 | 0);
 HEAP32[$0 + 3196 >> 2] = 0;
 HEAP32[$0 + 3192 >> 2] = 186;
 $1 = HEAP32[$0 + 3196 >> 2];
 $2 = HEAP32[$0 + 3192 >> 2];
 HEAP32[$0 + 8864 >> 2] = $2;
 HEAP32[$0 + 8868 >> 2] = $1;
 $1 = HEAP32[$0 + 8864 >> 2];
 $2 = HEAP32[$0 + 8868 >> 2];
 HEAP32[$0 + 8892 >> 2] = $3;
 HEAP32[$0 + 8888 >> 2] = 3896;
 HEAP32[$0 + 8884 >> 2] = $2;
 HEAP32[$0 + 8880 >> 2] = $1;
 $3 = HEAP32[$0 + 8892 >> 2];
 $4 = HEAP32[$0 + 8888 >> 2];
 $1 = HEAP32[$0 + 8880 >> 2];
 HEAP32[$0 + 8876 >> 2] = HEAP32[$0 + 8884 >> 2];
 HEAP32[$0 + 8872 >> 2] = $1;
 $2 = HEAP32[$0 + 8876 >> 2];
 $1 = HEAP32[$0 + 8872 >> 2];
 HEAP32[$0 + 1120 >> 2] = $1;
 HEAP32[$0 + 1124 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28b2Vec2_20const__2c_20bool_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28b2Vec2_20const__2c_20bool_29_29($4, $0 + 1120 | 0);
 HEAP32[$0 + 3188 >> 2] = 0;
 HEAP32[$0 + 3184 >> 2] = 187;
 $1 = HEAP32[$0 + 3188 >> 2];
 $2 = HEAP32[$0 + 3184 >> 2];
 HEAP32[$0 + 8928 >> 2] = $2;
 HEAP32[$0 + 8932 >> 2] = $1;
 $1 = HEAP32[$0 + 8928 >> 2];
 $2 = HEAP32[$0 + 8932 >> 2];
 HEAP32[$0 + 8956 >> 2] = $3;
 HEAP32[$0 + 8952 >> 2] = 8571;
 HEAP32[$0 + 8948 >> 2] = $2;
 HEAP32[$0 + 8944 >> 2] = $1;
 $3 = HEAP32[$0 + 8956 >> 2];
 $4 = HEAP32[$0 + 8952 >> 2];
 $1 = HEAP32[$0 + 8944 >> 2];
 HEAP32[$0 + 8940 >> 2] = HEAP32[$0 + 8948 >> 2];
 HEAP32[$0 + 8936 >> 2] = $1;
 $2 = HEAP32[$0 + 8940 >> 2];
 $1 = HEAP32[$0 + 8936 >> 2];
 HEAP32[$0 + 1112 >> 2] = $1;
 HEAP32[$0 + 1116 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28float_2c_20bool_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28float_2c_20bool_29_29($4, $0 + 1112 | 0);
 HEAP32[$0 + 3180 >> 2] = 0;
 HEAP32[$0 + 3176 >> 2] = 188;
 $1 = HEAP32[$0 + 3180 >> 2];
 $2 = HEAP32[$0 + 3176 >> 2];
 HEAP32[$0 + 8768 >> 2] = $2;
 HEAP32[$0 + 8772 >> 2] = $1;
 $1 = HEAP32[$0 + 8768 >> 2];
 $2 = HEAP32[$0 + 8772 >> 2];
 HEAP32[$0 + 8796 >> 2] = $3;
 HEAP32[$0 + 8792 >> 2] = 8872;
 HEAP32[$0 + 8788 >> 2] = $2;
 HEAP32[$0 + 8784 >> 2] = $1;
 $3 = HEAP32[$0 + 8796 >> 2];
 $4 = HEAP32[$0 + 8792 >> 2];
 $1 = HEAP32[$0 + 8784 >> 2];
 HEAP32[$0 + 8780 >> 2] = HEAP32[$0 + 8788 >> 2];
 HEAP32[$0 + 8776 >> 2] = $1;
 $2 = HEAP32[$0 + 8780 >> 2];
 $1 = HEAP32[$0 + 8776 >> 2];
 HEAP32[$0 + 1104 >> 2] = $1;
 HEAP32[$0 + 1108 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29_29($4, $0 + 1104 | 0);
 HEAP32[$0 + 3172 >> 2] = 0;
 HEAP32[$0 + 3168 >> 2] = 189;
 $1 = HEAP32[$0 + 3172 >> 2];
 $2 = HEAP32[$0 + 3168 >> 2];
 HEAP32[$0 + 8832 >> 2] = $2;
 HEAP32[$0 + 8836 >> 2] = $1;
 $1 = HEAP32[$0 + 8832 >> 2];
 $2 = HEAP32[$0 + 8836 >> 2];
 HEAP32[$0 + 8860 >> 2] = $3;
 HEAP32[$0 + 8856 >> 2] = 3869;
 HEAP32[$0 + 8852 >> 2] = $2;
 HEAP32[$0 + 8848 >> 2] = $1;
 $3 = HEAP32[$0 + 8860 >> 2];
 $4 = HEAP32[$0 + 8856 >> 2];
 $1 = HEAP32[$0 + 8848 >> 2];
 HEAP32[$0 + 8844 >> 2] = HEAP32[$0 + 8852 >> 2];
 HEAP32[$0 + 8840 >> 2] = $1;
 $2 = HEAP32[$0 + 8844 >> 2];
 $1 = HEAP32[$0 + 8840 >> 2];
 HEAP32[$0 + 1096 >> 2] = $1;
 HEAP32[$0 + 1100 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28b2Vec2_20const__2c_20bool_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28b2Vec2_20const__2c_20bool_29_29($4, $0 + 1096 | 0);
 HEAP32[$0 + 3164 >> 2] = 0;
 HEAP32[$0 + 3160 >> 2] = 190;
 $1 = HEAP32[$0 + 3164 >> 2];
 $2 = HEAP32[$0 + 3160 >> 2];
 HEAP32[$0 + 8896 >> 2] = $2;
 HEAP32[$0 + 8900 >> 2] = $1;
 $1 = HEAP32[$0 + 8896 >> 2];
 $2 = HEAP32[$0 + 8900 >> 2];
 HEAP32[$0 + 8924 >> 2] = $3;
 HEAP32[$0 + 8920 >> 2] = 8852;
 HEAP32[$0 + 8916 >> 2] = $2;
 HEAP32[$0 + 8912 >> 2] = $1;
 $3 = HEAP32[$0 + 8924 >> 2];
 $4 = HEAP32[$0 + 8920 >> 2];
 $1 = HEAP32[$0 + 8912 >> 2];
 HEAP32[$0 + 8908 >> 2] = HEAP32[$0 + 8916 >> 2];
 HEAP32[$0 + 8904 >> 2] = $1;
 $2 = HEAP32[$0 + 8908 >> 2];
 $1 = HEAP32[$0 + 8904 >> 2];
 HEAP32[$0 + 1088 >> 2] = $1;
 HEAP32[$0 + 1092 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28float_2c_20bool_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28float_2c_20bool_29_29($4, $0 + 1088 | 0);
 HEAP32[$0 + 3156 >> 2] = 0;
 HEAP32[$0 + 3152 >> 2] = 191;
 $1 = HEAP32[$0 + 3156 >> 2];
 $2 = HEAP32[$0 + 3152 >> 2];
 HEAP32[$0 + 8512 >> 2] = $2;
 HEAP32[$0 + 8516 >> 2] = $1;
 $1 = HEAP32[$0 + 8512 >> 2];
 $2 = HEAP32[$0 + 8516 >> 2];
 HEAP32[$0 + 8540 >> 2] = $3;
 HEAP32[$0 + 8536 >> 2] = 3454;
 HEAP32[$0 + 8532 >> 2] = $2;
 HEAP32[$0 + 8528 >> 2] = $1;
 $3 = HEAP32[$0 + 8540 >> 2];
 $4 = HEAP32[$0 + 8536 >> 2];
 $1 = HEAP32[$0 + 8528 >> 2];
 HEAP32[$0 + 8524 >> 2] = HEAP32[$0 + 8532 >> 2];
 HEAP32[$0 + 8520 >> 2] = $1;
 $2 = HEAP32[$0 + 8524 >> 2];
 $1 = HEAP32[$0 + 8520 >> 2];
 HEAP32[$0 + 1080 >> 2] = $1;
 HEAP32[$0 + 1084 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20float_20_28b2Body____29_28_29_20const_29($4, $0 + 1080 | 0);
 HEAP32[$0 + 3148 >> 2] = 0;
 HEAP32[$0 + 3144 >> 2] = 192;
 $1 = HEAP32[$0 + 3148 >> 2];
 $2 = HEAP32[$0 + 3144 >> 2];
 HEAP32[$0 + 8480 >> 2] = $2;
 HEAP32[$0 + 8484 >> 2] = $1;
 $1 = HEAP32[$0 + 8480 >> 2];
 $2 = HEAP32[$0 + 8484 >> 2];
 HEAP32[$0 + 8508 >> 2] = $3;
 HEAP32[$0 + 8504 >> 2] = 10307;
 HEAP32[$0 + 8500 >> 2] = $2;
 HEAP32[$0 + 8496 >> 2] = $1;
 $3 = HEAP32[$0 + 8508 >> 2];
 $4 = HEAP32[$0 + 8504 >> 2];
 $1 = HEAP32[$0 + 8496 >> 2];
 HEAP32[$0 + 8492 >> 2] = HEAP32[$0 + 8500 >> 2];
 HEAP32[$0 + 8488 >> 2] = $1;
 $2 = HEAP32[$0 + 8492 >> 2];
 $1 = HEAP32[$0 + 8488 >> 2];
 HEAP32[$0 + 1072 >> 2] = $1;
 HEAP32[$0 + 1076 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20float_20_28b2Body____29_28_29_20const_29($4, $0 + 1072 | 0);
 HEAP32[$0 + 3136 >> 2] = 0;
 HEAP32[$0 + 3132 >> 2] = 193;
 $1 = HEAP32[$0 + 3136 >> 2];
 $2 = HEAP32[$0 + 3132 >> 2];
 HEAP32[$0 + 8960 >> 2] = $2;
 HEAP32[$0 + 8964 >> 2] = $1;
 $1 = HEAP32[$0 + 8960 >> 2];
 $2 = HEAP32[$0 + 8964 >> 2];
 HEAP32[$0 + 8992 >> 2] = $3;
 HEAP32[$0 + 8988 >> 2] = 10255;
 HEAP32[$0 + 8984 >> 2] = $2;
 HEAP32[$0 + 8980 >> 2] = $1;
 $3 = HEAP32[$0 + 8992 >> 2];
 $4 = HEAP32[$0 + 8988 >> 2];
 $1 = HEAP32[$0 + 8980 >> 2];
 HEAP32[$0 + 8976 >> 2] = HEAP32[$0 + 8984 >> 2];
 HEAP32[$0 + 8972 >> 2] = $1;
 $2 = HEAP32[$0 + 8976 >> 2];
 $1 = HEAP32[$0 + 8972 >> 2];
 HEAP32[$0 + 1064 >> 2] = $1;
 HEAP32[$0 + 1068 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28b2MassData__29_20const___invoke_b2Body_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Body____29_28b2MassData__29_20const_29($4, $0 + 1064 | 0);
 $1 = emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_7__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_7__28embind_init_b2_28_29__$_7_20const__29($0 + 3131 | 0);
 HEAP32[$0 + 9004 >> 2] = $3;
 HEAP32[$0 + 9e3 >> 2] = 10243;
 HEAP32[$0 + 8996 >> 2] = $1;
 $3 = HEAP32[$0 + 9004 >> 2];
 void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2Body__2c_20b2MassData_20const__29___invoke_b2Body_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28__29_28b2Body__2c_20b2MassData_20const__29_29(HEAP32[$0 + 9e3 >> 2], HEAP32[$0 + 8996 >> 2]);
 HEAP32[$0 + 3124 >> 2] = 0;
 HEAP32[$0 + 3120 >> 2] = 194;
 $1 = HEAP32[$0 + 3124 >> 2];
 $2 = HEAP32[$0 + 3120 >> 2];
 HEAP32[$0 + 9040 >> 2] = $2;
 HEAP32[$0 + 9044 >> 2] = $1;
 $1 = HEAP32[$0 + 9040 >> 2];
 $2 = HEAP32[$0 + 9044 >> 2];
 HEAP32[$0 + 9068 >> 2] = $3;
 HEAP32[$0 + 9064 >> 2] = 10229;
 HEAP32[$0 + 9060 >> 2] = $2;
 HEAP32[$0 + 9056 >> 2] = $1;
 $3 = HEAP32[$0 + 9068 >> 2];
 $4 = HEAP32[$0 + 9064 >> 2];
 $1 = HEAP32[$0 + 9056 >> 2];
 HEAP32[$0 + 9052 >> 2] = HEAP32[$0 + 9060 >> 2];
 HEAP32[$0 + 9048 >> 2] = $1;
 $2 = HEAP32[$0 + 9052 >> 2];
 $1 = HEAP32[$0 + 9048 >> 2];
 HEAP32[$0 + 1056 >> 2] = $1;
 HEAP32[$0 + 1060 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28_29_29($4, $0 + 1056 | 0);
 HEAP32[$0 + 3116 >> 2] = 0;
 HEAP32[$0 + 3112 >> 2] = 195;
 $1 = HEAP32[$0 + 3116 >> 2];
 $2 = HEAP32[$0 + 3112 >> 2];
 HEAP32[$0 + 9232 >> 2] = $2;
 HEAP32[$0 + 9236 >> 2] = $1;
 $1 = HEAP32[$0 + 9232 >> 2];
 $2 = HEAP32[$0 + 9236 >> 2];
 HEAP32[$0 + 9260 >> 2] = $3;
 HEAP32[$0 + 9256 >> 2] = 2511;
 HEAP32[$0 + 9252 >> 2] = $2;
 HEAP32[$0 + 9248 >> 2] = $1;
 $3 = HEAP32[$0 + 9260 >> 2];
 $4 = HEAP32[$0 + 9256 >> 2];
 $1 = HEAP32[$0 + 9248 >> 2];
 HEAP32[$0 + 9244 >> 2] = HEAP32[$0 + 9252 >> 2];
 HEAP32[$0 + 9240 >> 2] = $1;
 $2 = HEAP32[$0 + 9244 >> 2];
 $1 = HEAP32[$0 + 9240 >> 2];
 HEAP32[$0 + 1048 >> 2] = $1;
 HEAP32[$0 + 1052 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const___invoke_b2Body__28char_20const__2c_20b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const_29($4, $0 + 1048 | 0);
 HEAP32[$0 + 3108 >> 2] = 0;
 HEAP32[$0 + 3104 >> 2] = 196;
 $1 = HEAP32[$0 + 3108 >> 2];
 $2 = HEAP32[$0 + 3104 >> 2];
 HEAP32[$0 + 9200 >> 2] = $2;
 HEAP32[$0 + 9204 >> 2] = $1;
 $1 = HEAP32[$0 + 9200 >> 2];
 $2 = HEAP32[$0 + 9204 >> 2];
 HEAP32[$0 + 9228 >> 2] = $3;
 HEAP32[$0 + 9224 >> 2] = 3689;
 HEAP32[$0 + 9220 >> 2] = $2;
 HEAP32[$0 + 9216 >> 2] = $1;
 $3 = HEAP32[$0 + 9228 >> 2];
 $4 = HEAP32[$0 + 9224 >> 2];
 $1 = HEAP32[$0 + 9216 >> 2];
 HEAP32[$0 + 9212 >> 2] = HEAP32[$0 + 9220 >> 2];
 HEAP32[$0 + 9208 >> 2] = $1;
 $2 = HEAP32[$0 + 9212 >> 2];
 $1 = HEAP32[$0 + 9208 >> 2];
 HEAP32[$0 + 1040 >> 2] = $1;
 HEAP32[$0 + 1044 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const___invoke_b2Body__28char_20const__2c_20b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const_29($4, $0 + 1040 | 0);
 HEAP32[$0 + 3100 >> 2] = 0;
 HEAP32[$0 + 3096 >> 2] = 197;
 $1 = HEAP32[$0 + 3100 >> 2];
 $2 = HEAP32[$0 + 3096 >> 2];
 HEAP32[$0 + 9168 >> 2] = $2;
 HEAP32[$0 + 9172 >> 2] = $1;
 $1 = HEAP32[$0 + 9168 >> 2];
 $2 = HEAP32[$0 + 9172 >> 2];
 HEAP32[$0 + 9196 >> 2] = $3;
 HEAP32[$0 + 9192 >> 2] = 2465;
 HEAP32[$0 + 9188 >> 2] = $2;
 HEAP32[$0 + 9184 >> 2] = $1;
 $3 = HEAP32[$0 + 9196 >> 2];
 $4 = HEAP32[$0 + 9192 >> 2];
 $1 = HEAP32[$0 + 9184 >> 2];
 HEAP32[$0 + 9180 >> 2] = HEAP32[$0 + 9188 >> 2];
 HEAP32[$0 + 9176 >> 2] = $1;
 $2 = HEAP32[$0 + 9180 >> 2];
 $1 = HEAP32[$0 + 9176 >> 2];
 HEAP32[$0 + 1032 >> 2] = $1;
 HEAP32[$0 + 1036 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const___invoke_b2Body__28char_20const__2c_20b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const_29($4, $0 + 1032 | 0);
 HEAP32[$0 + 3092 >> 2] = 0;
 HEAP32[$0 + 3088 >> 2] = 198;
 $1 = HEAP32[$0 + 3092 >> 2];
 $2 = HEAP32[$0 + 3088 >> 2];
 HEAP32[$0 + 9136 >> 2] = $2;
 HEAP32[$0 + 9140 >> 2] = $1;
 $1 = HEAP32[$0 + 9136 >> 2];
 $2 = HEAP32[$0 + 9140 >> 2];
 HEAP32[$0 + 9164 >> 2] = $3;
 HEAP32[$0 + 9160 >> 2] = 3674;
 HEAP32[$0 + 9156 >> 2] = $2;
 HEAP32[$0 + 9152 >> 2] = $1;
 $3 = HEAP32[$0 + 9164 >> 2];
 $4 = HEAP32[$0 + 9160 >> 2];
 $1 = HEAP32[$0 + 9152 >> 2];
 HEAP32[$0 + 9148 >> 2] = HEAP32[$0 + 9156 >> 2];
 HEAP32[$0 + 9144 >> 2] = $1;
 $2 = HEAP32[$0 + 9148 >> 2];
 $1 = HEAP32[$0 + 9144 >> 2];
 HEAP32[$0 + 1024 >> 2] = $1;
 HEAP32[$0 + 1028 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const___invoke_b2Body__28char_20const__2c_20b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const_29($4, $0 + 1024 | 0);
 HEAP32[$0 + 3084 >> 2] = 0;
 HEAP32[$0 + 3080 >> 2] = 199;
 $1 = HEAP32[$0 + 3084 >> 2];
 $2 = HEAP32[$0 + 3080 >> 2];
 HEAP32[$0 + 9104 >> 2] = $2;
 HEAP32[$0 + 9108 >> 2] = $1;
 $1 = HEAP32[$0 + 9104 >> 2];
 $2 = HEAP32[$0 + 9108 >> 2];
 HEAP32[$0 + 9132 >> 2] = $3;
 HEAP32[$0 + 9128 >> 2] = 2525;
 HEAP32[$0 + 9124 >> 2] = $2;
 HEAP32[$0 + 9120 >> 2] = $1;
 $3 = HEAP32[$0 + 9132 >> 2];
 $4 = HEAP32[$0 + 9128 >> 2];
 $1 = HEAP32[$0 + 9120 >> 2];
 HEAP32[$0 + 9116 >> 2] = HEAP32[$0 + 9124 >> 2];
 HEAP32[$0 + 9112 >> 2] = $1;
 $2 = HEAP32[$0 + 9116 >> 2];
 $1 = HEAP32[$0 + 9112 >> 2];
 HEAP32[$0 + 1016 >> 2] = $1;
 HEAP32[$0 + 1020 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const___invoke_b2Body__28char_20const__2c_20b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const_29($4, $0 + 1016 | 0);
 HEAP32[$0 + 3076 >> 2] = 0;
 HEAP32[$0 + 3072 >> 2] = 200;
 $1 = HEAP32[$0 + 3076 >> 2];
 $2 = HEAP32[$0 + 3072 >> 2];
 HEAP32[$0 + 9072 >> 2] = $2;
 HEAP32[$0 + 9076 >> 2] = $1;
 $1 = HEAP32[$0 + 9072 >> 2];
 $2 = HEAP32[$0 + 9076 >> 2];
 HEAP32[$0 + 9100 >> 2] = $3;
 HEAP32[$0 + 9096 >> 2] = 2479;
 HEAP32[$0 + 9092 >> 2] = $2;
 HEAP32[$0 + 9088 >> 2] = $1;
 $3 = HEAP32[$0 + 9100 >> 2];
 $4 = HEAP32[$0 + 9096 >> 2];
 $1 = HEAP32[$0 + 9088 >> 2];
 HEAP32[$0 + 9084 >> 2] = HEAP32[$0 + 9092 >> 2];
 HEAP32[$0 + 9080 >> 2] = $1;
 $2 = HEAP32[$0 + 9084 >> 2];
 $1 = HEAP32[$0 + 9080 >> 2];
 HEAP32[$0 + 1008 >> 2] = $1;
 HEAP32[$0 + 1012 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const___invoke_b2Body__28char_20const__2c_20b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const_29($4, $0 + 1008 | 0);
 HEAP32[$0 + 3068 >> 2] = 0;
 HEAP32[$0 + 3064 >> 2] = 201;
 $1 = HEAP32[$0 + 3068 >> 2];
 $2 = HEAP32[$0 + 3064 >> 2];
 HEAP32[$0 + 8448 >> 2] = $2;
 HEAP32[$0 + 8452 >> 2] = $1;
 $1 = HEAP32[$0 + 8448 >> 2];
 $2 = HEAP32[$0 + 8452 >> 2];
 HEAP32[$0 + 8476 >> 2] = $3;
 HEAP32[$0 + 8472 >> 2] = 7634;
 HEAP32[$0 + 8468 >> 2] = $2;
 HEAP32[$0 + 8464 >> 2] = $1;
 $3 = HEAP32[$0 + 8476 >> 2];
 $4 = HEAP32[$0 + 8472 >> 2];
 $1 = HEAP32[$0 + 8464 >> 2];
 HEAP32[$0 + 8460 >> 2] = HEAP32[$0 + 8468 >> 2];
 HEAP32[$0 + 8456 >> 2] = $1;
 $2 = HEAP32[$0 + 8460 >> 2];
 $1 = HEAP32[$0 + 8456 >> 2];
 HEAP32[$0 + 1e3 >> 2] = $1;
 HEAP32[$0 + 1004 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20float_20_28b2Body____29_28_29_20const_29($4, $0 + 1e3 | 0);
 HEAP32[$0 + 3060 >> 2] = 0;
 HEAP32[$0 + 3056 >> 2] = 202;
 $1 = HEAP32[$0 + 3060 >> 2];
 $2 = HEAP32[$0 + 3056 >> 2];
 HEAP32[$0 + 8704 >> 2] = $2;
 HEAP32[$0 + 8708 >> 2] = $1;
 $1 = HEAP32[$0 + 8704 >> 2];
 $2 = HEAP32[$0 + 8708 >> 2];
 HEAP32[$0 + 8732 >> 2] = $3;
 HEAP32[$0 + 8728 >> 2] = 7617;
 HEAP32[$0 + 8724 >> 2] = $2;
 HEAP32[$0 + 8720 >> 2] = $1;
 $3 = HEAP32[$0 + 8732 >> 2];
 $4 = HEAP32[$0 + 8728 >> 2];
 $1 = HEAP32[$0 + 8720 >> 2];
 HEAP32[$0 + 8716 >> 2] = HEAP32[$0 + 8724 >> 2];
 HEAP32[$0 + 8712 >> 2] = $1;
 $2 = HEAP32[$0 + 8716 >> 2];
 $1 = HEAP32[$0 + 8712 >> 2];
 HEAP32[$0 + 992 >> 2] = $1;
 HEAP32[$0 + 996 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28float_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28float_29_29($4, $0 + 992 | 0);
 HEAP32[$0 + 3052 >> 2] = 0;
 HEAP32[$0 + 3048 >> 2] = 203;
 $1 = HEAP32[$0 + 3052 >> 2];
 $2 = HEAP32[$0 + 3048 >> 2];
 HEAP32[$0 + 8416 >> 2] = $2;
 HEAP32[$0 + 8420 >> 2] = $1;
 $1 = HEAP32[$0 + 8416 >> 2];
 $2 = HEAP32[$0 + 8420 >> 2];
 HEAP32[$0 + 8444 >> 2] = $3;
 HEAP32[$0 + 8440 >> 2] = 7585;
 HEAP32[$0 + 8436 >> 2] = $2;
 HEAP32[$0 + 8432 >> 2] = $1;
 $3 = HEAP32[$0 + 8444 >> 2];
 $4 = HEAP32[$0 + 8440 >> 2];
 $1 = HEAP32[$0 + 8432 >> 2];
 HEAP32[$0 + 8428 >> 2] = HEAP32[$0 + 8436 >> 2];
 HEAP32[$0 + 8424 >> 2] = $1;
 $2 = HEAP32[$0 + 8428 >> 2];
 $1 = HEAP32[$0 + 8424 >> 2];
 HEAP32[$0 + 984 >> 2] = $1;
 HEAP32[$0 + 988 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20float_20_28b2Body____29_28_29_20const_29($4, $0 + 984 | 0);
 HEAP32[$0 + 3044 >> 2] = 0;
 HEAP32[$0 + 3040 >> 2] = 204;
 $1 = HEAP32[$0 + 3044 >> 2];
 $2 = HEAP32[$0 + 3040 >> 2];
 HEAP32[$0 + 8672 >> 2] = $2;
 HEAP32[$0 + 8676 >> 2] = $1;
 $1 = HEAP32[$0 + 8672 >> 2];
 $2 = HEAP32[$0 + 8676 >> 2];
 HEAP32[$0 + 8700 >> 2] = $3;
 HEAP32[$0 + 8696 >> 2] = 7567;
 HEAP32[$0 + 8692 >> 2] = $2;
 HEAP32[$0 + 8688 >> 2] = $1;
 $3 = HEAP32[$0 + 8700 >> 2];
 $4 = HEAP32[$0 + 8696 >> 2];
 $1 = HEAP32[$0 + 8688 >> 2];
 HEAP32[$0 + 8684 >> 2] = HEAP32[$0 + 8692 >> 2];
 HEAP32[$0 + 8680 >> 2] = $1;
 $2 = HEAP32[$0 + 8684 >> 2];
 $1 = HEAP32[$0 + 8680 >> 2];
 HEAP32[$0 + 976 >> 2] = $1;
 HEAP32[$0 + 980 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28float_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28float_29_29($4, $0 + 976 | 0);
 HEAP32[$0 + 3036 >> 2] = 0;
 HEAP32[$0 + 3032 >> 2] = 205;
 $1 = HEAP32[$0 + 3036 >> 2];
 $2 = HEAP32[$0 + 3032 >> 2];
 HEAP32[$0 + 8384 >> 2] = $2;
 HEAP32[$0 + 8388 >> 2] = $1;
 $1 = HEAP32[$0 + 8384 >> 2];
 $2 = HEAP32[$0 + 8388 >> 2];
 HEAP32[$0 + 8412 >> 2] = $3;
 HEAP32[$0 + 8408 >> 2] = 9511;
 HEAP32[$0 + 8404 >> 2] = $2;
 HEAP32[$0 + 8400 >> 2] = $1;
 $3 = HEAP32[$0 + 8412 >> 2];
 $4 = HEAP32[$0 + 8408 >> 2];
 $1 = HEAP32[$0 + 8400 >> 2];
 HEAP32[$0 + 8396 >> 2] = HEAP32[$0 + 8404 >> 2];
 HEAP32[$0 + 8392 >> 2] = $1;
 $2 = HEAP32[$0 + 8396 >> 2];
 $1 = HEAP32[$0 + 8392 >> 2];
 HEAP32[$0 + 968 >> 2] = $1;
 HEAP32[$0 + 972 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20float_20_28b2Body____29_28_29_20const_29($4, $0 + 968 | 0);
 HEAP32[$0 + 3028 >> 2] = 0;
 HEAP32[$0 + 3024 >> 2] = 206;
 $1 = HEAP32[$0 + 3028 >> 2];
 $2 = HEAP32[$0 + 3024 >> 2];
 HEAP32[$0 + 8640 >> 2] = $2;
 HEAP32[$0 + 8644 >> 2] = $1;
 $1 = HEAP32[$0 + 8640 >> 2];
 $2 = HEAP32[$0 + 8644 >> 2];
 HEAP32[$0 + 8668 >> 2] = $3;
 HEAP32[$0 + 8664 >> 2] = 9495;
 HEAP32[$0 + 8660 >> 2] = $2;
 HEAP32[$0 + 8656 >> 2] = $1;
 $3 = HEAP32[$0 + 8668 >> 2];
 $4 = HEAP32[$0 + 8664 >> 2];
 $1 = HEAP32[$0 + 8656 >> 2];
 HEAP32[$0 + 8652 >> 2] = HEAP32[$0 + 8660 >> 2];
 HEAP32[$0 + 8648 >> 2] = $1;
 $2 = HEAP32[$0 + 8652 >> 2];
 $1 = HEAP32[$0 + 8648 >> 2];
 HEAP32[$0 + 960 >> 2] = $1;
 HEAP32[$0 + 964 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28float_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28float_29_29($4, $0 + 960 | 0);
 HEAP32[$0 + 3020 >> 2] = 0;
 HEAP32[$0 + 3016 >> 2] = 207;
 $1 = HEAP32[$0 + 3020 >> 2];
 $2 = HEAP32[$0 + 3016 >> 2];
 HEAP32[$0 + 9264 >> 2] = $2;
 HEAP32[$0 + 9268 >> 2] = $1;
 $1 = HEAP32[$0 + 9264 >> 2];
 $2 = HEAP32[$0 + 9268 >> 2];
 HEAP32[$0 + 9292 >> 2] = $3;
 HEAP32[$0 + 9288 >> 2] = 9065;
 HEAP32[$0 + 9284 >> 2] = $2;
 HEAP32[$0 + 9280 >> 2] = $1;
 $3 = HEAP32[$0 + 9292 >> 2];
 $4 = HEAP32[$0 + 9288 >> 2];
 $1 = HEAP32[$0 + 9280 >> 2];
 HEAP32[$0 + 9276 >> 2] = HEAP32[$0 + 9284 >> 2];
 HEAP32[$0 + 9272 >> 2] = $1;
 $2 = HEAP32[$0 + 9276 >> 2];
 $1 = HEAP32[$0 + 9272 >> 2];
 HEAP32[$0 + 952 >> 2] = $1;
 HEAP32[$0 + 956 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28b2BodyType_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28b2BodyType_29_29($4, $0 + 952 | 0);
 HEAP32[$0 + 3012 >> 2] = 0;
 HEAP32[$0 + 3008 >> 2] = 208;
 $1 = HEAP32[$0 + 3012 >> 2];
 $2 = HEAP32[$0 + 3008 >> 2];
 HEAP32[$0 + 9296 >> 2] = $2;
 HEAP32[$0 + 9300 >> 2] = $1;
 $1 = HEAP32[$0 + 9296 >> 2];
 $2 = HEAP32[$0 + 9300 >> 2];
 HEAP32[$0 + 9324 >> 2] = $3;
 HEAP32[$0 + 9320 >> 2] = 9081;
 HEAP32[$0 + 9316 >> 2] = $2;
 HEAP32[$0 + 9312 >> 2] = $1;
 $3 = HEAP32[$0 + 9324 >> 2];
 $4 = HEAP32[$0 + 9320 >> 2];
 $1 = HEAP32[$0 + 9312 >> 2];
 HEAP32[$0 + 9308 >> 2] = HEAP32[$0 + 9316 >> 2];
 HEAP32[$0 + 9304 >> 2] = $1;
 $2 = HEAP32[$0 + 9308 >> 2];
 $1 = HEAP32[$0 + 9304 >> 2];
 HEAP32[$0 + 944 >> 2] = $1;
 HEAP32[$0 + 948 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2BodyType_20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20b2BodyType_20_28b2Body____29_28_29_20const_29($4, $0 + 944 | 0);
 HEAP32[$0 + 3004 >> 2] = 0;
 HEAP32[$0 + 3e3 >> 2] = 209;
 $1 = HEAP32[$0 + 3004 >> 2];
 $2 = HEAP32[$0 + 3e3 >> 2];
 HEAP32[$0 + 9456 >> 2] = $2;
 HEAP32[$0 + 9460 >> 2] = $1;
 $1 = HEAP32[$0 + 9456 >> 2];
 $2 = HEAP32[$0 + 9460 >> 2];
 HEAP32[$0 + 9484 >> 2] = $3;
 HEAP32[$0 + 9480 >> 2] = 3035;
 HEAP32[$0 + 9476 >> 2] = $2;
 HEAP32[$0 + 9472 >> 2] = $1;
 $3 = HEAP32[$0 + 9484 >> 2];
 $4 = HEAP32[$0 + 9480 >> 2];
 $1 = HEAP32[$0 + 9472 >> 2];
 HEAP32[$0 + 9468 >> 2] = HEAP32[$0 + 9476 >> 2];
 HEAP32[$0 + 9464 >> 2] = $1;
 $2 = HEAP32[$0 + 9468 >> 2];
 $1 = HEAP32[$0 + 9464 >> 2];
 HEAP32[$0 + 936 >> 2] = $1;
 HEAP32[$0 + 940 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28bool_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28bool_29_29($4, $0 + 936 | 0);
 HEAP32[$0 + 2996 >> 2] = 0;
 HEAP32[$0 + 2992 >> 2] = 210;
 $1 = HEAP32[$0 + 2996 >> 2];
 $2 = HEAP32[$0 + 2992 >> 2];
 HEAP32[$0 + 9616 >> 2] = $2;
 HEAP32[$0 + 9620 >> 2] = $1;
 $1 = HEAP32[$0 + 9616 >> 2];
 $2 = HEAP32[$0 + 9620 >> 2];
 HEAP32[$0 + 9644 >> 2] = $3;
 HEAP32[$0 + 9640 >> 2] = 3045;
 HEAP32[$0 + 9636 >> 2] = $2;
 HEAP32[$0 + 9632 >> 2] = $1;
 $3 = HEAP32[$0 + 9644 >> 2];
 $4 = HEAP32[$0 + 9640 >> 2];
 $1 = HEAP32[$0 + 9632 >> 2];
 HEAP32[$0 + 9628 >> 2] = HEAP32[$0 + 9636 >> 2];
 HEAP32[$0 + 9624 >> 2] = $1;
 $2 = HEAP32[$0 + 9628 >> 2];
 $1 = HEAP32[$0 + 9624 >> 2];
 HEAP32[$0 + 928 >> 2] = $1;
 HEAP32[$0 + 932 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20bool_20_28b2Body____29_28_29_20const_29($4, $0 + 928 | 0);
 HEAP32[$0 + 2988 >> 2] = 0;
 HEAP32[$0 + 2984 >> 2] = 211;
 $1 = HEAP32[$0 + 2988 >> 2];
 $2 = HEAP32[$0 + 2984 >> 2];
 HEAP32[$0 + 9424 >> 2] = $2;
 HEAP32[$0 + 9428 >> 2] = $1;
 $1 = HEAP32[$0 + 9424 >> 2];
 $2 = HEAP32[$0 + 9428 >> 2];
 HEAP32[$0 + 9452 >> 2] = $3;
 HEAP32[$0 + 9448 >> 2] = 9945;
 HEAP32[$0 + 9444 >> 2] = $2;
 HEAP32[$0 + 9440 >> 2] = $1;
 $3 = HEAP32[$0 + 9452 >> 2];
 $4 = HEAP32[$0 + 9448 >> 2];
 $1 = HEAP32[$0 + 9440 >> 2];
 HEAP32[$0 + 9436 >> 2] = HEAP32[$0 + 9444 >> 2];
 HEAP32[$0 + 9432 >> 2] = $1;
 $2 = HEAP32[$0 + 9436 >> 2];
 $1 = HEAP32[$0 + 9432 >> 2];
 HEAP32[$0 + 920 >> 2] = $1;
 HEAP32[$0 + 924 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28bool_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28bool_29_29($4, $0 + 920 | 0);
 HEAP32[$0 + 2980 >> 2] = 0;
 HEAP32[$0 + 2976 >> 2] = 212;
 $1 = HEAP32[$0 + 2980 >> 2];
 $2 = HEAP32[$0 + 2976 >> 2];
 HEAP32[$0 + 9584 >> 2] = $2;
 HEAP32[$0 + 9588 >> 2] = $1;
 $1 = HEAP32[$0 + 9584 >> 2];
 $2 = HEAP32[$0 + 9588 >> 2];
 HEAP32[$0 + 9612 >> 2] = $3;
 HEAP32[$0 + 9608 >> 2] = 9964;
 HEAP32[$0 + 9604 >> 2] = $2;
 HEAP32[$0 + 9600 >> 2] = $1;
 $3 = HEAP32[$0 + 9612 >> 2];
 $4 = HEAP32[$0 + 9608 >> 2];
 $1 = HEAP32[$0 + 9600 >> 2];
 HEAP32[$0 + 9596 >> 2] = HEAP32[$0 + 9604 >> 2];
 HEAP32[$0 + 9592 >> 2] = $1;
 $2 = HEAP32[$0 + 9596 >> 2];
 $1 = HEAP32[$0 + 9592 >> 2];
 HEAP32[$0 + 912 >> 2] = $1;
 HEAP32[$0 + 916 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20bool_20_28b2Body____29_28_29_20const_29($4, $0 + 912 | 0);
 HEAP32[$0 + 2972 >> 2] = 0;
 HEAP32[$0 + 2968 >> 2] = 213;
 $1 = HEAP32[$0 + 2972 >> 2];
 $2 = HEAP32[$0 + 2968 >> 2];
 HEAP32[$0 + 9392 >> 2] = $2;
 HEAP32[$0 + 9396 >> 2] = $1;
 $1 = HEAP32[$0 + 9392 >> 2];
 $2 = HEAP32[$0 + 9396 >> 2];
 HEAP32[$0 + 9420 >> 2] = $3;
 HEAP32[$0 + 9416 >> 2] = 9533;
 HEAP32[$0 + 9412 >> 2] = $2;
 HEAP32[$0 + 9408 >> 2] = $1;
 $3 = HEAP32[$0 + 9420 >> 2];
 $4 = HEAP32[$0 + 9416 >> 2];
 $1 = HEAP32[$0 + 9408 >> 2];
 HEAP32[$0 + 9404 >> 2] = HEAP32[$0 + 9412 >> 2];
 HEAP32[$0 + 9400 >> 2] = $1;
 $2 = HEAP32[$0 + 9404 >> 2];
 $1 = HEAP32[$0 + 9400 >> 2];
 HEAP32[$0 + 904 >> 2] = $1;
 HEAP32[$0 + 908 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28bool_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28bool_29_29($4, $0 + 904 | 0);
 HEAP32[$0 + 2964 >> 2] = 0;
 HEAP32[$0 + 2960 >> 2] = 214;
 $1 = HEAP32[$0 + 2964 >> 2];
 $2 = HEAP32[$0 + 2960 >> 2];
 HEAP32[$0 + 9552 >> 2] = $2;
 HEAP32[$0 + 9556 >> 2] = $1;
 $1 = HEAP32[$0 + 9552 >> 2];
 $2 = HEAP32[$0 + 9556 >> 2];
 HEAP32[$0 + 9580 >> 2] = $3;
 HEAP32[$0 + 9576 >> 2] = 9542;
 HEAP32[$0 + 9572 >> 2] = $2;
 HEAP32[$0 + 9568 >> 2] = $1;
 $3 = HEAP32[$0 + 9580 >> 2];
 $4 = HEAP32[$0 + 9576 >> 2];
 $1 = HEAP32[$0 + 9568 >> 2];
 HEAP32[$0 + 9564 >> 2] = HEAP32[$0 + 9572 >> 2];
 HEAP32[$0 + 9560 >> 2] = $1;
 $2 = HEAP32[$0 + 9564 >> 2];
 $1 = HEAP32[$0 + 9560 >> 2];
 HEAP32[$0 + 896 >> 2] = $1;
 HEAP32[$0 + 900 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20bool_20_28b2Body____29_28_29_20const_29($4, $0 + 896 | 0);
 HEAP32[$0 + 2956 >> 2] = 0;
 HEAP32[$0 + 2952 >> 2] = 215;
 $1 = HEAP32[$0 + 2956 >> 2];
 $2 = HEAP32[$0 + 2952 >> 2];
 HEAP32[$0 + 9360 >> 2] = $2;
 HEAP32[$0 + 9364 >> 2] = $1;
 $1 = HEAP32[$0 + 9360 >> 2];
 $2 = HEAP32[$0 + 9364 >> 2];
 HEAP32[$0 + 9388 >> 2] = $3;
 HEAP32[$0 + 9384 >> 2] = 10061;
 HEAP32[$0 + 9380 >> 2] = $2;
 HEAP32[$0 + 9376 >> 2] = $1;
 $3 = HEAP32[$0 + 9388 >> 2];
 $4 = HEAP32[$0 + 9384 >> 2];
 $1 = HEAP32[$0 + 9376 >> 2];
 HEAP32[$0 + 9372 >> 2] = HEAP32[$0 + 9380 >> 2];
 HEAP32[$0 + 9368 >> 2] = $1;
 $2 = HEAP32[$0 + 9372 >> 2];
 $1 = HEAP32[$0 + 9368 >> 2];
 HEAP32[$0 + 888 >> 2] = $1;
 HEAP32[$0 + 892 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28bool_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28bool_29_29($4, $0 + 888 | 0);
 HEAP32[$0 + 2948 >> 2] = 0;
 HEAP32[$0 + 2944 >> 2] = 216;
 $1 = HEAP32[$0 + 2948 >> 2];
 $2 = HEAP32[$0 + 2944 >> 2];
 HEAP32[$0 + 9520 >> 2] = $2;
 HEAP32[$0 + 9524 >> 2] = $1;
 $1 = HEAP32[$0 + 9520 >> 2];
 $2 = HEAP32[$0 + 9524 >> 2];
 HEAP32[$0 + 9548 >> 2] = $3;
 HEAP32[$0 + 9544 >> 2] = 10072;
 HEAP32[$0 + 9540 >> 2] = $2;
 HEAP32[$0 + 9536 >> 2] = $1;
 $3 = HEAP32[$0 + 9548 >> 2];
 $4 = HEAP32[$0 + 9544 >> 2];
 $1 = HEAP32[$0 + 9536 >> 2];
 HEAP32[$0 + 9532 >> 2] = HEAP32[$0 + 9540 >> 2];
 HEAP32[$0 + 9528 >> 2] = $1;
 $2 = HEAP32[$0 + 9532 >> 2];
 $1 = HEAP32[$0 + 9528 >> 2];
 HEAP32[$0 + 880 >> 2] = $1;
 HEAP32[$0 + 884 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20bool_20_28b2Body____29_28_29_20const_29($4, $0 + 880 | 0);
 HEAP32[$0 + 2940 >> 2] = 0;
 HEAP32[$0 + 2936 >> 2] = 217;
 $1 = HEAP32[$0 + 2940 >> 2];
 $2 = HEAP32[$0 + 2936 >> 2];
 HEAP32[$0 + 9328 >> 2] = $2;
 HEAP32[$0 + 9332 >> 2] = $1;
 $1 = HEAP32[$0 + 9328 >> 2];
 $2 = HEAP32[$0 + 9332 >> 2];
 HEAP32[$0 + 9356 >> 2] = $3;
 HEAP32[$0 + 9352 >> 2] = 6529;
 HEAP32[$0 + 9348 >> 2] = $2;
 HEAP32[$0 + 9344 >> 2] = $1;
 $3 = HEAP32[$0 + 9356 >> 2];
 $4 = HEAP32[$0 + 9352 >> 2];
 $1 = HEAP32[$0 + 9344 >> 2];
 HEAP32[$0 + 9340 >> 2] = HEAP32[$0 + 9348 >> 2];
 HEAP32[$0 + 9336 >> 2] = $1;
 $2 = HEAP32[$0 + 9340 >> 2];
 $1 = HEAP32[$0 + 9336 >> 2];
 HEAP32[$0 + 872 >> 2] = $1;
 HEAP32[$0 + 876 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28bool_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28bool_29_29($4, $0 + 872 | 0);
 HEAP32[$0 + 2932 >> 2] = 0;
 HEAP32[$0 + 2928 >> 2] = 218;
 $1 = HEAP32[$0 + 2932 >> 2];
 $2 = HEAP32[$0 + 2928 >> 2];
 HEAP32[$0 + 9488 >> 2] = $2;
 HEAP32[$0 + 9492 >> 2] = $1;
 $1 = HEAP32[$0 + 9488 >> 2];
 $2 = HEAP32[$0 + 9492 >> 2];
 HEAP32[$0 + 9516 >> 2] = $3;
 HEAP32[$0 + 9512 >> 2] = 6546;
 HEAP32[$0 + 9508 >> 2] = $2;
 HEAP32[$0 + 9504 >> 2] = $1;
 $3 = HEAP32[$0 + 9516 >> 2];
 $4 = HEAP32[$0 + 9512 >> 2];
 $1 = HEAP32[$0 + 9504 >> 2];
 HEAP32[$0 + 9500 >> 2] = HEAP32[$0 + 9508 >> 2];
 HEAP32[$0 + 9496 >> 2] = $1;
 $2 = HEAP32[$0 + 9500 >> 2];
 $1 = HEAP32[$0 + 9496 >> 2];
 HEAP32[$0 + 864 >> 2] = $1;
 HEAP32[$0 + 868 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20bool_20_28b2Body____29_28_29_20const_29($4, $0 + 864 | 0);
 HEAP32[$0 + 2920 >> 2] = 0;
 HEAP32[$0 + 2916 >> 2] = 219;
 $1 = HEAP32[$0 + 2920 >> 2];
 $2 = HEAP32[$0 + 2916 >> 2];
 HEAP32[$0 + 9648 >> 2] = $2;
 HEAP32[$0 + 9652 >> 2] = $1;
 $1 = HEAP32[$0 + 9648 >> 2];
 $2 = HEAP32[$0 + 9652 >> 2];
 HEAP32[$0 + 9680 >> 2] = $3;
 HEAP32[$0 + 9676 >> 2] = 1940;
 HEAP32[$0 + 9672 >> 2] = $2;
 HEAP32[$0 + 9668 >> 2] = $1;
 $3 = HEAP32[$0 + 9680 >> 2];
 $4 = HEAP32[$0 + 9676 >> 2];
 $1 = HEAP32[$0 + 9668 >> 2];
 HEAP32[$0 + 9664 >> 2] = HEAP32[$0 + 9672 >> 2];
 HEAP32[$0 + 9660 >> 2] = $1;
 $2 = HEAP32[$0 + 9664 >> 2];
 $1 = HEAP32[$0 + 9660 >> 2];
 HEAP32[$0 + 856 >> 2] = $1;
 HEAP32[$0 + 860 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Fixture__20_28b2Body____29_28_29___invoke_b2Body_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Fixture__20_28b2Body____29_28_29_29($4, $0 + 856 | 0);
 $1 = emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_8__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_8__28embind_init_b2_28_29__$_8_20const__29($0 + 2915 | 0);
 HEAP32[$0 + 9692 >> 2] = $3;
 HEAP32[$0 + 9688 >> 2] = 1927;
 HEAP32[$0 + 9684 >> 2] = $1;
 $3 = HEAP32[$0 + 9692 >> 2];
 void_20emscripten__internal__RegisterClassMethod_unsigned_20int_20_28__29_28b2Body__29___invoke_b2Body_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20unsigned_20int_20_28__29_28b2Body__29_29(HEAP32[$0 + 9688 >> 2], HEAP32[$0 + 9684 >> 2]);
 HEAP32[$0 + 2908 >> 2] = 0;
 HEAP32[$0 + 2904 >> 2] = 220;
 $1 = HEAP32[$0 + 2908 >> 2];
 $2 = HEAP32[$0 + 2904 >> 2];
 HEAP32[$0 + 9696 >> 2] = $2;
 HEAP32[$0 + 9700 >> 2] = $1;
 $1 = HEAP32[$0 + 9696 >> 2];
 $2 = HEAP32[$0 + 9700 >> 2];
 HEAP32[$0 + 9728 >> 2] = $3;
 HEAP32[$0 + 9724 >> 2] = 9864;
 HEAP32[$0 + 9720 >> 2] = $2;
 HEAP32[$0 + 9716 >> 2] = $1;
 $3 = HEAP32[$0 + 9728 >> 2];
 $4 = HEAP32[$0 + 9724 >> 2];
 $1 = HEAP32[$0 + 9716 >> 2];
 HEAP32[$0 + 9712 >> 2] = HEAP32[$0 + 9720 >> 2];
 HEAP32[$0 + 9708 >> 2] = $1;
 $2 = HEAP32[$0 + 9712 >> 2];
 $1 = HEAP32[$0 + 9708 >> 2];
 HEAP32[$0 + 848 >> 2] = $1;
 HEAP32[$0 + 852 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2World__20_28b2Body____29_28_29___invoke_b2Body_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2World__20_28b2Body____29_28_29_29($4, $0 + 848 | 0);
 HEAP32[$0 + 2900 >> 2] = 0;
 HEAP32[$0 + 2896 >> 2] = 221;
 $1 = HEAP32[$0 + 2900 >> 2];
 $2 = HEAP32[$0 + 2896 >> 2];
 HEAP32[$0 + 9008 >> 2] = $2;
 HEAP32[$0 + 9012 >> 2] = $1;
 $1 = HEAP32[$0 + 9008 >> 2];
 $2 = HEAP32[$0 + 9012 >> 2];
 HEAP32[$0 + 9036 >> 2] = $3;
 HEAP32[$0 + 9032 >> 2] = 6119;
 HEAP32[$0 + 9028 >> 2] = $2;
 HEAP32[$0 + 9024 >> 2] = $1;
 $3 = HEAP32[$0 + 9032 >> 2];
 $1 = HEAP32[$0 + 9024 >> 2];
 HEAP32[$0 + 9020 >> 2] = HEAP32[$0 + 9028 >> 2];
 HEAP32[$0 + 9016 >> 2] = $1;
 $2 = HEAP32[$0 + 9020 >> 2];
 $1 = HEAP32[$0 + 9016 >> 2];
 HEAP32[$0 + 840 >> 2] = $1;
 HEAP32[$0 + 844 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28_29_29($3, $0 + 840 | 0);
 HEAP32[$0 + 9752 >> 2] = $0 + 2895;
 HEAP32[$0 + 9748 >> 2] = 7826;
 void_20emscripten__internal__NoBaseClass__verify_b2JointDef__28_29();
 HEAP32[$0 + 9744 >> 2] = 222;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2JointDef__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 9740 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2JointDef__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 9736 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 9732 >> 2] = 223;
 $1 = emscripten__internal__TypeID_b2JointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2JointDef__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2JointDef_20const__2c_20void___get_28_29();
 $4 = emscripten__internal__NoBaseClass__get_28_29();
 HEAP32[$0 + 15536 >> 2] = HEAP32[$0 + 9744 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 9744 >> 2];
 HEAP32[$0 + 14684 >> 2] = HEAP32[$0 + 9740 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $8 = HEAP32[$0 + 9740 >> 2];
 HEAP32[$0 + 14680 >> 2] = HEAP32[$0 + 9736 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $10 = HEAP32[$0 + 9736 >> 2];
 $11 = HEAP32[$0 + 9748 >> 2];
 HEAP32[$0 + 15540 >> 2] = HEAP32[$0 + 9732 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 9732 >> 2]);
 HEAP32[$0 + 9756 >> 2] = $0 + 2895;
 HEAP32[$0 + 15548 >> 2] = HEAP32[$0 + 9756 >> 2];
 HEAP32[$0 + 15544 >> 2] = 224;
 $1 = HEAP32[$0 + 15548 >> 2];
 void_20emscripten__internal__RegisterClassConstructor_b2JointDef__20_28__29_28_29___invoke_b2JointDef__28b2JointDef__20_28__29_28_29_29(HEAP32[$0 + 15544 >> 2]);
 HEAP32[$0 + 9776 >> 2] = $1;
 HEAP32[$0 + 9772 >> 2] = 9051;
 HEAP32[$0 + 9768 >> 2] = 0;
 $1 = HEAP32[$0 + 9776 >> 2];
 HEAP32[$0 + 9764 >> 2] = 225;
 HEAP32[$0 + 9760 >> 2] = 226;
 $2 = emscripten__internal__TypeID_b2JointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 9772 >> 2];
 $4 = emscripten__internal__TypeID_b2JointType_2c_20void___get_28_29();
 HEAP32[$0 + 15552 >> 2] = HEAP32[$0 + 9764 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 9764 >> 2];
 $7 = b2JointType_20b2JointDef_____20emscripten__internal__getContext_b2JointType_20b2JointDef_____28b2JointType_20b2JointDef____20const__29($0 + 9768 | 0);
 $8 = emscripten__internal__TypeID_b2JointType_2c_20void___get_28_29();
 HEAP32[$0 + 15556 >> 2] = HEAP32[$0 + 9760 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 9760 >> 2], b2JointType_20b2JointDef_____20emscripten__internal__getContext_b2JointType_20b2JointDef_____28b2JointType_20b2JointDef____20const__29($0 + 9768 | 0) | 0);
 $2 = emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_9__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_9__28embind_init_b2_28_29__$_9_20const__29($0 + 2894 | 0);
 HEAP32[$0 + 9800 >> 2] = $1;
 HEAP32[$0 + 9796 >> 2] = 10908;
 HEAP32[$0 + 9792 >> 2] = $2;
 $1 = HEAP32[$0 + 9800 >> 2];
 void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2JointDef__2c_20b2Body__29___invoke_b2JointDef_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28__29_28b2JointDef__2c_20b2Body__29_29(HEAP32[$0 + 9796 >> 2], HEAP32[$0 + 9792 >> 2]);
 $2 = emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_10__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_10__28embind_init_b2_28_29__$_10_20const__29($0 + 2892 | 0);
 HEAP32[$0 + 9824 >> 2] = $1;
 HEAP32[$0 + 9820 >> 2] = 10917;
 HEAP32[$0 + 9816 >> 2] = $2;
 $1 = HEAP32[$0 + 9824 >> 2];
 void_20emscripten__internal__RegisterClassMethod_b2Body__20_28__29_28b2JointDef__29___invoke_b2JointDef_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Body__20_28__29_28b2JointDef__29_29(HEAP32[$0 + 9820 >> 2], HEAP32[$0 + 9816 >> 2]);
 $2 = emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_11__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_11__28embind_init_b2_28_29__$_11_20const__29($0 + 2890 | 0);
 HEAP32[$0 + 9788 >> 2] = $1;
 HEAP32[$0 + 9784 >> 2] = 10790;
 HEAP32[$0 + 9780 >> 2] = $2;
 $1 = HEAP32[$0 + 9788 >> 2];
 void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2JointDef__2c_20b2Body__29___invoke_b2JointDef_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28__29_28b2JointDef__2c_20b2Body__29_29(HEAP32[$0 + 9784 >> 2], HEAP32[$0 + 9780 >> 2]);
 $2 = emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_12__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_12__28embind_init_b2_28_29__$_12_20const__29($0 + 2888 | 0);
 HEAP32[$0 + 9812 >> 2] = $1;
 HEAP32[$0 + 9808 >> 2] = 10799;
 HEAP32[$0 + 9804 >> 2] = $2;
 $1 = HEAP32[$0 + 9812 >> 2];
 void_20emscripten__internal__RegisterClassMethod_b2Body__20_28__29_28b2JointDef__29___invoke_b2JointDef_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Body__20_28__29_28b2JointDef__29_29(HEAP32[$0 + 9808 >> 2], HEAP32[$0 + 9804 >> 2]);
 HEAP32[$0 + 9844 >> 2] = $1;
 HEAP32[$0 + 9840 >> 2] = 10002;
 HEAP32[$0 + 9836 >> 2] = 16;
 HEAP32[$0 + 9832 >> 2] = 227;
 HEAP32[$0 + 9828 >> 2] = 228;
 $1 = emscripten__internal__TypeID_b2JointDef_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 9840 >> 2];
 $3 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 15560 >> 2] = HEAP32[$0 + 9832 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $5 = HEAP32[$0 + 9832 >> 2];
 $6 = bool_20b2JointDef_____20emscripten__internal__getContext_bool_20b2JointDef_____28bool_20b2JointDef____20const__29($0 + 9836 | 0);
 $7 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 15564 >> 2] = HEAP32[$0 + 9828 >> 2];
 _embind_register_class_property($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 9828 >> 2], bool_20b2JointDef_____20emscripten__internal__getContext_bool_20b2JointDef_____28bool_20b2JointDef____20const__29($0 + 9836 | 0) | 0);
 HEAP32[$0 + 9868 >> 2] = $0 + 2886;
 HEAP32[$0 + 9864 >> 2] = 2842;
 void_20emscripten__internal__NoBaseClass__verify_b2Joint__28_29();
 HEAP32[$0 + 9860 >> 2] = 229;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2Joint__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 9856 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2Joint__28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 9852 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 9848 >> 2] = 230;
 $1 = emscripten__internal__TypeID_b2Joint_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Joint__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Joint_20const__2c_20void___get_28_29();
 $4 = emscripten__internal__NoBaseClass__get_28_29();
 HEAP32[$0 + 15568 >> 2] = HEAP32[$0 + 9860 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 9860 >> 2];
 HEAP32[$0 + 14676 >> 2] = HEAP32[$0 + 9856 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $8 = HEAP32[$0 + 9856 >> 2];
 HEAP32[$0 + 14672 >> 2] = HEAP32[$0 + 9852 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $10 = HEAP32[$0 + 9852 >> 2];
 $11 = HEAP32[$0 + 9864 >> 2];
 HEAP32[$0 + 15572 >> 2] = HEAP32[$0 + 9848 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 9848 >> 2]);
 HEAP32[$0 + 2880 >> 2] = 0;
 HEAP32[$0 + 2876 >> 2] = 231;
 $1 = HEAP32[$0 + 2880 >> 2];
 $2 = HEAP32[$0 + 2876 >> 2];
 HEAP32[$0 + 9872 >> 2] = $2;
 HEAP32[$0 + 9876 >> 2] = $1;
 $1 = HEAP32[$0 + 9872 >> 2];
 $2 = HEAP32[$0 + 9876 >> 2];
 HEAP32[$0 + 9900 >> 2] = $0 + 2886;
 HEAP32[$0 + 9896 >> 2] = 9081;
 HEAP32[$0 + 9892 >> 2] = $2;
 HEAP32[$0 + 9888 >> 2] = $1;
 $3 = HEAP32[$0 + 9900 >> 2];
 $4 = HEAP32[$0 + 9896 >> 2];
 $1 = HEAP32[$0 + 9888 >> 2];
 HEAP32[$0 + 9884 >> 2] = HEAP32[$0 + 9892 >> 2];
 HEAP32[$0 + 9880 >> 2] = $1;
 $2 = HEAP32[$0 + 9884 >> 2];
 $1 = HEAP32[$0 + 9880 >> 2];
 HEAP32[$0 + 832 >> 2] = $1;
 HEAP32[$0 + 836 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2JointType_20_28b2Joint____29_28_29_20const___invoke_b2Joint__28char_20const__2c_20b2JointType_20_28b2Joint____29_28_29_20const_29($4, $0 + 832 | 0);
 HEAP32[$0 + 2868 >> 2] = 0;
 HEAP32[$0 + 2864 >> 2] = 232;
 $1 = HEAP32[$0 + 2868 >> 2];
 $2 = HEAP32[$0 + 2864 >> 2];
 HEAP32[$0 + 9936 >> 2] = $2;
 HEAP32[$0 + 9940 >> 2] = $1;
 $1 = HEAP32[$0 + 9936 >> 2];
 $2 = HEAP32[$0 + 9940 >> 2];
 HEAP32[$0 + 9964 >> 2] = $3;
 HEAP32[$0 + 9960 >> 2] = 10917;
 HEAP32[$0 + 9956 >> 2] = $2;
 HEAP32[$0 + 9952 >> 2] = $1;
 $3 = HEAP32[$0 + 9964 >> 2];
 $4 = HEAP32[$0 + 9960 >> 2];
 $1 = HEAP32[$0 + 9952 >> 2];
 HEAP32[$0 + 9948 >> 2] = HEAP32[$0 + 9956 >> 2];
 HEAP32[$0 + 9944 >> 2] = $1;
 $2 = HEAP32[$0 + 9948 >> 2];
 $1 = HEAP32[$0 + 9944 >> 2];
 HEAP32[$0 + 824 >> 2] = $1;
 HEAP32[$0 + 828 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Body__20_28b2Joint____29_28_29___invoke_b2Joint_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Body__20_28b2Joint____29_28_29_29($4, $0 + 824 | 0);
 HEAP32[$0 + 2856 >> 2] = 0;
 HEAP32[$0 + 2852 >> 2] = 233;
 $1 = HEAP32[$0 + 2856 >> 2];
 $2 = HEAP32[$0 + 2852 >> 2];
 HEAP32[$0 + 9904 >> 2] = $2;
 HEAP32[$0 + 9908 >> 2] = $1;
 $1 = HEAP32[$0 + 9904 >> 2];
 $2 = HEAP32[$0 + 9908 >> 2];
 HEAP32[$0 + 9932 >> 2] = $3;
 HEAP32[$0 + 9928 >> 2] = 10799;
 HEAP32[$0 + 9924 >> 2] = $2;
 HEAP32[$0 + 9920 >> 2] = $1;
 $3 = HEAP32[$0 + 9932 >> 2];
 $4 = HEAP32[$0 + 9928 >> 2];
 $1 = HEAP32[$0 + 9920 >> 2];
 HEAP32[$0 + 9916 >> 2] = HEAP32[$0 + 9924 >> 2];
 HEAP32[$0 + 9912 >> 2] = $1;
 $2 = HEAP32[$0 + 9916 >> 2];
 $1 = HEAP32[$0 + 9912 >> 2];
 HEAP32[$0 + 816 >> 2] = $1;
 HEAP32[$0 + 820 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Body__20_28b2Joint____29_28_29___invoke_b2Joint_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Body__20_28b2Joint____29_28_29_29($4, $0 + 816 | 0);
 HEAP32[$0 + 2844 >> 2] = 1;
 HEAP32[$0 + 2840 >> 2] = 0;
 $1 = HEAP32[$0 + 2844 >> 2];
 $2 = HEAP32[$0 + 2840 >> 2];
 HEAP32[$0 + 1e4 >> 2] = $2;
 HEAP32[$0 + 10004 >> 2] = $1;
 $1 = HEAP32[$0 + 1e4 >> 2];
 $2 = HEAP32[$0 + 10004 >> 2];
 HEAP32[$0 + 10028 >> 2] = $3;
 HEAP32[$0 + 10024 >> 2] = 10951;
 HEAP32[$0 + 10020 >> 2] = $2;
 HEAP32[$0 + 10016 >> 2] = $1;
 $3 = HEAP32[$0 + 10028 >> 2];
 $4 = HEAP32[$0 + 10024 >> 2];
 $1 = HEAP32[$0 + 10016 >> 2];
 HEAP32[$0 + 10012 >> 2] = HEAP32[$0 + 10020 >> 2];
 HEAP32[$0 + 10008 >> 2] = $1;
 $2 = HEAP32[$0 + 10012 >> 2];
 $1 = HEAP32[$0 + 10008 >> 2];
 HEAP32[$0 + 808 >> 2] = $1;
 HEAP32[$0 + 812 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2Joint____29_28_29_20const___invoke_b2Joint_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Vec2_20_28b2Joint____29_28_29_20const_29($4, $0 + 808 | 0);
 HEAP32[$0 + 2832 >> 2] = 1;
 HEAP32[$0 + 2828 >> 2] = 4;
 $1 = HEAP32[$0 + 2832 >> 2];
 $2 = HEAP32[$0 + 2828 >> 2];
 HEAP32[$0 + 9968 >> 2] = $2;
 HEAP32[$0 + 9972 >> 2] = $1;
 $1 = HEAP32[$0 + 9968 >> 2];
 $2 = HEAP32[$0 + 9972 >> 2];
 HEAP32[$0 + 9996 >> 2] = $3;
 HEAP32[$0 + 9992 >> 2] = 10808;
 HEAP32[$0 + 9988 >> 2] = $2;
 HEAP32[$0 + 9984 >> 2] = $1;
 $3 = HEAP32[$0 + 9996 >> 2];
 $4 = HEAP32[$0 + 9992 >> 2];
 $1 = HEAP32[$0 + 9984 >> 2];
 HEAP32[$0 + 9980 >> 2] = HEAP32[$0 + 9988 >> 2];
 HEAP32[$0 + 9976 >> 2] = $1;
 $2 = HEAP32[$0 + 9980 >> 2];
 $1 = HEAP32[$0 + 9976 >> 2];
 HEAP32[$0 + 800 >> 2] = $1;
 HEAP32[$0 + 804 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2Joint____29_28_29_20const___invoke_b2Joint_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Vec2_20_28b2Joint____29_28_29_20const_29($4, $0 + 800 | 0);
 HEAP32[$0 + 2824 >> 2] = 1;
 HEAP32[$0 + 2820 >> 2] = 8;
 $1 = HEAP32[$0 + 2824 >> 2];
 $2 = HEAP32[$0 + 2820 >> 2];
 HEAP32[$0 + 10032 >> 2] = $2;
 HEAP32[$0 + 10036 >> 2] = $1;
 $1 = HEAP32[$0 + 10032 >> 2];
 $2 = HEAP32[$0 + 10036 >> 2];
 HEAP32[$0 + 10060 >> 2] = $3;
 HEAP32[$0 + 10056 >> 2] = 9766;
 HEAP32[$0 + 10052 >> 2] = $2;
 HEAP32[$0 + 10048 >> 2] = $1;
 $3 = HEAP32[$0 + 10060 >> 2];
 $4 = HEAP32[$0 + 10056 >> 2];
 $1 = HEAP32[$0 + 10048 >> 2];
 HEAP32[$0 + 10044 >> 2] = HEAP32[$0 + 10052 >> 2];
 HEAP32[$0 + 10040 >> 2] = $1;
 $2 = HEAP32[$0 + 10044 >> 2];
 $1 = HEAP32[$0 + 10040 >> 2];
 HEAP32[$0 + 792 >> 2] = $1;
 HEAP32[$0 + 796 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2Joint____29_28float_29_20const___invoke_b2Joint__28char_20const__2c_20b2Vec2_20_28b2Joint____29_28float_29_20const_29($4, $0 + 792 | 0);
 HEAP32[$0 + 2816 >> 2] = 1;
 HEAP32[$0 + 2812 >> 2] = 12;
 $1 = HEAP32[$0 + 2816 >> 2];
 $2 = HEAP32[$0 + 2812 >> 2];
 HEAP32[$0 + 10064 >> 2] = $2;
 HEAP32[$0 + 10068 >> 2] = $1;
 $1 = HEAP32[$0 + 10064 >> 2];
 $2 = HEAP32[$0 + 10068 >> 2];
 HEAP32[$0 + 10092 >> 2] = $3;
 HEAP32[$0 + 10088 >> 2] = 8685;
 HEAP32[$0 + 10084 >> 2] = $2;
 HEAP32[$0 + 10080 >> 2] = $1;
 $3 = HEAP32[$0 + 10092 >> 2];
 $4 = HEAP32[$0 + 10088 >> 2];
 $1 = HEAP32[$0 + 10080 >> 2];
 HEAP32[$0 + 10076 >> 2] = HEAP32[$0 + 10084 >> 2];
 HEAP32[$0 + 10072 >> 2] = $1;
 $2 = HEAP32[$0 + 10076 >> 2];
 $1 = HEAP32[$0 + 10072 >> 2];
 HEAP32[$0 + 784 >> 2] = $1;
 HEAP32[$0 + 788 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2Joint____29_28float_29_20const___invoke_b2Joint__28char_20const__2c_20float_20_28b2Joint____29_28float_29_20const_29($4, $0 + 784 | 0);
 HEAP32[$0 + 2808 >> 2] = 0;
 HEAP32[$0 + 2804 >> 2] = 234;
 $1 = HEAP32[$0 + 2808 >> 2];
 $2 = HEAP32[$0 + 2804 >> 2];
 HEAP32[$0 + 10096 >> 2] = $2;
 HEAP32[$0 + 10100 >> 2] = $1;
 $1 = HEAP32[$0 + 10096 >> 2];
 $2 = HEAP32[$0 + 10100 >> 2];
 HEAP32[$0 + 10124 >> 2] = $3;
 HEAP32[$0 + 10120 >> 2] = 10019;
 HEAP32[$0 + 10116 >> 2] = $2;
 HEAP32[$0 + 10112 >> 2] = $1;
 $3 = HEAP32[$0 + 10124 >> 2];
 $4 = HEAP32[$0 + 10120 >> 2];
 $1 = HEAP32[$0 + 10112 >> 2];
 HEAP32[$0 + 10108 >> 2] = HEAP32[$0 + 10116 >> 2];
 HEAP32[$0 + 10104 >> 2] = $1;
 $2 = HEAP32[$0 + 10108 >> 2];
 $1 = HEAP32[$0 + 10104 >> 2];
 HEAP32[$0 + 776 >> 2] = $1;
 HEAP32[$0 + 780 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Joint____29_28_29_20const___invoke_b2Joint__28char_20const__2c_20bool_20_28b2Joint____29_28_29_20const_29($4, $0 + 776 | 0);
 HEAP32[$0 + 2800 >> 2] = 1;
 HEAP32[$0 + 2796 >> 2] = 16;
 $1 = HEAP32[$0 + 2800 >> 2];
 $2 = HEAP32[$0 + 2796 >> 2];
 HEAP32[$0 + 10128 >> 2] = $2;
 HEAP32[$0 + 10132 >> 2] = $1;
 $1 = HEAP32[$0 + 10128 >> 2];
 $2 = HEAP32[$0 + 10132 >> 2];
 HEAP32[$0 + 10156 >> 2] = $3;
 HEAP32[$0 + 10152 >> 2] = 6119;
 HEAP32[$0 + 10148 >> 2] = $2;
 HEAP32[$0 + 10144 >> 2] = $1;
 $3 = HEAP32[$0 + 10152 >> 2];
 $1 = HEAP32[$0 + 10144 >> 2];
 HEAP32[$0 + 10140 >> 2] = HEAP32[$0 + 10148 >> 2];
 HEAP32[$0 + 10136 >> 2] = $1;
 $2 = HEAP32[$0 + 10140 >> 2];
 $1 = HEAP32[$0 + 10136 >> 2];
 HEAP32[$0 + 768 >> 2] = $1;
 HEAP32[$0 + 772 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2Joint____29_28_29___invoke_b2Joint__28char_20const__2c_20void_20_28b2Joint____29_28_29_29($3, $0 + 768 | 0);
 HEAP32[$0 + 10180 >> 2] = $0 + 2795;
 HEAP32[$0 + 10176 >> 2] = 7787;
 void_20emscripten__base_b2JointDef___verify_b2DistanceJointDef__28_29();
 HEAP32[$0 + 10172 >> 2] = 235;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2JointDef__20_28_emscripten__base_b2JointDef___getUpcaster_b2DistanceJointDef__28_29_29_28b2DistanceJointDef__29(), 
 HEAP32[wasm2js_i32$0 + 10168 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2DistanceJointDef__20_28_emscripten__base_b2JointDef___getDowncaster_b2DistanceJointDef__28_29_29_28b2JointDef__29(), 
 HEAP32[wasm2js_i32$0 + 10164 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 10160 >> 2] = 236;
 $1 = emscripten__internal__TypeID_b2DistanceJointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2DistanceJointDef__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2DistanceJointDef_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2JointDef___get_28_29();
 HEAP32[$0 + 15576 >> 2] = HEAP32[$0 + 10172 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 10172 >> 2];
 HEAP32[$0 + 15580 >> 2] = HEAP32[$0 + 10168 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 10168 >> 2];
 HEAP32[$0 + 15584 >> 2] = HEAP32[$0 + 10164 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 10164 >> 2];
 $11 = HEAP32[$0 + 10176 >> 2];
 HEAP32[$0 + 15588 >> 2] = HEAP32[$0 + 10160 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 10160 >> 2]);
 HEAP32[$0 + 10184 >> 2] = $0 + 2795;
 HEAP32[$0 + 15596 >> 2] = HEAP32[$0 + 10184 >> 2];
 HEAP32[$0 + 15592 >> 2] = 237;
 $1 = HEAP32[$0 + 15596 >> 2];
 void_20emscripten__internal__RegisterClassConstructor_b2DistanceJointDef__20_28__29_28_29___invoke_b2DistanceJointDef__28b2DistanceJointDef__20_28__29_28_29_29(HEAP32[$0 + 15592 >> 2]);
 HEAP32[$0 + 10224 >> 2] = $1;
 HEAP32[$0 + 10220 >> 2] = 10962;
 HEAP32[$0 + 10216 >> 2] = 20;
 $1 = HEAP32[$0 + 10224 >> 2];
 HEAP32[$0 + 10212 >> 2] = 238;
 HEAP32[$0 + 10208 >> 2] = 239;
 $2 = emscripten__internal__TypeID_b2DistanceJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 10220 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15600 >> 2] = HEAP32[$0 + 10212 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 10212 >> 2];
 $7 = b2Vec2_20b2DistanceJointDef_____20emscripten__internal__getContext_b2Vec2_20b2DistanceJointDef_____28b2Vec2_20b2DistanceJointDef____20const__29($0 + 10216 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15608 >> 2] = HEAP32[$0 + 10208 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 10208 >> 2], b2Vec2_20b2DistanceJointDef_____20emscripten__internal__getContext_b2Vec2_20b2DistanceJointDef_____28b2Vec2_20b2DistanceJointDef____20const__29($0 + 10216 | 0) | 0);
 HEAP32[$0 + 10204 >> 2] = $1;
 HEAP32[$0 + 10200 >> 2] = 10819;
 HEAP32[$0 + 10196 >> 2] = 28;
 $1 = HEAP32[$0 + 10204 >> 2];
 HEAP32[$0 + 10192 >> 2] = 238;
 HEAP32[$0 + 10188 >> 2] = 239;
 $2 = emscripten__internal__TypeID_b2DistanceJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 10200 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15604 >> 2] = HEAP32[$0 + 10192 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 10192 >> 2];
 $7 = b2Vec2_20b2DistanceJointDef_____20emscripten__internal__getContext_b2Vec2_20b2DistanceJointDef_____28b2Vec2_20b2DistanceJointDef____20const__29($0 + 10196 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15612 >> 2] = HEAP32[$0 + 10188 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 10188 >> 2], b2Vec2_20b2DistanceJointDef_____20emscripten__internal__getContext_b2Vec2_20b2DistanceJointDef_____28b2Vec2_20b2DistanceJointDef____20const__29($0 + 10196 | 0) | 0);
 HEAP32[$0 + 10284 >> 2] = $1;
 HEAP32[$0 + 10280 >> 2] = 6905;
 HEAP32[$0 + 10276 >> 2] = 36;
 $1 = HEAP32[$0 + 10284 >> 2];
 HEAP32[$0 + 10272 >> 2] = 240;
 HEAP32[$0 + 10268 >> 2] = 241;
 $2 = emscripten__internal__TypeID_b2DistanceJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 10280 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15616 >> 2] = HEAP32[$0 + 10272 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 10272 >> 2];
 $7 = float_20b2DistanceJointDef_____20emscripten__internal__getContext_float_20b2DistanceJointDef_____28float_20b2DistanceJointDef____20const__29($0 + 10276 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15628 >> 2] = HEAP32[$0 + 10268 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 10268 >> 2], float_20b2DistanceJointDef_____20emscripten__internal__getContext_float_20b2DistanceJointDef_____28float_20b2DistanceJointDef____20const__29($0 + 10276 | 0) | 0);
 HEAP32[$0 + 10264 >> 2] = $1;
 HEAP32[$0 + 10260 >> 2] = 1024;
 HEAP32[$0 + 10256 >> 2] = 40;
 $1 = HEAP32[$0 + 10264 >> 2];
 HEAP32[$0 + 10252 >> 2] = 240;
 HEAP32[$0 + 10248 >> 2] = 241;
 $2 = emscripten__internal__TypeID_b2DistanceJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 10260 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15620 >> 2] = HEAP32[$0 + 10252 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 10252 >> 2];
 $7 = float_20b2DistanceJointDef_____20emscripten__internal__getContext_float_20b2DistanceJointDef_____28float_20b2DistanceJointDef____20const__29($0 + 10256 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15632 >> 2] = HEAP32[$0 + 10248 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 10248 >> 2], float_20b2DistanceJointDef_____20emscripten__internal__getContext_float_20b2DistanceJointDef_____28float_20b2DistanceJointDef____20const__29($0 + 10256 | 0) | 0);
 HEAP32[$0 + 10244 >> 2] = $1;
 HEAP32[$0 + 10240 >> 2] = 6165;
 HEAP32[$0 + 10236 >> 2] = 44;
 HEAP32[$0 + 10232 >> 2] = 240;
 HEAP32[$0 + 10228 >> 2] = 241;
 $1 = emscripten__internal__TypeID_b2DistanceJointDef_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 10240 >> 2];
 $3 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15624 >> 2] = HEAP32[$0 + 10232 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $5 = HEAP32[$0 + 10232 >> 2];
 $6 = float_20b2DistanceJointDef_____20emscripten__internal__getContext_float_20b2DistanceJointDef_____28float_20b2DistanceJointDef____20const__29($0 + 10236 | 0);
 $7 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15636 >> 2] = HEAP32[$0 + 10228 >> 2];
 _embind_register_class_property($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 10228 >> 2], float_20b2DistanceJointDef_____20emscripten__internal__getContext_float_20b2DistanceJointDef_____28float_20b2DistanceJointDef____20const__29($0 + 10236 | 0) | 0);
 HEAP32[$0 + 10308 >> 2] = $0 + 2794;
 HEAP32[$0 + 10304 >> 2] = 2685;
 void_20emscripten__base_b2Joint___verify_b2DistanceJoint__28_29();
 HEAP32[$0 + 10300 >> 2] = 242;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Joint__20_28_emscripten__base_b2Joint___getUpcaster_b2DistanceJoint__28_29_29_28b2DistanceJoint__29(), 
 HEAP32[wasm2js_i32$0 + 10296 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2DistanceJoint__20_28_emscripten__base_b2Joint___getDowncaster_b2DistanceJoint__28_29_29_28b2Joint__29(), 
 HEAP32[wasm2js_i32$0 + 10292 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 10288 >> 2] = 243;
 $1 = emscripten__internal__TypeID_b2DistanceJoint_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2DistanceJoint__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2DistanceJoint_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2Joint___get_28_29();
 HEAP32[$0 + 15640 >> 2] = HEAP32[$0 + 10300 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 10300 >> 2];
 HEAP32[$0 + 15644 >> 2] = HEAP32[$0 + 10296 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 10296 >> 2];
 HEAP32[$0 + 15648 >> 2] = HEAP32[$0 + 10292 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 10292 >> 2];
 $11 = HEAP32[$0 + 10304 >> 2];
 HEAP32[$0 + 15652 >> 2] = HEAP32[$0 + 10288 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 10288 >> 2]);
 HEAP32[$0 + 2788 >> 2] = 0;
 HEAP32[$0 + 2784 >> 2] = 244;
 $1 = HEAP32[$0 + 2788 >> 2];
 $2 = HEAP32[$0 + 2784 >> 2];
 HEAP32[$0 + 10344 >> 2] = $2;
 HEAP32[$0 + 10348 >> 2] = $1;
 $1 = HEAP32[$0 + 10344 >> 2];
 $2 = HEAP32[$0 + 10348 >> 2];
 HEAP32[$0 + 10372 >> 2] = $0 + 2794;
 HEAP32[$0 + 10368 >> 2] = 10975;
 HEAP32[$0 + 10364 >> 2] = $2;
 HEAP32[$0 + 10360 >> 2] = $1;
 $3 = HEAP32[$0 + 10372 >> 2];
 $4 = HEAP32[$0 + 10368 >> 2];
 $1 = HEAP32[$0 + 10360 >> 2];
 HEAP32[$0 + 10356 >> 2] = HEAP32[$0 + 10364 >> 2];
 HEAP32[$0 + 10352 >> 2] = $1;
 $2 = HEAP32[$0 + 10356 >> 2];
 $1 = HEAP32[$0 + 10352 >> 2];
 HEAP32[$0 + 760 >> 2] = $1;
 HEAP32[$0 + 764 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2DistanceJoint____29_28_29_20const___invoke_b2DistanceJoint__28char_20const__2c_20b2Vec2_20const__20_28b2DistanceJoint____29_28_29_20const_29($4, $0 + 760 | 0);
 HEAP32[$0 + 2780 >> 2] = 0;
 HEAP32[$0 + 2776 >> 2] = 245;
 $1 = HEAP32[$0 + 2780 >> 2];
 $2 = HEAP32[$0 + 2776 >> 2];
 HEAP32[$0 + 10312 >> 2] = $2;
 HEAP32[$0 + 10316 >> 2] = $1;
 $1 = HEAP32[$0 + 10312 >> 2];
 $2 = HEAP32[$0 + 10316 >> 2];
 HEAP32[$0 + 10340 >> 2] = $3;
 HEAP32[$0 + 10336 >> 2] = 10832;
 HEAP32[$0 + 10332 >> 2] = $2;
 HEAP32[$0 + 10328 >> 2] = $1;
 $3 = HEAP32[$0 + 10340 >> 2];
 $4 = HEAP32[$0 + 10336 >> 2];
 $1 = HEAP32[$0 + 10328 >> 2];
 HEAP32[$0 + 10324 >> 2] = HEAP32[$0 + 10332 >> 2];
 HEAP32[$0 + 10320 >> 2] = $1;
 $2 = HEAP32[$0 + 10324 >> 2];
 $1 = HEAP32[$0 + 10320 >> 2];
 HEAP32[$0 + 752 >> 2] = $1;
 HEAP32[$0 + 756 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2DistanceJoint____29_28_29_20const___invoke_b2DistanceJoint__28char_20const__2c_20b2Vec2_20const__20_28b2DistanceJoint____29_28_29_20const_29($4, $0 + 752 | 0);
 HEAP32[$0 + 2772 >> 2] = 0;
 HEAP32[$0 + 2768 >> 2] = 246;
 $1 = HEAP32[$0 + 2772 >> 2];
 $2 = HEAP32[$0 + 2768 >> 2];
 HEAP32[$0 + 10440 >> 2] = $2;
 HEAP32[$0 + 10444 >> 2] = $1;
 $1 = HEAP32[$0 + 10440 >> 2];
 $2 = HEAP32[$0 + 10444 >> 2];
 HEAP32[$0 + 10468 >> 2] = $3;
 HEAP32[$0 + 10464 >> 2] = 6948;
 HEAP32[$0 + 10460 >> 2] = $2;
 HEAP32[$0 + 10456 >> 2] = $1;
 $3 = HEAP32[$0 + 10468 >> 2];
 $4 = HEAP32[$0 + 10464 >> 2];
 $1 = HEAP32[$0 + 10456 >> 2];
 HEAP32[$0 + 10452 >> 2] = HEAP32[$0 + 10460 >> 2];
 HEAP32[$0 + 10448 >> 2] = $1;
 $2 = HEAP32[$0 + 10452 >> 2];
 $1 = HEAP32[$0 + 10448 >> 2];
 HEAP32[$0 + 744 >> 2] = $1;
 HEAP32[$0 + 748 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2DistanceJoint____29_28float_29___invoke_b2DistanceJoint__28char_20const__2c_20void_20_28b2DistanceJoint____29_28float_29_29($4, $0 + 744 | 0);
 HEAP32[$0 + 2764 >> 2] = 0;
 HEAP32[$0 + 2760 >> 2] = 247;
 $1 = HEAP32[$0 + 2764 >> 2];
 $2 = HEAP32[$0 + 2760 >> 2];
 HEAP32[$0 + 10536 >> 2] = $2;
 HEAP32[$0 + 10540 >> 2] = $1;
 $1 = HEAP32[$0 + 10536 >> 2];
 $2 = HEAP32[$0 + 10540 >> 2];
 HEAP32[$0 + 10564 >> 2] = $3;
 HEAP32[$0 + 10560 >> 2] = 6958;
 HEAP32[$0 + 10556 >> 2] = $2;
 HEAP32[$0 + 10552 >> 2] = $1;
 $3 = HEAP32[$0 + 10564 >> 2];
 $4 = HEAP32[$0 + 10560 >> 2];
 $1 = HEAP32[$0 + 10552 >> 2];
 HEAP32[$0 + 10548 >> 2] = HEAP32[$0 + 10556 >> 2];
 HEAP32[$0 + 10544 >> 2] = $1;
 $2 = HEAP32[$0 + 10548 >> 2];
 $1 = HEAP32[$0 + 10544 >> 2];
 HEAP32[$0 + 736 >> 2] = $1;
 HEAP32[$0 + 740 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2DistanceJoint____29_28_29_20const___invoke_b2DistanceJoint__28char_20const__2c_20float_20_28b2DistanceJoint____29_28_29_20const_29($4, $0 + 736 | 0);
 HEAP32[$0 + 2756 >> 2] = 0;
 HEAP32[$0 + 2752 >> 2] = 248;
 $1 = HEAP32[$0 + 2756 >> 2];
 $2 = HEAP32[$0 + 2752 >> 2];
 HEAP32[$0 + 10408 >> 2] = $2;
 HEAP32[$0 + 10412 >> 2] = $1;
 $1 = HEAP32[$0 + 10408 >> 2];
 $2 = HEAP32[$0 + 10412 >> 2];
 HEAP32[$0 + 10436 >> 2] = $3;
 HEAP32[$0 + 10432 >> 2] = 1751;
 HEAP32[$0 + 10428 >> 2] = $2;
 HEAP32[$0 + 10424 >> 2] = $1;
 $3 = HEAP32[$0 + 10436 >> 2];
 $4 = HEAP32[$0 + 10432 >> 2];
 $1 = HEAP32[$0 + 10424 >> 2];
 HEAP32[$0 + 10420 >> 2] = HEAP32[$0 + 10428 >> 2];
 HEAP32[$0 + 10416 >> 2] = $1;
 $2 = HEAP32[$0 + 10420 >> 2];
 $1 = HEAP32[$0 + 10416 >> 2];
 HEAP32[$0 + 728 >> 2] = $1;
 HEAP32[$0 + 732 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2DistanceJoint____29_28float_29___invoke_b2DistanceJoint__28char_20const__2c_20void_20_28b2DistanceJoint____29_28float_29_29($4, $0 + 728 | 0);
 HEAP32[$0 + 2748 >> 2] = 0;
 HEAP32[$0 + 2744 >> 2] = 249;
 $1 = HEAP32[$0 + 2748 >> 2];
 $2 = HEAP32[$0 + 2744 >> 2];
 HEAP32[$0 + 10504 >> 2] = $2;
 HEAP32[$0 + 10508 >> 2] = $1;
 $1 = HEAP32[$0 + 10504 >> 2];
 $2 = HEAP32[$0 + 10508 >> 2];
 HEAP32[$0 + 10532 >> 2] = $3;
 HEAP32[$0 + 10528 >> 2] = 1764;
 HEAP32[$0 + 10524 >> 2] = $2;
 HEAP32[$0 + 10520 >> 2] = $1;
 $3 = HEAP32[$0 + 10532 >> 2];
 $4 = HEAP32[$0 + 10528 >> 2];
 $1 = HEAP32[$0 + 10520 >> 2];
 HEAP32[$0 + 10516 >> 2] = HEAP32[$0 + 10524 >> 2];
 HEAP32[$0 + 10512 >> 2] = $1;
 $2 = HEAP32[$0 + 10516 >> 2];
 $1 = HEAP32[$0 + 10512 >> 2];
 HEAP32[$0 + 720 >> 2] = $1;
 HEAP32[$0 + 724 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2DistanceJoint____29_28_29_20const___invoke_b2DistanceJoint__28char_20const__2c_20float_20_28b2DistanceJoint____29_28_29_20const_29($4, $0 + 720 | 0);
 HEAP32[$0 + 2740 >> 2] = 0;
 HEAP32[$0 + 2736 >> 2] = 250;
 $1 = HEAP32[$0 + 2740 >> 2];
 $2 = HEAP32[$0 + 2736 >> 2];
 HEAP32[$0 + 10376 >> 2] = $2;
 HEAP32[$0 + 10380 >> 2] = $1;
 $1 = HEAP32[$0 + 10376 >> 2];
 $2 = HEAP32[$0 + 10380 >> 2];
 HEAP32[$0 + 10404 >> 2] = $3;
 HEAP32[$0 + 10400 >> 2] = 6178;
 HEAP32[$0 + 10396 >> 2] = $2;
 HEAP32[$0 + 10392 >> 2] = $1;
 $3 = HEAP32[$0 + 10404 >> 2];
 $4 = HEAP32[$0 + 10400 >> 2];
 $1 = HEAP32[$0 + 10392 >> 2];
 HEAP32[$0 + 10388 >> 2] = HEAP32[$0 + 10396 >> 2];
 HEAP32[$0 + 10384 >> 2] = $1;
 $2 = HEAP32[$0 + 10388 >> 2];
 $1 = HEAP32[$0 + 10384 >> 2];
 HEAP32[$0 + 712 >> 2] = $1;
 HEAP32[$0 + 716 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2DistanceJoint____29_28float_29___invoke_b2DistanceJoint__28char_20const__2c_20void_20_28b2DistanceJoint____29_28float_29_29($4, $0 + 712 | 0);
 HEAP32[$0 + 2732 >> 2] = 0;
 HEAP32[$0 + 2728 >> 2] = 251;
 $1 = HEAP32[$0 + 2732 >> 2];
 $2 = HEAP32[$0 + 2728 >> 2];
 HEAP32[$0 + 10472 >> 2] = $2;
 HEAP32[$0 + 10476 >> 2] = $1;
 $1 = HEAP32[$0 + 10472 >> 2];
 $2 = HEAP32[$0 + 10476 >> 2];
 HEAP32[$0 + 10500 >> 2] = $3;
 HEAP32[$0 + 10496 >> 2] = 6194;
 HEAP32[$0 + 10492 >> 2] = $2;
 HEAP32[$0 + 10488 >> 2] = $1;
 $3 = HEAP32[$0 + 10500 >> 2];
 $4 = HEAP32[$0 + 10496 >> 2];
 $1 = HEAP32[$0 + 10488 >> 2];
 HEAP32[$0 + 10484 >> 2] = HEAP32[$0 + 10492 >> 2];
 HEAP32[$0 + 10480 >> 2] = $1;
 $2 = HEAP32[$0 + 10484 >> 2];
 $1 = HEAP32[$0 + 10480 >> 2];
 HEAP32[$0 + 704 >> 2] = $1;
 HEAP32[$0 + 708 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2DistanceJoint____29_28_29_20const___invoke_b2DistanceJoint__28char_20const__2c_20float_20_28b2DistanceJoint____29_28_29_20const_29($4, $0 + 704 | 0);
 HEAP32[$0 + 2724 >> 2] = 1;
 HEAP32[$0 + 2720 >> 2] = 16;
 $1 = HEAP32[$0 + 2724 >> 2];
 $2 = HEAP32[$0 + 2720 >> 2];
 HEAP32[$0 + 10568 >> 2] = $2;
 HEAP32[$0 + 10572 >> 2] = $1;
 $1 = HEAP32[$0 + 10568 >> 2];
 $2 = HEAP32[$0 + 10572 >> 2];
 HEAP32[$0 + 10596 >> 2] = $3;
 HEAP32[$0 + 10592 >> 2] = 6119;
 HEAP32[$0 + 10588 >> 2] = $2;
 HEAP32[$0 + 10584 >> 2] = $1;
 $3 = HEAP32[$0 + 10592 >> 2];
 $1 = HEAP32[$0 + 10584 >> 2];
 HEAP32[$0 + 10580 >> 2] = HEAP32[$0 + 10588 >> 2];
 HEAP32[$0 + 10576 >> 2] = $1;
 $2 = HEAP32[$0 + 10580 >> 2];
 $1 = HEAP32[$0 + 10576 >> 2];
 HEAP32[$0 + 696 >> 2] = $1;
 HEAP32[$0 + 700 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2DistanceJoint____29_28_29___invoke_b2DistanceJoint__28char_20const__2c_20void_20_28b2DistanceJoint____29_28_29_29($3, $0 + 696 | 0);
 HEAP32[$0 + 10620 >> 2] = $0 + 2719;
 HEAP32[$0 + 10616 >> 2] = 7715;
 void_20emscripten__base_b2JointDef___verify_b2MotorJointDef__28_29();
 HEAP32[$0 + 10612 >> 2] = 252;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2JointDef__20_28_emscripten__base_b2JointDef___getUpcaster_b2MotorJointDef__28_29_29_28b2MotorJointDef__29(), 
 HEAP32[wasm2js_i32$0 + 10608 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2MotorJointDef__20_28_emscripten__base_b2JointDef___getDowncaster_b2MotorJointDef__28_29_29_28b2JointDef__29(), 
 HEAP32[wasm2js_i32$0 + 10604 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 10600 >> 2] = 253;
 $1 = emscripten__internal__TypeID_b2MotorJointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2MotorJointDef__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2MotorJointDef_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2JointDef___get_28_29();
 HEAP32[$0 + 15656 >> 2] = HEAP32[$0 + 10612 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 10612 >> 2];
 HEAP32[$0 + 15660 >> 2] = HEAP32[$0 + 10608 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 10608 >> 2];
 HEAP32[$0 + 15664 >> 2] = HEAP32[$0 + 10604 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 10604 >> 2];
 $11 = HEAP32[$0 + 10616 >> 2];
 HEAP32[$0 + 15668 >> 2] = HEAP32[$0 + 10600 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 10600 >> 2]);
 HEAP32[$0 + 10624 >> 2] = $0 + 2719;
 HEAP32[$0 + 15676 >> 2] = HEAP32[$0 + 10624 >> 2];
 HEAP32[$0 + 15672 >> 2] = 254;
 $1 = HEAP32[$0 + 15676 >> 2];
 void_20emscripten__internal__RegisterClassConstructor_b2MotorJointDef__20_28__29_28_29___invoke_b2MotorJointDef__28b2MotorJointDef__20_28__29_28_29_29(HEAP32[$0 + 15672 >> 2]);
 HEAP32[$0 + 10644 >> 2] = $1;
 HEAP32[$0 + 10640 >> 2] = 2983;
 HEAP32[$0 + 10636 >> 2] = 20;
 $1 = HEAP32[$0 + 10644 >> 2];
 HEAP32[$0 + 10632 >> 2] = 255;
 HEAP32[$0 + 10628 >> 2] = 256;
 $2 = emscripten__internal__TypeID_b2MotorJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 10640 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15680 >> 2] = HEAP32[$0 + 10632 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 10632 >> 2];
 $7 = b2Vec2_20b2MotorJointDef_____20emscripten__internal__getContext_b2Vec2_20b2MotorJointDef_____28b2Vec2_20b2MotorJointDef____20const__29($0 + 10636 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15684 >> 2] = HEAP32[$0 + 10628 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 10628 >> 2], b2Vec2_20b2MotorJointDef_____20emscripten__internal__getContext_b2Vec2_20b2MotorJointDef_____28b2Vec2_20b2MotorJointDef____20const__29($0 + 10636 | 0) | 0);
 HEAP32[$0 + 10724 >> 2] = $1;
 HEAP32[$0 + 10720 >> 2] = 2935;
 HEAP32[$0 + 10716 >> 2] = 28;
 $1 = HEAP32[$0 + 10724 >> 2];
 HEAP32[$0 + 10712 >> 2] = 257;
 HEAP32[$0 + 10708 >> 2] = 258;
 $2 = emscripten__internal__TypeID_b2MotorJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 10720 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15688 >> 2] = HEAP32[$0 + 10712 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 10712 >> 2];
 $7 = float_20b2MotorJointDef_____20emscripten__internal__getContext_float_20b2MotorJointDef_____28float_20b2MotorJointDef____20const__29($0 + 10716 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15704 >> 2] = HEAP32[$0 + 10708 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 10708 >> 2], float_20b2MotorJointDef_____20emscripten__internal__getContext_float_20b2MotorJointDef_____28float_20b2MotorJointDef____20const__29($0 + 10716 | 0) | 0);
 HEAP32[$0 + 10704 >> 2] = $1;
 HEAP32[$0 + 10700 >> 2] = 9671;
 HEAP32[$0 + 10696 >> 2] = 32;
 $1 = HEAP32[$0 + 10704 >> 2];
 HEAP32[$0 + 10692 >> 2] = 257;
 HEAP32[$0 + 10688 >> 2] = 258;
 $2 = emscripten__internal__TypeID_b2MotorJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 10700 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15692 >> 2] = HEAP32[$0 + 10692 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 10692 >> 2];
 $7 = float_20b2MotorJointDef_____20emscripten__internal__getContext_float_20b2MotorJointDef_____28float_20b2MotorJointDef____20const__29($0 + 10696 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15708 >> 2] = HEAP32[$0 + 10688 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 10688 >> 2], float_20b2MotorJointDef_____20emscripten__internal__getContext_float_20b2MotorJointDef_____28float_20b2MotorJointDef____20const__29($0 + 10696 | 0) | 0);
 HEAP32[$0 + 10684 >> 2] = $1;
 HEAP32[$0 + 10680 >> 2] = 8583;
 HEAP32[$0 + 10676 >> 2] = 36;
 $1 = HEAP32[$0 + 10684 >> 2];
 HEAP32[$0 + 10672 >> 2] = 257;
 HEAP32[$0 + 10668 >> 2] = 258;
 $2 = emscripten__internal__TypeID_b2MotorJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 10680 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15696 >> 2] = HEAP32[$0 + 10672 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 10672 >> 2];
 $7 = float_20b2MotorJointDef_____20emscripten__internal__getContext_float_20b2MotorJointDef_____28float_20b2MotorJointDef____20const__29($0 + 10676 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15712 >> 2] = HEAP32[$0 + 10668 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 10668 >> 2], float_20b2MotorJointDef_____20emscripten__internal__getContext_float_20b2MotorJointDef_____28float_20b2MotorJointDef____20const__29($0 + 10676 | 0) | 0);
 HEAP32[$0 + 10664 >> 2] = $1;
 HEAP32[$0 + 10660 >> 2] = 3727;
 HEAP32[$0 + 10656 >> 2] = 40;
 HEAP32[$0 + 10652 >> 2] = 257;
 HEAP32[$0 + 10648 >> 2] = 258;
 $1 = emscripten__internal__TypeID_b2MotorJointDef_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 10660 >> 2];
 $3 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15700 >> 2] = HEAP32[$0 + 10652 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $5 = HEAP32[$0 + 10652 >> 2];
 $6 = float_20b2MotorJointDef_____20emscripten__internal__getContext_float_20b2MotorJointDef_____28float_20b2MotorJointDef____20const__29($0 + 10656 | 0);
 $7 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15716 >> 2] = HEAP32[$0 + 10648 >> 2];
 _embind_register_class_property($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 10648 >> 2], float_20b2MotorJointDef_____20emscripten__internal__getContext_float_20b2MotorJointDef_____28float_20b2MotorJointDef____20const__29($0 + 10656 | 0) | 0);
 HEAP32[$0 + 10748 >> 2] = $0 + 2718;
 HEAP32[$0 + 10744 >> 2] = 2602;
 void_20emscripten__base_b2Joint___verify_b2MotorJoint__28_29();
 HEAP32[$0 + 10740 >> 2] = 259;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Joint__20_28_emscripten__base_b2Joint___getUpcaster_b2MotorJoint__28_29_29_28b2MotorJoint__29(), 
 HEAP32[wasm2js_i32$0 + 10736 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2MotorJoint__20_28_emscripten__base_b2Joint___getDowncaster_b2MotorJoint__28_29_29_28b2Joint__29(), 
 HEAP32[wasm2js_i32$0 + 10732 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 10728 >> 2] = 260;
 $1 = emscripten__internal__TypeID_b2MotorJoint_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2MotorJoint__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2MotorJoint_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2Joint___get_28_29();
 HEAP32[$0 + 15720 >> 2] = HEAP32[$0 + 10740 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 10740 >> 2];
 HEAP32[$0 + 15724 >> 2] = HEAP32[$0 + 10736 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 10736 >> 2];
 HEAP32[$0 + 15728 >> 2] = HEAP32[$0 + 10732 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 10732 >> 2];
 $11 = HEAP32[$0 + 10744 >> 2];
 HEAP32[$0 + 15732 >> 2] = HEAP32[$0 + 10728 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 10728 >> 2]);
 HEAP32[$0 + 2712 >> 2] = 0;
 HEAP32[$0 + 2708 >> 2] = 261;
 $1 = HEAP32[$0 + 2712 >> 2];
 $2 = HEAP32[$0 + 2708 >> 2];
 HEAP32[$0 + 10752 >> 2] = $2;
 HEAP32[$0 + 10756 >> 2] = $1;
 $1 = HEAP32[$0 + 10752 >> 2];
 $2 = HEAP32[$0 + 10756 >> 2];
 HEAP32[$0 + 10780 >> 2] = $0 + 2718;
 HEAP32[$0 + 10776 >> 2] = 2996;
 HEAP32[$0 + 10772 >> 2] = $2;
 HEAP32[$0 + 10768 >> 2] = $1;
 $3 = HEAP32[$0 + 10780 >> 2];
 $4 = HEAP32[$0 + 10776 >> 2];
 $1 = HEAP32[$0 + 10768 >> 2];
 HEAP32[$0 + 10764 >> 2] = HEAP32[$0 + 10772 >> 2];
 HEAP32[$0 + 10760 >> 2] = $1;
 $2 = HEAP32[$0 + 10764 >> 2];
 $1 = HEAP32[$0 + 10760 >> 2];
 HEAP32[$0 + 688 >> 2] = $1;
 HEAP32[$0 + 692 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2MotorJoint____29_28b2Vec2_20const__29___invoke_b2MotorJoint__28char_20const__2c_20void_20_28b2MotorJoint____29_28b2Vec2_20const__29_29($4, $0 + 688 | 0);
 HEAP32[$0 + 2704 >> 2] = 0;
 HEAP32[$0 + 2700 >> 2] = 262;
 $1 = HEAP32[$0 + 2704 >> 2];
 $2 = HEAP32[$0 + 2700 >> 2];
 HEAP32[$0 + 10784 >> 2] = $2;
 HEAP32[$0 + 10788 >> 2] = $1;
 $1 = HEAP32[$0 + 10784 >> 2];
 $2 = HEAP32[$0 + 10788 >> 2];
 HEAP32[$0 + 10812 >> 2] = $3;
 HEAP32[$0 + 10808 >> 2] = 3012;
 HEAP32[$0 + 10804 >> 2] = $2;
 HEAP32[$0 + 10800 >> 2] = $1;
 $3 = HEAP32[$0 + 10812 >> 2];
 $4 = HEAP32[$0 + 10808 >> 2];
 $1 = HEAP32[$0 + 10800 >> 2];
 HEAP32[$0 + 10796 >> 2] = HEAP32[$0 + 10804 >> 2];
 HEAP32[$0 + 10792 >> 2] = $1;
 $2 = HEAP32[$0 + 10796 >> 2];
 $1 = HEAP32[$0 + 10792 >> 2];
 HEAP32[$0 + 680 >> 2] = $1;
 HEAP32[$0 + 684 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2MotorJoint____29_28_29_20const___invoke_b2MotorJoint__28char_20const__2c_20b2Vec2_20const__20_28b2MotorJoint____29_28_29_20const_29($4, $0 + 680 | 0);
 HEAP32[$0 + 2696 >> 2] = 0;
 HEAP32[$0 + 2692 >> 2] = 263;
 $1 = HEAP32[$0 + 2696 >> 2];
 $2 = HEAP32[$0 + 2692 >> 2];
 HEAP32[$0 + 10912 >> 2] = $2;
 HEAP32[$0 + 10916 >> 2] = $1;
 $1 = HEAP32[$0 + 10912 >> 2];
 $2 = HEAP32[$0 + 10916 >> 2];
 HEAP32[$0 + 10940 >> 2] = $3;
 HEAP32[$0 + 10936 >> 2] = 2949;
 HEAP32[$0 + 10932 >> 2] = $2;
 HEAP32[$0 + 10928 >> 2] = $1;
 $3 = HEAP32[$0 + 10940 >> 2];
 $4 = HEAP32[$0 + 10936 >> 2];
 $1 = HEAP32[$0 + 10928 >> 2];
 HEAP32[$0 + 10924 >> 2] = HEAP32[$0 + 10932 >> 2];
 HEAP32[$0 + 10920 >> 2] = $1;
 $2 = HEAP32[$0 + 10924 >> 2];
 $1 = HEAP32[$0 + 10920 >> 2];
 HEAP32[$0 + 672 >> 2] = $1;
 HEAP32[$0 + 676 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2MotorJoint____29_28float_29___invoke_b2MotorJoint__28char_20const__2c_20void_20_28b2MotorJoint____29_28float_29_29($4, $0 + 672 | 0);
 HEAP32[$0 + 2688 >> 2] = 0;
 HEAP32[$0 + 2684 >> 2] = 264;
 $1 = HEAP32[$0 + 2688 >> 2];
 $2 = HEAP32[$0 + 2684 >> 2];
 HEAP32[$0 + 11040 >> 2] = $2;
 HEAP32[$0 + 11044 >> 2] = $1;
 $1 = HEAP32[$0 + 11040 >> 2];
 $2 = HEAP32[$0 + 11044 >> 2];
 HEAP32[$0 + 11068 >> 2] = $3;
 HEAP32[$0 + 11064 >> 2] = 2966;
 HEAP32[$0 + 11060 >> 2] = $2;
 HEAP32[$0 + 11056 >> 2] = $1;
 $3 = HEAP32[$0 + 11068 >> 2];
 $4 = HEAP32[$0 + 11064 >> 2];
 $1 = HEAP32[$0 + 11056 >> 2];
 HEAP32[$0 + 11052 >> 2] = HEAP32[$0 + 11060 >> 2];
 HEAP32[$0 + 11048 >> 2] = $1;
 $2 = HEAP32[$0 + 11052 >> 2];
 $1 = HEAP32[$0 + 11048 >> 2];
 HEAP32[$0 + 664 >> 2] = $1;
 HEAP32[$0 + 668 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2MotorJoint____29_28_29_20const___invoke_b2MotorJoint__28char_20const__2c_20float_20_28b2MotorJoint____29_28_29_20const_29($4, $0 + 664 | 0);
 HEAP32[$0 + 2680 >> 2] = 0;
 HEAP32[$0 + 2676 >> 2] = 265;
 $1 = HEAP32[$0 + 2680 >> 2];
 $2 = HEAP32[$0 + 2676 >> 2];
 HEAP32[$0 + 10880 >> 2] = $2;
 HEAP32[$0 + 10884 >> 2] = $1;
 $1 = HEAP32[$0 + 10880 >> 2];
 $2 = HEAP32[$0 + 10884 >> 2];
 HEAP32[$0 + 10908 >> 2] = $3;
 HEAP32[$0 + 10904 >> 2] = 9680;
 HEAP32[$0 + 10900 >> 2] = $2;
 HEAP32[$0 + 10896 >> 2] = $1;
 $3 = HEAP32[$0 + 10908 >> 2];
 $4 = HEAP32[$0 + 10904 >> 2];
 $1 = HEAP32[$0 + 10896 >> 2];
 HEAP32[$0 + 10892 >> 2] = HEAP32[$0 + 10900 >> 2];
 HEAP32[$0 + 10888 >> 2] = $1;
 $2 = HEAP32[$0 + 10892 >> 2];
 $1 = HEAP32[$0 + 10888 >> 2];
 HEAP32[$0 + 656 >> 2] = $1;
 HEAP32[$0 + 660 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2MotorJoint____29_28float_29___invoke_b2MotorJoint__28char_20const__2c_20void_20_28b2MotorJoint____29_28float_29_29($4, $0 + 656 | 0);
 HEAP32[$0 + 2672 >> 2] = 0;
 HEAP32[$0 + 2668 >> 2] = 266;
 $1 = HEAP32[$0 + 2672 >> 2];
 $2 = HEAP32[$0 + 2668 >> 2];
 HEAP32[$0 + 11008 >> 2] = $2;
 HEAP32[$0 + 11012 >> 2] = $1;
 $1 = HEAP32[$0 + 11008 >> 2];
 $2 = HEAP32[$0 + 11012 >> 2];
 HEAP32[$0 + 11036 >> 2] = $3;
 HEAP32[$0 + 11032 >> 2] = 9692;
 HEAP32[$0 + 11028 >> 2] = $2;
 HEAP32[$0 + 11024 >> 2] = $1;
 $3 = HEAP32[$0 + 11036 >> 2];
 $4 = HEAP32[$0 + 11032 >> 2];
 $1 = HEAP32[$0 + 11024 >> 2];
 HEAP32[$0 + 11020 >> 2] = HEAP32[$0 + 11028 >> 2];
 HEAP32[$0 + 11016 >> 2] = $1;
 $2 = HEAP32[$0 + 11020 >> 2];
 $1 = HEAP32[$0 + 11016 >> 2];
 HEAP32[$0 + 648 >> 2] = $1;
 HEAP32[$0 + 652 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2MotorJoint____29_28_29_20const___invoke_b2MotorJoint__28char_20const__2c_20float_20_28b2MotorJoint____29_28_29_20const_29($4, $0 + 648 | 0);
 HEAP32[$0 + 2664 >> 2] = 0;
 HEAP32[$0 + 2660 >> 2] = 267;
 $1 = HEAP32[$0 + 2664 >> 2];
 $2 = HEAP32[$0 + 2660 >> 2];
 HEAP32[$0 + 10848 >> 2] = $2;
 HEAP32[$0 + 10852 >> 2] = $1;
 $1 = HEAP32[$0 + 10848 >> 2];
 $2 = HEAP32[$0 + 10852 >> 2];
 HEAP32[$0 + 10876 >> 2] = $3;
 HEAP32[$0 + 10872 >> 2] = 8593;
 HEAP32[$0 + 10868 >> 2] = $2;
 HEAP32[$0 + 10864 >> 2] = $1;
 $3 = HEAP32[$0 + 10876 >> 2];
 $4 = HEAP32[$0 + 10872 >> 2];
 $1 = HEAP32[$0 + 10864 >> 2];
 HEAP32[$0 + 10860 >> 2] = HEAP32[$0 + 10868 >> 2];
 HEAP32[$0 + 10856 >> 2] = $1;
 $2 = HEAP32[$0 + 10860 >> 2];
 $1 = HEAP32[$0 + 10856 >> 2];
 HEAP32[$0 + 640 >> 2] = $1;
 HEAP32[$0 + 644 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2MotorJoint____29_28float_29___invoke_b2MotorJoint__28char_20const__2c_20void_20_28b2MotorJoint____29_28float_29_29($4, $0 + 640 | 0);
 HEAP32[$0 + 2656 >> 2] = 0;
 HEAP32[$0 + 2652 >> 2] = 268;
 $1 = HEAP32[$0 + 2656 >> 2];
 $2 = HEAP32[$0 + 2652 >> 2];
 HEAP32[$0 + 10976 >> 2] = $2;
 HEAP32[$0 + 10980 >> 2] = $1;
 $1 = HEAP32[$0 + 10976 >> 2];
 $2 = HEAP32[$0 + 10980 >> 2];
 HEAP32[$0 + 11004 >> 2] = $3;
 HEAP32[$0 + 11e3 >> 2] = 8606;
 HEAP32[$0 + 10996 >> 2] = $2;
 HEAP32[$0 + 10992 >> 2] = $1;
 $3 = HEAP32[$0 + 11004 >> 2];
 $4 = HEAP32[$0 + 11e3 >> 2];
 $1 = HEAP32[$0 + 10992 >> 2];
 HEAP32[$0 + 10988 >> 2] = HEAP32[$0 + 10996 >> 2];
 HEAP32[$0 + 10984 >> 2] = $1;
 $2 = HEAP32[$0 + 10988 >> 2];
 $1 = HEAP32[$0 + 10984 >> 2];
 HEAP32[$0 + 632 >> 2] = $1;
 HEAP32[$0 + 636 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2MotorJoint____29_28_29_20const___invoke_b2MotorJoint__28char_20const__2c_20float_20_28b2MotorJoint____29_28_29_20const_29($4, $0 + 632 | 0);
 HEAP32[$0 + 2648 >> 2] = 0;
 HEAP32[$0 + 2644 >> 2] = 269;
 $1 = HEAP32[$0 + 2648 >> 2];
 $2 = HEAP32[$0 + 2644 >> 2];
 HEAP32[$0 + 10816 >> 2] = $2;
 HEAP32[$0 + 10820 >> 2] = $1;
 $1 = HEAP32[$0 + 10816 >> 2];
 $2 = HEAP32[$0 + 10820 >> 2];
 HEAP32[$0 + 10844 >> 2] = $3;
 HEAP32[$0 + 10840 >> 2] = 3744;
 HEAP32[$0 + 10836 >> 2] = $2;
 HEAP32[$0 + 10832 >> 2] = $1;
 $3 = HEAP32[$0 + 10844 >> 2];
 $4 = HEAP32[$0 + 10840 >> 2];
 $1 = HEAP32[$0 + 10832 >> 2];
 HEAP32[$0 + 10828 >> 2] = HEAP32[$0 + 10836 >> 2];
 HEAP32[$0 + 10824 >> 2] = $1;
 $2 = HEAP32[$0 + 10828 >> 2];
 $1 = HEAP32[$0 + 10824 >> 2];
 HEAP32[$0 + 624 >> 2] = $1;
 HEAP32[$0 + 628 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2MotorJoint____29_28float_29___invoke_b2MotorJoint__28char_20const__2c_20void_20_28b2MotorJoint____29_28float_29_29($4, $0 + 624 | 0);
 HEAP32[$0 + 2640 >> 2] = 0;
 HEAP32[$0 + 2636 >> 2] = 270;
 $1 = HEAP32[$0 + 2640 >> 2];
 $2 = HEAP32[$0 + 2636 >> 2];
 HEAP32[$0 + 10944 >> 2] = $2;
 HEAP32[$0 + 10948 >> 2] = $1;
 $1 = HEAP32[$0 + 10944 >> 2];
 $2 = HEAP32[$0 + 10948 >> 2];
 HEAP32[$0 + 10972 >> 2] = $3;
 HEAP32[$0 + 10968 >> 2] = 3764;
 HEAP32[$0 + 10964 >> 2] = $2;
 HEAP32[$0 + 10960 >> 2] = $1;
 $3 = HEAP32[$0 + 10972 >> 2];
 $4 = HEAP32[$0 + 10968 >> 2];
 $1 = HEAP32[$0 + 10960 >> 2];
 HEAP32[$0 + 10956 >> 2] = HEAP32[$0 + 10964 >> 2];
 HEAP32[$0 + 10952 >> 2] = $1;
 $2 = HEAP32[$0 + 10956 >> 2];
 $1 = HEAP32[$0 + 10952 >> 2];
 HEAP32[$0 + 616 >> 2] = $1;
 HEAP32[$0 + 620 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2MotorJoint____29_28_29_20const___invoke_b2MotorJoint__28char_20const__2c_20float_20_28b2MotorJoint____29_28_29_20const_29($4, $0 + 616 | 0);
 HEAP32[$0 + 2632 >> 2] = 1;
 HEAP32[$0 + 2628 >> 2] = 16;
 $1 = HEAP32[$0 + 2632 >> 2];
 $2 = HEAP32[$0 + 2628 >> 2];
 HEAP32[$0 + 11072 >> 2] = $2;
 HEAP32[$0 + 11076 >> 2] = $1;
 $1 = HEAP32[$0 + 11072 >> 2];
 $2 = HEAP32[$0 + 11076 >> 2];
 HEAP32[$0 + 11104 >> 2] = $3;
 HEAP32[$0 + 11100 >> 2] = 6119;
 HEAP32[$0 + 11096 >> 2] = $2;
 HEAP32[$0 + 11092 >> 2] = $1;
 $3 = HEAP32[$0 + 11100 >> 2];
 $1 = HEAP32[$0 + 11092 >> 2];
 HEAP32[$0 + 11088 >> 2] = HEAP32[$0 + 11096 >> 2];
 HEAP32[$0 + 11084 >> 2] = $1;
 $2 = HEAP32[$0 + 11088 >> 2];
 $1 = HEAP32[$0 + 11084 >> 2];
 HEAP32[$0 + 608 >> 2] = $1;
 HEAP32[$0 + 612 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2MotorJoint____29_28_29___invoke_b2MotorJoint__28char_20const__2c_20void_20_28b2MotorJoint____29_28_29_29($3, $0 + 608 | 0);
 HEAP32[$0 + 11128 >> 2] = $0 + 2627;
 HEAP32[$0 + 11124 >> 2] = 7760;
 void_20emscripten__base_b2JointDef___verify_b2MouseJointDef__28_29();
 HEAP32[$0 + 11120 >> 2] = 271;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2JointDef__20_28_emscripten__base_b2JointDef___getUpcaster_b2MouseJointDef__28_29_29_28b2MouseJointDef__29(), 
 HEAP32[wasm2js_i32$0 + 11116 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2MouseJointDef__20_28_emscripten__base_b2JointDef___getDowncaster_b2MouseJointDef__28_29_29_28b2JointDef__29(), 
 HEAP32[wasm2js_i32$0 + 11112 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 11108 >> 2] = 272;
 $1 = emscripten__internal__TypeID_b2MouseJointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2MouseJointDef__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2MouseJointDef_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2JointDef___get_28_29();
 HEAP32[$0 + 15736 >> 2] = HEAP32[$0 + 11120 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 11120 >> 2];
 HEAP32[$0 + 15740 >> 2] = HEAP32[$0 + 11116 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 11116 >> 2];
 HEAP32[$0 + 15744 >> 2] = HEAP32[$0 + 11112 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 11112 >> 2];
 $11 = HEAP32[$0 + 11124 >> 2];
 HEAP32[$0 + 15748 >> 2] = HEAP32[$0 + 11108 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 11108 >> 2]);
 HEAP32[$0 + 11132 >> 2] = $0 + 2627;
 HEAP32[$0 + 15756 >> 2] = HEAP32[$0 + 11132 >> 2];
 HEAP32[$0 + 15752 >> 2] = 273;
 $1 = HEAP32[$0 + 15756 >> 2];
 void_20emscripten__internal__RegisterClassConstructor_b2MouseJointDef__20_28__29_28_29___invoke_b2MouseJointDef__28b2MouseJointDef__20_28__29_28_29_29(HEAP32[$0 + 15752 >> 2]);
 HEAP32[$0 + 11152 >> 2] = $1;
 HEAP32[$0 + 11148 >> 2] = 3054;
 HEAP32[$0 + 11144 >> 2] = 20;
 $1 = HEAP32[$0 + 11152 >> 2];
 HEAP32[$0 + 11140 >> 2] = 274;
 HEAP32[$0 + 11136 >> 2] = 275;
 $2 = emscripten__internal__TypeID_b2MouseJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 11148 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15760 >> 2] = HEAP32[$0 + 11140 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 11140 >> 2];
 $7 = b2Vec2_20b2MouseJointDef_____20emscripten__internal__getContext_b2Vec2_20b2MouseJointDef_____28b2Vec2_20b2MouseJointDef____20const__29($0 + 11144 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15764 >> 2] = HEAP32[$0 + 11136 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 11136 >> 2], b2Vec2_20b2MouseJointDef_____20emscripten__internal__getContext_b2Vec2_20b2MouseJointDef_____28b2Vec2_20b2MouseJointDef____20const__29($0 + 11144 | 0) | 0);
 HEAP32[$0 + 11212 >> 2] = $1;
 HEAP32[$0 + 11208 >> 2] = 9671;
 HEAP32[$0 + 11204 >> 2] = 28;
 $1 = HEAP32[$0 + 11212 >> 2];
 HEAP32[$0 + 11200 >> 2] = 276;
 HEAP32[$0 + 11196 >> 2] = 277;
 $2 = emscripten__internal__TypeID_b2MouseJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 11208 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15768 >> 2] = HEAP32[$0 + 11200 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 11200 >> 2];
 $7 = float_20b2MouseJointDef_____20emscripten__internal__getContext_float_20b2MouseJointDef_____28float_20b2MouseJointDef____20const__29($0 + 11204 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15780 >> 2] = HEAP32[$0 + 11196 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 11196 >> 2], float_20b2MouseJointDef_____20emscripten__internal__getContext_float_20b2MouseJointDef_____28float_20b2MouseJointDef____20const__29($0 + 11204 | 0) | 0);
 HEAP32[$0 + 11192 >> 2] = $1;
 HEAP32[$0 + 11188 >> 2] = 1024;
 HEAP32[$0 + 11184 >> 2] = 32;
 $1 = HEAP32[$0 + 11192 >> 2];
 HEAP32[$0 + 11180 >> 2] = 276;
 HEAP32[$0 + 11176 >> 2] = 277;
 $2 = emscripten__internal__TypeID_b2MouseJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 11188 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15772 >> 2] = HEAP32[$0 + 11180 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 11180 >> 2];
 $7 = float_20b2MouseJointDef_____20emscripten__internal__getContext_float_20b2MouseJointDef_____28float_20b2MouseJointDef____20const__29($0 + 11184 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15784 >> 2] = HEAP32[$0 + 11176 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 11176 >> 2], float_20b2MouseJointDef_____20emscripten__internal__getContext_float_20b2MouseJointDef_____28float_20b2MouseJointDef____20const__29($0 + 11184 | 0) | 0);
 HEAP32[$0 + 11172 >> 2] = $1;
 HEAP32[$0 + 11168 >> 2] = 6165;
 HEAP32[$0 + 11164 >> 2] = 36;
 HEAP32[$0 + 11160 >> 2] = 276;
 HEAP32[$0 + 11156 >> 2] = 277;
 $1 = emscripten__internal__TypeID_b2MouseJointDef_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 11168 >> 2];
 $3 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15776 >> 2] = HEAP32[$0 + 11160 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $5 = HEAP32[$0 + 11160 >> 2];
 $6 = float_20b2MouseJointDef_____20emscripten__internal__getContext_float_20b2MouseJointDef_____28float_20b2MouseJointDef____20const__29($0 + 11164 | 0);
 $7 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15788 >> 2] = HEAP32[$0 + 11156 >> 2];
 _embind_register_class_property($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 11156 >> 2], float_20b2MouseJointDef_____20emscripten__internal__getContext_float_20b2MouseJointDef_____28float_20b2MouseJointDef____20const__29($0 + 11164 | 0) | 0);
 HEAP32[$0 + 11236 >> 2] = $0 + 2626;
 HEAP32[$0 + 11232 >> 2] = 2664;
 void_20emscripten__base_b2Joint___verify_b2MouseJoint__28_29();
 HEAP32[$0 + 11228 >> 2] = 278;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Joint__20_28_emscripten__base_b2Joint___getUpcaster_b2MouseJoint__28_29_29_28b2MouseJoint__29(), 
 HEAP32[wasm2js_i32$0 + 11224 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2MouseJoint__20_28_emscripten__base_b2Joint___getDowncaster_b2MouseJoint__28_29_29_28b2Joint__29(), 
 HEAP32[wasm2js_i32$0 + 11220 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 11216 >> 2] = 279;
 $1 = emscripten__internal__TypeID_b2MouseJoint_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2MouseJoint__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2MouseJoint_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2Joint___get_28_29();
 HEAP32[$0 + 15792 >> 2] = HEAP32[$0 + 11228 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 11228 >> 2];
 HEAP32[$0 + 15796 >> 2] = HEAP32[$0 + 11224 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 11224 >> 2];
 HEAP32[$0 + 15800 >> 2] = HEAP32[$0 + 11220 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 11220 >> 2];
 $11 = HEAP32[$0 + 11232 >> 2];
 HEAP32[$0 + 15804 >> 2] = HEAP32[$0 + 11216 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 11216 >> 2]);
 HEAP32[$0 + 2620 >> 2] = 0;
 HEAP32[$0 + 2616 >> 2] = 280;
 $1 = HEAP32[$0 + 2620 >> 2];
 $2 = HEAP32[$0 + 2616 >> 2];
 HEAP32[$0 + 11240 >> 2] = $2;
 HEAP32[$0 + 11244 >> 2] = $1;
 $1 = HEAP32[$0 + 11240 >> 2];
 $2 = HEAP32[$0 + 11244 >> 2];
 HEAP32[$0 + 11268 >> 2] = $0 + 2626;
 HEAP32[$0 + 11264 >> 2] = 3061;
 HEAP32[$0 + 11260 >> 2] = $2;
 HEAP32[$0 + 11256 >> 2] = $1;
 $3 = HEAP32[$0 + 11268 >> 2];
 $4 = HEAP32[$0 + 11264 >> 2];
 $1 = HEAP32[$0 + 11256 >> 2];
 HEAP32[$0 + 11252 >> 2] = HEAP32[$0 + 11260 >> 2];
 HEAP32[$0 + 11248 >> 2] = $1;
 $2 = HEAP32[$0 + 11252 >> 2];
 $1 = HEAP32[$0 + 11248 >> 2];
 HEAP32[$0 + 600 >> 2] = $1;
 HEAP32[$0 + 604 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2MouseJoint____29_28b2Vec2_20const__29___invoke_b2MouseJoint__28char_20const__2c_20void_20_28b2MouseJoint____29_28b2Vec2_20const__29_29($4, $0 + 600 | 0);
 HEAP32[$0 + 2612 >> 2] = 0;
 HEAP32[$0 + 2608 >> 2] = 281;
 $1 = HEAP32[$0 + 2612 >> 2];
 $2 = HEAP32[$0 + 2608 >> 2];
 HEAP32[$0 + 11272 >> 2] = $2;
 HEAP32[$0 + 11276 >> 2] = $1;
 $1 = HEAP32[$0 + 11272 >> 2];
 $2 = HEAP32[$0 + 11276 >> 2];
 HEAP32[$0 + 11300 >> 2] = $3;
 HEAP32[$0 + 11296 >> 2] = 3071;
 HEAP32[$0 + 11292 >> 2] = $2;
 HEAP32[$0 + 11288 >> 2] = $1;
 $3 = HEAP32[$0 + 11300 >> 2];
 $4 = HEAP32[$0 + 11296 >> 2];
 $1 = HEAP32[$0 + 11288 >> 2];
 HEAP32[$0 + 11284 >> 2] = HEAP32[$0 + 11292 >> 2];
 HEAP32[$0 + 11280 >> 2] = $1;
 $2 = HEAP32[$0 + 11284 >> 2];
 $1 = HEAP32[$0 + 11280 >> 2];
 HEAP32[$0 + 592 >> 2] = $1;
 HEAP32[$0 + 596 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2MouseJoint____29_28_29_20const___invoke_b2MouseJoint__28char_20const__2c_20b2Vec2_20const__20_28b2MouseJoint____29_28_29_20const_29($4, $0 + 592 | 0);
 HEAP32[$0 + 2604 >> 2] = 0;
 HEAP32[$0 + 2600 >> 2] = 282;
 $1 = HEAP32[$0 + 2604 >> 2];
 $2 = HEAP32[$0 + 2600 >> 2];
 HEAP32[$0 + 11368 >> 2] = $2;
 HEAP32[$0 + 11372 >> 2] = $1;
 $1 = HEAP32[$0 + 11368 >> 2];
 $2 = HEAP32[$0 + 11372 >> 2];
 HEAP32[$0 + 11396 >> 2] = $3;
 HEAP32[$0 + 11392 >> 2] = 9680;
 HEAP32[$0 + 11388 >> 2] = $2;
 HEAP32[$0 + 11384 >> 2] = $1;
 $3 = HEAP32[$0 + 11396 >> 2];
 $4 = HEAP32[$0 + 11392 >> 2];
 $1 = HEAP32[$0 + 11384 >> 2];
 HEAP32[$0 + 11380 >> 2] = HEAP32[$0 + 11388 >> 2];
 HEAP32[$0 + 11376 >> 2] = $1;
 $2 = HEAP32[$0 + 11380 >> 2];
 $1 = HEAP32[$0 + 11376 >> 2];
 HEAP32[$0 + 584 >> 2] = $1;
 HEAP32[$0 + 588 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2MouseJoint____29_28float_29___invoke_b2MouseJoint__28char_20const__2c_20void_20_28b2MouseJoint____29_28float_29_29($4, $0 + 584 | 0);
 HEAP32[$0 + 2596 >> 2] = 0;
 HEAP32[$0 + 2592 >> 2] = 283;
 $1 = HEAP32[$0 + 2596 >> 2];
 $2 = HEAP32[$0 + 2592 >> 2];
 HEAP32[$0 + 11464 >> 2] = $2;
 HEAP32[$0 + 11468 >> 2] = $1;
 $1 = HEAP32[$0 + 11464 >> 2];
 $2 = HEAP32[$0 + 11468 >> 2];
 HEAP32[$0 + 11492 >> 2] = $3;
 HEAP32[$0 + 11488 >> 2] = 9692;
 HEAP32[$0 + 11484 >> 2] = $2;
 HEAP32[$0 + 11480 >> 2] = $1;
 $3 = HEAP32[$0 + 11492 >> 2];
 $4 = HEAP32[$0 + 11488 >> 2];
 $1 = HEAP32[$0 + 11480 >> 2];
 HEAP32[$0 + 11476 >> 2] = HEAP32[$0 + 11484 >> 2];
 HEAP32[$0 + 11472 >> 2] = $1;
 $2 = HEAP32[$0 + 11476 >> 2];
 $1 = HEAP32[$0 + 11472 >> 2];
 HEAP32[$0 + 576 >> 2] = $1;
 HEAP32[$0 + 580 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2MouseJoint____29_28_29_20const___invoke_b2MouseJoint__28char_20const__2c_20float_20_28b2MouseJoint____29_28_29_20const_29($4, $0 + 576 | 0);
 HEAP32[$0 + 2588 >> 2] = 0;
 HEAP32[$0 + 2584 >> 2] = 284;
 $1 = HEAP32[$0 + 2588 >> 2];
 $2 = HEAP32[$0 + 2584 >> 2];
 HEAP32[$0 + 11336 >> 2] = $2;
 HEAP32[$0 + 11340 >> 2] = $1;
 $1 = HEAP32[$0 + 11336 >> 2];
 $2 = HEAP32[$0 + 11340 >> 2];
 HEAP32[$0 + 11364 >> 2] = $3;
 HEAP32[$0 + 11360 >> 2] = 1751;
 HEAP32[$0 + 11356 >> 2] = $2;
 HEAP32[$0 + 11352 >> 2] = $1;
 $3 = HEAP32[$0 + 11364 >> 2];
 $4 = HEAP32[$0 + 11360 >> 2];
 $1 = HEAP32[$0 + 11352 >> 2];
 HEAP32[$0 + 11348 >> 2] = HEAP32[$0 + 11356 >> 2];
 HEAP32[$0 + 11344 >> 2] = $1;
 $2 = HEAP32[$0 + 11348 >> 2];
 $1 = HEAP32[$0 + 11344 >> 2];
 HEAP32[$0 + 568 >> 2] = $1;
 HEAP32[$0 + 572 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2MouseJoint____29_28float_29___invoke_b2MouseJoint__28char_20const__2c_20void_20_28b2MouseJoint____29_28float_29_29($4, $0 + 568 | 0);
 HEAP32[$0 + 2580 >> 2] = 0;
 HEAP32[$0 + 2576 >> 2] = 285;
 $1 = HEAP32[$0 + 2580 >> 2];
 $2 = HEAP32[$0 + 2576 >> 2];
 HEAP32[$0 + 11432 >> 2] = $2;
 HEAP32[$0 + 11436 >> 2] = $1;
 $1 = HEAP32[$0 + 11432 >> 2];
 $2 = HEAP32[$0 + 11436 >> 2];
 HEAP32[$0 + 11460 >> 2] = $3;
 HEAP32[$0 + 11456 >> 2] = 1764;
 HEAP32[$0 + 11452 >> 2] = $2;
 HEAP32[$0 + 11448 >> 2] = $1;
 $3 = HEAP32[$0 + 11460 >> 2];
 $4 = HEAP32[$0 + 11456 >> 2];
 $1 = HEAP32[$0 + 11448 >> 2];
 HEAP32[$0 + 11444 >> 2] = HEAP32[$0 + 11452 >> 2];
 HEAP32[$0 + 11440 >> 2] = $1;
 $2 = HEAP32[$0 + 11444 >> 2];
 $1 = HEAP32[$0 + 11440 >> 2];
 HEAP32[$0 + 560 >> 2] = $1;
 HEAP32[$0 + 564 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2MouseJoint____29_28_29_20const___invoke_b2MouseJoint__28char_20const__2c_20float_20_28b2MouseJoint____29_28_29_20const_29($4, $0 + 560 | 0);
 HEAP32[$0 + 2572 >> 2] = 0;
 HEAP32[$0 + 2568 >> 2] = 286;
 $1 = HEAP32[$0 + 2572 >> 2];
 $2 = HEAP32[$0 + 2568 >> 2];
 HEAP32[$0 + 11304 >> 2] = $2;
 HEAP32[$0 + 11308 >> 2] = $1;
 $1 = HEAP32[$0 + 11304 >> 2];
 $2 = HEAP32[$0 + 11308 >> 2];
 HEAP32[$0 + 11332 >> 2] = $3;
 HEAP32[$0 + 11328 >> 2] = 6178;
 HEAP32[$0 + 11324 >> 2] = $2;
 HEAP32[$0 + 11320 >> 2] = $1;
 $3 = HEAP32[$0 + 11332 >> 2];
 $4 = HEAP32[$0 + 11328 >> 2];
 $1 = HEAP32[$0 + 11320 >> 2];
 HEAP32[$0 + 11316 >> 2] = HEAP32[$0 + 11324 >> 2];
 HEAP32[$0 + 11312 >> 2] = $1;
 $2 = HEAP32[$0 + 11316 >> 2];
 $1 = HEAP32[$0 + 11312 >> 2];
 HEAP32[$0 + 552 >> 2] = $1;
 HEAP32[$0 + 556 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2MouseJoint____29_28float_29___invoke_b2MouseJoint__28char_20const__2c_20void_20_28b2MouseJoint____29_28float_29_29($4, $0 + 552 | 0);
 HEAP32[$0 + 2564 >> 2] = 0;
 HEAP32[$0 + 2560 >> 2] = 287;
 $1 = HEAP32[$0 + 2564 >> 2];
 $2 = HEAP32[$0 + 2560 >> 2];
 HEAP32[$0 + 11400 >> 2] = $2;
 HEAP32[$0 + 11404 >> 2] = $1;
 $1 = HEAP32[$0 + 11400 >> 2];
 $2 = HEAP32[$0 + 11404 >> 2];
 HEAP32[$0 + 11428 >> 2] = $3;
 HEAP32[$0 + 11424 >> 2] = 6194;
 HEAP32[$0 + 11420 >> 2] = $2;
 HEAP32[$0 + 11416 >> 2] = $1;
 $3 = HEAP32[$0 + 11428 >> 2];
 $4 = HEAP32[$0 + 11424 >> 2];
 $1 = HEAP32[$0 + 11416 >> 2];
 HEAP32[$0 + 11412 >> 2] = HEAP32[$0 + 11420 >> 2];
 HEAP32[$0 + 11408 >> 2] = $1;
 $2 = HEAP32[$0 + 11412 >> 2];
 $1 = HEAP32[$0 + 11408 >> 2];
 HEAP32[$0 + 544 >> 2] = $1;
 HEAP32[$0 + 548 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2MouseJoint____29_28_29_20const___invoke_b2MouseJoint__28char_20const__2c_20float_20_28b2MouseJoint____29_28_29_20const_29($4, $0 + 544 | 0);
 HEAP32[$0 + 2556 >> 2] = 1;
 HEAP32[$0 + 2552 >> 2] = 16;
 $1 = HEAP32[$0 + 2556 >> 2];
 $2 = HEAP32[$0 + 2552 >> 2];
 HEAP32[$0 + 11496 >> 2] = $2;
 HEAP32[$0 + 11500 >> 2] = $1;
 $1 = HEAP32[$0 + 11496 >> 2];
 $2 = HEAP32[$0 + 11500 >> 2];
 HEAP32[$0 + 11528 >> 2] = $3;
 HEAP32[$0 + 11524 >> 2] = 6119;
 HEAP32[$0 + 11520 >> 2] = $2;
 HEAP32[$0 + 11516 >> 2] = $1;
 $3 = HEAP32[$0 + 11524 >> 2];
 $1 = HEAP32[$0 + 11516 >> 2];
 HEAP32[$0 + 11512 >> 2] = HEAP32[$0 + 11520 >> 2];
 HEAP32[$0 + 11508 >> 2] = $1;
 $2 = HEAP32[$0 + 11512 >> 2];
 $1 = HEAP32[$0 + 11508 >> 2];
 HEAP32[$0 + 536 >> 2] = $1;
 HEAP32[$0 + 540 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2MouseJoint____29_28_29___invoke_b2MouseJoint__28char_20const__2c_20void_20_28b2MouseJoint____29_28_29_29($3, $0 + 536 | 0);
 HEAP32[$0 + 11552 >> 2] = $0 + 2551;
 HEAP32[$0 + 11548 >> 2] = 7817;
 void_20emscripten__base_b2JointDef___verify_b2PrismaticJointDef__28_29();
 HEAP32[$0 + 11544 >> 2] = 288;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2JointDef__20_28_emscripten__base_b2JointDef___getUpcaster_b2PrismaticJointDef__28_29_29_28b2PrismaticJointDef__29(), 
 HEAP32[wasm2js_i32$0 + 11540 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2PrismaticJointDef__20_28_emscripten__base_b2JointDef___getDowncaster_b2PrismaticJointDef__28_29_29_28b2JointDef__29(), 
 HEAP32[wasm2js_i32$0 + 11536 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 11532 >> 2] = 289;
 $1 = emscripten__internal__TypeID_b2PrismaticJointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2PrismaticJointDef__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2PrismaticJointDef_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2JointDef___get_28_29();
 HEAP32[$0 + 15808 >> 2] = HEAP32[$0 + 11544 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 11544 >> 2];
 HEAP32[$0 + 15812 >> 2] = HEAP32[$0 + 11540 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 11540 >> 2];
 HEAP32[$0 + 15816 >> 2] = HEAP32[$0 + 11536 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 11536 >> 2];
 $11 = HEAP32[$0 + 11548 >> 2];
 HEAP32[$0 + 15820 >> 2] = HEAP32[$0 + 11532 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 11532 >> 2]);
 HEAP32[$0 + 11556 >> 2] = $0 + 2551;
 HEAP32[$0 + 15828 >> 2] = HEAP32[$0 + 11556 >> 2];
 HEAP32[$0 + 15824 >> 2] = 290;
 $1 = HEAP32[$0 + 15828 >> 2];
 void_20emscripten__internal__RegisterClassConstructor_b2PrismaticJointDef__20_28__29_28_29___invoke_b2PrismaticJointDef__28b2PrismaticJointDef__20_28__29_28_29_29(HEAP32[$0 + 15824 >> 2]);
 HEAP32[$0 + 11616 >> 2] = $1;
 HEAP32[$0 + 11612 >> 2] = 10962;
 HEAP32[$0 + 11608 >> 2] = 20;
 $1 = HEAP32[$0 + 11616 >> 2];
 HEAP32[$0 + 11604 >> 2] = 291;
 HEAP32[$0 + 11600 >> 2] = 292;
 $2 = emscripten__internal__TypeID_b2PrismaticJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 11612 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15832 >> 2] = HEAP32[$0 + 11604 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 11604 >> 2];
 $7 = b2Vec2_20b2PrismaticJointDef_____20emscripten__internal__getContext_b2Vec2_20b2PrismaticJointDef_____28b2Vec2_20b2PrismaticJointDef____20const__29($0 + 11608 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15844 >> 2] = HEAP32[$0 + 11600 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 11600 >> 2], b2Vec2_20b2PrismaticJointDef_____20emscripten__internal__getContext_b2Vec2_20b2PrismaticJointDef_____28b2Vec2_20b2PrismaticJointDef____20const__29($0 + 11608 | 0) | 0);
 HEAP32[$0 + 11596 >> 2] = $1;
 HEAP32[$0 + 11592 >> 2] = 10819;
 HEAP32[$0 + 11588 >> 2] = 28;
 $1 = HEAP32[$0 + 11596 >> 2];
 HEAP32[$0 + 11584 >> 2] = 291;
 HEAP32[$0 + 11580 >> 2] = 292;
 $2 = emscripten__internal__TypeID_b2PrismaticJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 11592 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15836 >> 2] = HEAP32[$0 + 11584 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 11584 >> 2];
 $7 = b2Vec2_20b2PrismaticJointDef_____20emscripten__internal__getContext_b2Vec2_20b2PrismaticJointDef_____28b2Vec2_20b2PrismaticJointDef____20const__29($0 + 11588 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15848 >> 2] = HEAP32[$0 + 11580 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 11580 >> 2], b2Vec2_20b2PrismaticJointDef_____20emscripten__internal__getContext_b2Vec2_20b2PrismaticJointDef_____28b2Vec2_20b2PrismaticJointDef____20const__29($0 + 11588 | 0) | 0);
 HEAP32[$0 + 11576 >> 2] = $1;
 HEAP32[$0 + 11572 >> 2] = 10926;
 HEAP32[$0 + 11568 >> 2] = 36;
 $1 = HEAP32[$0 + 11576 >> 2];
 HEAP32[$0 + 11564 >> 2] = 291;
 HEAP32[$0 + 11560 >> 2] = 292;
 $2 = emscripten__internal__TypeID_b2PrismaticJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 11572 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15840 >> 2] = HEAP32[$0 + 11564 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 11564 >> 2];
 $7 = b2Vec2_20b2PrismaticJointDef_____20emscripten__internal__getContext_b2Vec2_20b2PrismaticJointDef_____28b2Vec2_20b2PrismaticJointDef____20const__29($0 + 11568 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15852 >> 2] = HEAP32[$0 + 11560 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 11560 >> 2], b2Vec2_20b2PrismaticJointDef_____20emscripten__internal__getContext_b2Vec2_20b2PrismaticJointDef_____28b2Vec2_20b2PrismaticJointDef____20const__29($0 + 11568 | 0) | 0);
 HEAP32[$0 + 11716 >> 2] = $1;
 HEAP32[$0 + 11712 >> 2] = 9279;
 HEAP32[$0 + 11708 >> 2] = 44;
 $1 = HEAP32[$0 + 11716 >> 2];
 HEAP32[$0 + 11704 >> 2] = 293;
 HEAP32[$0 + 11700 >> 2] = 294;
 $2 = emscripten__internal__TypeID_b2PrismaticJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 11712 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15856 >> 2] = HEAP32[$0 + 11704 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 11704 >> 2];
 $7 = float_20b2PrismaticJointDef_____20emscripten__internal__getContext_float_20b2PrismaticJointDef_____28float_20b2PrismaticJointDef____20const__29($0 + 11708 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15876 >> 2] = HEAP32[$0 + 11700 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 11700 >> 2], float_20b2PrismaticJointDef_____20emscripten__internal__getContext_float_20b2PrismaticJointDef_____28float_20b2PrismaticJointDef____20const__29($0 + 11708 | 0) | 0);
 HEAP32[$0 + 11756 >> 2] = $1;
 HEAP32[$0 + 11752 >> 2] = 2911;
 HEAP32[$0 + 11748 >> 2] = 48;
 $1 = HEAP32[$0 + 11756 >> 2];
 HEAP32[$0 + 11744 >> 2] = 295;
 HEAP32[$0 + 11740 >> 2] = 296;
 $2 = emscripten__internal__TypeID_b2PrismaticJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 11752 >> 2];
 $4 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 15896 >> 2] = HEAP32[$0 + 11744 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 11744 >> 2];
 $7 = bool_20b2PrismaticJointDef_____20emscripten__internal__getContext_bool_20b2PrismaticJointDef_____28bool_20b2PrismaticJointDef____20const__29($0 + 11748 | 0);
 $8 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 15904 >> 2] = HEAP32[$0 + 11740 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 11740 >> 2], bool_20b2PrismaticJointDef_____20emscripten__internal__getContext_bool_20b2PrismaticJointDef_____28bool_20b2PrismaticJointDef____20const__29($0 + 11748 | 0) | 0);
 HEAP32[$0 + 11696 >> 2] = $1;
 HEAP32[$0 + 11692 >> 2] = 6600;
 HEAP32[$0 + 11688 >> 2] = 52;
 $1 = HEAP32[$0 + 11696 >> 2];
 HEAP32[$0 + 11684 >> 2] = 293;
 HEAP32[$0 + 11680 >> 2] = 294;
 $2 = emscripten__internal__TypeID_b2PrismaticJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 11692 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15860 >> 2] = HEAP32[$0 + 11684 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 11684 >> 2];
 $7 = float_20b2PrismaticJointDef_____20emscripten__internal__getContext_float_20b2PrismaticJointDef_____28float_20b2PrismaticJointDef____20const__29($0 + 11688 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15880 >> 2] = HEAP32[$0 + 11680 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 11680 >> 2], float_20b2PrismaticJointDef_____20emscripten__internal__getContext_float_20b2PrismaticJointDef_____28float_20b2PrismaticJointDef____20const__29($0 + 11688 | 0) | 0);
 HEAP32[$0 + 11676 >> 2] = $1;
 HEAP32[$0 + 11672 >> 2] = 6617;
 HEAP32[$0 + 11668 >> 2] = 56;
 $1 = HEAP32[$0 + 11676 >> 2];
 HEAP32[$0 + 11664 >> 2] = 293;
 HEAP32[$0 + 11660 >> 2] = 294;
 $2 = emscripten__internal__TypeID_b2PrismaticJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 11672 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15864 >> 2] = HEAP32[$0 + 11664 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 11664 >> 2];
 $7 = float_20b2PrismaticJointDef_____20emscripten__internal__getContext_float_20b2PrismaticJointDef_____28float_20b2PrismaticJointDef____20const__29($0 + 11668 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15884 >> 2] = HEAP32[$0 + 11660 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 11660 >> 2], float_20b2PrismaticJointDef_____20emscripten__internal__getContext_float_20b2PrismaticJointDef_____28float_20b2PrismaticJointDef____20const__29($0 + 11668 | 0) | 0);
 HEAP32[$0 + 11736 >> 2] = $1;
 HEAP32[$0 + 11732 >> 2] = 3643;
 HEAP32[$0 + 11728 >> 2] = 60;
 $1 = HEAP32[$0 + 11736 >> 2];
 HEAP32[$0 + 11724 >> 2] = 295;
 HEAP32[$0 + 11720 >> 2] = 296;
 $2 = emscripten__internal__TypeID_b2PrismaticJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 11732 >> 2];
 $4 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 15900 >> 2] = HEAP32[$0 + 11724 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 11724 >> 2];
 $7 = bool_20b2PrismaticJointDef_____20emscripten__internal__getContext_bool_20b2PrismaticJointDef_____28bool_20b2PrismaticJointDef____20const__29($0 + 11728 | 0);
 $8 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 15908 >> 2] = HEAP32[$0 + 11720 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 11720 >> 2], bool_20b2PrismaticJointDef_____20emscripten__internal__getContext_bool_20b2PrismaticJointDef_____28bool_20b2PrismaticJointDef____20const__29($0 + 11728 | 0) | 0);
 HEAP32[$0 + 11656 >> 2] = $1;
 HEAP32[$0 + 11652 >> 2] = 10157;
 HEAP32[$0 + 11648 >> 2] = 68;
 $1 = HEAP32[$0 + 11656 >> 2];
 HEAP32[$0 + 11644 >> 2] = 293;
 HEAP32[$0 + 11640 >> 2] = 294;
 $2 = emscripten__internal__TypeID_b2PrismaticJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 11652 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15868 >> 2] = HEAP32[$0 + 11644 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 11644 >> 2];
 $7 = float_20b2PrismaticJointDef_____20emscripten__internal__getContext_float_20b2PrismaticJointDef_____28float_20b2PrismaticJointDef____20const__29($0 + 11648 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15888 >> 2] = HEAP32[$0 + 11640 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 11640 >> 2], float_20b2PrismaticJointDef_____20emscripten__internal__getContext_float_20b2PrismaticJointDef_____28float_20b2PrismaticJointDef____20const__29($0 + 11648 | 0) | 0);
 HEAP32[$0 + 11636 >> 2] = $1;
 HEAP32[$0 + 11632 >> 2] = 9704;
 HEAP32[$0 + 11628 >> 2] = 64;
 HEAP32[$0 + 11624 >> 2] = 293;
 HEAP32[$0 + 11620 >> 2] = 294;
 $1 = emscripten__internal__TypeID_b2PrismaticJointDef_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 11632 >> 2];
 $3 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15872 >> 2] = HEAP32[$0 + 11624 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $5 = HEAP32[$0 + 11624 >> 2];
 $6 = float_20b2PrismaticJointDef_____20emscripten__internal__getContext_float_20b2PrismaticJointDef_____28float_20b2PrismaticJointDef____20const__29($0 + 11628 | 0);
 $7 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15892 >> 2] = HEAP32[$0 + 11620 >> 2];
 _embind_register_class_property($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 11620 >> 2], float_20b2PrismaticJointDef_____20emscripten__internal__getContext_float_20b2PrismaticJointDef_____28float_20b2PrismaticJointDef____20const__29($0 + 11628 | 0) | 0);
 HEAP32[$0 + 11780 >> 2] = $0 + 2550;
 HEAP32[$0 + 11776 >> 2] = 2825;
 void_20emscripten__base_b2Joint___verify_b2PrismaticJoint__28_29();
 HEAP32[$0 + 11772 >> 2] = 297;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Joint__20_28_emscripten__base_b2Joint___getUpcaster_b2PrismaticJoint__28_29_29_28b2PrismaticJoint__29(), 
 HEAP32[wasm2js_i32$0 + 11768 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2PrismaticJoint__20_28_emscripten__base_b2Joint___getDowncaster_b2PrismaticJoint__28_29_29_28b2Joint__29(), 
 HEAP32[wasm2js_i32$0 + 11764 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 11760 >> 2] = 298;
 $1 = emscripten__internal__TypeID_b2PrismaticJoint_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2Joint___get_28_29();
 HEAP32[$0 + 15912 >> 2] = HEAP32[$0 + 11772 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 11772 >> 2];
 HEAP32[$0 + 15916 >> 2] = HEAP32[$0 + 11768 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 11768 >> 2];
 HEAP32[$0 + 15920 >> 2] = HEAP32[$0 + 11764 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 11764 >> 2];
 $11 = HEAP32[$0 + 11776 >> 2];
 HEAP32[$0 + 15924 >> 2] = HEAP32[$0 + 11760 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 11760 >> 2]);
 HEAP32[$0 + 2544 >> 2] = 0;
 HEAP32[$0 + 2540 >> 2] = 299;
 $1 = HEAP32[$0 + 2544 >> 2];
 $2 = HEAP32[$0 + 2540 >> 2];
 HEAP32[$0 + 11848 >> 2] = $2;
 HEAP32[$0 + 11852 >> 2] = $1;
 $1 = HEAP32[$0 + 11848 >> 2];
 $2 = HEAP32[$0 + 11852 >> 2];
 HEAP32[$0 + 11876 >> 2] = $0 + 2550;
 HEAP32[$0 + 11872 >> 2] = 10975;
 HEAP32[$0 + 11868 >> 2] = $2;
 HEAP32[$0 + 11864 >> 2] = $1;
 $3 = HEAP32[$0 + 11876 >> 2];
 $4 = HEAP32[$0 + 11872 >> 2];
 $1 = HEAP32[$0 + 11864 >> 2];
 HEAP32[$0 + 11860 >> 2] = HEAP32[$0 + 11868 >> 2];
 HEAP32[$0 + 11856 >> 2] = $1;
 $2 = HEAP32[$0 + 11860 >> 2];
 $1 = HEAP32[$0 + 11856 >> 2];
 HEAP32[$0 + 528 >> 2] = $1;
 HEAP32[$0 + 532 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2PrismaticJoint____29_28_29_20const___invoke_b2PrismaticJoint__28char_20const__2c_20b2Vec2_20const__20_28b2PrismaticJoint____29_28_29_20const_29($4, $0 + 528 | 0);
 HEAP32[$0 + 2536 >> 2] = 0;
 HEAP32[$0 + 2532 >> 2] = 300;
 $1 = HEAP32[$0 + 2536 >> 2];
 $2 = HEAP32[$0 + 2532 >> 2];
 HEAP32[$0 + 11816 >> 2] = $2;
 HEAP32[$0 + 11820 >> 2] = $1;
 $1 = HEAP32[$0 + 11816 >> 2];
 $2 = HEAP32[$0 + 11820 >> 2];
 HEAP32[$0 + 11844 >> 2] = $3;
 HEAP32[$0 + 11840 >> 2] = 10832;
 HEAP32[$0 + 11836 >> 2] = $2;
 HEAP32[$0 + 11832 >> 2] = $1;
 $3 = HEAP32[$0 + 11844 >> 2];
 $4 = HEAP32[$0 + 11840 >> 2];
 $1 = HEAP32[$0 + 11832 >> 2];
 HEAP32[$0 + 11828 >> 2] = HEAP32[$0 + 11836 >> 2];
 HEAP32[$0 + 11824 >> 2] = $1;
 $2 = HEAP32[$0 + 11828 >> 2];
 $1 = HEAP32[$0 + 11824 >> 2];
 HEAP32[$0 + 520 >> 2] = $1;
 HEAP32[$0 + 524 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2PrismaticJoint____29_28_29_20const___invoke_b2PrismaticJoint__28char_20const__2c_20b2Vec2_20const__20_28b2PrismaticJoint____29_28_29_20const_29($4, $0 + 520 | 0);
 HEAP32[$0 + 2528 >> 2] = 0;
 HEAP32[$0 + 2524 >> 2] = 301;
 $1 = HEAP32[$0 + 2528 >> 2];
 $2 = HEAP32[$0 + 2524 >> 2];
 HEAP32[$0 + 11784 >> 2] = $2;
 HEAP32[$0 + 11788 >> 2] = $1;
 $1 = HEAP32[$0 + 11784 >> 2];
 $2 = HEAP32[$0 + 11788 >> 2];
 HEAP32[$0 + 11812 >> 2] = $3;
 HEAP32[$0 + 11808 >> 2] = 10937;
 HEAP32[$0 + 11804 >> 2] = $2;
 HEAP32[$0 + 11800 >> 2] = $1;
 $3 = HEAP32[$0 + 11812 >> 2];
 $4 = HEAP32[$0 + 11808 >> 2];
 $1 = HEAP32[$0 + 11800 >> 2];
 HEAP32[$0 + 11796 >> 2] = HEAP32[$0 + 11804 >> 2];
 HEAP32[$0 + 11792 >> 2] = $1;
 $2 = HEAP32[$0 + 11796 >> 2];
 $1 = HEAP32[$0 + 11792 >> 2];
 HEAP32[$0 + 512 >> 2] = $1;
 HEAP32[$0 + 516 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2PrismaticJoint____29_28_29_20const___invoke_b2PrismaticJoint__28char_20const__2c_20b2Vec2_20const__20_28b2PrismaticJoint____29_28_29_20const_29($4, $0 + 512 | 0);
 HEAP32[$0 + 2520 >> 2] = 0;
 HEAP32[$0 + 2516 >> 2] = 302;
 $1 = HEAP32[$0 + 2520 >> 2];
 $2 = HEAP32[$0 + 2516 >> 2];
 HEAP32[$0 + 12072 >> 2] = $2;
 HEAP32[$0 + 12076 >> 2] = $1;
 $1 = HEAP32[$0 + 12072 >> 2];
 $2 = HEAP32[$0 + 12076 >> 2];
 HEAP32[$0 + 12100 >> 2] = $3;
 HEAP32[$0 + 12096 >> 2] = 9294;
 HEAP32[$0 + 12092 >> 2] = $2;
 HEAP32[$0 + 12088 >> 2] = $1;
 $3 = HEAP32[$0 + 12100 >> 2];
 $4 = HEAP32[$0 + 12096 >> 2];
 $1 = HEAP32[$0 + 12088 >> 2];
 HEAP32[$0 + 12084 >> 2] = HEAP32[$0 + 12092 >> 2];
 HEAP32[$0 + 12080 >> 2] = $1;
 $2 = HEAP32[$0 + 12084 >> 2];
 $1 = HEAP32[$0 + 12080 >> 2];
 HEAP32[$0 + 504 >> 2] = $1;
 HEAP32[$0 + 508 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2PrismaticJoint____29_28_29_20const___invoke_b2PrismaticJoint__28char_20const__2c_20float_20_28b2PrismaticJoint____29_28_29_20const_29($4, $0 + 504 | 0);
 HEAP32[$0 + 2512 >> 2] = 0;
 HEAP32[$0 + 2508 >> 2] = 303;
 $1 = HEAP32[$0 + 2512 >> 2];
 $2 = HEAP32[$0 + 2508 >> 2];
 HEAP32[$0 + 12040 >> 2] = $2;
 HEAP32[$0 + 12044 >> 2] = $1;
 $1 = HEAP32[$0 + 12040 >> 2];
 $2 = HEAP32[$0 + 12044 >> 2];
 HEAP32[$0 + 12068 >> 2] = $3;
 HEAP32[$0 + 12064 >> 2] = 6580;
 HEAP32[$0 + 12060 >> 2] = $2;
 HEAP32[$0 + 12056 >> 2] = $1;
 $3 = HEAP32[$0 + 12068 >> 2];
 $4 = HEAP32[$0 + 12064 >> 2];
 $1 = HEAP32[$0 + 12056 >> 2];
 HEAP32[$0 + 12052 >> 2] = HEAP32[$0 + 12060 >> 2];
 HEAP32[$0 + 12048 >> 2] = $1;
 $2 = HEAP32[$0 + 12052 >> 2];
 $1 = HEAP32[$0 + 12048 >> 2];
 HEAP32[$0 + 496 >> 2] = $1;
 HEAP32[$0 + 500 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2PrismaticJoint____29_28_29_20const___invoke_b2PrismaticJoint__28char_20const__2c_20float_20_28b2PrismaticJoint____29_28_29_20const_29($4, $0 + 496 | 0);
 HEAP32[$0 + 2504 >> 2] = 0;
 HEAP32[$0 + 2500 >> 2] = 304;
 $1 = HEAP32[$0 + 2504 >> 2];
 $2 = HEAP32[$0 + 2500 >> 2];
 HEAP32[$0 + 12008 >> 2] = $2;
 HEAP32[$0 + 12012 >> 2] = $1;
 $1 = HEAP32[$0 + 12008 >> 2];
 $2 = HEAP32[$0 + 12012 >> 2];
 HEAP32[$0 + 12036 >> 2] = $3;
 HEAP32[$0 + 12032 >> 2] = 10097;
 HEAP32[$0 + 12028 >> 2] = $2;
 HEAP32[$0 + 12024 >> 2] = $1;
 $3 = HEAP32[$0 + 12036 >> 2];
 $4 = HEAP32[$0 + 12032 >> 2];
 $1 = HEAP32[$0 + 12024 >> 2];
 HEAP32[$0 + 12020 >> 2] = HEAP32[$0 + 12028 >> 2];
 HEAP32[$0 + 12016 >> 2] = $1;
 $2 = HEAP32[$0 + 12020 >> 2];
 $1 = HEAP32[$0 + 12016 >> 2];
 HEAP32[$0 + 488 >> 2] = $1;
 HEAP32[$0 + 492 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2PrismaticJoint____29_28_29_20const___invoke_b2PrismaticJoint__28char_20const__2c_20float_20_28b2PrismaticJoint____29_28_29_20const_29($4, $0 + 488 | 0);
 HEAP32[$0 + 2496 >> 2] = 0;
 HEAP32[$0 + 2492 >> 2] = 305;
 $1 = HEAP32[$0 + 2496 >> 2];
 $2 = HEAP32[$0 + 2492 >> 2];
 HEAP32[$0 + 12136 >> 2] = $2;
 HEAP32[$0 + 12140 >> 2] = $1;
 $1 = HEAP32[$0 + 12136 >> 2];
 $2 = HEAP32[$0 + 12140 >> 2];
 HEAP32[$0 + 12164 >> 2] = $3;
 HEAP32[$0 + 12160 >> 2] = 10039;
 HEAP32[$0 + 12156 >> 2] = $2;
 HEAP32[$0 + 12152 >> 2] = $1;
 $3 = HEAP32[$0 + 12164 >> 2];
 $4 = HEAP32[$0 + 12160 >> 2];
 $1 = HEAP32[$0 + 12152 >> 2];
 HEAP32[$0 + 12148 >> 2] = HEAP32[$0 + 12156 >> 2];
 HEAP32[$0 + 12144 >> 2] = $1;
 $2 = HEAP32[$0 + 12148 >> 2];
 $1 = HEAP32[$0 + 12144 >> 2];
 HEAP32[$0 + 480 >> 2] = $1;
 HEAP32[$0 + 484 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2PrismaticJoint____29_28_29_20const___invoke_b2PrismaticJoint__28char_20const__2c_20bool_20_28b2PrismaticJoint____29_28_29_20const_29($4, $0 + 480 | 0);
 HEAP32[$0 + 2488 >> 2] = 0;
 HEAP32[$0 + 2484 >> 2] = 306;
 $1 = HEAP32[$0 + 2488 >> 2];
 $2 = HEAP32[$0 + 2484 >> 2];
 HEAP32[$0 + 12200 >> 2] = $2;
 HEAP32[$0 + 12204 >> 2] = $1;
 $1 = HEAP32[$0 + 12200 >> 2];
 $2 = HEAP32[$0 + 12204 >> 2];
 HEAP32[$0 + 12228 >> 2] = $3;
 HEAP32[$0 + 12224 >> 2] = 2923;
 HEAP32[$0 + 12220 >> 2] = $2;
 HEAP32[$0 + 12216 >> 2] = $1;
 $3 = HEAP32[$0 + 12228 >> 2];
 $4 = HEAP32[$0 + 12224 >> 2];
 $1 = HEAP32[$0 + 12216 >> 2];
 HEAP32[$0 + 12212 >> 2] = HEAP32[$0 + 12220 >> 2];
 HEAP32[$0 + 12208 >> 2] = $1;
 $2 = HEAP32[$0 + 12212 >> 2];
 $1 = HEAP32[$0 + 12208 >> 2];
 HEAP32[$0 + 472 >> 2] = $1;
 HEAP32[$0 + 476 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2PrismaticJoint____29_28bool_29___invoke_b2PrismaticJoint__28char_20const__2c_20void_20_28b2PrismaticJoint____29_28bool_29_29($4, $0 + 472 | 0);
 HEAP32[$0 + 2480 >> 2] = 0;
 HEAP32[$0 + 2476 >> 2] = 307;
 $1 = HEAP32[$0 + 2480 >> 2];
 $2 = HEAP32[$0 + 2476 >> 2];
 HEAP32[$0 + 11976 >> 2] = $2;
 HEAP32[$0 + 11980 >> 2] = $1;
 $1 = HEAP32[$0 + 11976 >> 2];
 $2 = HEAP32[$0 + 11980 >> 2];
 HEAP32[$0 + 12004 >> 2] = $3;
 HEAP32[$0 + 12e3 >> 2] = 2883;
 HEAP32[$0 + 11996 >> 2] = $2;
 HEAP32[$0 + 11992 >> 2] = $1;
 $3 = HEAP32[$0 + 12004 >> 2];
 $4 = HEAP32[$0 + 12e3 >> 2];
 $1 = HEAP32[$0 + 11992 >> 2];
 HEAP32[$0 + 11988 >> 2] = HEAP32[$0 + 11996 >> 2];
 HEAP32[$0 + 11984 >> 2] = $1;
 $2 = HEAP32[$0 + 11988 >> 2];
 $1 = HEAP32[$0 + 11984 >> 2];
 HEAP32[$0 + 464 >> 2] = $1;
 HEAP32[$0 + 468 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2PrismaticJoint____29_28_29_20const___invoke_b2PrismaticJoint__28char_20const__2c_20float_20_28b2PrismaticJoint____29_28_29_20const_29($4, $0 + 464 | 0);
 HEAP32[$0 + 2472 >> 2] = 0;
 HEAP32[$0 + 2468 >> 2] = 308;
 $1 = HEAP32[$0 + 2472 >> 2];
 $2 = HEAP32[$0 + 2468 >> 2];
 HEAP32[$0 + 11944 >> 2] = $2;
 HEAP32[$0 + 11948 >> 2] = $1;
 $1 = HEAP32[$0 + 11944 >> 2];
 $2 = HEAP32[$0 + 11948 >> 2];
 HEAP32[$0 + 11972 >> 2] = $3;
 HEAP32[$0 + 11968 >> 2] = 2897;
 HEAP32[$0 + 11964 >> 2] = $2;
 HEAP32[$0 + 11960 >> 2] = $1;
 $3 = HEAP32[$0 + 11972 >> 2];
 $4 = HEAP32[$0 + 11968 >> 2];
 $1 = HEAP32[$0 + 11960 >> 2];
 HEAP32[$0 + 11956 >> 2] = HEAP32[$0 + 11964 >> 2];
 HEAP32[$0 + 11952 >> 2] = $1;
 $2 = HEAP32[$0 + 11956 >> 2];
 $1 = HEAP32[$0 + 11952 >> 2];
 HEAP32[$0 + 456 >> 2] = $1;
 HEAP32[$0 + 460 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2PrismaticJoint____29_28_29_20const___invoke_b2PrismaticJoint__28char_20const__2c_20float_20_28b2PrismaticJoint____29_28_29_20const_29($4, $0 + 456 | 0);
 HEAP32[$0 + 2464 >> 2] = 0;
 HEAP32[$0 + 2460 >> 2] = 309;
 $1 = HEAP32[$0 + 2464 >> 2];
 $2 = HEAP32[$0 + 2460 >> 2];
 HEAP32[$0 + 12232 >> 2] = $2;
 HEAP32[$0 + 12236 >> 2] = $1;
 $1 = HEAP32[$0 + 12232 >> 2];
 $2 = HEAP32[$0 + 12236 >> 2];
 HEAP32[$0 + 12260 >> 2] = $3;
 HEAP32[$0 + 12256 >> 2] = 3417;
 HEAP32[$0 + 12252 >> 2] = $2;
 HEAP32[$0 + 12248 >> 2] = $1;
 $3 = HEAP32[$0 + 12260 >> 2];
 $4 = HEAP32[$0 + 12256 >> 2];
 $1 = HEAP32[$0 + 12248 >> 2];
 HEAP32[$0 + 12244 >> 2] = HEAP32[$0 + 12252 >> 2];
 HEAP32[$0 + 12240 >> 2] = $1;
 $2 = HEAP32[$0 + 12244 >> 2];
 $1 = HEAP32[$0 + 12240 >> 2];
 HEAP32[$0 + 448 >> 2] = $1;
 HEAP32[$0 + 452 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2PrismaticJoint____29_28float_2c_20float_29___invoke_b2PrismaticJoint__28char_20const__2c_20void_20_28b2PrismaticJoint____29_28float_2c_20float_29_29($4, $0 + 448 | 0);
 HEAP32[$0 + 2456 >> 2] = 0;
 HEAP32[$0 + 2452 >> 2] = 310;
 $1 = HEAP32[$0 + 2456 >> 2];
 $2 = HEAP32[$0 + 2452 >> 2];
 HEAP32[$0 + 12104 >> 2] = $2;
 HEAP32[$0 + 12108 >> 2] = $1;
 $1 = HEAP32[$0 + 12104 >> 2];
 $2 = HEAP32[$0 + 12108 >> 2];
 HEAP32[$0 + 12132 >> 2] = $3;
 HEAP32[$0 + 12128 >> 2] = 10082;
 HEAP32[$0 + 12124 >> 2] = $2;
 HEAP32[$0 + 12120 >> 2] = $1;
 $3 = HEAP32[$0 + 12132 >> 2];
 $4 = HEAP32[$0 + 12128 >> 2];
 $1 = HEAP32[$0 + 12120 >> 2];
 HEAP32[$0 + 12116 >> 2] = HEAP32[$0 + 12124 >> 2];
 HEAP32[$0 + 12112 >> 2] = $1;
 $2 = HEAP32[$0 + 12116 >> 2];
 $1 = HEAP32[$0 + 12112 >> 2];
 HEAP32[$0 + 440 >> 2] = $1;
 HEAP32[$0 + 444 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2PrismaticJoint____29_28_29_20const___invoke_b2PrismaticJoint__28char_20const__2c_20bool_20_28b2PrismaticJoint____29_28_29_20const_29($4, $0 + 440 | 0);
 HEAP32[$0 + 2448 >> 2] = 0;
 HEAP32[$0 + 2444 >> 2] = 311;
 $1 = HEAP32[$0 + 2448 >> 2];
 $2 = HEAP32[$0 + 2444 >> 2];
 HEAP32[$0 + 12168 >> 2] = $2;
 HEAP32[$0 + 12172 >> 2] = $1;
 $1 = HEAP32[$0 + 12168 >> 2];
 $2 = HEAP32[$0 + 12172 >> 2];
 HEAP32[$0 + 12196 >> 2] = $3;
 HEAP32[$0 + 12192 >> 2] = 3655;
 HEAP32[$0 + 12188 >> 2] = $2;
 HEAP32[$0 + 12184 >> 2] = $1;
 $3 = HEAP32[$0 + 12196 >> 2];
 $4 = HEAP32[$0 + 12192 >> 2];
 $1 = HEAP32[$0 + 12184 >> 2];
 HEAP32[$0 + 12180 >> 2] = HEAP32[$0 + 12188 >> 2];
 HEAP32[$0 + 12176 >> 2] = $1;
 $2 = HEAP32[$0 + 12180 >> 2];
 $1 = HEAP32[$0 + 12176 >> 2];
 HEAP32[$0 + 432 >> 2] = $1;
 HEAP32[$0 + 436 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2PrismaticJoint____29_28bool_29___invoke_b2PrismaticJoint__28char_20const__2c_20void_20_28b2PrismaticJoint____29_28bool_29_29($4, $0 + 432 | 0);
 HEAP32[$0 + 2440 >> 2] = 0;
 HEAP32[$0 + 2436 >> 2] = 312;
 $1 = HEAP32[$0 + 2440 >> 2];
 $2 = HEAP32[$0 + 2436 >> 2];
 HEAP32[$0 + 12296 >> 2] = $2;
 HEAP32[$0 + 12300 >> 2] = $1;
 $1 = HEAP32[$0 + 12296 >> 2];
 $2 = HEAP32[$0 + 12300 >> 2];
 HEAP32[$0 + 12324 >> 2] = $3;
 HEAP32[$0 + 12320 >> 2] = 10168;
 HEAP32[$0 + 12316 >> 2] = $2;
 HEAP32[$0 + 12312 >> 2] = $1;
 $3 = HEAP32[$0 + 12324 >> 2];
 $4 = HEAP32[$0 + 12320 >> 2];
 $1 = HEAP32[$0 + 12312 >> 2];
 HEAP32[$0 + 12308 >> 2] = HEAP32[$0 + 12316 >> 2];
 HEAP32[$0 + 12304 >> 2] = $1;
 $2 = HEAP32[$0 + 12308 >> 2];
 $1 = HEAP32[$0 + 12304 >> 2];
 HEAP32[$0 + 424 >> 2] = $1;
 HEAP32[$0 + 428 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2PrismaticJoint____29_28float_29___invoke_b2PrismaticJoint__28char_20const__2c_20void_20_28b2PrismaticJoint____29_28float_29_29($4, $0 + 424 | 0);
 HEAP32[$0 + 2432 >> 2] = 0;
 HEAP32[$0 + 2428 >> 2] = 313;
 $1 = HEAP32[$0 + 2432 >> 2];
 $2 = HEAP32[$0 + 2428 >> 2];
 HEAP32[$0 + 11912 >> 2] = $2;
 HEAP32[$0 + 11916 >> 2] = $1;
 $1 = HEAP32[$0 + 11912 >> 2];
 $2 = HEAP32[$0 + 11916 >> 2];
 HEAP32[$0 + 11940 >> 2] = $3;
 HEAP32[$0 + 11936 >> 2] = 10182;
 HEAP32[$0 + 11932 >> 2] = $2;
 HEAP32[$0 + 11928 >> 2] = $1;
 $3 = HEAP32[$0 + 11940 >> 2];
 $4 = HEAP32[$0 + 11936 >> 2];
 $1 = HEAP32[$0 + 11928 >> 2];
 HEAP32[$0 + 11924 >> 2] = HEAP32[$0 + 11932 >> 2];
 HEAP32[$0 + 11920 >> 2] = $1;
 $2 = HEAP32[$0 + 11924 >> 2];
 $1 = HEAP32[$0 + 11920 >> 2];
 HEAP32[$0 + 416 >> 2] = $1;
 HEAP32[$0 + 420 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2PrismaticJoint____29_28_29_20const___invoke_b2PrismaticJoint__28char_20const__2c_20float_20_28b2PrismaticJoint____29_28_29_20const_29($4, $0 + 416 | 0);
 HEAP32[$0 + 2424 >> 2] = 0;
 HEAP32[$0 + 2420 >> 2] = 314;
 $1 = HEAP32[$0 + 2424 >> 2];
 $2 = HEAP32[$0 + 2420 >> 2];
 HEAP32[$0 + 12264 >> 2] = $2;
 HEAP32[$0 + 12268 >> 2] = $1;
 $1 = HEAP32[$0 + 12264 >> 2];
 $2 = HEAP32[$0 + 12268 >> 2];
 HEAP32[$0 + 12292 >> 2] = $3;
 HEAP32[$0 + 12288 >> 2] = 9718;
 HEAP32[$0 + 12284 >> 2] = $2;
 HEAP32[$0 + 12280 >> 2] = $1;
 $3 = HEAP32[$0 + 12292 >> 2];
 $4 = HEAP32[$0 + 12288 >> 2];
 $1 = HEAP32[$0 + 12280 >> 2];
 HEAP32[$0 + 12276 >> 2] = HEAP32[$0 + 12284 >> 2];
 HEAP32[$0 + 12272 >> 2] = $1;
 $2 = HEAP32[$0 + 12276 >> 2];
 $1 = HEAP32[$0 + 12272 >> 2];
 HEAP32[$0 + 408 >> 2] = $1;
 HEAP32[$0 + 412 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2PrismaticJoint____29_28float_29___invoke_b2PrismaticJoint__28char_20const__2c_20void_20_28b2PrismaticJoint____29_28float_29_29($4, $0 + 408 | 0);
 HEAP32[$0 + 2416 >> 2] = 0;
 HEAP32[$0 + 2412 >> 2] = 315;
 $1 = HEAP32[$0 + 2416 >> 2];
 $2 = HEAP32[$0 + 2412 >> 2];
 HEAP32[$0 + 11880 >> 2] = $2;
 HEAP32[$0 + 11884 >> 2] = $1;
 $1 = HEAP32[$0 + 11880 >> 2];
 $2 = HEAP32[$0 + 11884 >> 2];
 HEAP32[$0 + 11908 >> 2] = $3;
 HEAP32[$0 + 11904 >> 2] = 9735;
 HEAP32[$0 + 11900 >> 2] = $2;
 HEAP32[$0 + 11896 >> 2] = $1;
 $3 = HEAP32[$0 + 11908 >> 2];
 $4 = HEAP32[$0 + 11904 >> 2];
 $1 = HEAP32[$0 + 11896 >> 2];
 HEAP32[$0 + 11892 >> 2] = HEAP32[$0 + 11900 >> 2];
 HEAP32[$0 + 11888 >> 2] = $1;
 $2 = HEAP32[$0 + 11892 >> 2];
 $1 = HEAP32[$0 + 11888 >> 2];
 HEAP32[$0 + 400 >> 2] = $1;
 HEAP32[$0 + 404 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2PrismaticJoint____29_28_29_20const___invoke_b2PrismaticJoint__28char_20const__2c_20float_20_28b2PrismaticJoint____29_28_29_20const_29($4, $0 + 400 | 0);
 HEAP32[$0 + 2408 >> 2] = 0;
 HEAP32[$0 + 2404 >> 2] = 316;
 $1 = HEAP32[$0 + 2408 >> 2];
 $2 = HEAP32[$0 + 2404 >> 2];
 HEAP32[$0 + 12328 >> 2] = $2;
 HEAP32[$0 + 12332 >> 2] = $1;
 $1 = HEAP32[$0 + 12328 >> 2];
 $2 = HEAP32[$0 + 12332 >> 2];
 HEAP32[$0 + 12356 >> 2] = $3;
 HEAP32[$0 + 12352 >> 2] = 9752;
 HEAP32[$0 + 12348 >> 2] = $2;
 HEAP32[$0 + 12344 >> 2] = $1;
 $3 = HEAP32[$0 + 12356 >> 2];
 $4 = HEAP32[$0 + 12352 >> 2];
 $1 = HEAP32[$0 + 12344 >> 2];
 HEAP32[$0 + 12340 >> 2] = HEAP32[$0 + 12348 >> 2];
 HEAP32[$0 + 12336 >> 2] = $1;
 $2 = HEAP32[$0 + 12340 >> 2];
 $1 = HEAP32[$0 + 12336 >> 2];
 HEAP32[$0 + 392 >> 2] = $1;
 HEAP32[$0 + 396 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2PrismaticJoint____29_28float_29_20const___invoke_b2PrismaticJoint__28char_20const__2c_20float_20_28b2PrismaticJoint____29_28float_29_20const_29($4, $0 + 392 | 0);
 HEAP32[$0 + 2400 >> 2] = 1;
 HEAP32[$0 + 2396 >> 2] = 16;
 $1 = HEAP32[$0 + 2400 >> 2];
 $2 = HEAP32[$0 + 2396 >> 2];
 HEAP32[$0 + 12360 >> 2] = $2;
 HEAP32[$0 + 12364 >> 2] = $1;
 $1 = HEAP32[$0 + 12360 >> 2];
 $2 = HEAP32[$0 + 12364 >> 2];
 HEAP32[$0 + 12388 >> 2] = $3;
 HEAP32[$0 + 12384 >> 2] = 6119;
 HEAP32[$0 + 12380 >> 2] = $2;
 HEAP32[$0 + 12376 >> 2] = $1;
 $3 = HEAP32[$0 + 12384 >> 2];
 $1 = HEAP32[$0 + 12376 >> 2];
 HEAP32[$0 + 12372 >> 2] = HEAP32[$0 + 12380 >> 2];
 HEAP32[$0 + 12368 >> 2] = $1;
 $2 = HEAP32[$0 + 12372 >> 2];
 $1 = HEAP32[$0 + 12368 >> 2];
 HEAP32[$0 + 384 >> 2] = $1;
 HEAP32[$0 + 388 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2PrismaticJoint____29_28_29___invoke_b2PrismaticJoint__28char_20const__2c_20void_20_28b2PrismaticJoint____29_28_29_29($3, $0 + 384 | 0);
 HEAP32[$0 + 12412 >> 2] = $0 + 2395;
 HEAP32[$0 + 12408 >> 2] = 7743;
 void_20emscripten__base_b2JointDef___verify_b2RevoluteJointDef__28_29();
 HEAP32[$0 + 12404 >> 2] = 317;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2JointDef__20_28_emscripten__base_b2JointDef___getUpcaster_b2RevoluteJointDef__28_29_29_28b2RevoluteJointDef__29(), 
 HEAP32[wasm2js_i32$0 + 12400 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2RevoluteJointDef__20_28_emscripten__base_b2JointDef___getDowncaster_b2RevoluteJointDef__28_29_29_28b2JointDef__29(), 
 HEAP32[wasm2js_i32$0 + 12396 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 12392 >> 2] = 318;
 $1 = emscripten__internal__TypeID_b2RevoluteJointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RevoluteJointDef__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RevoluteJointDef_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2JointDef___get_28_29();
 HEAP32[$0 + 15928 >> 2] = HEAP32[$0 + 12404 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 12404 >> 2];
 HEAP32[$0 + 15932 >> 2] = HEAP32[$0 + 12400 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 12400 >> 2];
 HEAP32[$0 + 15936 >> 2] = HEAP32[$0 + 12396 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 12396 >> 2];
 $11 = HEAP32[$0 + 12408 >> 2];
 HEAP32[$0 + 15940 >> 2] = HEAP32[$0 + 12392 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 12392 >> 2]);
 HEAP32[$0 + 12416 >> 2] = $0 + 2395;
 HEAP32[$0 + 15948 >> 2] = HEAP32[$0 + 12416 >> 2];
 HEAP32[$0 + 15944 >> 2] = 319;
 $1 = HEAP32[$0 + 15948 >> 2];
 void_20emscripten__internal__RegisterClassConstructor_b2RevoluteJointDef__20_28__29_28_29___invoke_b2RevoluteJointDef__28b2RevoluteJointDef__20_28__29_28_29_29(HEAP32[$0 + 15944 >> 2]);
 HEAP32[$0 + 12456 >> 2] = $1;
 HEAP32[$0 + 12452 >> 2] = 10962;
 HEAP32[$0 + 12448 >> 2] = 20;
 $1 = HEAP32[$0 + 12456 >> 2];
 HEAP32[$0 + 12444 >> 2] = 320;
 HEAP32[$0 + 12440 >> 2] = 321;
 $2 = emscripten__internal__TypeID_b2RevoluteJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 12452 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15952 >> 2] = HEAP32[$0 + 12444 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 12444 >> 2];
 $7 = b2Vec2_20b2RevoluteJointDef_____20emscripten__internal__getContext_b2Vec2_20b2RevoluteJointDef_____28b2Vec2_20b2RevoluteJointDef____20const__29($0 + 12448 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15960 >> 2] = HEAP32[$0 + 12440 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 12440 >> 2], b2Vec2_20b2RevoluteJointDef_____20emscripten__internal__getContext_b2Vec2_20b2RevoluteJointDef_____28b2Vec2_20b2RevoluteJointDef____20const__29($0 + 12448 | 0) | 0);
 HEAP32[$0 + 12436 >> 2] = $1;
 HEAP32[$0 + 12432 >> 2] = 10819;
 HEAP32[$0 + 12428 >> 2] = 28;
 $1 = HEAP32[$0 + 12436 >> 2];
 HEAP32[$0 + 12424 >> 2] = 320;
 HEAP32[$0 + 12420 >> 2] = 321;
 $2 = emscripten__internal__TypeID_b2RevoluteJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 12432 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15956 >> 2] = HEAP32[$0 + 12424 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 12424 >> 2];
 $7 = b2Vec2_20b2RevoluteJointDef_____20emscripten__internal__getContext_b2Vec2_20b2RevoluteJointDef_____28b2Vec2_20b2RevoluteJointDef____20const__29($0 + 12428 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 15964 >> 2] = HEAP32[$0 + 12420 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 12420 >> 2], b2Vec2_20b2RevoluteJointDef_____20emscripten__internal__getContext_b2Vec2_20b2RevoluteJointDef_____28b2Vec2_20b2RevoluteJointDef____20const__29($0 + 12428 | 0) | 0);
 HEAP32[$0 + 12556 >> 2] = $1;
 HEAP32[$0 + 12552 >> 2] = 9279;
 HEAP32[$0 + 12548 >> 2] = 36;
 $1 = HEAP32[$0 + 12556 >> 2];
 HEAP32[$0 + 12544 >> 2] = 322;
 HEAP32[$0 + 12540 >> 2] = 323;
 $2 = emscripten__internal__TypeID_b2RevoluteJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 12552 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15968 >> 2] = HEAP32[$0 + 12544 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 12544 >> 2];
 $7 = float_20b2RevoluteJointDef_____20emscripten__internal__getContext_float_20b2RevoluteJointDef_____28float_20b2RevoluteJointDef____20const__29($0 + 12548 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15988 >> 2] = HEAP32[$0 + 12540 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 12540 >> 2], float_20b2RevoluteJointDef_____20emscripten__internal__getContext_float_20b2RevoluteJointDef_____28float_20b2RevoluteJointDef____20const__29($0 + 12548 | 0) | 0);
 HEAP32[$0 + 12596 >> 2] = $1;
 HEAP32[$0 + 12592 >> 2] = 2911;
 HEAP32[$0 + 12588 >> 2] = 40;
 $1 = HEAP32[$0 + 12596 >> 2];
 HEAP32[$0 + 12584 >> 2] = 324;
 HEAP32[$0 + 12580 >> 2] = 325;
 $2 = emscripten__internal__TypeID_b2RevoluteJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 12592 >> 2];
 $4 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 16008 >> 2] = HEAP32[$0 + 12584 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 12584 >> 2];
 $7 = bool_20b2RevoluteJointDef_____20emscripten__internal__getContext_bool_20b2RevoluteJointDef_____28bool_20b2RevoluteJointDef____20const__29($0 + 12588 | 0);
 $8 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 16016 >> 2] = HEAP32[$0 + 12580 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 12580 >> 2], bool_20b2RevoluteJointDef_____20emscripten__internal__getContext_bool_20b2RevoluteJointDef_____28bool_20b2RevoluteJointDef____20const__29($0 + 12588 | 0) | 0);
 HEAP32[$0 + 12536 >> 2] = $1;
 HEAP32[$0 + 12532 >> 2] = 9257;
 HEAP32[$0 + 12528 >> 2] = 44;
 $1 = HEAP32[$0 + 12536 >> 2];
 HEAP32[$0 + 12524 >> 2] = 322;
 HEAP32[$0 + 12520 >> 2] = 323;
 $2 = emscripten__internal__TypeID_b2RevoluteJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 12532 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15972 >> 2] = HEAP32[$0 + 12524 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 12524 >> 2];
 $7 = float_20b2RevoluteJointDef_____20emscripten__internal__getContext_float_20b2RevoluteJointDef_____28float_20b2RevoluteJointDef____20const__29($0 + 12528 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15992 >> 2] = HEAP32[$0 + 12520 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 12520 >> 2], float_20b2RevoluteJointDef_____20emscripten__internal__getContext_float_20b2RevoluteJointDef_____28float_20b2RevoluteJointDef____20const__29($0 + 12528 | 0) | 0);
 HEAP32[$0 + 12516 >> 2] = $1;
 HEAP32[$0 + 12512 >> 2] = 9268;
 HEAP32[$0 + 12508 >> 2] = 48;
 $1 = HEAP32[$0 + 12516 >> 2];
 HEAP32[$0 + 12504 >> 2] = 322;
 HEAP32[$0 + 12500 >> 2] = 323;
 $2 = emscripten__internal__TypeID_b2RevoluteJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 12512 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15976 >> 2] = HEAP32[$0 + 12504 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 12504 >> 2];
 $7 = float_20b2RevoluteJointDef_____20emscripten__internal__getContext_float_20b2RevoluteJointDef_____28float_20b2RevoluteJointDef____20const__29($0 + 12508 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15996 >> 2] = HEAP32[$0 + 12500 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 12500 >> 2], float_20b2RevoluteJointDef_____20emscripten__internal__getContext_float_20b2RevoluteJointDef_____28float_20b2RevoluteJointDef____20const__29($0 + 12508 | 0) | 0);
 HEAP32[$0 + 12576 >> 2] = $1;
 HEAP32[$0 + 12572 >> 2] = 3643;
 HEAP32[$0 + 12568 >> 2] = 52;
 $1 = HEAP32[$0 + 12576 >> 2];
 HEAP32[$0 + 12564 >> 2] = 324;
 HEAP32[$0 + 12560 >> 2] = 325;
 $2 = emscripten__internal__TypeID_b2RevoluteJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 12572 >> 2];
 $4 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 16012 >> 2] = HEAP32[$0 + 12564 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 12564 >> 2];
 $7 = bool_20b2RevoluteJointDef_____20emscripten__internal__getContext_bool_20b2RevoluteJointDef_____28bool_20b2RevoluteJointDef____20const__29($0 + 12568 | 0);
 $8 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 16020 >> 2] = HEAP32[$0 + 12560 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 12560 >> 2], bool_20b2RevoluteJointDef_____20emscripten__internal__getContext_bool_20b2RevoluteJointDef_____28bool_20b2RevoluteJointDef____20const__29($0 + 12568 | 0) | 0);
 HEAP32[$0 + 12496 >> 2] = $1;
 HEAP32[$0 + 12492 >> 2] = 10157;
 HEAP32[$0 + 12488 >> 2] = 56;
 $1 = HEAP32[$0 + 12496 >> 2];
 HEAP32[$0 + 12484 >> 2] = 322;
 HEAP32[$0 + 12480 >> 2] = 323;
 $2 = emscripten__internal__TypeID_b2RevoluteJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 12492 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15980 >> 2] = HEAP32[$0 + 12484 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 12484 >> 2];
 $7 = float_20b2RevoluteJointDef_____20emscripten__internal__getContext_float_20b2RevoluteJointDef_____28float_20b2RevoluteJointDef____20const__29($0 + 12488 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16e3 >> 2] = HEAP32[$0 + 12480 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 12480 >> 2], float_20b2RevoluteJointDef_____20emscripten__internal__getContext_float_20b2RevoluteJointDef_____28float_20b2RevoluteJointDef____20const__29($0 + 12488 | 0) | 0);
 HEAP32[$0 + 12476 >> 2] = $1;
 HEAP32[$0 + 12472 >> 2] = 8619;
 HEAP32[$0 + 12468 >> 2] = 60;
 HEAP32[$0 + 12464 >> 2] = 322;
 HEAP32[$0 + 12460 >> 2] = 323;
 $1 = emscripten__internal__TypeID_b2RevoluteJointDef_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 12472 >> 2];
 $3 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 15984 >> 2] = HEAP32[$0 + 12464 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $5 = HEAP32[$0 + 12464 >> 2];
 $6 = float_20b2RevoluteJointDef_____20emscripten__internal__getContext_float_20b2RevoluteJointDef_____28float_20b2RevoluteJointDef____20const__29($0 + 12468 | 0);
 $7 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16004 >> 2] = HEAP32[$0 + 12460 >> 2];
 _embind_register_class_property($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 12460 >> 2], float_20b2RevoluteJointDef_____20emscripten__internal__getContext_float_20b2RevoluteJointDef_____28float_20b2RevoluteJointDef____20const__29($0 + 12468 | 0) | 0);
 HEAP32[$0 + 12620 >> 2] = $0 + 2394;
 HEAP32[$0 + 12616 >> 2] = 2636;
 void_20emscripten__base_b2Joint___verify_b2RevoluteJoint__28_29();
 HEAP32[$0 + 12612 >> 2] = 326;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Joint__20_28_emscripten__base_b2Joint___getUpcaster_b2RevoluteJoint__28_29_29_28b2RevoluteJoint__29(), 
 HEAP32[wasm2js_i32$0 + 12608 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2RevoluteJoint__20_28_emscripten__base_b2Joint___getDowncaster_b2RevoluteJoint__28_29_29_28b2Joint__29(), 
 HEAP32[wasm2js_i32$0 + 12604 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 12600 >> 2] = 327;
 $1 = emscripten__internal__TypeID_b2RevoluteJoint_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2Joint___get_28_29();
 HEAP32[$0 + 16024 >> 2] = HEAP32[$0 + 12612 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 12612 >> 2];
 HEAP32[$0 + 16028 >> 2] = HEAP32[$0 + 12608 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 12608 >> 2];
 HEAP32[$0 + 16032 >> 2] = HEAP32[$0 + 12604 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 12604 >> 2];
 $11 = HEAP32[$0 + 12616 >> 2];
 HEAP32[$0 + 16036 >> 2] = HEAP32[$0 + 12600 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 12600 >> 2]);
 HEAP32[$0 + 2388 >> 2] = 0;
 HEAP32[$0 + 2384 >> 2] = 328;
 $1 = HEAP32[$0 + 2388 >> 2];
 $2 = HEAP32[$0 + 2384 >> 2];
 HEAP32[$0 + 12656 >> 2] = $2;
 HEAP32[$0 + 12660 >> 2] = $1;
 $1 = HEAP32[$0 + 12656 >> 2];
 $2 = HEAP32[$0 + 12660 >> 2];
 HEAP32[$0 + 12684 >> 2] = $0 + 2394;
 HEAP32[$0 + 12680 >> 2] = 10975;
 HEAP32[$0 + 12676 >> 2] = $2;
 HEAP32[$0 + 12672 >> 2] = $1;
 $3 = HEAP32[$0 + 12684 >> 2];
 $4 = HEAP32[$0 + 12680 >> 2];
 $1 = HEAP32[$0 + 12672 >> 2];
 HEAP32[$0 + 12668 >> 2] = HEAP32[$0 + 12676 >> 2];
 HEAP32[$0 + 12664 >> 2] = $1;
 $2 = HEAP32[$0 + 12668 >> 2];
 $1 = HEAP32[$0 + 12664 >> 2];
 HEAP32[$0 + 376 >> 2] = $1;
 HEAP32[$0 + 380 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2RevoluteJoint____29_28_29_20const___invoke_b2RevoluteJoint__28char_20const__2c_20b2Vec2_20const__20_28b2RevoluteJoint____29_28_29_20const_29($4, $0 + 376 | 0);
 HEAP32[$0 + 2380 >> 2] = 0;
 HEAP32[$0 + 2376 >> 2] = 329;
 $1 = HEAP32[$0 + 2380 >> 2];
 $2 = HEAP32[$0 + 2376 >> 2];
 HEAP32[$0 + 12624 >> 2] = $2;
 HEAP32[$0 + 12628 >> 2] = $1;
 $1 = HEAP32[$0 + 12624 >> 2];
 $2 = HEAP32[$0 + 12628 >> 2];
 HEAP32[$0 + 12652 >> 2] = $3;
 HEAP32[$0 + 12648 >> 2] = 10832;
 HEAP32[$0 + 12644 >> 2] = $2;
 HEAP32[$0 + 12640 >> 2] = $1;
 $3 = HEAP32[$0 + 12652 >> 2];
 $4 = HEAP32[$0 + 12648 >> 2];
 $1 = HEAP32[$0 + 12640 >> 2];
 HEAP32[$0 + 12636 >> 2] = HEAP32[$0 + 12644 >> 2];
 HEAP32[$0 + 12632 >> 2] = $1;
 $2 = HEAP32[$0 + 12636 >> 2];
 $1 = HEAP32[$0 + 12632 >> 2];
 HEAP32[$0 + 368 >> 2] = $1;
 HEAP32[$0 + 372 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2RevoluteJoint____29_28_29_20const___invoke_b2RevoluteJoint__28char_20const__2c_20b2Vec2_20const__20_28b2RevoluteJoint____29_28_29_20const_29($4, $0 + 368 | 0);
 HEAP32[$0 + 2372 >> 2] = 0;
 HEAP32[$0 + 2368 >> 2] = 330;
 $1 = HEAP32[$0 + 2372 >> 2];
 $2 = HEAP32[$0 + 2368 >> 2];
 HEAP32[$0 + 12880 >> 2] = $2;
 HEAP32[$0 + 12884 >> 2] = $1;
 $1 = HEAP32[$0 + 12880 >> 2];
 $2 = HEAP32[$0 + 12884 >> 2];
 HEAP32[$0 + 12908 >> 2] = $3;
 HEAP32[$0 + 12904 >> 2] = 9294;
 HEAP32[$0 + 12900 >> 2] = $2;
 HEAP32[$0 + 12896 >> 2] = $1;
 $3 = HEAP32[$0 + 12908 >> 2];
 $4 = HEAP32[$0 + 12904 >> 2];
 $1 = HEAP32[$0 + 12896 >> 2];
 HEAP32[$0 + 12892 >> 2] = HEAP32[$0 + 12900 >> 2];
 HEAP32[$0 + 12888 >> 2] = $1;
 $2 = HEAP32[$0 + 12892 >> 2];
 $1 = HEAP32[$0 + 12888 >> 2];
 HEAP32[$0 + 360 >> 2] = $1;
 HEAP32[$0 + 364 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2RevoluteJoint____29_28_29_20const___invoke_b2RevoluteJoint__28char_20const__2c_20float_20_28b2RevoluteJoint____29_28_29_20const_29($4, $0 + 360 | 0);
 HEAP32[$0 + 2364 >> 2] = 0;
 HEAP32[$0 + 2360 >> 2] = 331;
 $1 = HEAP32[$0 + 2364 >> 2];
 $2 = HEAP32[$0 + 2360 >> 2];
 HEAP32[$0 + 12848 >> 2] = $2;
 HEAP32[$0 + 12852 >> 2] = $1;
 $1 = HEAP32[$0 + 12848 >> 2];
 $2 = HEAP32[$0 + 12852 >> 2];
 HEAP32[$0 + 12876 >> 2] = $3;
 HEAP32[$0 + 12872 >> 2] = 9234;
 HEAP32[$0 + 12868 >> 2] = $2;
 HEAP32[$0 + 12864 >> 2] = $1;
 $3 = HEAP32[$0 + 12876 >> 2];
 $4 = HEAP32[$0 + 12872 >> 2];
 $1 = HEAP32[$0 + 12864 >> 2];
 HEAP32[$0 + 12860 >> 2] = HEAP32[$0 + 12868 >> 2];
 HEAP32[$0 + 12856 >> 2] = $1;
 $2 = HEAP32[$0 + 12860 >> 2];
 $1 = HEAP32[$0 + 12856 >> 2];
 HEAP32[$0 + 352 >> 2] = $1;
 HEAP32[$0 + 356 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2RevoluteJoint____29_28_29_20const___invoke_b2RevoluteJoint__28char_20const__2c_20float_20_28b2RevoluteJoint____29_28_29_20const_29($4, $0 + 352 | 0);
 HEAP32[$0 + 2356 >> 2] = 0;
 HEAP32[$0 + 2352 >> 2] = 332;
 $1 = HEAP32[$0 + 2356 >> 2];
 $2 = HEAP32[$0 + 2352 >> 2];
 HEAP32[$0 + 12816 >> 2] = $2;
 HEAP32[$0 + 12820 >> 2] = $1;
 $1 = HEAP32[$0 + 12816 >> 2];
 $2 = HEAP32[$0 + 12820 >> 2];
 HEAP32[$0 + 12844 >> 2] = $3;
 HEAP32[$0 + 12840 >> 2] = 10097;
 HEAP32[$0 + 12836 >> 2] = $2;
 HEAP32[$0 + 12832 >> 2] = $1;
 $3 = HEAP32[$0 + 12844 >> 2];
 $4 = HEAP32[$0 + 12840 >> 2];
 $1 = HEAP32[$0 + 12832 >> 2];
 HEAP32[$0 + 12828 >> 2] = HEAP32[$0 + 12836 >> 2];
 HEAP32[$0 + 12824 >> 2] = $1;
 $2 = HEAP32[$0 + 12828 >> 2];
 $1 = HEAP32[$0 + 12824 >> 2];
 HEAP32[$0 + 344 >> 2] = $1;
 HEAP32[$0 + 348 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2RevoluteJoint____29_28_29_20const___invoke_b2RevoluteJoint__28char_20const__2c_20float_20_28b2RevoluteJoint____29_28_29_20const_29($4, $0 + 344 | 0);
 HEAP32[$0 + 2348 >> 2] = 0;
 HEAP32[$0 + 2344 >> 2] = 333;
 $1 = HEAP32[$0 + 2348 >> 2];
 $2 = HEAP32[$0 + 2344 >> 2];
 HEAP32[$0 + 12944 >> 2] = $2;
 HEAP32[$0 + 12948 >> 2] = $1;
 $1 = HEAP32[$0 + 12944 >> 2];
 $2 = HEAP32[$0 + 12948 >> 2];
 HEAP32[$0 + 12972 >> 2] = $3;
 HEAP32[$0 + 12968 >> 2] = 10039;
 HEAP32[$0 + 12964 >> 2] = $2;
 HEAP32[$0 + 12960 >> 2] = $1;
 $3 = HEAP32[$0 + 12972 >> 2];
 $4 = HEAP32[$0 + 12968 >> 2];
 $1 = HEAP32[$0 + 12960 >> 2];
 HEAP32[$0 + 12956 >> 2] = HEAP32[$0 + 12964 >> 2];
 HEAP32[$0 + 12952 >> 2] = $1;
 $2 = HEAP32[$0 + 12956 >> 2];
 $1 = HEAP32[$0 + 12952 >> 2];
 HEAP32[$0 + 336 >> 2] = $1;
 HEAP32[$0 + 340 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2RevoluteJoint____29_28_29_20const___invoke_b2RevoluteJoint__28char_20const__2c_20bool_20_28b2RevoluteJoint____29_28_29_20const_29($4, $0 + 336 | 0);
 HEAP32[$0 + 2340 >> 2] = 0;
 HEAP32[$0 + 2336 >> 2] = 334;
 $1 = HEAP32[$0 + 2340 >> 2];
 $2 = HEAP32[$0 + 2336 >> 2];
 HEAP32[$0 + 13008 >> 2] = $2;
 HEAP32[$0 + 13012 >> 2] = $1;
 $1 = HEAP32[$0 + 13008 >> 2];
 $2 = HEAP32[$0 + 13012 >> 2];
 HEAP32[$0 + 13036 >> 2] = $3;
 HEAP32[$0 + 13032 >> 2] = 2923;
 HEAP32[$0 + 13028 >> 2] = $2;
 HEAP32[$0 + 13024 >> 2] = $1;
 $3 = HEAP32[$0 + 13036 >> 2];
 $4 = HEAP32[$0 + 13032 >> 2];
 $1 = HEAP32[$0 + 13024 >> 2];
 HEAP32[$0 + 13020 >> 2] = HEAP32[$0 + 13028 >> 2];
 HEAP32[$0 + 13016 >> 2] = $1;
 $2 = HEAP32[$0 + 13020 >> 2];
 $1 = HEAP32[$0 + 13016 >> 2];
 HEAP32[$0 + 328 >> 2] = $1;
 HEAP32[$0 + 332 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2RevoluteJoint____29_28bool_29___invoke_b2RevoluteJoint__28char_20const__2c_20void_20_28b2RevoluteJoint____29_28bool_29_29($4, $0 + 328 | 0);
 HEAP32[$0 + 2332 >> 2] = 0;
 HEAP32[$0 + 2328 >> 2] = 335;
 $1 = HEAP32[$0 + 2332 >> 2];
 $2 = HEAP32[$0 + 2328 >> 2];
 HEAP32[$0 + 12784 >> 2] = $2;
 HEAP32[$0 + 12788 >> 2] = $1;
 $1 = HEAP32[$0 + 12784 >> 2];
 $2 = HEAP32[$0 + 12788 >> 2];
 HEAP32[$0 + 12812 >> 2] = $3;
 HEAP32[$0 + 12808 >> 2] = 2883;
 HEAP32[$0 + 12804 >> 2] = $2;
 HEAP32[$0 + 12800 >> 2] = $1;
 $3 = HEAP32[$0 + 12812 >> 2];
 $4 = HEAP32[$0 + 12808 >> 2];
 $1 = HEAP32[$0 + 12800 >> 2];
 HEAP32[$0 + 12796 >> 2] = HEAP32[$0 + 12804 >> 2];
 HEAP32[$0 + 12792 >> 2] = $1;
 $2 = HEAP32[$0 + 12796 >> 2];
 $1 = HEAP32[$0 + 12792 >> 2];
 HEAP32[$0 + 320 >> 2] = $1;
 HEAP32[$0 + 324 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2RevoluteJoint____29_28_29_20const___invoke_b2RevoluteJoint__28char_20const__2c_20float_20_28b2RevoluteJoint____29_28_29_20const_29($4, $0 + 320 | 0);
 HEAP32[$0 + 2324 >> 2] = 0;
 HEAP32[$0 + 2320 >> 2] = 336;
 $1 = HEAP32[$0 + 2324 >> 2];
 $2 = HEAP32[$0 + 2320 >> 2];
 HEAP32[$0 + 12752 >> 2] = $2;
 HEAP32[$0 + 12756 >> 2] = $1;
 $1 = HEAP32[$0 + 12752 >> 2];
 $2 = HEAP32[$0 + 12756 >> 2];
 HEAP32[$0 + 12780 >> 2] = $3;
 HEAP32[$0 + 12776 >> 2] = 2897;
 HEAP32[$0 + 12772 >> 2] = $2;
 HEAP32[$0 + 12768 >> 2] = $1;
 $3 = HEAP32[$0 + 12780 >> 2];
 $4 = HEAP32[$0 + 12776 >> 2];
 $1 = HEAP32[$0 + 12768 >> 2];
 HEAP32[$0 + 12764 >> 2] = HEAP32[$0 + 12772 >> 2];
 HEAP32[$0 + 12760 >> 2] = $1;
 $2 = HEAP32[$0 + 12764 >> 2];
 $1 = HEAP32[$0 + 12760 >> 2];
 HEAP32[$0 + 312 >> 2] = $1;
 HEAP32[$0 + 316 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2RevoluteJoint____29_28_29_20const___invoke_b2RevoluteJoint__28char_20const__2c_20float_20_28b2RevoluteJoint____29_28_29_20const_29($4, $0 + 312 | 0);
 HEAP32[$0 + 2316 >> 2] = 0;
 HEAP32[$0 + 2312 >> 2] = 337;
 $1 = HEAP32[$0 + 2316 >> 2];
 $2 = HEAP32[$0 + 2312 >> 2];
 HEAP32[$0 + 13040 >> 2] = $2;
 HEAP32[$0 + 13044 >> 2] = $1;
 $1 = HEAP32[$0 + 13040 >> 2];
 $2 = HEAP32[$0 + 13044 >> 2];
 HEAP32[$0 + 13068 >> 2] = $3;
 HEAP32[$0 + 13064 >> 2] = 3417;
 HEAP32[$0 + 13060 >> 2] = $2;
 HEAP32[$0 + 13056 >> 2] = $1;
 $3 = HEAP32[$0 + 13068 >> 2];
 $4 = HEAP32[$0 + 13064 >> 2];
 $1 = HEAP32[$0 + 13056 >> 2];
 HEAP32[$0 + 13052 >> 2] = HEAP32[$0 + 13060 >> 2];
 HEAP32[$0 + 13048 >> 2] = $1;
 $2 = HEAP32[$0 + 13052 >> 2];
 $1 = HEAP32[$0 + 13048 >> 2];
 HEAP32[$0 + 304 >> 2] = $1;
 HEAP32[$0 + 308 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2RevoluteJoint____29_28float_2c_20float_29___invoke_b2RevoluteJoint__28char_20const__2c_20void_20_28b2RevoluteJoint____29_28float_2c_20float_29_29($4, $0 + 304 | 0);
 HEAP32[$0 + 2308 >> 2] = 0;
 HEAP32[$0 + 2304 >> 2] = 338;
 $1 = HEAP32[$0 + 2308 >> 2];
 $2 = HEAP32[$0 + 2304 >> 2];
 HEAP32[$0 + 12912 >> 2] = $2;
 HEAP32[$0 + 12916 >> 2] = $1;
 $1 = HEAP32[$0 + 12912 >> 2];
 $2 = HEAP32[$0 + 12916 >> 2];
 HEAP32[$0 + 12940 >> 2] = $3;
 HEAP32[$0 + 12936 >> 2] = 10082;
 HEAP32[$0 + 12932 >> 2] = $2;
 HEAP32[$0 + 12928 >> 2] = $1;
 $3 = HEAP32[$0 + 12940 >> 2];
 $4 = HEAP32[$0 + 12936 >> 2];
 $1 = HEAP32[$0 + 12928 >> 2];
 HEAP32[$0 + 12924 >> 2] = HEAP32[$0 + 12932 >> 2];
 HEAP32[$0 + 12920 >> 2] = $1;
 $2 = HEAP32[$0 + 12924 >> 2];
 $1 = HEAP32[$0 + 12920 >> 2];
 HEAP32[$0 + 296 >> 2] = $1;
 HEAP32[$0 + 300 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2RevoluteJoint____29_28_29_20const___invoke_b2RevoluteJoint__28char_20const__2c_20bool_20_28b2RevoluteJoint____29_28_29_20const_29($4, $0 + 296 | 0);
 HEAP32[$0 + 2300 >> 2] = 0;
 HEAP32[$0 + 2296 >> 2] = 339;
 $1 = HEAP32[$0 + 2300 >> 2];
 $2 = HEAP32[$0 + 2296 >> 2];
 HEAP32[$0 + 12976 >> 2] = $2;
 HEAP32[$0 + 12980 >> 2] = $1;
 $1 = HEAP32[$0 + 12976 >> 2];
 $2 = HEAP32[$0 + 12980 >> 2];
 HEAP32[$0 + 13004 >> 2] = $3;
 HEAP32[$0 + 13e3 >> 2] = 3655;
 HEAP32[$0 + 12996 >> 2] = $2;
 HEAP32[$0 + 12992 >> 2] = $1;
 $3 = HEAP32[$0 + 13004 >> 2];
 $4 = HEAP32[$0 + 13e3 >> 2];
 $1 = HEAP32[$0 + 12992 >> 2];
 HEAP32[$0 + 12988 >> 2] = HEAP32[$0 + 12996 >> 2];
 HEAP32[$0 + 12984 >> 2] = $1;
 $2 = HEAP32[$0 + 12988 >> 2];
 $1 = HEAP32[$0 + 12984 >> 2];
 HEAP32[$0 + 288 >> 2] = $1;
 HEAP32[$0 + 292 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2RevoluteJoint____29_28bool_29___invoke_b2RevoluteJoint__28char_20const__2c_20void_20_28b2RevoluteJoint____29_28bool_29_29($4, $0 + 288 | 0);
 HEAP32[$0 + 2292 >> 2] = 0;
 HEAP32[$0 + 2288 >> 2] = 340;
 $1 = HEAP32[$0 + 2292 >> 2];
 $2 = HEAP32[$0 + 2288 >> 2];
 HEAP32[$0 + 13104 >> 2] = $2;
 HEAP32[$0 + 13108 >> 2] = $1;
 $1 = HEAP32[$0 + 13104 >> 2];
 $2 = HEAP32[$0 + 13108 >> 2];
 HEAP32[$0 + 13132 >> 2] = $3;
 HEAP32[$0 + 13128 >> 2] = 10168;
 HEAP32[$0 + 13124 >> 2] = $2;
 HEAP32[$0 + 13120 >> 2] = $1;
 $3 = HEAP32[$0 + 13132 >> 2];
 $4 = HEAP32[$0 + 13128 >> 2];
 $1 = HEAP32[$0 + 13120 >> 2];
 HEAP32[$0 + 13116 >> 2] = HEAP32[$0 + 13124 >> 2];
 HEAP32[$0 + 13112 >> 2] = $1;
 $2 = HEAP32[$0 + 13116 >> 2];
 $1 = HEAP32[$0 + 13112 >> 2];
 HEAP32[$0 + 280 >> 2] = $1;
 HEAP32[$0 + 284 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2RevoluteJoint____29_28float_29___invoke_b2RevoluteJoint__28char_20const__2c_20void_20_28b2RevoluteJoint____29_28float_29_29($4, $0 + 280 | 0);
 HEAP32[$0 + 2284 >> 2] = 0;
 HEAP32[$0 + 2280 >> 2] = 341;
 $1 = HEAP32[$0 + 2284 >> 2];
 $2 = HEAP32[$0 + 2280 >> 2];
 HEAP32[$0 + 12720 >> 2] = $2;
 HEAP32[$0 + 12724 >> 2] = $1;
 $1 = HEAP32[$0 + 12720 >> 2];
 $2 = HEAP32[$0 + 12724 >> 2];
 HEAP32[$0 + 12748 >> 2] = $3;
 HEAP32[$0 + 12744 >> 2] = 10182;
 HEAP32[$0 + 12740 >> 2] = $2;
 HEAP32[$0 + 12736 >> 2] = $1;
 $3 = HEAP32[$0 + 12748 >> 2];
 $4 = HEAP32[$0 + 12744 >> 2];
 $1 = HEAP32[$0 + 12736 >> 2];
 HEAP32[$0 + 12732 >> 2] = HEAP32[$0 + 12740 >> 2];
 HEAP32[$0 + 12728 >> 2] = $1;
 $2 = HEAP32[$0 + 12732 >> 2];
 $1 = HEAP32[$0 + 12728 >> 2];
 HEAP32[$0 + 272 >> 2] = $1;
 HEAP32[$0 + 276 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2RevoluteJoint____29_28_29_20const___invoke_b2RevoluteJoint__28char_20const__2c_20float_20_28b2RevoluteJoint____29_28_29_20const_29($4, $0 + 272 | 0);
 HEAP32[$0 + 2276 >> 2] = 0;
 HEAP32[$0 + 2272 >> 2] = 342;
 $1 = HEAP32[$0 + 2276 >> 2];
 $2 = HEAP32[$0 + 2272 >> 2];
 HEAP32[$0 + 13072 >> 2] = $2;
 HEAP32[$0 + 13076 >> 2] = $1;
 $1 = HEAP32[$0 + 13072 >> 2];
 $2 = HEAP32[$0 + 13076 >> 2];
 HEAP32[$0 + 13100 >> 2] = $3;
 HEAP32[$0 + 13096 >> 2] = 8634;
 HEAP32[$0 + 13092 >> 2] = $2;
 HEAP32[$0 + 13088 >> 2] = $1;
 $3 = HEAP32[$0 + 13100 >> 2];
 $4 = HEAP32[$0 + 13096 >> 2];
 $1 = HEAP32[$0 + 13088 >> 2];
 HEAP32[$0 + 13084 >> 2] = HEAP32[$0 + 13092 >> 2];
 HEAP32[$0 + 13080 >> 2] = $1;
 $2 = HEAP32[$0 + 13084 >> 2];
 $1 = HEAP32[$0 + 13080 >> 2];
 HEAP32[$0 + 264 >> 2] = $1;
 HEAP32[$0 + 268 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2RevoluteJoint____29_28float_29___invoke_b2RevoluteJoint__28char_20const__2c_20void_20_28b2RevoluteJoint____29_28float_29_29($4, $0 + 264 | 0);
 HEAP32[$0 + 2268 >> 2] = 0;
 HEAP32[$0 + 2264 >> 2] = 343;
 $1 = HEAP32[$0 + 2268 >> 2];
 $2 = HEAP32[$0 + 2264 >> 2];
 HEAP32[$0 + 12688 >> 2] = $2;
 HEAP32[$0 + 12692 >> 2] = $1;
 $1 = HEAP32[$0 + 12688 >> 2];
 $2 = HEAP32[$0 + 12692 >> 2];
 HEAP32[$0 + 12716 >> 2] = $3;
 HEAP32[$0 + 12712 >> 2] = 8652;
 HEAP32[$0 + 12708 >> 2] = $2;
 HEAP32[$0 + 12704 >> 2] = $1;
 $3 = HEAP32[$0 + 12716 >> 2];
 $4 = HEAP32[$0 + 12712 >> 2];
 $1 = HEAP32[$0 + 12704 >> 2];
 HEAP32[$0 + 12700 >> 2] = HEAP32[$0 + 12708 >> 2];
 HEAP32[$0 + 12696 >> 2] = $1;
 $2 = HEAP32[$0 + 12700 >> 2];
 $1 = HEAP32[$0 + 12696 >> 2];
 HEAP32[$0 + 256 >> 2] = $1;
 HEAP32[$0 + 260 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2RevoluteJoint____29_28_29_20const___invoke_b2RevoluteJoint__28char_20const__2c_20float_20_28b2RevoluteJoint____29_28_29_20const_29($4, $0 + 256 | 0);
 HEAP32[$0 + 2260 >> 2] = 0;
 HEAP32[$0 + 2256 >> 2] = 344;
 $1 = HEAP32[$0 + 2260 >> 2];
 $2 = HEAP32[$0 + 2256 >> 2];
 HEAP32[$0 + 13136 >> 2] = $2;
 HEAP32[$0 + 13140 >> 2] = $1;
 $1 = HEAP32[$0 + 13136 >> 2];
 $2 = HEAP32[$0 + 13140 >> 2];
 HEAP32[$0 + 13164 >> 2] = $3;
 HEAP32[$0 + 13160 >> 2] = 8670;
 HEAP32[$0 + 13156 >> 2] = $2;
 HEAP32[$0 + 13152 >> 2] = $1;
 $3 = HEAP32[$0 + 13164 >> 2];
 $4 = HEAP32[$0 + 13160 >> 2];
 $1 = HEAP32[$0 + 13152 >> 2];
 HEAP32[$0 + 13148 >> 2] = HEAP32[$0 + 13156 >> 2];
 HEAP32[$0 + 13144 >> 2] = $1;
 $2 = HEAP32[$0 + 13148 >> 2];
 $1 = HEAP32[$0 + 13144 >> 2];
 HEAP32[$0 + 248 >> 2] = $1;
 HEAP32[$0 + 252 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2RevoluteJoint____29_28float_29_20const___invoke_b2RevoluteJoint__28char_20const__2c_20float_20_28b2RevoluteJoint____29_28float_29_20const_29($4, $0 + 248 | 0);
 HEAP32[$0 + 2252 >> 2] = 1;
 HEAP32[$0 + 2248 >> 2] = 16;
 $1 = HEAP32[$0 + 2252 >> 2];
 $2 = HEAP32[$0 + 2248 >> 2];
 HEAP32[$0 + 13168 >> 2] = $2;
 HEAP32[$0 + 13172 >> 2] = $1;
 $1 = HEAP32[$0 + 13168 >> 2];
 $2 = HEAP32[$0 + 13172 >> 2];
 HEAP32[$0 + 13196 >> 2] = $3;
 HEAP32[$0 + 13192 >> 2] = 6119;
 HEAP32[$0 + 13188 >> 2] = $2;
 HEAP32[$0 + 13184 >> 2] = $1;
 $3 = HEAP32[$0 + 13192 >> 2];
 $1 = HEAP32[$0 + 13184 >> 2];
 HEAP32[$0 + 13180 >> 2] = HEAP32[$0 + 13188 >> 2];
 HEAP32[$0 + 13176 >> 2] = $1;
 $2 = HEAP32[$0 + 13180 >> 2];
 $1 = HEAP32[$0 + 13176 >> 2];
 HEAP32[$0 + 240 >> 2] = $1;
 HEAP32[$0 + 244 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2RevoluteJoint____29_28_29___invoke_b2RevoluteJoint__28char_20const__2c_20void_20_28b2RevoluteJoint____29_28_29_29($3, $0 + 240 | 0);
 HEAP32[$0 + 13220 >> 2] = $0 + 2247;
 HEAP32[$0 + 13216 >> 2] = 7774;
 void_20emscripten__base_b2JointDef___verify_b2RopeJointDef__28_29();
 HEAP32[$0 + 13212 >> 2] = 345;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2JointDef__20_28_emscripten__base_b2JointDef___getUpcaster_b2RopeJointDef__28_29_29_28b2RopeJointDef__29(), 
 HEAP32[wasm2js_i32$0 + 13208 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2RopeJointDef__20_28_emscripten__base_b2JointDef___getDowncaster_b2RopeJointDef__28_29_29_28b2JointDef__29(), 
 HEAP32[wasm2js_i32$0 + 13204 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 13200 >> 2] = 346;
 $1 = emscripten__internal__TypeID_b2RopeJointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RopeJointDef__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RopeJointDef_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2JointDef___get_28_29();
 HEAP32[$0 + 16040 >> 2] = HEAP32[$0 + 13212 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 13212 >> 2];
 HEAP32[$0 + 16044 >> 2] = HEAP32[$0 + 13208 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 13208 >> 2];
 HEAP32[$0 + 16048 >> 2] = HEAP32[$0 + 13204 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 13204 >> 2];
 $11 = HEAP32[$0 + 13216 >> 2];
 HEAP32[$0 + 16052 >> 2] = HEAP32[$0 + 13200 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 13200 >> 2]);
 HEAP32[$0 + 13224 >> 2] = $0 + 2247;
 HEAP32[$0 + 16060 >> 2] = HEAP32[$0 + 13224 >> 2];
 HEAP32[$0 + 16056 >> 2] = 347;
 $1 = HEAP32[$0 + 16060 >> 2];
 void_20emscripten__internal__RegisterClassConstructor_b2RopeJointDef__20_28__29_28_29___invoke_b2RopeJointDef__28b2RopeJointDef__20_28__29_28_29_29(HEAP32[$0 + 16056 >> 2]);
 HEAP32[$0 + 13264 >> 2] = $1;
 HEAP32[$0 + 13260 >> 2] = 10962;
 HEAP32[$0 + 13256 >> 2] = 20;
 $1 = HEAP32[$0 + 13264 >> 2];
 HEAP32[$0 + 13252 >> 2] = 348;
 HEAP32[$0 + 13248 >> 2] = 349;
 $2 = emscripten__internal__TypeID_b2RopeJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 13260 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 16064 >> 2] = HEAP32[$0 + 13252 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 13252 >> 2];
 $7 = b2Vec2_20b2RopeJointDef_____20emscripten__internal__getContext_b2Vec2_20b2RopeJointDef_____28b2Vec2_20b2RopeJointDef____20const__29($0 + 13256 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 16072 >> 2] = HEAP32[$0 + 13248 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 13248 >> 2], b2Vec2_20b2RopeJointDef_____20emscripten__internal__getContext_b2Vec2_20b2RopeJointDef_____28b2Vec2_20b2RopeJointDef____20const__29($0 + 13256 | 0) | 0);
 HEAP32[$0 + 13244 >> 2] = $1;
 HEAP32[$0 + 13240 >> 2] = 10819;
 HEAP32[$0 + 13236 >> 2] = 28;
 $1 = HEAP32[$0 + 13244 >> 2];
 HEAP32[$0 + 13232 >> 2] = 348;
 HEAP32[$0 + 13228 >> 2] = 349;
 $2 = emscripten__internal__TypeID_b2RopeJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 13240 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 16068 >> 2] = HEAP32[$0 + 13232 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 13232 >> 2];
 $7 = b2Vec2_20b2RopeJointDef_____20emscripten__internal__getContext_b2Vec2_20b2RopeJointDef_____28b2Vec2_20b2RopeJointDef____20const__29($0 + 13236 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 16076 >> 2] = HEAP32[$0 + 13228 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 13228 >> 2], b2Vec2_20b2RopeJointDef_____20emscripten__internal__getContext_b2Vec2_20b2RopeJointDef_____28b2Vec2_20b2RopeJointDef____20const__29($0 + 13236 | 0) | 0);
 HEAP32[$0 + 13284 >> 2] = $1;
 HEAP32[$0 + 13280 >> 2] = 6912;
 HEAP32[$0 + 13276 >> 2] = 36;
 HEAP32[$0 + 13272 >> 2] = 350;
 HEAP32[$0 + 13268 >> 2] = 351;
 $1 = emscripten__internal__TypeID_b2RopeJointDef_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 13280 >> 2];
 $3 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16080 >> 2] = HEAP32[$0 + 13272 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $5 = HEAP32[$0 + 13272 >> 2];
 $6 = float_20b2RopeJointDef_____20emscripten__internal__getContext_float_20b2RopeJointDef_____28float_20b2RopeJointDef____20const__29($0 + 13276 | 0);
 $7 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16084 >> 2] = HEAP32[$0 + 13268 >> 2];
 _embind_register_class_property($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 13268 >> 2], float_20b2RopeJointDef_____20emscripten__internal__getContext_float_20b2RopeJointDef_____28float_20b2RopeJointDef____20const__29($0 + 13276 | 0) | 0);
 HEAP32[$0 + 13308 >> 2] = $0 + 2246;
 HEAP32[$0 + 13304 >> 2] = 2675;
 void_20emscripten__base_b2Joint___verify_b2RopeJoint__28_29();
 HEAP32[$0 + 13300 >> 2] = 352;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Joint__20_28_emscripten__base_b2Joint___getUpcaster_b2RopeJoint__28_29_29_28b2RopeJoint__29(), 
 HEAP32[wasm2js_i32$0 + 13296 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2RopeJoint__20_28_emscripten__base_b2Joint___getDowncaster_b2RopeJoint__28_29_29_28b2Joint__29(), 
 HEAP32[wasm2js_i32$0 + 13292 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 13288 >> 2] = 353;
 $1 = emscripten__internal__TypeID_b2RopeJoint_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RopeJoint__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RopeJoint_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2Joint___get_28_29();
 HEAP32[$0 + 16088 >> 2] = HEAP32[$0 + 13300 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 13300 >> 2];
 HEAP32[$0 + 16092 >> 2] = HEAP32[$0 + 13296 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 13296 >> 2];
 HEAP32[$0 + 16096 >> 2] = HEAP32[$0 + 13292 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 13292 >> 2];
 $11 = HEAP32[$0 + 13304 >> 2];
 HEAP32[$0 + 16100 >> 2] = HEAP32[$0 + 13288 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 13288 >> 2]);
 HEAP32[$0 + 2240 >> 2] = 0;
 HEAP32[$0 + 2236 >> 2] = 354;
 $1 = HEAP32[$0 + 2240 >> 2];
 $2 = HEAP32[$0 + 2236 >> 2];
 HEAP32[$0 + 13344 >> 2] = $2;
 HEAP32[$0 + 13348 >> 2] = $1;
 $1 = HEAP32[$0 + 13344 >> 2];
 $2 = HEAP32[$0 + 13348 >> 2];
 HEAP32[$0 + 13372 >> 2] = $0 + 2246;
 HEAP32[$0 + 13368 >> 2] = 10975;
 HEAP32[$0 + 13364 >> 2] = $2;
 HEAP32[$0 + 13360 >> 2] = $1;
 $3 = HEAP32[$0 + 13372 >> 2];
 $4 = HEAP32[$0 + 13368 >> 2];
 $1 = HEAP32[$0 + 13360 >> 2];
 HEAP32[$0 + 13356 >> 2] = HEAP32[$0 + 13364 >> 2];
 HEAP32[$0 + 13352 >> 2] = $1;
 $2 = HEAP32[$0 + 13356 >> 2];
 $1 = HEAP32[$0 + 13352 >> 2];
 HEAP32[$0 + 232 >> 2] = $1;
 HEAP32[$0 + 236 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2RopeJoint____29_28_29_20const___invoke_b2RopeJoint__28char_20const__2c_20b2Vec2_20const__20_28b2RopeJoint____29_28_29_20const_29($4, $0 + 232 | 0);
 HEAP32[$0 + 2232 >> 2] = 0;
 HEAP32[$0 + 2228 >> 2] = 355;
 $1 = HEAP32[$0 + 2232 >> 2];
 $2 = HEAP32[$0 + 2228 >> 2];
 HEAP32[$0 + 13312 >> 2] = $2;
 HEAP32[$0 + 13316 >> 2] = $1;
 $1 = HEAP32[$0 + 13312 >> 2];
 $2 = HEAP32[$0 + 13316 >> 2];
 HEAP32[$0 + 13340 >> 2] = $3;
 HEAP32[$0 + 13336 >> 2] = 10832;
 HEAP32[$0 + 13332 >> 2] = $2;
 HEAP32[$0 + 13328 >> 2] = $1;
 $3 = HEAP32[$0 + 13340 >> 2];
 $4 = HEAP32[$0 + 13336 >> 2];
 $1 = HEAP32[$0 + 13328 >> 2];
 HEAP32[$0 + 13324 >> 2] = HEAP32[$0 + 13332 >> 2];
 HEAP32[$0 + 13320 >> 2] = $1;
 $2 = HEAP32[$0 + 13324 >> 2];
 $1 = HEAP32[$0 + 13320 >> 2];
 HEAP32[$0 + 224 >> 2] = $1;
 HEAP32[$0 + 228 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2RopeJoint____29_28_29_20const___invoke_b2RopeJoint__28char_20const__2c_20b2Vec2_20const__20_28b2RopeJoint____29_28_29_20const_29($4, $0 + 224 | 0);
 HEAP32[$0 + 2224 >> 2] = 1;
 HEAP32[$0 + 2220 >> 2] = 8;
 $1 = HEAP32[$0 + 2224 >> 2];
 $2 = HEAP32[$0 + 2220 >> 2];
 HEAP32[$0 + 13376 >> 2] = $2;
 HEAP32[$0 + 13380 >> 2] = $1;
 $1 = HEAP32[$0 + 13376 >> 2];
 $2 = HEAP32[$0 + 13380 >> 2];
 HEAP32[$0 + 13404 >> 2] = $3;
 HEAP32[$0 + 13400 >> 2] = 9766;
 HEAP32[$0 + 13396 >> 2] = $2;
 HEAP32[$0 + 13392 >> 2] = $1;
 $3 = HEAP32[$0 + 13404 >> 2];
 $4 = HEAP32[$0 + 13400 >> 2];
 $1 = HEAP32[$0 + 13392 >> 2];
 HEAP32[$0 + 13388 >> 2] = HEAP32[$0 + 13396 >> 2];
 HEAP32[$0 + 13384 >> 2] = $1;
 $2 = HEAP32[$0 + 13388 >> 2];
 $1 = HEAP32[$0 + 13384 >> 2];
 HEAP32[$0 + 216 >> 2] = $1;
 HEAP32[$0 + 220 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2RopeJoint____29_28float_29_20const___invoke_b2RopeJoint__28char_20const__2c_20b2Vec2_20_28b2RopeJoint____29_28float_29_20const_29($4, $0 + 216 | 0);
 HEAP32[$0 + 2216 >> 2] = 1;
 HEAP32[$0 + 2212 >> 2] = 12;
 $1 = HEAP32[$0 + 2216 >> 2];
 $2 = HEAP32[$0 + 2212 >> 2];
 HEAP32[$0 + 13408 >> 2] = $2;
 HEAP32[$0 + 13412 >> 2] = $1;
 $1 = HEAP32[$0 + 13408 >> 2];
 $2 = HEAP32[$0 + 13412 >> 2];
 HEAP32[$0 + 13436 >> 2] = $3;
 HEAP32[$0 + 13432 >> 2] = 8685;
 HEAP32[$0 + 13428 >> 2] = $2;
 HEAP32[$0 + 13424 >> 2] = $1;
 $3 = HEAP32[$0 + 13436 >> 2];
 $4 = HEAP32[$0 + 13432 >> 2];
 $1 = HEAP32[$0 + 13424 >> 2];
 HEAP32[$0 + 13420 >> 2] = HEAP32[$0 + 13428 >> 2];
 HEAP32[$0 + 13416 >> 2] = $1;
 $2 = HEAP32[$0 + 13420 >> 2];
 $1 = HEAP32[$0 + 13416 >> 2];
 HEAP32[$0 + 208 >> 2] = $1;
 HEAP32[$0 + 212 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2RopeJoint____29_28float_29_20const___invoke_b2RopeJoint__28char_20const__2c_20float_20_28b2RopeJoint____29_28float_29_20const_29($4, $0 + 208 | 0);
 HEAP32[$0 + 2208 >> 2] = 0;
 HEAP32[$0 + 2204 >> 2] = 356;
 $1 = HEAP32[$0 + 2208 >> 2];
 $2 = HEAP32[$0 + 2204 >> 2];
 HEAP32[$0 + 13440 >> 2] = $2;
 HEAP32[$0 + 13444 >> 2] = $1;
 $1 = HEAP32[$0 + 13440 >> 2];
 $2 = HEAP32[$0 + 13444 >> 2];
 HEAP32[$0 + 13468 >> 2] = $3;
 HEAP32[$0 + 13464 >> 2] = 6922;
 HEAP32[$0 + 13460 >> 2] = $2;
 HEAP32[$0 + 13456 >> 2] = $1;
 $3 = HEAP32[$0 + 13468 >> 2];
 $4 = HEAP32[$0 + 13464 >> 2];
 $1 = HEAP32[$0 + 13456 >> 2];
 HEAP32[$0 + 13452 >> 2] = HEAP32[$0 + 13460 >> 2];
 HEAP32[$0 + 13448 >> 2] = $1;
 $2 = HEAP32[$0 + 13452 >> 2];
 $1 = HEAP32[$0 + 13448 >> 2];
 HEAP32[$0 + 200 >> 2] = $1;
 HEAP32[$0 + 204 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2RopeJoint____29_28float_29___invoke_b2RopeJoint__28char_20const__2c_20void_20_28b2RopeJoint____29_28float_29_29($4, $0 + 200 | 0);
 HEAP32[$0 + 2200 >> 2] = 0;
 HEAP32[$0 + 2196 >> 2] = 357;
 $1 = HEAP32[$0 + 2200 >> 2];
 $2 = HEAP32[$0 + 2196 >> 2];
 HEAP32[$0 + 13472 >> 2] = $2;
 HEAP32[$0 + 13476 >> 2] = $1;
 $1 = HEAP32[$0 + 13472 >> 2];
 $2 = HEAP32[$0 + 13476 >> 2];
 HEAP32[$0 + 13500 >> 2] = $3;
 HEAP32[$0 + 13496 >> 2] = 6935;
 HEAP32[$0 + 13492 >> 2] = $2;
 HEAP32[$0 + 13488 >> 2] = $1;
 $3 = HEAP32[$0 + 13500 >> 2];
 $4 = HEAP32[$0 + 13496 >> 2];
 $1 = HEAP32[$0 + 13488 >> 2];
 HEAP32[$0 + 13484 >> 2] = HEAP32[$0 + 13492 >> 2];
 HEAP32[$0 + 13480 >> 2] = $1;
 $2 = HEAP32[$0 + 13484 >> 2];
 $1 = HEAP32[$0 + 13480 >> 2];
 HEAP32[$0 + 192 >> 2] = $1;
 HEAP32[$0 + 196 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2RopeJoint____29_28_29_20const___invoke_b2RopeJoint__28char_20const__2c_20float_20_28b2RopeJoint____29_28_29_20const_29($4, $0 + 192 | 0);
 HEAP32[$0 + 2192 >> 2] = 1;
 HEAP32[$0 + 2188 >> 2] = 16;
 $1 = HEAP32[$0 + 2192 >> 2];
 $2 = HEAP32[$0 + 2188 >> 2];
 HEAP32[$0 + 13504 >> 2] = $2;
 HEAP32[$0 + 13508 >> 2] = $1;
 $1 = HEAP32[$0 + 13504 >> 2];
 $2 = HEAP32[$0 + 13508 >> 2];
 HEAP32[$0 + 13532 >> 2] = $3;
 HEAP32[$0 + 13528 >> 2] = 6119;
 HEAP32[$0 + 13524 >> 2] = $2;
 HEAP32[$0 + 13520 >> 2] = $1;
 $3 = HEAP32[$0 + 13528 >> 2];
 $1 = HEAP32[$0 + 13520 >> 2];
 HEAP32[$0 + 13516 >> 2] = HEAP32[$0 + 13524 >> 2];
 HEAP32[$0 + 13512 >> 2] = $1;
 $2 = HEAP32[$0 + 13516 >> 2];
 $1 = HEAP32[$0 + 13512 >> 2];
 HEAP32[$0 + 184 >> 2] = $1;
 HEAP32[$0 + 188 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2RopeJoint____29_28_29___invoke_b2RopeJoint__28char_20const__2c_20void_20_28b2RopeJoint____29_28_29_29($3, $0 + 184 | 0);
 HEAP32[$0 + 13556 >> 2] = $0 + 2187;
 HEAP32[$0 + 13552 >> 2] = 7804;
 void_20emscripten__base_b2JointDef___verify_b2WeldJointDef__28_29();
 HEAP32[$0 + 13548 >> 2] = 358;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2JointDef__20_28_emscripten__base_b2JointDef___getUpcaster_b2WeldJointDef__28_29_29_28b2WeldJointDef__29(), 
 HEAP32[wasm2js_i32$0 + 13544 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2WeldJointDef__20_28_emscripten__base_b2JointDef___getDowncaster_b2WeldJointDef__28_29_29_28b2JointDef__29(), 
 HEAP32[wasm2js_i32$0 + 13540 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 13536 >> 2] = 359;
 $1 = emscripten__internal__TypeID_b2WeldJointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2WeldJointDef__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2WeldJointDef_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2JointDef___get_28_29();
 HEAP32[$0 + 16104 >> 2] = HEAP32[$0 + 13548 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 13548 >> 2];
 HEAP32[$0 + 16108 >> 2] = HEAP32[$0 + 13544 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 13544 >> 2];
 HEAP32[$0 + 16112 >> 2] = HEAP32[$0 + 13540 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 13540 >> 2];
 $11 = HEAP32[$0 + 13552 >> 2];
 HEAP32[$0 + 16116 >> 2] = HEAP32[$0 + 13536 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 13536 >> 2]);
 HEAP32[$0 + 13560 >> 2] = $0 + 2187;
 HEAP32[$0 + 16124 >> 2] = HEAP32[$0 + 13560 >> 2];
 HEAP32[$0 + 16120 >> 2] = 360;
 $1 = HEAP32[$0 + 16124 >> 2];
 void_20emscripten__internal__RegisterClassConstructor_b2WeldJointDef__20_28__29_28_29___invoke_b2WeldJointDef__28b2WeldJointDef__20_28__29_28_29_29(HEAP32[$0 + 16120 >> 2]);
 HEAP32[$0 + 13600 >> 2] = $1;
 HEAP32[$0 + 13596 >> 2] = 10962;
 HEAP32[$0 + 13592 >> 2] = 20;
 $1 = HEAP32[$0 + 13600 >> 2];
 HEAP32[$0 + 13588 >> 2] = 361;
 HEAP32[$0 + 13584 >> 2] = 362;
 $2 = emscripten__internal__TypeID_b2WeldJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 13596 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 16128 >> 2] = HEAP32[$0 + 13588 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 13588 >> 2];
 $7 = b2Vec2_20b2WeldJointDef_____20emscripten__internal__getContext_b2Vec2_20b2WeldJointDef_____28b2Vec2_20b2WeldJointDef____20const__29($0 + 13592 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 16136 >> 2] = HEAP32[$0 + 13584 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 13584 >> 2], b2Vec2_20b2WeldJointDef_____20emscripten__internal__getContext_b2Vec2_20b2WeldJointDef_____28b2Vec2_20b2WeldJointDef____20const__29($0 + 13592 | 0) | 0);
 HEAP32[$0 + 13580 >> 2] = $1;
 HEAP32[$0 + 13576 >> 2] = 10819;
 HEAP32[$0 + 13572 >> 2] = 28;
 $1 = HEAP32[$0 + 13580 >> 2];
 HEAP32[$0 + 13568 >> 2] = 361;
 HEAP32[$0 + 13564 >> 2] = 362;
 $2 = emscripten__internal__TypeID_b2WeldJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 13576 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 16132 >> 2] = HEAP32[$0 + 13568 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 13568 >> 2];
 $7 = b2Vec2_20b2WeldJointDef_____20emscripten__internal__getContext_b2Vec2_20b2WeldJointDef_____28b2Vec2_20b2WeldJointDef____20const__29($0 + 13572 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 16140 >> 2] = HEAP32[$0 + 13564 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 13564 >> 2], b2Vec2_20b2WeldJointDef_____20emscripten__internal__getContext_b2Vec2_20b2WeldJointDef_____28b2Vec2_20b2WeldJointDef____20const__29($0 + 13572 | 0) | 0);
 HEAP32[$0 + 13660 >> 2] = $1;
 HEAP32[$0 + 13656 >> 2] = 9279;
 HEAP32[$0 + 13652 >> 2] = 36;
 $1 = HEAP32[$0 + 13660 >> 2];
 HEAP32[$0 + 13648 >> 2] = 363;
 HEAP32[$0 + 13644 >> 2] = 364;
 $2 = emscripten__internal__TypeID_b2WeldJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 13656 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16144 >> 2] = HEAP32[$0 + 13648 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 13648 >> 2];
 $7 = float_20b2WeldJointDef_____20emscripten__internal__getContext_float_20b2WeldJointDef_____28float_20b2WeldJointDef____20const__29($0 + 13652 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16156 >> 2] = HEAP32[$0 + 13644 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 13644 >> 2], float_20b2WeldJointDef_____20emscripten__internal__getContext_float_20b2WeldJointDef_____28float_20b2WeldJointDef____20const__29($0 + 13652 | 0) | 0);
 HEAP32[$0 + 13640 >> 2] = $1;
 HEAP32[$0 + 13636 >> 2] = 1024;
 HEAP32[$0 + 13632 >> 2] = 40;
 $1 = HEAP32[$0 + 13640 >> 2];
 HEAP32[$0 + 13628 >> 2] = 363;
 HEAP32[$0 + 13624 >> 2] = 364;
 $2 = emscripten__internal__TypeID_b2WeldJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 13636 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16148 >> 2] = HEAP32[$0 + 13628 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 13628 >> 2];
 $7 = float_20b2WeldJointDef_____20emscripten__internal__getContext_float_20b2WeldJointDef_____28float_20b2WeldJointDef____20const__29($0 + 13632 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16160 >> 2] = HEAP32[$0 + 13624 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 13624 >> 2], float_20b2WeldJointDef_____20emscripten__internal__getContext_float_20b2WeldJointDef_____28float_20b2WeldJointDef____20const__29($0 + 13632 | 0) | 0);
 HEAP32[$0 + 13620 >> 2] = $1;
 HEAP32[$0 + 13616 >> 2] = 6165;
 HEAP32[$0 + 13612 >> 2] = 44;
 HEAP32[$0 + 13608 >> 2] = 363;
 HEAP32[$0 + 13604 >> 2] = 364;
 $1 = emscripten__internal__TypeID_b2WeldJointDef_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 13616 >> 2];
 $3 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16152 >> 2] = HEAP32[$0 + 13608 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $5 = HEAP32[$0 + 13608 >> 2];
 $6 = float_20b2WeldJointDef_____20emscripten__internal__getContext_float_20b2WeldJointDef_____28float_20b2WeldJointDef____20const__29($0 + 13612 | 0);
 $7 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16164 >> 2] = HEAP32[$0 + 13604 >> 2];
 _embind_register_class_property($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 13604 >> 2], float_20b2WeldJointDef_____20emscripten__internal__getContext_float_20b2WeldJointDef_____28float_20b2WeldJointDef____20const__29($0 + 13612 | 0) | 0);
 HEAP32[$0 + 13684 >> 2] = $0 + 2186;
 HEAP32[$0 + 13680 >> 2] = 2699;
 void_20emscripten__base_b2Joint___verify_b2WeldJoint__28_29();
 HEAP32[$0 + 13676 >> 2] = 365;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Joint__20_28_emscripten__base_b2Joint___getUpcaster_b2WeldJoint__28_29_29_28b2WeldJoint__29(), 
 HEAP32[wasm2js_i32$0 + 13672 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2WeldJoint__20_28_emscripten__base_b2Joint___getDowncaster_b2WeldJoint__28_29_29_28b2Joint__29(), 
 HEAP32[wasm2js_i32$0 + 13668 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 13664 >> 2] = 366;
 $1 = emscripten__internal__TypeID_b2WeldJoint_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2WeldJoint__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2WeldJoint_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2Joint___get_28_29();
 HEAP32[$0 + 16168 >> 2] = HEAP32[$0 + 13676 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 13676 >> 2];
 HEAP32[$0 + 16172 >> 2] = HEAP32[$0 + 13672 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 13672 >> 2];
 HEAP32[$0 + 16176 >> 2] = HEAP32[$0 + 13668 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 13668 >> 2];
 $11 = HEAP32[$0 + 13680 >> 2];
 HEAP32[$0 + 16180 >> 2] = HEAP32[$0 + 13664 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 13664 >> 2]);
 HEAP32[$0 + 2180 >> 2] = 0;
 HEAP32[$0 + 2176 >> 2] = 367;
 $1 = HEAP32[$0 + 2180 >> 2];
 $2 = HEAP32[$0 + 2176 >> 2];
 HEAP32[$0 + 13720 >> 2] = $2;
 HEAP32[$0 + 13724 >> 2] = $1;
 $1 = HEAP32[$0 + 13720 >> 2];
 $2 = HEAP32[$0 + 13724 >> 2];
 HEAP32[$0 + 13748 >> 2] = $0 + 2186;
 HEAP32[$0 + 13744 >> 2] = 10975;
 HEAP32[$0 + 13740 >> 2] = $2;
 HEAP32[$0 + 13736 >> 2] = $1;
 $3 = HEAP32[$0 + 13748 >> 2];
 $4 = HEAP32[$0 + 13744 >> 2];
 $1 = HEAP32[$0 + 13736 >> 2];
 HEAP32[$0 + 13732 >> 2] = HEAP32[$0 + 13740 >> 2];
 HEAP32[$0 + 13728 >> 2] = $1;
 $2 = HEAP32[$0 + 13732 >> 2];
 $1 = HEAP32[$0 + 13728 >> 2];
 HEAP32[$0 + 176 >> 2] = $1;
 HEAP32[$0 + 180 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2WeldJoint____29_28_29_20const___invoke_b2WeldJoint__28char_20const__2c_20b2Vec2_20const__20_28b2WeldJoint____29_28_29_20const_29($4, $0 + 176 | 0);
 HEAP32[$0 + 2172 >> 2] = 0;
 HEAP32[$0 + 2168 >> 2] = 368;
 $1 = HEAP32[$0 + 2172 >> 2];
 $2 = HEAP32[$0 + 2168 >> 2];
 HEAP32[$0 + 13688 >> 2] = $2;
 HEAP32[$0 + 13692 >> 2] = $1;
 $1 = HEAP32[$0 + 13688 >> 2];
 $2 = HEAP32[$0 + 13692 >> 2];
 HEAP32[$0 + 13716 >> 2] = $3;
 HEAP32[$0 + 13712 >> 2] = 10832;
 HEAP32[$0 + 13708 >> 2] = $2;
 HEAP32[$0 + 13704 >> 2] = $1;
 $3 = HEAP32[$0 + 13716 >> 2];
 $4 = HEAP32[$0 + 13712 >> 2];
 $1 = HEAP32[$0 + 13704 >> 2];
 HEAP32[$0 + 13700 >> 2] = HEAP32[$0 + 13708 >> 2];
 HEAP32[$0 + 13696 >> 2] = $1;
 $2 = HEAP32[$0 + 13700 >> 2];
 $1 = HEAP32[$0 + 13696 >> 2];
 HEAP32[$0 + 168 >> 2] = $1;
 HEAP32[$0 + 172 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2WeldJoint____29_28_29_20const___invoke_b2WeldJoint__28char_20const__2c_20b2Vec2_20const__20_28b2WeldJoint____29_28_29_20const_29($4, $0 + 168 | 0);
 HEAP32[$0 + 2164 >> 2] = 0;
 HEAP32[$0 + 2160 >> 2] = 369;
 $1 = HEAP32[$0 + 2164 >> 2];
 $2 = HEAP32[$0 + 2160 >> 2];
 HEAP32[$0 + 13816 >> 2] = $2;
 HEAP32[$0 + 13820 >> 2] = $1;
 $1 = HEAP32[$0 + 13816 >> 2];
 $2 = HEAP32[$0 + 13820 >> 2];
 HEAP32[$0 + 13844 >> 2] = $3;
 HEAP32[$0 + 13840 >> 2] = 9294;
 HEAP32[$0 + 13836 >> 2] = $2;
 HEAP32[$0 + 13832 >> 2] = $1;
 $3 = HEAP32[$0 + 13844 >> 2];
 $4 = HEAP32[$0 + 13840 >> 2];
 $1 = HEAP32[$0 + 13832 >> 2];
 HEAP32[$0 + 13828 >> 2] = HEAP32[$0 + 13836 >> 2];
 HEAP32[$0 + 13824 >> 2] = $1;
 $2 = HEAP32[$0 + 13828 >> 2];
 $1 = HEAP32[$0 + 13824 >> 2];
 HEAP32[$0 + 160 >> 2] = $1;
 HEAP32[$0 + 164 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2WeldJoint____29_28_29_20const___invoke_b2WeldJoint__28char_20const__2c_20float_20_28b2WeldJoint____29_28_29_20const_29($4, $0 + 160 | 0);
 HEAP32[$0 + 2156 >> 2] = 0;
 HEAP32[$0 + 2152 >> 2] = 370;
 $1 = HEAP32[$0 + 2156 >> 2];
 $2 = HEAP32[$0 + 2152 >> 2];
 HEAP32[$0 + 13880 >> 2] = $2;
 HEAP32[$0 + 13884 >> 2] = $1;
 $1 = HEAP32[$0 + 13880 >> 2];
 $2 = HEAP32[$0 + 13884 >> 2];
 HEAP32[$0 + 13908 >> 2] = $3;
 HEAP32[$0 + 13904 >> 2] = 1751;
 HEAP32[$0 + 13900 >> 2] = $2;
 HEAP32[$0 + 13896 >> 2] = $1;
 $3 = HEAP32[$0 + 13908 >> 2];
 $4 = HEAP32[$0 + 13904 >> 2];
 $1 = HEAP32[$0 + 13896 >> 2];
 HEAP32[$0 + 13892 >> 2] = HEAP32[$0 + 13900 >> 2];
 HEAP32[$0 + 13888 >> 2] = $1;
 $2 = HEAP32[$0 + 13892 >> 2];
 $1 = HEAP32[$0 + 13888 >> 2];
 HEAP32[$0 + 152 >> 2] = $1;
 HEAP32[$0 + 156 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2WeldJoint____29_28float_29___invoke_b2WeldJoint__28char_20const__2c_20void_20_28b2WeldJoint____29_28float_29_29($4, $0 + 152 | 0);
 HEAP32[$0 + 2148 >> 2] = 0;
 HEAP32[$0 + 2144 >> 2] = 371;
 $1 = HEAP32[$0 + 2148 >> 2];
 $2 = HEAP32[$0 + 2144 >> 2];
 HEAP32[$0 + 13784 >> 2] = $2;
 HEAP32[$0 + 13788 >> 2] = $1;
 $1 = HEAP32[$0 + 13784 >> 2];
 $2 = HEAP32[$0 + 13788 >> 2];
 HEAP32[$0 + 13812 >> 2] = $3;
 HEAP32[$0 + 13808 >> 2] = 1764;
 HEAP32[$0 + 13804 >> 2] = $2;
 HEAP32[$0 + 13800 >> 2] = $1;
 $3 = HEAP32[$0 + 13812 >> 2];
 $4 = HEAP32[$0 + 13808 >> 2];
 $1 = HEAP32[$0 + 13800 >> 2];
 HEAP32[$0 + 13796 >> 2] = HEAP32[$0 + 13804 >> 2];
 HEAP32[$0 + 13792 >> 2] = $1;
 $2 = HEAP32[$0 + 13796 >> 2];
 $1 = HEAP32[$0 + 13792 >> 2];
 HEAP32[$0 + 144 >> 2] = $1;
 HEAP32[$0 + 148 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2WeldJoint____29_28_29_20const___invoke_b2WeldJoint__28char_20const__2c_20float_20_28b2WeldJoint____29_28_29_20const_29($4, $0 + 144 | 0);
 HEAP32[$0 + 2140 >> 2] = 0;
 HEAP32[$0 + 2136 >> 2] = 372;
 $1 = HEAP32[$0 + 2140 >> 2];
 $2 = HEAP32[$0 + 2136 >> 2];
 HEAP32[$0 + 13848 >> 2] = $2;
 HEAP32[$0 + 13852 >> 2] = $1;
 $1 = HEAP32[$0 + 13848 >> 2];
 $2 = HEAP32[$0 + 13852 >> 2];
 HEAP32[$0 + 13876 >> 2] = $3;
 HEAP32[$0 + 13872 >> 2] = 6178;
 HEAP32[$0 + 13868 >> 2] = $2;
 HEAP32[$0 + 13864 >> 2] = $1;
 $3 = HEAP32[$0 + 13876 >> 2];
 $4 = HEAP32[$0 + 13872 >> 2];
 $1 = HEAP32[$0 + 13864 >> 2];
 HEAP32[$0 + 13860 >> 2] = HEAP32[$0 + 13868 >> 2];
 HEAP32[$0 + 13856 >> 2] = $1;
 $2 = HEAP32[$0 + 13860 >> 2];
 $1 = HEAP32[$0 + 13856 >> 2];
 HEAP32[$0 + 136 >> 2] = $1;
 HEAP32[$0 + 140 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2WeldJoint____29_28float_29___invoke_b2WeldJoint__28char_20const__2c_20void_20_28b2WeldJoint____29_28float_29_29($4, $0 + 136 | 0);
 HEAP32[$0 + 2132 >> 2] = 0;
 HEAP32[$0 + 2128 >> 2] = 373;
 $1 = HEAP32[$0 + 2132 >> 2];
 $2 = HEAP32[$0 + 2128 >> 2];
 HEAP32[$0 + 13752 >> 2] = $2;
 HEAP32[$0 + 13756 >> 2] = $1;
 $1 = HEAP32[$0 + 13752 >> 2];
 $2 = HEAP32[$0 + 13756 >> 2];
 HEAP32[$0 + 13780 >> 2] = $3;
 HEAP32[$0 + 13776 >> 2] = 6194;
 HEAP32[$0 + 13772 >> 2] = $2;
 HEAP32[$0 + 13768 >> 2] = $1;
 $3 = HEAP32[$0 + 13780 >> 2];
 $4 = HEAP32[$0 + 13776 >> 2];
 $1 = HEAP32[$0 + 13768 >> 2];
 HEAP32[$0 + 13764 >> 2] = HEAP32[$0 + 13772 >> 2];
 HEAP32[$0 + 13760 >> 2] = $1;
 $2 = HEAP32[$0 + 13764 >> 2];
 $1 = HEAP32[$0 + 13760 >> 2];
 HEAP32[$0 + 128 >> 2] = $1;
 HEAP32[$0 + 132 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2WeldJoint____29_28_29_20const___invoke_b2WeldJoint__28char_20const__2c_20float_20_28b2WeldJoint____29_28_29_20const_29($4, $0 + 128 | 0);
 HEAP32[$0 + 2124 >> 2] = 1;
 HEAP32[$0 + 2120 >> 2] = 16;
 $1 = HEAP32[$0 + 2124 >> 2];
 $2 = HEAP32[$0 + 2120 >> 2];
 HEAP32[$0 + 13912 >> 2] = $2;
 HEAP32[$0 + 13916 >> 2] = $1;
 $1 = HEAP32[$0 + 13912 >> 2];
 $2 = HEAP32[$0 + 13916 >> 2];
 HEAP32[$0 + 13944 >> 2] = $3;
 HEAP32[$0 + 13940 >> 2] = 6119;
 HEAP32[$0 + 13936 >> 2] = $2;
 HEAP32[$0 + 13932 >> 2] = $1;
 $3 = HEAP32[$0 + 13940 >> 2];
 $1 = HEAP32[$0 + 13932 >> 2];
 HEAP32[$0 + 13928 >> 2] = HEAP32[$0 + 13936 >> 2];
 HEAP32[$0 + 13924 >> 2] = $1;
 $2 = HEAP32[$0 + 13928 >> 2];
 $1 = HEAP32[$0 + 13924 >> 2];
 HEAP32[$0 + 120 >> 2] = $1;
 HEAP32[$0 + 124 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2WeldJoint____29_28_29___invoke_b2WeldJoint__28char_20const__2c_20void_20_28b2WeldJoint____29_28_29_29($3, $0 + 120 | 0);
 HEAP32[$0 + 13968 >> 2] = $0 + 2119;
 HEAP32[$0 + 13964 >> 2] = 7729;
 void_20emscripten__base_b2JointDef___verify_b2WheelJointDef__28_29();
 HEAP32[$0 + 13960 >> 2] = 374;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2JointDef__20_28_emscripten__base_b2JointDef___getUpcaster_b2WheelJointDef__28_29_29_28b2WheelJointDef__29(), 
 HEAP32[wasm2js_i32$0 + 13956 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2WheelJointDef__20_28_emscripten__base_b2JointDef___getDowncaster_b2WheelJointDef__28_29_29_28b2JointDef__29(), 
 HEAP32[wasm2js_i32$0 + 13952 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 13948 >> 2] = 375;
 $1 = emscripten__internal__TypeID_b2WheelJointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2WheelJointDef__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2WheelJointDef_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2JointDef___get_28_29();
 HEAP32[$0 + 16184 >> 2] = HEAP32[$0 + 13960 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 13960 >> 2];
 HEAP32[$0 + 16188 >> 2] = HEAP32[$0 + 13956 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 13956 >> 2];
 HEAP32[$0 + 16192 >> 2] = HEAP32[$0 + 13952 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 13952 >> 2];
 $11 = HEAP32[$0 + 13964 >> 2];
 HEAP32[$0 + 16196 >> 2] = HEAP32[$0 + 13948 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 13948 >> 2]);
 HEAP32[$0 + 13972 >> 2] = $0 + 2119;
 HEAP32[$0 + 16204 >> 2] = HEAP32[$0 + 13972 >> 2];
 HEAP32[$0 + 16200 >> 2] = 376;
 $1 = HEAP32[$0 + 16204 >> 2];
 void_20emscripten__internal__RegisterClassConstructor_b2WheelJointDef__20_28__29_28_29___invoke_b2WheelJointDef__28b2WheelJointDef__20_28__29_28_29_29(HEAP32[$0 + 16200 >> 2]);
 HEAP32[$0 + 14032 >> 2] = $1;
 HEAP32[$0 + 14028 >> 2] = 10962;
 HEAP32[$0 + 14024 >> 2] = 20;
 $1 = HEAP32[$0 + 14032 >> 2];
 HEAP32[$0 + 14020 >> 2] = 377;
 HEAP32[$0 + 14016 >> 2] = 378;
 $2 = emscripten__internal__TypeID_b2WheelJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 14028 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 16208 >> 2] = HEAP32[$0 + 14020 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 14020 >> 2];
 $7 = b2Vec2_20b2WheelJointDef_____20emscripten__internal__getContext_b2Vec2_20b2WheelJointDef_____28b2Vec2_20b2WheelJointDef____20const__29($0 + 14024 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 16220 >> 2] = HEAP32[$0 + 14016 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 14016 >> 2], b2Vec2_20b2WheelJointDef_____20emscripten__internal__getContext_b2Vec2_20b2WheelJointDef_____28b2Vec2_20b2WheelJointDef____20const__29($0 + 14024 | 0) | 0);
 HEAP32[$0 + 14012 >> 2] = $1;
 HEAP32[$0 + 14008 >> 2] = 10819;
 HEAP32[$0 + 14004 >> 2] = 28;
 $1 = HEAP32[$0 + 14012 >> 2];
 HEAP32[$0 + 14e3 >> 2] = 377;
 HEAP32[$0 + 13996 >> 2] = 378;
 $2 = emscripten__internal__TypeID_b2WheelJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 14008 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 16212 >> 2] = HEAP32[$0 + 14e3 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 14e3 >> 2];
 $7 = b2Vec2_20b2WheelJointDef_____20emscripten__internal__getContext_b2Vec2_20b2WheelJointDef_____28b2Vec2_20b2WheelJointDef____20const__29($0 + 14004 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 16224 >> 2] = HEAP32[$0 + 13996 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 13996 >> 2], b2Vec2_20b2WheelJointDef_____20emscripten__internal__getContext_b2Vec2_20b2WheelJointDef_____28b2Vec2_20b2WheelJointDef____20const__29($0 + 14004 | 0) | 0);
 HEAP32[$0 + 13992 >> 2] = $1;
 HEAP32[$0 + 13988 >> 2] = 10926;
 HEAP32[$0 + 13984 >> 2] = 36;
 $1 = HEAP32[$0 + 13992 >> 2];
 HEAP32[$0 + 13980 >> 2] = 377;
 HEAP32[$0 + 13976 >> 2] = 378;
 $2 = emscripten__internal__TypeID_b2WheelJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 13988 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 16216 >> 2] = HEAP32[$0 + 13980 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 13980 >> 2];
 $7 = b2Vec2_20b2WheelJointDef_____20emscripten__internal__getContext_b2Vec2_20b2WheelJointDef_____28b2Vec2_20b2WheelJointDef____20const__29($0 + 13984 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$0 + 16228 >> 2] = HEAP32[$0 + 13976 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 13976 >> 2], b2Vec2_20b2WheelJointDef_____20emscripten__internal__getContext_b2Vec2_20b2WheelJointDef_____28b2Vec2_20b2WheelJointDef____20const__29($0 + 13984 | 0) | 0);
 HEAP32[$0 + 14052 >> 2] = $1;
 HEAP32[$0 + 14048 >> 2] = 3643;
 HEAP32[$0 + 14044 >> 2] = 44;
 $1 = HEAP32[$0 + 14052 >> 2];
 HEAP32[$0 + 14040 >> 2] = 379;
 HEAP32[$0 + 14036 >> 2] = 380;
 $2 = emscripten__internal__TypeID_b2WheelJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 14048 >> 2];
 $4 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 16232 >> 2] = HEAP32[$0 + 14040 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 14040 >> 2];
 $7 = bool_20b2WheelJointDef_____20emscripten__internal__getContext_bool_20b2WheelJointDef_____28bool_20b2WheelJointDef____20const__29($0 + 14044 | 0);
 $8 = emscripten__internal__TypeID_bool_2c_20void___get_28_29();
 HEAP32[$0 + 16236 >> 2] = HEAP32[$0 + 14036 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$0 + 14036 >> 2], bool_20b2WheelJointDef_____20emscripten__internal__getContext_bool_20b2WheelJointDef_____28bool_20b2WheelJointDef____20const__29($0 + 14044 | 0) | 0);
 HEAP32[$0 + 14132 >> 2] = $1;
 HEAP32[$0 + 14128 >> 2] = 8619;
 HEAP32[$0 + 14124 >> 2] = 48;
 $1 = HEAP32[$0 + 14132 >> 2];
 HEAP32[$0 + 14120 >> 2] = 381;
 HEAP32[$0 + 14116 >> 2] = 382;
 $2 = emscripten__internal__TypeID_b2WheelJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 14128 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16240 >> 2] = HEAP32[$0 + 14120 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 14120 >> 2];
 $7 = float_20b2WheelJointDef_____20emscripten__internal__getContext_float_20b2WheelJointDef_____28float_20b2WheelJointDef____20const__29($0 + 14124 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16256 >> 2] = HEAP32[$0 + 14116 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 14116 >> 2], float_20b2WheelJointDef_____20emscripten__internal__getContext_float_20b2WheelJointDef_____28float_20b2WheelJointDef____20const__29($0 + 14124 | 0) | 0);
 HEAP32[$0 + 14112 >> 2] = $1;
 HEAP32[$0 + 14108 >> 2] = 10157;
 HEAP32[$0 + 14104 >> 2] = 52;
 $1 = HEAP32[$0 + 14112 >> 2];
 HEAP32[$0 + 14100 >> 2] = 381;
 HEAP32[$0 + 14096 >> 2] = 382;
 $2 = emscripten__internal__TypeID_b2WheelJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 14108 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16244 >> 2] = HEAP32[$0 + 14100 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 14100 >> 2];
 $7 = float_20b2WheelJointDef_____20emscripten__internal__getContext_float_20b2WheelJointDef_____28float_20b2WheelJointDef____20const__29($0 + 14104 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16260 >> 2] = HEAP32[$0 + 14096 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 14096 >> 2], float_20b2WheelJointDef_____20emscripten__internal__getContext_float_20b2WheelJointDef_____28float_20b2WheelJointDef____20const__29($0 + 14104 | 0) | 0);
 HEAP32[$0 + 14092 >> 2] = $1;
 HEAP32[$0 + 14088 >> 2] = 1024;
 HEAP32[$0 + 14084 >> 2] = 56;
 $1 = HEAP32[$0 + 14092 >> 2];
 HEAP32[$0 + 14080 >> 2] = 381;
 HEAP32[$0 + 14076 >> 2] = 382;
 $2 = emscripten__internal__TypeID_b2WheelJointDef_2c_20void___get_28_29();
 $3 = HEAP32[$0 + 14088 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16248 >> 2] = HEAP32[$0 + 14080 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$0 + 14080 >> 2];
 $7 = float_20b2WheelJointDef_____20emscripten__internal__getContext_float_20b2WheelJointDef_____28float_20b2WheelJointDef____20const__29($0 + 14084 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16264 >> 2] = HEAP32[$0 + 14076 >> 2];
 _embind_register_class_property($2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 14076 >> 2], float_20b2WheelJointDef_____20emscripten__internal__getContext_float_20b2WheelJointDef_____28float_20b2WheelJointDef____20const__29($0 + 14084 | 0) | 0);
 HEAP32[$0 + 14072 >> 2] = $1;
 HEAP32[$0 + 14068 >> 2] = 6165;
 HEAP32[$0 + 14064 >> 2] = 60;
 HEAP32[$0 + 14060 >> 2] = 381;
 HEAP32[$0 + 14056 >> 2] = 382;
 $1 = emscripten__internal__TypeID_b2WheelJointDef_2c_20void___get_28_29();
 $2 = HEAP32[$0 + 14068 >> 2];
 $3 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16252 >> 2] = HEAP32[$0 + 14060 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $5 = HEAP32[$0 + 14060 >> 2];
 $6 = float_20b2WheelJointDef_____20emscripten__internal__getContext_float_20b2WheelJointDef_____28float_20b2WheelJointDef____20const__29($0 + 14064 | 0);
 $7 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$0 + 16268 >> 2] = HEAP32[$0 + 14056 >> 2];
 _embind_register_class_property($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$0 + 14056 >> 2], float_20b2WheelJointDef_____20emscripten__internal__getContext_float_20b2WheelJointDef_____28float_20b2WheelJointDef____20const__29($0 + 14064 | 0) | 0);
 HEAP32[$0 + 14156 >> 2] = $0 + 2118;
 HEAP32[$0 + 14152 >> 2] = 2625;
 void_20emscripten__base_b2Joint___verify_b2WheelJoint__28_29();
 HEAP32[$0 + 14148 >> 2] = 383;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Joint__20_28_emscripten__base_b2Joint___getUpcaster_b2WheelJoint__28_29_29_28b2WheelJoint__29(), 
 HEAP32[wasm2js_i32$0 + 14144 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2WheelJoint__20_28_emscripten__base_b2Joint___getDowncaster_b2WheelJoint__28_29_29_28b2Joint__29(), 
 HEAP32[wasm2js_i32$0 + 14140 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 14136 >> 2] = 384;
 $1 = emscripten__internal__TypeID_b2WheelJoint_2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2WheelJoint__2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2WheelJoint_20const__2c_20void___get_28_29();
 $4 = emscripten__base_b2Joint___get_28_29();
 HEAP32[$0 + 16272 >> 2] = HEAP32[$0 + 14148 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$0 + 14148 >> 2];
 HEAP32[$0 + 16276 >> 2] = HEAP32[$0 + 14144 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $8 = HEAP32[$0 + 14144 >> 2];
 HEAP32[$0 + 16280 >> 2] = HEAP32[$0 + 14140 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $10 = HEAP32[$0 + 14140 >> 2];
 $11 = HEAP32[$0 + 14152 >> 2];
 HEAP32[$0 + 16284 >> 2] = HEAP32[$0 + 14136 >> 2];
 _embind_register_class($1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$0 + 14136 >> 2]);
 HEAP32[$0 + 2112 >> 2] = 0;
 HEAP32[$0 + 2108 >> 2] = 385;
 $1 = HEAP32[$0 + 2112 >> 2];
 $2 = HEAP32[$0 + 2108 >> 2];
 HEAP32[$0 + 14224 >> 2] = $2;
 HEAP32[$0 + 14228 >> 2] = $1;
 $1 = HEAP32[$0 + 14224 >> 2];
 $2 = HEAP32[$0 + 14228 >> 2];
 HEAP32[$0 + 14252 >> 2] = $0 + 2118;
 HEAP32[$0 + 14248 >> 2] = 10975;
 HEAP32[$0 + 14244 >> 2] = $2;
 HEAP32[$0 + 14240 >> 2] = $1;
 $3 = HEAP32[$0 + 14252 >> 2];
 $4 = HEAP32[$0 + 14248 >> 2];
 $1 = HEAP32[$0 + 14240 >> 2];
 HEAP32[$0 + 14236 >> 2] = HEAP32[$0 + 14244 >> 2];
 HEAP32[$0 + 14232 >> 2] = $1;
 $2 = HEAP32[$0 + 14236 >> 2];
 $1 = HEAP32[$0 + 14232 >> 2];
 HEAP32[$0 + 112 >> 2] = $1;
 HEAP32[$0 + 116 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2WheelJoint____29_28_29_20const___invoke_b2WheelJoint__28char_20const__2c_20b2Vec2_20const__20_28b2WheelJoint____29_28_29_20const_29($4, $0 + 112 | 0);
 HEAP32[$0 + 2104 >> 2] = 0;
 HEAP32[$0 + 2100 >> 2] = 386;
 $1 = HEAP32[$0 + 2104 >> 2];
 $2 = HEAP32[$0 + 2100 >> 2];
 HEAP32[$0 + 14192 >> 2] = $2;
 HEAP32[$0 + 14196 >> 2] = $1;
 $1 = HEAP32[$0 + 14192 >> 2];
 $2 = HEAP32[$0 + 14196 >> 2];
 HEAP32[$0 + 14220 >> 2] = $3;
 HEAP32[$0 + 14216 >> 2] = 10832;
 HEAP32[$0 + 14212 >> 2] = $2;
 HEAP32[$0 + 14208 >> 2] = $1;
 $3 = HEAP32[$0 + 14220 >> 2];
 $4 = HEAP32[$0 + 14216 >> 2];
 $1 = HEAP32[$0 + 14208 >> 2];
 HEAP32[$0 + 14204 >> 2] = HEAP32[$0 + 14212 >> 2];
 HEAP32[$0 + 14200 >> 2] = $1;
 $2 = HEAP32[$0 + 14204 >> 2];
 $1 = HEAP32[$0 + 14200 >> 2];
 HEAP32[$0 + 104 >> 2] = $1;
 HEAP32[$0 + 108 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2WheelJoint____29_28_29_20const___invoke_b2WheelJoint__28char_20const__2c_20b2Vec2_20const__20_28b2WheelJoint____29_28_29_20const_29($4, $0 + 104 | 0);
 HEAP32[$0 + 2096 >> 2] = 0;
 HEAP32[$0 + 2092 >> 2] = 387;
 $1 = HEAP32[$0 + 2096 >> 2];
 $2 = HEAP32[$0 + 2092 >> 2];
 HEAP32[$0 + 14160 >> 2] = $2;
 HEAP32[$0 + 14164 >> 2] = $1;
 $1 = HEAP32[$0 + 14160 >> 2];
 $2 = HEAP32[$0 + 14164 >> 2];
 HEAP32[$0 + 14188 >> 2] = $3;
 HEAP32[$0 + 14184 >> 2] = 10937;
 HEAP32[$0 + 14180 >> 2] = $2;
 HEAP32[$0 + 14176 >> 2] = $1;
 $3 = HEAP32[$0 + 14188 >> 2];
 $4 = HEAP32[$0 + 14184 >> 2];
 $1 = HEAP32[$0 + 14176 >> 2];
 HEAP32[$0 + 14172 >> 2] = HEAP32[$0 + 14180 >> 2];
 HEAP32[$0 + 14168 >> 2] = $1;
 $2 = HEAP32[$0 + 14172 >> 2];
 $1 = HEAP32[$0 + 14168 >> 2];
 HEAP32[$0 + 96 >> 2] = $1;
 HEAP32[$0 + 100 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2WheelJoint____29_28_29_20const___invoke_b2WheelJoint__28char_20const__2c_20b2Vec2_20const__20_28b2WheelJoint____29_28_29_20const_29($4, $0 + 96 | 0);
 HEAP32[$0 + 2088 >> 2] = 0;
 HEAP32[$0 + 2084 >> 2] = 388;
 $1 = HEAP32[$0 + 2088 >> 2];
 $2 = HEAP32[$0 + 2084 >> 2];
 HEAP32[$0 + 14384 >> 2] = $2;
 HEAP32[$0 + 14388 >> 2] = $1;
 $1 = HEAP32[$0 + 14384 >> 2];
 $2 = HEAP32[$0 + 14388 >> 2];
 HEAP32[$0 + 14412 >> 2] = $3;
 HEAP32[$0 + 14408 >> 2] = 6580;
 HEAP32[$0 + 14404 >> 2] = $2;
 HEAP32[$0 + 14400 >> 2] = $1;
 $3 = HEAP32[$0 + 14412 >> 2];
 $4 = HEAP32[$0 + 14408 >> 2];
 $1 = HEAP32[$0 + 14400 >> 2];
 HEAP32[$0 + 14396 >> 2] = HEAP32[$0 + 14404 >> 2];
 HEAP32[$0 + 14392 >> 2] = $1;
 $2 = HEAP32[$0 + 14396 >> 2];
 $1 = HEAP32[$0 + 14392 >> 2];
 HEAP32[$0 + 88 >> 2] = $1;
 HEAP32[$0 + 92 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2WheelJoint____29_28_29_20const___invoke_b2WheelJoint__28char_20const__2c_20float_20_28b2WheelJoint____29_28_29_20const_29($4, $0 + 88 | 0);
 HEAP32[$0 + 2080 >> 2] = 0;
 HEAP32[$0 + 2076 >> 2] = 389;
 $1 = HEAP32[$0 + 2080 >> 2];
 $2 = HEAP32[$0 + 2076 >> 2];
 HEAP32[$0 + 14416 >> 2] = $2;
 HEAP32[$0 + 14420 >> 2] = $1;
 $1 = HEAP32[$0 + 14416 >> 2];
 $2 = HEAP32[$0 + 14420 >> 2];
 HEAP32[$0 + 14444 >> 2] = $3;
 HEAP32[$0 + 14440 >> 2] = 10082;
 HEAP32[$0 + 14436 >> 2] = $2;
 HEAP32[$0 + 14432 >> 2] = $1;
 $3 = HEAP32[$0 + 14444 >> 2];
 $4 = HEAP32[$0 + 14440 >> 2];
 $1 = HEAP32[$0 + 14432 >> 2];
 HEAP32[$0 + 14428 >> 2] = HEAP32[$0 + 14436 >> 2];
 HEAP32[$0 + 14424 >> 2] = $1;
 $2 = HEAP32[$0 + 14428 >> 2];
 $1 = HEAP32[$0 + 14424 >> 2];
 HEAP32[$0 + 80 >> 2] = $1;
 HEAP32[$0 + 84 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28b2WheelJoint____29_28_29_20const___invoke_b2WheelJoint__28char_20const__2c_20bool_20_28b2WheelJoint____29_28_29_20const_29($4, $0 + 80 | 0);
 HEAP32[$0 + 2072 >> 2] = 0;
 HEAP32[$0 + 2068 >> 2] = 390;
 $1 = HEAP32[$0 + 2072 >> 2];
 $2 = HEAP32[$0 + 2068 >> 2];
 HEAP32[$0 + 14448 >> 2] = $2;
 HEAP32[$0 + 14452 >> 2] = $1;
 $1 = HEAP32[$0 + 14448 >> 2];
 $2 = HEAP32[$0 + 14452 >> 2];
 HEAP32[$0 + 14476 >> 2] = $3;
 HEAP32[$0 + 14472 >> 2] = 3655;
 HEAP32[$0 + 14468 >> 2] = $2;
 HEAP32[$0 + 14464 >> 2] = $1;
 $3 = HEAP32[$0 + 14476 >> 2];
 $4 = HEAP32[$0 + 14472 >> 2];
 $1 = HEAP32[$0 + 14464 >> 2];
 HEAP32[$0 + 14460 >> 2] = HEAP32[$0 + 14468 >> 2];
 HEAP32[$0 + 14456 >> 2] = $1;
 $2 = HEAP32[$0 + 14460 >> 2];
 $1 = HEAP32[$0 + 14456 >> 2];
 HEAP32[$0 + 72 >> 2] = $1;
 HEAP32[$0 + 76 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2WheelJoint____29_28bool_29___invoke_b2WheelJoint__28char_20const__2c_20void_20_28b2WheelJoint____29_28bool_29_29($4, $0 + 72 | 0);
 HEAP32[$0 + 2064 >> 2] = 0;
 HEAP32[$0 + 2060 >> 2] = 391;
 $1 = HEAP32[$0 + 2064 >> 2];
 $2 = HEAP32[$0 + 2060 >> 2];
 HEAP32[$0 + 14576 >> 2] = $2;
 HEAP32[$0 + 14580 >> 2] = $1;
 $1 = HEAP32[$0 + 14576 >> 2];
 $2 = HEAP32[$0 + 14580 >> 2];
 HEAP32[$0 + 14604 >> 2] = $3;
 HEAP32[$0 + 14600 >> 2] = 10168;
 HEAP32[$0 + 14596 >> 2] = $2;
 HEAP32[$0 + 14592 >> 2] = $1;
 $3 = HEAP32[$0 + 14604 >> 2];
 $4 = HEAP32[$0 + 14600 >> 2];
 $1 = HEAP32[$0 + 14592 >> 2];
 HEAP32[$0 + 14588 >> 2] = HEAP32[$0 + 14596 >> 2];
 HEAP32[$0 + 14584 >> 2] = $1;
 $2 = HEAP32[$0 + 14588 >> 2];
 $1 = HEAP32[$0 + 14584 >> 2];
 HEAP32[$0 + 64 >> 2] = $1;
 HEAP32[$0 + 68 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2WheelJoint____29_28float_29___invoke_b2WheelJoint__28char_20const__2c_20void_20_28b2WheelJoint____29_28float_29_29($4, $0 - -64 | 0);
 HEAP32[$0 + 2056 >> 2] = 0;
 HEAP32[$0 + 2052 >> 2] = 392;
 $1 = HEAP32[$0 + 2056 >> 2];
 $2 = HEAP32[$0 + 2052 >> 2];
 HEAP32[$0 + 14352 >> 2] = $2;
 HEAP32[$0 + 14356 >> 2] = $1;
 $1 = HEAP32[$0 + 14352 >> 2];
 $2 = HEAP32[$0 + 14356 >> 2];
 HEAP32[$0 + 14380 >> 2] = $3;
 HEAP32[$0 + 14376 >> 2] = 10182;
 HEAP32[$0 + 14372 >> 2] = $2;
 HEAP32[$0 + 14368 >> 2] = $1;
 $3 = HEAP32[$0 + 14380 >> 2];
 $4 = HEAP32[$0 + 14376 >> 2];
 $1 = HEAP32[$0 + 14368 >> 2];
 HEAP32[$0 + 14364 >> 2] = HEAP32[$0 + 14372 >> 2];
 HEAP32[$0 + 14360 >> 2] = $1;
 $2 = HEAP32[$0 + 14364 >> 2];
 $1 = HEAP32[$0 + 14360 >> 2];
 HEAP32[$0 + 56 >> 2] = $1;
 HEAP32[$0 + 60 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2WheelJoint____29_28_29_20const___invoke_b2WheelJoint__28char_20const__2c_20float_20_28b2WheelJoint____29_28_29_20const_29($4, $0 + 56 | 0);
 HEAP32[$0 + 2048 >> 2] = 0;
 HEAP32[$0 + 2044 >> 2] = 393;
 $1 = HEAP32[$0 + 2048 >> 2];
 $2 = HEAP32[$0 + 2044 >> 2];
 HEAP32[$0 + 14544 >> 2] = $2;
 HEAP32[$0 + 14548 >> 2] = $1;
 $1 = HEAP32[$0 + 14544 >> 2];
 $2 = HEAP32[$0 + 14548 >> 2];
 HEAP32[$0 + 14572 >> 2] = $3;
 HEAP32[$0 + 14568 >> 2] = 8634;
 HEAP32[$0 + 14564 >> 2] = $2;
 HEAP32[$0 + 14560 >> 2] = $1;
 $3 = HEAP32[$0 + 14572 >> 2];
 $4 = HEAP32[$0 + 14568 >> 2];
 $1 = HEAP32[$0 + 14560 >> 2];
 HEAP32[$0 + 14556 >> 2] = HEAP32[$0 + 14564 >> 2];
 HEAP32[$0 + 14552 >> 2] = $1;
 $2 = HEAP32[$0 + 14556 >> 2];
 $1 = HEAP32[$0 + 14552 >> 2];
 HEAP32[$0 + 48 >> 2] = $1;
 HEAP32[$0 + 52 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2WheelJoint____29_28float_29___invoke_b2WheelJoint__28char_20const__2c_20void_20_28b2WheelJoint____29_28float_29_29($4, $0 + 48 | 0);
 HEAP32[$0 + 2040 >> 2] = 0;
 HEAP32[$0 + 2036 >> 2] = 394;
 $1 = HEAP32[$0 + 2040 >> 2];
 $2 = HEAP32[$0 + 2036 >> 2];
 HEAP32[$0 + 14320 >> 2] = $2;
 HEAP32[$0 + 14324 >> 2] = $1;
 $1 = HEAP32[$0 + 14320 >> 2];
 $2 = HEAP32[$0 + 14324 >> 2];
 HEAP32[$0 + 14348 >> 2] = $3;
 HEAP32[$0 + 14344 >> 2] = 8652;
 HEAP32[$0 + 14340 >> 2] = $2;
 HEAP32[$0 + 14336 >> 2] = $1;
 $3 = HEAP32[$0 + 14348 >> 2];
 $4 = HEAP32[$0 + 14344 >> 2];
 $1 = HEAP32[$0 + 14336 >> 2];
 HEAP32[$0 + 14332 >> 2] = HEAP32[$0 + 14340 >> 2];
 HEAP32[$0 + 14328 >> 2] = $1;
 $2 = HEAP32[$0 + 14332 >> 2];
 $1 = HEAP32[$0 + 14328 >> 2];
 HEAP32[$0 + 40 >> 2] = $1;
 HEAP32[$0 + 44 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2WheelJoint____29_28_29_20const___invoke_b2WheelJoint__28char_20const__2c_20float_20_28b2WheelJoint____29_28_29_20const_29($4, $0 + 40 | 0);
 HEAP32[$0 + 2032 >> 2] = 0;
 HEAP32[$0 + 2028 >> 2] = 395;
 $1 = HEAP32[$0 + 2032 >> 2];
 $2 = HEAP32[$0 + 2028 >> 2];
 HEAP32[$0 + 14608 >> 2] = $2;
 HEAP32[$0 + 14612 >> 2] = $1;
 $1 = HEAP32[$0 + 14608 >> 2];
 $2 = HEAP32[$0 + 14612 >> 2];
 HEAP32[$0 + 14636 >> 2] = $3;
 HEAP32[$0 + 14632 >> 2] = 8670;
 HEAP32[$0 + 14628 >> 2] = $2;
 HEAP32[$0 + 14624 >> 2] = $1;
 $3 = HEAP32[$0 + 14636 >> 2];
 $4 = HEAP32[$0 + 14632 >> 2];
 $1 = HEAP32[$0 + 14624 >> 2];
 HEAP32[$0 + 14620 >> 2] = HEAP32[$0 + 14628 >> 2];
 HEAP32[$0 + 14616 >> 2] = $1;
 $2 = HEAP32[$0 + 14620 >> 2];
 $1 = HEAP32[$0 + 14616 >> 2];
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 + 36 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2WheelJoint____29_28float_29_20const___invoke_b2WheelJoint__28char_20const__2c_20float_20_28b2WheelJoint____29_28float_29_20const_29($4, $0 + 32 | 0);
 HEAP32[$0 + 2024 >> 2] = 0;
 HEAP32[$0 + 2020 >> 2] = 396;
 $1 = HEAP32[$0 + 2024 >> 2];
 $2 = HEAP32[$0 + 2020 >> 2];
 HEAP32[$0 + 14512 >> 2] = $2;
 HEAP32[$0 + 14516 >> 2] = $1;
 $1 = HEAP32[$0 + 14512 >> 2];
 $2 = HEAP32[$0 + 14516 >> 2];
 HEAP32[$0 + 14540 >> 2] = $3;
 HEAP32[$0 + 14536 >> 2] = 1036;
 HEAP32[$0 + 14532 >> 2] = $2;
 HEAP32[$0 + 14528 >> 2] = $1;
 $3 = HEAP32[$0 + 14540 >> 2];
 $4 = HEAP32[$0 + 14536 >> 2];
 $1 = HEAP32[$0 + 14528 >> 2];
 HEAP32[$0 + 14524 >> 2] = HEAP32[$0 + 14532 >> 2];
 HEAP32[$0 + 14520 >> 2] = $1;
 $2 = HEAP32[$0 + 14524 >> 2];
 $1 = HEAP32[$0 + 14520 >> 2];
 HEAP32[$0 + 24 >> 2] = $1;
 HEAP32[$0 + 28 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2WheelJoint____29_28float_29___invoke_b2WheelJoint__28char_20const__2c_20void_20_28b2WheelJoint____29_28float_29_29($4, $0 + 24 | 0);
 HEAP32[$0 + 2016 >> 2] = 0;
 HEAP32[$0 + 2012 >> 2] = 397;
 $1 = HEAP32[$0 + 2016 >> 2];
 $2 = HEAP32[$0 + 2012 >> 2];
 HEAP32[$0 + 14288 >> 2] = $2;
 HEAP32[$0 + 14292 >> 2] = $1;
 $1 = HEAP32[$0 + 14288 >> 2];
 $2 = HEAP32[$0 + 14292 >> 2];
 HEAP32[$0 + 14316 >> 2] = $3;
 HEAP32[$0 + 14312 >> 2] = 1057;
 HEAP32[$0 + 14308 >> 2] = $2;
 HEAP32[$0 + 14304 >> 2] = $1;
 $3 = HEAP32[$0 + 14316 >> 2];
 $4 = HEAP32[$0 + 14312 >> 2];
 $1 = HEAP32[$0 + 14304 >> 2];
 HEAP32[$0 + 14300 >> 2] = HEAP32[$0 + 14308 >> 2];
 HEAP32[$0 + 14296 >> 2] = $1;
 $2 = HEAP32[$0 + 14300 >> 2];
 $1 = HEAP32[$0 + 14296 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 HEAP32[$0 + 20 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2WheelJoint____29_28_29_20const___invoke_b2WheelJoint__28char_20const__2c_20float_20_28b2WheelJoint____29_28_29_20const_29($4, $0 + 16 | 0);
 HEAP32[$0 + 2008 >> 2] = 0;
 HEAP32[$0 + 2004 >> 2] = 398;
 $1 = HEAP32[$0 + 2008 >> 2];
 $2 = HEAP32[$0 + 2004 >> 2];
 HEAP32[$0 + 14480 >> 2] = $2;
 HEAP32[$0 + 14484 >> 2] = $1;
 $1 = HEAP32[$0 + 14480 >> 2];
 $2 = HEAP32[$0 + 14484 >> 2];
 HEAP32[$0 + 14508 >> 2] = $3;
 HEAP32[$0 + 14504 >> 2] = 6210;
 HEAP32[$0 + 14500 >> 2] = $2;
 HEAP32[$0 + 14496 >> 2] = $1;
 $3 = HEAP32[$0 + 14508 >> 2];
 $4 = HEAP32[$0 + 14504 >> 2];
 $1 = HEAP32[$0 + 14496 >> 2];
 HEAP32[$0 + 14492 >> 2] = HEAP32[$0 + 14500 >> 2];
 HEAP32[$0 + 14488 >> 2] = $1;
 $2 = HEAP32[$0 + 14492 >> 2];
 $1 = HEAP32[$0 + 14488 >> 2];
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2WheelJoint____29_28float_29___invoke_b2WheelJoint__28char_20const__2c_20void_20_28b2WheelJoint____29_28float_29_29($4, $0 + 8 | 0);
 HEAP32[$0 + 2e3 >> 2] = 0;
 HEAP32[$0 + 1996 >> 2] = 399;
 $1 = HEAP32[$0 + 2e3 >> 2];
 $2 = HEAP32[$0 + 1996 >> 2];
 HEAP32[$0 + 14256 >> 2] = $2;
 HEAP32[$0 + 14260 >> 2] = $1;
 $1 = HEAP32[$0 + 14256 >> 2];
 $2 = HEAP32[$0 + 14260 >> 2];
 HEAP32[$0 + 14284 >> 2] = $3;
 HEAP32[$0 + 14280 >> 2] = 6232;
 HEAP32[$0 + 14276 >> 2] = $2;
 HEAP32[$0 + 14272 >> 2] = $1;
 $3 = HEAP32[$0 + 14284 >> 2];
 $4 = HEAP32[$0 + 14280 >> 2];
 $1 = HEAP32[$0 + 14272 >> 2];
 HEAP32[$0 + 14268 >> 2] = HEAP32[$0 + 14276 >> 2];
 HEAP32[$0 + 14264 >> 2] = $1;
 $2 = HEAP32[$0 + 14268 >> 2];
 $1 = HEAP32[$0 + 14264 >> 2];
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_float_20_28b2WheelJoint____29_28_29_20const___invoke_b2WheelJoint__28char_20const__2c_20float_20_28b2WheelJoint____29_28_29_20const_29($4, $0);
 HEAP32[$0 + 1992 >> 2] = 1;
 HEAP32[$0 + 1988 >> 2] = 16;
 $1 = HEAP32[$0 + 1992 >> 2];
 $2 = HEAP32[$0 + 1988 >> 2];
 HEAP32[$0 + 14640 >> 2] = $2;
 HEAP32[$0 + 14644 >> 2] = $1;
 $1 = HEAP32[$0 + 14640 >> 2];
 $2 = HEAP32[$0 + 14644 >> 2];
 HEAP32[$0 + 14668 >> 2] = $3;
 HEAP32[$0 + 14664 >> 2] = 6119;
 HEAP32[$0 + 14660 >> 2] = $2;
 HEAP32[$0 + 14656 >> 2] = $1;
 $3 = HEAP32[$0 + 14664 >> 2];
 $1 = HEAP32[$0 + 14656 >> 2];
 HEAP32[$0 + 14652 >> 2] = HEAP32[$0 + 14660 >> 2];
 HEAP32[$0 + 14648 >> 2] = $1;
 $2 = HEAP32[$0 + 14652 >> 2];
 $1 = HEAP32[$0 + 14648 >> 2];
 HEAP32[$0 + 1976 >> 2] = $1;
 HEAP32[$0 + 1980 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28b2WheelJoint____29_28_29___invoke_b2WheelJoint__28char_20const__2c_20void_20_28b2WheelJoint____29_28_29_29($3, $0 + 1976 | 0);
 __stack_pointer = $0 + 16288 | 0;
}

function dlmalloc($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $11 = __stack_pointer - 16 | 0;
 __stack_pointer = $11;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     label$5: {
      label$6: {
       label$7: {
        label$8: {
         label$9: {
          label$10: {
           label$11: {
            label$12: {
             label$13: {
              label$14: {
               if ($0 >>> 0 <= 244) {
                $6 = HEAP32[8034];
                $5 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
                $1 = $5 >>> 3 | 0;
                $0 = $6 >>> $1 | 0;
                if ($0 & 3) {
                 $2 = (($0 ^ -1) & 1) + $1 | 0;
                 $1 = $2 << 3;
                 $0 = $1 + 32176 | 0;
                 $1 = HEAP32[$1 + 32184 >> 2];
                 $5 = HEAP32[$1 + 8 >> 2];
                 label$17: {
                  if (($0 | 0) == ($5 | 0)) {
                   wasm2js_i32$0 = 32136, wasm2js_i32$1 = __wasm_rotl_i32(-2, $2) & $6, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                   break label$17;
                  }
                  HEAP32[$5 + 12 >> 2] = $0;
                  HEAP32[$0 + 8 >> 2] = $5;
                 }
                 $0 = $1 + 8 | 0;
                 $2 = $2 << 3;
                 HEAP32[$1 + 4 >> 2] = $2 | 3;
                 $1 = $1 + $2 | 0;
                 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
                 break label$1;
                }
                $8 = HEAP32[8036];
                if ($8 >>> 0 >= $5 >>> 0) {
                 break label$14;
                }
                if ($0) {
                 $2 = $0 << $1;
                 $0 = 2 << $1;
                 $0 = $2 & ($0 | 0 - $0);
                 $1 = __wasm_ctz_i32($0 & 0 - $0);
                 $0 = $1 << 3;
                 $2 = $0 + 32176 | 0;
                 $0 = HEAP32[$0 + 32184 >> 2];
                 $3 = HEAP32[$0 + 8 >> 2];
                 label$20: {
                  if (($2 | 0) == ($3 | 0)) {
                   $6 = __wasm_rotl_i32(-2, $1) & $6;
                   HEAP32[8034] = $6;
                   break label$20;
                  }
                  HEAP32[$3 + 12 >> 2] = $2;
                  HEAP32[$2 + 8 >> 2] = $3;
                 }
                 HEAP32[$0 + 4 >> 2] = $5 | 3;
                 $3 = $0 + $5 | 0;
                 $1 = $1 << 3;
                 $2 = $1 - $5 | 0;
                 HEAP32[$3 + 4 >> 2] = $2 | 1;
                 HEAP32[$0 + $1 >> 2] = $2;
                 if ($8) {
                  $5 = ($8 & -8) + 32176 | 0;
                  $1 = HEAP32[8039];
                  $4 = 1 << ($8 >>> 3);
                  label$23: {
                   if (!($6 & $4)) {
                    HEAP32[8034] = $4 | $6;
                    $4 = $5;
                    break label$23;
                   }
                   $4 = HEAP32[$5 + 8 >> 2];
                  }
                  HEAP32[$5 + 8 >> 2] = $1;
                  HEAP32[$4 + 12 >> 2] = $1;
                  HEAP32[$1 + 12 >> 2] = $5;
                  HEAP32[$1 + 8 >> 2] = $4;
                 }
                 $0 = $0 + 8 | 0;
                 HEAP32[8039] = $3;
                 HEAP32[8036] = $2;
                 break label$1;
                }
                $9 = HEAP32[8035];
                if (!$9) {
                 break label$14;
                }
                $3 = HEAP32[(__wasm_ctz_i32(0 - $9 & $9) << 2) + 32440 >> 2];
                $1 = (HEAP32[$3 + 4 >> 2] & -8) - $5 | 0;
                $2 = $3;
                while (1) {
                 label$26: {
                  $0 = HEAP32[$2 + 16 >> 2];
                  if (!$0) {
                   $0 = HEAP32[$2 + 20 >> 2];
                   if (!$0) {
                    break label$26;
                   }
                  }
                  $2 = (HEAP32[$0 + 4 >> 2] & -8) - $5 | 0;
                  $4 = $2;
                  $2 = $1 >>> 0 > $2 >>> 0;
                  $1 = $2 ? $4 : $1;
                  $3 = $2 ? $0 : $3;
                  $2 = $0;
                  continue;
                 }
                 break;
                }
                $10 = HEAP32[$3 + 24 >> 2];
                $4 = HEAP32[$3 + 12 >> 2];
                if (($4 | 0) != ($3 | 0)) {
                 $0 = HEAP32[$3 + 8 >> 2];
                 HEAP32[$0 + 12 >> 2] = $4;
                 HEAP32[$4 + 8 >> 2] = $0;
                 break label$2;
                }
                $2 = $3 + 20 | 0;
                $0 = HEAP32[$2 >> 2];
                if (!$0) {
                 $0 = HEAP32[$3 + 16 >> 2];
                 if (!$0) {
                  break label$13;
                 }
                 $2 = $3 + 16 | 0;
                }
                while (1) {
                 $7 = $2;
                 $4 = $0;
                 $2 = $0 + 20 | 0;
                 $0 = HEAP32[$2 >> 2];
                 if ($0) {
                  continue;
                 }
                 $2 = $4 + 16 | 0;
                 $0 = HEAP32[$4 + 16 >> 2];
                 if ($0) {
                  continue;
                 }
                 break;
                }
                HEAP32[$7 >> 2] = 0;
                break label$2;
               }
               $5 = -1;
               if ($0 >>> 0 > 4294967231) {
                break label$14;
               }
               $0 = $0 + 11 | 0;
               $5 = $0 & -8;
               $8 = HEAP32[8035];
               if (!$8) {
                break label$14;
               }
               $1 = 0 - $5 | 0;
               $7 = 0;
               label$34: {
                if ($5 >>> 0 < 256) {
                 break label$34;
                }
                $7 = 31;
                if ($5 >>> 0 > 16777215) {
                 break label$34;
                }
                $0 = Math_clz32($0 >>> 8 | 0);
                $7 = (($5 >>> 38 - $0 & 1) - ($0 << 1) | 0) + 62 | 0;
               }
               $2 = HEAP32[($7 << 2) + 32440 >> 2];
               label$31: {
                label$32: {
                 label$33: {
                  if (!$2) {
                   $0 = 0;
                   break label$33;
                  }
                  $0 = 0;
                  $3 = $5 << (($7 | 0) != 31 ? 25 - ($7 >>> 1 | 0) | 0 : 0);
                  while (1) {
                   label$37: {
                    $6 = (HEAP32[$2 + 4 >> 2] & -8) - $5 | 0;
                    if ($6 >>> 0 >= $1 >>> 0) {
                     break label$37;
                    }
                    $4 = $2;
                    $1 = $6;
                    if ($1) {
                     break label$37;
                    }
                    $1 = 0;
                    $0 = $2;
                    break label$32;
                   }
                   $6 = HEAP32[$2 + 20 >> 2];
                   $2 = HEAP32[(($3 >>> 29 & 4) + $2 | 0) + 16 >> 2];
                   $0 = $6 ? ($6 | 0) == ($2 | 0) ? $0 : $6 : $0;
                   $3 = $3 << 1;
                   if ($2) {
                    continue;
                   }
                   break;
                  }
                 }
                 if (!($0 | $4)) {
                  $4 = 0;
                  $0 = 2 << $7;
                  $0 = ($0 | 0 - $0) & $8;
                  if (!$0) {
                   break label$14;
                  }
                  $0 = HEAP32[(__wasm_ctz_i32(0 - $0 & $0) << 2) + 32440 >> 2];
                 }
                 if (!$0) {
                  break label$31;
                 }
                }
                while (1) {
                 $6 = (HEAP32[$0 + 4 >> 2] & -8) - $5 | 0;
                 $3 = $6 >>> 0 < $1 >>> 0;
                 $1 = $3 ? $6 : $1;
                 $4 = $3 ? $0 : $4;
                 $2 = HEAP32[$0 + 16 >> 2];
                 if (!$2) {
                  $2 = HEAP32[$0 + 20 >> 2];
                 }
                 $0 = $2;
                 if ($0) {
                  continue;
                 }
                 break;
                }
               }
               if (!$4 | HEAP32[8036] - $5 >>> 0 <= $1 >>> 0) {
                break label$14;
               }
               $7 = HEAP32[$4 + 24 >> 2];
               $3 = HEAP32[$4 + 12 >> 2];
               if (($4 | 0) != ($3 | 0)) {
                $0 = HEAP32[$4 + 8 >> 2];
                HEAP32[$0 + 12 >> 2] = $3;
                HEAP32[$3 + 8 >> 2] = $0;
                break label$3;
               }
               $2 = $4 + 20 | 0;
               $0 = HEAP32[$2 >> 2];
               if (!$0) {
                $0 = HEAP32[$4 + 16 >> 2];
                if (!$0) {
                 break label$12;
                }
                $2 = $4 + 16 | 0;
               }
               while (1) {
                $6 = $2;
                $3 = $0;
                $2 = $0 + 20 | 0;
                $0 = HEAP32[$2 >> 2];
                if ($0) {
                 continue;
                }
                $2 = $3 + 16 | 0;
                $0 = HEAP32[$3 + 16 >> 2];
                if ($0) {
                 continue;
                }
                break;
               }
               HEAP32[$6 >> 2] = 0;
               break label$3;
              }
              $0 = HEAP32[8036];
              if ($5 >>> 0 <= $0 >>> 0) {
               $1 = HEAP32[8039];
               $2 = $0 - $5 | 0;
               label$45: {
                if ($2 >>> 0 >= 16) {
                 $3 = $1 + $5 | 0;
                 HEAP32[$3 + 4 >> 2] = $2 | 1;
                 HEAP32[$0 + $1 >> 2] = $2;
                 HEAP32[$1 + 4 >> 2] = $5 | 3;
                 break label$45;
                }
                HEAP32[$1 + 4 >> 2] = $0 | 3;
                $0 = $0 + $1 | 0;
                HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
                $3 = 0;
                $2 = 0;
               }
               HEAP32[8036] = $2;
               HEAP32[8039] = $3;
               $0 = $1 + 8 | 0;
               break label$1;
              }
              $3 = HEAP32[8037];
              if ($5 >>> 0 < $3 >>> 0) {
               $1 = $3 - $5 | 0;
               HEAP32[8037] = $1;
               $0 = HEAP32[8040];
               $2 = $5 + $0 | 0;
               HEAP32[8040] = $2;
               HEAP32[$2 + 4 >> 2] = $1 | 1;
               HEAP32[$0 + 4 >> 2] = $5 | 3;
               $0 = $0 + 8 | 0;
               break label$1;
              }
              $0 = 0;
              $8 = $5 + 47 | 0;
              if (HEAP32[8152]) {
               $1 = HEAP32[8154];
              } else {
               HEAP32[8155] = -1;
               HEAP32[8156] = -1;
               HEAP32[8153] = 4096;
               HEAP32[8154] = 4096;
               HEAP32[8152] = $11 + 12 & -16 ^ 1431655768;
               HEAP32[8157] = 0;
               HEAP32[8145] = 0;
               $1 = 4096;
              }
              $6 = $8 + $1 | 0;
              $7 = 0 - $1 | 0;
              $4 = $6 & $7;
              if ($5 >>> 0 >= $4 >>> 0) {
               break label$1;
              }
              $1 = HEAP32[8144];
              if ($1) {
               $2 = HEAP32[8142];
               $9 = $4 + $2 | 0;
               if ($1 >>> 0 < $9 >>> 0 | $2 >>> 0 >= $9 >>> 0) {
                break label$1;
               }
              }
              label$51: {
               if (!(HEAPU8[32580] & 4)) {
                label$53: {
                 label$54: {
                  label$55: {
                   label$56: {
                    $1 = HEAP32[8040];
                    if ($1) {
                     $0 = 32584;
                     while (1) {
                      $2 = HEAP32[$0 >> 2];
                      if ($2 >>> 0 <= $1 >>> 0 & HEAP32[$0 + 4 >> 2] + $2 >>> 0 > $1 >>> 0) {
                       break label$56;
                      }
                      $0 = HEAP32[$0 + 8 >> 2];
                      if ($0) {
                       continue;
                      }
                      break;
                     }
                    }
                    $3 = sbrk(0);
                    if (($3 | 0) == -1) {
                     break label$53;
                    }
                    $6 = $4;
                    $0 = HEAP32[8153];
                    $1 = $0 - 1 | 0;
                    if ($3 & $1) {
                     $6 = ($4 - $3 | 0) + ($1 + $3 & 0 - $0) | 0;
                    }
                    if ($5 >>> 0 >= $6 >>> 0) {
                     break label$53;
                    }
                    $0 = HEAP32[8144];
                    if ($0) {
                     $1 = HEAP32[8142];
                     $2 = $6 + $1 | 0;
                     if ($0 >>> 0 < $2 >>> 0 | $1 >>> 0 >= $2 >>> 0) {
                      break label$53;
                     }
                    }
                    $0 = sbrk($6);
                    if (($3 | 0) != ($0 | 0)) {
                     break label$55;
                    }
                    break label$51;
                   }
                   $6 = $6 - $3 & $7;
                   $3 = sbrk($6);
                   if (($3 | 0) == (HEAP32[$0 >> 2] + HEAP32[$0 + 4 >> 2] | 0)) {
                    break label$54;
                   }
                   $0 = $3;
                  }
                  if (($0 | 0) == -1) {
                   break label$53;
                  }
                  if ($5 + 48 >>> 0 <= $6 >>> 0) {
                   $3 = $0;
                   break label$51;
                  }
                  $1 = HEAP32[8154];
                  $1 = $1 + ($8 - $6 | 0) & 0 - $1;
                  if ((sbrk($1) | 0) == -1) {
                   break label$53;
                  }
                  $6 = $1 + $6 | 0;
                  $3 = $0;
                  break label$51;
                 }
                 if (($3 | 0) != -1) {
                  break label$51;
                 }
                }
                HEAP32[8145] = HEAP32[8145] | 4;
               }
               $3 = sbrk($4);
               $0 = sbrk(0);
               if (($3 | 0) == -1 | ($0 | 0) == -1 | $0 >>> 0 <= $3 >>> 0) {
                break label$9;
               }
               $6 = $0 - $3 | 0;
               if ($6 >>> 0 <= $5 + 40 >>> 0) {
                break label$9;
               }
              }
              $0 = HEAP32[8142] + $6 | 0;
              HEAP32[8142] = $0;
              if (HEAPU32[8143] < $0 >>> 0) {
               HEAP32[8143] = $0;
              }
              label$64: {
               $1 = HEAP32[8040];
               if ($1) {
                $0 = 32584;
                while (1) {
                 $2 = HEAP32[$0 >> 2];
                 $4 = HEAP32[$0 + 4 >> 2];
                 if (($2 + $4 | 0) == ($3 | 0)) {
                  break label$64;
                 }
                 $0 = HEAP32[$0 + 8 >> 2];
                 if ($0) {
                  continue;
                 }
                 break;
                }
                break label$11;
               }
               $0 = HEAP32[8038];
               if (!($0 >>> 0 <= $3 >>> 0 ? $0 : 0)) {
                HEAP32[8038] = $3;
               }
               $0 = 0;
               HEAP32[8147] = $6;
               HEAP32[8146] = $3;
               HEAP32[8042] = -1;
               HEAP32[8043] = HEAP32[8152];
               HEAP32[8149] = 0;
               while (1) {
                $1 = $0 << 3;
                $2 = $1 + 32176 | 0;
                HEAP32[$1 + 32184 >> 2] = $2;
                HEAP32[$1 + 32188 >> 2] = $2;
                $0 = $0 + 1 | 0;
                if (($0 | 0) != 32) {
                 continue;
                }
                break;
               }
               $0 = $6 - 40 | 0;
               $1 = $3 + 8 & 7 ? -8 - $3 & 7 : 0;
               $2 = $0 - $1 | 0;
               HEAP32[8037] = $2;
               $1 = $1 + $3 | 0;
               HEAP32[8040] = $1;
               HEAP32[$1 + 4 >> 2] = $2 | 1;
               HEAP32[($0 + $3 | 0) + 4 >> 2] = 40;
               HEAP32[8041] = HEAP32[8156];
               break label$10;
              }
              if (HEAP32[$0 + 12 >> 2] & 8 | ($1 >>> 0 < $2 >>> 0 | $1 >>> 0 >= $3 >>> 0)) {
               break label$11;
              }
              HEAP32[$0 + 4 >> 2] = $4 + $6;
              $0 = $1 + 8 & 7 ? -8 - $1 & 7 : 0;
              $2 = $1 + $0 | 0;
              HEAP32[8040] = $2;
              $3 = HEAP32[8037] + $6 | 0;
              $0 = $3 - $0 | 0;
              HEAP32[8037] = $0;
              HEAP32[$2 + 4 >> 2] = $0 | 1;
              HEAP32[($1 + $3 | 0) + 4 >> 2] = 40;
              HEAP32[8041] = HEAP32[8156];
              break label$10;
             }
             $4 = 0;
             break label$2;
            }
            $3 = 0;
            break label$3;
           }
           $4 = HEAP32[8038];
           if ($4 >>> 0 > $3 >>> 0) {
            HEAP32[8038] = $3;
           }
           $2 = $3 + $6 | 0;
           $0 = 32584;
           label$70: {
            label$71: {
             label$72: {
              while (1) {
               if (HEAP32[$0 >> 2] != ($2 | 0)) {
                $0 = HEAP32[$0 + 8 >> 2];
                if ($0) {
                 continue;
                }
                break label$72;
               }
               break;
              }
              if (!(HEAPU8[$0 + 12 | 0] & 8)) {
               break label$71;
              }
             }
             $0 = 32584;
             while (1) {
              $2 = HEAP32[$0 >> 2];
              if ($2 >>> 0 <= $1 >>> 0) {
               $2 = HEAP32[$0 + 4 >> 2] + $2 | 0;
               if ($2 >>> 0 > $1 >>> 0) {
                break label$70;
               }
              }
              $0 = HEAP32[$0 + 8 >> 2];
              continue;
             }
            }
            HEAP32[$0 >> 2] = $3;
            HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + $6;
            $7 = ($3 + 8 & 7 ? -8 - $3 & 7 : 0) + $3 | 0;
            HEAP32[$7 + 4 >> 2] = $5 | 3;
            $6 = ($2 + 8 & 7 ? -8 - $2 & 7 : 0) + $2 | 0;
            $5 = $5 + $7 | 0;
            $0 = $6 - $5 | 0;
            if (($1 | 0) == ($6 | 0)) {
             HEAP32[8040] = $5;
             $0 = HEAP32[8037] + $0 | 0;
             HEAP32[8037] = $0;
             HEAP32[$5 + 4 >> 2] = $0 | 1;
             break label$4;
            }
            if (HEAP32[8039] == ($6 | 0)) {
             HEAP32[8039] = $5;
             $0 = HEAP32[8036] + $0 | 0;
             HEAP32[8036] = $0;
             HEAP32[$5 + 4 >> 2] = $0 | 1;
             HEAP32[$0 + $5 >> 2] = $0;
             break label$4;
            }
            $1 = HEAP32[$6 + 4 >> 2];
            if (($1 & 3) != 1) {
             break label$5;
            }
            $8 = $1 & -8;
            if ($1 >>> 0 <= 255) {
             $4 = $1 >>> 3 | 0;
             $1 = HEAP32[$6 + 12 >> 2];
             $2 = HEAP32[$6 + 8 >> 2];
             if (($1 | 0) == ($2 | 0)) {
              wasm2js_i32$0 = 32136, wasm2js_i32$1 = HEAP32[8034] & __wasm_rotl_i32(-2, $4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
              break label$6;
             }
             HEAP32[$2 + 12 >> 2] = $1;
             HEAP32[$1 + 8 >> 2] = $2;
             break label$6;
            }
            $9 = HEAP32[$6 + 24 >> 2];
            $3 = HEAP32[$6 + 12 >> 2];
            if (($6 | 0) != ($3 | 0)) {
             $1 = HEAP32[$6 + 8 >> 2];
             HEAP32[$1 + 12 >> 2] = $3;
             HEAP32[$3 + 8 >> 2] = $1;
             break label$7;
            }
            $2 = $6 + 20 | 0;
            $1 = HEAP32[$2 >> 2];
            if (!$1) {
             $1 = HEAP32[$6 + 16 >> 2];
             if (!$1) {
              break label$8;
             }
             $2 = $6 + 16 | 0;
            }
            while (1) {
             $4 = $2;
             $3 = $1;
             $2 = $1 + 20 | 0;
             $1 = HEAP32[$2 >> 2];
             if ($1) {
              continue;
             }
             $2 = $3 + 16 | 0;
             $1 = HEAP32[$3 + 16 >> 2];
             if ($1) {
              continue;
             }
             break;
            }
            HEAP32[$4 >> 2] = 0;
            break label$7;
           }
           $0 = $6 - 40 | 0;
           $4 = $3 + 8 & 7 ? -8 - $3 & 7 : 0;
           $7 = $0 - $4 | 0;
           HEAP32[8037] = $7;
           $4 = $3 + $4 | 0;
           HEAP32[8040] = $4;
           HEAP32[$4 + 4 >> 2] = $7 | 1;
           HEAP32[($0 + $3 | 0) + 4 >> 2] = 40;
           HEAP32[8041] = HEAP32[8156];
           $0 = (($2 - 39 & 7 ? 39 - $2 & 7 : 0) + $2 | 0) - 47 | 0;
           $4 = $1 + 16 >>> 0 > $0 >>> 0 ? $1 : $0;
           HEAP32[$4 + 4 >> 2] = 27;
           $0 = HEAP32[8149];
           $7 = HEAP32[8148];
           HEAP32[$4 + 16 >> 2] = $7;
           HEAP32[$4 + 20 >> 2] = $0;
           $7 = HEAP32[8147];
           $0 = HEAP32[8146];
           HEAP32[$4 + 8 >> 2] = $0;
           HEAP32[$4 + 12 >> 2] = $7;
           HEAP32[8148] = $4 + 8;
           HEAP32[8147] = $6;
           HEAP32[8146] = $3;
           HEAP32[8149] = 0;
           $0 = $4 + 24 | 0;
           while (1) {
            HEAP32[$0 + 4 >> 2] = 7;
            $3 = $0 + 8 | 0;
            $0 = $0 + 4 | 0;
            if ($3 >>> 0 < $2 >>> 0) {
             continue;
            }
            break;
           }
           if (($1 | 0) == ($4 | 0)) {
            break label$10;
           }
           HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] & -2;
           $3 = $4 - $1 | 0;
           HEAP32[$1 + 4 >> 2] = $3 | 1;
           HEAP32[$4 >> 2] = $3;
           if ($3 >>> 0 <= 255) {
            $0 = ($3 & -8) + 32176 | 0;
            $3 = 1 << ($3 >>> 3);
            $2 = HEAP32[8034];
            label$86: {
             if (!($3 & $2)) {
              HEAP32[8034] = $3 | $2;
              $2 = $0;
              break label$86;
             }
             $2 = HEAP32[$0 + 8 >> 2];
            }
            HEAP32[$0 + 8 >> 2] = $1;
            HEAP32[$2 + 12 >> 2] = $1;
            HEAP32[$1 + 12 >> 2] = $0;
            HEAP32[$1 + 8 >> 2] = $2;
            break label$10;
           }
           $0 = 31;
           if ($3 >>> 0 <= 16777215) {
            $0 = Math_clz32($3 >>> 8 | 0);
            $0 = (($3 >>> 38 - $0 & 1) - ($0 << 1) | 0) + 62 | 0;
           }
           HEAP32[$1 + 28 >> 2] = $0;
           HEAP32[$1 + 16 >> 2] = 0;
           HEAP32[$1 + 20 >> 2] = 0;
           $2 = ($0 << 2) + 32440 | 0;
           label$89: {
            $4 = HEAP32[8035];
            $6 = 1 << $0;
            label$90: {
             if (!($4 & $6)) {
              HEAP32[8035] = $4 | $6;
              HEAP32[$2 >> 2] = $1;
              break label$90;
             }
             $0 = $3 << (($0 | 0) != 31 ? 25 - ($0 >>> 1 | 0) | 0 : 0);
             $4 = HEAP32[$2 >> 2];
             while (1) {
              $2 = $4;
              if ((HEAP32[$2 + 4 >> 2] & -8) == ($3 | 0)) {
               break label$89;
              }
              $4 = $0 >>> 29 | 0;
              $0 = $0 << 1;
              $7 = ($4 & 4) + $2 | 0;
              $6 = $7 + 16 | 0;
              $4 = HEAP32[$6 >> 2];
              if ($4) {
               continue;
              }
              break;
             }
             HEAP32[$7 + 16 >> 2] = $1;
            }
            HEAP32[$1 + 24 >> 2] = $2;
            HEAP32[$1 + 12 >> 2] = $1;
            HEAP32[$1 + 8 >> 2] = $1;
            break label$10;
           }
           $0 = HEAP32[$2 + 8 >> 2];
           HEAP32[$0 + 12 >> 2] = $1;
           HEAP32[$2 + 8 >> 2] = $1;
           HEAP32[$1 + 24 >> 2] = 0;
           HEAP32[$1 + 12 >> 2] = $2;
           HEAP32[$1 + 8 >> 2] = $0;
          }
          $0 = HEAP32[8037];
          if ($5 >>> 0 >= $0 >>> 0) {
           break label$9;
          }
          $1 = $0 - $5 | 0;
          HEAP32[8037] = $1;
          $0 = HEAP32[8040];
          $2 = $5 + $0 | 0;
          HEAP32[8040] = $2;
          HEAP32[$2 + 4 >> 2] = $1 | 1;
          HEAP32[$0 + 4 >> 2] = $5 | 3;
          $0 = $0 + 8 | 0;
          break label$1;
         }
         wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 48, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         $0 = 0;
         break label$1;
        }
        $3 = 0;
       }
       if (!$9) {
        break label$6;
       }
       $2 = HEAP32[$6 + 28 >> 2];
       $1 = ($2 << 2) + 32440 | 0;
       label$93: {
        if (HEAP32[$1 >> 2] == ($6 | 0)) {
         HEAP32[$1 >> 2] = $3;
         if ($3) {
          break label$93;
         }
         wasm2js_i32$0 = 32140, wasm2js_i32$1 = HEAP32[8035] & __wasm_rotl_i32(-2, $2), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         break label$6;
        }
        HEAP32[(HEAP32[$9 + 16 >> 2] == ($6 | 0) ? 16 : 20) + $9 >> 2] = $3;
        if (!$3) {
         break label$6;
        }
       }
       HEAP32[$3 + 24 >> 2] = $9;
       $1 = HEAP32[$6 + 16 >> 2];
       if ($1) {
        HEAP32[$3 + 16 >> 2] = $1;
        HEAP32[$1 + 24 >> 2] = $3;
       }
       $1 = HEAP32[$6 + 20 >> 2];
       if (!$1) {
        break label$6;
       }
       HEAP32[$3 + 20 >> 2] = $1;
       HEAP32[$1 + 24 >> 2] = $3;
      }
      $0 = $0 + $8 | 0;
      $6 = $6 + $8 | 0;
      $1 = HEAP32[$6 + 4 >> 2];
     }
     HEAP32[$6 + 4 >> 2] = $1 & -2;
     HEAP32[$5 + 4 >> 2] = $0 | 1;
     HEAP32[$0 + $5 >> 2] = $0;
     if ($0 >>> 0 <= 255) {
      $1 = ($0 & -8) + 32176 | 0;
      $0 = 1 << ($0 >>> 3);
      $2 = HEAP32[8034];
      label$97: {
       if (!($0 & $2)) {
        HEAP32[8034] = $0 | $2;
        $0 = $1;
        break label$97;
       }
       $0 = HEAP32[$1 + 8 >> 2];
      }
      HEAP32[$1 + 8 >> 2] = $5;
      HEAP32[$0 + 12 >> 2] = $5;
      HEAP32[$5 + 12 >> 2] = $1;
      HEAP32[$5 + 8 >> 2] = $0;
      break label$4;
     }
     $1 = 31;
     if ($0 >>> 0 <= 16777215) {
      $1 = Math_clz32($0 >>> 8 | 0);
      $1 = (($0 >>> 38 - $1 & 1) - ($1 << 1) | 0) + 62 | 0;
     }
     HEAP32[$5 + 28 >> 2] = $1;
     HEAP32[$5 + 16 >> 2] = 0;
     HEAP32[$5 + 20 >> 2] = 0;
     $2 = ($1 << 2) + 32440 | 0;
     label$100: {
      $3 = HEAP32[8035];
      $4 = 1 << $1;
      label$101: {
       if (!($3 & $4)) {
        HEAP32[8035] = $3 | $4;
        HEAP32[$2 >> 2] = $5;
        break label$101;
       }
       $1 = $0 << (($1 | 0) != 31 ? 25 - ($1 >>> 1 | 0) | 0 : 0);
       $3 = HEAP32[$2 >> 2];
       while (1) {
        $2 = $3;
        if ((HEAP32[$3 + 4 >> 2] & -8) == ($0 | 0)) {
         break label$100;
        }
        $3 = $1 >>> 29 | 0;
        $1 = $1 << 1;
        $6 = ($3 & 4) + $2 | 0;
        $4 = $6 + 16 | 0;
        $3 = HEAP32[$4 >> 2];
        if ($3) {
         continue;
        }
        break;
       }
       HEAP32[$6 + 16 >> 2] = $5;
      }
      HEAP32[$5 + 24 >> 2] = $2;
      HEAP32[$5 + 12 >> 2] = $5;
      HEAP32[$5 + 8 >> 2] = $5;
      break label$4;
     }
     $0 = HEAP32[$2 + 8 >> 2];
     HEAP32[$0 + 12 >> 2] = $5;
     HEAP32[$2 + 8 >> 2] = $5;
     HEAP32[$5 + 24 >> 2] = 0;
     HEAP32[$5 + 12 >> 2] = $2;
     HEAP32[$5 + 8 >> 2] = $0;
    }
    $0 = $7 + 8 | 0;
    break label$1;
   }
   label$104: {
    if (!$7) {
     break label$104;
    }
    $2 = HEAP32[$4 + 28 >> 2];
    $0 = ($2 << 2) + 32440 | 0;
    label$105: {
     if (HEAP32[$0 >> 2] == ($4 | 0)) {
      HEAP32[$0 >> 2] = $3;
      if ($3) {
       break label$105;
      }
      $8 = __wasm_rotl_i32(-2, $2) & $8;
      HEAP32[8035] = $8;
      break label$104;
     }
     HEAP32[(HEAP32[$7 + 16 >> 2] == ($4 | 0) ? 16 : 20) + $7 >> 2] = $3;
     if (!$3) {
      break label$104;
     }
    }
    HEAP32[$3 + 24 >> 2] = $7;
    $0 = HEAP32[$4 + 16 >> 2];
    if ($0) {
     HEAP32[$3 + 16 >> 2] = $0;
     HEAP32[$0 + 24 >> 2] = $3;
    }
    $0 = HEAP32[$4 + 20 >> 2];
    if (!$0) {
     break label$104;
    }
    HEAP32[$3 + 20 >> 2] = $0;
    HEAP32[$0 + 24 >> 2] = $3;
   }
   label$108: {
    if ($1 >>> 0 <= 15) {
     $0 = $1 + $5 | 0;
     HEAP32[$4 + 4 >> 2] = $0 | 3;
     $0 = $0 + $4 | 0;
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
     break label$108;
    }
    HEAP32[$4 + 4 >> 2] = $5 | 3;
    $3 = $5 + $4 | 0;
    HEAP32[$3 + 4 >> 2] = $1 | 1;
    HEAP32[$1 + $3 >> 2] = $1;
    if ($1 >>> 0 <= 255) {
     $0 = ($1 & -8) + 32176 | 0;
     $1 = 1 << ($1 >>> 3);
     $2 = HEAP32[8034];
     label$111: {
      if (!($1 & $2)) {
       HEAP32[8034] = $1 | $2;
       $1 = $0;
       break label$111;
      }
      $1 = HEAP32[$0 + 8 >> 2];
     }
     HEAP32[$0 + 8 >> 2] = $3;
     HEAP32[$1 + 12 >> 2] = $3;
     HEAP32[$3 + 12 >> 2] = $0;
     HEAP32[$3 + 8 >> 2] = $1;
     break label$108;
    }
    $0 = 31;
    if ($1 >>> 0 <= 16777215) {
     $0 = Math_clz32($1 >>> 8 | 0);
     $0 = (($1 >>> 38 - $0 & 1) - ($0 << 1) | 0) + 62 | 0;
    }
    HEAP32[$3 + 28 >> 2] = $0;
    HEAP32[$3 + 16 >> 2] = 0;
    HEAP32[$3 + 20 >> 2] = 0;
    $2 = ($0 << 2) + 32440 | 0;
    label$114: {
     $5 = 1 << $0;
     label$115: {
      if (!($8 & $5)) {
       HEAP32[8035] = $5 | $8;
       HEAP32[$2 >> 2] = $3;
       break label$115;
      }
      $0 = $1 << (($0 | 0) != 31 ? 25 - ($0 >>> 1 | 0) | 0 : 0);
      $5 = HEAP32[$2 >> 2];
      while (1) {
       $2 = $5;
       if ((HEAP32[$2 + 4 >> 2] & -8) == ($1 | 0)) {
        break label$114;
       }
       $5 = $0 >>> 29 | 0;
       $0 = $0 << 1;
       $7 = ($5 & 4) + $2 | 0;
       $6 = $7 + 16 | 0;
       $5 = HEAP32[$6 >> 2];
       if ($5) {
        continue;
       }
       break;
      }
      HEAP32[$7 + 16 >> 2] = $3;
     }
     HEAP32[$3 + 24 >> 2] = $2;
     HEAP32[$3 + 12 >> 2] = $3;
     HEAP32[$3 + 8 >> 2] = $3;
     break label$108;
    }
    $0 = HEAP32[$2 + 8 >> 2];
    HEAP32[$0 + 12 >> 2] = $3;
    HEAP32[$2 + 8 >> 2] = $3;
    HEAP32[$3 + 24 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = $2;
    HEAP32[$3 + 8 >> 2] = $0;
   }
   $0 = $4 + 8 | 0;
   break label$1;
  }
  label$118: {
   if (!$10) {
    break label$118;
   }
   $2 = HEAP32[$3 + 28 >> 2];
   $0 = ($2 << 2) + 32440 | 0;
   label$119: {
    if (HEAP32[$0 >> 2] == ($3 | 0)) {
     HEAP32[$0 >> 2] = $4;
     if ($4) {
      break label$119;
     }
     wasm2js_i32$0 = 32140, wasm2js_i32$1 = __wasm_rotl_i32(-2, $2) & $9, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     break label$118;
    }
    HEAP32[(HEAP32[$10 + 16 >> 2] == ($3 | 0) ? 16 : 20) + $10 >> 2] = $4;
    if (!$4) {
     break label$118;
    }
   }
   HEAP32[$4 + 24 >> 2] = $10;
   $0 = HEAP32[$3 + 16 >> 2];
   if ($0) {
    HEAP32[$4 + 16 >> 2] = $0;
    HEAP32[$0 + 24 >> 2] = $4;
   }
   $0 = HEAP32[$3 + 20 >> 2];
   if (!$0) {
    break label$118;
   }
   HEAP32[$4 + 20 >> 2] = $0;
   HEAP32[$0 + 24 >> 2] = $4;
  }
  label$122: {
   if ($1 >>> 0 <= 15) {
    $0 = $1 + $5 | 0;
    HEAP32[$3 + 4 >> 2] = $0 | 3;
    $0 = $0 + $3 | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
    break label$122;
   }
   HEAP32[$3 + 4 >> 2] = $5 | 3;
   $2 = $3 + $5 | 0;
   HEAP32[$2 + 4 >> 2] = $1 | 1;
   HEAP32[$1 + $2 >> 2] = $1;
   if ($8) {
    $5 = ($8 & -8) + 32176 | 0;
    $0 = HEAP32[8039];
    $4 = 1 << ($8 >>> 3);
    label$125: {
     if (!($6 & $4)) {
      HEAP32[8034] = $4 | $6;
      $4 = $5;
      break label$125;
     }
     $4 = HEAP32[$5 + 8 >> 2];
    }
    HEAP32[$5 + 8 >> 2] = $0;
    HEAP32[$4 + 12 >> 2] = $0;
    HEAP32[$0 + 12 >> 2] = $5;
    HEAP32[$0 + 8 >> 2] = $4;
   }
   HEAP32[8039] = $2;
   HEAP32[8036] = $1;
  }
  $0 = $3 + 8 | 0;
 }
 __stack_pointer = $11 + 16 | 0;
 return $0 | 0;
}

function b2EPCollider__Collide_28b2Manifold__2c_20b2EdgeShape_20const__2c_20b2Transform_20const__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_i32$1 = 0;
 $6 = __stack_pointer - 640 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 636 >> 2] = $0;
 HEAP32[$6 + 632 >> 2] = $1;
 HEAP32[$6 + 628 >> 2] = $2;
 HEAP32[$6 + 624 >> 2] = $3;
 HEAP32[$6 + 620 >> 2] = $4;
 HEAP32[$6 + 616 >> 2] = $5;
 $2 = HEAP32[$6 + 636 >> 2];
 b2MulT_28b2Transform_20const__2c_20b2Transform_20const__29($6 + 600 | 0, HEAP32[$6 + 624 >> 2], HEAP32[$6 + 616 >> 2]);
 $1 = HEAP32[$6 + 604 >> 2];
 $0 = HEAP32[$6 + 600 >> 2];
 HEAP32[$2 + 132 >> 2] = $0;
 HEAP32[$2 + 136 >> 2] = $1;
 $0 = HEAP32[$6 + 612 >> 2];
 $1 = HEAP32[$6 + 608 >> 2];
 HEAP32[$2 + 140 >> 2] = $1;
 HEAP32[$2 + 144 >> 2] = $0;
 b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($6 + 592 | 0, $2 + 132 | 0, HEAP32[$6 + 620 >> 2] + 12 | 0);
 $1 = HEAP32[$6 + 596 >> 2];
 $0 = HEAP32[$6 + 592 >> 2];
 HEAP32[$2 + 148 >> 2] = $0;
 HEAP32[$2 + 152 >> 2] = $1;
 $3 = HEAP32[$6 + 628 >> 2];
 $1 = HEAP32[$3 + 28 >> 2];
 $0 = HEAP32[$3 + 32 >> 2];
 HEAP32[$2 + 156 >> 2] = $1;
 HEAP32[$2 + 160 >> 2] = $0;
 $3 = HEAP32[$6 + 628 >> 2];
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 16 >> 2];
 HEAP32[$2 + 164 >> 2] = $0;
 HEAP32[$2 + 168 >> 2] = $1;
 $3 = HEAP32[$6 + 628 >> 2];
 $1 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$2 + 172 >> 2] = $1;
 HEAP32[$2 + 176 >> 2] = $0;
 $3 = HEAP32[$6 + 628 >> 2];
 $0 = HEAP32[$3 + 36 >> 2];
 $1 = HEAP32[$3 + 40 >> 2];
 HEAP32[$2 + 180 >> 2] = $0;
 HEAP32[$2 + 184 >> 2] = $1;
 HEAP8[$6 + 591 | 0] = HEAP8[HEAP32[$6 + 628 >> 2] + 44 | 0] & 1;
 HEAP8[$6 + 590 | 0] = HEAP8[HEAP32[$6 + 628 >> 2] + 45 | 0] & 1;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 580 | 0, $2 + 172 | 0, $2 + 164 | 0);
 b2Vec2__Normalize_28_29($6 + 580 | 0);
 b2Vec2__Set_28float_2c_20float_29($2 + 196 | 0, HEAPF32[$6 + 584 >> 2], Math_fround(-HEAPF32[$6 + 580 >> 2]));
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 568 | 0, $2 + 148 | 0, $2 + 164 | 0);
 wasm2js_i32$0 = $6, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 196 | 0, $6 + 568 | 0), 
 HEAPF32[wasm2js_i32$0 + 576 >> 2] = wasm2js_f32$0;
 HEAPF32[$6 + 564 >> 2] = 0;
 HEAPF32[$6 + 560 >> 2] = 0;
 HEAP8[$6 + 559 | 0] = 0;
 HEAP8[$6 + 558 | 0] = 0;
 if (HEAP8[$6 + 591 | 0] & 1) {
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 548 | 0, $2 + 164 | 0, $2 + 156 | 0);
  b2Vec2__Normalize_28_29($6 + 548 | 0);
  b2Vec2__Set_28float_2c_20float_29($2 + 188 | 0, HEAPF32[$6 + 552 >> 2], Math_fround(-HEAPF32[$6 + 548 >> 2]));
  wasm2js_i32$0 = $6, wasm2js_i32$1 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 548 | 0, $6 + 580 | 0) >= Math_fround(0), 
  HEAP8[wasm2js_i32$0 + 559 | 0] = wasm2js_i32$1;
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 540 | 0, $2 + 148 | 0, $2 + 156 | 0);
  wasm2js_i32$0 = $6, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 188 | 0, $6 + 540 | 0), 
  HEAPF32[wasm2js_i32$0 + 564 >> 2] = wasm2js_f32$0;
 }
 if (HEAP8[$6 + 590 | 0] & 1) {
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 532 | 0, $2 + 180 | 0, $2 + 172 | 0);
  b2Vec2__Normalize_28_29($6 + 532 | 0);
  b2Vec2__Set_28float_2c_20float_29($2 + 204 | 0, HEAPF32[$6 + 536 >> 2], Math_fround(-HEAPF32[$6 + 532 >> 2]));
  wasm2js_i32$0 = $6, wasm2js_i32$1 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 580 | 0, $6 + 532 | 0) > Math_fround(0), 
  HEAP8[wasm2js_i32$0 + 558 | 0] = wasm2js_i32$1;
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 524 | 0, $2 + 148 | 0, $2 + 172 | 0);
  wasm2js_i32$0 = $6, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 204 | 0, $6 + 524 | 0), 
  HEAPF32[wasm2js_i32$0 + 560 >> 2] = wasm2js_f32$0;
 }
 label$3: {
  if (!(!(HEAP8[$6 + 591 | 0] & 1) | !(HEAP8[$6 + 590 | 0] & 1))) {
   label$5: {
    if (!(!(HEAP8[$6 + 559 | 0] & 1) | !(HEAP8[$6 + 558 | 0] & 1))) {
     $0 = 1;
     label$7: {
      if (HEAPF32[$6 + 564 >> 2] >= Math_fround(0)) {
       break label$7;
      }
      $0 = 1;
      if (HEAPF32[$6 + 576 >> 2] >= Math_fround(0)) {
       break label$7;
      }
      $0 = HEAPF32[$6 + 560 >> 2] >= Math_fround(0);
     }
     HEAP8[$2 + 248 | 0] = $0;
     label$8: {
      if (HEAP8[$2 + 248 | 0] & 1) {
       $0 = HEAP32[$2 + 200 >> 2];
       $1 = HEAP32[$2 + 196 >> 2];
       HEAP32[$2 + 212 >> 2] = $1;
       HEAP32[$2 + 216 >> 2] = $0;
       $1 = HEAP32[$2 + 192 >> 2];
       $0 = HEAP32[$2 + 188 >> 2];
       HEAP32[$2 + 228 >> 2] = $0;
       HEAP32[$2 + 232 >> 2] = $1;
       $0 = HEAP32[$2 + 208 >> 2];
       $1 = HEAP32[$2 + 204 >> 2];
       HEAP32[$2 + 236 >> 2] = $1;
       HEAP32[$2 + 240 >> 2] = $0;
       $0 = $2;
       break label$8;
      }
      b2Vec2__operator__28_29_20const($6 + 516 | 0, $2 + 196 | 0);
      $1 = HEAP32[$6 + 520 >> 2];
      $0 = HEAP32[$6 + 516 >> 2];
      HEAP32[$2 + 212 >> 2] = $0;
      HEAP32[$2 + 216 >> 2] = $1;
      b2Vec2__operator__28_29_20const($6 + 508 | 0, $2 + 196 | 0);
      $0 = HEAP32[$6 + 512 >> 2];
      $1 = HEAP32[$6 + 508 >> 2];
      HEAP32[$2 + 228 >> 2] = $1;
      HEAP32[$2 + 232 >> 2] = $0;
      b2Vec2__operator__28_29_20const($6 + 500 | 0, $2 + 196 | 0);
      $1 = HEAP32[$6 + 504 >> 2];
      $0 = HEAP32[$6 + 500 >> 2];
      HEAP32[$2 + 236 >> 2] = $0;
      HEAP32[$2 + 240 >> 2] = $1;
      $0 = $6;
     }
     break label$5;
    }
    label$10: {
     if (HEAP8[$6 + 559 | 0] & 1) {
      $0 = 1;
      if (!(HEAPF32[$6 + 564 >> 2] >= Math_fround(0))) {
       $7 = HEAPF32[$6 + 576 >> 2] >= Math_fround(0) ? HEAPF32[$6 + 560 >> 2] >= Math_fround(0) : $7;
       $0 = $7;
      }
      HEAP8[$2 + 248 | 0] = $0 & 1;
      label$14: {
       if (HEAP8[$2 + 248 | 0] & 1) {
        $0 = HEAP32[$2 + 200 >> 2];
        $1 = HEAP32[$2 + 196 >> 2];
        HEAP32[$2 + 212 >> 2] = $1;
        HEAP32[$2 + 216 >> 2] = $0;
        $1 = HEAP32[$2 + 192 >> 2];
        $0 = HEAP32[$2 + 188 >> 2];
        HEAP32[$2 + 228 >> 2] = $0;
        HEAP32[$2 + 232 >> 2] = $1;
        $0 = HEAP32[$2 + 200 >> 2];
        $1 = HEAP32[$2 + 196 >> 2];
        HEAP32[$2 + 236 >> 2] = $1;
        HEAP32[$2 + 240 >> 2] = $0;
        $0 = $2;
        break label$14;
       }
       b2Vec2__operator__28_29_20const($6 + 492 | 0, $2 + 196 | 0);
       $1 = HEAP32[$6 + 496 >> 2];
       $0 = HEAP32[$6 + 492 >> 2];
       HEAP32[$2 + 212 >> 2] = $0;
       HEAP32[$2 + 216 >> 2] = $1;
       b2Vec2__operator__28_29_20const($6 + 484 | 0, $2 + 204 | 0);
       $0 = HEAP32[$6 + 488 >> 2];
       $1 = HEAP32[$6 + 484 >> 2];
       HEAP32[$2 + 228 >> 2] = $1;
       HEAP32[$2 + 232 >> 2] = $0;
       b2Vec2__operator__28_29_20const($6 + 476 | 0, $2 + 196 | 0);
       $1 = HEAP32[$6 + 480 >> 2];
       $0 = HEAP32[$6 + 476 >> 2];
       HEAP32[$2 + 236 >> 2] = $0;
       HEAP32[$2 + 240 >> 2] = $1;
       $0 = $6;
      }
      break label$10;
     }
     label$16: {
      if (HEAP8[$6 + 558 | 0] & 1) {
       $0 = 1;
       if (!(HEAPF32[$6 + 560 >> 2] >= Math_fround(0))) {
        $7 = HEAPF32[$6 + 564 >> 2] >= Math_fround(0) ? HEAPF32[$6 + 576 >> 2] >= Math_fround(0) : $7;
        $0 = $7;
       }
       HEAP8[$2 + 248 | 0] = $0 & 1;
       label$20: {
        if (HEAP8[$2 + 248 | 0] & 1) {
         $0 = HEAP32[$2 + 200 >> 2];
         $1 = HEAP32[$2 + 196 >> 2];
         HEAP32[$2 + 212 >> 2] = $1;
         HEAP32[$2 + 216 >> 2] = $0;
         $1 = HEAP32[$2 + 200 >> 2];
         $0 = HEAP32[$2 + 196 >> 2];
         HEAP32[$2 + 228 >> 2] = $0;
         HEAP32[$2 + 232 >> 2] = $1;
         $0 = HEAP32[$2 + 208 >> 2];
         $1 = HEAP32[$2 + 204 >> 2];
         HEAP32[$2 + 236 >> 2] = $1;
         HEAP32[$2 + 240 >> 2] = $0;
         $0 = $2;
         break label$20;
        }
        b2Vec2__operator__28_29_20const($6 + 468 | 0, $2 + 196 | 0);
        $1 = HEAP32[$6 + 472 >> 2];
        $0 = HEAP32[$6 + 468 >> 2];
        HEAP32[$2 + 212 >> 2] = $0;
        HEAP32[$2 + 216 >> 2] = $1;
        b2Vec2__operator__28_29_20const($6 + 460 | 0, $2 + 196 | 0);
        $0 = HEAP32[$6 + 464 >> 2];
        $1 = HEAP32[$6 + 460 >> 2];
        HEAP32[$2 + 228 >> 2] = $1;
        HEAP32[$2 + 232 >> 2] = $0;
        b2Vec2__operator__28_29_20const($6 + 452 | 0, $2 + 188 | 0);
        $1 = HEAP32[$6 + 456 >> 2];
        $0 = HEAP32[$6 + 452 >> 2];
        HEAP32[$2 + 236 >> 2] = $0;
        HEAP32[$2 + 240 >> 2] = $1;
        $0 = $6;
       }
       break label$16;
      }
      $0 = 0;
      label$22: {
       if (!(HEAPF32[$6 + 564 >> 2] >= Math_fround(0))) {
        break label$22;
       }
       $0 = 0;
       if (!(HEAPF32[$6 + 576 >> 2] >= Math_fround(0))) {
        break label$22;
       }
       $0 = HEAPF32[$6 + 560 >> 2] >= Math_fround(0);
      }
      HEAP8[$2 + 248 | 0] = $0;
      label$23: {
       if (HEAP8[$2 + 248 | 0] & 1) {
        $0 = HEAP32[$2 + 200 >> 2];
        $1 = HEAP32[$2 + 196 >> 2];
        HEAP32[$2 + 212 >> 2] = $1;
        HEAP32[$2 + 216 >> 2] = $0;
        $1 = HEAP32[$2 + 200 >> 2];
        $0 = HEAP32[$2 + 196 >> 2];
        HEAP32[$2 + 228 >> 2] = $0;
        HEAP32[$2 + 232 >> 2] = $1;
        $0 = HEAP32[$2 + 200 >> 2];
        $1 = HEAP32[$2 + 196 >> 2];
        HEAP32[$2 + 236 >> 2] = $1;
        HEAP32[$2 + 240 >> 2] = $0;
        $0 = $2;
        break label$23;
       }
       b2Vec2__operator__28_29_20const($6 + 444 | 0, $2 + 196 | 0);
       $1 = HEAP32[$6 + 448 >> 2];
       $0 = HEAP32[$6 + 444 >> 2];
       HEAP32[$2 + 212 >> 2] = $0;
       HEAP32[$2 + 216 >> 2] = $1;
       b2Vec2__operator__28_29_20const($6 + 436 | 0, $2 + 204 | 0);
       $0 = HEAP32[$6 + 440 >> 2];
       $1 = HEAP32[$6 + 436 >> 2];
       HEAP32[$2 + 228 >> 2] = $1;
       HEAP32[$2 + 232 >> 2] = $0;
       b2Vec2__operator__28_29_20const($6 + 428 | 0, $2 + 188 | 0);
       $1 = HEAP32[$6 + 432 >> 2];
       $0 = HEAP32[$6 + 428 >> 2];
       HEAP32[$2 + 236 >> 2] = $0;
       HEAP32[$2 + 240 >> 2] = $1;
       $0 = $6;
      }
     }
    }
   }
   break label$3;
  }
  label$25: {
   if (HEAP8[$6 + 591 | 0] & 1) {
    if (HEAP8[$6 + 559 | 0] & 1) {
     $0 = 1;
     $0 = HEAPF32[$6 + 564 >> 2] >= Math_fround(0) ? $0 : HEAPF32[$6 + 576 >> 2] >= Math_fround(0);
     HEAP8[$2 + 248 | 0] = $0;
     label$29: {
      if (HEAP8[$2 + 248 | 0] & 1) {
       $0 = HEAP32[$2 + 200 >> 2];
       $1 = HEAP32[$2 + 196 >> 2];
       HEAP32[$2 + 212 >> 2] = $1;
       HEAP32[$2 + 216 >> 2] = $0;
       $1 = HEAP32[$2 + 192 >> 2];
       $0 = HEAP32[$2 + 188 >> 2];
       HEAP32[$2 + 228 >> 2] = $0;
       HEAP32[$2 + 232 >> 2] = $1;
       b2Vec2__operator__28_29_20const($6 + 420 | 0, $2 + 196 | 0);
       $0 = HEAP32[$6 + 424 >> 2];
       $1 = HEAP32[$6 + 420 >> 2];
       HEAP32[$2 + 236 >> 2] = $1;
       HEAP32[$2 + 240 >> 2] = $0;
       break label$29;
      }
      b2Vec2__operator__28_29_20const($6 + 412 | 0, $2 + 196 | 0);
      $1 = HEAP32[$6 + 416 >> 2];
      $0 = HEAP32[$6 + 412 >> 2];
      HEAP32[$2 + 212 >> 2] = $0;
      HEAP32[$2 + 216 >> 2] = $1;
      $0 = HEAP32[$2 + 200 >> 2];
      $1 = HEAP32[$2 + 196 >> 2];
      HEAP32[$2 + 228 >> 2] = $1;
      HEAP32[$2 + 232 >> 2] = $0;
      b2Vec2__operator__28_29_20const($6 + 404 | 0, $2 + 196 | 0);
      $1 = HEAP32[$6 + 408 >> 2];
      $0 = HEAP32[$6 + 404 >> 2];
      HEAP32[$2 + 236 >> 2] = $0;
      HEAP32[$2 + 240 >> 2] = $1;
     }
     $0 = $6;
     break label$25;
    }
    $7 = HEAPF32[$6 + 564 >> 2] >= Math_fround(0) ? HEAPF32[$6 + 576 >> 2] >= Math_fround(0) : $7;
    HEAP8[$2 + 248 | 0] = $7;
    label$32: {
     if (HEAP8[$2 + 248 | 0] & 1) {
      $0 = HEAP32[$2 + 200 >> 2];
      $1 = HEAP32[$2 + 196 >> 2];
      HEAP32[$2 + 212 >> 2] = $1;
      HEAP32[$2 + 216 >> 2] = $0;
      $1 = HEAP32[$2 + 200 >> 2];
      $0 = HEAP32[$2 + 196 >> 2];
      HEAP32[$2 + 228 >> 2] = $0;
      HEAP32[$2 + 232 >> 2] = $1;
      b2Vec2__operator__28_29_20const($6 + 396 | 0, $2 + 196 | 0);
      $0 = HEAP32[$6 + 400 >> 2];
      $1 = HEAP32[$6 + 396 >> 2];
      HEAP32[$2 + 236 >> 2] = $1;
      HEAP32[$2 + 240 >> 2] = $0;
      break label$32;
     }
     b2Vec2__operator__28_29_20const($6 + 388 | 0, $2 + 196 | 0);
     $1 = HEAP32[$6 + 392 >> 2];
     $0 = HEAP32[$6 + 388 >> 2];
     HEAP32[$2 + 212 >> 2] = $0;
     HEAP32[$2 + 216 >> 2] = $1;
     $0 = HEAP32[$2 + 200 >> 2];
     $1 = HEAP32[$2 + 196 >> 2];
     HEAP32[$2 + 228 >> 2] = $1;
     HEAP32[$2 + 232 >> 2] = $0;
     b2Vec2__operator__28_29_20const($6 + 380 | 0, $2 + 188 | 0);
     $1 = HEAP32[$6 + 384 >> 2];
     $0 = HEAP32[$6 + 380 >> 2];
     HEAP32[$2 + 236 >> 2] = $0;
     HEAP32[$2 + 240 >> 2] = $1;
    }
    $0 = $6;
    break label$25;
   }
   label$34: {
    if (HEAP8[$6 + 590 | 0] & 1) {
     if (HEAP8[$6 + 558 | 0] & 1) {
      $0 = 1;
      $0 = HEAPF32[$6 + 576 >> 2] >= Math_fround(0) ? $0 : HEAPF32[$6 + 560 >> 2] >= Math_fround(0);
      HEAP8[$2 + 248 | 0] = $0;
      label$38: {
       if (HEAP8[$2 + 248 | 0] & 1) {
        $0 = HEAP32[$2 + 200 >> 2];
        $1 = HEAP32[$2 + 196 >> 2];
        HEAP32[$2 + 212 >> 2] = $1;
        HEAP32[$2 + 216 >> 2] = $0;
        b2Vec2__operator__28_29_20const($6 + 372 | 0, $2 + 196 | 0);
        $1 = HEAP32[$6 + 376 >> 2];
        $0 = HEAP32[$6 + 372 >> 2];
        HEAP32[$2 + 228 >> 2] = $0;
        HEAP32[$2 + 232 >> 2] = $1;
        $0 = HEAP32[$2 + 208 >> 2];
        $1 = HEAP32[$2 + 204 >> 2];
        HEAP32[$2 + 236 >> 2] = $1;
        HEAP32[$2 + 240 >> 2] = $0;
        break label$38;
       }
       b2Vec2__operator__28_29_20const($6 + 364 | 0, $2 + 196 | 0);
       $1 = HEAP32[$6 + 368 >> 2];
       $0 = HEAP32[$6 + 364 >> 2];
       HEAP32[$2 + 212 >> 2] = $0;
       HEAP32[$2 + 216 >> 2] = $1;
       b2Vec2__operator__28_29_20const($6 + 356 | 0, $2 + 196 | 0);
       $0 = HEAP32[$6 + 360 >> 2];
       $1 = HEAP32[$6 + 356 >> 2];
       HEAP32[$2 + 228 >> 2] = $1;
       HEAP32[$2 + 232 >> 2] = $0;
       $1 = HEAP32[$2 + 200 >> 2];
       $0 = HEAP32[$2 + 196 >> 2];
       HEAP32[$2 + 236 >> 2] = $0;
       HEAP32[$2 + 240 >> 2] = $1;
      }
      $0 = $2;
      break label$34;
     }
     $7 = HEAPF32[$6 + 576 >> 2] >= Math_fround(0) ? HEAPF32[$6 + 560 >> 2] >= Math_fround(0) : $7;
     HEAP8[$2 + 248 | 0] = $7;
     label$41: {
      if (HEAP8[$2 + 248 | 0] & 1) {
       $0 = HEAP32[$2 + 200 >> 2];
       $1 = HEAP32[$2 + 196 >> 2];
       HEAP32[$2 + 212 >> 2] = $1;
       HEAP32[$2 + 216 >> 2] = $0;
       b2Vec2__operator__28_29_20const($6 + 348 | 0, $2 + 196 | 0);
       $1 = HEAP32[$6 + 352 >> 2];
       $0 = HEAP32[$6 + 348 >> 2];
       HEAP32[$2 + 228 >> 2] = $0;
       HEAP32[$2 + 232 >> 2] = $1;
       break label$41;
      }
      b2Vec2__operator__28_29_20const($6 + 340 | 0, $2 + 196 | 0);
      $0 = HEAP32[$6 + 344 >> 2];
      $1 = HEAP32[$6 + 340 >> 2];
      HEAP32[$2 + 212 >> 2] = $1;
      HEAP32[$2 + 216 >> 2] = $0;
      b2Vec2__operator__28_29_20const($6 + 332 | 0, $2 + 204 | 0);
      $1 = HEAP32[$6 + 336 >> 2];
      $0 = HEAP32[$6 + 332 >> 2];
      HEAP32[$2 + 228 >> 2] = $0;
      HEAP32[$2 + 232 >> 2] = $1;
     }
     $0 = HEAP32[$2 + 200 >> 2];
     $1 = HEAP32[$2 + 196 >> 2];
     HEAP32[$2 + 236 >> 2] = $1;
     HEAP32[$2 + 240 >> 2] = $0;
     $0 = $2;
     break label$34;
    }
    HEAP8[$2 + 248 | 0] = HEAPF32[$6 + 576 >> 2] >= Math_fround(0);
    label$43: {
     if (HEAP8[$2 + 248 | 0] & 1) {
      $1 = HEAP32[$2 + 200 >> 2];
      $0 = HEAP32[$2 + 196 >> 2];
      HEAP32[$2 + 212 >> 2] = $0;
      HEAP32[$2 + 216 >> 2] = $1;
      b2Vec2__operator__28_29_20const($6 + 324 | 0, $2 + 196 | 0);
      $0 = HEAP32[$6 + 328 >> 2];
      $1 = HEAP32[$6 + 324 >> 2];
      HEAP32[$2 + 228 >> 2] = $1;
      HEAP32[$2 + 232 >> 2] = $0;
      b2Vec2__operator__28_29_20const($6 + 316 | 0, $2 + 196 | 0);
      $1 = HEAP32[$6 + 320 >> 2];
      $0 = HEAP32[$6 + 316 >> 2];
      HEAP32[$2 + 236 >> 2] = $0;
      HEAP32[$2 + 240 >> 2] = $1;
      $0 = $6;
      break label$43;
     }
     b2Vec2__operator__28_29_20const($6 + 308 | 0, $2 + 196 | 0);
     $0 = HEAP32[$6 + 312 >> 2];
     $1 = HEAP32[$6 + 308 >> 2];
     HEAP32[$2 + 212 >> 2] = $1;
     HEAP32[$2 + 216 >> 2] = $0;
     $1 = HEAP32[$2 + 200 >> 2];
     $0 = HEAP32[$2 + 196 >> 2];
     HEAP32[$2 + 228 >> 2] = $0;
     HEAP32[$2 + 232 >> 2] = $1;
     $0 = HEAP32[$2 + 200 >> 2];
     $1 = HEAP32[$2 + 196 >> 2];
     HEAP32[$2 + 236 >> 2] = $1;
     HEAP32[$2 + 240 >> 2] = $0;
     $0 = $2;
    }
   }
  }
 }
 HEAP32[$2 + 128 >> 2] = HEAP32[HEAP32[$6 + 620 >> 2] + 148 >> 2];
 HEAP32[$6 + 304 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 304 >> 2] < HEAP32[HEAP32[$6 + 620 >> 2] + 148 >> 2]) {
   b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($6 + 296 | 0, $2 + 132 | 0, (HEAP32[$6 + 620 >> 2] + 20 | 0) + (HEAP32[$6 + 304 >> 2] << 3) | 0);
   $1 = HEAP32[$6 + 300 >> 2];
   $0 = HEAP32[$6 + 296 >> 2];
   $3 = $0;
   $0 = (HEAP32[$6 + 304 >> 2] << 3) + $2 | 0;
   HEAP32[$0 >> 2] = $3;
   HEAP32[$0 + 4 >> 2] = $1;
   b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($6 + 288 | 0, $2 + 140 | 0, (HEAP32[$6 + 620 >> 2] + 84 | 0) + (HEAP32[$6 + 304 >> 2] << 3) | 0);
   $0 = HEAP32[$6 + 292 >> 2];
   $1 = HEAP32[$6 + 288 >> 2];
   $3 = $1;
   $1 = ($2 - -64 | 0) + (HEAP32[$6 + 304 >> 2] << 3) | 0;
   HEAP32[$1 >> 2] = $3;
   HEAP32[$1 + 4 >> 2] = $0;
   HEAP32[$6 + 304 >> 2] = HEAP32[$6 + 304 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAPF32[$2 + 244 >> 2] = HEAPF32[HEAP32[$6 + 620 >> 2] + 8 >> 2] + HEAPF32[HEAP32[$6 + 628 >> 2] + 8 >> 2];
 HEAP32[HEAP32[$6 + 632 >> 2] + 60 >> 2] = 0;
 b2EPCollider__ComputeEdgeSeparation_28_29($6 + 276 | 0, $2);
 label$47: {
  if (!HEAP32[$6 + 276 >> 2] | HEAPF32[$6 + 284 >> 2] > HEAPF32[$2 + 244 >> 2]) {
   break label$47;
  }
  b2EPCollider__ComputePolygonSeparation_28_29($6 + 264 | 0, $2);
  if (!(!HEAP32[$6 + 264 >> 2] | !(HEAPF32[$6 + 272 >> 2] > HEAPF32[$2 + 244 >> 2]))) {
   break label$47;
  }
  HEAPF32[$6 + 260 >> 2] = .9800000190734863;
  HEAPF32[$6 + 256 >> 2] = .0010000000474974513;
  label$49: {
   if (!HEAP32[$6 + 264 >> 2]) {
    HEAP32[$6 + 248 >> 2] = HEAP32[$6 + 284 >> 2];
    $1 = HEAP32[$6 + 280 >> 2];
    $0 = HEAP32[$6 + 276 >> 2];
    HEAP32[$6 + 240 >> 2] = $0;
    HEAP32[$6 + 244 >> 2] = $1;
    $3 = $6;
    break label$49;
   }
   label$51: {
    if (HEAPF32[$6 + 272 >> 2] > Math_fround(Math_fround(HEAPF32[$6 + 284 >> 2] * Math_fround(.9800000190734863)) + Math_fround(.0010000000474974513))) {
     HEAP32[$6 + 248 >> 2] = HEAP32[$6 + 272 >> 2];
     $0 = HEAP32[$6 + 268 >> 2];
     $1 = HEAP32[$6 + 264 >> 2];
     HEAP32[$6 + 240 >> 2] = $1;
     HEAP32[$6 + 244 >> 2] = $0;
     break label$51;
    }
    HEAP32[$6 + 248 >> 2] = HEAP32[$6 + 284 >> 2];
    $1 = HEAP32[$6 + 280 >> 2];
    $0 = HEAP32[$6 + 276 >> 2];
    HEAP32[$6 + 240 >> 2] = $0;
    HEAP32[$6 + 244 >> 2] = $1;
   }
   $3 = $6;
  }
  $0 = $6 + 208 | 0;
  $1 = $0 + 24 | 0;
  while (1) {
   b2ClipVertex__b2ClipVertex_28_29($0);
   $0 = $0 + 12 | 0;
   if (($1 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
  b2ReferenceFace__b2ReferenceFace_28_29($6 + 152 | 0);
  label$54: {
   if (HEAP32[$6 + 240 >> 2] == 1) {
    HEAP32[HEAP32[$6 + 632 >> 2] + 56 >> 2] = 1;
    HEAP32[$6 + 148 >> 2] = 0;
    wasm2js_i32$0 = $6, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 212 | 0, $2 - -64 | 0), 
    HEAPF32[wasm2js_i32$0 + 144 >> 2] = wasm2js_f32$0;
    HEAP32[$6 + 140 >> 2] = 1;
    while (1) {
     if (HEAP32[$6 + 140 >> 2] < HEAP32[$2 + 128 >> 2]) {
      wasm2js_i32$0 = $6, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 212 | 0, ($2 - -64 | 0) + (HEAP32[$6 + 140 >> 2] << 3) | 0), 
      HEAPF32[wasm2js_i32$0 + 136 >> 2] = wasm2js_f32$0;
      if (HEAPF32[$6 + 136 >> 2] < HEAPF32[$6 + 144 >> 2]) {
       HEAPF32[$6 + 144 >> 2] = HEAPF32[$6 + 136 >> 2];
       HEAP32[$6 + 148 >> 2] = HEAP32[$6 + 140 >> 2];
      }
      HEAP32[$6 + 140 >> 2] = HEAP32[$6 + 140 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$6 + 132 >> 2] = HEAP32[$6 + 148 >> 2];
    if (HEAP32[$2 + 128 >> 2] > (HEAP32[$6 + 132 >> 2] + 1 | 0)) {
     $0 = HEAP32[$6 + 132 >> 2] + 1 | 0;
    } else {
     $0 = 0;
    }
    HEAP32[$6 + 128 >> 2] = $0;
    $3 = (HEAP32[$6 + 132 >> 2] << 3) + $2 | 0;
    $1 = HEAP32[$3 >> 2];
    $0 = HEAP32[$3 + 4 >> 2];
    $3 = $1;
    $1 = $6 + 208 | 0;
    HEAP32[$1 >> 2] = $3;
    HEAP32[$1 + 4 >> 2] = $0;
    HEAP8[$6 + 216 | 0] = 0;
    HEAP8[$6 + 217 | 0] = HEAP32[$6 + 132 >> 2];
    HEAP8[$6 + 218 | 0] = 1;
    HEAP8[$6 + 219 | 0] = 0;
    $3 = (HEAP32[$6 + 128 >> 2] << 3) + $2 | 0;
    $0 = HEAP32[$3 >> 2];
    $1 = HEAP32[$3 + 4 >> 2];
    $3 = $0;
    $0 = $6 + 208 | 0;
    HEAP32[$0 + 12 >> 2] = $3;
    HEAP32[$0 + 16 >> 2] = $1;
    HEAP8[$6 + 228 | 0] = 0;
    HEAP8[$6 + 229 | 0] = HEAP32[$6 + 128 >> 2];
    HEAP8[$6 + 230 | 0] = 1;
    HEAP8[$6 + 231 | 0] = 0;
    label$61: {
     if (HEAP8[$2 + 248 | 0] & 1) {
      HEAP32[$6 + 152 >> 2] = 0;
      HEAP32[$6 + 156 >> 2] = 1;
      $0 = HEAP32[$2 + 168 >> 2];
      $1 = HEAP32[$2 + 164 >> 2];
      $3 = $1;
      $1 = $6 + 152 | 0;
      HEAP32[$1 + 8 >> 2] = $3;
      HEAP32[$1 + 12 >> 2] = $0;
      $1 = HEAP32[$2 + 176 >> 2];
      $0 = HEAP32[$2 + 172 >> 2];
      $3 = $0;
      $0 = $6 + 152 | 0;
      HEAP32[$0 + 16 >> 2] = $3;
      HEAP32[$0 + 20 >> 2] = $1;
      $0 = HEAP32[$2 + 200 >> 2];
      $1 = HEAP32[$2 + 196 >> 2];
      $3 = $1;
      $1 = $6 + 152 | 0;
      HEAP32[$1 + 24 >> 2] = $3;
      HEAP32[$1 + 28 >> 2] = $0;
      $3 = $2;
      break label$61;
     }
     HEAP32[$6 + 152 >> 2] = 1;
     HEAP32[$6 + 156 >> 2] = 0;
     $1 = HEAP32[$2 + 176 >> 2];
     $0 = HEAP32[$2 + 172 >> 2];
     $3 = $0;
     $0 = $6 + 152 | 0;
     HEAP32[$0 + 8 >> 2] = $3;
     HEAP32[$0 + 12 >> 2] = $1;
     $0 = HEAP32[$2 + 168 >> 2];
     $1 = HEAP32[$2 + 164 >> 2];
     $3 = $1;
     $1 = $6 + 152 | 0;
     HEAP32[$1 + 16 >> 2] = $3;
     HEAP32[$1 + 20 >> 2] = $0;
     b2Vec2__operator__28_29_20const($6 + 120 | 0, $2 + 196 | 0);
     $1 = HEAP32[$6 + 124 >> 2];
     $0 = HEAP32[$6 + 120 >> 2];
     $3 = $0;
     $0 = $6 + 152 | 0;
     HEAP32[$0 + 24 >> 2] = $3;
     HEAP32[$0 + 28 >> 2] = $1;
     $3 = $6;
    }
    break label$54;
   }
   HEAP32[HEAP32[$6 + 632 >> 2] + 56 >> 2] = 2;
   $0 = HEAP32[$2 + 168 >> 2];
   $1 = HEAP32[$2 + 164 >> 2];
   $3 = $1;
   $1 = $6 + 208 | 0;
   HEAP32[$1 >> 2] = $3;
   HEAP32[$1 + 4 >> 2] = $0;
   HEAP8[$6 + 216 | 0] = 0;
   HEAP8[$6 + 217 | 0] = HEAP32[$6 + 244 >> 2];
   HEAP8[$6 + 218 | 0] = 0;
   HEAP8[$6 + 219 | 0] = 1;
   $1 = HEAP32[$2 + 176 >> 2];
   $0 = HEAP32[$2 + 172 >> 2];
   $3 = $0;
   $0 = $6 + 208 | 0;
   HEAP32[$0 + 12 >> 2] = $3;
   HEAP32[$0 + 16 >> 2] = $1;
   HEAP8[$6 + 228 | 0] = 0;
   HEAP8[$6 + 229 | 0] = HEAP32[$6 + 244 >> 2];
   HEAP8[$6 + 230 | 0] = 0;
   HEAP8[$6 + 231 | 0] = 1;
   HEAP32[$6 + 152 >> 2] = HEAP32[$6 + 244 >> 2];
   if (HEAP32[$2 + 128 >> 2] > (HEAP32[$6 + 152 >> 2] + 1 | 0)) {
    $0 = HEAP32[$6 + 152 >> 2] + 1 | 0;
   } else {
    $0 = 0;
   }
   HEAP32[$6 + 156 >> 2] = $0;
   $3 = (HEAP32[$6 + 152 >> 2] << 3) + $2 | 0;
   $1 = HEAP32[$3 >> 2];
   $0 = HEAP32[$3 + 4 >> 2];
   $3 = $1;
   $1 = $6 + 152 | 0;
   HEAP32[$1 + 8 >> 2] = $3;
   HEAP32[$1 + 12 >> 2] = $0;
   $3 = (HEAP32[$6 + 156 >> 2] << 3) + $2 | 0;
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $3 = $0;
   $0 = $6 + 152 | 0;
   HEAP32[$0 + 16 >> 2] = $3;
   HEAP32[$0 + 20 >> 2] = $1;
   $3 = ($2 - -64 | 0) + (HEAP32[$6 + 152 >> 2] << 3) | 0;
   $1 = HEAP32[$3 >> 2];
   $0 = HEAP32[$3 + 4 >> 2];
   $3 = $1;
   $1 = $6 + 152 | 0;
   HEAP32[$1 + 24 >> 2] = $3;
   HEAP32[$1 + 28 >> 2] = $0;
  }
  b2Vec2__Set_28float_2c_20float_29($6 + 184 | 0, HEAPF32[$6 + 180 >> 2], Math_fround(-HEAPF32[$6 + 176 >> 2]));
  b2Vec2__operator__28_29_20const($6 + 112 | 0, $6 + 184 | 0);
  $1 = HEAP32[$6 + 116 >> 2];
  $0 = HEAP32[$6 + 112 >> 2];
  $3 = $0;
  $0 = $6 + 152 | 0;
  HEAP32[$0 + 44 >> 2] = $3;
  HEAP32[$0 + 48 >> 2] = $1;
  wasm2js_i32$0 = $6, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 184 | 0, $6 + 160 | 0), 
  HEAPF32[wasm2js_i32$0 + 192 >> 2] = wasm2js_f32$0;
  wasm2js_i32$0 = $6, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 196 | 0, $6 + 168 | 0), 
  HEAPF32[wasm2js_i32$0 + 204 >> 2] = wasm2js_f32$0;
  $0 = $6 + 80 | 0;
  $1 = $0 + 24 | 0;
  while (1) {
   b2ClipVertex__b2ClipVertex_28_29($0);
   $0 = $0 + 12 | 0;
   if (($1 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
  $0 = $6 + 48 | 0;
  $1 = $0 + 24 | 0;
  while (1) {
   b2ClipVertex__b2ClipVertex_28_29($0);
   $0 = $0 + 12 | 0;
   if (($1 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
  wasm2js_i32$0 = $6, wasm2js_i32$1 = b2ClipSegmentToLine_28b2ClipVertex__2c_20b2ClipVertex_20const__2c_20b2Vec2_20const__2c_20float_2c_20int_29($6 + 80 | 0, $6 + 208 | 0, $6 + 184 | 0, HEAPF32[$6 + 192 >> 2], HEAP32[$6 + 152 >> 2]), 
  HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
  if (HEAP32[$6 + 44 >> 2] < 2) {
   break label$47;
  }
  wasm2js_i32$0 = $6, wasm2js_i32$1 = b2ClipSegmentToLine_28b2ClipVertex__2c_20b2ClipVertex_20const__2c_20b2Vec2_20const__2c_20float_2c_20int_29($6 + 48 | 0, $6 + 80 | 0, $6 + 196 | 0, HEAPF32[$6 + 204 >> 2], HEAP32[$6 + 156 >> 2]), 
  HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
  if (HEAP32[$6 + 44 >> 2] < 2) {
   break label$47;
  }
  label$67: {
   if (HEAP32[$6 + 240 >> 2] == 1) {
    $3 = $6 + 152 | 0;
    $1 = HEAP32[$3 + 24 >> 2];
    $0 = HEAP32[$3 + 28 >> 2];
    $3 = $1;
    $1 = HEAP32[$6 + 632 >> 2];
    HEAP32[$1 + 40 >> 2] = $3;
    HEAP32[$1 + 44 >> 2] = $0;
    $3 = $6 + 152 | 0;
    $0 = HEAP32[$3 + 8 >> 2];
    $1 = HEAP32[$3 + 12 >> 2];
    $3 = $0;
    $0 = HEAP32[$6 + 632 >> 2];
    HEAP32[$0 + 48 >> 2] = $3;
    HEAP32[$0 + 52 >> 2] = $1;
    break label$67;
   }
   $3 = (HEAP32[$6 + 620 >> 2] + 84 | 0) + (HEAP32[$6 + 152 >> 2] << 3) | 0;
   $1 = HEAP32[$3 >> 2];
   $0 = HEAP32[$3 + 4 >> 2];
   $3 = $1;
   $1 = HEAP32[$6 + 632 >> 2];
   HEAP32[$1 + 40 >> 2] = $3;
   HEAP32[$1 + 44 >> 2] = $0;
   $3 = (HEAP32[$6 + 620 >> 2] + 20 | 0) + (HEAP32[$6 + 152 >> 2] << 3) | 0;
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   $3 = $0;
   $0 = HEAP32[$6 + 632 >> 2];
   HEAP32[$0 + 48 >> 2] = $3;
   HEAP32[$0 + 52 >> 2] = $1;
  }
  HEAP32[$6 + 40 >> 2] = 0;
  HEAP32[$6 + 36 >> 2] = 0;
  while (1) {
   if (HEAP32[$6 + 36 >> 2] < 2) {
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 24 | 0, ($6 + 48 | 0) + Math_imul(HEAP32[$6 + 36 >> 2], 12) | 0, $6 + 160 | 0);
    wasm2js_i32$0 = $6, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 176 | 0, $6 + 24 | 0), 
    HEAPF32[wasm2js_i32$0 + 32 >> 2] = wasm2js_f32$0;
    if (HEAPF32[$6 + 32 >> 2] <= HEAPF32[$2 + 244 >> 2]) {
     HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 632 >> 2] + Math_imul(HEAP32[$6 + 40 >> 2], 20);
     label$72: {
      if (HEAP32[$6 + 240 >> 2] == 1) {
       b2MulT_28b2Transform_20const__2c_20b2Vec2_20const__29($6 + 12 | 0, $2 + 132 | 0, ($6 + 48 | 0) + Math_imul(HEAP32[$6 + 36 >> 2], 12) | 0);
       $0 = HEAP32[$6 + 16 >> 2];
       $1 = HEAP32[$6 + 12 >> 2];
       $3 = $1;
       $1 = HEAP32[$6 + 20 >> 2];
       HEAP32[$1 >> 2] = $3;
       HEAP32[$1 + 4 >> 2] = $0;
       HEAP32[HEAP32[$6 + 20 >> 2] + 16 >> 2] = HEAP32[(($6 + 48 | 0) + Math_imul(HEAP32[$6 + 36 >> 2], 12) | 0) + 8 >> 2];
       break label$72;
      }
      $3 = ($6 + 48 | 0) + Math_imul(HEAP32[$6 + 36 >> 2], 12) | 0;
      $0 = HEAP32[$3 >> 2];
      $1 = HEAP32[$3 + 4 >> 2];
      $3 = $0;
      $0 = HEAP32[$6 + 20 >> 2];
      HEAP32[$0 >> 2] = $3;
      HEAP32[$0 + 4 >> 2] = $1;
      HEAP8[HEAP32[$6 + 20 >> 2] + 18 | 0] = HEAPU8[(($6 + 48 | 0) + Math_imul(HEAP32[$6 + 36 >> 2], 12) | 0) + 11 | 0];
      HEAP8[HEAP32[$6 + 20 >> 2] + 19 | 0] = HEAPU8[(($6 + 48 | 0) + Math_imul(HEAP32[$6 + 36 >> 2], 12) | 0) + 10 | 0];
      HEAP8[HEAP32[$6 + 20 >> 2] + 16 | 0] = HEAPU8[(($6 + 48 | 0) + Math_imul(HEAP32[$6 + 36 >> 2], 12) | 0) + 9 | 0];
      HEAP8[HEAP32[$6 + 20 >> 2] + 17 | 0] = HEAPU8[(($6 + 48 | 0) + Math_imul(HEAP32[$6 + 36 >> 2], 12) | 0) + 8 | 0];
     }
     HEAP32[$6 + 40 >> 2] = HEAP32[$6 + 40 >> 2] + 1;
    }
    HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[HEAP32[$6 + 632 >> 2] + 60 >> 2] = HEAP32[$6 + 40 >> 2];
 }
 __stack_pointer = $6 + 640 | 0;
}

function printf_core($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $8 = __stack_pointer - 80 | 0;
 __stack_pointer = $8;
 HEAP32[$8 + 76 >> 2] = $1;
 $25 = $8 + 55 | 0;
 $21 = $8 + 56 | 0;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     label$5: while (1) {
      $15 = $1;
      if (($16 ^ 2147483647) < ($7 | 0)) {
       break label$4;
      }
      $16 = $7 + $16 | 0;
      label$6: {
       label$8: {
        label$9: {
         $7 = $15;
         $12 = HEAPU8[$7 | 0];
         if ($12) {
          while (1) {
           label$12: {
            $12 = $12 & 255;
            label$13: {
             if (!$12) {
              $1 = $7;
              break label$13;
             }
             if (($12 | 0) != 37) {
              break label$12;
             }
             $12 = $7;
             while (1) {
              if (HEAPU8[$12 + 1 | 0] != 37) {
               $1 = $12;
               break label$13;
              }
              $7 = $7 + 1 | 0;
              $9 = HEAPU8[$12 + 2 | 0];
              $1 = $12 + 2 | 0;
              $12 = $1;
              if (($9 | 0) == 37) {
               continue;
              }
              break;
             }
            }
            $7 = $7 - $15 | 0;
            $12 = $16 ^ 2147483647;
            if (($7 | 0) > ($12 | 0)) {
             break label$4;
            }
            if ($0) {
             out($0, $15, $7);
            }
            if ($7) {
             continue label$5;
            }
            HEAP32[$8 + 76 >> 2] = $1;
            $7 = $1 + 1 | 0;
            $19 = -1;
            if (!(!isdigit(HEAP8[$1 + 1 | 0]) | HEAPU8[$1 + 2 | 0] != 36)) {
             $19 = HEAP8[$1 + 1 | 0] - 48 | 0;
             $22 = 1;
             $7 = $1 + 3 | 0;
            }
            HEAP32[$8 + 76 >> 2] = $7;
            $14 = 0;
            $13 = HEAP8[$7 | 0];
            $1 = $13 - 32 | 0;
            label$19: {
             if ($1 >>> 0 > 31) {
              $9 = $7;
              break label$19;
             }
             $9 = $7;
             $1 = 1 << $1;
             if (!($1 & 75913)) {
              break label$19;
             }
             while (1) {
              $9 = $7 + 1 | 0;
              HEAP32[$8 + 76 >> 2] = $9;
              $14 = $1 | $14;
              $13 = HEAP8[$7 + 1 | 0];
              $1 = $13 - 32 | 0;
              if ($1 >>> 0 >= 32) {
               break label$19;
              }
              $7 = $9;
              $1 = 1 << $1;
              if ($1 & 75913) {
               continue;
              }
              break;
             }
            }
            label$22: {
             if (($13 | 0) == 42) {
              label$24: {
               if (!(!isdigit(HEAP8[$9 + 1 | 0]) | HEAPU8[$9 + 2 | 0] != 36)) {
                HEAP32[((HEAP8[$9 + 1 | 0] << 2) + $4 | 0) - 192 >> 2] = 10;
                $13 = $9 + 3 | 0;
                $18 = HEAP32[((HEAP8[$9 + 1 | 0] << 3) + $3 | 0) - 384 >> 2];
                $22 = 1;
                break label$24;
               }
               if ($22) {
                break label$9;
               }
               $13 = $9 + 1 | 0;
               if (!$0) {
                HEAP32[$8 + 76 >> 2] = $13;
                $22 = 0;
                $18 = 0;
                break label$22;
               }
               $7 = HEAP32[$2 >> 2];
               HEAP32[$2 >> 2] = $7 + 4;
               $18 = HEAP32[$7 >> 2];
               $22 = 0;
              }
              HEAP32[$8 + 76 >> 2] = $13;
              if (($18 | 0) >= 0) {
               break label$22;
              }
              $18 = 0 - $18 | 0;
              $14 = $14 | 8192;
              break label$22;
             }
             $18 = getint($8 + 76 | 0);
             if (($18 | 0) < 0) {
              break label$4;
             }
             $13 = HEAP32[$8 + 76 >> 2];
            }
            $7 = 0;
            $11 = -1;
            label$27: {
             if (HEAPU8[$13 | 0] != 46) {
              $1 = $13;
              $10 = 0;
              break label$27;
             }
             if (HEAPU8[$13 + 1 | 0] == 42) {
              label$30: {
               if (!(!isdigit(HEAP8[$13 + 2 | 0]) | HEAPU8[$13 + 3 | 0] != 36)) {
                HEAP32[((HEAP8[$13 + 2 | 0] << 2) + $4 | 0) - 192 >> 2] = 10;
                $1 = $13 + 4 | 0;
                $11 = HEAP32[((HEAP8[$13 + 2 | 0] << 3) + $3 | 0) - 384 >> 2];
                break label$30;
               }
               if ($22) {
                break label$9;
               }
               $1 = $13 + 2 | 0;
               $11 = 0;
               if (!$0) {
                break label$30;
               }
               $9 = HEAP32[$2 >> 2];
               HEAP32[$2 >> 2] = $9 + 4;
               $11 = HEAP32[$9 >> 2];
              }
              HEAP32[$8 + 76 >> 2] = $1;
              $10 = ($11 ^ -1) >>> 31 | 0;
              break label$27;
             }
             HEAP32[$8 + 76 >> 2] = $13 + 1;
             $11 = getint($8 + 76 | 0);
             $1 = HEAP32[$8 + 76 >> 2];
             $10 = 1;
            }
            $23 = $10;
            while (1) {
             $9 = $7;
             $20 = 28;
             $13 = $1;
             $7 = HEAP8[$13 | 0];
             if ($7 - 123 >>> 0 < 4294967238) {
              break label$3;
             }
             $1 = $13 + 1 | 0;
             $7 = HEAPU8[(Math_imul($9, 58) + $7 | 0) + 23391 | 0];
             if ($7 - 1 >>> 0 < 8) {
              continue;
             }
             break;
            }
            HEAP32[$8 + 76 >> 2] = $1;
            label$33: {
             label$34: {
              if (($7 | 0) != 27) {
               if (!$7) {
                break label$3;
               }
               if (($19 | 0) >= 0) {
                HEAP32[($19 << 2) + $4 >> 2] = $7;
                $10 = ($19 << 3) + $3 | 0;
                $17 = HEAP32[$10 >> 2];
                $10 = HEAP32[$10 + 4 >> 2];
                HEAP32[$8 + 64 >> 2] = $17;
                HEAP32[$8 + 68 >> 2] = $10;
                break label$34;
               }
               if (!$0) {
                break label$6;
               }
               pop_arg($8 - -64 | 0, $7, $2, $6);
               break label$33;
              }
              if (($19 | 0) >= 0) {
               break label$3;
              }
             }
             $7 = 0;
             if (!$0) {
              continue label$5;
             }
            }
            $10 = $14 & -65537;
            $14 = $14 & 8192 ? $10 : $14;
            $19 = 0;
            $24 = 1807;
            $20 = $21;
            label$37: {
             label$38: {
              label$39: {
               label$40: {
                label$41: {
                 label$42: {
                  label$43: {
                   label$44: {
                    label$45: {
                     label$46: {
                      label$47: {
                       label$48: {
                        label$49: {
                         label$50: {
                          label$51: {
                           label$52: {
                            $7 = HEAP8[$13 | 0];
                            $7 = $9 ? ($7 & 15) == 3 ? $7 & -33 : $7 : $7;
                            switch ($7 - 88 | 0) {
                            case 11:
                             break label$37;

                            case 9:
                            case 13:
                            case 14:
                            case 15:
                             break label$38;

                            case 27:
                             break label$43;

                            case 12:
                            case 17:
                             break label$46;

                            case 23:
                             break label$47;

                            case 0:
                            case 32:
                             break label$48;

                            case 24:
                             break label$49;

                            case 22:
                             break label$50;

                            case 29:
                             break label$51;

                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 10:
                            case 16:
                            case 18:
                            case 19:
                            case 20:
                            case 21:
                            case 25:
                            case 26:
                            case 28:
                            case 30:
                            case 31:
                             break label$8;

                            default:
                             break label$52;
                            }
                           }
                           label$53: {
                            switch ($7 - 65 | 0) {
                            case 0:
                            case 4:
                            case 5:
                            case 6:
                             break label$38;

                            case 2:
                             break label$41;

                            case 1:
                            case 3:
                             break label$8;

                            default:
                             break label$53;
                            }
                           }
                           if (($7 | 0) == 83) {
                            break label$42;
                           }
                           break label$8;
                          }
                          $10 = HEAP32[$8 + 64 >> 2];
                          $17 = HEAP32[$8 + 68 >> 2];
                          $7 = $17;
                          $9 = 1807;
                          break label$45;
                         }
                         $7 = 0;
                         label$54: {
                          switch ($9 & 255) {
                          case 0:
                           HEAP32[HEAP32[$8 + 64 >> 2] >> 2] = $16;
                           continue label$5;

                          case 1:
                           HEAP32[HEAP32[$8 + 64 >> 2] >> 2] = $16;
                           continue label$5;

                          case 2:
                           $10 = $16;
                           $17 = $10 >> 31;
                           $10 = HEAP32[$8 + 64 >> 2];
                           HEAP32[$10 >> 2] = $16;
                           HEAP32[$10 + 4 >> 2] = $17;
                           continue label$5;

                          case 3:
                           HEAP16[HEAP32[$8 + 64 >> 2] >> 1] = $16;
                           continue label$5;

                          case 4:
                           HEAP8[HEAP32[$8 + 64 >> 2]] = $16;
                           continue label$5;

                          case 6:
                           HEAP32[HEAP32[$8 + 64 >> 2] >> 2] = $16;
                           continue label$5;

                          case 7:
                           break label$54;

                          default:
                           continue label$5;
                          }
                         }
                         $10 = $16;
                         $17 = $10 >> 31;
                         $10 = HEAP32[$8 + 64 >> 2];
                         HEAP32[$10 >> 2] = $16;
                         HEAP32[$10 + 4 >> 2] = $17;
                         continue label$5;
                        }
                        $11 = $11 >>> 0 <= 8 ? 8 : $11;
                        $14 = $14 | 8;
                        $7 = 120;
                       }
                       $17 = HEAP32[$8 + 64 >> 2];
                       $10 = HEAP32[$8 + 68 >> 2];
                       $15 = fmt_x($17, $10, $21, $7 & 32);
                       $10 = HEAP32[$8 + 64 >> 2];
                       $17 = HEAP32[$8 + 68 >> 2];
                       if (!($17 | $10) | !($14 & 8)) {
                        break label$44;
                       }
                       $24 = ($7 >>> 4 | 0) + 1807 | 0;
                       $19 = 2;
                       break label$44;
                      }
                      $17 = HEAP32[$8 + 64 >> 2];
                      $10 = HEAP32[$8 + 68 >> 2];
                      $15 = fmt_o($17, $10, $21);
                      if (!($14 & 8)) {
                       break label$44;
                      }
                      $7 = $21 - $15 | 0;
                      $11 = ($7 | 0) < ($11 | 0) ? $11 : $7 + 1 | 0;
                      break label$44;
                     }
                     $10 = HEAP32[$8 + 64 >> 2];
                     $17 = HEAP32[$8 + 68 >> 2];
                     $7 = $17;
                     if (($17 | 0) < 0) {
                      $9 = $7 + (($10 | 0) != 0) | 0;
                      $9 = 0 - $9 | 0;
                      $7 = $9;
                      $10 = 0 - $10 | 0;
                      HEAP32[$8 + 64 >> 2] = $10;
                      HEAP32[$8 + 68 >> 2] = $7;
                      $19 = 1;
                      $9 = 1807;
                      break label$45;
                     }
                     if ($14 & 2048) {
                      $19 = 1;
                      $9 = 1808;
                      break label$45;
                     }
                     $19 = $14 & 1;
                     $9 = $19 ? 1809 : 1807;
                    }
                    $24 = $9;
                    $15 = fmt_u($10, $7, $21);
                   }
                   if (($11 | 0) < 0 ? $23 : 0) {
                    break label$4;
                   }
                   $14 = $23 ? $14 & -65537 : $14;
                   $7 = HEAP32[$8 + 68 >> 2];
                   $9 = HEAP32[$8 + 64 >> 2];
                   $10 = $9;
                   if (!($11 | ($10 | $7) != 0)) {
                    $15 = $21;
                    $11 = 0;
                    break label$8;
                   }
                   $7 = !($7 | $10) + ($21 - $15 | 0) | 0;
                   $11 = ($7 | 0) < ($11 | 0) ? $11 : $7;
                   break label$8;
                  }
                  $7 = HEAP32[$8 + 64 >> 2];
                  $15 = $7 ? $7 : 12166;
                  $7 = strnlen($15, $11 >>> 0 >= 2147483647 ? 2147483647 : $11);
                  $20 = $7 + $15 | 0;
                  if (($11 | 0) >= 0) {
                   $14 = $10;
                   $11 = $7;
                   break label$8;
                  }
                  $14 = $10;
                  $11 = $7;
                  if (HEAPU8[$20 | 0]) {
                   break label$4;
                  }
                  break label$8;
                 }
                 $12 = HEAP32[$8 + 64 >> 2];
                 if ($11) {
                  break label$40;
                 }
                 $7 = 0;
                 pad($0, 32, $18, 0, $14);
                 break label$39;
                }
                HEAP32[$8 + 12 >> 2] = 0;
                $10 = HEAP32[$8 + 64 >> 2];
                HEAP32[$8 + 8 >> 2] = $10;
                HEAP32[$8 + 64 >> 2] = $8 + 8;
                $11 = -1;
                $12 = $8 + 8 | 0;
               }
               $7 = 0;
               label$66: {
                while (1) {
                 $9 = HEAP32[$12 >> 2];
                 if (!$9) {
                  break label$66;
                 }
                 $9 = wctomb($8 + 4 | 0, $9);
                 $15 = ($9 | 0) < 0;
                 if (!($15 | $11 - $7 >>> 0 < $9 >>> 0)) {
                  $12 = $12 + 4 | 0;
                  $7 = $7 + $9 | 0;
                  if ($11 >>> 0 > $7 >>> 0) {
                   continue;
                  }
                  break label$66;
                 }
                 break;
                }
                if ($15) {
                 break label$2;
                }
               }
               $20 = 61;
               if (($7 | 0) < 0) {
                break label$3;
               }
               pad($0, 32, $18, $7, $14);
               if (!$7) {
                $7 = 0;
                break label$39;
               }
               $9 = 0;
               $12 = HEAP32[$8 + 64 >> 2];
               while (1) {
                $15 = HEAP32[$12 >> 2];
                if (!$15) {
                 break label$39;
                }
                $15 = wctomb($8 + 4 | 0, $15);
                $9 = $15 + $9 | 0;
                if ($9 >>> 0 > $7 >>> 0) {
                 break label$39;
                }
                out($0, $8 + 4 | 0, $15);
                $12 = $12 + 4 | 0;
                if ($7 >>> 0 > $9 >>> 0) {
                 continue;
                }
                break;
               }
              }
              pad($0, 32, $18, $7, $14 ^ 8192);
              $7 = ($7 | 0) < ($18 | 0) ? $18 : $7;
              continue label$5;
             }
             if (($11 | 0) < 0 ? $23 : 0) {
              break label$4;
             }
             $20 = 61;
             $7 = FUNCTION_TABLE[$5 | 0]($0, HEAPF64[$8 + 64 >> 3], $18, $11, $14, $7) | 0;
             if (($7 | 0) >= 0) {
              continue label$5;
             }
             break label$3;
            }
            $7 = HEAP32[$8 + 64 >> 2];
            HEAP8[$8 + 55 | 0] = $7;
            $11 = 1;
            $15 = $25;
            $14 = $10;
            break label$8;
           }
           $12 = HEAPU8[$7 + 1 | 0];
           $7 = $7 + 1 | 0;
           continue;
          }
         }
         if ($0) {
          break label$1;
         }
         if (!$22) {
          break label$6;
         }
         $7 = 1;
         while (1) {
          $12 = HEAP32[($7 << 2) + $4 >> 2];
          if ($12) {
           pop_arg(($7 << 3) + $3 | 0, $12, $2, $6);
           $16 = 1;
           $7 = $7 + 1 | 0;
           if (($7 | 0) != 10) {
            continue;
           }
           break label$1;
          }
          break;
         }
         $16 = 1;
         if ($7 >>> 0 >= 10) {
          break label$1;
         }
         while (1) {
          if (HEAP32[($7 << 2) + $4 >> 2]) {
           break label$9;
          }
          $7 = $7 + 1 | 0;
          if (($7 | 0) != 10) {
           continue;
          }
          break;
         }
         break label$1;
        }
        $20 = 28;
        break label$3;
       }
       $13 = $20 - $15 | 0;
       $11 = ($11 | 0) > ($13 | 0) ? $11 : $13;
       if (($11 | 0) > ($19 ^ 2147483647)) {
        break label$4;
       }
       $20 = 61;
       $9 = $11 + $19 | 0;
       $7 = ($9 | 0) < ($18 | 0) ? $18 : $9;
       if (($12 | 0) < ($7 | 0)) {
        break label$3;
       }
       pad($0, 32, $7, $9, $14);
       out($0, $24, $19);
       pad($0, 48, $7, $9, $14 ^ 65536);
       pad($0, 48, $11, $13, 0);
       out($0, $15, $13);
       pad($0, 32, $7, $9, $14 ^ 8192);
       continue;
      }
      break;
     }
     $16 = 0;
     break label$1;
    }
    $20 = 61;
   }
   wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = $20, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  }
  $16 = -1;
 }
 __stack_pointer = $8 + 80 | 0;
 return $16;
}

function b2World__SolveTOI_28b2TimeStep_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 480 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 476 >> 2] = $0;
 HEAP32[$2 + 472 >> 2] = $1;
 $5 = HEAP32[$2 + 476 >> 2];
 b2Island__b2Island_28int_2c_20int_2c_20int_2c_20b2StackAllocator__2c_20b2ContactListener__29($2 + 420 | 0, 64, 32, 0, $5 + 68 | 0, HEAP32[$5 + 102940 >> 2]);
 if (HEAP8[$5 + 102994 | 0] & 1) {
  HEAP32[$2 + 416 >> 2] = HEAP32[$5 + 102948 >> 2];
  while (1) {
   if (HEAP32[$2 + 416 >> 2]) {
    $0 = HEAP32[$2 + 416 >> 2];
    HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] & -2;
    HEAPF32[HEAP32[$2 + 416 >> 2] + 60 >> 2] = 0;
    HEAP32[$2 + 416 >> 2] = HEAP32[HEAP32[$2 + 416 >> 2] + 96 >> 2];
    continue;
   }
   break;
  }
  HEAP32[$2 + 412 >> 2] = HEAP32[$5 + 102928 >> 2];
  while (1) {
   if (HEAP32[$2 + 412 >> 2]) {
    $0 = HEAP32[$2 + 412 >> 2];
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] & -34;
    HEAP32[HEAP32[$2 + 412 >> 2] + 128 >> 2] = 0;
    HEAPF32[HEAP32[$2 + 412 >> 2] + 132 >> 2] = 1;
    HEAP32[$2 + 412 >> 2] = HEAP32[HEAP32[$2 + 412 >> 2] + 12 >> 2];
    continue;
   }
   break;
  }
 }
 while (1) {
  HEAP32[$2 + 408 >> 2] = 0;
  HEAPF32[$2 + 404 >> 2] = 1;
  HEAP32[$2 + 400 >> 2] = HEAP32[$5 + 102928 >> 2];
  while (1) {
   if (HEAP32[$2 + 400 >> 2]) {
    label$9: {
     if (!(b2Contact__IsEnabled_28_29_20const(HEAP32[$2 + 400 >> 2]) & 1) | HEAP32[HEAP32[$2 + 400 >> 2] + 128 >> 2] > 8) {
      break label$9;
     }
     HEAPF32[$2 + 396 >> 2] = 1;
     label$10: {
      if (HEAP32[HEAP32[$2 + 400 >> 2] + 4 >> 2] & 32) {
       HEAPF32[$2 + 396 >> 2] = HEAPF32[HEAP32[$2 + 400 >> 2] + 132 >> 2];
       break label$10;
      }
      wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Contact__GetFixtureA_28_29(HEAP32[$2 + 400 >> 2]), 
      HEAP32[wasm2js_i32$0 + 392 >> 2] = wasm2js_i32$1;
      wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Contact__GetFixtureB_28_29(HEAP32[$2 + 400 >> 2]), 
      HEAP32[wasm2js_i32$0 + 388 >> 2] = wasm2js_i32$1;
      if (b2Fixture__IsSensor_28_29_20const(HEAP32[$2 + 392 >> 2]) & 1) {
       break label$9;
      }
      if (b2Fixture__IsSensor_28_29_20const(HEAP32[$2 + 388 >> 2]) & 1) {
       break label$9;
      }
      wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$2 + 392 >> 2]), 
      HEAP32[wasm2js_i32$0 + 384 >> 2] = wasm2js_i32$1;
      wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$2 + 388 >> 2]), 
      HEAP32[wasm2js_i32$0 + 380 >> 2] = wasm2js_i32$1;
      HEAP32[$2 + 376 >> 2] = HEAP32[HEAP32[$2 + 384 >> 2] >> 2];
      HEAP32[$2 + 372 >> 2] = HEAP32[HEAP32[$2 + 380 >> 2] >> 2];
      $0 = 0;
      if (b2Body__IsAwake_28_29_20const(HEAP32[$2 + 384 >> 2]) & 1) {
       $0 = HEAP32[$2 + 376 >> 2] != 0;
      }
      HEAP8[$2 + 371 | 0] = $0;
      $0 = 0;
      if (b2Body__IsAwake_28_29_20const(HEAP32[$2 + 380 >> 2]) & 1) {
       $0 = HEAP32[$2 + 372 >> 2] != 0;
      }
      HEAP8[$2 + 370 | 0] = $0;
      if (!(HEAP8[$2 + 371 | 0] & 1 | HEAP8[$2 + 370 | 0] & 1)) {
       break label$9;
      }
      $0 = 1;
      if (!(b2Body__IsBullet_28_29_20const(HEAP32[$2 + 384 >> 2]) & 1)) {
       $0 = HEAP32[$2 + 376 >> 2] != 2;
      }
      HEAP8[$2 + 369 | 0] = $0;
      $0 = 1;
      if (!(b2Body__IsBullet_28_29_20const(HEAP32[$2 + 380 >> 2]) & 1)) {
       $0 = HEAP32[$2 + 372 >> 2] != 2;
      }
      HEAP8[$2 + 368 | 0] = $0;
      if (!(HEAP8[$2 + 369 | 0] & 1 | HEAP8[$2 + 368 | 0] & 1)) {
       break label$9;
      }
      HEAPF32[$2 + 364 >> 2] = HEAPF32[HEAP32[$2 + 384 >> 2] + 60 >> 2];
      label$19: {
       if (HEAPF32[HEAP32[$2 + 384 >> 2] + 60 >> 2] < HEAPF32[HEAP32[$2 + 380 >> 2] + 60 >> 2]) {
        HEAPF32[$2 + 364 >> 2] = HEAPF32[HEAP32[$2 + 380 >> 2] + 60 >> 2];
        b2Sweep__Advance_28float_29(HEAP32[$2 + 384 >> 2] + 28 | 0, HEAPF32[$2 + 364 >> 2]);
        break label$19;
       }
       if (HEAPF32[HEAP32[$2 + 380 >> 2] + 60 >> 2] < HEAPF32[HEAP32[$2 + 384 >> 2] + 60 >> 2]) {
        HEAPF32[$2 + 364 >> 2] = HEAPF32[HEAP32[$2 + 384 >> 2] + 60 >> 2];
        b2Sweep__Advance_28float_29(HEAP32[$2 + 380 >> 2] + 28 | 0, HEAPF32[$2 + 364 >> 2]);
       }
      }
      if (!(HEAPF32[$2 + 364 >> 2] < Math_fround(1))) {
       __assert_fail(7921, 6054, 684, 10675);
       wasm2js_trap();
      }
      wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Contact__GetChildIndexA_28_29_20const(HEAP32[$2 + 400 >> 2]), 
      HEAP32[wasm2js_i32$0 + 360 >> 2] = wasm2js_i32$1;
      wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Contact__GetChildIndexB_28_29_20const(HEAP32[$2 + 400 >> 2]), 
      HEAP32[wasm2js_i32$0 + 356 >> 2] = wasm2js_i32$1;
      b2TOIInput__b2TOIInput_28_29($2 + 224 | 0);
      b2DistanceProxy__Set_28b2Shape_20const__2c_20int_29($2 + 224 | 0, b2Fixture__GetShape_28_29(HEAP32[$2 + 392 >> 2]), HEAP32[$2 + 360 >> 2]);
      b2DistanceProxy__Set_28b2Shape_20const__2c_20int_29($2 + 252 | 0, b2Fixture__GetShape_28_29(HEAP32[$2 + 388 >> 2]), HEAP32[$2 + 356 >> 2]);
      $3 = HEAP32[$2 + 384 >> 2];
      $1 = HEAP32[$3 + 28 >> 2];
      $0 = HEAP32[$3 + 32 >> 2];
      $6 = $1;
      $4 = $2 + 224 | 0;
      $1 = $4;
      HEAP32[$1 + 56 >> 2] = $6;
      HEAP32[$1 + 60 >> 2] = $0;
      HEAP32[$1 + 88 >> 2] = HEAP32[$3 + 60 >> 2];
      $1 = HEAP32[$3 + 56 >> 2];
      $0 = HEAP32[$3 + 52 >> 2];
      $6 = $0;
      $0 = $4;
      HEAP32[$0 + 80 >> 2] = $6;
      HEAP32[$0 + 84 >> 2] = $1;
      $0 = HEAP32[$3 + 48 >> 2];
      $1 = HEAP32[$3 + 44 >> 2];
      $6 = $1;
      $1 = $4;
      HEAP32[$1 + 72 >> 2] = $6;
      HEAP32[$1 + 76 >> 2] = $0;
      $1 = HEAP32[$3 + 40 >> 2];
      $0 = HEAP32[$3 + 36 >> 2];
      $3 = $0;
      $0 = $4;
      HEAP32[$0 + 64 >> 2] = $3;
      HEAP32[$0 + 68 >> 2] = $1;
      $3 = HEAP32[$2 + 380 >> 2];
      $1 = HEAP32[$3 + 28 >> 2];
      $0 = HEAP32[$3 + 32 >> 2];
      $6 = $1;
      $4 = $2 + 224 | 0;
      $1 = $4;
      HEAP32[$1 + 92 >> 2] = $6;
      HEAP32[$1 + 96 >> 2] = $0;
      HEAP32[$1 + 124 >> 2] = HEAP32[$3 + 60 >> 2];
      $1 = HEAP32[$3 + 56 >> 2];
      $0 = HEAP32[$3 + 52 >> 2];
      $6 = $0;
      $0 = $4;
      HEAP32[$0 + 116 >> 2] = $6;
      HEAP32[$0 + 120 >> 2] = $1;
      $0 = HEAP32[$3 + 48 >> 2];
      $1 = HEAP32[$3 + 44 >> 2];
      $6 = $1;
      $1 = $4;
      HEAP32[$1 + 108 >> 2] = $6;
      HEAP32[$1 + 112 >> 2] = $0;
      $1 = HEAP32[$3 + 40 >> 2];
      $0 = HEAP32[$3 + 36 >> 2];
      $3 = $0;
      $0 = $4;
      HEAP32[$0 + 100 >> 2] = $3;
      HEAP32[$0 + 104 >> 2] = $1;
      HEAPF32[$2 + 352 >> 2] = 1;
      b2TimeOfImpact_28b2TOIOutput__2c_20b2TOIInput_20const__29($2 + 216 | 0, $2 + 224 | 0);
      HEAPF32[$2 + 212 >> 2] = HEAPF32[$2 + 220 >> 2];
      label$23: {
       if (HEAP32[$2 + 216 >> 2] == 3) {
        wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Min_float__28float_2c_20float_29(Math_fround(Math_fround(Math_fround(Math_fround(1) - HEAPF32[$2 + 364 >> 2]) * HEAPF32[$2 + 212 >> 2]) + HEAPF32[$2 + 364 >> 2]), Math_fround(1)), 
        HEAPF32[wasm2js_i32$0 + 396 >> 2] = wasm2js_f32$0;
        break label$23;
       }
       HEAPF32[$2 + 396 >> 2] = 1;
      }
      HEAPF32[HEAP32[$2 + 400 >> 2] + 132 >> 2] = HEAPF32[$2 + 396 >> 2];
      $0 = HEAP32[$2 + 400 >> 2];
      HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 32;
     }
     if (HEAPF32[$2 + 396 >> 2] < HEAPF32[$2 + 404 >> 2]) {
      HEAP32[$2 + 408 >> 2] = HEAP32[$2 + 400 >> 2];
      HEAPF32[$2 + 404 >> 2] = HEAPF32[$2 + 396 >> 2];
     }
    }
    HEAP32[$2 + 400 >> 2] = HEAP32[HEAP32[$2 + 400 >> 2] + 12 >> 2];
    continue;
   }
   break;
  }
  label$26: {
   if (!(HEAPF32[$2 + 404 >> 2] > Math_fround(.9999988079071045) ? 0 : HEAP32[$2 + 408 >> 2])) {
    HEAP8[$5 + 102994 | 0] = 1;
    break label$26;
   }
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Contact__GetFixtureA_28_29(HEAP32[$2 + 408 >> 2]), 
   HEAP32[wasm2js_i32$0 + 208 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Contact__GetFixtureB_28_29(HEAP32[$2 + 408 >> 2]), 
   HEAP32[wasm2js_i32$0 + 204 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$2 + 208 >> 2]), 
   HEAP32[wasm2js_i32$0 + 200 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$2 + 204 >> 2]), 
   HEAP32[wasm2js_i32$0 + 196 >> 2] = wasm2js_i32$1;
   $3 = HEAP32[$2 + 200 >> 2];
   HEAP32[$2 + 192 >> 2] = HEAP32[$3 + 60 >> 2];
   $1 = HEAP32[$3 + 52 >> 2];
   $0 = HEAP32[$3 + 56 >> 2];
   HEAP32[$2 + 184 >> 2] = $1;
   HEAP32[$2 + 188 >> 2] = $0;
   $1 = HEAP32[$3 + 48 >> 2];
   $0 = HEAP32[$3 + 44 >> 2];
   HEAP32[$2 + 176 >> 2] = $0;
   HEAP32[$2 + 180 >> 2] = $1;
   $0 = HEAP32[$3 + 40 >> 2];
   $1 = HEAP32[$3 + 36 >> 2];
   HEAP32[$2 + 168 >> 2] = $1;
   HEAP32[$2 + 172 >> 2] = $0;
   $1 = HEAP32[$3 + 32 >> 2];
   $0 = HEAP32[$3 + 28 >> 2];
   HEAP32[$2 + 160 >> 2] = $0;
   HEAP32[$2 + 164 >> 2] = $1;
   $3 = HEAP32[$2 + 196 >> 2];
   HEAP32[$2 + 152 >> 2] = HEAP32[$3 + 60 >> 2];
   $1 = HEAP32[$3 + 52 >> 2];
   $0 = HEAP32[$3 + 56 >> 2];
   HEAP32[$2 + 144 >> 2] = $1;
   HEAP32[$2 + 148 >> 2] = $0;
   $1 = HEAP32[$3 + 48 >> 2];
   $0 = HEAP32[$3 + 44 >> 2];
   HEAP32[$2 + 136 >> 2] = $0;
   HEAP32[$2 + 140 >> 2] = $1;
   $0 = HEAP32[$3 + 40 >> 2];
   $1 = HEAP32[$3 + 36 >> 2];
   HEAP32[$2 + 128 >> 2] = $1;
   HEAP32[$2 + 132 >> 2] = $0;
   $1 = HEAP32[$3 + 32 >> 2];
   $0 = HEAP32[$3 + 28 >> 2];
   HEAP32[$2 + 120 >> 2] = $0;
   HEAP32[$2 + 124 >> 2] = $1;
   b2Body__Advance_28float_29(HEAP32[$2 + 200 >> 2], HEAPF32[$2 + 404 >> 2]);
   b2Body__Advance_28float_29(HEAP32[$2 + 196 >> 2], HEAPF32[$2 + 404 >> 2]);
   b2Contact__Update_28b2ContactListener__29(HEAP32[$2 + 408 >> 2], HEAP32[$5 + 102940 >> 2]);
   $0 = HEAP32[$2 + 408 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] & -33;
   $0 = HEAP32[$2 + 408 >> 2];
   HEAP32[$0 + 128 >> 2] = HEAP32[$0 + 128 >> 2] + 1;
   label$29: {
    if (b2Contact__IsEnabled_28_29_20const(HEAP32[$2 + 408 >> 2]) & 1) {
     if (b2Contact__IsTouching_28_29_20const(HEAP32[$2 + 408 >> 2]) & 1) {
      break label$29;
     }
    }
    b2Contact__SetEnabled_28bool_29(HEAP32[$2 + 408 >> 2], 0);
    $0 = HEAP32[$2 + 164 >> 2];
    $1 = HEAP32[$2 + 160 >> 2];
    $4 = $1;
    $3 = HEAP32[$2 + 200 >> 2];
    $1 = $3;
    HEAP32[$1 + 28 >> 2] = $4;
    HEAP32[$1 + 32 >> 2] = $0;
    HEAP32[$1 + 60 >> 2] = HEAP32[$2 + 192 >> 2];
    $1 = HEAP32[$2 + 188 >> 2];
    $0 = HEAP32[$2 + 184 >> 2];
    $4 = $0;
    $0 = $3;
    HEAP32[$0 + 52 >> 2] = $4;
    HEAP32[$0 + 56 >> 2] = $1;
    $0 = HEAP32[$2 + 180 >> 2];
    $1 = HEAP32[$2 + 176 >> 2];
    $4 = $1;
    $1 = $3;
    HEAP32[$1 + 44 >> 2] = $4;
    HEAP32[$1 + 48 >> 2] = $0;
    $1 = HEAP32[$2 + 172 >> 2];
    $0 = HEAP32[$2 + 168 >> 2];
    $4 = $0;
    $0 = $3;
    HEAP32[$0 + 36 >> 2] = $4;
    HEAP32[$0 + 40 >> 2] = $1;
    $0 = HEAP32[$2 + 124 >> 2];
    $1 = HEAP32[$2 + 120 >> 2];
    $4 = $1;
    $3 = HEAP32[$2 + 196 >> 2];
    $1 = $3;
    HEAP32[$1 + 28 >> 2] = $4;
    HEAP32[$1 + 32 >> 2] = $0;
    HEAP32[$1 + 60 >> 2] = HEAP32[$2 + 152 >> 2];
    $1 = HEAP32[$2 + 148 >> 2];
    $0 = HEAP32[$2 + 144 >> 2];
    $4 = $0;
    $0 = $3;
    HEAP32[$0 + 52 >> 2] = $4;
    HEAP32[$0 + 56 >> 2] = $1;
    $0 = HEAP32[$2 + 140 >> 2];
    $1 = HEAP32[$2 + 136 >> 2];
    $4 = $1;
    $1 = $3;
    HEAP32[$1 + 44 >> 2] = $4;
    HEAP32[$1 + 48 >> 2] = $0;
    $1 = HEAP32[$2 + 132 >> 2];
    $0 = HEAP32[$2 + 128 >> 2];
    $4 = $0;
    $0 = $3;
    HEAP32[$0 + 36 >> 2] = $4;
    HEAP32[$0 + 40 >> 2] = $1;
    b2Body__SynchronizeTransform_28_29(HEAP32[$2 + 200 >> 2]);
    b2Body__SynchronizeTransform_28_29(HEAP32[$2 + 196 >> 2]);
    continue;
   }
   b2Body__SetAwake_28bool_29(HEAP32[$2 + 200 >> 2], 1);
   b2Body__SetAwake_28bool_29(HEAP32[$2 + 196 >> 2], 1);
   b2Island__Clear_28_29($2 + 420 | 0);
   b2Island__Add_28b2Body__29($2 + 420 | 0, HEAP32[$2 + 200 >> 2]);
   b2Island__Add_28b2Body__29($2 + 420 | 0, HEAP32[$2 + 196 >> 2]);
   b2Island__Add_28b2Contact__29($2 + 420 | 0, HEAP32[$2 + 408 >> 2]);
   $0 = HEAP32[$2 + 200 >> 2];
   HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] | 1;
   $0 = HEAP32[$2 + 196 >> 2];
   HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] | 1;
   $0 = HEAP32[$2 + 408 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
   HEAP32[$2 + 112 >> 2] = HEAP32[$2 + 200 >> 2];
   HEAP32[$2 + 116 >> 2] = HEAP32[$2 + 196 >> 2];
   HEAP32[$2 + 108 >> 2] = 0;
   while (1) {
    if (HEAP32[$2 + 108 >> 2] < 2) {
     HEAP32[$2 + 104 >> 2] = HEAP32[($2 + 112 | 0) + (HEAP32[$2 + 108 >> 2] << 2) >> 2];
     if (HEAP32[HEAP32[$2 + 104 >> 2] >> 2] == 2) {
      HEAP32[$2 + 100 >> 2] = HEAP32[HEAP32[$2 + 104 >> 2] + 112 >> 2];
      while (1) {
       if (!(!HEAP32[$2 + 100 >> 2] | HEAP32[$2 + 448 >> 2] == HEAP32[$2 + 460 >> 2] | HEAP32[$2 + 456 >> 2] == HEAP32[$2 + 464 >> 2])) {
        HEAP32[$2 + 96 >> 2] = HEAP32[HEAP32[$2 + 100 >> 2] + 4 >> 2];
        label$36: {
         if (HEAP32[HEAP32[$2 + 96 >> 2] + 4 >> 2] & 1) {
          break label$36;
         }
         HEAP32[$2 + 92 >> 2] = HEAP32[HEAP32[$2 + 100 >> 2] >> 2];
         label$37: {
          if (HEAP32[HEAP32[$2 + 92 >> 2] >> 2] != 2) {
           break label$37;
          }
          if (b2Body__IsBullet_28_29_20const(HEAP32[$2 + 104 >> 2]) & 1) {
           break label$37;
          }
          if (b2Body__IsBullet_28_29_20const(HEAP32[$2 + 92 >> 2]) & 1) {
           break label$37;
          }
          break label$36;
         }
         HEAP8[$2 + 91 | 0] = HEAP8[HEAP32[HEAP32[$2 + 96 >> 2] + 48 >> 2] + 38 | 0] & 1;
         HEAP8[$2 + 90 | 0] = HEAP8[HEAP32[HEAP32[$2 + 96 >> 2] + 52 >> 2] + 38 | 0] & 1;
         if (HEAP8[$2 + 91 | 0] & 1 | HEAP8[$2 + 90 | 0] & 1) {
          break label$36;
         }
         $3 = HEAP32[$2 + 92 >> 2];
         HEAP32[$2 + 80 >> 2] = HEAP32[$3 + 60 >> 2];
         $1 = HEAP32[$3 + 52 >> 2];
         $0 = HEAP32[$3 + 56 >> 2];
         HEAP32[$2 + 72 >> 2] = $1;
         HEAP32[$2 + 76 >> 2] = $0;
         $1 = HEAP32[$3 + 48 >> 2];
         $0 = HEAP32[$3 + 44 >> 2];
         HEAP32[$2 + 64 >> 2] = $0;
         HEAP32[$2 + 68 >> 2] = $1;
         $0 = HEAP32[$3 + 40 >> 2];
         $1 = HEAP32[$3 + 36 >> 2];
         HEAP32[$2 + 56 >> 2] = $1;
         HEAP32[$2 + 60 >> 2] = $0;
         $1 = HEAP32[$3 + 32 >> 2];
         $0 = HEAP32[$3 + 28 >> 2];
         HEAP32[$2 + 48 >> 2] = $0;
         HEAP32[$2 + 52 >> 2] = $1;
         if (!(HEAP16[HEAP32[$2 + 92 >> 2] + 4 >> 1] & 1)) {
          b2Body__Advance_28float_29(HEAP32[$2 + 92 >> 2], HEAPF32[$2 + 404 >> 2]);
         }
         b2Contact__Update_28b2ContactListener__29(HEAP32[$2 + 96 >> 2], HEAP32[$5 + 102940 >> 2]);
         if (!(b2Contact__IsEnabled_28_29_20const(HEAP32[$2 + 96 >> 2]) & 1)) {
          $0 = HEAP32[$2 + 52 >> 2];
          $1 = HEAP32[$2 + 48 >> 2];
          $4 = $1;
          $3 = HEAP32[$2 + 92 >> 2];
          $1 = $3;
          HEAP32[$1 + 28 >> 2] = $4;
          HEAP32[$1 + 32 >> 2] = $0;
          HEAP32[$1 + 60 >> 2] = HEAP32[$2 + 80 >> 2];
          $1 = HEAP32[$2 + 76 >> 2];
          $0 = HEAP32[$2 + 72 >> 2];
          $4 = $0;
          $0 = $3;
          HEAP32[$0 + 52 >> 2] = $4;
          HEAP32[$0 + 56 >> 2] = $1;
          $0 = HEAP32[$2 + 68 >> 2];
          $1 = HEAP32[$2 + 64 >> 2];
          $4 = $1;
          $1 = $3;
          HEAP32[$1 + 44 >> 2] = $4;
          HEAP32[$1 + 48 >> 2] = $0;
          $1 = HEAP32[$2 + 60 >> 2];
          $0 = HEAP32[$2 + 56 >> 2];
          $4 = $0;
          $0 = $3;
          HEAP32[$0 + 36 >> 2] = $4;
          HEAP32[$0 + 40 >> 2] = $1;
          b2Body__SynchronizeTransform_28_29(HEAP32[$2 + 92 >> 2]);
          break label$36;
         }
         if (!(b2Contact__IsTouching_28_29_20const(HEAP32[$2 + 96 >> 2]) & 1)) {
          $0 = HEAP32[$2 + 52 >> 2];
          $1 = HEAP32[$2 + 48 >> 2];
          $4 = $1;
          $3 = HEAP32[$2 + 92 >> 2];
          $1 = $3;
          HEAP32[$1 + 28 >> 2] = $4;
          HEAP32[$1 + 32 >> 2] = $0;
          HEAP32[$1 + 60 >> 2] = HEAP32[$2 + 80 >> 2];
          $1 = HEAP32[$2 + 76 >> 2];
          $0 = HEAP32[$2 + 72 >> 2];
          $4 = $0;
          $0 = $3;
          HEAP32[$0 + 52 >> 2] = $4;
          HEAP32[$0 + 56 >> 2] = $1;
          $0 = HEAP32[$2 + 68 >> 2];
          $1 = HEAP32[$2 + 64 >> 2];
          $4 = $1;
          $1 = $3;
          HEAP32[$1 + 44 >> 2] = $4;
          HEAP32[$1 + 48 >> 2] = $0;
          $1 = HEAP32[$2 + 60 >> 2];
          $0 = HEAP32[$2 + 56 >> 2];
          $4 = $0;
          $0 = $3;
          HEAP32[$0 + 36 >> 2] = $4;
          HEAP32[$0 + 40 >> 2] = $1;
          b2Body__SynchronizeTransform_28_29(HEAP32[$2 + 92 >> 2]);
          break label$36;
         }
         $0 = HEAP32[$2 + 96 >> 2];
         HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
         b2Island__Add_28b2Contact__29($2 + 420 | 0, HEAP32[$2 + 96 >> 2]);
         if (HEAP16[HEAP32[$2 + 92 >> 2] + 4 >> 1] & 1) {
          break label$36;
         }
         $0 = HEAP32[$2 + 92 >> 2];
         HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] | 1;
         if (HEAP32[HEAP32[$2 + 92 >> 2] >> 2]) {
          b2Body__SetAwake_28bool_29(HEAP32[$2 + 92 >> 2], 1);
         }
         b2Island__Add_28b2Body__29($2 + 420 | 0, HEAP32[$2 + 92 >> 2]);
        }
        HEAP32[$2 + 100 >> 2] = HEAP32[HEAP32[$2 + 100 >> 2] + 12 >> 2];
        continue;
       }
       break;
      }
     }
     HEAP32[$2 + 108 >> 2] = HEAP32[$2 + 108 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAPF32[$2 + 24 >> 2] = Math_fround(Math_fround(1) - HEAPF32[$2 + 404 >> 2]) * HEAPF32[HEAP32[$2 + 472 >> 2] >> 2];
   HEAPF32[$2 + 28 >> 2] = Math_fround(1) / HEAPF32[$2 + 24 >> 2];
   HEAPF32[$2 + 32 >> 2] = 1;
   HEAP32[$2 + 40 >> 2] = 20;
   HEAP32[$2 + 36 >> 2] = HEAP32[HEAP32[$2 + 472 >> 2] + 12 >> 2];
   HEAP8[$2 + 44 | 0] = 0;
   b2Island__SolveTOI_28b2TimeStep_20const__2c_20int_2c_20int_29($2 + 420 | 0, $2 + 24 | 0, HEAP32[HEAP32[$2 + 200 >> 2] + 8 >> 2], HEAP32[HEAP32[$2 + 196 >> 2] + 8 >> 2]);
   HEAP32[$2 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$2 + 20 >> 2] < HEAP32[$2 + 448 >> 2]) {
     HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 428 >> 2] + (HEAP32[$2 + 20 >> 2] << 2) >> 2];
     $0 = HEAP32[$2 + 16 >> 2];
     HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] & -2;
     if (HEAP32[HEAP32[$2 + 16 >> 2] >> 2] == 2) {
      b2Body__SynchronizeFixtures_28_29(HEAP32[$2 + 16 >> 2]);
      HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 16 >> 2] + 112 >> 2];
      while (1) {
       if (HEAP32[$2 + 12 >> 2]) {
        $0 = HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2];
        HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] & -34;
        HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2];
        continue;
       }
       break;
      }
     }
     HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   b2ContactManager__FindNewContacts_28_29($5 + 102868 | 0);
   if (HEAP8[$5 + 102993 | 0] & 1) {
    HEAP8[$5 + 102994 | 0] = 0;
    break label$26;
   }
   continue;
  }
  break;
 }
 b2Island___b2Island_28_29($2 + 420 | 0);
 __stack_pointer = $2 + 480 | 0;
}

function b2ContactSolver__SolveVelocityConstraints_28_29($0) {
 var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $1 = __stack_pointer - 640 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 636 >> 2] = $0;
 $5 = HEAP32[$1 + 636 >> 2];
 HEAP32[$1 + 632 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 632 >> 2] < HEAP32[$5 + 48 >> 2]) {
   HEAP32[$1 + 628 >> 2] = HEAP32[$5 + 40 >> 2] + Math_imul(HEAP32[$1 + 632 >> 2], 156);
   HEAP32[$1 + 624 >> 2] = HEAP32[HEAP32[$1 + 628 >> 2] + 112 >> 2];
   HEAP32[$1 + 620 >> 2] = HEAP32[HEAP32[$1 + 628 >> 2] + 116 >> 2];
   HEAPF32[$1 + 616 >> 2] = HEAPF32[HEAP32[$1 + 628 >> 2] + 120 >> 2];
   HEAPF32[$1 + 612 >> 2] = HEAPF32[HEAP32[$1 + 628 >> 2] + 128 >> 2];
   HEAPF32[$1 + 608 >> 2] = HEAPF32[HEAP32[$1 + 628 >> 2] + 124 >> 2];
   HEAPF32[$1 + 604 >> 2] = HEAPF32[HEAP32[$1 + 628 >> 2] + 132 >> 2];
   HEAP32[$1 + 600 >> 2] = HEAP32[HEAP32[$1 + 628 >> 2] + 148 >> 2];
   $3 = HEAP32[$5 + 28 >> 2] + Math_imul(HEAP32[$1 + 624 >> 2], 12) | 0;
   $0 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   HEAP32[$1 + 592 >> 2] = $0;
   HEAP32[$1 + 596 >> 2] = $4;
   HEAPF32[$1 + 588 >> 2] = HEAPF32[(HEAP32[$5 + 28 >> 2] + Math_imul(HEAP32[$1 + 624 >> 2], 12) | 0) + 8 >> 2];
   $3 = HEAP32[$5 + 28 >> 2] + Math_imul(HEAP32[$1 + 620 >> 2], 12) | 0;
   $4 = HEAP32[$3 >> 2];
   $0 = HEAP32[$3 + 4 >> 2];
   HEAP32[$1 + 576 >> 2] = $4;
   HEAP32[$1 + 580 >> 2] = $0;
   HEAPF32[$1 + 572 >> 2] = HEAPF32[(HEAP32[$5 + 28 >> 2] + Math_imul(HEAP32[$1 + 620 >> 2], 12) | 0) + 8 >> 2];
   $3 = HEAP32[$1 + 628 >> 2];
   $0 = HEAP32[$3 + 72 >> 2];
   $4 = HEAP32[$3 + 76 >> 2];
   HEAP32[$1 + 560 >> 2] = $0;
   HEAP32[$1 + 564 >> 2] = $4;
   b2Cross_28b2Vec2_20const__2c_20float_29($1 + 552 | 0, $1 + 560 | 0, Math_fround(1));
   HEAPF32[$1 + 548 >> 2] = HEAPF32[HEAP32[$1 + 628 >> 2] + 136 >> 2];
   if (!(HEAP32[$1 + 600 >> 2] == 1 | HEAP32[$1 + 600 >> 2] == 2)) {
    __assert_fail(11887, 5446, 319, 3381);
    wasm2js_trap();
   }
   HEAP32[$1 + 544 >> 2] = 0;
   while (1) {
    if (HEAP32[$1 + 544 >> 2] < HEAP32[$1 + 600 >> 2]) {
     HEAP32[$1 + 540 >> 2] = HEAP32[$1 + 628 >> 2] + Math_imul(HEAP32[$1 + 544 >> 2], 36);
     b2Cross_28float_2c_20b2Vec2_20const__29($1 + 508 | 0, HEAPF32[$1 + 572 >> 2], HEAP32[$1 + 540 >> 2] + 8 | 0);
     operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($1 + 516 | 0, $1 + 576 | 0, $1 + 508 | 0);
     operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 524 | 0, $1 + 516 | 0, $1 + 592 | 0);
     b2Cross_28float_2c_20b2Vec2_20const__29($1 + 500 | 0, HEAPF32[$1 + 588 >> 2], HEAP32[$1 + 540 >> 2]);
     operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 532 | 0, $1 + 524 | 0, $1 + 500 | 0);
     wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 532 | 0, $1 + 552 | 0) - HEAPF32[HEAP32[$1 + 628 >> 2] + 144 >> 2]), 
     HEAPF32[wasm2js_i32$0 + 496 >> 2] = wasm2js_f32$0;
     HEAPF32[$1 + 492 >> 2] = HEAPF32[HEAP32[$1 + 540 >> 2] + 28 >> 2] * Math_fround(-HEAPF32[$1 + 496 >> 2]);
     HEAPF32[$1 + 488 >> 2] = HEAPF32[$1 + 548 >> 2] * HEAPF32[HEAP32[$1 + 540 >> 2] + 16 >> 2];
     wasm2js_i32$0 = $1, wasm2js_f32$0 = float_20b2Clamp_float__28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[HEAP32[$1 + 540 >> 2] + 20 >> 2] + HEAPF32[$1 + 492 >> 2]), Math_fround(-HEAPF32[$1 + 488 >> 2]), HEAPF32[$1 + 488 >> 2]), 
     HEAPF32[wasm2js_i32$0 + 484 >> 2] = wasm2js_f32$0;
     HEAPF32[$1 + 492 >> 2] = HEAPF32[$1 + 484 >> 2] - HEAPF32[HEAP32[$1 + 540 >> 2] + 20 >> 2];
     HEAPF32[HEAP32[$1 + 540 >> 2] + 20 >> 2] = HEAPF32[$1 + 484 >> 2];
     operator__28float_2c_20b2Vec2_20const__29($1 + 476 | 0, HEAPF32[$1 + 492 >> 2], $1 + 552 | 0);
     operator__28float_2c_20b2Vec2_20const__29($1 + 468 | 0, HEAPF32[$1 + 616 >> 2], $1 + 476 | 0);
     b2Vec2__operator___28b2Vec2_20const__29_1($1 + 592 | 0, $1 + 468 | 0);
     wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$1 + 612 >> 2]) * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 540 >> 2], $1 + 476 | 0)) + HEAPF32[$1 + 588 >> 2]), 
     HEAPF32[wasm2js_i32$0 + 588 >> 2] = wasm2js_f32$0;
     operator__28float_2c_20b2Vec2_20const__29($1 + 460 | 0, HEAPF32[$1 + 608 >> 2], $1 + 476 | 0);
     b2Vec2__operator___28b2Vec2_20const__29($1 + 576 | 0, $1 + 460 | 0);
     wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$1 + 604 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 540 >> 2] + 8 | 0, $1 + 476 | 0)) + HEAPF32[$1 + 572 >> 2]), 
     HEAPF32[wasm2js_i32$0 + 572 >> 2] = wasm2js_f32$0;
     HEAP32[$1 + 544 >> 2] = HEAP32[$1 + 544 >> 2] + 1;
     continue;
    }
    break;
   }
   label$6: {
    if (!(HEAP8[29752] & 1 & HEAP32[$1 + 600 >> 2] != 1)) {
     HEAP32[$1 + 456 >> 2] = 0;
     while (1) {
      if (HEAP32[$1 + 456 >> 2] < HEAP32[$1 + 600 >> 2]) {
       HEAP32[$1 + 452 >> 2] = HEAP32[$1 + 628 >> 2] + Math_imul(HEAP32[$1 + 456 >> 2], 36);
       b2Cross_28float_2c_20b2Vec2_20const__29($1 + 420 | 0, HEAPF32[$1 + 572 >> 2], HEAP32[$1 + 452 >> 2] + 8 | 0);
       operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($1 + 428 | 0, $1 + 576 | 0, $1 + 420 | 0);
       operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 436 | 0, $1 + 428 | 0, $1 + 592 | 0);
       b2Cross_28float_2c_20b2Vec2_20const__29($1 + 412 | 0, HEAPF32[$1 + 588 >> 2], HEAP32[$1 + 452 >> 2]);
       operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 444 | 0, $1 + 436 | 0, $1 + 412 | 0);
       wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 444 | 0, $1 + 560 | 0), 
       HEAPF32[wasm2js_i32$0 + 408 >> 2] = wasm2js_f32$0;
       HEAPF32[$1 + 404 >> 2] = Math_fround(-HEAPF32[HEAP32[$1 + 452 >> 2] + 24 >> 2]) * Math_fround(HEAPF32[$1 + 408 >> 2] - HEAPF32[HEAP32[$1 + 452 >> 2] + 32 >> 2]);
       wasm2js_i32$0 = $1, wasm2js_f32$0 = float_20b2Max_float__28float_2c_20float_29(Math_fround(HEAPF32[HEAP32[$1 + 452 >> 2] + 16 >> 2] + HEAPF32[$1 + 404 >> 2]), Math_fround(0)), 
       HEAPF32[wasm2js_i32$0 + 400 >> 2] = wasm2js_f32$0;
       HEAPF32[$1 + 404 >> 2] = HEAPF32[$1 + 400 >> 2] - HEAPF32[HEAP32[$1 + 452 >> 2] + 16 >> 2];
       HEAPF32[HEAP32[$1 + 452 >> 2] + 16 >> 2] = HEAPF32[$1 + 400 >> 2];
       operator__28float_2c_20b2Vec2_20const__29($1 + 392 | 0, HEAPF32[$1 + 404 >> 2], $1 + 560 | 0);
       operator__28float_2c_20b2Vec2_20const__29($1 + 384 | 0, HEAPF32[$1 + 616 >> 2], $1 + 392 | 0);
       b2Vec2__operator___28b2Vec2_20const__29_1($1 + 592 | 0, $1 + 384 | 0);
       wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$1 + 612 >> 2]) * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 452 >> 2], $1 + 392 | 0)) + HEAPF32[$1 + 588 >> 2]), 
       HEAPF32[wasm2js_i32$0 + 588 >> 2] = wasm2js_f32$0;
       operator__28float_2c_20b2Vec2_20const__29($1 + 376 | 0, HEAPF32[$1 + 608 >> 2], $1 + 392 | 0);
       b2Vec2__operator___28b2Vec2_20const__29($1 + 576 | 0, $1 + 376 | 0);
       wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$1 + 604 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 452 >> 2] + 8 | 0, $1 + 392 | 0)) + HEAPF32[$1 + 572 >> 2]), 
       HEAPF32[wasm2js_i32$0 + 572 >> 2] = wasm2js_f32$0;
       HEAP32[$1 + 456 >> 2] = HEAP32[$1 + 456 >> 2] + 1;
       continue;
      }
      break;
     }
     break label$6;
    }
    HEAP32[$1 + 372 >> 2] = HEAP32[$1 + 628 >> 2];
    HEAP32[$1 + 368 >> 2] = HEAP32[$1 + 628 >> 2] + 36;
    b2Vec2__b2Vec2_28float_2c_20float_29($1 + 360 | 0, HEAPF32[HEAP32[$1 + 372 >> 2] + 16 >> 2], HEAPF32[HEAP32[$1 + 368 >> 2] + 16 >> 2]);
    if (!(HEAPF32[$1 + 360 >> 2] >= Math_fround(0) & HEAPF32[$1 + 364 >> 2] >= Math_fround(0))) {
     __assert_fail(8076, 5446, 417, 3381);
     wasm2js_trap();
    }
    b2Cross_28float_2c_20b2Vec2_20const__29($1 + 328 | 0, HEAPF32[$1 + 572 >> 2], HEAP32[$1 + 372 >> 2] + 8 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($1 + 336 | 0, $1 + 576 | 0, $1 + 328 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 344 | 0, $1 + 336 | 0, $1 + 592 | 0);
    b2Cross_28float_2c_20b2Vec2_20const__29($1 + 320 | 0, HEAPF32[$1 + 588 >> 2], HEAP32[$1 + 372 >> 2]);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 352 | 0, $1 + 344 | 0, $1 + 320 | 0);
    b2Cross_28float_2c_20b2Vec2_20const__29($1 + 288 | 0, HEAPF32[$1 + 572 >> 2], HEAP32[$1 + 368 >> 2] + 8 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($1 + 296 | 0, $1 + 576 | 0, $1 + 288 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 304 | 0, $1 + 296 | 0, $1 + 592 | 0);
    b2Cross_28float_2c_20b2Vec2_20const__29($1 + 280 | 0, HEAPF32[$1 + 588 >> 2], HEAP32[$1 + 368 >> 2]);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 312 | 0, $1 + 304 | 0, $1 + 280 | 0);
    wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 352 | 0, $1 + 560 | 0), 
    HEAPF32[wasm2js_i32$0 + 276 >> 2] = wasm2js_f32$0;
    wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 312 | 0, $1 + 560 | 0), 
    HEAPF32[wasm2js_i32$0 + 272 >> 2] = wasm2js_f32$0;
    b2Vec2__b2Vec2_28_29($1 + 264 | 0);
    HEAPF32[$1 + 264 >> 2] = HEAPF32[$1 + 276 >> 2] - HEAPF32[HEAP32[$1 + 372 >> 2] + 32 >> 2];
    HEAPF32[$1 + 268 >> 2] = HEAPF32[$1 + 272 >> 2] - HEAPF32[HEAP32[$1 + 368 >> 2] + 32 >> 2];
    b2Mul_28b2Mat22_20const__2c_20b2Vec2_20const__29($1 + 256 | 0, HEAP32[$1 + 628 >> 2] + 96 | 0, $1 + 360 | 0);
    b2Vec2__operator___28b2Vec2_20const__29_1($1 + 264 | 0, $1 + 256 | 0);
    HEAPF32[$1 + 252 >> 2] = .0010000000474974513;
    b2Mul_28b2Mat22_20const__2c_20b2Vec2_20const__29($1 + 236 | 0, HEAP32[$1 + 628 >> 2] + 80 | 0, $1 + 264 | 0);
    b2Vec2__operator__28_29_20const($1 + 244 | 0, $1 + 236 | 0);
    label$13: {
     if (!(!(HEAPF32[$1 + 244 >> 2] >= Math_fround(0)) | !(HEAPF32[$1 + 248 >> 2] >= Math_fround(0)))) {
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 228 | 0, $1 + 244 | 0, $1 + 360 | 0);
      operator__28float_2c_20b2Vec2_20const__29($1 + 220 | 0, HEAPF32[$1 + 228 >> 2], $1 + 560 | 0);
      operator__28float_2c_20b2Vec2_20const__29($1 + 212 | 0, HEAPF32[$1 + 232 >> 2], $1 + 560 | 0);
      $2 = HEAPF32[$1 + 616 >> 2];
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($1 + 196 | 0, $1 + 220 | 0, $1 + 212 | 0);
      operator__28float_2c_20b2Vec2_20const__29($1 + 204 | 0, $2, $1 + 196 | 0);
      b2Vec2__operator___28b2Vec2_20const__29_1($1 + 592 | 0, $1 + 204 | 0);
      wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$1 + 612 >> 2]) * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 372 >> 2], $1 + 220 | 0) + b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 368 >> 2], $1 + 212 | 0))) + HEAPF32[$1 + 588 >> 2]), 
      HEAPF32[wasm2js_i32$0 + 588 >> 2] = wasm2js_f32$0;
      $2 = HEAPF32[$1 + 608 >> 2];
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($1 + 180 | 0, $1 + 220 | 0, $1 + 212 | 0);
      operator__28float_2c_20b2Vec2_20const__29($1 + 188 | 0, $2, $1 + 180 | 0);
      b2Vec2__operator___28b2Vec2_20const__29($1 + 576 | 0, $1 + 188 | 0);
      wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$1 + 604 >> 2] * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 372 >> 2] + 8 | 0, $1 + 220 | 0) + b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 368 >> 2] + 8 | 0, $1 + 212 | 0))) + HEAPF32[$1 + 572 >> 2]), 
      HEAPF32[wasm2js_i32$0 + 572 >> 2] = wasm2js_f32$0;
      HEAPF32[HEAP32[$1 + 372 >> 2] + 16 >> 2] = HEAPF32[$1 + 244 >> 2];
      HEAPF32[HEAP32[$1 + 368 >> 2] + 16 >> 2] = HEAPF32[$1 + 248 >> 2];
      break label$13;
     }
     HEAPF32[$1 + 244 >> 2] = Math_fround(-HEAPF32[HEAP32[$1 + 372 >> 2] + 24 >> 2]) * HEAPF32[$1 + 264 >> 2];
     HEAPF32[$1 + 248 >> 2] = 0;
     HEAPF32[$1 + 276 >> 2] = 0;
     HEAPF32[$1 + 272 >> 2] = Math_fround(HEAPF32[HEAP32[$1 + 628 >> 2] + 100 >> 2] * HEAPF32[$1 + 244 >> 2]) + HEAPF32[$1 + 268 >> 2];
     if (!(!(HEAPF32[$1 + 244 >> 2] >= Math_fround(0)) | !(HEAPF32[$1 + 272 >> 2] >= Math_fround(0)))) {
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 172 | 0, $1 + 244 | 0, $1 + 360 | 0);
      operator__28float_2c_20b2Vec2_20const__29($1 + 164 | 0, HEAPF32[$1 + 172 >> 2], $1 + 560 | 0);
      operator__28float_2c_20b2Vec2_20const__29($1 + 156 | 0, HEAPF32[$1 + 176 >> 2], $1 + 560 | 0);
      $2 = HEAPF32[$1 + 616 >> 2];
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($1 + 140 | 0, $1 + 164 | 0, $1 + 156 | 0);
      operator__28float_2c_20b2Vec2_20const__29($1 + 148 | 0, $2, $1 + 140 | 0);
      b2Vec2__operator___28b2Vec2_20const__29_1($1 + 592 | 0, $1 + 148 | 0);
      wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$1 + 612 >> 2]) * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 372 >> 2], $1 + 164 | 0) + b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 368 >> 2], $1 + 156 | 0))) + HEAPF32[$1 + 588 >> 2]), 
      HEAPF32[wasm2js_i32$0 + 588 >> 2] = wasm2js_f32$0;
      $2 = HEAPF32[$1 + 608 >> 2];
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($1 + 124 | 0, $1 + 164 | 0, $1 + 156 | 0);
      operator__28float_2c_20b2Vec2_20const__29($1 + 132 | 0, $2, $1 + 124 | 0);
      b2Vec2__operator___28b2Vec2_20const__29($1 + 576 | 0, $1 + 132 | 0);
      wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$1 + 604 >> 2] * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 372 >> 2] + 8 | 0, $1 + 164 | 0) + b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 368 >> 2] + 8 | 0, $1 + 156 | 0))) + HEAPF32[$1 + 572 >> 2]), 
      HEAPF32[wasm2js_i32$0 + 572 >> 2] = wasm2js_f32$0;
      HEAPF32[HEAP32[$1 + 372 >> 2] + 16 >> 2] = HEAPF32[$1 + 244 >> 2];
      HEAPF32[HEAP32[$1 + 368 >> 2] + 16 >> 2] = HEAPF32[$1 + 248 >> 2];
      break label$13;
     }
     HEAPF32[$1 + 244 >> 2] = 0;
     HEAPF32[$1 + 248 >> 2] = Math_fround(-HEAPF32[HEAP32[$1 + 368 >> 2] + 24 >> 2]) * HEAPF32[$1 + 268 >> 2];
     HEAPF32[$1 + 276 >> 2] = Math_fround(HEAPF32[HEAP32[$1 + 628 >> 2] + 104 >> 2] * HEAPF32[$1 + 248 >> 2]) + HEAPF32[$1 + 264 >> 2];
     HEAPF32[$1 + 272 >> 2] = 0;
     if (!(!(HEAPF32[$1 + 248 >> 2] >= Math_fround(0)) | !(HEAPF32[$1 + 276 >> 2] >= Math_fround(0)))) {
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 116 | 0, $1 + 244 | 0, $1 + 360 | 0);
      operator__28float_2c_20b2Vec2_20const__29($1 + 108 | 0, HEAPF32[$1 + 116 >> 2], $1 + 560 | 0);
      operator__28float_2c_20b2Vec2_20const__29($1 + 100 | 0, HEAPF32[$1 + 120 >> 2], $1 + 560 | 0);
      $2 = HEAPF32[$1 + 616 >> 2];
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($1 + 84 | 0, $1 + 108 | 0, $1 + 100 | 0);
      operator__28float_2c_20b2Vec2_20const__29($1 + 92 | 0, $2, $1 + 84 | 0);
      b2Vec2__operator___28b2Vec2_20const__29_1($1 + 592 | 0, $1 + 92 | 0);
      wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$1 + 612 >> 2]) * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 372 >> 2], $1 + 108 | 0) + b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 368 >> 2], $1 + 100 | 0))) + HEAPF32[$1 + 588 >> 2]), 
      HEAPF32[wasm2js_i32$0 + 588 >> 2] = wasm2js_f32$0;
      $2 = HEAPF32[$1 + 608 >> 2];
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($1 + 68 | 0, $1 + 108 | 0, $1 + 100 | 0);
      operator__28float_2c_20b2Vec2_20const__29($1 + 76 | 0, $2, $1 + 68 | 0);
      b2Vec2__operator___28b2Vec2_20const__29($1 + 576 | 0, $1 + 76 | 0);
      wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$1 + 604 >> 2] * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 372 >> 2] + 8 | 0, $1 + 108 | 0) + b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 368 >> 2] + 8 | 0, $1 + 100 | 0))) + HEAPF32[$1 + 572 >> 2]), 
      HEAPF32[wasm2js_i32$0 + 572 >> 2] = wasm2js_f32$0;
      HEAPF32[HEAP32[$1 + 372 >> 2] + 16 >> 2] = HEAPF32[$1 + 244 >> 2];
      HEAPF32[HEAP32[$1 + 368 >> 2] + 16 >> 2] = HEAPF32[$1 + 248 >> 2];
      break label$13;
     }
     HEAPF32[$1 + 244 >> 2] = 0;
     HEAPF32[$1 + 248 >> 2] = 0;
     HEAPF32[$1 + 276 >> 2] = HEAPF32[$1 + 264 >> 2];
     HEAPF32[$1 + 272 >> 2] = HEAPF32[$1 + 268 >> 2];
     if (!(!(HEAPF32[$1 + 276 >> 2] >= Math_fround(0)) | !(HEAPF32[$1 + 272 >> 2] >= Math_fround(0)))) {
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 60 | 0, $1 + 244 | 0, $1 + 360 | 0);
      operator__28float_2c_20b2Vec2_20const__29($1 + 52 | 0, HEAPF32[$1 + 60 >> 2], $1 + 560 | 0);
      operator__28float_2c_20b2Vec2_20const__29($1 + 44 | 0, HEAPF32[$1 + 64 >> 2], $1 + 560 | 0);
      $2 = HEAPF32[$1 + 616 >> 2];
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($1 + 28 | 0, $1 + 52 | 0, $1 + 44 | 0);
      operator__28float_2c_20b2Vec2_20const__29($1 + 36 | 0, $2, $1 + 28 | 0);
      b2Vec2__operator___28b2Vec2_20const__29_1($1 + 592 | 0, $1 + 36 | 0);
      wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$1 + 612 >> 2]) * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 372 >> 2], $1 + 52 | 0) + b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 368 >> 2], $1 + 44 | 0))) + HEAPF32[$1 + 588 >> 2]), 
      HEAPF32[wasm2js_i32$0 + 588 >> 2] = wasm2js_f32$0;
      $2 = HEAPF32[$1 + 608 >> 2];
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($1 + 12 | 0, $1 + 52 | 0, $1 + 44 | 0);
      operator__28float_2c_20b2Vec2_20const__29($1 + 20 | 0, $2, $1 + 12 | 0);
      b2Vec2__operator___28b2Vec2_20const__29($1 + 576 | 0, $1 + 20 | 0);
      wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$1 + 604 >> 2] * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 372 >> 2] + 8 | 0, $1 + 52 | 0) + b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 368 >> 2] + 8 | 0, $1 + 44 | 0))) + HEAPF32[$1 + 572 >> 2]), 
      HEAPF32[wasm2js_i32$0 + 572 >> 2] = wasm2js_f32$0;
      HEAPF32[HEAP32[$1 + 372 >> 2] + 16 >> 2] = HEAPF32[$1 + 244 >> 2];
      HEAPF32[HEAP32[$1 + 368 >> 2] + 16 >> 2] = HEAPF32[$1 + 248 >> 2];
     }
    }
   }
   $0 = HEAP32[$1 + 596 >> 2];
   $4 = HEAP32[$1 + 592 >> 2];
   $3 = $4;
   $4 = HEAP32[$5 + 28 >> 2] + Math_imul(HEAP32[$1 + 624 >> 2], 12) | 0;
   HEAP32[$4 >> 2] = $3;
   HEAP32[$4 + 4 >> 2] = $0;
   HEAPF32[(HEAP32[$5 + 28 >> 2] + Math_imul(HEAP32[$1 + 624 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$1 + 588 >> 2];
   $4 = HEAP32[$1 + 580 >> 2];
   $0 = HEAP32[$1 + 576 >> 2];
   $3 = $0;
   $0 = HEAP32[$5 + 28 >> 2] + Math_imul(HEAP32[$1 + 620 >> 2], 12) | 0;
   HEAP32[$0 >> 2] = $3;
   HEAP32[$0 + 4 >> 2] = $4;
   HEAPF32[(HEAP32[$5 + 28 >> 2] + Math_imul(HEAP32[$1 + 620 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$1 + 572 >> 2];
   HEAP32[$1 + 632 >> 2] = HEAP32[$1 + 632 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 640 | 0;
}

function fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 $12 = __stack_pointer - 560 | 0;
 __stack_pointer = $12;
 HEAP32[$12 + 44 >> 2] = 0;
 $9 = __DOUBLE_BITS($1);
 $11 = i64toi32_i32$HIGH_BITS;
 $14 = $11;
 label$1: {
  if (($11 | 0) < 0) {
   $19 = 1;
   $25 = 1817;
   $1 = -$1;
   $8 = __DOUBLE_BITS($1);
   $11 = i64toi32_i32$HIGH_BITS;
   $14 = $11;
   break label$1;
  }
  if ($4 & 2048) {
   $19 = 1;
   $25 = 1820;
   break label$1;
  }
  $19 = $4 & 1;
  $25 = $19 ? 1823 : 1818;
  $26 = !$19;
 }
 $11 = $14;
 $8 = $11 & 2146435072;
 $11 = 0;
 label$4: {
  if (!$11 & ($8 | 0) == 2146435072) {
   $6 = $19 + 3 | 0;
   pad($0, 32, $2, $6, $4 & -65537);
   out($0, $25, $19);
   $7 = $5 & 32;
   out($0, $1 != $1 ? $7 ? 6793 : 10671 : $7 ? 7703 : 10684, 3);
   pad($0, 32, $2, $6, $4 ^ 8192);
   $9 = ($2 | 0) < ($6 | 0) ? $6 : $2;
   break label$4;
  }
  $20 = $12 + 16 | 0;
  label$6: {
   label$7: {
    label$8: {
     $1 = frexp($1, $12 + 44 | 0);
     $1 = $1 + $1;
     if ($1 != 0) {
      $6 = HEAP32[$12 + 44 >> 2];
      HEAP32[$12 + 44 >> 2] = $6 - 1;
      $23 = $5 | 32;
      if (($23 | 0) != 97) {
       break label$8;
      }
      break label$6;
     }
     $23 = $5 | 32;
     if (($23 | 0) == 97) {
      break label$6;
     }
     $24 = HEAP32[$12 + 44 >> 2];
     $13 = ($3 | 0) < 0 ? 6 : $3;
     break label$7;
    }
    $24 = $6 - 29 | 0;
    HEAP32[$12 + 44 >> 2] = $24;
    $1 = $1 * 268435456;
    $13 = ($3 | 0) < 0 ? 6 : $3;
   }
   $17 = ($12 + 48 | 0) + (($24 | 0) >= 0 ? 288 : 0) | 0;
   $7 = $17;
   while (1) {
    if ($1 < 4294967296 & $1 >= 0) {
     $6 = ~~$1 >>> 0;
    } else {
     $6 = 0;
    }
    HEAP32[$7 >> 2] = $6;
    $7 = $7 + 4 | 0;
    $1 = ($1 - +($6 >>> 0)) * 1e9;
    if ($1 != 0) {
     continue;
    }
    break;
   }
   label$13: {
    if (($24 | 0) <= 0) {
     $3 = $24;
     $6 = $7;
     $10 = $17;
     break label$13;
    }
    $10 = $17;
    $3 = $24;
    while (1) {
     $3 = ($3 | 0) >= 29 ? 29 : $3;
     $6 = $7 - 4 | 0;
     label$16: {
      if ($10 >>> 0 > $6 >>> 0) {
       break label$16;
      }
      $21 = 0;
      while (1) {
       $9 = $21;
       $8 = HEAP32[$6 >> 2];
       $11 = $8;
       $22 = $3;
       $15 = $22 & 31;
       if (($22 & 63) >>> 0 >= 32) {
        $8 = $11 << $15;
        $22 = 0;
       } else {
        $8 = (1 << $15) - 1 & $11 >>> 32 - $15;
        $22 = $11 << $15;
       }
       $15 = $9 + $22 | 0;
       $11 = $8;
       $8 = $16;
       $8 = $11 + $8 | 0;
       $8 = $15 >>> 0 < $22 >>> 0 ? $8 + 1 | 0 : $8;
       $27 = $8;
       $9 = __wasm_i64_udiv($15, $8, 1e9, 0);
       $8 = i64toi32_i32$HIGH_BITS;
       $14 = $8;
       $21 = $9;
       $9 = __wasm_i64_mul($9, $8, 1e9, 0);
       $8 = i64toi32_i32$HIGH_BITS;
       $28 = $8;
       $22 = $9;
       $11 = $15 - $9 | 0;
       $8 = $27;
       $9 = $28;
       $15 = $9 + ($15 >>> 0 < $22 >>> 0) | 0;
       HEAP32[$6 >> 2] = $11;
       $6 = $6 - 4 | 0;
       if ($10 >>> 0 <= $6 >>> 0) {
        continue;
       }
       break;
      }
      $6 = $21;
      if (!$6) {
       break label$16;
      }
      $10 = $10 - 4 | 0;
      HEAP32[$10 >> 2] = $6;
     }
     while (1) {
      $6 = $7;
      if ($10 >>> 0 < $6 >>> 0) {
       $7 = $6 - 4 | 0;
       if (!HEAP32[$7 >> 2]) {
        continue;
       }
      }
      break;
     }
     $3 = HEAP32[$12 + 44 >> 2] - $3 | 0;
     HEAP32[$12 + 44 >> 2] = $3;
     $7 = $6;
     if (($3 | 0) > 0) {
      continue;
     }
     break;
    }
   }
   if (($3 | 0) < 0) {
    $16 = (($13 + 25 >>> 0) / 9 | 0) + 1 | 0;
    $21 = ($23 | 0) == 102;
    while (1) {
     $7 = 0 - $3 | 0;
     $8 = ($7 | 0) >= 9 ? 9 : $7;
     label$22: {
      if ($6 >>> 0 <= $10 >>> 0) {
       $7 = HEAP32[$10 >> 2];
       break label$22;
      }
      $14 = 1e9 >>> $8 | 0;
      $11 = -1 << $8 ^ -1;
      $3 = 0;
      $7 = $10;
      while (1) {
       $9 = HEAP32[$7 >> 2];
       HEAP32[$7 >> 2] = ($9 >>> $8 | 0) + $3;
       $3 = Math_imul($9 & $11, $14);
       $7 = $7 + 4 | 0;
       if ($7 >>> 0 < $6 >>> 0) {
        continue;
       }
       break;
      }
      $7 = HEAP32[$10 >> 2];
      if (!$3) {
       break label$22;
      }
      HEAP32[$6 >> 2] = $3;
      $6 = $6 + 4 | 0;
     }
     $3 = HEAP32[$12 + 44 >> 2] + $8 | 0;
     HEAP32[$12 + 44 >> 2] = $3;
     $10 = (!$7 << 2) + $10 | 0;
     $7 = $21 ? $17 : $10;
     $6 = $6 - $7 >> 2 > ($16 | 0) ? $7 + ($16 << 2) | 0 : $6;
     if (($3 | 0) < 0) {
      continue;
     }
     break;
    }
   }
   $3 = 0;
   label$25: {
    if ($6 >>> 0 <= $10 >>> 0) {
     break label$25;
    }
    $3 = Math_imul($17 - $10 >> 2, 9);
    $7 = 10;
    $9 = HEAP32[$10 >> 2];
    if ($9 >>> 0 < 10) {
     break label$25;
    }
    while (1) {
     $3 = $3 + 1 | 0;
     $7 = Math_imul($7, 10);
     if ($9 >>> 0 >= $7 >>> 0) {
      continue;
     }
     break;
    }
   }
   $7 = ($13 - (($23 | 0) != 102 ? $3 : 0) | 0) - (($23 | 0) == 103 & ($13 | 0) != 0) | 0;
   if (($7 | 0) < (Math_imul($6 - $17 >> 2, 9) - 9 | 0)) {
    $9 = $7 + 9216 | 0;
    $14 = ($9 | 0) / 9 | 0;
    $8 = (((($24 | 0) < 0 ? 4 : 292) + $12 | 0) + ($14 << 2) | 0) - 4048 | 0;
    $7 = 10;
    $9 = $9 - Math_imul($14, 9) | 0;
    if (($9 | 0) <= 7) {
     while (1) {
      $7 = Math_imul($7, 10);
      $9 = $9 + 1 | 0;
      if (($9 | 0) != 8) {
       continue;
      }
      break;
     }
    }
    $9 = HEAP32[$8 >> 2];
    $16 = ($9 >>> 0) / ($7 >>> 0) | 0;
    $14 = $9 - Math_imul($7, $16) | 0;
    $11 = $8 + 4 | 0;
    label$30: {
     if (!$14 & ($11 | 0) == ($6 | 0)) {
      break label$30;
     }
     label$31: {
      if (!($16 & 1)) {
       $1 = 9007199254740992;
       if (!(HEAP8[$8 - 4 | 0] & 1) | (($7 | 0) != 1e9 | $10 >>> 0 >= $8 >>> 0)) {
        break label$31;
       }
      }
      $1 = 9007199254740994;
     }
     $18 = ($6 | 0) == ($11 | 0) ? 1 : 1.5;
     $11 = $7 >>> 1 | 0;
     $18 = $14 >>> 0 < $11 >>> 0 ? .5 : ($11 | 0) == ($14 | 0) ? $18 : 1.5;
     if (!(HEAPU8[$25 | 0] != 45 | $26)) {
      $18 = -$18;
      $1 = -$1;
     }
     $9 = $9 - $14 | 0;
     HEAP32[$8 >> 2] = $9;
     if ($1 + $18 == $1) {
      break label$30;
     }
     $7 = $7 + $9 | 0;
     HEAP32[$8 >> 2] = $7;
     if ($7 >>> 0 >= 1e9) {
      while (1) {
       HEAP32[$8 >> 2] = 0;
       $8 = $8 - 4 | 0;
       if ($8 >>> 0 < $10 >>> 0) {
        $10 = $10 - 4 | 0;
        HEAP32[$10 >> 2] = 0;
       }
       $7 = HEAP32[$8 >> 2] + 1 | 0;
       HEAP32[$8 >> 2] = $7;
       if ($7 >>> 0 > 999999999) {
        continue;
       }
       break;
      }
     }
     $3 = Math_imul($17 - $10 >> 2, 9);
     $7 = 10;
     $9 = HEAP32[$10 >> 2];
     if ($9 >>> 0 < 10) {
      break label$30;
     }
     while (1) {
      $3 = $3 + 1 | 0;
      $7 = Math_imul($7, 10);
      if ($9 >>> 0 >= $7 >>> 0) {
       continue;
      }
      break;
     }
    }
    $7 = $8 + 4 | 0;
    $6 = $6 >>> 0 > $7 >>> 0 ? $7 : $6;
   }
   while (1) {
    $7 = $6;
    $9 = $6 >>> 0 <= $10 >>> 0;
    if (!$9) {
     $6 = $7 - 4 | 0;
     if (!HEAP32[$6 >> 2]) {
      continue;
     }
    }
    break;
   }
   label$40: {
    if (($23 | 0) != 103) {
     $8 = $4 & 8;
     break label$40;
    }
    $6 = $13 ? $13 : 1;
    $8 = ($6 | 0) > ($3 | 0) & ($3 | 0) > -5;
    $13 = ($8 ? $3 ^ -1 : -1) + $6 | 0;
    $5 = ($8 ? -1 : -2) + $5 | 0;
    $8 = $4 & 8;
    if ($8) {
     break label$40;
    }
    $6 = -9;
    label$42: {
     if ($9) {
      break label$42;
     }
     $8 = HEAP32[$7 - 4 >> 2];
     if (!$8) {
      break label$42;
     }
     $9 = 10;
     $6 = 0;
     if (($8 >>> 0) % 10 | 0) {
      break label$42;
     }
     while (1) {
      $14 = $6;
      $6 = $6 + 1 | 0;
      $9 = Math_imul($9, 10);
      if (!(($8 >>> 0) % ($9 >>> 0) | 0)) {
       continue;
      }
      break;
     }
     $6 = $14 ^ -1;
    }
    $9 = Math_imul($7 - $17 >> 2, 9);
    if (($5 & -33) == 70) {
     $8 = 0;
     $6 = ($6 + $9 | 0) - 9 | 0;
     $6 = ($6 | 0) > 0 ? $6 : 0;
     $13 = ($6 | 0) > ($13 | 0) ? $13 : $6;
     break label$40;
    }
    $8 = 0;
    $6 = (($3 + $9 | 0) + $6 | 0) - 9 | 0;
    $6 = ($6 | 0) > 0 ? $6 : 0;
    $13 = ($6 | 0) > ($13 | 0) ? $13 : $6;
   }
   $9 = -1;
   $14 = $8 | $13;
   if ((($14 ? 2147483645 : 2147483646) | 0) < ($13 | 0)) {
    break label$4;
   }
   $11 = ((($14 | 0) != 0) + $13 | 0) + 1 | 0;
   $21 = $5 & -33;
   label$45: {
    if (($21 | 0) == 70) {
     if (($11 ^ 2147483647) < ($3 | 0)) {
      break label$4;
     }
     $6 = ($3 | 0) > 0 ? $3 : 0;
     break label$45;
    }
    $6 = $3 >> 31;
    $6 = fmt_u(($6 ^ $3) - $6 | 0, 0, $20);
    if (($20 - $6 | 0) <= 1) {
     while (1) {
      $6 = $6 - 1 | 0;
      HEAP8[$6 | 0] = 48;
      if (($20 - $6 | 0) < 2) {
       continue;
      }
      break;
     }
    }
    $16 = $6 - 2 | 0;
    HEAP8[$16 | 0] = $5;
    HEAP8[$6 - 1 | 0] = ($3 | 0) < 0 ? 45 : 43;
    $6 = $20 - $16 | 0;
    if (($6 | 0) > ($11 ^ 2147483647)) {
     break label$4;
    }
   }
   $6 = $6 + $11 | 0;
   if (($6 | 0) > ($19 ^ 2147483647)) {
    break label$4;
   }
   $11 = $6 + $19 | 0;
   pad($0, 32, $2, $11, $4);
   out($0, $25, $19);
   pad($0, 48, $2, $11, $4 ^ 65536);
   label$49: {
    label$50: {
     label$51: {
      if (($21 | 0) == 70) {
       $8 = $12 + 16 | 8;
       $3 = $12 + 16 | 9;
       $9 = $10 >>> 0 > $17 >>> 0 ? $17 : $10;
       $10 = $9;
       while (1) {
        $15 = HEAP32[$10 >> 2];
        $6 = fmt_u($15, 0, $3);
        label$54: {
         if (($10 | 0) != ($9 | 0)) {
          if ($12 + 16 >>> 0 >= $6 >>> 0) {
           break label$54;
          }
          while (1) {
           $6 = $6 - 1 | 0;
           HEAP8[$6 | 0] = 48;
           if ($12 + 16 >>> 0 < $6 >>> 0) {
            continue;
           }
           break;
          }
          break label$54;
         }
         if (($3 | 0) != ($6 | 0)) {
          break label$54;
         }
         HEAP8[$12 + 24 | 0] = 48;
         $6 = $8;
        }
        out($0, $6, $3 - $6 | 0);
        $10 = $10 + 4 | 0;
        if ($17 >>> 0 >= $10 >>> 0) {
         continue;
        }
        break;
       }
       if ($14) {
        out($0, 12133, 1);
       }
       if (($13 | 0) <= 0 | $7 >>> 0 <= $10 >>> 0) {
        break label$51;
       }
       while (1) {
        $8 = HEAP32[$10 >> 2];
        $6 = fmt_u($8, 0, $3);
        if ($6 >>> 0 > $12 + 16 >>> 0) {
         while (1) {
          $6 = $6 - 1 | 0;
          HEAP8[$6 | 0] = 48;
          if ($12 + 16 >>> 0 < $6 >>> 0) {
           continue;
          }
          break;
         }
        }
        out($0, $6, ($13 | 0) >= 9 ? 9 : $13);
        $6 = $13 - 9 | 0;
        $10 = $10 + 4 | 0;
        if ($10 >>> 0 >= $7 >>> 0) {
         break label$50;
        }
        $9 = ($13 | 0) > 9;
        $13 = $6;
        if ($9) {
         continue;
        }
        break;
       }
       break label$50;
      }
      label$61: {
       if (($13 | 0) < 0) {
        break label$61;
       }
       $14 = $7 >>> 0 > $10 >>> 0 ? $7 : $10 + 4 | 0;
       $17 = $12 + 16 | 8;
       $3 = $12 + 16 | 9;
       $7 = $10;
       while (1) {
        $15 = HEAP32[$7 >> 2];
        $6 = fmt_u($15, 0, $3);
        if (($6 | 0) == ($3 | 0)) {
         HEAP8[$12 + 24 | 0] = 48;
         $6 = $17;
        }
        label$64: {
         if (($7 | 0) != ($10 | 0)) {
          if ($12 + 16 >>> 0 >= $6 >>> 0) {
           break label$64;
          }
          while (1) {
           $6 = $6 - 1 | 0;
           HEAP8[$6 | 0] = 48;
           if ($12 + 16 >>> 0 < $6 >>> 0) {
            continue;
           }
           break;
          }
          break label$64;
         }
         out($0, $6, 1);
         $6 = $6 + 1 | 0;
         if (!($8 | $13)) {
          break label$64;
         }
         out($0, 12133, 1);
        }
        $9 = $3 - $6 | 0;
        out($0, $6, ($9 | 0) > ($13 | 0) ? $13 : $9);
        $13 = $13 - $9 | 0;
        $7 = $7 + 4 | 0;
        if ($14 >>> 0 <= $7 >>> 0) {
         break label$61;
        }
        if (($13 | 0) >= 0) {
         continue;
        }
        break;
       }
      }
      pad($0, 48, $13 + 18 | 0, 18, 0);
      out($0, $16, $20 - $16 | 0);
      break label$49;
     }
     $6 = $13;
    }
    pad($0, 48, $6 + 9 | 0, 9, 0);
   }
   pad($0, 32, $2, $11, $4 ^ 8192);
   $9 = ($2 | 0) < ($11 | 0) ? $11 : $2;
   break label$4;
  }
  $11 = ($5 << 26 >> 31 & 9) + $25 | 0;
  label$67: {
   if ($3 >>> 0 > 11) {
    break label$67;
   }
   $6 = 12 - $3 | 0;
   $18 = 16;
   while (1) {
    $18 = $18 * 16;
    $6 = $6 - 1 | 0;
    if ($6) {
     continue;
    }
    break;
   }
   if (HEAPU8[$11 | 0] == 45) {
    $1 = -($18 + (-$1 - $18));
    break label$67;
   }
   $1 = $1 + $18 - $18;
  }
  $6 = HEAP32[$12 + 44 >> 2];
  $7 = $6;
  $6 = $6 >> 31;
  $6 = fmt_u(($7 ^ $6) - $6 | 0, 0, $20);
  if (($20 | 0) == ($6 | 0)) {
   HEAP8[$12 + 15 | 0] = 48;
   $6 = $12 + 15 | 0;
  }
  $8 = $19 | 2;
  $10 = $5 & 32;
  $7 = HEAP32[$12 + 44 >> 2];
  $14 = $6 - 2 | 0;
  HEAP8[$14 | 0] = $5 + 15;
  HEAP8[$6 - 1 | 0] = ($7 | 0) < 0 ? 45 : 43;
  $9 = $4 & 8;
  $7 = $12 + 16 | 0;
  while (1) {
   $6 = $7;
   if (Math_abs($1) < 2147483648) {
    $7 = ~~$1;
   } else {
    $7 = -2147483648;
   }
   HEAP8[$6 | 0] = HEAPU8[$7 + 23920 | 0] | $10;
   $1 = ($1 - +($7 | 0)) * 16;
   $7 = $6 + 1 | 0;
   if (!(!(($3 | 0) > 0 | $9) & $1 == 0 | ($7 - ($12 + 16 | 0) | 0) != 1)) {
    HEAP8[$6 + 1 | 0] = 46;
    $7 = $6 + 2 | 0;
   }
   if ($1 != 0) {
    continue;
   }
   break;
  }
  $9 = -1;
  $10 = $20 - $14 | 0;
  $16 = $8 + $10 | 0;
  if ((2147483645 - $16 | 0) < ($3 | 0)) {
   break label$4;
  }
  $6 = $7 - ($12 + 16 | 0) | 0;
  $3 = $3 ? ($6 - 2 | 0) < ($3 | 0) ? $3 + 2 | 0 : $6 : $6;
  $7 = $16 + $3 | 0;
  pad($0, 32, $2, $7, $4);
  out($0, $11, $8);
  pad($0, 48, $2, $7, $4 ^ 65536);
  out($0, $12 + 16 | 0, $6);
  pad($0, 48, $3 - $6 | 0, 0, 0);
  out($0, $14, $10);
  pad($0, 32, $2, $7, $4 ^ 8192);
  $9 = ($2 | 0) < ($7 | 0) ? $7 : $2;
 }
 __stack_pointer = $12 + 560 | 0;
 return $9 | 0;
}

function b2Island__Solve_28b2Profile__2c_20b2TimeStep_20const__2c_20b2Vec2_20const__2c_20bool_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_i32$1 = 0;
 $5 = __stack_pointer - 352 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 348 >> 2] = $0;
 HEAP32[$5 + 344 >> 2] = $1;
 HEAP32[$5 + 340 >> 2] = $2;
 HEAP32[$5 + 336 >> 2] = $3;
 HEAP8[$5 + 335 | 0] = $4;
 $6 = HEAP32[$5 + 348 >> 2];
 b2Timer__b2Timer_28_29($5 + 334 | 0);
 HEAPF32[$5 + 328 >> 2] = HEAPF32[HEAP32[$5 + 340 >> 2] >> 2];
 HEAP32[$5 + 324 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 324 >> 2] < HEAP32[$6 + 28 >> 2]) {
   HEAP32[$5 + 320 >> 2] = HEAP32[HEAP32[$6 + 8 >> 2] + (HEAP32[$5 + 324 >> 2] << 2) >> 2];
   $2 = HEAP32[$5 + 320 >> 2];
   $0 = HEAP32[$2 + 44 >> 2];
   $1 = HEAP32[$2 + 48 >> 2];
   HEAP32[$5 + 312 >> 2] = $0;
   HEAP32[$5 + 316 >> 2] = $1;
   HEAPF32[$5 + 308 >> 2] = HEAPF32[HEAP32[$5 + 320 >> 2] + 56 >> 2];
   $2 = HEAP32[$5 + 320 >> 2];
   $1 = HEAP32[$2 + 64 >> 2];
   $0 = HEAP32[$2 + 68 >> 2];
   HEAP32[$5 + 296 >> 2] = $1;
   HEAP32[$5 + 300 >> 2] = $0;
   HEAPF32[$5 + 292 >> 2] = HEAPF32[HEAP32[$5 + 320 >> 2] + 72 >> 2];
   $2 = HEAP32[$5 + 320 >> 2];
   $0 = HEAP32[$2 + 44 >> 2];
   $1 = HEAP32[$2 + 48 >> 2];
   $2 = $0;
   $0 = HEAP32[$5 + 320 >> 2];
   HEAP32[$0 + 36 >> 2] = $2;
   HEAP32[$0 + 40 >> 2] = $1;
   HEAPF32[HEAP32[$5 + 320 >> 2] + 52 >> 2] = HEAPF32[HEAP32[$5 + 320 >> 2] + 56 >> 2];
   if (HEAP32[HEAP32[$5 + 320 >> 2] >> 2] == 2) {
    $7 = HEAPF32[$5 + 328 >> 2];
    $8 = HEAPF32[HEAP32[$5 + 320 >> 2] + 120 >> 2];
    operator__28float_2c_20b2Vec2_20const__29($5 + 268 | 0, Math_fround(HEAPF32[HEAP32[$5 + 320 >> 2] + 140 >> 2] * HEAPF32[HEAP32[$5 + 320 >> 2] + 116 >> 2]), HEAP32[$5 + 336 >> 2]);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($5 + 276 | 0, $5 + 268 | 0, HEAP32[$5 + 320 >> 2] + 76 | 0);
    operator__28float_2c_20b2Vec2_20const__29($5 + 284 | 0, Math_fround($7 * $8), $5 + 276 | 0);
    b2Vec2__operator___28b2Vec2_20const__29($5 + 296 | 0, $5 + 284 | 0);
    HEAPF32[$5 + 292 >> 2] = Math_fround(Math_fround(HEAPF32[$5 + 328 >> 2] * HEAPF32[HEAP32[$5 + 320 >> 2] + 128 >> 2]) * HEAPF32[HEAP32[$5 + 320 >> 2] + 84 >> 2]) + HEAPF32[$5 + 292 >> 2];
    b2Vec2__operator___28float_29($5 + 296 | 0, Math_fround(Math_fround(1) / Math_fround(Math_fround(HEAPF32[$5 + 328 >> 2] * HEAPF32[HEAP32[$5 + 320 >> 2] + 132 >> 2]) + Math_fround(1))));
    HEAPF32[$5 + 292 >> 2] = HEAPF32[$5 + 292 >> 2] * Math_fround(Math_fround(1) / Math_fround(Math_fround(HEAPF32[$5 + 328 >> 2] * HEAPF32[HEAP32[$5 + 320 >> 2] + 136 >> 2]) + Math_fround(1)));
   }
   $0 = HEAP32[$5 + 316 >> 2];
   $1 = HEAP32[$5 + 312 >> 2];
   $2 = $1;
   $1 = HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$5 + 324 >> 2], 12) | 0;
   HEAP32[$1 >> 2] = $2;
   HEAP32[$1 + 4 >> 2] = $0;
   HEAPF32[(HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$5 + 324 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$5 + 308 >> 2];
   $1 = HEAP32[$5 + 300 >> 2];
   $0 = HEAP32[$5 + 296 >> 2];
   $2 = $0;
   $0 = HEAP32[$6 + 24 >> 2] + Math_imul(HEAP32[$5 + 324 >> 2], 12) | 0;
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $1;
   HEAPF32[(HEAP32[$6 + 24 >> 2] + Math_imul(HEAP32[$5 + 324 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$5 + 292 >> 2];
   HEAP32[$5 + 324 >> 2] = HEAP32[$5 + 324 >> 2] + 1;
   continue;
  }
  break;
 }
 b2Timer__Reset_28_29($5 + 334 | 0);
 $2 = HEAP32[$5 + 340 >> 2];
 $1 = HEAP32[$2 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $4 = $1;
 $3 = $5 + 236 | 0;
 $1 = $3;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 $1 = HEAP32[$2 + 20 >> 2];
 $0 = HEAP32[$2 + 16 >> 2];
 $4 = $0;
 $0 = $3;
 HEAP32[$0 + 16 >> 2] = $4;
 HEAP32[$0 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 $2 = $1;
 $1 = $3;
 HEAP32[$1 + 8 >> 2] = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$5 + 260 >> 2] = HEAP32[$6 + 20 >> 2];
 HEAP32[$5 + 264 >> 2] = HEAP32[$6 + 24 >> 2];
 $2 = HEAP32[$5 + 340 >> 2];
 $0 = HEAP32[$2 >> 2];
 $1 = HEAP32[$2 + 4 >> 2];
 $4 = $0;
 $3 = $5 + 192 | 0;
 $0 = $3;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 20 >> 2];
 $1 = HEAP32[$2 + 16 >> 2];
 $4 = $1;
 $1 = $3;
 HEAP32[$1 + 16 >> 2] = $4;
 HEAP32[$1 + 20 >> 2] = $0;
 $1 = HEAP32[$2 + 12 >> 2];
 $0 = HEAP32[$2 + 8 >> 2];
 $2 = $0;
 $0 = $3;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$5 + 216 >> 2] = HEAP32[$6 + 12 >> 2];
 HEAP32[$5 + 220 >> 2] = HEAP32[$6 + 36 >> 2];
 HEAP32[$5 + 224 >> 2] = HEAP32[$6 + 20 >> 2];
 HEAP32[$5 + 228 >> 2] = HEAP32[$6 + 24 >> 2];
 HEAP32[$5 + 232 >> 2] = HEAP32[$6 >> 2];
 b2ContactSolver__b2ContactSolver_28b2ContactSolverDef__29($5 + 140 | 0, $5 + 192 | 0);
 b2ContactSolver__InitializeVelocityConstraints_28_29($5 + 140 | 0);
 if (HEAP8[HEAP32[$5 + 340 >> 2] + 20 | 0] & 1) {
  b2ContactSolver__WarmStart_28_29($5 + 140 | 0);
 }
 HEAP32[$5 + 136 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 136 >> 2] < HEAP32[$6 + 32 >> 2]) {
   $0 = HEAP32[HEAP32[$6 + 16 >> 2] + (HEAP32[$5 + 136 >> 2] << 2) >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $5 + 236 | 0);
   HEAP32[$5 + 136 >> 2] = HEAP32[$5 + 136 >> 2] + 1;
   continue;
  }
  break;
 }
 $7 = b2Timer__GetMilliseconds_28_29_20const($5 + 334 | 0);
 HEAPF32[HEAP32[$5 + 344 >> 2] + 12 >> 2] = $7;
 b2Timer__Reset_28_29($5 + 334 | 0);
 HEAP32[$5 + 132 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 132 >> 2] < HEAP32[HEAP32[$5 + 340 >> 2] + 12 >> 2]) {
   HEAP32[$5 + 128 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 128 >> 2] < HEAP32[$6 + 32 >> 2]) {
     $0 = HEAP32[HEAP32[$6 + 16 >> 2] + (HEAP32[$5 + 128 >> 2] << 2) >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $5 + 236 | 0);
     HEAP32[$5 + 128 >> 2] = HEAP32[$5 + 128 >> 2] + 1;
     continue;
    }
    break;
   }
   b2ContactSolver__SolveVelocityConstraints_28_29($5 + 140 | 0);
   HEAP32[$5 + 132 >> 2] = HEAP32[$5 + 132 >> 2] + 1;
   continue;
  }
  break;
 }
 b2ContactSolver__StoreImpulses_28_29($5 + 140 | 0);
 $7 = b2Timer__GetMilliseconds_28_29_20const($5 + 334 | 0);
 HEAPF32[HEAP32[$5 + 344 >> 2] + 16 >> 2] = $7;
 HEAP32[$5 + 124 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 124 >> 2] < HEAP32[$6 + 28 >> 2]) {
   $2 = HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$5 + 124 >> 2], 12) | 0;
   $1 = HEAP32[$2 >> 2];
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$5 + 112 >> 2] = $1;
   HEAP32[$5 + 116 >> 2] = $0;
   HEAPF32[$5 + 108 >> 2] = HEAPF32[(HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$5 + 124 >> 2], 12) | 0) + 8 >> 2];
   $2 = HEAP32[$6 + 24 >> 2] + Math_imul(HEAP32[$5 + 124 >> 2], 12) | 0;
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   HEAP32[$5 + 96 >> 2] = $0;
   HEAP32[$5 + 100 >> 2] = $1;
   HEAPF32[$5 + 92 >> 2] = HEAPF32[(HEAP32[$6 + 24 >> 2] + Math_imul(HEAP32[$5 + 124 >> 2], 12) | 0) + 8 >> 2];
   operator__28float_2c_20b2Vec2_20const__29($5 + 84 | 0, HEAPF32[$5 + 328 >> 2], $5 + 96 | 0);
   $0 = $5 + 84 | 0;
   if (b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $0) > Math_fround(4)) {
    wasm2js_i32$0 = $5, wasm2js_f32$0 = Math_fround(Math_fround(2) / b2Vec2__Length_28_29_20const($5 + 84 | 0)), 
    HEAPF32[wasm2js_i32$0 + 80 >> 2] = wasm2js_f32$0;
    b2Vec2__operator___28float_29($5 + 96 | 0, HEAPF32[$5 + 80 >> 2]);
   }
   HEAPF32[$5 + 76 >> 2] = HEAPF32[$5 + 328 >> 2] * HEAPF32[$5 + 92 >> 2];
   if (Math_fround(HEAPF32[$5 + 76 >> 2] * HEAPF32[$5 + 76 >> 2]) > Math_fround(2.4674012660980225)) {
    wasm2js_i32$0 = $5, wasm2js_f32$0 = Math_fround(Math_fround(1.5707963705062866) / float_20b2Abs_float__28float_29(HEAPF32[$5 + 76 >> 2])), 
    HEAPF32[wasm2js_i32$0 + 72 >> 2] = wasm2js_f32$0;
    HEAPF32[$5 + 92 >> 2] = HEAPF32[$5 + 92 >> 2] * HEAPF32[$5 + 72 >> 2];
   }
   operator__28float_2c_20b2Vec2_20const__29($5 - -64 | 0, HEAPF32[$5 + 328 >> 2], $5 + 96 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($5 + 112 | 0, $5 - -64 | 0);
   HEAPF32[$5 + 108 >> 2] = Math_fround(HEAPF32[$5 + 328 >> 2] * HEAPF32[$5 + 92 >> 2]) + HEAPF32[$5 + 108 >> 2];
   $0 = HEAP32[$5 + 116 >> 2];
   $1 = HEAP32[$5 + 112 >> 2];
   $2 = $1;
   $1 = HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$5 + 124 >> 2], 12) | 0;
   HEAP32[$1 >> 2] = $2;
   HEAP32[$1 + 4 >> 2] = $0;
   HEAPF32[(HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$5 + 124 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$5 + 108 >> 2];
   $1 = HEAP32[$5 + 100 >> 2];
   $0 = HEAP32[$5 + 96 >> 2];
   $2 = $0;
   $0 = HEAP32[$6 + 24 >> 2] + Math_imul(HEAP32[$5 + 124 >> 2], 12) | 0;
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $1;
   HEAPF32[(HEAP32[$6 + 24 >> 2] + Math_imul(HEAP32[$5 + 124 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$5 + 92 >> 2];
   HEAP32[$5 + 124 >> 2] = HEAP32[$5 + 124 >> 2] + 1;
   continue;
  }
  break;
 }
 b2Timer__Reset_28_29($5 + 334 | 0);
 HEAP8[$5 + 63 | 0] = 0;
 HEAP32[$5 + 56 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 56 >> 2] < HEAP32[HEAP32[$5 + 340 >> 2] + 16 >> 2]) {
   wasm2js_i32$0 = $5, wasm2js_i32$1 = b2ContactSolver__SolvePositionConstraints_28_29($5 + 140 | 0) & 1, 
   HEAP8[wasm2js_i32$0 + 55 | 0] = wasm2js_i32$1;
   HEAP8[$5 + 54 | 0] = 1;
   HEAP32[$5 + 48 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 48 >> 2] < HEAP32[$6 + 32 >> 2]) {
     $0 = HEAP32[HEAP32[$6 + 16 >> 2] + (HEAP32[$5 + 48 >> 2] << 2) >> 2];
     wasm2js_i32$0 = $5, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $5 + 236 | 0) & 1, 
     HEAP8[wasm2js_i32$0 + 47 | 0] = wasm2js_i32$1;
     $0 = 0;
     $0 = HEAP8[$5 + 54 | 0] & 1 ? HEAPU8[$5 + 47 | 0] : $0;
     HEAP8[$5 + 54 | 0] = $0 & 1;
     HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 48 >> 2] + 1;
     continue;
    }
    break;
   }
   if (!(HEAP8[$5 + 55 | 0] & 1) | !(HEAP8[$5 + 54 | 0] & 1)) {
    HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 56 >> 2] + 1;
    continue;
   } else {
    HEAP8[$5 + 63 | 0] = 1;
   }
  }
  break;
 }
 HEAP32[$5 + 40 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 40 >> 2] < HEAP32[$6 + 28 >> 2]) {
   HEAP32[$5 + 36 >> 2] = HEAP32[HEAP32[$6 + 8 >> 2] + (HEAP32[$5 + 40 >> 2] << 2) >> 2];
   $2 = HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$5 + 40 >> 2], 12) | 0;
   $1 = HEAP32[$2 >> 2];
   $0 = HEAP32[$2 + 4 >> 2];
   $2 = $1;
   $1 = HEAP32[$5 + 36 >> 2];
   HEAP32[$1 + 44 >> 2] = $2;
   HEAP32[$1 + 48 >> 2] = $0;
   HEAPF32[HEAP32[$5 + 36 >> 2] + 56 >> 2] = HEAPF32[(HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$5 + 40 >> 2], 12) | 0) + 8 >> 2];
   $2 = HEAP32[$6 + 24 >> 2] + Math_imul(HEAP32[$5 + 40 >> 2], 12) | 0;
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   $2 = $0;
   $0 = HEAP32[$5 + 36 >> 2];
   HEAP32[$0 + 64 >> 2] = $2;
   HEAP32[$0 + 68 >> 2] = $1;
   HEAPF32[HEAP32[$5 + 36 >> 2] + 72 >> 2] = HEAPF32[(HEAP32[$6 + 24 >> 2] + Math_imul(HEAP32[$5 + 40 >> 2], 12) | 0) + 8 >> 2];
   b2Body__SynchronizeTransform_28_29(HEAP32[$5 + 36 >> 2]);
   HEAP32[$5 + 40 >> 2] = HEAP32[$5 + 40 >> 2] + 1;
   continue;
  }
  break;
 }
 $7 = b2Timer__GetMilliseconds_28_29_20const($5 + 334 | 0);
 HEAPF32[HEAP32[$5 + 344 >> 2] + 20 >> 2] = $7;
 b2Island__Report_28b2ContactVelocityConstraint_20const__29($6, HEAP32[$5 + 180 >> 2]);
 if (HEAP8[$5 + 335 | 0] & 1) {
  HEAPF32[$5 + 32 >> 2] = 34028234663852886e22;
  HEAPF32[$5 + 28 >> 2] = 9999999747378752e-20;
  HEAPF32[$5 + 24 >> 2] = .001218469929881394;
  HEAP32[$5 + 20 >> 2] = 0;
  while (1) {
   if (HEAP32[$5 + 20 >> 2] < HEAP32[$6 + 28 >> 2]) {
    HEAP32[$5 + 16 >> 2] = HEAP32[HEAP32[$6 + 8 >> 2] + (HEAP32[$5 + 20 >> 2] << 2) >> 2];
    if (b2Body__GetType_28_29_20const(HEAP32[$5 + 16 >> 2])) {
     label$27: {
      label$28: {
       if (!(!(HEAPU16[HEAP32[$5 + 16 >> 2] + 4 >> 1] & 4) | Math_fround(HEAPF32[HEAP32[$5 + 16 >> 2] + 72 >> 2] * HEAPF32[HEAP32[$5 + 16 >> 2] + 72 >> 2]) > Math_fround(.001218469929881394))) {
        if (!(b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$5 + 16 >> 2] - -64 | 0, HEAP32[$5 + 16 >> 2] - -64 | 0) > Math_fround(9999999747378752e-20))) {
         break label$28;
        }
       }
       HEAPF32[HEAP32[$5 + 16 >> 2] + 144 >> 2] = 0;
       HEAPF32[$5 + 32 >> 2] = 0;
       break label$27;
      }
      $0 = HEAP32[$5 + 16 >> 2];
      HEAPF32[$0 + 144 >> 2] = HEAPF32[$0 + 144 >> 2] + HEAPF32[$5 + 328 >> 2];
      wasm2js_i32$0 = $5, wasm2js_f32$0 = float_20b2Min_float__28float_2c_20float_29(HEAPF32[$5 + 32 >> 2], HEAPF32[HEAP32[$5 + 16 >> 2] + 144 >> 2]), 
      HEAPF32[wasm2js_i32$0 + 32 >> 2] = wasm2js_f32$0;
     }
    }
    HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
    continue;
   }
   break;
  }
  if (!(!(HEAPF32[$5 + 32 >> 2] >= Math_fround(.5)) | !(HEAP8[$5 + 63 | 0] & 1))) {
   HEAP32[$5 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 12 >> 2] < HEAP32[$6 + 28 >> 2]) {
     HEAP32[$5 + 8 >> 2] = HEAP32[HEAP32[$6 + 8 >> 2] + (HEAP32[$5 + 12 >> 2] << 2) >> 2];
     b2Body__SetAwake_28bool_29(HEAP32[$5 + 8 >> 2], 0);
     HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
  }
 }
 b2ContactSolver___b2ContactSolver_28_29($5 + 140 | 0);
 __stack_pointer = $5 + 352 | 0;
}

function b2ContactSolver__InitializeVelocityConstraints_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f32$0 = Math_fround(0);
 $1 = __stack_pointer - 400 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 396 >> 2] = $0;
 $4 = HEAP32[$1 + 396 >> 2];
 HEAP32[$1 + 392 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 392 >> 2] < HEAP32[$4 + 48 >> 2]) {
   HEAP32[$1 + 388 >> 2] = HEAP32[$4 + 40 >> 2] + Math_imul(HEAP32[$1 + 392 >> 2], 156);
   HEAP32[$1 + 384 >> 2] = HEAP32[$4 + 36 >> 2] + Math_imul(HEAP32[$1 + 392 >> 2], 88);
   HEAPF32[$1 + 380 >> 2] = HEAPF32[HEAP32[$1 + 384 >> 2] + 76 >> 2];
   HEAPF32[$1 + 376 >> 2] = HEAPF32[HEAP32[$1 + 384 >> 2] + 80 >> 2];
   wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetManifold_28_29(HEAP32[HEAP32[$4 + 44 >> 2] + (HEAP32[HEAP32[$1 + 388 >> 2] + 152 >> 2] << 2) >> 2]), 
   HEAP32[wasm2js_i32$0 + 372 >> 2] = wasm2js_i32$1;
   HEAP32[$1 + 368 >> 2] = HEAP32[HEAP32[$1 + 388 >> 2] + 112 >> 2];
   HEAP32[$1 + 364 >> 2] = HEAP32[HEAP32[$1 + 388 >> 2] + 116 >> 2];
   HEAPF32[$1 + 360 >> 2] = HEAPF32[HEAP32[$1 + 388 >> 2] + 120 >> 2];
   HEAPF32[$1 + 356 >> 2] = HEAPF32[HEAP32[$1 + 388 >> 2] + 124 >> 2];
   HEAPF32[$1 + 352 >> 2] = HEAPF32[HEAP32[$1 + 388 >> 2] + 128 >> 2];
   HEAPF32[$1 + 348 >> 2] = HEAPF32[HEAP32[$1 + 388 >> 2] + 132 >> 2];
   $3 = HEAP32[$1 + 384 >> 2];
   $2 = HEAP32[$3 + 48 >> 2];
   $0 = HEAP32[$3 + 52 >> 2];
   HEAP32[$1 + 336 >> 2] = $2;
   HEAP32[$1 + 340 >> 2] = $0;
   $3 = HEAP32[$1 + 384 >> 2];
   $0 = HEAP32[$3 + 56 >> 2];
   $2 = HEAP32[$3 + 60 >> 2];
   HEAP32[$1 + 328 >> 2] = $0;
   HEAP32[$1 + 332 >> 2] = $2;
   $3 = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$1 + 368 >> 2], 12) | 0;
   $2 = HEAP32[$3 >> 2];
   $0 = HEAP32[$3 + 4 >> 2];
   HEAP32[$1 + 320 >> 2] = $2;
   HEAP32[$1 + 324 >> 2] = $0;
   HEAPF32[$1 + 316 >> 2] = HEAPF32[(HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$1 + 368 >> 2], 12) | 0) + 8 >> 2];
   $3 = HEAP32[$4 + 28 >> 2] + Math_imul(HEAP32[$1 + 368 >> 2], 12) | 0;
   $0 = HEAP32[$3 >> 2];
   $2 = HEAP32[$3 + 4 >> 2];
   HEAP32[$1 + 304 >> 2] = $0;
   HEAP32[$1 + 308 >> 2] = $2;
   HEAPF32[$1 + 300 >> 2] = HEAPF32[(HEAP32[$4 + 28 >> 2] + Math_imul(HEAP32[$1 + 368 >> 2], 12) | 0) + 8 >> 2];
   $3 = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$1 + 364 >> 2], 12) | 0;
   $2 = HEAP32[$3 >> 2];
   $0 = HEAP32[$3 + 4 >> 2];
   HEAP32[$1 + 288 >> 2] = $2;
   HEAP32[$1 + 292 >> 2] = $0;
   HEAPF32[$1 + 284 >> 2] = HEAPF32[(HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$1 + 364 >> 2], 12) | 0) + 8 >> 2];
   $3 = HEAP32[$4 + 28 >> 2] + Math_imul(HEAP32[$1 + 364 >> 2], 12) | 0;
   $0 = HEAP32[$3 >> 2];
   $2 = HEAP32[$3 + 4 >> 2];
   HEAP32[$1 + 272 >> 2] = $0;
   HEAP32[$1 + 276 >> 2] = $2;
   HEAPF32[$1 + 268 >> 2] = HEAPF32[(HEAP32[$4 + 28 >> 2] + Math_imul(HEAP32[$1 + 364 >> 2], 12) | 0) + 8 >> 2];
   if (HEAP32[HEAP32[$1 + 372 >> 2] + 60 >> 2] <= 0) {
    __assert_fail(12004, 5446, 176, 3351);
    wasm2js_trap();
   } else {
    b2Transform__b2Transform_28_29($1 + 252 | 0);
    b2Transform__b2Transform_28_29($1 + 236 | 0);
    b2Rot__Set_28float_29($1 + 260 | 0, HEAPF32[$1 + 316 >> 2]);
    b2Rot__Set_28float_29($1 + 244 | 0, HEAPF32[$1 + 284 >> 2]);
    b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($1 + 220 | 0, $1 + 260 | 0, $1 + 336 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 228 | 0, $1 + 320 | 0, $1 + 220 | 0);
    $0 = HEAP32[$1 + 232 >> 2];
    $2 = HEAP32[$1 + 228 >> 2];
    $3 = $2;
    $2 = $1 + 252 | 0;
    HEAP32[$2 >> 2] = $3;
    HEAP32[$2 + 4 >> 2] = $0;
    b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($1 + 204 | 0, $1 + 244 | 0, $1 + 328 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 212 | 0, $1 + 288 | 0, $1 + 204 | 0);
    $2 = HEAP32[$1 + 216 >> 2];
    $0 = HEAP32[$1 + 212 >> 2];
    $3 = $0;
    $0 = $1 + 236 | 0;
    HEAP32[$0 >> 2] = $3;
    HEAP32[$0 + 4 >> 2] = $2;
    b2WorldManifold__b2WorldManifold_28_29($1 + 172 | 0);
    b2WorldManifold__Initialize_28b2Manifold_20const__2c_20b2Transform_20const__2c_20float_2c_20b2Transform_20const__2c_20float_29($1 + 172 | 0, HEAP32[$1 + 372 >> 2], $1 + 252 | 0, HEAPF32[$1 + 380 >> 2], $1 + 236 | 0, HEAPF32[$1 + 376 >> 2]);
    $3 = $1 + 172 | 0;
    $2 = HEAP32[$3 >> 2];
    $0 = HEAP32[$3 + 4 >> 2];
    $3 = $2;
    $2 = HEAP32[$1 + 388 >> 2];
    HEAP32[$2 + 72 >> 2] = $3;
    HEAP32[$2 + 76 >> 2] = $0;
    HEAP32[$1 + 168 >> 2] = HEAP32[HEAP32[$1 + 388 >> 2] + 148 >> 2];
    HEAP32[$1 + 164 >> 2] = 0;
    while (1) {
     if (HEAP32[$1 + 164 >> 2] < HEAP32[$1 + 168 >> 2]) {
      HEAP32[$1 + 160 >> 2] = HEAP32[$1 + 388 >> 2] + Math_imul(HEAP32[$1 + 164 >> 2], 36);
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 152 | 0, ($1 + 180 | 0) + (HEAP32[$1 + 164 >> 2] << 3) | 0, $1 + 320 | 0);
      $2 = HEAP32[$1 + 156 >> 2];
      $0 = HEAP32[$1 + 152 >> 2];
      $3 = $0;
      $0 = HEAP32[$1 + 160 >> 2];
      HEAP32[$0 >> 2] = $3;
      HEAP32[$0 + 4 >> 2] = $2;
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 144 | 0, ($1 + 180 | 0) + (HEAP32[$1 + 164 >> 2] << 3) | 0, $1 + 288 | 0);
      $0 = HEAP32[$1 + 148 >> 2];
      $2 = HEAP32[$1 + 144 >> 2];
      $3 = $2;
      $2 = HEAP32[$1 + 160 >> 2];
      HEAP32[$2 + 8 >> 2] = $3;
      HEAP32[$2 + 12 >> 2] = $0;
      wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 160 >> 2], HEAP32[$1 + 388 >> 2] + 72 | 0), 
      HEAPF32[wasm2js_i32$0 + 140 >> 2] = wasm2js_f32$0;
      wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 160 >> 2] + 8 | 0, HEAP32[$1 + 388 >> 2] + 72 | 0), 
      HEAPF32[wasm2js_i32$0 + 136 >> 2] = wasm2js_f32$0;
      HEAPF32[$1 + 132 >> 2] = Math_fround(Math_fround(HEAPF32[$1 + 348 >> 2] * HEAPF32[$1 + 136 >> 2]) * HEAPF32[$1 + 136 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 352 >> 2] * HEAPF32[$1 + 140 >> 2]) * HEAPF32[$1 + 140 >> 2]) + Math_fround(HEAPF32[$1 + 360 >> 2] + HEAPF32[$1 + 356 >> 2]));
      $0 = HEAP32[$1 + 160 >> 2];
      if (HEAPF32[$1 + 132 >> 2] > Math_fround(0)) {
       $5 = Math_fround(Math_fround(1) / HEAPF32[$1 + 132 >> 2]);
      } else {
       $5 = Math_fround(0);
      }
      HEAPF32[$0 + 24 >> 2] = $5;
      b2Cross_28b2Vec2_20const__2c_20float_29($1 + 124 | 0, HEAP32[$1 + 388 >> 2] + 72 | 0, Math_fround(1));
      wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 160 >> 2], $1 + 124 | 0), 
      HEAPF32[wasm2js_i32$0 + 120 >> 2] = wasm2js_f32$0;
      wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 160 >> 2] + 8 | 0, $1 + 124 | 0), 
      HEAPF32[wasm2js_i32$0 + 116 >> 2] = wasm2js_f32$0;
      HEAPF32[$1 + 112 >> 2] = Math_fround(Math_fround(HEAPF32[$1 + 348 >> 2] * HEAPF32[$1 + 116 >> 2]) * HEAPF32[$1 + 116 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 352 >> 2] * HEAPF32[$1 + 120 >> 2]) * HEAPF32[$1 + 120 >> 2]) + Math_fround(HEAPF32[$1 + 360 >> 2] + HEAPF32[$1 + 356 >> 2]));
      $0 = HEAP32[$1 + 160 >> 2];
      if (HEAPF32[$1 + 112 >> 2] > Math_fround(0)) {
       $5 = Math_fround(Math_fround(1) / HEAPF32[$1 + 112 >> 2]);
      } else {
       $5 = Math_fround(0);
      }
      HEAPF32[$0 + 28 >> 2] = $5;
      HEAPF32[HEAP32[$1 + 160 >> 2] + 32 >> 2] = 0;
      $0 = HEAP32[$1 + 388 >> 2];
      b2Cross_28float_2c_20b2Vec2_20const__29($1 + 76 | 0, HEAPF32[$1 + 268 >> 2], HEAP32[$1 + 160 >> 2] + 8 | 0);
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($1 + 84 | 0, $1 + 272 | 0, $1 + 76 | 0);
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 92 | 0, $1 + 84 | 0, $1 + 304 | 0);
      b2Cross_28float_2c_20b2Vec2_20const__29($1 + 68 | 0, HEAPF32[$1 + 300 >> 2], HEAP32[$1 + 160 >> 2]);
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 100 | 0, $1 + 92 | 0, $1 + 68 | 0);
      wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($0 + 72 | 0, $1 + 100 | 0), 
      HEAPF32[wasm2js_i32$0 + 108 >> 2] = wasm2js_f32$0;
      if (HEAPF32[$1 + 108 >> 2] < Math_fround(-1)) {
       HEAPF32[HEAP32[$1 + 160 >> 2] + 32 >> 2] = Math_fround(-HEAPF32[HEAP32[$1 + 388 >> 2] + 140 >> 2]) * HEAPF32[$1 + 108 >> 2];
      }
      HEAP32[$1 + 164 >> 2] = HEAP32[$1 + 164 >> 2] + 1;
      continue;
     }
     break;
    }
    if (!(!(HEAP8[29752] & 1) | HEAP32[HEAP32[$1 + 388 >> 2] + 148 >> 2] != 2)) {
     HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 388 >> 2];
     HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 388 >> 2] + 36;
     wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 64 >> 2], HEAP32[$1 + 388 >> 2] + 72 | 0), 
     HEAPF32[wasm2js_i32$0 + 56 >> 2] = wasm2js_f32$0;
     wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 64 >> 2] + 8 | 0, HEAP32[$1 + 388 >> 2] + 72 | 0), 
     HEAPF32[wasm2js_i32$0 + 52 >> 2] = wasm2js_f32$0;
     wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 60 >> 2], HEAP32[$1 + 388 >> 2] + 72 | 0), 
     HEAPF32[wasm2js_i32$0 + 48 >> 2] = wasm2js_f32$0;
     wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 60 >> 2] + 8 | 0, HEAP32[$1 + 388 >> 2] + 72 | 0), 
     HEAPF32[wasm2js_i32$0 + 44 >> 2] = wasm2js_f32$0;
     HEAPF32[$1 + 40 >> 2] = Math_fround(Math_fround(HEAPF32[$1 + 348 >> 2] * HEAPF32[$1 + 52 >> 2]) * HEAPF32[$1 + 52 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 352 >> 2] * HEAPF32[$1 + 56 >> 2]) * HEAPF32[$1 + 56 >> 2]) + Math_fround(HEAPF32[$1 + 360 >> 2] + HEAPF32[$1 + 356 >> 2]));
     HEAPF32[$1 + 36 >> 2] = Math_fround(Math_fround(HEAPF32[$1 + 348 >> 2] * HEAPF32[$1 + 44 >> 2]) * HEAPF32[$1 + 44 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 352 >> 2] * HEAPF32[$1 + 48 >> 2]) * HEAPF32[$1 + 48 >> 2]) + Math_fround(HEAPF32[$1 + 360 >> 2] + HEAPF32[$1 + 356 >> 2]));
     HEAPF32[$1 + 32 >> 2] = Math_fround(Math_fround(HEAPF32[$1 + 348 >> 2] * HEAPF32[$1 + 52 >> 2]) * HEAPF32[$1 + 44 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 352 >> 2] * HEAPF32[$1 + 56 >> 2]) * HEAPF32[$1 + 48 >> 2]) + Math_fround(HEAPF32[$1 + 360 >> 2] + HEAPF32[$1 + 356 >> 2]));
     HEAPF32[$1 + 28 >> 2] = 1e3;
     label$13: {
      if (Math_fround(HEAPF32[$1 + 40 >> 2] * HEAPF32[$1 + 40 >> 2]) < Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 40 >> 2] * HEAPF32[$1 + 36 >> 2]) - Math_fround(HEAPF32[$1 + 32 >> 2] * HEAPF32[$1 + 32 >> 2])) * Math_fround(1e3))) {
       b2Vec2__Set_28float_2c_20float_29(HEAP32[$1 + 388 >> 2] + 96 | 0, HEAPF32[$1 + 40 >> 2], HEAPF32[$1 + 32 >> 2]);
       b2Vec2__Set_28float_2c_20float_29(HEAP32[$1 + 388 >> 2] + 104 | 0, HEAPF32[$1 + 32 >> 2], HEAPF32[$1 + 36 >> 2]);
       b2Mat22__GetInverse_28_29_20const($1 + 12 | 0, HEAP32[$1 + 388 >> 2] + 96 | 0);
       $2 = HEAP32[$1 + 16 >> 2];
       $0 = HEAP32[$1 + 12 >> 2];
       $6 = $0;
       $3 = HEAP32[$1 + 388 >> 2];
       $0 = $3;
       HEAP32[$0 + 80 >> 2] = $6;
       HEAP32[$0 + 84 >> 2] = $2;
       $0 = HEAP32[$1 + 24 >> 2];
       $2 = HEAP32[$1 + 20 >> 2];
       $6 = $2;
       $2 = $3;
       HEAP32[$2 + 88 >> 2] = $6;
       HEAP32[$2 + 92 >> 2] = $0;
       break label$13;
      }
      HEAP32[HEAP32[$1 + 388 >> 2] + 148 >> 2] = 1;
     }
    }
    HEAP32[$1 + 392 >> 2] = HEAP32[$1 + 392 >> 2] + 1;
    continue;
   }
  }
  break;
 }
 __stack_pointer = $1 + 400 | 0;
}

function b2PrismaticJoint__SolvePositionConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 400 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 396 >> 2] = $0;
 HEAP32[$2 + 392 >> 2] = $1;
 $3 = HEAP32[$2 + 396 >> 2];
 $4 = HEAP32[HEAP32[$2 + 392 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 144 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 384 >> 2] = $0;
 HEAP32[$2 + 388 >> 2] = $1;
 HEAPF32[$2 + 380 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 392 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 144 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 392 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 148 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 368 >> 2] = $1;
 HEAP32[$2 + 372 >> 2] = $0;
 HEAPF32[$2 + 364 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 392 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 148 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($2 + 356 | 0, HEAPF32[$2 + 380 >> 2]);
 b2Rot__b2Rot_28float_29($2 + 348 | 0, HEAPF32[$2 + 364 >> 2]);
 HEAPF32[$2 + 344 >> 2] = HEAPF32[$3 + 168 >> 2];
 HEAPF32[$2 + 340 >> 2] = HEAPF32[$3 + 172 >> 2];
 HEAPF32[$2 + 336 >> 2] = HEAPF32[$3 + 176 >> 2];
 HEAPF32[$2 + 332 >> 2] = HEAPF32[$3 + 180 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 316 | 0, $3 + 68 | 0, $3 + 152 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 324 | 0, $2 + 356 | 0, $2 + 316 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 300 | 0, $3 + 76 | 0, $3 + 160 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 308 | 0, $2 + 348 | 0, $2 + 300 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 276 | 0, $2 + 368 | 0, $2 + 308 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 284 | 0, $2 + 276 | 0, $2 + 384 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 292 | 0, $2 + 284 | 0, $2 + 324 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 268 | 0, $2 + 356 | 0, $3 + 84 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 256 | 0, $2 + 292 | 0, $2 + 324 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 256 | 0, $2 + 268 | 0), 
 HEAPF32[wasm2js_i32$0 + 264 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 308 | 0, $2 + 268 | 0), 
 HEAPF32[wasm2js_i32$0 + 252 >> 2] = wasm2js_f32$0;
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 244 | 0, $2 + 356 | 0, $3 + 92 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 232 | 0, $2 + 292 | 0, $2 + 324 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 232 | 0, $2 + 244 | 0), 
 HEAPF32[wasm2js_i32$0 + 240 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 308 | 0, $2 + 244 | 0), 
 HEAPF32[wasm2js_i32$0 + 228 >> 2] = wasm2js_f32$0;
 b2Vec3__b2Vec3_28_29($2 + 216 | 0);
 b2Vec2__b2Vec2_28_29($2 + 208 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 244 | 0, $2 + 292 | 0), 
 HEAPF32[wasm2js_i32$0 + 208 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 212 >> 2] = Math_fround(HEAPF32[$2 + 364 >> 2] - HEAPF32[$2 + 380 >> 2]) - HEAPF32[$3 + 100 >> 2];
 wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Abs_float__28float_29(HEAPF32[$2 + 208 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 204 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Abs_float__28float_29(HEAPF32[$2 + 212 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 200 >> 2] = wasm2js_f32$0;
 HEAP8[$2 + 199 | 0] = 0;
 HEAPF32[$2 + 192 >> 2] = 0;
 if (HEAP8[$3 + 136 | 0] & 1) {
  wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 268 | 0, $2 + 292 | 0), 
  HEAPF32[wasm2js_i32$0 + 188 >> 2] = wasm2js_f32$0;
  label$2: {
   if (float_20b2Abs_float__28float_29(Math_fround(HEAPF32[$3 + 124 >> 2] - HEAPF32[$3 + 120 >> 2])) < Math_fround(.009999999776482582)) {
    wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Clamp_float__28float_2c_20float_2c_20float_29(HEAPF32[$2 + 188 >> 2], Math_fround(-.20000000298023224), Math_fround(.20000000298023224)), 
    HEAPF32[wasm2js_i32$0 + 192 >> 2] = wasm2js_f32$0;
    wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Max_float__28float_2c_20float_29(HEAPF32[$2 + 204 >> 2], float_20b2Abs_float__28float_29(HEAPF32[$2 + 188 >> 2])), 
    HEAPF32[wasm2js_i32$0 + 204 >> 2] = wasm2js_f32$0;
    HEAP8[$2 + 199 | 0] = 1;
    break label$2;
   }
   label$4: {
    if (HEAPF32[$2 + 188 >> 2] <= HEAPF32[$3 + 120 >> 2]) {
     wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Clamp_float__28float_2c_20float_2c_20float_29(Math_fround(Math_fround(HEAPF32[$2 + 188 >> 2] - HEAPF32[$3 + 120 >> 2]) + Math_fround(.004999999888241291)), Math_fround(-.20000000298023224), Math_fround(0)), 
     HEAPF32[wasm2js_i32$0 + 192 >> 2] = wasm2js_f32$0;
     wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Max_float__28float_2c_20float_29(HEAPF32[$2 + 204 >> 2], Math_fround(HEAPF32[$3 + 120 >> 2] - HEAPF32[$2 + 188 >> 2])), 
     HEAPF32[wasm2js_i32$0 + 204 >> 2] = wasm2js_f32$0;
     HEAP8[$2 + 199 | 0] = 1;
     break label$4;
    }
    if (HEAPF32[$2 + 188 >> 2] >= HEAPF32[$3 + 124 >> 2]) {
     wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Clamp_float__28float_2c_20float_2c_20float_29(Math_fround(Math_fround(HEAPF32[$2 + 188 >> 2] - HEAPF32[$3 + 124 >> 2]) + Math_fround(-.004999999888241291)), Math_fround(0), Math_fround(.20000000298023224)), 
     HEAPF32[wasm2js_i32$0 + 192 >> 2] = wasm2js_f32$0;
     wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Max_float__28float_2c_20float_29(HEAPF32[$2 + 204 >> 2], Math_fround(HEAPF32[$2 + 188 >> 2] - HEAPF32[$3 + 124 >> 2])), 
     HEAPF32[wasm2js_i32$0 + 204 >> 2] = wasm2js_f32$0;
     HEAP8[$2 + 199 | 0] = 1;
    }
   }
  }
 }
 label$7: {
  if (HEAP8[$2 + 199 | 0] & 1) {
   HEAPF32[$2 + 184 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 332 >> 2] * HEAPF32[$2 + 228 >> 2]) * HEAPF32[$2 + 228 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 336 >> 2] * HEAPF32[$2 + 240 >> 2]) * HEAPF32[$2 + 240 >> 2]) + Math_fround(HEAPF32[$2 + 344 >> 2] + HEAPF32[$2 + 340 >> 2]));
   HEAPF32[$2 + 180 >> 2] = Math_fround(HEAPF32[$2 + 336 >> 2] * HEAPF32[$2 + 240 >> 2]) + Math_fround(HEAPF32[$2 + 332 >> 2] * HEAPF32[$2 + 228 >> 2]);
   HEAPF32[$2 + 176 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 336 >> 2] * HEAPF32[$2 + 240 >> 2]) * HEAPF32[$2 + 264 >> 2]) + Math_fround(Math_fround(HEAPF32[$2 + 332 >> 2] * HEAPF32[$2 + 228 >> 2]) * HEAPF32[$2 + 252 >> 2]);
   HEAPF32[$2 + 172 >> 2] = HEAPF32[$2 + 336 >> 2] + HEAPF32[$2 + 332 >> 2];
   if (HEAPF32[$2 + 172 >> 2] == Math_fround(0)) {
    HEAPF32[$2 + 172 >> 2] = 1;
   }
   HEAPF32[$2 + 168 >> 2] = Math_fround(HEAPF32[$2 + 336 >> 2] * HEAPF32[$2 + 264 >> 2]) + Math_fround(HEAPF32[$2 + 332 >> 2] * HEAPF32[$2 + 252 >> 2]);
   HEAPF32[$2 + 164 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 332 >> 2] * HEAPF32[$2 + 252 >> 2]) * HEAPF32[$2 + 252 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 336 >> 2] * HEAPF32[$2 + 264 >> 2]) * HEAPF32[$2 + 264 >> 2]) + Math_fround(HEAPF32[$2 + 344 >> 2] + HEAPF32[$2 + 340 >> 2]));
   b2Mat33__b2Mat33_28_29($2 + 128 | 0);
   b2Vec3__Set_28float_2c_20float_2c_20float_29($2 + 128 | 0, HEAPF32[$2 + 184 >> 2], HEAPF32[$2 + 180 >> 2], HEAPF32[$2 + 176 >> 2]);
   b2Vec3__Set_28float_2c_20float_2c_20float_29($2 + 140 | 0, HEAPF32[$2 + 180 >> 2], HEAPF32[$2 + 172 >> 2], HEAPF32[$2 + 168 >> 2]);
   b2Vec3__Set_28float_2c_20float_2c_20float_29($2 + 152 | 0, HEAPF32[$2 + 176 >> 2], HEAPF32[$2 + 168 >> 2], HEAPF32[$2 + 164 >> 2]);
   b2Vec3__b2Vec3_28_29($2 + 116 | 0);
   HEAPF32[$2 + 116 >> 2] = HEAPF32[$2 + 208 >> 2];
   HEAPF32[$2 + 120 >> 2] = HEAPF32[$2 + 212 >> 2];
   HEAPF32[$2 + 124 >> 2] = HEAPF32[$2 + 192 >> 2];
   b2Vec3__operator__28_29_20const($2 + 92 | 0, $2 + 116 | 0);
   b2Mat33__Solve33_28b2Vec3_20const__29_20const($2 + 104 | 0, $2 + 128 | 0, $2 + 92 | 0);
   HEAP32[$2 + 224 >> 2] = HEAP32[$2 + 112 >> 2];
   $1 = HEAP32[$2 + 108 >> 2];
   $0 = HEAP32[$2 + 104 >> 2];
   HEAP32[$2 + 216 >> 2] = $0;
   HEAP32[$2 + 220 >> 2] = $1;
   break label$7;
  }
  HEAPF32[$2 + 88 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 332 >> 2] * HEAPF32[$2 + 228 >> 2]) * HEAPF32[$2 + 228 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 336 >> 2] * HEAPF32[$2 + 240 >> 2]) * HEAPF32[$2 + 240 >> 2]) + Math_fround(HEAPF32[$2 + 344 >> 2] + HEAPF32[$2 + 340 >> 2]));
  HEAPF32[$2 + 84 >> 2] = Math_fround(HEAPF32[$2 + 336 >> 2] * HEAPF32[$2 + 240 >> 2]) + Math_fround(HEAPF32[$2 + 332 >> 2] * HEAPF32[$2 + 228 >> 2]);
  HEAPF32[$2 + 80 >> 2] = HEAPF32[$2 + 336 >> 2] + HEAPF32[$2 + 332 >> 2];
  if (HEAPF32[$2 + 80 >> 2] == Math_fround(0)) {
   HEAPF32[$2 + 80 >> 2] = 1;
  }
  b2Mat22__b2Mat22_28_29($2 - -64 | 0);
  b2Vec2__Set_28float_2c_20float_29($2 - -64 | 0, HEAPF32[$2 + 88 >> 2], HEAPF32[$2 + 84 >> 2]);
  b2Vec2__Set_28float_2c_20float_29($2 + 72 | 0, HEAPF32[$2 + 84 >> 2], HEAPF32[$2 + 80 >> 2]);
  b2Vec2__operator__28_29_20const($2 + 48 | 0, $2 + 208 | 0);
  b2Mat22__Solve_28b2Vec2_20const__29_20const($2 + 56 | 0, $2 - -64 | 0, $2 + 48 | 0);
  HEAPF32[$2 + 216 >> 2] = HEAPF32[$2 + 56 >> 2];
  HEAPF32[$2 + 220 >> 2] = HEAPF32[$2 + 60 >> 2];
  HEAPF32[$2 + 224 >> 2] = 0;
 }
 operator__28float_2c_20b2Vec2_20const__29($2 + 32 | 0, HEAPF32[$2 + 216 >> 2], $2 + 244 | 0);
 operator__28float_2c_20b2Vec2_20const__29($2 + 24 | 0, HEAPF32[$2 + 224 >> 2], $2 + 268 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 40 | 0, $2 + 32 | 0, $2 + 24 | 0);
 HEAPF32[$2 + 20 >> 2] = Math_fround(HEAPF32[$2 + 224 >> 2] * HEAPF32[$2 + 264 >> 2]) + Math_fround(Math_fround(HEAPF32[$2 + 216 >> 2] * HEAPF32[$2 + 240 >> 2]) + HEAPF32[$2 + 220 >> 2]);
 HEAPF32[$2 + 16 >> 2] = Math_fround(HEAPF32[$2 + 224 >> 2] * HEAPF32[$2 + 252 >> 2]) + Math_fround(Math_fround(HEAPF32[$2 + 216 >> 2] * HEAPF32[$2 + 228 >> 2]) + HEAPF32[$2 + 220 >> 2]);
 operator__28float_2c_20b2Vec2_20const__29($2 + 8 | 0, HEAPF32[$2 + 344 >> 2], $2 + 40 | 0);
 b2Vec2__operator___28b2Vec2_20const__29_1($2 + 384 | 0, $2 + 8 | 0);
 HEAPF32[$2 + 380 >> 2] = Math_fround(Math_fround(-HEAPF32[$2 + 336 >> 2]) * HEAPF32[$2 + 20 >> 2]) + HEAPF32[$2 + 380 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2, HEAPF32[$2 + 340 >> 2], $2 + 40 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 368 | 0, $2);
 HEAPF32[$2 + 364 >> 2] = Math_fround(HEAPF32[$2 + 332 >> 2] * HEAPF32[$2 + 16 >> 2]) + HEAPF32[$2 + 364 >> 2];
 $0 = HEAP32[$2 + 388 >> 2];
 $1 = HEAP32[$2 + 384 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 392 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 144 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 392 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 144 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 380 >> 2];
 $1 = HEAP32[$2 + 372 >> 2];
 $0 = HEAP32[$2 + 368 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 392 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 148 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 392 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 148 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 364 >> 2];
 __stack_pointer = $2 + 400 | 0;
 $5 = HEAPF32[$2 + 204 >> 2] <= Math_fround(.004999999888241291) ? HEAPF32[$2 + 200 >> 2] <= Math_fround(.03490658849477768) : $5;
 return $5 | 0;
}

function b2GearJoint__InitVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $3 = __stack_pointer - 240 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 236 >> 2] = $0;
 HEAP32[$3 + 232 >> 2] = $1;
 $2 = HEAP32[$3 + 236 >> 2];
 HEAP32[$2 + 160 >> 2] = HEAP32[HEAP32[$2 + 48 >> 2] + 8 >> 2];
 HEAP32[$2 + 164 >> 2] = HEAP32[HEAP32[$2 + 52 >> 2] + 8 >> 2];
 HEAP32[$2 + 168 >> 2] = HEAP32[HEAP32[$2 + 84 >> 2] + 8 >> 2];
 HEAP32[$2 + 172 >> 2] = HEAP32[HEAP32[$2 + 88 >> 2] + 8 >> 2];
 $4 = HEAP32[$2 + 48 >> 2];
 $1 = HEAP32[$4 + 28 >> 2];
 $0 = HEAP32[$4 + 32 >> 2];
 HEAP32[$2 + 176 >> 2] = $1;
 HEAP32[$2 + 180 >> 2] = $0;
 $4 = HEAP32[$2 + 52 >> 2];
 $0 = HEAP32[$4 + 28 >> 2];
 $1 = HEAP32[$4 + 32 >> 2];
 HEAP32[$2 + 184 >> 2] = $0;
 HEAP32[$2 + 188 >> 2] = $1;
 $4 = HEAP32[$2 + 84 >> 2];
 $1 = HEAP32[$4 + 28 >> 2];
 $0 = HEAP32[$4 + 32 >> 2];
 HEAP32[$2 + 192 >> 2] = $1;
 HEAP32[$2 + 196 >> 2] = $0;
 $4 = HEAP32[$2 + 88 >> 2];
 $0 = HEAP32[$4 + 28 >> 2];
 $1 = HEAP32[$4 + 32 >> 2];
 HEAP32[$2 + 200 >> 2] = $0;
 HEAP32[$2 + 204 >> 2] = $1;
 HEAPF32[$2 + 208 >> 2] = HEAPF32[HEAP32[$2 + 48 >> 2] + 120 >> 2];
 HEAPF32[$2 + 212 >> 2] = HEAPF32[HEAP32[$2 + 52 >> 2] + 120 >> 2];
 HEAPF32[$2 + 216 >> 2] = HEAPF32[HEAP32[$2 + 84 >> 2] + 120 >> 2];
 HEAPF32[$2 + 220 >> 2] = HEAPF32[HEAP32[$2 + 88 >> 2] + 120 >> 2];
 HEAPF32[$2 + 224 >> 2] = HEAPF32[HEAP32[$2 + 48 >> 2] + 128 >> 2];
 HEAPF32[$2 + 228 >> 2] = HEAPF32[HEAP32[$2 + 52 >> 2] + 128 >> 2];
 HEAPF32[$2 + 232 >> 2] = HEAPF32[HEAP32[$2 + 84 >> 2] + 128 >> 2];
 HEAPF32[$2 + 236 >> 2] = HEAPF32[HEAP32[$2 + 88 >> 2] + 128 >> 2];
 HEAPF32[$3 + 228 >> 2] = HEAPF32[(HEAP32[HEAP32[$3 + 232 >> 2] + 24 >> 2] + Math_imul(HEAP32[$2 + 160 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$3 + 232 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 160 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$3 + 216 >> 2] = $1;
 HEAP32[$3 + 220 >> 2] = $0;
 HEAPF32[$3 + 212 >> 2] = HEAPF32[(HEAP32[HEAP32[$3 + 232 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 160 >> 2], 12) | 0) + 8 >> 2];
 HEAPF32[$3 + 208 >> 2] = HEAPF32[(HEAP32[HEAP32[$3 + 232 >> 2] + 24 >> 2] + Math_imul(HEAP32[$2 + 164 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$3 + 232 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 164 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$3 + 200 >> 2] = $0;
 HEAP32[$3 + 204 >> 2] = $1;
 HEAPF32[$3 + 196 >> 2] = HEAPF32[(HEAP32[HEAP32[$3 + 232 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 164 >> 2], 12) | 0) + 8 >> 2];
 HEAPF32[$3 + 192 >> 2] = HEAPF32[(HEAP32[HEAP32[$3 + 232 >> 2] + 24 >> 2] + Math_imul(HEAP32[$2 + 168 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$3 + 232 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 168 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$3 + 184 >> 2] = $1;
 HEAP32[$3 + 188 >> 2] = $0;
 HEAPF32[$3 + 180 >> 2] = HEAPF32[(HEAP32[HEAP32[$3 + 232 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 168 >> 2], 12) | 0) + 8 >> 2];
 HEAPF32[$3 + 176 >> 2] = HEAPF32[(HEAP32[HEAP32[$3 + 232 >> 2] + 24 >> 2] + Math_imul(HEAP32[$2 + 172 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$3 + 232 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 172 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$3 + 168 >> 2] = $0;
 HEAP32[$3 + 172 >> 2] = $1;
 HEAPF32[$3 + 164 >> 2] = HEAPF32[(HEAP32[HEAP32[$3 + 232 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 172 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($3 + 156 | 0, HEAPF32[$3 + 228 >> 2]);
 b2Rot__b2Rot_28float_29($3 + 148 | 0, HEAPF32[$3 + 208 >> 2]);
 b2Rot__b2Rot_28float_29($3 + 140 | 0, HEAPF32[$3 + 192 >> 2]);
 b2Rot__b2Rot_28float_29($3 + 132 | 0, HEAPF32[$3 + 176 >> 2]);
 HEAPF32[$2 + 272 >> 2] = 0;
 label$1: {
  if (HEAP32[$2 + 76 >> 2] == 1) {
   b2Vec2__SetZero_28_29($2 + 240 | 0);
   HEAPF32[$2 + 256 >> 2] = 1;
   HEAPF32[$2 + 264 >> 2] = 1;
   HEAPF32[$2 + 272 >> 2] = HEAPF32[$2 + 272 >> 2] + Math_fround(HEAPF32[$2 + 224 >> 2] + HEAPF32[$2 + 232 >> 2]);
   break label$1;
  }
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($3 + 124 | 0, $3 + 140 | 0, $2 + 124 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 108 | 0, $2 + 108 | 0, $2 + 192 | 0);
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($3 + 116 | 0, $3 + 140 | 0, $3 + 108 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 92 | 0, $2 + 92 | 0, $2 + 176 | 0);
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($3 + 100 | 0, $3 + 156 | 0, $3 + 92 | 0);
  $0 = HEAP32[$3 + 128 >> 2];
  $1 = HEAP32[$3 + 124 >> 2];
  HEAP32[$2 + 240 >> 2] = $1;
  HEAP32[$2 + 244 >> 2] = $0;
  wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 116 | 0, $3 + 124 | 0), 
  HEAPF32[wasm2js_i32$0 + 264 >> 2] = wasm2js_f32$0;
  wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 100 | 0, $3 + 124 | 0), 
  HEAPF32[wasm2js_i32$0 + 256 >> 2] = wasm2js_f32$0;
  HEAPF32[$2 + 272 >> 2] = HEAPF32[$2 + 272 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 224 >> 2] * HEAPF32[$2 + 256 >> 2]) * HEAPF32[$2 + 256 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 232 >> 2] * HEAPF32[$2 + 264 >> 2]) * HEAPF32[$2 + 264 >> 2]) + Math_fround(HEAPF32[$2 + 216 >> 2] + HEAPF32[$2 + 208 >> 2])));
 }
 label$3: {
  if (HEAP32[$2 + 80 >> 2] == 1) {
   b2Vec2__SetZero_28_29($2 + 248 | 0);
   HEAPF32[$2 + 260 >> 2] = HEAPF32[$2 + 152 >> 2];
   HEAPF32[$2 + 268 >> 2] = HEAPF32[$2 + 152 >> 2];
   HEAPF32[$2 + 272 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 152 >> 2] * HEAPF32[$2 + 152 >> 2]) * Math_fround(HEAPF32[$2 + 228 >> 2] + HEAPF32[$2 + 236 >> 2])) + HEAPF32[$2 + 272 >> 2];
   break label$3;
  }
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($3 + 84 | 0, $3 + 132 | 0, $2 + 132 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 68 | 0, $2 + 116 | 0, $2 + 200 | 0);
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($3 + 76 | 0, $3 + 132 | 0, $3 + 68 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 52 | 0, $2 + 100 | 0, $2 + 184 | 0);
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($3 + 60 | 0, $3 + 148 | 0, $3 + 52 | 0);
  operator__28float_2c_20b2Vec2_20const__29($3 + 44 | 0, HEAPF32[$2 + 152 >> 2], $3 + 84 | 0);
  $1 = HEAP32[$3 + 48 >> 2];
  $0 = HEAP32[$3 + 44 >> 2];
  HEAP32[$2 + 248 >> 2] = $0;
  HEAP32[$2 + 252 >> 2] = $1;
  wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(HEAPF32[$2 + 152 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 76 | 0, $3 + 84 | 0)), 
  HEAPF32[wasm2js_i32$0 + 268 >> 2] = wasm2js_f32$0;
  wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(HEAPF32[$2 + 152 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 60 | 0, $3 + 84 | 0)), 
  HEAPF32[wasm2js_i32$0 + 260 >> 2] = wasm2js_f32$0;
  HEAPF32[$2 + 272 >> 2] = HEAPF32[$2 + 272 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 228 >> 2] * HEAPF32[$2 + 260 >> 2]) * HEAPF32[$2 + 260 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 152 >> 2] * HEAPF32[$2 + 152 >> 2]) * Math_fround(HEAPF32[$2 + 220 >> 2] + HEAPF32[$2 + 212 >> 2])) + Math_fround(Math_fround(HEAPF32[$2 + 236 >> 2] * HEAPF32[$2 + 268 >> 2]) * HEAPF32[$2 + 268 >> 2])));
 }
 if (HEAPF32[$2 + 272 >> 2] > Math_fround(0)) {
  $5 = Math_fround(Math_fround(1) / HEAPF32[$2 + 272 >> 2]);
 } else {
  $5 = Math_fround(0);
 }
 HEAPF32[$2 + 272 >> 2] = $5;
 label$7: {
  if (HEAP8[HEAP32[$3 + 232 >> 2] + 20 | 0] & 1) {
   operator__28float_2c_20b2Vec2_20const__29($3 + 36 | 0, Math_fround(HEAPF32[$2 + 208 >> 2] * HEAPF32[$2 + 156 >> 2]), $2 + 240 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($3 + 216 | 0, $3 + 36 | 0);
   HEAPF32[$3 + 212 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 224 >> 2] * HEAPF32[$2 + 156 >> 2]) * HEAPF32[$2 + 256 >> 2]) + HEAPF32[$3 + 212 >> 2];
   operator__28float_2c_20b2Vec2_20const__29($3 + 28 | 0, Math_fround(HEAPF32[$2 + 212 >> 2] * HEAPF32[$2 + 156 >> 2]), $2 + 248 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($3 + 200 | 0, $3 + 28 | 0);
   HEAPF32[$3 + 196 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 228 >> 2] * HEAPF32[$2 + 156 >> 2]) * HEAPF32[$2 + 260 >> 2]) + HEAPF32[$3 + 196 >> 2];
   operator__28float_2c_20b2Vec2_20const__29($3 + 20 | 0, Math_fround(HEAPF32[$2 + 216 >> 2] * HEAPF32[$2 + 156 >> 2]), $2 + 240 | 0);
   b2Vec2__operator___28b2Vec2_20const__29_1($3 + 184 | 0, $3 + 20 | 0);
   HEAPF32[$3 + 180 >> 2] = Math_fround(Math_fround(-Math_fround(HEAPF32[$2 + 232 >> 2] * HEAPF32[$2 + 156 >> 2])) * HEAPF32[$2 + 264 >> 2]) + HEAPF32[$3 + 180 >> 2];
   operator__28float_2c_20b2Vec2_20const__29($3 + 12 | 0, Math_fround(HEAPF32[$2 + 220 >> 2] * HEAPF32[$2 + 156 >> 2]), $2 + 248 | 0);
   b2Vec2__operator___28b2Vec2_20const__29_1($3 + 168 | 0, $3 + 12 | 0);
   HEAPF32[$3 + 164 >> 2] = Math_fround(Math_fround(-Math_fround(HEAPF32[$2 + 236 >> 2] * HEAPF32[$2 + 156 >> 2])) * HEAPF32[$2 + 268 >> 2]) + HEAPF32[$3 + 164 >> 2];
   break label$7;
  }
  HEAPF32[$2 + 156 >> 2] = 0;
 }
 $0 = HEAP32[$3 + 220 >> 2];
 $1 = HEAP32[$3 + 216 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$3 + 232 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 160 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$3 + 232 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 160 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$3 + 212 >> 2];
 $1 = HEAP32[$3 + 204 >> 2];
 $0 = HEAP32[$3 + 200 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$3 + 232 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 164 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$3 + 232 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 164 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$3 + 196 >> 2];
 $0 = HEAP32[$3 + 188 >> 2];
 $1 = HEAP32[$3 + 184 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$3 + 232 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 168 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$3 + 232 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 168 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$3 + 180 >> 2];
 $1 = HEAP32[$3 + 172 >> 2];
 $0 = HEAP32[$3 + 168 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$3 + 232 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 172 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$3 + 232 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 172 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$3 + 164 >> 2];
 __stack_pointer = $3 + 240 | 0;
}

function void_20std____2____tree_remove_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____2c_20std____2____tree_node_base_void____29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 if (HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2] ? HEAP32[HEAP32[$2 + 24 >> 2] >> 2] : 0) {
  $0 = std____2____tree_node_base_void____20std____2____tree_next_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$2 + 24 >> 2]);
 } else {
  $0 = HEAP32[$2 + 24 >> 2];
 }
 HEAP32[$2 + 20 >> 2] = $0;
 if (HEAP32[HEAP32[$2 + 20 >> 2] >> 2]) {
  $0 = HEAP32[HEAP32[$2 + 20 >> 2] >> 2];
 } else {
  $0 = HEAP32[HEAP32[$2 + 20 >> 2] + 4 >> 2];
 }
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = 0;
 if (HEAP32[$2 + 16 >> 2]) {
  HEAP32[HEAP32[$2 + 16 >> 2] + 8 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2];
 }
 label$7: {
  if (bool_20std____2____tree_is_left_child_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$2 + 20 >> 2]) & 1) {
   HEAP32[HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2];
   label$9: {
    if (HEAP32[$2 + 20 >> 2] != HEAP32[$2 + 28 >> 2]) {
     wasm2js_i32$0 = $2, wasm2js_i32$1 = HEAP32[std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 20 >> 2]) + 4 >> 2], 
     HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
     break label$9;
    }
    HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
   }
   break label$7;
  }
  $0 = HEAP32[$2 + 16 >> 2];
  wasm2js_i32$0 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 20 >> 2]), 
  wasm2js_i32$1 = $0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2] >> 2];
 }
 HEAP8[$2 + 11 | 0] = HEAP8[HEAP32[$2 + 20 >> 2] + 12 | 0] & 1;
 if (HEAP32[$2 + 20 >> 2] != HEAP32[$2 + 24 >> 2]) {
  HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 8 >> 2];
  label$12: {
   if (bool_20std____2____tree_is_left_child_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$2 + 24 >> 2]) & 1) {
    HEAP32[HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2] >> 2] = HEAP32[$2 + 20 >> 2];
    break label$12;
   }
   $0 = HEAP32[$2 + 20 >> 2];
   wasm2js_i32$0 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 20 >> 2]), 
   wasm2js_i32$1 = $0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  }
  HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] >> 2];
  std____2____tree_node_base_void______set_parent_5babi_v160004_5d_28std____2____tree_node_base_void____29(HEAP32[HEAP32[$2 + 20 >> 2] >> 2], HEAP32[$2 + 20 >> 2]);
  HEAP32[HEAP32[$2 + 20 >> 2] + 4 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2];
  if (HEAP32[HEAP32[$2 + 20 >> 2] + 4 >> 2]) {
   std____2____tree_node_base_void______set_parent_5babi_v160004_5d_28std____2____tree_node_base_void____29(HEAP32[HEAP32[$2 + 20 >> 2] + 4 >> 2], HEAP32[$2 + 20 >> 2]);
  }
  HEAP8[HEAP32[$2 + 20 >> 2] + 12 | 0] = HEAP8[HEAP32[$2 + 24 >> 2] + 12 | 0] & 1;
  if (HEAP32[$2 + 28 >> 2] == HEAP32[$2 + 24 >> 2]) {
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 20 >> 2];
  }
 }
 if (!(!(HEAP8[$2 + 11 | 0] & 1) | !HEAP32[$2 + 28 >> 2])) {
  label$17: {
   if (HEAP32[$2 + 16 >> 2]) {
    HEAP8[HEAP32[$2 + 16 >> 2] + 12 | 0] = 1;
    break label$17;
   }
   while (1) {
    label$20: {
     if (!(bool_20std____2____tree_is_left_child_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$2 + 12 >> 2]) & 1)) {
      if (!(HEAP8[HEAP32[$2 + 12 >> 2] + 12 | 0] & 1)) {
       HEAP8[HEAP32[$2 + 12 >> 2] + 12 | 0] = 1;
       wasm2js_i32$0 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 12 >> 2]), 
       wasm2js_i32$1 = 0, HEAP8[wasm2js_i32$0 + 12 | 0] = wasm2js_i32$1;
       void_20std____2____tree_left_rotate_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 12 >> 2]));
       if (HEAP32[$2 + 28 >> 2] == HEAP32[HEAP32[$2 + 12 >> 2] >> 2]) {
        HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
       }
       HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + 4 >> 2];
      }
      label$24: {
       if (!((HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + 12 | 0] & 1 ? 0 : HEAP32[HEAP32[$2 + 12 >> 2] >> 2]) | (HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] + 12 | 0] & 1 ? 0 : HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]))) {
        HEAP8[HEAP32[$2 + 12 >> 2] + 12 | 0] = 0;
        wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 12 >> 2]), 
        HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
        if (!(HEAP8[HEAP32[$2 + 16 >> 2] + 12 | 0] & 1 & HEAP32[$2 + 16 >> 2] != HEAP32[$2 + 28 >> 2])) {
         HEAP8[HEAP32[$2 + 16 >> 2] + 12 | 0] = 1;
         break label$20;
        }
        label$30: {
         if (bool_20std____2____tree_is_left_child_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$2 + 16 >> 2]) & 1) {
          $0 = HEAP32[std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 16 >> 2]) + 4 >> 2];
          break label$30;
         }
         $0 = HEAP32[HEAP32[HEAP32[$2 + 16 >> 2] + 8 >> 2] >> 2];
        }
        HEAP32[$2 + 12 >> 2] = $0;
        break label$24;
       }
       if (!(HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] + 12 | 0] & 1 ? 0 : HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2])) {
        HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + 12 | 0] = 1;
        HEAP8[HEAP32[$2 + 12 >> 2] + 12 | 0] = 0;
        void_20std____2____tree_right_rotate_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$2 + 12 >> 2]);
        wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 12 >> 2]), 
        HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
       }
       $0 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 12 >> 2]);
       HEAP8[HEAP32[$2 + 12 >> 2] + 12 | 0] = HEAP8[$0 + 12 | 0] & 1;
       wasm2js_i32$0 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 12 >> 2]), 
       wasm2js_i32$1 = 1, HEAP8[wasm2js_i32$0 + 12 | 0] = wasm2js_i32$1;
       HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] + 12 | 0] = 1;
       void_20std____2____tree_left_rotate_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 12 >> 2]));
       break label$20;
      }
      continue;
     }
     if (!(HEAP8[HEAP32[$2 + 12 >> 2] + 12 | 0] & 1)) {
      HEAP8[HEAP32[$2 + 12 >> 2] + 12 | 0] = 1;
      wasm2js_i32$0 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 12 >> 2]), 
      wasm2js_i32$1 = 0, HEAP8[wasm2js_i32$0 + 12 | 0] = wasm2js_i32$1;
      void_20std____2____tree_right_rotate_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 12 >> 2]));
      if (HEAP32[$2 + 28 >> 2] == HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]) {
       HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
      }
      HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] >> 2];
     }
     label$36: {
      if (!((HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + 12 | 0] & 1 ? 0 : HEAP32[HEAP32[$2 + 12 >> 2] >> 2]) | (HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] + 12 | 0] & 1 ? 0 : HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]))) {
       HEAP8[HEAP32[$2 + 12 >> 2] + 12 | 0] = 0;
       wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 12 >> 2]), 
       HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
       if (!(HEAP8[HEAP32[$2 + 16 >> 2] + 12 | 0] & 1 & HEAP32[$2 + 16 >> 2] != HEAP32[$2 + 28 >> 2])) {
        HEAP8[HEAP32[$2 + 16 >> 2] + 12 | 0] = 1;
        break label$20;
       }
       label$42: {
        if (bool_20std____2____tree_is_left_child_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$2 + 16 >> 2]) & 1) {
         $0 = HEAP32[std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 16 >> 2]) + 4 >> 2];
         break label$42;
        }
        $0 = HEAP32[HEAP32[HEAP32[$2 + 16 >> 2] + 8 >> 2] >> 2];
       }
       HEAP32[$2 + 12 >> 2] = $0;
       break label$36;
      }
      if (!(HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + 12 | 0] & 1 ? 0 : HEAP32[HEAP32[$2 + 12 >> 2] >> 2])) {
       HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] + 12 | 0] = 1;
       HEAP8[HEAP32[$2 + 12 >> 2] + 12 | 0] = 0;
       void_20std____2____tree_left_rotate_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$2 + 12 >> 2]);
       wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 12 >> 2]), 
       HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
      }
      $0 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 12 >> 2]);
      HEAP8[HEAP32[$2 + 12 >> 2] + 12 | 0] = HEAP8[$0 + 12 | 0] & 1;
      wasm2js_i32$0 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 12 >> 2]), 
      wasm2js_i32$1 = 1, HEAP8[wasm2js_i32$0 + 12 | 0] = wasm2js_i32$1;
      HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + 12 | 0] = 1;
      void_20std____2____tree_right_rotate_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 12 >> 2]));
      break label$20;
     }
     continue;
    }
    break;
   }
  }
 }
 __stack_pointer = $2 + 32 | 0;
}

function b2GearJoint__SolvePositionConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 368 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 364 >> 2] = $0;
 HEAP32[$2 + 360 >> 2] = $1;
 $3 = HEAP32[$2 + 364 >> 2];
 $4 = HEAP32[HEAP32[$2 + 360 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 160 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 352 >> 2] = $1;
 HEAP32[$2 + 356 >> 2] = $0;
 HEAPF32[$2 + 348 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 360 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 160 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 360 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 164 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 336 >> 2] = $0;
 HEAP32[$2 + 340 >> 2] = $1;
 HEAPF32[$2 + 332 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 360 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 164 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 360 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 168 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 320 >> 2] = $1;
 HEAP32[$2 + 324 >> 2] = $0;
 HEAPF32[$2 + 316 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 360 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 168 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 360 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 172 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 304 >> 2] = $0;
 HEAP32[$2 + 308 >> 2] = $1;
 HEAPF32[$2 + 300 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 360 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 172 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($2 + 292 | 0, HEAPF32[$2 + 348 >> 2]);
 b2Rot__b2Rot_28float_29($2 + 284 | 0, HEAPF32[$2 + 332 >> 2]);
 b2Rot__b2Rot_28float_29($2 + 276 | 0, HEAPF32[$2 + 316 >> 2]);
 b2Rot__b2Rot_28float_29($2 + 268 | 0, HEAPF32[$2 + 300 >> 2]);
 HEAPF32[$2 + 264 >> 2] = 0;
 b2Vec2__b2Vec2_28_29($2 + 248 | 0);
 b2Vec2__b2Vec2_28_29($2 + 240 | 0);
 HEAPF32[$2 + 220 >> 2] = 0;
 label$1: {
  if (HEAP32[$3 + 76 >> 2] == 1) {
   b2Vec2__SetZero_28_29($2 + 248 | 0);
   HEAPF32[$2 + 236 >> 2] = 1;
   HEAPF32[$2 + 228 >> 2] = 1;
   HEAPF32[$2 + 220 >> 2] = HEAPF32[$2 + 220 >> 2] + Math_fround(HEAPF32[$3 + 224 >> 2] + HEAPF32[$3 + 232 >> 2]);
   HEAPF32[$2 + 260 >> 2] = Math_fround(HEAPF32[$2 + 348 >> 2] - HEAPF32[$2 + 316 >> 2]) - HEAPF32[$3 + 140 >> 2];
   break label$1;
  }
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 212 | 0, $2 + 276 | 0, $3 + 124 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 196 | 0, $3 + 108 | 0, $3 + 192 | 0);
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 204 | 0, $2 + 276 | 0, $2 + 196 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 180 | 0, $3 + 92 | 0, $3 + 176 | 0);
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 188 | 0, $2 + 292 | 0, $2 + 180 | 0);
  $0 = HEAP32[$2 + 216 >> 2];
  $1 = HEAP32[$2 + 212 >> 2];
  HEAP32[$2 + 248 >> 2] = $1;
  HEAP32[$2 + 252 >> 2] = $0;
  wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 204 | 0, $2 + 212 | 0), 
  HEAPF32[wasm2js_i32$0 + 228 >> 2] = wasm2js_f32$0;
  wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 188 | 0, $2 + 212 | 0), 
  HEAPF32[wasm2js_i32$0 + 236 >> 2] = wasm2js_f32$0;
  HEAPF32[$2 + 220 >> 2] = HEAPF32[$2 + 220 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$3 + 224 >> 2] * HEAPF32[$2 + 236 >> 2]) * HEAPF32[$2 + 236 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$3 + 232 >> 2] * HEAPF32[$2 + 228 >> 2]) * HEAPF32[$2 + 228 >> 2]) + Math_fround(HEAPF32[$3 + 216 >> 2] + HEAPF32[$3 + 208 >> 2])));
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 172 | 0, $3 + 108 | 0, $3 + 192 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 148 | 0, $2 + 352 | 0, $2 + 320 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 156 | 0, $2 + 188 | 0, $2 + 148 | 0);
  b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 164 | 0, $2 + 276 | 0, $2 + 156 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 140 | 0, $2 + 164 | 0, $2 + 172 | 0);
  wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 140 | 0, $3 + 124 | 0), 
  HEAPF32[wasm2js_i32$0 + 260 >> 2] = wasm2js_f32$0;
 }
 label$3: {
  if (HEAP32[$3 + 80 >> 2] == 1) {
   b2Vec2__SetZero_28_29($2 + 240 | 0);
   HEAPF32[$2 + 232 >> 2] = HEAPF32[$3 + 152 >> 2];
   HEAPF32[$2 + 224 >> 2] = HEAPF32[$3 + 152 >> 2];
   HEAPF32[$2 + 220 >> 2] = Math_fround(Math_fround(HEAPF32[$3 + 152 >> 2] * HEAPF32[$3 + 152 >> 2]) * Math_fround(HEAPF32[$3 + 228 >> 2] + HEAPF32[$3 + 236 >> 2])) + HEAPF32[$2 + 220 >> 2];
   HEAPF32[$2 + 256 >> 2] = Math_fround(HEAPF32[$2 + 332 >> 2] - HEAPF32[$2 + 300 >> 2]) - HEAPF32[$3 + 144 >> 2];
   break label$3;
  }
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 132 | 0, $2 + 268 | 0, $3 + 132 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 116 | 0, $3 + 116 | 0, $3 + 200 | 0);
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 124 | 0, $2 + 268 | 0, $2 + 116 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 100 | 0, $3 + 100 | 0, $3 + 184 | 0);
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 108 | 0, $2 + 284 | 0, $2 + 100 | 0);
  operator__28float_2c_20b2Vec2_20const__29($2 + 92 | 0, HEAPF32[$3 + 152 >> 2], $2 + 132 | 0);
  $1 = HEAP32[$2 + 96 >> 2];
  $0 = HEAP32[$2 + 92 >> 2];
  HEAP32[$2 + 240 >> 2] = $0;
  HEAP32[$2 + 244 >> 2] = $1;
  wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(HEAPF32[$3 + 152 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 124 | 0, $2 + 132 | 0)), 
  HEAPF32[wasm2js_i32$0 + 224 >> 2] = wasm2js_f32$0;
  wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(HEAPF32[$3 + 152 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 108 | 0, $2 + 132 | 0)), 
  HEAPF32[wasm2js_i32$0 + 232 >> 2] = wasm2js_f32$0;
  HEAPF32[$2 + 220 >> 2] = HEAPF32[$2 + 220 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$3 + 228 >> 2] * HEAPF32[$2 + 232 >> 2]) * HEAPF32[$2 + 232 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$3 + 152 >> 2] * HEAPF32[$3 + 152 >> 2]) * Math_fround(HEAPF32[$3 + 220 >> 2] + HEAPF32[$3 + 212 >> 2])) + Math_fround(Math_fround(HEAPF32[$3 + 236 >> 2] * HEAPF32[$2 + 224 >> 2]) * HEAPF32[$2 + 224 >> 2])));
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 84 | 0, $3 + 116 | 0, $3 + 200 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 60 | 0, $2 + 336 | 0, $2 + 304 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 68 | 0, $2 + 108 | 0, $2 + 60 | 0);
  b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 76 | 0, $2 + 268 | 0, $2 + 68 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 52 | 0, $2 + 76 | 0, $2 + 84 | 0);
  wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 52 | 0, $3 + 132 | 0), 
  HEAPF32[wasm2js_i32$0 + 256 >> 2] = wasm2js_f32$0;
 }
 HEAPF32[$2 + 48 >> 2] = Math_fround(Math_fround(HEAPF32[$3 + 152 >> 2] * HEAPF32[$2 + 256 >> 2]) + HEAPF32[$2 + 260 >> 2]) - HEAPF32[$3 + 148 >> 2];
 HEAPF32[$2 + 44 >> 2] = 0;
 if (HEAPF32[$2 + 220 >> 2] > Math_fround(0)) {
  HEAPF32[$2 + 44 >> 2] = Math_fround(-HEAPF32[$2 + 48 >> 2]) / HEAPF32[$2 + 220 >> 2];
 }
 operator__28float_2c_20b2Vec2_20const__29($2 + 36 | 0, Math_fround(HEAPF32[$3 + 208 >> 2] * HEAPF32[$2 + 44 >> 2]), $2 + 248 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 352 | 0, $2 + 36 | 0);
 HEAPF32[$2 + 348 >> 2] = Math_fround(Math_fround(HEAPF32[$3 + 224 >> 2] * HEAPF32[$2 + 44 >> 2]) * HEAPF32[$2 + 236 >> 2]) + HEAPF32[$2 + 348 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 28 | 0, Math_fround(HEAPF32[$3 + 212 >> 2] * HEAPF32[$2 + 44 >> 2]), $2 + 240 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 336 | 0, $2 + 28 | 0);
 HEAPF32[$2 + 332 >> 2] = Math_fround(Math_fround(HEAPF32[$3 + 228 >> 2] * HEAPF32[$2 + 44 >> 2]) * HEAPF32[$2 + 232 >> 2]) + HEAPF32[$2 + 332 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 20 | 0, Math_fround(HEAPF32[$3 + 216 >> 2] * HEAPF32[$2 + 44 >> 2]), $2 + 248 | 0);
 b2Vec2__operator___28b2Vec2_20const__29_1($2 + 320 | 0, $2 + 20 | 0);
 HEAPF32[$2 + 316 >> 2] = Math_fround(Math_fround(-Math_fround(HEAPF32[$3 + 232 >> 2] * HEAPF32[$2 + 44 >> 2])) * HEAPF32[$2 + 228 >> 2]) + HEAPF32[$2 + 316 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 12 | 0, Math_fround(HEAPF32[$3 + 220 >> 2] * HEAPF32[$2 + 44 >> 2]), $2 + 240 | 0);
 b2Vec2__operator___28b2Vec2_20const__29_1($2 + 304 | 0, $2 + 12 | 0);
 HEAPF32[$2 + 300 >> 2] = Math_fround(Math_fround(-Math_fround(HEAPF32[$3 + 236 >> 2] * HEAPF32[$2 + 44 >> 2])) * HEAPF32[$2 + 224 >> 2]) + HEAPF32[$2 + 300 >> 2];
 $0 = HEAP32[$2 + 356 >> 2];
 $1 = HEAP32[$2 + 352 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 360 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 160 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 360 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 160 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 348 >> 2];
 $1 = HEAP32[$2 + 340 >> 2];
 $0 = HEAP32[$2 + 336 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 360 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 164 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 360 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 164 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 332 >> 2];
 $0 = HEAP32[$2 + 324 >> 2];
 $1 = HEAP32[$2 + 320 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 360 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 168 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 360 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 168 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 316 >> 2];
 $1 = HEAP32[$2 + 308 >> 2];
 $0 = HEAP32[$2 + 304 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 360 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 172 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 360 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 172 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 300 >> 2];
 __stack_pointer = $2 + 368 | 0;
 return HEAPF32[$2 + 264 >> 2] < Math_fround(.004999999888241291) | 0;
}

function b2PrismaticJoint__InitVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 272 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 268 >> 2] = $0;
 HEAP32[$2 + 264 >> 2] = $1;
 $3 = HEAP32[$2 + 268 >> 2];
 HEAP32[$3 + 144 >> 2] = HEAP32[HEAP32[$3 + 48 >> 2] + 8 >> 2];
 HEAP32[$3 + 148 >> 2] = HEAP32[HEAP32[$3 + 52 >> 2] + 8 >> 2];
 $4 = HEAP32[$3 + 48 >> 2];
 $0 = HEAP32[$4 + 28 >> 2];
 $1 = HEAP32[$4 + 32 >> 2];
 HEAP32[$3 + 152 >> 2] = $0;
 HEAP32[$3 + 156 >> 2] = $1;
 $4 = HEAP32[$3 + 52 >> 2];
 $1 = HEAP32[$4 + 28 >> 2];
 $0 = HEAP32[$4 + 32 >> 2];
 HEAP32[$3 + 160 >> 2] = $1;
 HEAP32[$3 + 164 >> 2] = $0;
 HEAPF32[$3 + 168 >> 2] = HEAPF32[HEAP32[$3 + 48 >> 2] + 120 >> 2];
 HEAPF32[$3 + 172 >> 2] = HEAPF32[HEAP32[$3 + 52 >> 2] + 120 >> 2];
 HEAPF32[$3 + 176 >> 2] = HEAPF32[HEAP32[$3 + 48 >> 2] + 128 >> 2];
 HEAPF32[$3 + 180 >> 2] = HEAPF32[HEAP32[$3 + 52 >> 2] + 128 >> 2];
 $4 = HEAP32[HEAP32[$2 + 264 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 144 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 256 >> 2] = $0;
 HEAP32[$2 + 260 >> 2] = $1;
 HEAPF32[$2 + 252 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 264 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 144 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 264 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 144 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 240 >> 2] = $1;
 HEAP32[$2 + 244 >> 2] = $0;
 HEAPF32[$2 + 236 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 264 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 144 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 264 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 148 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 224 >> 2] = $0;
 HEAP32[$2 + 228 >> 2] = $1;
 HEAPF32[$2 + 220 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 264 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 148 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 264 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 148 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 208 >> 2] = $1;
 HEAP32[$2 + 212 >> 2] = $0;
 HEAPF32[$2 + 204 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 264 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 148 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($2 + 196 | 0, HEAPF32[$2 + 252 >> 2]);
 b2Rot__b2Rot_28float_29($2 + 188 | 0, HEAPF32[$2 + 220 >> 2]);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 172 | 0, $3 + 68 | 0, $3 + 152 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 180 | 0, $2 + 196 | 0, $2 + 172 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 156 | 0, $3 + 76 | 0, $3 + 160 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 164 | 0, $2 + 188 | 0, $2 + 156 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 132 | 0, $2 + 224 | 0, $2 + 256 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 140 | 0, $2 + 132 | 0, $2 + 164 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 148 | 0, $2 + 140 | 0, $2 + 180 | 0);
 HEAPF32[$2 + 128 >> 2] = HEAPF32[$3 + 168 >> 2];
 HEAPF32[$2 + 124 >> 2] = HEAPF32[$3 + 172 >> 2];
 HEAPF32[$2 + 120 >> 2] = HEAPF32[$3 + 176 >> 2];
 HEAPF32[$2 + 116 >> 2] = HEAPF32[$3 + 180 >> 2];
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 108 | 0, $2 + 196 | 0, $3 + 84 | 0);
 $1 = HEAP32[$2 + 112 >> 2];
 $0 = HEAP32[$2 + 108 >> 2];
 HEAP32[$3 + 184 >> 2] = $0;
 HEAP32[$3 + 188 >> 2] = $1;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 100 | 0, $2 + 148 | 0, $2 + 180 | 0);
 wasm2js_i32$0 = $3, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 100 | 0, $3 + 184 | 0), 
 HEAPF32[wasm2js_i32$0 + 208 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $3, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 164 | 0, $3 + 184 | 0), 
 HEAPF32[wasm2js_i32$0 + 212 >> 2] = wasm2js_f32$0;
 HEAPF32[$3 + 252 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 116 >> 2] * HEAPF32[$3 + 212 >> 2]) * HEAPF32[$3 + 212 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 120 >> 2] * HEAPF32[$3 + 208 >> 2]) * HEAPF32[$3 + 208 >> 2]) + Math_fround(HEAPF32[$2 + 128 >> 2] + HEAPF32[$2 + 124 >> 2]));
 if (HEAPF32[$3 + 252 >> 2] > Math_fround(0)) {
  HEAPF32[$3 + 252 >> 2] = Math_fround(1) / HEAPF32[$3 + 252 >> 2];
 }
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 92 | 0, $2 + 196 | 0, $3 + 92 | 0);
 $0 = HEAP32[$2 + 96 >> 2];
 $1 = HEAP32[$2 + 92 >> 2];
 HEAP32[$3 + 192 >> 2] = $1;
 HEAP32[$3 + 196 >> 2] = $0;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 84 | 0, $2 + 148 | 0, $2 + 180 | 0);
 wasm2js_i32$0 = $3, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 84 | 0, $3 + 192 | 0), 
 HEAPF32[wasm2js_i32$0 + 200 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $3, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 164 | 0, $3 + 192 | 0), 
 HEAPF32[wasm2js_i32$0 + 204 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 80 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 116 >> 2] * HEAPF32[$3 + 204 >> 2]) * HEAPF32[$3 + 204 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 120 >> 2] * HEAPF32[$3 + 200 >> 2]) * HEAPF32[$3 + 200 >> 2]) + Math_fround(HEAPF32[$2 + 128 >> 2] + HEAPF32[$2 + 124 >> 2]));
 HEAPF32[$2 + 76 >> 2] = Math_fround(HEAPF32[$2 + 120 >> 2] * HEAPF32[$3 + 200 >> 2]) + Math_fround(HEAPF32[$2 + 116 >> 2] * HEAPF32[$3 + 204 >> 2]);
 HEAPF32[$2 + 72 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 120 >> 2] * HEAPF32[$3 + 200 >> 2]) * HEAPF32[$3 + 208 >> 2]) + Math_fround(Math_fround(HEAPF32[$2 + 116 >> 2] * HEAPF32[$3 + 204 >> 2]) * HEAPF32[$3 + 212 >> 2]);
 HEAPF32[$2 + 68 >> 2] = HEAPF32[$2 + 120 >> 2] + HEAPF32[$2 + 116 >> 2];
 if (HEAPF32[$2 + 68 >> 2] == Math_fround(0)) {
  HEAPF32[$2 + 68 >> 2] = 1;
 }
 HEAPF32[$2 + 64 >> 2] = Math_fround(HEAPF32[$2 + 120 >> 2] * HEAPF32[$3 + 208 >> 2]) + Math_fround(HEAPF32[$2 + 116 >> 2] * HEAPF32[$3 + 212 >> 2]);
 HEAPF32[$2 + 60 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 116 >> 2] * HEAPF32[$3 + 212 >> 2]) * HEAPF32[$3 + 212 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 120 >> 2] * HEAPF32[$3 + 208 >> 2]) * HEAPF32[$3 + 208 >> 2]) + Math_fround(HEAPF32[$2 + 128 >> 2] + HEAPF32[$2 + 124 >> 2]));
 b2Vec3__Set_28float_2c_20float_2c_20float_29($3 + 216 | 0, HEAPF32[$2 + 80 >> 2], HEAPF32[$2 + 76 >> 2], HEAPF32[$2 + 72 >> 2]);
 b2Vec3__Set_28float_2c_20float_2c_20float_29($3 + 228 | 0, HEAPF32[$2 + 76 >> 2], HEAPF32[$2 + 68 >> 2], HEAPF32[$2 + 64 >> 2]);
 b2Vec3__Set_28float_2c_20float_2c_20float_29($3 + 240 | 0, HEAPF32[$2 + 72 >> 2], HEAPF32[$2 + 64 >> 2], HEAPF32[$2 + 60 >> 2]);
 label$3: {
  if (HEAP8[$3 + 136 | 0] & 1) {
   wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 184 | 0, $2 + 148 | 0), 
   HEAPF32[wasm2js_i32$0 + 56 >> 2] = wasm2js_f32$0;
   label$5: {
    if (float_20b2Abs_float__28float_29(Math_fround(HEAPF32[$3 + 124 >> 2] - HEAPF32[$3 + 120 >> 2])) < Math_fround(.009999999776482582)) {
     HEAP32[$3 + 140 >> 2] = 3;
     break label$5;
    }
    label$7: {
     if (HEAPF32[$2 + 56 >> 2] <= HEAPF32[$3 + 120 >> 2]) {
      if (HEAP32[$3 + 140 >> 2] != 1) {
       HEAP32[$3 + 140 >> 2] = 1;
       HEAPF32[$3 + 112 >> 2] = 0;
      }
      break label$7;
     }
     label$10: {
      if (HEAPF32[$2 + 56 >> 2] >= HEAPF32[$3 + 124 >> 2]) {
       if (HEAP32[$3 + 140 >> 2] != 2) {
        HEAP32[$3 + 140 >> 2] = 2;
        HEAPF32[$3 + 112 >> 2] = 0;
       }
       break label$10;
      }
      HEAP32[$3 + 140 >> 2] = 0;
      HEAPF32[$3 + 112 >> 2] = 0;
     }
    }
   }
   break label$3;
  }
  HEAP32[$3 + 140 >> 2] = 0;
  HEAPF32[$3 + 112 >> 2] = 0;
 }
 if (!(HEAP8[$3 + 137 | 0] & 1)) {
  HEAPF32[$3 + 116 >> 2] = 0;
 }
 label$14: {
  if (HEAP8[HEAP32[$2 + 264 >> 2] + 20 | 0] & 1) {
   b2Vec3__operator___28float_29($3 + 104 | 0, HEAPF32[HEAP32[$2 + 264 >> 2] + 8 >> 2]);
   HEAPF32[$3 + 116 >> 2] = HEAPF32[$3 + 116 >> 2] * HEAPF32[HEAP32[$2 + 264 >> 2] + 8 >> 2];
   operator__28float_2c_20b2Vec2_20const__29($2 + 40 | 0, HEAPF32[$3 + 104 >> 2], $3 + 192 | 0);
   operator__28float_2c_20b2Vec2_20const__29($2 + 32 | 0, Math_fround(HEAPF32[$3 + 116 >> 2] + HEAPF32[$3 + 112 >> 2]), $3 + 184 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 48 | 0, $2 + 40 | 0, $2 + 32 | 0);
   HEAPF32[$2 + 28 >> 2] = Math_fround(Math_fround(HEAPF32[$3 + 116 >> 2] + HEAPF32[$3 + 112 >> 2]) * HEAPF32[$3 + 208 >> 2]) + Math_fround(Math_fround(HEAPF32[$3 + 104 >> 2] * HEAPF32[$3 + 200 >> 2]) + HEAPF32[$3 + 108 >> 2]);
   HEAPF32[$2 + 24 >> 2] = Math_fround(Math_fround(HEAPF32[$3 + 116 >> 2] + HEAPF32[$3 + 112 >> 2]) * HEAPF32[$3 + 212 >> 2]) + Math_fround(Math_fround(HEAPF32[$3 + 104 >> 2] * HEAPF32[$3 + 204 >> 2]) + HEAPF32[$3 + 108 >> 2]);
   operator__28float_2c_20b2Vec2_20const__29($2 + 16 | 0, HEAPF32[$2 + 128 >> 2], $2 + 48 | 0);
   b2Vec2__operator___28b2Vec2_20const__29_1($2 + 240 | 0, $2 + 16 | 0);
   HEAPF32[$2 + 236 >> 2] = Math_fround(Math_fround(-HEAPF32[$2 + 120 >> 2]) * HEAPF32[$2 + 28 >> 2]) + HEAPF32[$2 + 236 >> 2];
   operator__28float_2c_20b2Vec2_20const__29($2 + 8 | 0, HEAPF32[$2 + 124 >> 2], $2 + 48 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($2 + 208 | 0, $2 + 8 | 0);
   HEAPF32[$2 + 204 >> 2] = Math_fround(HEAPF32[$2 + 116 >> 2] * HEAPF32[$2 + 24 >> 2]) + HEAPF32[$2 + 204 >> 2];
   break label$14;
  }
  b2Vec3__SetZero_28_29($3 + 104 | 0);
  HEAPF32[$3 + 116 >> 2] = 0;
 }
 $1 = HEAP32[$2 + 244 >> 2];
 $0 = HEAP32[$2 + 240 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 264 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 144 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 264 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 144 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 236 >> 2];
 $0 = HEAP32[$2 + 212 >> 2];
 $1 = HEAP32[$2 + 208 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 264 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 148 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 264 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 148 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 204 >> 2];
 __stack_pointer = $2 + 272 | 0;
}

function b2TimeOfImpact_28b2TOIOutput__2c_20b2TOIInput_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 448 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 444 >> 2] = $0;
 HEAP32[$2 + 440 >> 2] = $1;
 b2Timer__b2Timer_28_29($2 + 439 | 0);
 HEAP32[7719] = HEAP32[7719] + 1;
 HEAP32[HEAP32[$2 + 444 >> 2] >> 2] = 0;
 HEAPF32[HEAP32[$2 + 444 >> 2] + 4 >> 2] = HEAPF32[HEAP32[$2 + 440 >> 2] + 128 >> 2];
 HEAP32[$2 + 432 >> 2] = HEAP32[$2 + 440 >> 2];
 HEAP32[$2 + 428 >> 2] = HEAP32[$2 + 440 >> 2] + 28;
 $3 = HEAP32[$2 + 440 >> 2];
 HEAP32[$2 + 424 >> 2] = HEAP32[$3 + 88 >> 2];
 $1 = HEAP32[$3 + 80 >> 2];
 $0 = HEAP32[$3 + 84 >> 2];
 HEAP32[$2 + 416 >> 2] = $1;
 HEAP32[$2 + 420 >> 2] = $0;
 $1 = HEAP32[$3 + 76 >> 2];
 $0 = HEAP32[$3 + 72 >> 2];
 HEAP32[$2 + 408 >> 2] = $0;
 HEAP32[$2 + 412 >> 2] = $1;
 $0 = HEAP32[$3 + 68 >> 2];
 $1 = HEAP32[$3 + 64 >> 2];
 HEAP32[$2 + 400 >> 2] = $1;
 HEAP32[$2 + 404 >> 2] = $0;
 $1 = HEAP32[$3 + 60 >> 2];
 $0 = HEAP32[$3 + 56 >> 2];
 HEAP32[$2 + 392 >> 2] = $0;
 HEAP32[$2 + 396 >> 2] = $1;
 $3 = HEAP32[$2 + 440 >> 2];
 HEAP32[$2 + 384 >> 2] = HEAP32[$3 + 124 >> 2];
 $1 = HEAP32[$3 + 116 >> 2];
 $0 = HEAP32[$3 + 120 >> 2];
 HEAP32[$2 + 376 >> 2] = $1;
 HEAP32[$2 + 380 >> 2] = $0;
 $1 = HEAP32[$3 + 112 >> 2];
 $0 = HEAP32[$3 + 108 >> 2];
 HEAP32[$2 + 368 >> 2] = $0;
 HEAP32[$2 + 372 >> 2] = $1;
 $0 = HEAP32[$3 + 104 >> 2];
 $1 = HEAP32[$3 + 100 >> 2];
 HEAP32[$2 + 360 >> 2] = $1;
 HEAP32[$2 + 364 >> 2] = $0;
 $1 = HEAP32[$3 + 96 >> 2];
 $0 = HEAP32[$3 + 92 >> 2];
 HEAP32[$2 + 352 >> 2] = $0;
 HEAP32[$2 + 356 >> 2] = $1;
 b2Sweep__Normalize_28_29($2 + 392 | 0);
 b2Sweep__Normalize_28_29($2 + 352 | 0);
 HEAPF32[$2 + 348 >> 2] = HEAPF32[HEAP32[$2 + 440 >> 2] + 128 >> 2];
 HEAPF32[$2 + 344 >> 2] = HEAPF32[HEAP32[$2 + 432 >> 2] + 24 >> 2] + HEAPF32[HEAP32[$2 + 428 >> 2] + 24 >> 2];
 wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Max_float__28float_2c_20float_29(Math_fround(.004999999888241291), Math_fround(HEAPF32[$2 + 344 >> 2] + Math_fround(-.014999999664723873))), 
 HEAPF32[wasm2js_i32$0 + 340 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 336 >> 2] = .0012499999720603228;
 if (!(HEAPF32[$2 + 340 >> 2] > HEAPF32[$2 + 336 >> 2])) {
  __assert_fail(9802, 5237, 283, 3275);
  wasm2js_trap();
 }
 HEAPF32[$2 + 332 >> 2] = 0;
 HEAP32[$2 + 328 >> 2] = 20;
 HEAP32[$2 + 324 >> 2] = 0;
 HEAP16[$2 + 316 >> 1] = 0;
 b2DistanceInput__b2DistanceInput_28_29($2 + 220 | 0);
 $3 = HEAP32[$2 + 440 >> 2];
 $1 = HEAP32[$3 >> 2];
 $0 = HEAP32[$3 + 4 >> 2];
 $5 = $1;
 $4 = $2 + 220 | 0;
 $1 = $4;
 HEAP32[$1 >> 2] = $5;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = HEAP32[$3 + 24 >> 2];
 $1 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 16 >> 2];
 $5 = $0;
 $0 = $4;
 HEAP32[$0 + 16 >> 2] = $5;
 HEAP32[$0 + 20 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $3 = $1;
 $1 = $4;
 HEAP32[$1 + 8 >> 2] = $3;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = HEAP32[$2 + 440 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 $1 = HEAP32[$3 + 32 >> 2];
 $5 = $0;
 $4 = $2 + 220 | 0;
 $0 = $4;
 HEAP32[$0 + 28 >> 2] = $5;
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 + 52 >> 2] = HEAP32[$3 + 52 >> 2];
 $0 = HEAP32[$3 + 48 >> 2];
 $1 = HEAP32[$3 + 44 >> 2];
 $5 = $1;
 $1 = $4;
 HEAP32[$1 + 44 >> 2] = $5;
 HEAP32[$1 + 48 >> 2] = $0;
 $1 = HEAP32[$3 + 40 >> 2];
 $0 = HEAP32[$3 + 36 >> 2];
 $3 = $0;
 $0 = $4;
 HEAP32[$0 + 36 >> 2] = $3;
 HEAP32[$0 + 40 >> 2] = $1;
 HEAP8[$2 + 308 | 0] = 0;
 while (1) {
  label$3: {
   b2Transform__b2Transform_28_29($2 + 204 | 0);
   b2Transform__b2Transform_28_29($2 + 188 | 0);
   b2Sweep__GetTransform_28b2Transform__2c_20float_29_20const($2 + 392 | 0, $2 + 204 | 0, HEAPF32[$2 + 332 >> 2]);
   b2Sweep__GetTransform_28b2Transform__2c_20float_29_20const($2 + 352 | 0, $2 + 188 | 0, HEAPF32[$2 + 332 >> 2]);
   $0 = HEAP32[$2 + 208 >> 2];
   $1 = HEAP32[$2 + 204 >> 2];
   $4 = $1;
   $3 = $2 + 220 | 0;
   $1 = $3;
   HEAP32[$1 + 56 >> 2] = $4;
   HEAP32[$1 + 60 >> 2] = $0;
   $1 = HEAP32[$2 + 216 >> 2];
   $0 = HEAP32[$2 + 212 >> 2];
   $4 = $0;
   $0 = $3;
   HEAP32[$0 + 64 >> 2] = $4;
   HEAP32[$0 + 68 >> 2] = $1;
   $0 = HEAP32[$2 + 192 >> 2];
   $1 = HEAP32[$2 + 188 >> 2];
   $4 = $1;
   $3 = $2 + 220 | 0;
   $1 = $3;
   HEAP32[$1 + 72 >> 2] = $4;
   HEAP32[$1 + 76 >> 2] = $0;
   $1 = HEAP32[$2 + 200 >> 2];
   $0 = HEAP32[$2 + 196 >> 2];
   $4 = $0;
   $0 = $3;
   HEAP32[$0 + 80 >> 2] = $4;
   HEAP32[$0 + 84 >> 2] = $1;
   b2DistanceOutput__b2DistanceOutput_28_29($2 + 164 | 0);
   b2Distance_28b2DistanceOutput__2c_20b2SimplexCache__2c_20b2DistanceInput_20const__29($2 + 164 | 0, $2 + 312 | 0, $2 + 220 | 0);
   if (HEAPF32[$2 + 180 >> 2] <= Math_fround(0)) {
    HEAP32[HEAP32[$2 + 444 >> 2] >> 2] = 2;
    HEAPF32[HEAP32[$2 + 444 >> 2] + 4 >> 2] = 0;
    break label$3;
   }
   if (HEAPF32[$2 + 180 >> 2] < Math_fround(HEAPF32[$2 + 340 >> 2] + HEAPF32[$2 + 336 >> 2])) {
    HEAP32[HEAP32[$2 + 444 >> 2] >> 2] = 3;
    HEAPF32[HEAP32[$2 + 444 >> 2] + 4 >> 2] = HEAPF32[$2 + 332 >> 2];
    break label$3;
   }
   b2SeparationFunction__b2SeparationFunction_28_29($2 - -64 | 0);
   b2SeparationFunction__Initialize_28b2SimplexCache_20const__2c_20b2DistanceProxy_20const__2c_20b2Sweep_20const__2c_20b2DistanceProxy_20const__2c_20b2Sweep_20const__2c_20float_29($2 - -64 | 0, $2 + 312 | 0, HEAP32[$2 + 432 >> 2], $2 + 392 | 0, HEAP32[$2 + 428 >> 2], $2 + 352 | 0, HEAPF32[$2 + 332 >> 2]);
   HEAP8[$2 + 63 | 0] = 0;
   HEAPF32[$2 + 56 >> 2] = HEAPF32[$2 + 348 >> 2];
   HEAP32[$2 + 52 >> 2] = 0;
   while (1) {
    label$7: {
     wasm2js_i32$0 = $2, wasm2js_f32$0 = b2SeparationFunction__FindMinSeparation_28int__2c_20int__2c_20float_29_20const($2 - -64 | 0, $2 + 48 | 0, $2 + 44 | 0, HEAPF32[$2 + 56 >> 2]), 
     HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
     if (HEAPF32[$2 + 40 >> 2] > Math_fround(HEAPF32[$2 + 340 >> 2] + HEAPF32[$2 + 336 >> 2])) {
      HEAP32[HEAP32[$2 + 444 >> 2] >> 2] = 4;
      HEAPF32[HEAP32[$2 + 444 >> 2] + 4 >> 2] = HEAPF32[$2 + 348 >> 2];
      HEAP8[$2 + 63 | 0] = 1;
      break label$7;
     }
     if (HEAPF32[$2 + 40 >> 2] > Math_fround(HEAPF32[$2 + 340 >> 2] - HEAPF32[$2 + 336 >> 2])) {
      HEAPF32[$2 + 332 >> 2] = HEAPF32[$2 + 56 >> 2];
      break label$7;
     }
     wasm2js_i32$0 = $2, wasm2js_f32$0 = b2SeparationFunction__Evaluate_28int_2c_20int_2c_20float_29_20const($2 - -64 | 0, HEAP32[$2 + 48 >> 2], HEAP32[$2 + 44 >> 2], HEAPF32[$2 + 332 >> 2]), 
     HEAPF32[wasm2js_i32$0 + 36 >> 2] = wasm2js_f32$0;
     if (HEAPF32[$2 + 36 >> 2] < Math_fround(HEAPF32[$2 + 340 >> 2] - HEAPF32[$2 + 336 >> 2])) {
      HEAP32[HEAP32[$2 + 444 >> 2] >> 2] = 1;
      HEAPF32[HEAP32[$2 + 444 >> 2] + 4 >> 2] = HEAPF32[$2 + 332 >> 2];
      HEAP8[$2 + 63 | 0] = 1;
      break label$7;
     }
     if (HEAPF32[$2 + 36 >> 2] <= Math_fround(HEAPF32[$2 + 340 >> 2] + HEAPF32[$2 + 336 >> 2])) {
      HEAP32[HEAP32[$2 + 444 >> 2] >> 2] = 3;
      HEAPF32[HEAP32[$2 + 444 >> 2] + 4 >> 2] = HEAPF32[$2 + 332 >> 2];
      HEAP8[$2 + 63 | 0] = 1;
      break label$7;
     }
     HEAP32[$2 + 32 >> 2] = 0;
     HEAPF32[$2 + 28 >> 2] = HEAPF32[$2 + 332 >> 2];
     HEAPF32[$2 + 24 >> 2] = HEAPF32[$2 + 56 >> 2];
     while (1) {
      label$13: {
       if (HEAP32[$2 + 32 >> 2] & 1) {
        HEAPF32[$2 + 20 >> 2] = HEAPF32[$2 + 28 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 340 >> 2] - HEAPF32[$2 + 36 >> 2]) * Math_fround(HEAPF32[$2 + 24 >> 2] - HEAPF32[$2 + 28 >> 2])) / Math_fround(HEAPF32[$2 + 40 >> 2] - HEAPF32[$2 + 36 >> 2]));
        break label$13;
       }
       HEAPF32[$2 + 20 >> 2] = Math_fround(HEAPF32[$2 + 28 >> 2] + HEAPF32[$2 + 24 >> 2]) * Math_fround(.5);
      }
      HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] + 1;
      HEAP32[7722] = HEAP32[7722] + 1;
      wasm2js_i32$0 = $2, wasm2js_f32$0 = b2SeparationFunction__Evaluate_28int_2c_20int_2c_20float_29_20const($2 - -64 | 0, HEAP32[$2 + 48 >> 2], HEAP32[$2 + 44 >> 2], HEAPF32[$2 + 20 >> 2]), 
      HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
      label$15: {
       if (float_20b2Abs_float__28float_29(Math_fround(HEAPF32[$2 + 16 >> 2] - HEAPF32[$2 + 340 >> 2])) < HEAPF32[$2 + 336 >> 2]) {
        HEAPF32[$2 + 56 >> 2] = HEAPF32[$2 + 20 >> 2];
        break label$15;
       }
       label$17: {
        if (HEAPF32[$2 + 16 >> 2] > HEAPF32[$2 + 340 >> 2]) {
         HEAPF32[$2 + 28 >> 2] = HEAPF32[$2 + 20 >> 2];
         HEAPF32[$2 + 36 >> 2] = HEAPF32[$2 + 16 >> 2];
         break label$17;
        }
        HEAPF32[$2 + 24 >> 2] = HEAPF32[$2 + 20 >> 2];
        HEAPF32[$2 + 40 >> 2] = HEAPF32[$2 + 16 >> 2];
       }
       if (HEAP32[$2 + 32 >> 2] == 50) {
        break label$15;
       }
       continue;
      }
      break;
     }
     wasm2js_i32$0 = 30892, wasm2js_i32$1 = int_20b2Max_int__28int_2c_20int_29(HEAP32[7723], HEAP32[$2 + 32 >> 2]), 
     HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     HEAP32[$2 + 52 >> 2] = HEAP32[$2 + 52 >> 2] + 1;
     if (HEAP32[$2 + 52 >> 2] != 8) {
      continue;
     }
    }
    break;
   }
   HEAP32[$2 + 324 >> 2] = HEAP32[$2 + 324 >> 2] + 1;
   HEAP32[7720] = HEAP32[7720] + 1;
   if (HEAP8[$2 + 63 | 0] & 1) {
    break label$3;
   }
   if (HEAP32[$2 + 324 >> 2] != 20) {
    continue;
   }
   HEAP32[HEAP32[$2 + 444 >> 2] >> 2] = 1;
   HEAPF32[HEAP32[$2 + 444 >> 2] + 4 >> 2] = HEAPF32[$2 + 332 >> 2];
  }
  break;
 }
 wasm2js_i32$0 = 30884, wasm2js_i32$1 = int_20b2Max_int__28int_2c_20int_29(HEAP32[7721], HEAP32[$2 + 324 >> 2]), 
 HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Timer__GetMilliseconds_28_29_20const($2 + 439 | 0), 
 HEAPF32[wasm2js_i32$0 + 12 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = 30872, wasm2js_f32$0 = float_20b2Max_float__28float_2c_20float_29(HEAPF32[7718], HEAPF32[$2 + 12 >> 2]), 
 HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
 HEAPF32[7717] = HEAPF32[7717] + HEAPF32[$2 + 12 >> 2];
 __stack_pointer = $2 + 448 | 0;
}

function b2World__DebugDraw_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 288 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 284 >> 2] = $0;
 $3 = HEAP32[$1 + 284 >> 2];
 label$1: {
  if (!HEAP32[$3 + 102980 >> 2]) {
   break label$1;
  }
  wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Draw__GetFlags_28_29_20const(HEAP32[$3 + 102980 >> 2]), 
  HEAP32[wasm2js_i32$0 + 280 >> 2] = wasm2js_i32$1;
  if (HEAP32[$1 + 280 >> 2] & 1) {
   HEAP32[$1 + 276 >> 2] = HEAP32[$3 + 102948 >> 2];
   while (1) {
    if (HEAP32[$1 + 276 >> 2]) {
     wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Body__GetTransform_28_29_20const(HEAP32[$1 + 276 >> 2]), 
     HEAP32[wasm2js_i32$0 + 272 >> 2] = wasm2js_i32$1;
     wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Body__GetFixtureList_28_29(HEAP32[$1 + 276 >> 2]), 
     HEAP32[wasm2js_i32$0 + 268 >> 2] = wasm2js_i32$1;
     while (1) {
      if (HEAP32[$1 + 268 >> 2]) {
       label$7: {
        if (!((b2Body__GetType_28_29_20const(HEAP32[$1 + 276 >> 2]) | 0) != 2 | HEAPF32[HEAP32[$1 + 276 >> 2] + 116 >> 2] != Math_fround(0))) {
         $0 = HEAP32[$1 + 268 >> 2];
         $2 = HEAP32[$1 + 272 >> 2];
         b2Color__b2Color_28float_2c_20float_2c_20float_2c_20float_29($1 + 252 | 0, Math_fround(1), Math_fround(0), Math_fround(0), Math_fround(1));
         b2World__DrawShape_28b2Fixture__2c_20b2Transform_20const__2c_20b2Color_20const__29($3, $0, $2, $1 + 252 | 0);
         break label$7;
        }
        label$9: {
         if (!(b2Body__IsEnabled_28_29_20const(HEAP32[$1 + 276 >> 2]) & 1)) {
          $0 = HEAP32[$1 + 268 >> 2];
          $2 = HEAP32[$1 + 272 >> 2];
          b2Color__b2Color_28float_2c_20float_2c_20float_2c_20float_29($1 + 236 | 0, Math_fround(.5), Math_fround(.5), Math_fround(.30000001192092896), Math_fround(1));
          b2World__DrawShape_28b2Fixture__2c_20b2Transform_20const__2c_20b2Color_20const__29($3, $0, $2, $1 + 236 | 0);
          break label$9;
         }
         label$11: {
          if (!b2Body__GetType_28_29_20const(HEAP32[$1 + 276 >> 2])) {
           $0 = HEAP32[$1 + 268 >> 2];
           $2 = HEAP32[$1 + 272 >> 2];
           b2Color__b2Color_28float_2c_20float_2c_20float_2c_20float_29($1 + 220 | 0, Math_fround(.5), Math_fround(.8999999761581421), Math_fround(.5), Math_fround(1));
           b2World__DrawShape_28b2Fixture__2c_20b2Transform_20const__2c_20b2Color_20const__29($3, $0, $2, $1 + 220 | 0);
           break label$11;
          }
          label$13: {
           if ((b2Body__GetType_28_29_20const(HEAP32[$1 + 276 >> 2]) | 0) == 1) {
            $0 = HEAP32[$1 + 268 >> 2];
            $2 = HEAP32[$1 + 272 >> 2];
            b2Color__b2Color_28float_2c_20float_2c_20float_2c_20float_29($1 + 204 | 0, Math_fround(.5), Math_fround(.5), Math_fround(.8999999761581421), Math_fround(1));
            b2World__DrawShape_28b2Fixture__2c_20b2Transform_20const__2c_20b2Color_20const__29($3, $0, $2, $1 + 204 | 0);
            break label$13;
           }
           label$15: {
            if (!(b2Body__IsAwake_28_29_20const(HEAP32[$1 + 276 >> 2]) & 1)) {
             $0 = HEAP32[$1 + 268 >> 2];
             $2 = HEAP32[$1 + 272 >> 2];
             b2Color__b2Color_28float_2c_20float_2c_20float_2c_20float_29($1 + 188 | 0, Math_fround(.6000000238418579), Math_fround(.6000000238418579), Math_fround(.6000000238418579), Math_fround(1));
             b2World__DrawShape_28b2Fixture__2c_20b2Transform_20const__2c_20b2Color_20const__29($3, $0, $2, $1 + 188 | 0);
             break label$15;
            }
            $0 = HEAP32[$1 + 268 >> 2];
            $2 = HEAP32[$1 + 272 >> 2];
            b2Color__b2Color_28float_2c_20float_2c_20float_2c_20float_29($1 + 172 | 0, Math_fround(.8999999761581421), Math_fround(.699999988079071), Math_fround(.699999988079071), Math_fround(1));
            b2World__DrawShape_28b2Fixture__2c_20b2Transform_20const__2c_20b2Color_20const__29($3, $0, $2, $1 + 172 | 0);
           }
          }
         }
        }
       }
       wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Fixture__GetNext_28_29(HEAP32[$1 + 268 >> 2]), 
       HEAP32[wasm2js_i32$0 + 268 >> 2] = wasm2js_i32$1;
       continue;
      }
      break;
     }
     wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Body__GetNext_28_29(HEAP32[$1 + 276 >> 2]), 
     HEAP32[wasm2js_i32$0 + 276 >> 2] = wasm2js_i32$1;
     continue;
    }
    break;
   }
  }
  if (HEAP32[$1 + 280 >> 2] & 2) {
   HEAP32[$1 + 168 >> 2] = HEAP32[$3 + 102952 >> 2];
   while (1) {
    if (HEAP32[$1 + 168 >> 2]) {
     b2World__DrawJoint_28b2Joint__29($3, HEAP32[$1 + 168 >> 2]);
     wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Joint__GetNext_28_29(HEAP32[$1 + 168 >> 2]), 
     HEAP32[wasm2js_i32$0 + 168 >> 2] = wasm2js_i32$1;
     continue;
    }
    break;
   }
  }
  if (HEAP32[$1 + 280 >> 2] & 8) {
   b2Color__b2Color_28float_2c_20float_2c_20float_2c_20float_29($1 + 152 | 0, Math_fround(.30000001192092896), Math_fround(.8999999761581421), Math_fround(.8999999761581421), Math_fround(1));
   HEAP32[$1 + 148 >> 2] = HEAP32[$3 + 102928 >> 2];
   while (1) {
    if (HEAP32[$1 + 148 >> 2]) {
     wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetFixtureA_28_29(HEAP32[$1 + 148 >> 2]), 
     HEAP32[wasm2js_i32$0 + 144 >> 2] = wasm2js_i32$1;
     wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetFixtureB_28_29(HEAP32[$1 + 148 >> 2]), 
     HEAP32[wasm2js_i32$0 + 140 >> 2] = wasm2js_i32$1;
     wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetChildIndexA_28_29_20const(HEAP32[$1 + 148 >> 2]), 
     HEAP32[wasm2js_i32$0 + 136 >> 2] = wasm2js_i32$1;
     wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetChildIndexB_28_29_20const(HEAP32[$1 + 148 >> 2]), 
     HEAP32[wasm2js_i32$0 + 132 >> 2] = wasm2js_i32$1;
     b2AABB__GetCenter_28_29_20const($1 + 124 | 0, b2Fixture__GetAABB_28int_29_20const(HEAP32[$1 + 144 >> 2], HEAP32[$1 + 136 >> 2]));
     b2AABB__GetCenter_28_29_20const($1 + 116 | 0, b2Fixture__GetAABB_28int_29_20const(HEAP32[$1 + 140 >> 2], HEAP32[$1 + 132 >> 2]));
     $0 = HEAP32[$3 + 102980 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1 + 124 | 0, $1 + 116 | 0, $1 + 152 | 0);
     wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetNext_28_29(HEAP32[$1 + 148 >> 2]), 
     HEAP32[wasm2js_i32$0 + 148 >> 2] = wasm2js_i32$1;
     continue;
    }
    break;
   }
  }
  if (HEAP32[$1 + 280 >> 2] & 4) {
   b2Color__b2Color_28float_2c_20float_2c_20float_2c_20float_29($1 + 100 | 0, Math_fround(.8999999761581421), Math_fround(.30000001192092896), Math_fround(.8999999761581421), Math_fround(1));
   HEAP32[$1 + 96 >> 2] = $3 + 102868;
   HEAP32[$1 + 92 >> 2] = HEAP32[$3 + 102948 >> 2];
   while (1) {
    if (HEAP32[$1 + 92 >> 2]) {
     if (b2Body__IsEnabled_28_29_20const(HEAP32[$1 + 92 >> 2]) & 1) {
      wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Body__GetFixtureList_28_29(HEAP32[$1 + 92 >> 2]), 
      HEAP32[wasm2js_i32$0 + 88 >> 2] = wasm2js_i32$1;
      while (1) {
       if (HEAP32[$1 + 88 >> 2]) {
        HEAP32[$1 + 84 >> 2] = 0;
        while (1) {
         if (HEAP32[$1 + 84 >> 2] < HEAP32[HEAP32[$1 + 88 >> 2] + 28 >> 2]) {
          HEAP32[$1 + 80 >> 2] = HEAP32[HEAP32[$1 + 88 >> 2] + 24 >> 2] + Math_imul(HEAP32[$1 + 84 >> 2], 28);
          $4 = b2BroadPhase__GetFatAABB_28int_29_20const(HEAP32[$1 + 96 >> 2], HEAP32[HEAP32[$1 + 80 >> 2] + 24 >> 2]);
          $2 = HEAP32[$4 + 8 >> 2];
          $0 = HEAP32[$4 + 12 >> 2];
          HEAP32[$1 + 72 >> 2] = $2;
          HEAP32[$1 + 76 >> 2] = $0;
          $2 = HEAP32[$4 + 4 >> 2];
          $0 = HEAP32[$4 >> 2];
          HEAP32[$1 + 64 >> 2] = $0;
          HEAP32[$1 + 68 >> 2] = $2;
          $0 = $1 + 32 | 0;
          $2 = $0 + 32 | 0;
          while (1) {
           b2Vec2__b2Vec2_28_29($0);
           $0 = $0 + 8 | 0;
           if (($2 | 0) != ($0 | 0)) {
            continue;
           }
           break;
          }
          b2Vec2__Set_28float_2c_20float_29($1 + 32 | 0, HEAPF32[$1 + 64 >> 2], HEAPF32[$1 + 68 >> 2]);
          b2Vec2__Set_28float_2c_20float_29($1 + 40 | 0, HEAPF32[$1 + 72 >> 2], HEAPF32[$1 + 68 >> 2]);
          b2Vec2__Set_28float_2c_20float_29($1 + 48 | 0, HEAPF32[$1 + 72 >> 2], HEAPF32[$1 + 76 >> 2]);
          b2Vec2__Set_28float_2c_20float_29($1 + 56 | 0, HEAPF32[$1 + 64 >> 2], HEAPF32[$1 + 76 >> 2]);
          $0 = HEAP32[$3 + 102980 >> 2];
          FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1 + 32 | 0, 4, $1 + 100 | 0);
          HEAP32[$1 + 84 >> 2] = HEAP32[$1 + 84 >> 2] + 1;
          continue;
         }
         break;
        }
        wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Fixture__GetNext_28_29(HEAP32[$1 + 88 >> 2]), 
        HEAP32[wasm2js_i32$0 + 88 >> 2] = wasm2js_i32$1;
        continue;
       }
       break;
      }
     }
     wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Body__GetNext_28_29(HEAP32[$1 + 92 >> 2]), 
     HEAP32[wasm2js_i32$0 + 92 >> 2] = wasm2js_i32$1;
     continue;
    }
    break;
   }
  }
  if (!(HEAP32[$1 + 280 >> 2] & 16)) {
   break label$1;
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$3 + 102948 >> 2];
  while (1) {
   if (HEAP32[$1 + 28 >> 2]) {
    $4 = b2Body__GetTransform_28_29_20const(HEAP32[$1 + 28 >> 2]);
    $2 = HEAP32[$4 + 8 >> 2];
    $0 = HEAP32[$4 + 12 >> 2];
    HEAP32[$1 + 16 >> 2] = $2;
    HEAP32[$1 + 20 >> 2] = $0;
    $2 = HEAP32[$4 + 4 >> 2];
    $0 = HEAP32[$4 >> 2];
    HEAP32[$1 + 8 >> 2] = $0;
    HEAP32[$1 + 12 >> 2] = $2;
    $4 = b2Body__GetWorldCenter_28_29_20const(HEAP32[$1 + 28 >> 2]);
    $2 = HEAP32[$4 >> 2];
    $0 = HEAP32[$4 + 4 >> 2];
    $4 = $2;
    $2 = $1 + 8 | 0;
    HEAP32[$2 >> 2] = $4;
    HEAP32[$2 + 4 >> 2] = $0;
    $0 = HEAP32[$3 + 102980 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1 + 8 | 0);
    wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Body__GetNext_28_29(HEAP32[$1 + 28 >> 2]), 
    HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
    continue;
   }
   break;
  }
 }
 __stack_pointer = $1 + 288 | 0;
}

function __rem_pio2_large($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 $8 = __stack_pointer - 560 | 0;
 __stack_pointer = $8;
 $6 = ($2 - 3 | 0) / 24 | 0;
 $18 = ($6 | 0) > 0 ? $6 : 0;
 $12 = Math_imul($18, -24) + $2 | 0;
 $13 = HEAP32[($4 << 2) + 20608 >> 2];
 $15 = $3 - 1 | 0;
 if (($13 + $15 | 0) >= 0) {
  $7 = $3 + $13 | 0;
  $2 = $18 - $15 | 0;
  $6 = 0;
  while (1) {
   $5 = ($2 | 0) < 0 ? 0 : +HEAP32[($2 << 2) + 20624 >> 2];
   HEAPF64[($8 + 320 | 0) + ($6 << 3) >> 3] = $5;
   $2 = $2 + 1 | 0;
   $6 = $6 + 1 | 0;
   if (($6 | 0) != ($7 | 0)) {
    continue;
   }
   break;
  }
 }
 $17 = $12 - 24 | 0;
 $7 = 0;
 $10 = ($13 | 0) > 0 ? $13 : 0;
 $11 = ($3 | 0) <= 0;
 while (1) {
  label$6: {
   if ($11) {
    $5 = 0;
    break label$6;
   }
   $6 = $7 + $15 | 0;
   $2 = 0;
   $5 = 0;
   while (1) {
    $5 = HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($8 + 320 | 0) + ($6 - $2 << 3) >> 3] + $5;
    $2 = $2 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  HEAPF64[($7 << 3) + $8 >> 3] = $5;
  $2 = ($7 | 0) == ($10 | 0);
  $7 = $7 + 1 | 0;
  if (!$2) {
   continue;
  }
  break;
 }
 $23 = 47 - $12 | 0;
 $21 = 48 - $12 | 0;
 $24 = $12 - 25 | 0;
 $7 = $13;
 label$9: {
  while (1) {
   $5 = HEAPF64[($7 << 3) + $8 >> 3];
   $2 = 0;
   $6 = $7;
   $15 = ($7 | 0) <= 0;
   if (!$15) {
    while (1) {
     $10 = ($8 + 480 | 0) + ($2 << 2) | 0;
     $9 = $5 * 5.960464477539063e-8;
     label$14: {
      if (Math_abs($9) < 2147483648) {
       $11 = ~~$9;
       break label$14;
      }
      $11 = -2147483648;
     }
     $9 = +($11 | 0);
     $5 = $9 * -16777216 + $5;
     label$13: {
      if (Math_abs($5) < 2147483648) {
       $11 = ~~$5;
       break label$13;
      }
      $11 = -2147483648;
     }
     HEAP32[$10 >> 2] = $11;
     $6 = $6 - 1 | 0;
     $5 = HEAPF64[($6 << 3) + $8 >> 3] + $9;
     $2 = $2 + 1 | 0;
     if (($7 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
   }
   $5 = scalbn($5, $17);
   $5 = $5 + floor($5 * .125) * -8;
   label$17: {
    if (Math_abs($5) < 2147483648) {
     $16 = ~~$5;
     break label$17;
    }
    $16 = -2147483648;
   }
   $5 = $5 - +($16 | 0);
   label$19: {
    label$20: {
     label$21: {
      $22 = ($17 | 0) <= 0;
      label$22: {
       if (!$22) {
        $6 = ($7 << 2) + $8 | 0;
        $2 = $6 + 476 | 0;
        $11 = $2;
        $2 = HEAP32[$6 + 476 >> 2];
        $6 = $2;
        $2 = $2 >> $21;
        $6 = $6 - ($2 << $21) | 0;
        HEAP32[$11 >> 2] = $6;
        $16 = $2 + $16 | 0;
        $14 = $6 >> $23;
        break label$22;
       }
       if ($17) {
        break label$21;
       }
       $14 = HEAP32[(($7 << 2) + $8 | 0) + 476 >> 2] >> 23;
      }
      if (($14 | 0) <= 0) {
       break label$19;
      }
      break label$20;
     }
     $14 = 2;
     if ($5 >= .5) {
      break label$20;
     }
     $14 = 0;
     break label$19;
    }
    $2 = 0;
    $11 = 0;
    if (!$15) {
     while (1) {
      $15 = ($8 + 480 | 0) + ($2 << 2) | 0;
      $6 = HEAP32[$15 >> 2];
      $10 = 16777215;
      label$26: {
       label$27: {
        if ($11) {
         break label$27;
        }
        $10 = 16777216;
        if ($6) {
         break label$27;
        }
        $11 = 0;
        break label$26;
       }
       HEAP32[$15 >> 2] = $10 - $6;
       $11 = 1;
      }
      $2 = $2 + 1 | 0;
      if (($7 | 0) != ($2 | 0)) {
       continue;
      }
      break;
     }
    }
    label$28: {
     if ($22) {
      break label$28;
     }
     $2 = 8388607;
     label$29: {
      switch ($24 | 0) {
      case 1:
       $2 = 4194303;
       break;

      case 0:
       break label$29;

      default:
       break label$28;
      }
     }
     $10 = ($7 << 2) + $8 | 0;
     $6 = $10 + 476 | 0;
     HEAP32[$6 >> 2] = HEAP32[$10 + 476 >> 2] & $2;
    }
    $16 = $16 + 1 | 0;
    if (($14 | 0) != 2) {
     break label$19;
    }
    $5 = 1 - $5;
    $14 = 2;
    if (!$11) {
     break label$19;
    }
    $5 = $5 - scalbn(1, $17);
   }
   if ($5 == 0) {
    $6 = 0;
    label$32: {
     $2 = $7;
     if (($13 | 0) >= ($2 | 0)) {
      break label$32;
     }
     while (1) {
      $2 = $2 - 1 | 0;
      $6 = HEAP32[($8 + 480 | 0) + ($2 << 2) >> 2] | $6;
      if (($2 | 0) > ($13 | 0)) {
       continue;
      }
      break;
     }
     if (!$6) {
      break label$32;
     }
     $12 = $17;
     while (1) {
      $12 = $12 - 24 | 0;
      $7 = $7 - 1 | 0;
      if (!HEAP32[($8 + 480 | 0) + ($7 << 2) >> 2]) {
       continue;
      }
      break;
     }
     break label$9;
    }
    $2 = 1;
    while (1) {
     $6 = $2;
     $2 = $2 + 1 | 0;
     if (!HEAP32[($8 + 480 | 0) + ($13 - $6 << 2) >> 2]) {
      continue;
     }
     break;
    }
    $10 = $7 + $6 | 0;
    while (1) {
     $6 = $3 + $7 | 0;
     $7 = $7 + 1 | 0;
     HEAPF64[($8 + 320 | 0) + ($6 << 3) >> 3] = HEAP32[($18 + $7 << 2) + 20624 >> 2];
     $2 = 0;
     $5 = 0;
     if (($3 | 0) > 0) {
      while (1) {
       $5 = HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($8 + 320 | 0) + ($6 - $2 << 3) >> 3] + $5;
       $2 = $2 + 1 | 0;
       if (($3 | 0) != ($2 | 0)) {
        continue;
       }
       break;
      }
     }
     HEAPF64[($7 << 3) + $8 >> 3] = $5;
     if (($7 | 0) < ($10 | 0)) {
      continue;
     }
     break;
    }
    $7 = $10;
    continue;
   }
   break;
  }
  $5 = scalbn($5, 24 - $12 | 0);
  label$39: {
   if ($5 >= 16777216) {
    $3 = $7 << 2;
    $3 = $3 + ($8 + 480 | 0) | 0;
    $9 = $5 * 5.960464477539063e-8;
    label$42: {
     if (Math_abs($9) < 2147483648) {
      $2 = ~~$9;
      break label$42;
     }
     $2 = -2147483648;
    }
    $5 = +($2 | 0) * -16777216 + $5;
    label$41: {
     if (Math_abs($5) < 2147483648) {
      $6 = ~~$5;
      break label$41;
     }
     $6 = -2147483648;
    }
    HEAP32[$3 >> 2] = $6;
    $7 = $7 + 1 | 0;
    break label$39;
   }
   if (Math_abs($5) < 2147483648) {
    $2 = ~~$5;
   } else {
    $2 = -2147483648;
   }
   $12 = $17;
  }
  HEAP32[($8 + 480 | 0) + ($7 << 2) >> 2] = $2;
 }
 $5 = scalbn(1, $12);
 label$47: {
  if (($7 | 0) < 0) {
   break label$47;
  }
  $3 = $7;
  while (1) {
   $2 = $3;
   HEAPF64[($2 << 3) + $8 >> 3] = $5 * +HEAP32[($8 + 480 | 0) + ($2 << 2) >> 2];
   $3 = $2 - 1 | 0;
   $5 = $5 * 5.960464477539063e-8;
   if ($2) {
    continue;
   }
   break;
  }
  if (($7 | 0) < 0) {
   break label$47;
  }
  $6 = $7;
  while (1) {
   $5 = 0;
   $2 = 0;
   $10 = $7 - $6 | 0;
   $0 = ($10 | 0) > ($13 | 0) ? $13 : $10;
   if (($0 | 0) >= 0) {
    while (1) {
     $5 = HEAPF64[($2 << 3) + 23392 >> 3] * HEAPF64[($2 + $6 << 3) + $8 >> 3] + $5;
     $3 = ($0 | 0) != ($2 | 0);
     $2 = $2 + 1 | 0;
     if ($3) {
      continue;
     }
     break;
    }
   }
   HEAPF64[($8 + 160 | 0) + ($10 << 3) >> 3] = $5;
   $2 = ($6 | 0) > 0;
   $6 = $6 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 label$52: {
  label$53: {
   label$54: {
    switch ($4 | 0) {
    case 3:
     label$57: {
      if (($7 | 0) <= 0) {
       break label$57;
      }
      $5 = HEAPF64[($8 + 160 | 0) + ($7 << 3) >> 3];
      $2 = $7;
      while (1) {
       $3 = $2 - 1 | 0;
       $6 = ($8 + 160 | 0) + ($3 << 3) | 0;
       $9 = HEAPF64[$6 >> 3];
       $19 = $9;
       $9 = $9 + $5;
       HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3] = $5 + ($19 - $9);
       HEAPF64[$6 >> 3] = $9;
       $6 = $2 >>> 0 > 1;
       $5 = $9;
       $2 = $3;
       if ($6) {
        continue;
       }
       break;
      }
      if (($7 | 0) < 2) {
       break label$57;
      }
      $5 = HEAPF64[($8 + 160 | 0) + ($7 << 3) >> 3];
      $2 = $7;
      while (1) {
       $3 = $2 - 1 | 0;
       $6 = ($8 + 160 | 0) + ($3 << 3) | 0;
       $9 = HEAPF64[$6 >> 3];
       $19 = $9;
       $9 = $9 + $5;
       HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3] = $5 + ($19 - $9);
       HEAPF64[$6 >> 3] = $9;
       $6 = $2 >>> 0 > 2;
       $5 = $9;
       $2 = $3;
       if ($6) {
        continue;
       }
       break;
      }
      if (($7 | 0) <= 1) {
       break label$57;
      }
      while (1) {
       $20 = $20 + HEAPF64[($8 + 160 | 0) + ($7 << 3) >> 3];
       $2 = ($7 | 0) > 2;
       $7 = $7 - 1 | 0;
       if ($2) {
        continue;
       }
       break;
      }
     }
     $5 = HEAPF64[$8 + 160 >> 3];
     if ($14) {
      break label$53;
     }
     HEAPF64[$1 >> 3] = $5;
     $5 = HEAPF64[$8 + 168 >> 3];
     HEAPF64[$1 + 16 >> 3] = $20;
     HEAPF64[$1 + 8 >> 3] = $5;
     break label$52;

    case 0:
     $5 = 0;
     if (($7 | 0) >= 0) {
      while (1) {
       $2 = $7;
       $7 = $2 - 1 | 0;
       $5 = $5 + HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3];
       if ($2) {
        continue;
       }
       break;
      }
     }
     HEAPF64[$1 >> 3] = $14 ? -$5 : $5;
     break label$52;

    case 1:
    case 2:
     break label$54;

    default:
     break label$52;
    }
   }
   $5 = 0;
   if (($7 | 0) >= 0) {
    $3 = $7;
    while (1) {
     $2 = $3;
     $3 = $2 - 1 | 0;
     $5 = $5 + HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3];
     if ($2) {
      continue;
     }
     break;
    }
   }
   HEAPF64[$1 >> 3] = $14 ? -$5 : $5;
   $5 = HEAPF64[$8 + 160 >> 3] - $5;
   $2 = 1;
   if (($7 | 0) > 0) {
    while (1) {
     $5 = $5 + HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3];
     $3 = ($2 | 0) != ($7 | 0);
     $2 = $2 + 1 | 0;
     if ($3) {
      continue;
     }
     break;
    }
   }
   HEAPF64[$1 + 8 >> 3] = $14 ? -$5 : $5;
   break label$52;
  }
  HEAPF64[$1 >> 3] = -$5;
  $5 = HEAPF64[$8 + 168 >> 3];
  HEAPF64[$1 + 16 >> 3] = -$20;
  HEAPF64[$1 + 8 >> 3] = -$5;
 }
 __stack_pointer = $8 + 560 | 0;
 return $16 & 7;
}

function b2WheelJoint__InitVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 272 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 268 >> 2] = $0;
 HEAP32[$2 + 264 >> 2] = $1;
 $3 = HEAP32[$2 + 268 >> 2];
 HEAP32[$3 + 132 >> 2] = HEAP32[HEAP32[$3 + 48 >> 2] + 8 >> 2];
 HEAP32[$3 + 136 >> 2] = HEAP32[HEAP32[$3 + 52 >> 2] + 8 >> 2];
 $4 = HEAP32[$3 + 48 >> 2];
 $0 = HEAP32[$4 + 28 >> 2];
 $1 = HEAP32[$4 + 32 >> 2];
 HEAP32[$3 + 140 >> 2] = $0;
 HEAP32[$3 + 144 >> 2] = $1;
 $4 = HEAP32[$3 + 52 >> 2];
 $1 = HEAP32[$4 + 28 >> 2];
 $0 = HEAP32[$4 + 32 >> 2];
 HEAP32[$3 + 148 >> 2] = $1;
 HEAP32[$3 + 152 >> 2] = $0;
 HEAPF32[$3 + 156 >> 2] = HEAPF32[HEAP32[$3 + 48 >> 2] + 120 >> 2];
 HEAPF32[$3 + 160 >> 2] = HEAPF32[HEAP32[$3 + 52 >> 2] + 120 >> 2];
 HEAPF32[$3 + 164 >> 2] = HEAPF32[HEAP32[$3 + 48 >> 2] + 128 >> 2];
 HEAPF32[$3 + 168 >> 2] = HEAPF32[HEAP32[$3 + 52 >> 2] + 128 >> 2];
 HEAPF32[$2 + 260 >> 2] = HEAPF32[$3 + 156 >> 2];
 HEAPF32[$2 + 256 >> 2] = HEAPF32[$3 + 160 >> 2];
 HEAPF32[$2 + 252 >> 2] = HEAPF32[$3 + 164 >> 2];
 HEAPF32[$2 + 248 >> 2] = HEAPF32[$3 + 168 >> 2];
 $4 = HEAP32[HEAP32[$2 + 264 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 240 >> 2] = $0;
 HEAP32[$2 + 244 >> 2] = $1;
 HEAPF32[$2 + 236 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 264 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 264 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 224 >> 2] = $1;
 HEAP32[$2 + 228 >> 2] = $0;
 HEAPF32[$2 + 220 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 264 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 264 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 136 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 208 >> 2] = $0;
 HEAP32[$2 + 212 >> 2] = $1;
 HEAPF32[$2 + 204 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 264 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 136 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 264 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 136 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 192 >> 2] = $1;
 HEAP32[$2 + 196 >> 2] = $0;
 HEAPF32[$2 + 188 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 264 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 136 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($2 + 180 | 0, HEAPF32[$2 + 236 >> 2]);
 b2Rot__b2Rot_28float_29($2 + 172 | 0, HEAPF32[$2 + 204 >> 2]);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 156 | 0, $3 + 76 | 0, $3 + 140 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 164 | 0, $2 + 180 | 0, $2 + 156 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 140 | 0, $3 + 84 | 0, $3 + 148 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 148 | 0, $2 + 172 | 0, $2 + 140 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 116 | 0, $2 + 208 | 0, $2 + 148 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 124 | 0, $2 + 116 | 0, $2 + 240 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 132 | 0, $2 + 124 | 0, $2 + 164 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 108 | 0, $2 + 180 | 0, $3 + 100 | 0);
 $1 = HEAP32[$2 + 112 >> 2];
 $0 = HEAP32[$2 + 108 >> 2];
 HEAP32[$3 + 180 >> 2] = $0;
 HEAP32[$3 + 184 >> 2] = $1;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 100 | 0, $2 + 132 | 0, $2 + 164 | 0);
 wasm2js_i32$0 = $3, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 100 | 0, $3 + 180 | 0), 
 HEAPF32[wasm2js_i32$0 + 196 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $3, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 148 | 0, $3 + 180 | 0), 
 HEAPF32[wasm2js_i32$0 + 200 >> 2] = wasm2js_f32$0;
 HEAPF32[$3 + 204 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 248 >> 2] * HEAPF32[$3 + 200 >> 2]) * HEAPF32[$3 + 200 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 252 >> 2] * HEAPF32[$3 + 196 >> 2]) * HEAPF32[$3 + 196 >> 2]) + Math_fround(HEAPF32[$2 + 260 >> 2] + HEAPF32[$2 + 256 >> 2]));
 if (HEAPF32[$3 + 204 >> 2] > Math_fround(0)) {
  HEAPF32[$3 + 204 >> 2] = Math_fround(1) / HEAPF32[$3 + 204 >> 2];
 }
 HEAPF32[$3 + 212 >> 2] = 0;
 HEAPF32[$3 + 216 >> 2] = 0;
 HEAPF32[$3 + 220 >> 2] = 0;
 label$2: {
  if (HEAPF32[$3 + 68 >> 2] > Math_fround(0)) {
   b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 92 | 0, $2 + 180 | 0, $3 + 92 | 0);
   $0 = HEAP32[$2 + 96 >> 2];
   $1 = HEAP32[$2 + 92 >> 2];
   HEAP32[$3 + 172 >> 2] = $1;
   HEAP32[$3 + 176 >> 2] = $0;
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 84 | 0, $2 + 132 | 0, $2 + 164 | 0);
   wasm2js_i32$0 = $3, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 84 | 0, $3 + 172 | 0), 
   HEAPF32[wasm2js_i32$0 + 188 >> 2] = wasm2js_f32$0;
   wasm2js_i32$0 = $3, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 148 | 0, $3 + 172 | 0), 
   HEAPF32[wasm2js_i32$0 + 192 >> 2] = wasm2js_f32$0;
   HEAPF32[$2 + 80 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 248 >> 2] * HEAPF32[$3 + 192 >> 2]) * HEAPF32[$3 + 192 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 252 >> 2] * HEAPF32[$3 + 188 >> 2]) * HEAPF32[$3 + 188 >> 2]) + Math_fround(HEAPF32[$2 + 260 >> 2] + HEAPF32[$2 + 256 >> 2]));
   if (HEAPF32[$2 + 80 >> 2] > Math_fround(0)) {
    HEAPF32[$3 + 212 >> 2] = Math_fround(1) / HEAPF32[$2 + 80 >> 2];
    wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 132 | 0, $3 + 172 | 0), 
    HEAPF32[wasm2js_i32$0 + 76 >> 2] = wasm2js_f32$0;
    HEAPF32[$2 + 72 >> 2] = HEAPF32[$3 + 68 >> 2] * Math_fround(6.2831854820251465);
    $5 = HEAPF32[$3 + 212 >> 2];
    HEAPF32[$2 + 68 >> 2] = Math_fround(Math_fround($5 + $5) * HEAPF32[$3 + 72 >> 2]) * HEAPF32[$2 + 72 >> 2];
    HEAPF32[$2 + 64 >> 2] = Math_fround(HEAPF32[$3 + 212 >> 2] * HEAPF32[$2 + 72 >> 2]) * HEAPF32[$2 + 72 >> 2];
    HEAPF32[$2 + 60 >> 2] = HEAPF32[HEAP32[$2 + 264 >> 2] >> 2];
    HEAPF32[$3 + 220 >> 2] = HEAPF32[$2 + 60 >> 2] * Math_fround(Math_fround(HEAPF32[$2 + 60 >> 2] * HEAPF32[$2 + 64 >> 2]) + HEAPF32[$2 + 68 >> 2]);
    if (HEAPF32[$3 + 220 >> 2] > Math_fround(0)) {
     HEAPF32[$3 + 220 >> 2] = Math_fround(1) / HEAPF32[$3 + 220 >> 2];
    }
    HEAPF32[$3 + 216 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 76 >> 2] * HEAPF32[$2 + 60 >> 2]) * HEAPF32[$2 + 64 >> 2]) * HEAPF32[$3 + 220 >> 2];
    HEAPF32[$3 + 212 >> 2] = HEAPF32[$2 + 80 >> 2] + HEAPF32[$3 + 220 >> 2];
    if (HEAPF32[$3 + 212 >> 2] > Math_fround(0)) {
     HEAPF32[$3 + 212 >> 2] = Math_fround(1) / HEAPF32[$3 + 212 >> 2];
    }
   }
   break label$2;
  }
  HEAPF32[$3 + 116 >> 2] = 0;
 }
 label$7: {
  if (HEAP8[$3 + 128 | 0] & 1) {
   HEAPF32[$3 + 208 >> 2] = HEAPF32[$2 + 252 >> 2] + HEAPF32[$2 + 248 >> 2];
   if (HEAPF32[$3 + 208 >> 2] > Math_fround(0)) {
    HEAPF32[$3 + 208 >> 2] = Math_fround(1) / HEAPF32[$3 + 208 >> 2];
   }
   break label$7;
  }
  HEAPF32[$3 + 208 >> 2] = 0;
  HEAPF32[$3 + 112 >> 2] = 0;
 }
 label$10: {
  if (HEAP8[HEAP32[$2 + 264 >> 2] + 20 | 0] & 1) {
   HEAPF32[$3 + 108 >> 2] = HEAPF32[$3 + 108 >> 2] * HEAPF32[HEAP32[$2 + 264 >> 2] + 8 >> 2];
   HEAPF32[$3 + 116 >> 2] = HEAPF32[$3 + 116 >> 2] * HEAPF32[HEAP32[$2 + 264 >> 2] + 8 >> 2];
   HEAPF32[$3 + 112 >> 2] = HEAPF32[$3 + 112 >> 2] * HEAPF32[HEAP32[$2 + 264 >> 2] + 8 >> 2];
   operator__28float_2c_20b2Vec2_20const__29($2 + 44 | 0, HEAPF32[$3 + 108 >> 2], $3 + 180 | 0);
   operator__28float_2c_20b2Vec2_20const__29($2 + 36 | 0, HEAPF32[$3 + 116 >> 2], $3 + 172 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 52 | 0, $2 + 44 | 0, $2 + 36 | 0);
   HEAPF32[$2 + 32 >> 2] = Math_fround(Math_fround(HEAPF32[$3 + 108 >> 2] * HEAPF32[$3 + 196 >> 2]) + Math_fround(HEAPF32[$3 + 116 >> 2] * HEAPF32[$3 + 188 >> 2])) + HEAPF32[$3 + 112 >> 2];
   HEAPF32[$2 + 28 >> 2] = Math_fround(Math_fround(HEAPF32[$3 + 108 >> 2] * HEAPF32[$3 + 200 >> 2]) + Math_fround(HEAPF32[$3 + 116 >> 2] * HEAPF32[$3 + 192 >> 2])) + HEAPF32[$3 + 112 >> 2];
   operator__28float_2c_20b2Vec2_20const__29($2 + 20 | 0, HEAPF32[$3 + 156 >> 2], $2 + 52 | 0);
   b2Vec2__operator___28b2Vec2_20const__29_1($2 + 224 | 0, $2 + 20 | 0);
   HEAPF32[$2 + 220 >> 2] = Math_fround(Math_fround(-HEAPF32[$3 + 164 >> 2]) * HEAPF32[$2 + 32 >> 2]) + HEAPF32[$2 + 220 >> 2];
   operator__28float_2c_20b2Vec2_20const__29($2 + 12 | 0, HEAPF32[$3 + 160 >> 2], $2 + 52 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($2 + 192 | 0, $2 + 12 | 0);
   HEAPF32[$2 + 188 >> 2] = Math_fround(HEAPF32[$3 + 168 >> 2] * HEAPF32[$2 + 28 >> 2]) + HEAPF32[$2 + 188 >> 2];
   break label$10;
  }
  HEAPF32[$3 + 108 >> 2] = 0;
  HEAPF32[$3 + 116 >> 2] = 0;
  HEAPF32[$3 + 112 >> 2] = 0;
 }
 $1 = HEAP32[$2 + 228 >> 2];
 $0 = HEAP32[$2 + 224 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 264 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 264 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 220 >> 2];
 $0 = HEAP32[$2 + 196 >> 2];
 $1 = HEAP32[$2 + 192 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 264 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 136 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 264 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 136 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 188 >> 2];
 __stack_pointer = $2 + 272 | 0;
}

function b2PrismaticJoint__SolveVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 352 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 348 >> 2] = $0;
 HEAP32[$2 + 344 >> 2] = $1;
 $3 = HEAP32[$2 + 348 >> 2];
 $4 = HEAP32[HEAP32[$2 + 344 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 144 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 336 >> 2] = $1;
 HEAP32[$2 + 340 >> 2] = $0;
 HEAPF32[$2 + 332 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 344 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 144 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 344 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 148 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 320 >> 2] = $0;
 HEAP32[$2 + 324 >> 2] = $1;
 HEAPF32[$2 + 316 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 344 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 148 >> 2], 12) | 0) + 8 >> 2];
 HEAPF32[$2 + 312 >> 2] = HEAPF32[$3 + 168 >> 2];
 HEAPF32[$2 + 308 >> 2] = HEAPF32[$3 + 172 >> 2];
 HEAPF32[$2 + 304 >> 2] = HEAPF32[$3 + 176 >> 2];
 HEAPF32[$2 + 300 >> 2] = HEAPF32[$3 + 180 >> 2];
 if (!(!(HEAP8[$3 + 137 | 0] & 1) | HEAP32[$3 + 140 >> 2] == 3)) {
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 288 | 0, $2 + 320 | 0, $2 + 336 | 0);
  $5 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 184 | 0, $2 + 288 | 0);
  HEAPF32[$2 + 296 >> 2] = Math_fround(Math_fround(-HEAPF32[$3 + 208 >> 2]) * HEAPF32[$2 + 332 >> 2]) + Math_fround(Math_fround(HEAPF32[$3 + 212 >> 2] * HEAPF32[$2 + 316 >> 2]) + $5);
  HEAPF32[$2 + 284 >> 2] = HEAPF32[$3 + 252 >> 2] * Math_fround(HEAPF32[$3 + 132 >> 2] - HEAPF32[$2 + 296 >> 2]);
  HEAPF32[$2 + 280 >> 2] = HEAPF32[$3 + 116 >> 2];
  HEAPF32[$2 + 276 >> 2] = HEAPF32[HEAP32[$2 + 344 >> 2] >> 2] * HEAPF32[$3 + 128 >> 2];
  wasm2js_i32$0 = $3, wasm2js_f32$0 = float_20b2Clamp_float__28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[$3 + 116 >> 2] + HEAPF32[$2 + 284 >> 2]), Math_fround(-HEAPF32[$2 + 276 >> 2]), HEAPF32[$2 + 276 >> 2]), 
  HEAPF32[wasm2js_i32$0 + 116 >> 2] = wasm2js_f32$0;
  HEAPF32[$2 + 284 >> 2] = HEAPF32[$3 + 116 >> 2] - HEAPF32[$2 + 280 >> 2];
  operator__28float_2c_20b2Vec2_20const__29($2 + 268 | 0, HEAPF32[$2 + 284 >> 2], $3 + 184 | 0);
  HEAPF32[$2 + 264 >> 2] = HEAPF32[$2 + 284 >> 2] * HEAPF32[$3 + 208 >> 2];
  HEAPF32[$2 + 260 >> 2] = HEAPF32[$2 + 284 >> 2] * HEAPF32[$3 + 212 >> 2];
  operator__28float_2c_20b2Vec2_20const__29($2 + 252 | 0, HEAPF32[$2 + 312 >> 2], $2 + 268 | 0);
  b2Vec2__operator___28b2Vec2_20const__29_1($2 + 336 | 0, $2 + 252 | 0);
  HEAPF32[$2 + 332 >> 2] = Math_fround(Math_fround(-HEAPF32[$2 + 304 >> 2]) * HEAPF32[$2 + 264 >> 2]) + HEAPF32[$2 + 332 >> 2];
  operator__28float_2c_20b2Vec2_20const__29($2 + 244 | 0, HEAPF32[$2 + 308 >> 2], $2 + 268 | 0);
  b2Vec2__operator___28b2Vec2_20const__29($2 + 320 | 0, $2 + 244 | 0);
  HEAPF32[$2 + 316 >> 2] = Math_fround(HEAPF32[$2 + 300 >> 2] * HEAPF32[$2 + 260 >> 2]) + HEAPF32[$2 + 316 >> 2];
 }
 b2Vec2__b2Vec2_28_29($2 + 236 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 228 | 0, $2 + 320 | 0, $2 + 336 | 0);
 $5 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 192 | 0, $2 + 228 | 0);
 HEAPF32[$2 + 236 >> 2] = Math_fround(Math_fround(-HEAPF32[$3 + 200 >> 2]) * HEAPF32[$2 + 332 >> 2]) + Math_fround(Math_fround(HEAPF32[$3 + 204 >> 2] * HEAPF32[$2 + 316 >> 2]) + $5);
 HEAPF32[$2 + 240 >> 2] = HEAPF32[$2 + 316 >> 2] - HEAPF32[$2 + 332 >> 2];
 label$2: {
  if (!(!(HEAP8[$3 + 136 | 0] & 1) | !HEAP32[$3 + 140 >> 2])) {
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 216 | 0, $2 + 320 | 0, $2 + 336 | 0);
   $5 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 184 | 0, $2 + 216 | 0);
   HEAPF32[$2 + 224 >> 2] = Math_fround(Math_fround(-HEAPF32[$3 + 208 >> 2]) * HEAPF32[$2 + 332 >> 2]) + Math_fround(Math_fround(HEAPF32[$3 + 212 >> 2] * HEAPF32[$2 + 316 >> 2]) + $5);
   b2Vec3__b2Vec3_28float_2c_20float_2c_20float_29($2 + 204 | 0, HEAPF32[$2 + 236 >> 2], HEAPF32[$2 + 240 >> 2], HEAPF32[$2 + 224 >> 2]);
   HEAP32[$2 + 200 >> 2] = HEAP32[$3 + 112 >> 2];
   $0 = HEAP32[$3 + 108 >> 2];
   $1 = HEAP32[$3 + 104 >> 2];
   HEAP32[$2 + 192 >> 2] = $1;
   HEAP32[$2 + 196 >> 2] = $0;
   b2Vec3__operator__28_29_20const($2 + 164 | 0, $2 + 204 | 0);
   b2Mat33__Solve33_28b2Vec3_20const__29_20const($2 + 176 | 0, $3 + 216 | 0, $2 + 164 | 0);
   b2Vec3__operator___28b2Vec3_20const__29($3 + 104 | 0, $2 + 176 | 0);
   label$4: {
    if (HEAP32[$3 + 140 >> 2] == 1) {
     wasm2js_i32$0 = $3, wasm2js_f32$0 = float_20b2Max_float__28float_2c_20float_29(HEAPF32[$3 + 112 >> 2], Math_fround(0)), 
     HEAPF32[wasm2js_i32$0 + 112 >> 2] = wasm2js_f32$0;
     break label$4;
    }
    if (HEAP32[$3 + 140 >> 2] == 2) {
     wasm2js_i32$0 = $3, wasm2js_f32$0 = float_20b2Min_float__28float_2c_20float_29(HEAPF32[$3 + 112 >> 2], Math_fround(0)), 
     HEAPF32[wasm2js_i32$0 + 112 >> 2] = wasm2js_f32$0;
    }
   }
   b2Vec2__operator__28_29_20const($2 + 148 | 0, $2 + 236 | 0);
   $5 = HEAPF32[$3 + 112 >> 2];
   $6 = HEAPF32[$2 + 200 >> 2];
   b2Vec2__b2Vec2_28float_2c_20float_29($2 + 132 | 0, HEAPF32[$3 + 240 >> 2], HEAPF32[$3 + 244 >> 2]);
   operator__28float_2c_20b2Vec2_20const__29($2 + 140 | 0, Math_fround($5 - $6), $2 + 132 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 156 | 0, $2 + 148 | 0, $2 + 140 | 0);
   b2Mat33__Solve22_28b2Vec2_20const__29_20const($2 + 116 | 0, $3 + 216 | 0, $2 + 156 | 0);
   b2Vec2__b2Vec2_28float_2c_20float_29($2 + 108 | 0, HEAPF32[$2 + 192 >> 2], HEAPF32[$2 + 196 >> 2]);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 124 | 0, $2 + 116 | 0, $2 + 108 | 0);
   HEAPF32[$3 + 104 >> 2] = HEAPF32[$2 + 124 >> 2];
   HEAPF32[$3 + 108 >> 2] = HEAPF32[$2 + 128 >> 2];
   operator__28b2Vec3_20const__2c_20b2Vec3_20const__29($2 + 96 | 0, $3 + 104 | 0, $2 + 192 | 0);
   HEAP32[$2 + 184 >> 2] = HEAP32[$2 + 104 >> 2];
   $1 = HEAP32[$2 + 100 >> 2];
   $0 = HEAP32[$2 + 96 >> 2];
   HEAP32[$2 + 176 >> 2] = $0;
   HEAP32[$2 + 180 >> 2] = $1;
   operator__28float_2c_20b2Vec2_20const__29($2 + 80 | 0, HEAPF32[$2 + 176 >> 2], $3 + 192 | 0);
   operator__28float_2c_20b2Vec2_20const__29($2 + 72 | 0, HEAPF32[$2 + 184 >> 2], $3 + 184 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 88 | 0, $2 + 80 | 0, $2 + 72 | 0);
   HEAPF32[$2 + 68 >> 2] = Math_fround(HEAPF32[$2 + 184 >> 2] * HEAPF32[$3 + 208 >> 2]) + Math_fround(Math_fround(HEAPF32[$2 + 176 >> 2] * HEAPF32[$3 + 200 >> 2]) + HEAPF32[$2 + 180 >> 2]);
   HEAPF32[$2 + 64 >> 2] = Math_fround(HEAPF32[$2 + 184 >> 2] * HEAPF32[$3 + 212 >> 2]) + Math_fround(Math_fround(HEAPF32[$2 + 176 >> 2] * HEAPF32[$3 + 204 >> 2]) + HEAPF32[$2 + 180 >> 2]);
   operator__28float_2c_20b2Vec2_20const__29($2 + 56 | 0, HEAPF32[$2 + 312 >> 2], $2 + 88 | 0);
   b2Vec2__operator___28b2Vec2_20const__29_1($2 + 336 | 0, $2 + 56 | 0);
   HEAPF32[$2 + 332 >> 2] = Math_fround(Math_fround(-HEAPF32[$2 + 304 >> 2]) * HEAPF32[$2 + 68 >> 2]) + HEAPF32[$2 + 332 >> 2];
   operator__28float_2c_20b2Vec2_20const__29($2 + 48 | 0, HEAPF32[$2 + 308 >> 2], $2 + 88 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($2 + 320 | 0, $2 + 48 | 0);
   HEAPF32[$2 + 316 >> 2] = Math_fround(HEAPF32[$2 + 300 >> 2] * HEAPF32[$2 + 64 >> 2]) + HEAPF32[$2 + 316 >> 2];
   break label$2;
  }
  b2Vec2__operator__28_29_20const($2 + 32 | 0, $2 + 236 | 0);
  b2Mat33__Solve22_28b2Vec2_20const__29_20const($2 + 40 | 0, $3 + 216 | 0, $2 + 32 | 0);
  HEAPF32[$3 + 104 >> 2] = HEAPF32[$3 + 104 >> 2] + HEAPF32[$2 + 40 >> 2];
  HEAPF32[$3 + 108 >> 2] = HEAPF32[$3 + 108 >> 2] + HEAPF32[$2 + 44 >> 2];
  operator__28float_2c_20b2Vec2_20const__29($2 + 24 | 0, HEAPF32[$2 + 40 >> 2], $3 + 192 | 0);
  HEAPF32[$2 + 20 >> 2] = Math_fround(HEAPF32[$2 + 40 >> 2] * HEAPF32[$3 + 200 >> 2]) + HEAPF32[$2 + 44 >> 2];
  HEAPF32[$2 + 16 >> 2] = Math_fround(HEAPF32[$2 + 40 >> 2] * HEAPF32[$3 + 204 >> 2]) + HEAPF32[$2 + 44 >> 2];
  operator__28float_2c_20b2Vec2_20const__29($2 + 8 | 0, HEAPF32[$2 + 312 >> 2], $2 + 24 | 0);
  b2Vec2__operator___28b2Vec2_20const__29_1($2 + 336 | 0, $2 + 8 | 0);
  HEAPF32[$2 + 332 >> 2] = Math_fround(Math_fround(-HEAPF32[$2 + 304 >> 2]) * HEAPF32[$2 + 20 >> 2]) + HEAPF32[$2 + 332 >> 2];
  operator__28float_2c_20b2Vec2_20const__29($2, HEAPF32[$2 + 308 >> 2], $2 + 24 | 0);
  b2Vec2__operator___28b2Vec2_20const__29($2 + 320 | 0, $2);
  HEAPF32[$2 + 316 >> 2] = Math_fround(HEAPF32[$2 + 300 >> 2] * HEAPF32[$2 + 16 >> 2]) + HEAPF32[$2 + 316 >> 2];
 }
 $0 = HEAP32[$2 + 340 >> 2];
 $1 = HEAP32[$2 + 336 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 344 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 144 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 344 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 144 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 332 >> 2];
 $1 = HEAP32[$2 + 324 >> 2];
 $0 = HEAP32[$2 + 320 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 344 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 148 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 344 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 148 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 316 >> 2];
 __stack_pointer = $2 + 352 | 0;
}

function b2RevoluteJoint__SolveVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 336 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 332 >> 2] = $0;
 HEAP32[$2 + 328 >> 2] = $1;
 $3 = HEAP32[$2 + 332 >> 2];
 $4 = HEAP32[HEAP32[$2 + 328 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 128 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 320 >> 2] = $1;
 HEAP32[$2 + 324 >> 2] = $0;
 HEAPF32[$2 + 316 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 328 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 128 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 328 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 304 >> 2] = $0;
 HEAP32[$2 + 308 >> 2] = $1;
 HEAPF32[$2 + 300 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 328 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0) + 8 >> 2];
 HEAPF32[$2 + 296 >> 2] = HEAPF32[$3 + 168 >> 2];
 HEAPF32[$2 + 292 >> 2] = HEAPF32[$3 + 172 >> 2];
 HEAPF32[$2 + 288 >> 2] = HEAPF32[$3 + 176 >> 2];
 HEAPF32[$2 + 284 >> 2] = HEAPF32[$3 + 180 >> 2];
 HEAP8[$2 + 283 | 0] = Math_fround(HEAPF32[$2 + 288 >> 2] + HEAPF32[$2 + 284 >> 2]) == Math_fround(0);
 if (!(HEAP8[$2 + 283 | 0] & 1 | (!(HEAP8[$3 + 100 | 0] & 1) | HEAP32[$3 + 224 >> 2] == 3))) {
  HEAPF32[$2 + 276 >> 2] = Math_fround(HEAPF32[$2 + 300 >> 2] - HEAPF32[$2 + 316 >> 2]) - HEAPF32[$3 + 108 >> 2];
  HEAPF32[$2 + 272 >> 2] = Math_fround(-HEAPF32[$3 + 220 >> 2]) * HEAPF32[$2 + 276 >> 2];
  HEAPF32[$2 + 268 >> 2] = HEAPF32[$3 + 96 >> 2];
  HEAPF32[$2 + 264 >> 2] = HEAPF32[HEAP32[$2 + 328 >> 2] >> 2] * HEAPF32[$3 + 104 >> 2];
  wasm2js_i32$0 = $3, wasm2js_f32$0 = float_20b2Clamp_float__28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[$3 + 96 >> 2] + HEAPF32[$2 + 272 >> 2]), Math_fround(-HEAPF32[$2 + 264 >> 2]), HEAPF32[$2 + 264 >> 2]), 
  HEAPF32[wasm2js_i32$0 + 96 >> 2] = wasm2js_f32$0;
  HEAPF32[$2 + 272 >> 2] = HEAPF32[$3 + 96 >> 2] - HEAPF32[$2 + 268 >> 2];
  HEAPF32[$2 + 316 >> 2] = Math_fround(Math_fround(-HEAPF32[$2 + 288 >> 2]) * HEAPF32[$2 + 272 >> 2]) + HEAPF32[$2 + 316 >> 2];
  HEAPF32[$2 + 300 >> 2] = Math_fround(HEAPF32[$2 + 284 >> 2] * HEAPF32[$2 + 272 >> 2]) + HEAPF32[$2 + 300 >> 2];
 }
 label$2: {
  if (!(HEAP8[$2 + 283 | 0] & 1 | (!(HEAP8[$3 + 112 | 0] & 1) | !HEAP32[$3 + 224 >> 2]))) {
   b2Cross_28float_2c_20b2Vec2_20const__29($2 + 232 | 0, HEAPF32[$2 + 300 >> 2], $3 + 144 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 240 | 0, $2 + 304 | 0, $2 + 232 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 248 | 0, $2 + 240 | 0, $2 + 320 | 0);
   b2Cross_28float_2c_20b2Vec2_20const__29($2 + 224 | 0, HEAPF32[$2 + 316 >> 2], $3 + 136 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 256 | 0, $2 + 248 | 0, $2 + 224 | 0);
   HEAPF32[$2 + 220 >> 2] = HEAPF32[$2 + 300 >> 2] - HEAPF32[$2 + 316 >> 2];
   b2Vec3__b2Vec3_28float_2c_20float_2c_20float_29($2 + 208 | 0, HEAPF32[$2 + 256 >> 2], HEAPF32[$2 + 260 >> 2], HEAPF32[$2 + 220 >> 2]);
   b2Mat33__Solve33_28b2Vec3_20const__29_20const($2 + 184 | 0, $3 + 184 | 0, $2 + 208 | 0);
   b2Vec3__operator__28_29_20const($2 + 196 | 0, $2 + 184 | 0);
   label$4: {
    if (HEAP32[$3 + 224 >> 2] == 3) {
     b2Vec3__operator___28b2Vec3_20const__29($3 + 84 | 0, $2 + 196 | 0);
     break label$4;
    }
    label$6: {
     if (HEAP32[$3 + 224 >> 2] == 1) {
      HEAPF32[$2 + 180 >> 2] = HEAPF32[$3 + 92 >> 2] + HEAPF32[$2 + 204 >> 2];
      label$8: {
       if (HEAPF32[$2 + 180 >> 2] < Math_fround(0)) {
        b2Vec2__operator__28_29_20const($2 + 164 | 0, $2 + 256 | 0);
        $5 = HEAPF32[$3 + 92 >> 2];
        b2Vec2__b2Vec2_28float_2c_20float_29($2 + 148 | 0, HEAPF32[$3 + 208 >> 2], HEAPF32[$3 + 212 >> 2]);
        operator__28float_2c_20b2Vec2_20const__29($2 + 156 | 0, $5, $2 + 148 | 0);
        operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 172 | 0, $2 + 164 | 0, $2 + 156 | 0);
        b2Mat33__Solve22_28b2Vec2_20const__29_20const($2 + 140 | 0, $3 + 184 | 0, $2 + 172 | 0);
        HEAPF32[$2 + 196 >> 2] = HEAPF32[$2 + 140 >> 2];
        HEAPF32[$2 + 200 >> 2] = HEAPF32[$2 + 144 >> 2];
        HEAPF32[$2 + 204 >> 2] = -HEAPF32[$3 + 92 >> 2];
        HEAPF32[$3 + 84 >> 2] = HEAPF32[$3 + 84 >> 2] + HEAPF32[$2 + 140 >> 2];
        HEAPF32[$3 + 88 >> 2] = HEAPF32[$3 + 88 >> 2] + HEAPF32[$2 + 144 >> 2];
        HEAPF32[$3 + 92 >> 2] = 0;
        break label$8;
       }
       b2Vec3__operator___28b2Vec3_20const__29($3 + 84 | 0, $2 + 196 | 0);
      }
      break label$6;
     }
     if (HEAP32[$3 + 224 >> 2] == 2) {
      HEAPF32[$2 + 136 >> 2] = HEAPF32[$3 + 92 >> 2] + HEAPF32[$2 + 204 >> 2];
      label$11: {
       if (HEAPF32[$2 + 136 >> 2] > Math_fround(0)) {
        b2Vec2__operator__28_29_20const($2 + 120 | 0, $2 + 256 | 0);
        $5 = HEAPF32[$3 + 92 >> 2];
        b2Vec2__b2Vec2_28float_2c_20float_29($2 + 104 | 0, HEAPF32[$3 + 208 >> 2], HEAPF32[$3 + 212 >> 2]);
        operator__28float_2c_20b2Vec2_20const__29($2 + 112 | 0, $5, $2 + 104 | 0);
        operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 128 | 0, $2 + 120 | 0, $2 + 112 | 0);
        b2Mat33__Solve22_28b2Vec2_20const__29_20const($2 + 96 | 0, $3 + 184 | 0, $2 + 128 | 0);
        HEAPF32[$2 + 196 >> 2] = HEAPF32[$2 + 96 >> 2];
        HEAPF32[$2 + 200 >> 2] = HEAPF32[$2 + 100 >> 2];
        HEAPF32[$2 + 204 >> 2] = -HEAPF32[$3 + 92 >> 2];
        HEAPF32[$3 + 84 >> 2] = HEAPF32[$3 + 84 >> 2] + HEAPF32[$2 + 96 >> 2];
        HEAPF32[$3 + 88 >> 2] = HEAPF32[$3 + 88 >> 2] + HEAPF32[$2 + 100 >> 2];
        HEAPF32[$3 + 92 >> 2] = 0;
        break label$11;
       }
       b2Vec3__operator___28b2Vec3_20const__29($3 + 84 | 0, $2 + 196 | 0);
      }
     }
    }
   }
   b2Vec2__b2Vec2_28float_2c_20float_29($2 + 88 | 0, HEAPF32[$2 + 196 >> 2], HEAPF32[$2 + 200 >> 2]);
   operator__28float_2c_20b2Vec2_20const__29($2 + 80 | 0, HEAPF32[$2 + 296 >> 2], $2 + 88 | 0);
   b2Vec2__operator___28b2Vec2_20const__29_1($2 + 320 | 0, $2 + 80 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$2 + 288 >> 2]) * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 136 | 0, $2 + 88 | 0) + HEAPF32[$2 + 204 >> 2])) + HEAPF32[$2 + 316 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 316 >> 2] = wasm2js_f32$0;
   operator__28float_2c_20b2Vec2_20const__29($2 + 72 | 0, HEAPF32[$2 + 292 >> 2], $2 + 88 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($2 + 304 | 0, $2 + 72 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$2 + 284 >> 2] * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 144 | 0, $2 + 88 | 0) + HEAPF32[$2 + 204 >> 2])) + HEAPF32[$2 + 300 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 300 >> 2] = wasm2js_f32$0;
   break label$2;
  }
  b2Cross_28float_2c_20b2Vec2_20const__29($2 + 40 | 0, HEAPF32[$2 + 300 >> 2], $3 + 144 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 48 | 0, $2 + 304 | 0, $2 + 40 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 56 | 0, $2 + 48 | 0, $2 + 320 | 0);
  b2Cross_28float_2c_20b2Vec2_20const__29($2 + 32 | 0, HEAPF32[$2 + 316 >> 2], $3 + 136 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 - -64 | 0, $2 + 56 | 0, $2 + 32 | 0);
  b2Vec2__operator__28_29_20const($2 + 16 | 0, $2 - -64 | 0);
  b2Mat33__Solve22_28b2Vec2_20const__29_20const($2 + 24 | 0, $3 + 184 | 0, $2 + 16 | 0);
  HEAPF32[$3 + 84 >> 2] = HEAPF32[$3 + 84 >> 2] + HEAPF32[$2 + 24 >> 2];
  HEAPF32[$3 + 88 >> 2] = HEAPF32[$3 + 88 >> 2] + HEAPF32[$2 + 28 >> 2];
  operator__28float_2c_20b2Vec2_20const__29($2 + 8 | 0, HEAPF32[$2 + 296 >> 2], $2 + 24 | 0);
  b2Vec2__operator___28b2Vec2_20const__29_1($2 + 320 | 0, $2 + 8 | 0);
  wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$2 + 288 >> 2]) * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 136 | 0, $2 + 24 | 0)) + HEAPF32[$2 + 316 >> 2]), 
  HEAPF32[wasm2js_i32$0 + 316 >> 2] = wasm2js_f32$0;
  operator__28float_2c_20b2Vec2_20const__29($2, HEAPF32[$2 + 292 >> 2], $2 + 24 | 0);
  b2Vec2__operator___28b2Vec2_20const__29($2 + 304 | 0, $2);
  wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$2 + 284 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 144 | 0, $2 + 24 | 0)) + HEAPF32[$2 + 300 >> 2]), 
  HEAPF32[wasm2js_i32$0 + 300 >> 2] = wasm2js_f32$0;
 }
 $0 = HEAP32[$2 + 324 >> 2];
 $1 = HEAP32[$2 + 320 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 328 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 128 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 328 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 128 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 316 >> 2];
 $1 = HEAP32[$2 + 308 >> 2];
 $0 = HEAP32[$2 + 304 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 328 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 328 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 300 >> 2];
 __stack_pointer = $2 + 336 | 0;
}

function b2CollidePolygons_28b2Manifold__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_i32$1 = 0;
 $5 = __stack_pointer - 352 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 348 >> 2] = $0;
 HEAP32[$5 + 344 >> 2] = $1;
 HEAP32[$5 + 340 >> 2] = $2;
 HEAP32[$5 + 336 >> 2] = $3;
 HEAP32[$5 + 332 >> 2] = $4;
 HEAP32[HEAP32[$5 + 348 >> 2] + 60 >> 2] = 0;
 HEAPF32[$5 + 328 >> 2] = HEAPF32[HEAP32[$5 + 344 >> 2] + 8 >> 2] + HEAPF32[HEAP32[$5 + 336 >> 2] + 8 >> 2];
 HEAP32[$5 + 324 >> 2] = 0;
 wasm2js_i32$0 = $5, wasm2js_f32$0 = b2FindMaxSeparation_28int__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__29($5 + 324 | 0, HEAP32[$5 + 344 >> 2], HEAP32[$5 + 340 >> 2], HEAP32[$5 + 336 >> 2], HEAP32[$5 + 332 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 320 >> 2] = wasm2js_f32$0;
 label$1: {
  if (HEAPF32[$5 + 320 >> 2] > HEAPF32[$5 + 328 >> 2]) {
   break label$1;
  }
  HEAP32[$5 + 316 >> 2] = 0;
  wasm2js_i32$0 = $5, wasm2js_f32$0 = b2FindMaxSeparation_28int__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__29($5 + 316 | 0, HEAP32[$5 + 336 >> 2], HEAP32[$5 + 332 >> 2], HEAP32[$5 + 344 >> 2], HEAP32[$5 + 340 >> 2]), 
  HEAPF32[wasm2js_i32$0 + 312 >> 2] = wasm2js_f32$0;
  if (HEAPF32[$5 + 312 >> 2] > HEAPF32[$5 + 328 >> 2]) {
   break label$1;
  }
  b2Transform__b2Transform_28_29($5 + 288 | 0);
  b2Transform__b2Transform_28_29($5 + 272 | 0);
  HEAPF32[$5 + 260 >> 2] = .0005000000237487257;
  label$2: {
   if (HEAPF32[$5 + 312 >> 2] > Math_fround(HEAPF32[$5 + 320 >> 2] + Math_fround(.0005000000237487257))) {
    HEAP32[$5 + 308 >> 2] = HEAP32[$5 + 336 >> 2];
    HEAP32[$5 + 304 >> 2] = HEAP32[$5 + 344 >> 2];
    $2 = HEAP32[$5 + 332 >> 2];
    $1 = HEAP32[$2 + 8 >> 2];
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$5 + 296 >> 2] = $1;
    HEAP32[$5 + 300 >> 2] = $0;
    $1 = HEAP32[$2 + 4 >> 2];
    $0 = HEAP32[$2 >> 2];
    HEAP32[$5 + 288 >> 2] = $0;
    HEAP32[$5 + 292 >> 2] = $1;
    $2 = HEAP32[$5 + 340 >> 2];
    $1 = HEAP32[$2 + 8 >> 2];
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$5 + 280 >> 2] = $1;
    HEAP32[$5 + 284 >> 2] = $0;
    $1 = HEAP32[$2 + 4 >> 2];
    $0 = HEAP32[$2 >> 2];
    HEAP32[$5 + 272 >> 2] = $0;
    HEAP32[$5 + 276 >> 2] = $1;
    HEAP32[$5 + 268 >> 2] = HEAP32[$5 + 316 >> 2];
    HEAP32[HEAP32[$5 + 348 >> 2] + 56 >> 2] = 2;
    HEAP8[$5 + 267 | 0] = 1;
    break label$2;
   }
   HEAP32[$5 + 308 >> 2] = HEAP32[$5 + 344 >> 2];
   HEAP32[$5 + 304 >> 2] = HEAP32[$5 + 336 >> 2];
   $2 = HEAP32[$5 + 340 >> 2];
   $1 = HEAP32[$2 + 8 >> 2];
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$5 + 296 >> 2] = $1;
   HEAP32[$5 + 300 >> 2] = $0;
   $1 = HEAP32[$2 + 4 >> 2];
   $0 = HEAP32[$2 >> 2];
   HEAP32[$5 + 288 >> 2] = $0;
   HEAP32[$5 + 292 >> 2] = $1;
   $2 = HEAP32[$5 + 332 >> 2];
   $1 = HEAP32[$2 + 8 >> 2];
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$5 + 280 >> 2] = $1;
   HEAP32[$5 + 284 >> 2] = $0;
   $1 = HEAP32[$2 + 4 >> 2];
   $0 = HEAP32[$2 >> 2];
   HEAP32[$5 + 272 >> 2] = $0;
   HEAP32[$5 + 276 >> 2] = $1;
   HEAP32[$5 + 268 >> 2] = HEAP32[$5 + 324 >> 2];
   HEAP32[HEAP32[$5 + 348 >> 2] + 56 >> 2] = 1;
   HEAP8[$5 + 267 | 0] = 0;
  }
  $0 = $5 + 224 | 0;
  $1 = $0 + 24 | 0;
  while (1) {
   b2ClipVertex__b2ClipVertex_28_29($0);
   $0 = $0 + 12 | 0;
   if (($1 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
  b2FindIncidentEdge_28b2ClipVertex__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__2c_20int_2c_20b2PolygonShape_20const__2c_20b2Transform_20const__29($5 + 224 | 0, HEAP32[$5 + 308 >> 2], $5 + 288 | 0, HEAP32[$5 + 268 >> 2], HEAP32[$5 + 304 >> 2], $5 + 272 | 0);
  HEAP32[$5 + 220 >> 2] = HEAP32[HEAP32[$5 + 308 >> 2] + 148 >> 2];
  HEAP32[$5 + 216 >> 2] = HEAP32[$5 + 308 >> 2] + 20;
  HEAP32[$5 + 212 >> 2] = HEAP32[$5 + 268 >> 2];
  if (HEAP32[$5 + 220 >> 2] > (HEAP32[$5 + 268 >> 2] + 1 | 0)) {
   $0 = HEAP32[$5 + 268 >> 2] + 1 | 0;
  } else {
   $0 = 0;
  }
  HEAP32[$5 + 208 >> 2] = $0;
  $2 = HEAP32[$5 + 216 >> 2] + (HEAP32[$5 + 212 >> 2] << 3) | 0;
  $1 = HEAP32[$2 >> 2];
  $0 = HEAP32[$2 + 4 >> 2];
  HEAP32[$5 + 200 >> 2] = $1;
  HEAP32[$5 + 204 >> 2] = $0;
  $2 = HEAP32[$5 + 216 >> 2] + (HEAP32[$5 + 208 >> 2] << 3) | 0;
  $0 = HEAP32[$2 >> 2];
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$5 + 192 >> 2] = $0;
  HEAP32[$5 + 196 >> 2] = $1;
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 184 | 0, $5 + 192 | 0, $5 + 200 | 0);
  b2Vec2__Normalize_28_29($5 + 184 | 0);
  b2Cross_28b2Vec2_20const__2c_20float_29($5 + 176 | 0, $5 + 184 | 0, Math_fround(1));
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($5 + 160 | 0, $5 + 200 | 0, $5 + 192 | 0);
  operator__28float_2c_20b2Vec2_20const__29($5 + 168 | 0, Math_fround(.5), $5 + 160 | 0);
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($5 + 152 | 0, $5 + 296 | 0, $5 + 184 | 0);
  b2Cross_28b2Vec2_20const__2c_20float_29($5 + 144 | 0, $5 + 152 | 0, Math_fround(1));
  b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($5 + 136 | 0, $5 + 288 | 0, $5 + 200 | 0);
  $0 = HEAP32[$5 + 140 >> 2];
  $1 = HEAP32[$5 + 136 >> 2];
  HEAP32[$5 + 200 >> 2] = $1;
  HEAP32[$5 + 204 >> 2] = $0;
  b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($5 + 128 | 0, $5 + 288 | 0, $5 + 192 | 0);
  $1 = HEAP32[$5 + 132 >> 2];
  $0 = HEAP32[$5 + 128 >> 2];
  HEAP32[$5 + 192 >> 2] = $0;
  HEAP32[$5 + 196 >> 2] = $1;
  wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 144 | 0, $5 + 200 | 0), 
  HEAPF32[wasm2js_i32$0 + 124 >> 2] = wasm2js_f32$0;
  wasm2js_i32$0 = $5, wasm2js_f32$0 = Math_fround(Math_fround(-b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 152 | 0, $5 + 200 | 0)) + HEAPF32[$5 + 328 >> 2]), 
  HEAPF32[wasm2js_i32$0 + 120 >> 2] = wasm2js_f32$0;
  wasm2js_i32$0 = $5, wasm2js_f32$0 = Math_fround(b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 152 | 0, $5 + 192 | 0) + HEAPF32[$5 + 328 >> 2]), 
  HEAPF32[wasm2js_i32$0 + 116 >> 2] = wasm2js_f32$0;
  $0 = $5 + 80 | 0;
  $1 = $0 + 24 | 0;
  while (1) {
   b2ClipVertex__b2ClipVertex_28_29($0);
   $0 = $0 + 12 | 0;
   if (($1 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
  $0 = $5 + 48 | 0;
  $1 = $0 + 24 | 0;
  while (1) {
   b2ClipVertex__b2ClipVertex_28_29($0);
   $0 = $0 + 12 | 0;
   if (($1 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
  b2Vec2__operator__28_29_20const($5 + 36 | 0, $5 + 152 | 0);
  wasm2js_i32$0 = $5, wasm2js_i32$1 = b2ClipSegmentToLine_28b2ClipVertex__2c_20b2ClipVertex_20const__2c_20b2Vec2_20const__2c_20float_2c_20int_29($5 + 80 | 0, $5 + 224 | 0, $5 + 36 | 0, HEAPF32[$5 + 120 >> 2], HEAP32[$5 + 212 >> 2]), 
  HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
  if (HEAP32[$5 + 44 >> 2] < 2) {
   break label$1;
  }
  wasm2js_i32$0 = $5, wasm2js_i32$1 = b2ClipSegmentToLine_28b2ClipVertex__2c_20b2ClipVertex_20const__2c_20b2Vec2_20const__2c_20float_2c_20int_29($5 + 48 | 0, $5 + 80 | 0, $5 + 152 | 0, HEAPF32[$5 + 116 >> 2], HEAP32[$5 + 208 >> 2]), 
  HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
  if (HEAP32[$5 + 44 >> 2] < 2) {
   break label$1;
  }
  $0 = HEAP32[$5 + 180 >> 2];
  $1 = HEAP32[$5 + 176 >> 2];
  $2 = $1;
  $1 = HEAP32[$5 + 348 >> 2];
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$1 + 44 >> 2] = $0;
  $1 = HEAP32[$5 + 172 >> 2];
  $0 = HEAP32[$5 + 168 >> 2];
  $2 = $0;
  $0 = HEAP32[$5 + 348 >> 2];
  HEAP32[$0 + 48 >> 2] = $2;
  HEAP32[$0 + 52 >> 2] = $1;
  HEAP32[$5 + 32 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  while (1) {
   if (HEAP32[$5 + 28 >> 2] < 2) {
    wasm2js_i32$0 = $5, wasm2js_f32$0 = Math_fround(b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 144 | 0, ($5 + 48 | 0) + Math_imul(HEAP32[$5 + 28 >> 2], 12) | 0) - HEAPF32[$5 + 124 >> 2]), 
    HEAPF32[wasm2js_i32$0 + 24 >> 2] = wasm2js_f32$0;
    if (HEAPF32[$5 + 24 >> 2] <= HEAPF32[$5 + 328 >> 2]) {
     HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 348 >> 2] + Math_imul(HEAP32[$5 + 32 >> 2], 20);
     b2MulT_28b2Transform_20const__2c_20b2Vec2_20const__29($5 + 12 | 0, $5 + 272 | 0, ($5 + 48 | 0) + Math_imul(HEAP32[$5 + 28 >> 2], 12) | 0);
     $0 = HEAP32[$5 + 16 >> 2];
     $1 = HEAP32[$5 + 12 >> 2];
     $2 = $1;
     $1 = HEAP32[$5 + 20 >> 2];
     HEAP32[$1 >> 2] = $2;
     HEAP32[$1 + 4 >> 2] = $0;
     HEAP32[HEAP32[$5 + 20 >> 2] + 16 >> 2] = HEAP32[(($5 + 48 | 0) + Math_imul(HEAP32[$5 + 28 >> 2], 12) | 0) + 8 >> 2];
     if (HEAPU8[$5 + 267 | 0]) {
      $0 = HEAP32[$5 + 20 >> 2];
      HEAP32[$5 + 8 >> 2] = HEAPU8[$0 + 16 | 0] | HEAPU8[$0 + 17 | 0] << 8 | (HEAPU8[$0 + 18 | 0] << 16 | HEAPU8[$0 + 19 | 0] << 24);
      HEAP8[HEAP32[$5 + 20 >> 2] + 16 | 0] = HEAPU8[$5 + 9 | 0];
      HEAP8[HEAP32[$5 + 20 >> 2] + 17 | 0] = HEAPU8[$5 + 8 | 0];
      HEAP8[HEAP32[$5 + 20 >> 2] + 18 | 0] = HEAPU8[$5 + 11 | 0];
      HEAP8[HEAP32[$5 + 20 >> 2] + 19 | 0] = HEAPU8[$5 + 10 | 0];
     }
     HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 32 >> 2] + 1;
    }
    HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[HEAP32[$5 + 348 >> 2] + 60 >> 2] = HEAP32[$5 + 32 >> 2];
 }
 __stack_pointer = $5 + 352 | 0;
}

function b2CollideEdgeAndCircle_28b2Manifold__2c_20b2EdgeShape_20const__2c_20b2Transform_20const__2c_20b2CircleShape_20const__2c_20b2Transform_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $5 = __stack_pointer - 288 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 284 >> 2] = $0;
 HEAP32[$5 + 280 >> 2] = $1;
 HEAP32[$5 + 276 >> 2] = $2;
 HEAP32[$5 + 272 >> 2] = $3;
 HEAP32[$5 + 268 >> 2] = $4;
 HEAP32[HEAP32[$5 + 284 >> 2] + 60 >> 2] = 0;
 $0 = HEAP32[$5 + 276 >> 2];
 b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($5 + 252 | 0, HEAP32[$5 + 268 >> 2], HEAP32[$5 + 272 >> 2] + 12 | 0);
 b2MulT_28b2Transform_20const__2c_20b2Vec2_20const__29($5 + 260 | 0, $0, $5 + 252 | 0);
 $2 = HEAP32[$5 + 280 >> 2];
 $1 = HEAP32[$2 + 12 >> 2];
 $0 = HEAP32[$2 + 16 >> 2];
 HEAP32[$5 + 240 >> 2] = $1;
 HEAP32[$5 + 244 >> 2] = $0;
 $2 = HEAP32[$5 + 280 >> 2];
 $0 = HEAP32[$2 + 20 >> 2];
 $1 = HEAP32[$2 + 24 >> 2];
 HEAP32[$5 + 232 >> 2] = $0;
 HEAP32[$5 + 236 >> 2] = $1;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 224 | 0, $5 + 232 | 0, $5 + 240 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 212 | 0, $5 + 232 | 0, $5 + 260 | 0);
 wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 224 | 0, $5 + 212 | 0), 
 HEAPF32[wasm2js_i32$0 + 220 >> 2] = wasm2js_f32$0;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 200 | 0, $5 + 260 | 0, $5 + 240 | 0);
 wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 224 | 0, $5 + 200 | 0), 
 HEAPF32[wasm2js_i32$0 + 208 >> 2] = wasm2js_f32$0;
 HEAPF32[$5 + 196 >> 2] = HEAPF32[HEAP32[$5 + 280 >> 2] + 8 >> 2] + HEAPF32[HEAP32[$5 + 272 >> 2] + 8 >> 2];
 HEAP8[$5 + 193 | 0] = 0;
 HEAP8[$5 + 195 | 0] = 0;
 label$1: {
  if (HEAPF32[$5 + 208 >> 2] <= Math_fround(0)) {
   $0 = HEAP32[$5 + 244 >> 2];
   $1 = HEAP32[$5 + 240 >> 2];
   HEAP32[$5 + 184 >> 2] = $1;
   HEAP32[$5 + 188 >> 2] = $0;
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 176 | 0, $5 + 260 | 0, $5 + 184 | 0);
   $0 = $5 + 176 | 0;
   wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $0), 
   HEAPF32[wasm2js_i32$0 + 172 >> 2] = wasm2js_f32$0;
   if (HEAPF32[$5 + 172 >> 2] > Math_fround(HEAPF32[$5 + 196 >> 2] * HEAPF32[$5 + 196 >> 2])) {
    break label$1;
   }
   if (HEAP8[HEAP32[$5 + 280 >> 2] + 44 | 0] & 1) {
    $2 = HEAP32[$5 + 280 >> 2];
    $0 = HEAP32[$2 + 28 >> 2];
    $1 = HEAP32[$2 + 32 >> 2];
    HEAP32[$5 + 160 >> 2] = $0;
    HEAP32[$5 + 164 >> 2] = $1;
    $0 = HEAP32[$5 + 244 >> 2];
    $1 = HEAP32[$5 + 240 >> 2];
    HEAP32[$5 + 152 >> 2] = $1;
    HEAP32[$5 + 156 >> 2] = $0;
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 144 | 0, $5 + 152 | 0, $5 + 160 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 132 | 0, $5 + 152 | 0, $5 + 260 | 0);
    wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 144 | 0, $5 + 132 | 0), 
    HEAPF32[wasm2js_i32$0 + 140 >> 2] = wasm2js_f32$0;
    if (HEAPF32[$5 + 140 >> 2] > Math_fround(0)) {
     break label$1;
    }
   }
   HEAP8[$5 + 192 | 0] = 0;
   HEAP8[$5 + 194 | 0] = 0;
   HEAP32[HEAP32[$5 + 284 >> 2] + 60 >> 2] = 1;
   HEAP32[HEAP32[$5 + 284 >> 2] + 56 >> 2] = 0;
   b2Vec2__SetZero_28_29(HEAP32[$5 + 284 >> 2] + 40 | 0);
   $1 = HEAP32[$5 + 188 >> 2];
   $0 = HEAP32[$5 + 184 >> 2];
   $2 = $0;
   $0 = HEAP32[$5 + 284 >> 2];
   HEAP32[$0 + 48 >> 2] = $2;
   HEAP32[$0 + 52 >> 2] = $1;
   HEAP32[HEAP32[$5 + 284 >> 2] + 16 >> 2] = 0;
   $0 = HEAP32[$5 + 284 >> 2];
   $1 = HEAPU8[$5 + 192 | 0] | HEAPU8[$5 + 193 | 0] << 8 | (HEAPU8[$5 + 194 | 0] << 16 | HEAPU8[$5 + 195 | 0] << 24);
   HEAP8[$0 + 16 | 0] = $1;
   HEAP8[$0 + 17 | 0] = $1 >>> 8;
   HEAP8[$0 + 18 | 0] = $1 >>> 16;
   HEAP8[$0 + 19 | 0] = $1 >>> 24;
   $2 = HEAP32[$5 + 272 >> 2];
   $1 = HEAP32[$2 + 12 >> 2];
   $0 = HEAP32[$2 + 16 >> 2];
   $2 = $1;
   $1 = HEAP32[$5 + 284 >> 2];
   HEAP32[$1 >> 2] = $2;
   HEAP32[$1 + 4 >> 2] = $0;
   break label$1;
  }
  if (HEAPF32[$5 + 220 >> 2] <= Math_fround(0)) {
   $1 = HEAP32[$5 + 236 >> 2];
   $0 = HEAP32[$5 + 232 >> 2];
   HEAP32[$5 + 120 >> 2] = $0;
   HEAP32[$5 + 124 >> 2] = $1;
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 112 | 0, $5 + 260 | 0, $5 + 120 | 0);
   $0 = $5 + 112 | 0;
   wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $0), 
   HEAPF32[wasm2js_i32$0 + 108 >> 2] = wasm2js_f32$0;
   if (HEAPF32[$5 + 108 >> 2] > Math_fround(HEAPF32[$5 + 196 >> 2] * HEAPF32[$5 + 196 >> 2])) {
    break label$1;
   }
   if (HEAP8[HEAP32[$5 + 280 >> 2] + 45 | 0] & 1) {
    $2 = HEAP32[$5 + 280 >> 2];
    $1 = HEAP32[$2 + 36 >> 2];
    $0 = HEAP32[$2 + 40 >> 2];
    HEAP32[$5 + 96 >> 2] = $1;
    HEAP32[$5 + 100 >> 2] = $0;
    $1 = HEAP32[$5 + 236 >> 2];
    $0 = HEAP32[$5 + 232 >> 2];
    HEAP32[$5 + 88 >> 2] = $0;
    HEAP32[$5 + 92 >> 2] = $1;
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 80 | 0, $5 + 96 | 0, $5 + 88 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 68 | 0, $5 + 260 | 0, $5 + 88 | 0);
    wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 80 | 0, $5 + 68 | 0), 
    HEAPF32[wasm2js_i32$0 + 76 >> 2] = wasm2js_f32$0;
    if (HEAPF32[$5 + 76 >> 2] > Math_fround(0)) {
     break label$1;
    }
   }
   HEAP8[$5 + 192 | 0] = 1;
   HEAP8[$5 + 194 | 0] = 0;
   HEAP32[HEAP32[$5 + 284 >> 2] + 60 >> 2] = 1;
   HEAP32[HEAP32[$5 + 284 >> 2] + 56 >> 2] = 0;
   b2Vec2__SetZero_28_29(HEAP32[$5 + 284 >> 2] + 40 | 0);
   $0 = HEAP32[$5 + 124 >> 2];
   $1 = HEAP32[$5 + 120 >> 2];
   $2 = $1;
   $1 = HEAP32[$5 + 284 >> 2];
   HEAP32[$1 + 48 >> 2] = $2;
   HEAP32[$1 + 52 >> 2] = $0;
   HEAP32[HEAP32[$5 + 284 >> 2] + 16 >> 2] = 0;
   $0 = HEAP32[$5 + 284 >> 2];
   $1 = HEAPU8[$5 + 192 | 0] | HEAPU8[$5 + 193 | 0] << 8 | (HEAPU8[$5 + 194 | 0] << 16 | HEAPU8[$5 + 195 | 0] << 24);
   HEAP8[$0 + 16 | 0] = $1;
   HEAP8[$0 + 17 | 0] = $1 >>> 8;
   HEAP8[$0 + 18 | 0] = $1 >>> 16;
   HEAP8[$0 + 19 | 0] = $1 >>> 24;
   $2 = HEAP32[$5 + 272 >> 2];
   $0 = HEAP32[$2 + 12 >> 2];
   $1 = HEAP32[$2 + 16 >> 2];
   $2 = $0;
   $0 = HEAP32[$5 + 284 >> 2];
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $1;
   break label$1;
  }
  $0 = $5 + 224 | 0;
  wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $0), 
  HEAPF32[wasm2js_i32$0 + 64 >> 2] = wasm2js_f32$0;
  if (!(HEAPF32[$5 + 64 >> 2] > Math_fround(0))) {
   __assert_fail(7935, 5789, 131, 9436);
   wasm2js_trap();
  }
  $6 = HEAPF32[$5 + 64 >> 2];
  operator__28float_2c_20b2Vec2_20const__29($5 + 40 | 0, HEAPF32[$5 + 220 >> 2], $5 + 240 | 0);
  operator__28float_2c_20b2Vec2_20const__29($5 + 32 | 0, HEAPF32[$5 + 208 >> 2], $5 + 232 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($5 + 48 | 0, $5 + 40 | 0, $5 + 32 | 0);
  operator__28float_2c_20b2Vec2_20const__29($5 + 56 | 0, Math_fround(Math_fround(1) / $6), $5 + 48 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 24 | 0, $5 + 260 | 0, $5 + 56 | 0);
  $0 = $5 + 24 | 0;
  wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $0), 
  HEAPF32[wasm2js_i32$0 + 20 >> 2] = wasm2js_f32$0;
  if (HEAPF32[$5 + 20 >> 2] > Math_fround(HEAPF32[$5 + 196 >> 2] * HEAPF32[$5 + 196 >> 2])) {
   break label$1;
  }
  b2Vec2__b2Vec2_28float_2c_20float_29($5 + 12 | 0, Math_fround(-HEAPF32[$5 + 228 >> 2]), HEAPF32[$5 + 224 >> 2]);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 4 | 0, $5 + 260 | 0, $5 + 240 | 0);
  if (b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 12 | 0, $5 + 4 | 0) < Math_fround(0)) {
   b2Vec2__Set_28float_2c_20float_29($5 + 12 | 0, Math_fround(-HEAPF32[$5 + 12 >> 2]), Math_fround(-HEAPF32[$5 + 16 >> 2]));
  }
  b2Vec2__Normalize_28_29($5 + 12 | 0);
  HEAP8[$5 + 192 | 0] = 0;
  HEAP8[$5 + 194 | 0] = 1;
  HEAP32[HEAP32[$5 + 284 >> 2] + 60 >> 2] = 1;
  HEAP32[HEAP32[$5 + 284 >> 2] + 56 >> 2] = 1;
  $0 = HEAP32[$5 + 16 >> 2];
  $1 = HEAP32[$5 + 12 >> 2];
  $2 = $1;
  $1 = HEAP32[$5 + 284 >> 2];
  HEAP32[$1 + 40 >> 2] = $2;
  HEAP32[$1 + 44 >> 2] = $0;
  $1 = HEAP32[$5 + 244 >> 2];
  $0 = HEAP32[$5 + 240 >> 2];
  $2 = $0;
  $0 = HEAP32[$5 + 284 >> 2];
  HEAP32[$0 + 48 >> 2] = $2;
  HEAP32[$0 + 52 >> 2] = $1;
  HEAP32[HEAP32[$5 + 284 >> 2] + 16 >> 2] = 0;
  $0 = HEAP32[$5 + 284 >> 2];
  $1 = HEAPU8[$5 + 192 | 0] | HEAPU8[$5 + 193 | 0] << 8 | (HEAPU8[$5 + 194 | 0] << 16 | HEAPU8[$5 + 195 | 0] << 24);
  HEAP8[$0 + 16 | 0] = $1;
  HEAP8[$0 + 17 | 0] = $1 >>> 8;
  HEAP8[$0 + 18 | 0] = $1 >>> 16;
  HEAP8[$0 + 19 | 0] = $1 >>> 24;
  $2 = HEAP32[$5 + 272 >> 2];
  $1 = HEAP32[$2 + 12 >> 2];
  $0 = HEAP32[$2 + 16 >> 2];
  $2 = $1;
  $1 = HEAP32[$5 + 284 >> 2];
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $0;
 }
 __stack_pointer = $5 + 288 | 0;
}

function b2DynamicTree__InsertLeaf_28int_29($0, $1) {
 var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 176 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 172 >> 2] = $0;
 HEAP32[$2 + 168 >> 2] = $1;
 $1 = HEAP32[$2 + 172 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 1;
 label$1: {
  if (HEAP32[$1 >> 2] == -1) {
   HEAP32[$1 >> 2] = HEAP32[$2 + 168 >> 2];
   HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$1 >> 2], 40) | 0) + 20 >> 2] = -1;
   break label$1;
  }
  $4 = HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 168 >> 2], 40) | 0;
  $5 = HEAP32[$4 + 8 >> 2];
  $0 = HEAP32[$4 + 12 >> 2];
  HEAP32[$2 + 160 >> 2] = $5;
  HEAP32[$2 + 164 >> 2] = $0;
  $5 = HEAP32[$4 + 4 >> 2];
  $0 = HEAP32[$4 >> 2];
  HEAP32[$2 + 152 >> 2] = $0;
  HEAP32[$2 + 156 >> 2] = $5;
  HEAP32[$2 + 148 >> 2] = HEAP32[$1 >> 2];
  while (1) {
   label$4: {
    if (b2TreeNode__IsLeaf_28_29_20const(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 148 >> 2], 40) | 0) & 1) {
     break label$4;
    }
    HEAP32[$2 + 144 >> 2] = HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 148 >> 2], 40) | 0) + 24 >> 2];
    HEAP32[$2 + 140 >> 2] = HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 148 >> 2], 40) | 0) + 28 >> 2];
    wasm2js_i32$0 = $2, wasm2js_f32$0 = b2AABB__GetPerimeter_28_29_20const(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 148 >> 2], 40) | 0), 
    HEAPF32[wasm2js_i32$0 + 136 >> 2] = wasm2js_f32$0;
    b2AABB__b2AABB_28_29($2 + 120 | 0);
    b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29($2 + 120 | 0, HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 148 >> 2], 40) | 0, $2 + 152 | 0);
    wasm2js_i32$0 = $2, wasm2js_f32$0 = b2AABB__GetPerimeter_28_29_20const($2 + 120 | 0), 
    HEAPF32[wasm2js_i32$0 + 116 >> 2] = wasm2js_f32$0;
    $3 = HEAPF32[$2 + 116 >> 2];
    HEAPF32[$2 + 112 >> 2] = $3 + $3;
    $3 = Math_fround(HEAPF32[$2 + 116 >> 2] - HEAPF32[$2 + 136 >> 2]);
    HEAPF32[$2 + 108 >> 2] = $3 + $3;
    label$5: {
     if (b2TreeNode__IsLeaf_28_29_20const(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 144 >> 2], 40) | 0) & 1) {
      b2AABB__b2AABB_28_29($2 + 88 | 0);
      b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29($2 + 88 | 0, $2 + 152 | 0, HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 144 >> 2], 40) | 0);
      wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(b2AABB__GetPerimeter_28_29_20const($2 + 88 | 0) + HEAPF32[$2 + 108 >> 2]), 
      HEAPF32[wasm2js_i32$0 + 104 >> 2] = wasm2js_f32$0;
      break label$5;
     }
     b2AABB__b2AABB_28_29($2 + 72 | 0);
     b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29($2 + 72 | 0, $2 + 152 | 0, HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 144 >> 2], 40) | 0);
     wasm2js_i32$0 = $2, wasm2js_f32$0 = b2AABB__GetPerimeter_28_29_20const(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 144 >> 2], 40) | 0), 
     HEAPF32[wasm2js_i32$0 + 68 >> 2] = wasm2js_f32$0;
     wasm2js_i32$0 = $2, wasm2js_f32$0 = b2AABB__GetPerimeter_28_29_20const($2 + 72 | 0), 
     HEAPF32[wasm2js_i32$0 + 64 >> 2] = wasm2js_f32$0;
     HEAPF32[$2 + 104 >> 2] = Math_fround(HEAPF32[$2 + 64 >> 2] - HEAPF32[$2 + 68 >> 2]) + HEAPF32[$2 + 108 >> 2];
    }
    label$7: {
     if (b2TreeNode__IsLeaf_28_29_20const(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 140 >> 2], 40) | 0) & 1) {
      b2AABB__b2AABB_28_29($2 + 44 | 0);
      b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29($2 + 44 | 0, $2 + 152 | 0, HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 140 >> 2], 40) | 0);
      wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(b2AABB__GetPerimeter_28_29_20const($2 + 44 | 0) + HEAPF32[$2 + 108 >> 2]), 
      HEAPF32[wasm2js_i32$0 + 60 >> 2] = wasm2js_f32$0;
      break label$7;
     }
     b2AABB__b2AABB_28_29($2 + 28 | 0);
     b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29($2 + 28 | 0, $2 + 152 | 0, HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 140 >> 2], 40) | 0);
     wasm2js_i32$0 = $2, wasm2js_f32$0 = b2AABB__GetPerimeter_28_29_20const(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 140 >> 2], 40) | 0), 
     HEAPF32[wasm2js_i32$0 + 24 >> 2] = wasm2js_f32$0;
     wasm2js_i32$0 = $2, wasm2js_f32$0 = b2AABB__GetPerimeter_28_29_20const($2 + 28 | 0), 
     HEAPF32[wasm2js_i32$0 + 20 >> 2] = wasm2js_f32$0;
     HEAPF32[$2 + 60 >> 2] = Math_fround(HEAPF32[$2 + 20 >> 2] - HEAPF32[$2 + 24 >> 2]) + HEAPF32[$2 + 108 >> 2];
    }
    if (!(!(HEAPF32[$2 + 112 >> 2] < HEAPF32[$2 + 104 >> 2]) | !(HEAPF32[$2 + 112 >> 2] < HEAPF32[$2 + 60 >> 2]))) {
     break label$4;
    }
    label$10: {
     if (HEAPF32[$2 + 104 >> 2] < HEAPF32[$2 + 60 >> 2]) {
      HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 144 >> 2];
      break label$10;
     }
     HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 140 >> 2];
    }
    continue;
   }
   break;
  }
  HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 148 >> 2];
  HEAP32[$2 + 12 >> 2] = HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 16 >> 2], 40) | 0) + 20 >> 2];
  wasm2js_i32$0 = $2, wasm2js_i32$1 = b2DynamicTree__AllocateNode_28_29($1), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0) + 20 >> 2] = HEAP32[$2 + 12 >> 2];
  HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0) + 16 >> 2] = 0;
  b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0, $2 + 152 | 0, HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 16 >> 2], 40) | 0);
  HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0) + 32 >> 2] = HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 16 >> 2], 40) | 0) + 32 >> 2] + 1;
  label$12: {
   if (HEAP32[$2 + 12 >> 2] != -1) {
    label$14: {
     if (HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 40) | 0) + 24 >> 2] == HEAP32[$2 + 16 >> 2]) {
      HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 40) | 0) + 24 >> 2] = HEAP32[$2 + 8 >> 2];
      break label$14;
     }
     HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 40) | 0) + 28 >> 2] = HEAP32[$2 + 8 >> 2];
    }
    HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0) + 24 >> 2] = HEAP32[$2 + 16 >> 2];
    HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0) + 28 >> 2] = HEAP32[$2 + 168 >> 2];
    HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 16 >> 2], 40) | 0) + 20 >> 2] = HEAP32[$2 + 8 >> 2];
    HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 168 >> 2], 40) | 0) + 20 >> 2] = HEAP32[$2 + 8 >> 2];
    break label$12;
   }
   HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0) + 24 >> 2] = HEAP32[$2 + 16 >> 2];
   HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0) + 28 >> 2] = HEAP32[$2 + 168 >> 2];
   HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 16 >> 2], 40) | 0) + 20 >> 2] = HEAP32[$2 + 8 >> 2];
   HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 168 >> 2], 40) | 0) + 20 >> 2] = HEAP32[$2 + 8 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$2 + 8 >> 2];
  }
  HEAP32[$2 + 148 >> 2] = HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 168 >> 2], 40) | 0) + 20 >> 2];
  while (1) {
   if (HEAP32[$2 + 148 >> 2] == -1) {
    break label$1;
   }
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2DynamicTree__Balance_28int_29($1, HEAP32[$2 + 148 >> 2]), 
   HEAP32[wasm2js_i32$0 + 148 >> 2] = wasm2js_i32$1;
   HEAP32[$2 + 4 >> 2] = HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 148 >> 2], 40) | 0) + 24 >> 2];
   HEAP32[$2 >> 2] = HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 148 >> 2], 40) | 0) + 28 >> 2];
   if (HEAP32[$2 + 4 >> 2] == -1) {
    __assert_fail(12220, 5858, 327, 7846);
    wasm2js_trap();
   }
   if (HEAP32[$2 >> 2] == -1) {
    __assert_fail(12205, 5858, 328, 7846);
    wasm2js_trap();
   } else {
    $0 = int_20b2Max_int__28int_2c_20int_29(HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 4 >> 2], 40) | 0) + 32 >> 2], HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 >> 2], 40) | 0) + 32 >> 2]);
    HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 148 >> 2], 40) | 0) + 32 >> 2] = $0 + 1;
    b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 148 >> 2], 40) | 0, HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 4 >> 2], 40) | 0, HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 >> 2], 40) | 0);
    HEAP32[$2 + 148 >> 2] = HEAP32[(HEAP32[$1 + 4 >> 2] + Math_imul(HEAP32[$2 + 148 >> 2], 40) | 0) + 20 >> 2];
    continue;
   }
  }
 }
 __stack_pointer = $2 + 176 | 0;
}

function b2DynamicTree__Balance_28int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 $0 = HEAP32[$2 + 72 >> 2];
 if (HEAP32[$2 + 68 >> 2] == -1) {
  __assert_fail(12194, 5858, 402, 9821);
  wasm2js_trap();
 }
 HEAP32[$2 + 64 >> 2] = HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 68 >> 2], 40);
 label$2: {
  if (!(!(b2TreeNode__IsLeaf_28_29_20const(HEAP32[$2 + 64 >> 2]) & 1) & HEAP32[HEAP32[$2 + 64 >> 2] + 32 >> 2] >= 2)) {
   HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 68 >> 2];
   break label$2;
  }
  HEAP32[$2 + 60 >> 2] = HEAP32[HEAP32[$2 + 64 >> 2] + 24 >> 2];
  HEAP32[$2 + 56 >> 2] = HEAP32[HEAP32[$2 + 64 >> 2] + 28 >> 2];
  if (!(HEAP32[$2 + 60 >> 2] < HEAP32[$0 + 12 >> 2] & HEAP32[$2 + 60 >> 2] >= 0)) {
   __assert_fail(1618, 5858, 412, 9821);
   wasm2js_trap();
  }
  if (!(HEAP32[$2 + 56 >> 2] < HEAP32[$0 + 12 >> 2] & HEAP32[$2 + 56 >> 2] >= 0)) {
   __assert_fail(1587, 5858, 413, 9821);
   wasm2js_trap();
  }
  HEAP32[$2 + 52 >> 2] = HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 60 >> 2], 40);
  HEAP32[$2 + 48 >> 2] = HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 56 >> 2], 40);
  HEAP32[$2 + 44 >> 2] = HEAP32[HEAP32[$2 + 48 >> 2] + 32 >> 2] - HEAP32[HEAP32[$2 + 52 >> 2] + 32 >> 2];
  if (HEAP32[$2 + 44 >> 2] > 1) {
   HEAP32[$2 + 40 >> 2] = HEAP32[HEAP32[$2 + 48 >> 2] + 24 >> 2];
   HEAP32[$2 + 36 >> 2] = HEAP32[HEAP32[$2 + 48 >> 2] + 28 >> 2];
   HEAP32[$2 + 32 >> 2] = HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 40 >> 2], 40);
   HEAP32[$2 + 28 >> 2] = HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 36 >> 2], 40);
   if (!(HEAP32[$2 + 40 >> 2] < HEAP32[$0 + 12 >> 2] & HEAP32[$2 + 40 >> 2] >= 0)) {
    __assert_fail(1494, 5858, 427, 9821);
    wasm2js_trap();
   }
   if (!(HEAP32[$2 + 36 >> 2] < HEAP32[$0 + 12 >> 2] & HEAP32[$2 + 36 >> 2] >= 0)) {
    __assert_fail(1463, 5858, 428, 9821);
    wasm2js_trap();
   }
   HEAP32[HEAP32[$2 + 48 >> 2] + 24 >> 2] = HEAP32[$2 + 68 >> 2];
   HEAP32[HEAP32[$2 + 48 >> 2] + 20 >> 2] = HEAP32[HEAP32[$2 + 64 >> 2] + 20 >> 2];
   HEAP32[HEAP32[$2 + 64 >> 2] + 20 >> 2] = HEAP32[$2 + 56 >> 2];
   label$14: {
    if (HEAP32[HEAP32[$2 + 48 >> 2] + 20 >> 2] != -1) {
     if (HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[HEAP32[$2 + 48 >> 2] + 20 >> 2], 40) | 0) + 24 >> 2] == HEAP32[$2 + 68 >> 2]) {
      HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[HEAP32[$2 + 48 >> 2] + 20 >> 2], 40) | 0) + 24 >> 2] = HEAP32[$2 + 56 >> 2];
      break label$14;
     }
     if (HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[HEAP32[$2 + 48 >> 2] + 20 >> 2], 40) | 0) + 28 >> 2] != HEAP32[$2 + 68 >> 2]) {
      __assert_fail(10991, 5858, 444, 9821);
      wasm2js_trap();
     }
     HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[HEAP32[$2 + 48 >> 2] + 20 >> 2], 40) | 0) + 28 >> 2] = HEAP32[$2 + 56 >> 2];
     break label$14;
    }
    HEAP32[$0 >> 2] = HEAP32[$2 + 56 >> 2];
   }
   label$18: {
    if (HEAP32[HEAP32[$2 + 32 >> 2] + 32 >> 2] > HEAP32[HEAP32[$2 + 28 >> 2] + 32 >> 2]) {
     HEAP32[HEAP32[$2 + 48 >> 2] + 28 >> 2] = HEAP32[$2 + 40 >> 2];
     HEAP32[HEAP32[$2 + 64 >> 2] + 28 >> 2] = HEAP32[$2 + 36 >> 2];
     HEAP32[HEAP32[$2 + 28 >> 2] + 20 >> 2] = HEAP32[$2 + 68 >> 2];
     b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29(HEAP32[$2 + 64 >> 2], HEAP32[$2 + 52 >> 2], HEAP32[$2 + 28 >> 2]);
     b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 64 >> 2], HEAP32[$2 + 32 >> 2]);
     $0 = int_20b2Max_int__28int_2c_20int_29(HEAP32[HEAP32[$2 + 52 >> 2] + 32 >> 2], HEAP32[HEAP32[$2 + 28 >> 2] + 32 >> 2]);
     HEAP32[HEAP32[$2 + 64 >> 2] + 32 >> 2] = $0 + 1;
     $0 = int_20b2Max_int__28int_2c_20int_29(HEAP32[HEAP32[$2 + 64 >> 2] + 32 >> 2], HEAP32[HEAP32[$2 + 32 >> 2] + 32 >> 2]);
     HEAP32[HEAP32[$2 + 48 >> 2] + 32 >> 2] = $0 + 1;
     break label$18;
    }
    HEAP32[HEAP32[$2 + 48 >> 2] + 28 >> 2] = HEAP32[$2 + 36 >> 2];
    HEAP32[HEAP32[$2 + 64 >> 2] + 28 >> 2] = HEAP32[$2 + 40 >> 2];
    HEAP32[HEAP32[$2 + 32 >> 2] + 20 >> 2] = HEAP32[$2 + 68 >> 2];
    b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29(HEAP32[$2 + 64 >> 2], HEAP32[$2 + 52 >> 2], HEAP32[$2 + 32 >> 2]);
    b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 64 >> 2], HEAP32[$2 + 28 >> 2]);
    $0 = int_20b2Max_int__28int_2c_20int_29(HEAP32[HEAP32[$2 + 52 >> 2] + 32 >> 2], HEAP32[HEAP32[$2 + 32 >> 2] + 32 >> 2]);
    HEAP32[HEAP32[$2 + 64 >> 2] + 32 >> 2] = $0 + 1;
    $0 = int_20b2Max_int__28int_2c_20int_29(HEAP32[HEAP32[$2 + 64 >> 2] + 32 >> 2], HEAP32[HEAP32[$2 + 28 >> 2] + 32 >> 2]);
    HEAP32[HEAP32[$2 + 48 >> 2] + 32 >> 2] = $0 + 1;
   }
   HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 56 >> 2];
   break label$2;
  }
  if (HEAP32[$2 + 44 >> 2] < -1) {
   HEAP32[$2 + 24 >> 2] = HEAP32[HEAP32[$2 + 52 >> 2] + 24 >> 2];
   HEAP32[$2 + 20 >> 2] = HEAP32[HEAP32[$2 + 52 >> 2] + 28 >> 2];
   HEAP32[$2 + 16 >> 2] = HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 24 >> 2], 40);
   HEAP32[$2 + 12 >> 2] = HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 20 >> 2], 40);
   if (!(HEAP32[$2 + 24 >> 2] < HEAP32[$0 + 12 >> 2] & HEAP32[$2 + 24 >> 2] >= 0)) {
    __assert_fail(1556, 5858, 487, 9821);
    wasm2js_trap();
   }
   if (!(HEAP32[$2 + 20 >> 2] < HEAP32[$0 + 12 >> 2] & HEAP32[$2 + 20 >> 2] >= 0)) {
    __assert_fail(1525, 5858, 488, 9821);
    wasm2js_trap();
   }
   HEAP32[HEAP32[$2 + 52 >> 2] + 24 >> 2] = HEAP32[$2 + 68 >> 2];
   HEAP32[HEAP32[$2 + 52 >> 2] + 20 >> 2] = HEAP32[HEAP32[$2 + 64 >> 2] + 20 >> 2];
   HEAP32[HEAP32[$2 + 64 >> 2] + 20 >> 2] = HEAP32[$2 + 60 >> 2];
   label$25: {
    if (HEAP32[HEAP32[$2 + 52 >> 2] + 20 >> 2] != -1) {
     if (HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[HEAP32[$2 + 52 >> 2] + 20 >> 2], 40) | 0) + 24 >> 2] == HEAP32[$2 + 68 >> 2]) {
      HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[HEAP32[$2 + 52 >> 2] + 20 >> 2], 40) | 0) + 24 >> 2] = HEAP32[$2 + 60 >> 2];
      break label$25;
     }
     if (HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[HEAP32[$2 + 52 >> 2] + 20 >> 2], 40) | 0) + 28 >> 2] != HEAP32[$2 + 68 >> 2]) {
      __assert_fail(11023, 5858, 504, 9821);
      wasm2js_trap();
     }
     HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[HEAP32[$2 + 52 >> 2] + 20 >> 2], 40) | 0) + 28 >> 2] = HEAP32[$2 + 60 >> 2];
     break label$25;
    }
    HEAP32[$0 >> 2] = HEAP32[$2 + 60 >> 2];
   }
   label$29: {
    if (HEAP32[HEAP32[$2 + 16 >> 2] + 32 >> 2] > HEAP32[HEAP32[$2 + 12 >> 2] + 32 >> 2]) {
     HEAP32[HEAP32[$2 + 52 >> 2] + 28 >> 2] = HEAP32[$2 + 24 >> 2];
     HEAP32[HEAP32[$2 + 64 >> 2] + 24 >> 2] = HEAP32[$2 + 20 >> 2];
     HEAP32[HEAP32[$2 + 12 >> 2] + 20 >> 2] = HEAP32[$2 + 68 >> 2];
     b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29(HEAP32[$2 + 64 >> 2], HEAP32[$2 + 48 >> 2], HEAP32[$2 + 12 >> 2]);
     b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 64 >> 2], HEAP32[$2 + 16 >> 2]);
     $0 = int_20b2Max_int__28int_2c_20int_29(HEAP32[HEAP32[$2 + 48 >> 2] + 32 >> 2], HEAP32[HEAP32[$2 + 12 >> 2] + 32 >> 2]);
     HEAP32[HEAP32[$2 + 64 >> 2] + 32 >> 2] = $0 + 1;
     $0 = int_20b2Max_int__28int_2c_20int_29(HEAP32[HEAP32[$2 + 64 >> 2] + 32 >> 2], HEAP32[HEAP32[$2 + 16 >> 2] + 32 >> 2]);
     HEAP32[HEAP32[$2 + 52 >> 2] + 32 >> 2] = $0 + 1;
     break label$29;
    }
    HEAP32[HEAP32[$2 + 52 >> 2] + 28 >> 2] = HEAP32[$2 + 20 >> 2];
    HEAP32[HEAP32[$2 + 64 >> 2] + 24 >> 2] = HEAP32[$2 + 24 >> 2];
    HEAP32[HEAP32[$2 + 16 >> 2] + 20 >> 2] = HEAP32[$2 + 68 >> 2];
    b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29(HEAP32[$2 + 64 >> 2], HEAP32[$2 + 48 >> 2], HEAP32[$2 + 16 >> 2]);
    b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 64 >> 2], HEAP32[$2 + 12 >> 2]);
    $0 = int_20b2Max_int__28int_2c_20int_29(HEAP32[HEAP32[$2 + 48 >> 2] + 32 >> 2], HEAP32[HEAP32[$2 + 16 >> 2] + 32 >> 2]);
    HEAP32[HEAP32[$2 + 64 >> 2] + 32 >> 2] = $0 + 1;
    $0 = int_20b2Max_int__28int_2c_20int_29(HEAP32[HEAP32[$2 + 64 >> 2] + 32 >> 2], HEAP32[HEAP32[$2 + 12 >> 2] + 32 >> 2]);
    HEAP32[HEAP32[$2 + 52 >> 2] + 32 >> 2] = $0 + 1;
   }
   HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 60 >> 2];
   break label$2;
  }
  HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 68 >> 2];
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}

function b2SeparationFunction__Initialize_28b2SimplexCache_20const__2c_20b2DistanceProxy_20const__2c_20b2Sweep_20const__2c_20b2DistanceProxy_20const__2c_20b2Sweep_20const__2c_20float_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $7 = __stack_pointer - 336 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 328 >> 2] = $0;
 HEAP32[$7 + 324 >> 2] = $1;
 HEAP32[$7 + 320 >> 2] = $2;
 HEAP32[$7 + 316 >> 2] = $3;
 HEAP32[$7 + 312 >> 2] = $4;
 HEAP32[$7 + 308 >> 2] = $5;
 HEAPF32[$7 + 304 >> 2] = $6;
 $2 = HEAP32[$7 + 328 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$7 + 320 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$7 + 312 >> 2];
 HEAP32[$7 + 300 >> 2] = HEAPU16[HEAP32[$7 + 324 >> 2] + 4 >> 1];
 if (!(HEAP32[$7 + 300 >> 2] < 3 & HEAP32[$7 + 300 >> 2] > 0)) {
  __assert_fail(11828, 5237, 56, 8434);
  wasm2js_trap();
 }
 $3 = HEAP32[$7 + 316 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $0 = $2;
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$0 + 40 >> 2] = HEAP32[$3 + 32 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 $1 = HEAP32[$3 + 24 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 32 >> 2] = $4;
 HEAP32[$1 + 36 >> 2] = $0;
 $1 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 16 >> 2];
 $4 = $0;
 $0 = $2;
 HEAP32[$0 + 24 >> 2] = $4;
 HEAP32[$0 + 28 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $3 = $1;
 $1 = $2;
 HEAP32[$1 + 16 >> 2] = $3;
 HEAP32[$1 + 20 >> 2] = $0;
 $3 = HEAP32[$7 + 308 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $0 = $2;
 HEAP32[$0 + 44 >> 2] = $4;
 HEAP32[$0 + 48 >> 2] = $1;
 HEAP32[$0 + 76 >> 2] = HEAP32[$3 + 32 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 $1 = HEAP32[$3 + 24 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 68 >> 2] = $4;
 HEAP32[$1 + 72 >> 2] = $0;
 $1 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 16 >> 2];
 $4 = $0;
 $0 = $2;
 HEAP32[$0 + 60 >> 2] = $4;
 HEAP32[$0 + 64 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $3 = $1;
 $1 = $2;
 HEAP32[$1 + 52 >> 2] = $3;
 HEAP32[$1 + 56 >> 2] = $0;
 b2Transform__b2Transform_28_29($7 + 284 | 0);
 b2Transform__b2Transform_28_29($7 + 268 | 0);
 b2Sweep__GetTransform_28b2Transform__2c_20float_29_20const($1 + 8 | 0, $7 + 284 | 0, HEAPF32[$7 + 304 >> 2]);
 b2Sweep__GetTransform_28b2Transform__2c_20float_29_20const($1 + 44 | 0, $7 + 268 | 0, HEAPF32[$7 + 304 >> 2]);
 label$3: {
  if (HEAP32[$7 + 300 >> 2] == 1) {
   HEAP32[$2 + 80 >> 2] = 0;
   $3 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$2 >> 2], HEAPU8[HEAP32[$7 + 324 >> 2] + 6 | 0]);
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   HEAP32[$7 + 256 >> 2] = $0;
   HEAP32[$7 + 260 >> 2] = $1;
   $3 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$2 + 4 >> 2], HEAPU8[HEAP32[$7 + 324 >> 2] + 9 | 0]);
   $1 = HEAP32[$3 >> 2];
   $0 = HEAP32[$3 + 4 >> 2];
   HEAP32[$7 + 248 >> 2] = $1;
   HEAP32[$7 + 252 >> 2] = $0;
   b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($7 + 240 | 0, $7 + 284 | 0, $7 + 256 | 0);
   b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($7 + 232 | 0, $7 + 268 | 0, $7 + 248 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($7 + 224 | 0, $7 + 232 | 0, $7 + 240 | 0);
   $1 = HEAP32[$7 + 228 >> 2];
   $0 = HEAP32[$7 + 224 >> 2];
   $3 = $0;
   $0 = $2;
   HEAP32[$0 + 92 >> 2] = $3;
   HEAP32[$0 + 96 >> 2] = $1;
   wasm2js_i32$0 = $7, wasm2js_f32$0 = b2Vec2__Normalize_28_29($0 + 92 | 0), HEAPF32[wasm2js_i32$0 + 220 >> 2] = wasm2js_f32$0;
   HEAPF32[$7 + 332 >> 2] = HEAPF32[$7 + 220 >> 2];
   break label$3;
  }
  if (HEAPU8[HEAP32[$7 + 324 >> 2] + 6 | 0] == HEAPU8[HEAP32[$7 + 324 >> 2] + 7 | 0]) {
   HEAP32[$2 + 80 >> 2] = 2;
   $3 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$7 + 312 >> 2], HEAPU8[HEAP32[$7 + 324 >> 2] + 9 | 0]);
   $1 = HEAP32[$3 >> 2];
   $0 = HEAP32[$3 + 4 >> 2];
   HEAP32[$7 + 208 >> 2] = $1;
   HEAP32[$7 + 212 >> 2] = $0;
   $3 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$7 + 312 >> 2], HEAPU8[HEAP32[$7 + 324 >> 2] + 10 | 0]);
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   HEAP32[$7 + 200 >> 2] = $0;
   HEAP32[$7 + 204 >> 2] = $1;
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($7 + 184 | 0, $7 + 200 | 0, $7 + 208 | 0);
   b2Cross_28b2Vec2_20const__2c_20float_29($7 + 192 | 0, $7 + 184 | 0, Math_fround(1));
   $0 = HEAP32[$7 + 196 >> 2];
   $1 = HEAP32[$7 + 192 >> 2];
   $3 = $1;
   $1 = $2;
   HEAP32[$1 + 92 >> 2] = $3;
   HEAP32[$1 + 96 >> 2] = $0;
   b2Vec2__Normalize_28_29($1 + 92 | 0);
   b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($7 + 176 | 0, $7 + 276 | 0, $1 + 92 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($7 + 160 | 0, $7 + 208 | 0, $7 + 200 | 0);
   operator__28float_2c_20b2Vec2_20const__29($7 + 168 | 0, Math_fround(.5), $7 + 160 | 0);
   $1 = HEAP32[$7 + 172 >> 2];
   $0 = HEAP32[$7 + 168 >> 2];
   $3 = $0;
   $0 = $2;
   HEAP32[$0 + 84 >> 2] = $3;
   HEAP32[$0 + 88 >> 2] = $1;
   b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($7 + 152 | 0, $7 + 268 | 0, $0 + 84 | 0);
   $3 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$7 + 320 >> 2], HEAPU8[HEAP32[$7 + 324 >> 2] + 6 | 0]);
   $1 = HEAP32[$3 >> 2];
   $0 = HEAP32[$3 + 4 >> 2];
   HEAP32[$7 + 144 >> 2] = $1;
   HEAP32[$7 + 148 >> 2] = $0;
   b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($7 + 136 | 0, $7 + 284 | 0, $7 + 144 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($7 + 124 | 0, $7 + 136 | 0, $7 + 152 | 0);
   wasm2js_i32$0 = $7, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($7 + 124 | 0, $7 + 176 | 0), 
   HEAPF32[wasm2js_i32$0 + 132 >> 2] = wasm2js_f32$0;
   if (HEAPF32[$7 + 132 >> 2] < Math_fround(0)) {
    b2Vec2__operator__28_29_20const($7 + 116 | 0, $2 + 92 | 0);
    $1 = HEAP32[$7 + 120 >> 2];
    $0 = HEAP32[$7 + 116 >> 2];
    $3 = $0;
    $0 = $2;
    HEAP32[$0 + 92 >> 2] = $3;
    HEAP32[$0 + 96 >> 2] = $1;
    HEAPF32[$7 + 132 >> 2] = -HEAPF32[$7 + 132 >> 2];
   }
   HEAPF32[$7 + 332 >> 2] = HEAPF32[$7 + 132 >> 2];
   break label$3;
  }
  HEAP32[$2 + 80 >> 2] = 1;
  $3 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$2 >> 2], HEAPU8[HEAP32[$7 + 324 >> 2] + 6 | 0]);
  $1 = HEAP32[$3 >> 2];
  $0 = HEAP32[$3 + 4 >> 2];
  HEAP32[$7 + 104 >> 2] = $1;
  HEAP32[$7 + 108 >> 2] = $0;
  $3 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$2 >> 2], HEAPU8[HEAP32[$7 + 324 >> 2] + 7 | 0]);
  $0 = HEAP32[$3 >> 2];
  $1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$7 + 96 >> 2] = $0;
  HEAP32[$7 + 100 >> 2] = $1;
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($7 + 80 | 0, $7 + 96 | 0, $7 + 104 | 0);
  b2Cross_28b2Vec2_20const__2c_20float_29($7 + 88 | 0, $7 + 80 | 0, Math_fround(1));
  $0 = HEAP32[$7 + 92 >> 2];
  $1 = HEAP32[$7 + 88 >> 2];
  $3 = $1;
  $1 = $2;
  HEAP32[$1 + 92 >> 2] = $3;
  HEAP32[$1 + 96 >> 2] = $0;
  b2Vec2__Normalize_28_29($1 + 92 | 0);
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($7 + 72 | 0, $7 + 292 | 0, $1 + 92 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($7 + 56 | 0, $7 + 104 | 0, $7 + 96 | 0);
  operator__28float_2c_20b2Vec2_20const__29($7 - -64 | 0, Math_fround(.5), $7 + 56 | 0);
  $1 = HEAP32[$7 + 68 >> 2];
  $0 = HEAP32[$7 + 64 >> 2];
  $3 = $0;
  $0 = $2;
  HEAP32[$0 + 84 >> 2] = $3;
  HEAP32[$0 + 88 >> 2] = $1;
  b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($7 + 48 | 0, $7 + 284 | 0, $0 + 84 | 0);
  $3 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$0 + 4 >> 2], HEAPU8[HEAP32[$7 + 324 >> 2] + 9 | 0]);
  $1 = HEAP32[$3 >> 2];
  $0 = HEAP32[$3 + 4 >> 2];
  HEAP32[$7 + 40 >> 2] = $1;
  HEAP32[$7 + 44 >> 2] = $0;
  b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($7 + 32 | 0, $7 + 268 | 0, $7 + 40 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($7 + 20 | 0, $7 + 32 | 0, $7 + 48 | 0);
  wasm2js_i32$0 = $7, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($7 + 20 | 0, $7 + 72 | 0), 
  HEAPF32[wasm2js_i32$0 + 28 >> 2] = wasm2js_f32$0;
  if (HEAPF32[$7 + 28 >> 2] < Math_fround(0)) {
   b2Vec2__operator__28_29_20const($7 + 12 | 0, $2 + 92 | 0);
   $1 = HEAP32[$7 + 16 >> 2];
   $0 = HEAP32[$7 + 12 >> 2];
   $3 = $0;
   $0 = $2;
   HEAP32[$0 + 92 >> 2] = $3;
   HEAP32[$0 + 96 >> 2] = $1;
   HEAPF32[$7 + 28 >> 2] = -HEAPF32[$7 + 28 >> 2];
  }
  HEAPF32[$7 + 332 >> 2] = HEAPF32[$7 + 28 >> 2];
 }
 __stack_pointer = $7 + 336 | 0;
 return HEAPF32[$7 + 332 >> 2];
}

function b2WeldJoint__InitVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 208 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 204 >> 2] = $0;
 HEAP32[$2 + 200 >> 2] = $1;
 $0 = HEAP32[$2 + 204 >> 2];
 HEAP32[$0 + 116 >> 2] = HEAP32[HEAP32[$0 + 48 >> 2] + 8 >> 2];
 HEAP32[$0 + 120 >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] + 8 >> 2];
 $4 = HEAP32[$0 + 48 >> 2];
 $3 = HEAP32[$4 + 28 >> 2];
 $1 = HEAP32[$4 + 32 >> 2];
 HEAP32[$0 + 140 >> 2] = $3;
 HEAP32[$0 + 144 >> 2] = $1;
 $4 = HEAP32[$0 + 52 >> 2];
 $1 = HEAP32[$4 + 28 >> 2];
 $3 = HEAP32[$4 + 32 >> 2];
 HEAP32[$0 + 148 >> 2] = $1;
 HEAP32[$0 + 152 >> 2] = $3;
 HEAPF32[$0 + 156 >> 2] = HEAPF32[HEAP32[$0 + 48 >> 2] + 120 >> 2];
 HEAPF32[$0 + 160 >> 2] = HEAPF32[HEAP32[$0 + 52 >> 2] + 120 >> 2];
 HEAPF32[$0 + 164 >> 2] = HEAPF32[HEAP32[$0 + 48 >> 2] + 128 >> 2];
 HEAPF32[$0 + 168 >> 2] = HEAPF32[HEAP32[$0 + 52 >> 2] + 128 >> 2];
 HEAPF32[$2 + 196 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$0 + 116 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$0 + 116 >> 2], 12) | 0;
 $3 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 184 >> 2] = $3;
 HEAP32[$2 + 188 >> 2] = $1;
 HEAPF32[$2 + 180 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$0 + 116 >> 2], 12) | 0) + 8 >> 2];
 HEAPF32[$2 + 176 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$0 + 120 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$0 + 120 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 168 >> 2] = $1;
 HEAP32[$2 + 172 >> 2] = $3;
 HEAPF32[$2 + 164 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$0 + 120 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($2 + 156 | 0, HEAPF32[$2 + 196 >> 2]);
 b2Rot__b2Rot_28float_29($2 + 148 | 0, HEAPF32[$2 + 176 >> 2]);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 132 | 0, $0 + 80 | 0, $0 + 140 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 140 | 0, $2 + 156 | 0, $2 + 132 | 0);
 $1 = HEAP32[$2 + 144 >> 2];
 $3 = HEAP32[$2 + 140 >> 2];
 HEAP32[$0 + 124 >> 2] = $3;
 HEAP32[$0 + 128 >> 2] = $1;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 116 | 0, $0 + 88 | 0, $0 + 148 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 124 | 0, $2 + 148 | 0, $2 + 116 | 0);
 $3 = HEAP32[$2 + 128 >> 2];
 $1 = HEAP32[$2 + 124 >> 2];
 HEAP32[$0 + 132 >> 2] = $1;
 HEAP32[$0 + 136 >> 2] = $3;
 HEAPF32[$2 + 112 >> 2] = HEAPF32[$0 + 156 >> 2];
 HEAPF32[$2 + 108 >> 2] = HEAPF32[$0 + 160 >> 2];
 HEAPF32[$2 + 104 >> 2] = HEAPF32[$0 + 164 >> 2];
 HEAPF32[$2 + 100 >> 2] = HEAPF32[$0 + 168 >> 2];
 b2Mat33__b2Mat33_28_29($2 - -64 | 0);
 HEAPF32[$2 + 64 >> 2] = Math_fround(Math_fround(HEAPF32[$0 + 136 >> 2] * HEAPF32[$0 + 136 >> 2]) * HEAPF32[$2 + 100 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 128 >> 2] * HEAPF32[$0 + 128 >> 2]) * HEAPF32[$2 + 104 >> 2]) + Math_fround(HEAPF32[$2 + 112 >> 2] + HEAPF32[$2 + 108 >> 2]));
 HEAPF32[$2 + 76 >> 2] = Math_fround(Math_fround(Math_fround(-HEAPF32[$0 + 128 >> 2]) * HEAPF32[$0 + 124 >> 2]) * HEAPF32[$2 + 104 >> 2]) - Math_fround(Math_fround(HEAPF32[$0 + 136 >> 2] * HEAPF32[$0 + 132 >> 2]) * HEAPF32[$2 + 100 >> 2]);
 HEAPF32[$2 + 88 >> 2] = Math_fround(Math_fround(-HEAPF32[$0 + 128 >> 2]) * HEAPF32[$2 + 104 >> 2]) - Math_fround(HEAPF32[$0 + 136 >> 2] * HEAPF32[$2 + 100 >> 2]);
 HEAPF32[$2 + 68 >> 2] = HEAPF32[$2 + 76 >> 2];
 HEAPF32[$2 + 80 >> 2] = Math_fround(Math_fround(HEAPF32[$0 + 132 >> 2] * HEAPF32[$0 + 132 >> 2]) * HEAPF32[$2 + 100 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 124 >> 2] * HEAPF32[$0 + 124 >> 2]) * HEAPF32[$2 + 104 >> 2]) + Math_fround(HEAPF32[$2 + 112 >> 2] + HEAPF32[$2 + 108 >> 2]));
 HEAPF32[$2 + 92 >> 2] = Math_fround(HEAPF32[$0 + 124 >> 2] * HEAPF32[$2 + 104 >> 2]) + Math_fround(HEAPF32[$0 + 132 >> 2] * HEAPF32[$2 + 100 >> 2]);
 HEAPF32[$2 + 72 >> 2] = HEAPF32[$2 + 88 >> 2];
 HEAPF32[$2 + 84 >> 2] = HEAPF32[$2 + 92 >> 2];
 HEAPF32[$2 + 96 >> 2] = HEAPF32[$2 + 104 >> 2] + HEAPF32[$2 + 100 >> 2];
 label$1: {
  if (HEAPF32[$0 + 68 >> 2] > Math_fround(0)) {
   b2Mat33__GetInverse22_28b2Mat33__29_20const($2 - -64 | 0, $0 + 172 | 0);
   HEAPF32[$2 + 60 >> 2] = HEAPF32[$2 + 104 >> 2] + HEAPF32[$2 + 100 >> 2];
   if (HEAPF32[$2 + 60 >> 2] > Math_fround(0)) {
    $5 = Math_fround(Math_fround(1) / HEAPF32[$2 + 60 >> 2]);
   } else {
    $5 = Math_fround(0);
   }
   HEAPF32[$2 + 56 >> 2] = $5;
   HEAPF32[$2 + 52 >> 2] = Math_fround(HEAPF32[$2 + 176 >> 2] - HEAPF32[$2 + 196 >> 2]) - HEAPF32[$0 + 96 >> 2];
   HEAPF32[$2 + 48 >> 2] = HEAPF32[$0 + 68 >> 2] * Math_fround(6.2831854820251465);
   $5 = HEAPF32[$2 + 56 >> 2];
   HEAPF32[$2 + 44 >> 2] = Math_fround(Math_fround($5 + $5) * HEAPF32[$0 + 72 >> 2]) * HEAPF32[$2 + 48 >> 2];
   HEAPF32[$2 + 40 >> 2] = Math_fround(HEAPF32[$2 + 56 >> 2] * HEAPF32[$2 + 48 >> 2]) * HEAPF32[$2 + 48 >> 2];
   HEAPF32[$2 + 36 >> 2] = HEAPF32[HEAP32[$2 + 200 >> 2] >> 2];
   HEAPF32[$0 + 100 >> 2] = HEAPF32[$2 + 36 >> 2] * Math_fround(Math_fround(HEAPF32[$2 + 36 >> 2] * HEAPF32[$2 + 40 >> 2]) + HEAPF32[$2 + 44 >> 2]);
   if (HEAPF32[$0 + 100 >> 2] != Math_fround(0)) {
    $5 = Math_fround(Math_fround(1) / HEAPF32[$0 + 100 >> 2]);
   } else {
    $5 = Math_fround(0);
   }
   HEAPF32[$0 + 100 >> 2] = $5;
   HEAPF32[$0 + 76 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 52 >> 2] * HEAPF32[$2 + 36 >> 2]) * HEAPF32[$2 + 40 >> 2]) * HEAPF32[$0 + 100 >> 2];
   HEAPF32[$2 + 60 >> 2] = HEAPF32[$2 + 60 >> 2] + HEAPF32[$0 + 100 >> 2];
   if (HEAPF32[$2 + 60 >> 2] != Math_fround(0)) {
    $5 = Math_fround(Math_fround(1) / HEAPF32[$2 + 60 >> 2]);
   } else {
    $5 = Math_fround(0);
   }
   HEAPF32[$0 + 204 >> 2] = $5;
   break label$1;
  }
  label$9: {
   if (HEAPF32[$2 + 96 >> 2] == Math_fround(0)) {
    b2Mat33__GetInverse22_28b2Mat33__29_20const($2 - -64 | 0, $0 + 172 | 0);
    break label$9;
   }
   b2Mat33__GetSymInverse33_28b2Mat33__29_20const($2 - -64 | 0, $0 + 172 | 0);
  }
  HEAPF32[$0 + 100 >> 2] = 0;
  HEAPF32[$0 + 76 >> 2] = 0;
 }
 label$11: {
  if (HEAP8[HEAP32[$2 + 200 >> 2] + 20 | 0] & 1) {
   b2Vec3__operator___28float_29($0 + 104 | 0, HEAPF32[HEAP32[$2 + 200 >> 2] + 8 >> 2]);
   b2Vec2__b2Vec2_28float_2c_20float_29($2 + 28 | 0, HEAPF32[$0 + 104 >> 2], HEAPF32[$0 + 108 >> 2]);
   operator__28float_2c_20b2Vec2_20const__29($2 + 20 | 0, HEAPF32[$2 + 112 >> 2], $2 + 28 | 0);
   b2Vec2__operator___28b2Vec2_20const__29_1($2 + 184 | 0, $2 + 20 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$2 + 104 >> 2]) * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($0 + 124 | 0, $2 + 28 | 0) + HEAPF32[$0 + 112 >> 2])) + HEAPF32[$2 + 180 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 180 >> 2] = wasm2js_f32$0;
   operator__28float_2c_20b2Vec2_20const__29($2 + 12 | 0, HEAPF32[$2 + 108 >> 2], $2 + 28 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($2 + 168 | 0, $2 + 12 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$2 + 100 >> 2] * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($0 + 132 | 0, $2 + 28 | 0) + HEAPF32[$0 + 112 >> 2])) + HEAPF32[$2 + 164 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 164 >> 2] = wasm2js_f32$0;
   break label$11;
  }
  b2Vec3__SetZero_28_29($0 + 104 | 0);
 }
 $1 = HEAP32[$2 + 188 >> 2];
 $3 = HEAP32[$2 + 184 >> 2];
 $4 = $3;
 $3 = HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$0 + 116 >> 2], 12) | 0;
 HEAP32[$3 >> 2] = $4;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$0 + 116 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 180 >> 2];
 $3 = HEAP32[$2 + 172 >> 2];
 $1 = HEAP32[$2 + 168 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$0 + 120 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $3;
 HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$0 + 120 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 164 >> 2];
 __stack_pointer = $2 + 208 | 0;
}

function b2WeldJoint__SolvePositionConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 320 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 316 >> 2] = $0;
 HEAP32[$2 + 312 >> 2] = $1;
 $3 = HEAP32[$2 + 316 >> 2];
 $4 = HEAP32[HEAP32[$2 + 312 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 116 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 304 >> 2] = $0;
 HEAP32[$2 + 308 >> 2] = $1;
 HEAPF32[$2 + 300 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 312 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 116 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 312 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 120 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 288 >> 2] = $1;
 HEAP32[$2 + 292 >> 2] = $0;
 HEAPF32[$2 + 284 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 312 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 120 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($2 + 276 | 0, HEAPF32[$2 + 300 >> 2]);
 b2Rot__b2Rot_28float_29($2 + 268 | 0, HEAPF32[$2 + 284 >> 2]);
 HEAPF32[$2 + 264 >> 2] = HEAPF32[$3 + 156 >> 2];
 HEAPF32[$2 + 260 >> 2] = HEAPF32[$3 + 160 >> 2];
 HEAPF32[$2 + 256 >> 2] = HEAPF32[$3 + 164 >> 2];
 HEAPF32[$2 + 252 >> 2] = HEAPF32[$3 + 168 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 236 | 0, $3 + 80 | 0, $3 + 140 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 244 | 0, $2 + 276 | 0, $2 + 236 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 220 | 0, $3 + 88 | 0, $3 + 148 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 228 | 0, $2 + 268 | 0, $2 + 220 | 0);
 b2Mat33__b2Mat33_28_29($2 + 176 | 0);
 HEAPF32[$2 + 176 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 232 >> 2] * HEAPF32[$2 + 232 >> 2]) * HEAPF32[$2 + 252 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 248 >> 2] * HEAPF32[$2 + 248 >> 2]) * HEAPF32[$2 + 256 >> 2]) + Math_fround(HEAPF32[$2 + 264 >> 2] + HEAPF32[$2 + 260 >> 2]));
 HEAPF32[$2 + 188 >> 2] = Math_fround(Math_fround(Math_fround(-HEAPF32[$2 + 248 >> 2]) * HEAPF32[$2 + 244 >> 2]) * HEAPF32[$2 + 256 >> 2]) - Math_fround(Math_fround(HEAPF32[$2 + 232 >> 2] * HEAPF32[$2 + 228 >> 2]) * HEAPF32[$2 + 252 >> 2]);
 HEAPF32[$2 + 200 >> 2] = Math_fround(Math_fround(-HEAPF32[$2 + 248 >> 2]) * HEAPF32[$2 + 256 >> 2]) - Math_fround(HEAPF32[$2 + 232 >> 2] * HEAPF32[$2 + 252 >> 2]);
 HEAPF32[$2 + 180 >> 2] = HEAPF32[$2 + 188 >> 2];
 HEAPF32[$2 + 192 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 228 >> 2] * HEAPF32[$2 + 228 >> 2]) * HEAPF32[$2 + 252 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 244 >> 2] * HEAPF32[$2 + 244 >> 2]) * HEAPF32[$2 + 256 >> 2]) + Math_fround(HEAPF32[$2 + 264 >> 2] + HEAPF32[$2 + 260 >> 2]));
 HEAPF32[$2 + 204 >> 2] = Math_fround(HEAPF32[$2 + 244 >> 2] * HEAPF32[$2 + 256 >> 2]) + Math_fround(HEAPF32[$2 + 228 >> 2] * HEAPF32[$2 + 252 >> 2]);
 HEAPF32[$2 + 184 >> 2] = HEAPF32[$2 + 200 >> 2];
 HEAPF32[$2 + 196 >> 2] = HEAPF32[$2 + 204 >> 2];
 HEAPF32[$2 + 208 >> 2] = HEAPF32[$2 + 256 >> 2] + HEAPF32[$2 + 252 >> 2];
 label$1: {
  if (HEAPF32[$3 + 68 >> 2] > Math_fround(0)) {
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 152 | 0, $2 + 288 | 0, $2 + 228 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 160 | 0, $2 + 152 | 0, $2 + 304 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 168 | 0, $2 + 160 | 0, $2 + 244 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Vec2__Length_28_29_20const($2 + 168 | 0), 
   HEAPF32[wasm2js_i32$0 + 216 >> 2] = wasm2js_f32$0;
   HEAPF32[$2 + 212 >> 2] = 0;
   b2Mat33__Solve22_28b2Vec2_20const__29_20const($2 + 136 | 0, $2 + 176 | 0, $2 + 168 | 0);
   b2Vec2__operator__28_29_20const($2 + 144 | 0, $2 + 136 | 0);
   operator__28float_2c_20b2Vec2_20const__29($2 + 128 | 0, HEAPF32[$2 + 264 >> 2], $2 + 144 | 0);
   b2Vec2__operator___28b2Vec2_20const__29_1($2 + 304 | 0, $2 + 128 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$2 + 256 >> 2]) * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 244 | 0, $2 + 144 | 0)) + HEAPF32[$2 + 300 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 300 >> 2] = wasm2js_f32$0;
   operator__28float_2c_20b2Vec2_20const__29($2 + 120 | 0, HEAPF32[$2 + 260 >> 2], $2 + 144 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($2 + 288 | 0, $2 + 120 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$2 + 252 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 228 | 0, $2 + 144 | 0)) + HEAPF32[$2 + 284 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 284 >> 2] = wasm2js_f32$0;
   break label$1;
  }
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 96 | 0, $2 + 288 | 0, $2 + 228 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 104 | 0, $2 + 96 | 0, $2 + 304 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 112 | 0, $2 + 104 | 0, $2 + 244 | 0);
  HEAPF32[$2 + 92 >> 2] = Math_fround(HEAPF32[$2 + 284 >> 2] - HEAPF32[$2 + 300 >> 2]) - HEAPF32[$3 + 96 >> 2];
  wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Vec2__Length_28_29_20const($2 + 112 | 0), 
  HEAPF32[wasm2js_i32$0 + 216 >> 2] = wasm2js_f32$0;
  wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Abs_float__28float_29(HEAPF32[$2 + 92 >> 2]), 
  HEAPF32[wasm2js_i32$0 + 212 >> 2] = wasm2js_f32$0;
  b2Vec3__b2Vec3_28float_2c_20float_2c_20float_29($2 + 80 | 0, HEAPF32[$2 + 112 >> 2], HEAPF32[$2 + 116 >> 2], HEAPF32[$2 + 92 >> 2]);
  b2Vec3__b2Vec3_28_29($2 - -64 | 0);
  label$3: {
   if (HEAPF32[$2 + 208 >> 2] > Math_fround(0)) {
    b2Mat33__Solve33_28b2Vec3_20const__29_20const($2 + 40 | 0, $2 + 176 | 0, $2 + 80 | 0);
    b2Vec3__operator__28_29_20const($2 + 52 | 0, $2 + 40 | 0);
    HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 60 >> 2];
    $1 = HEAP32[$2 + 56 >> 2];
    $0 = HEAP32[$2 + 52 >> 2];
    HEAP32[$2 + 64 >> 2] = $0;
    HEAP32[$2 + 68 >> 2] = $1;
    break label$3;
   }
   b2Mat33__Solve22_28b2Vec2_20const__29_20const($2 + 24 | 0, $2 + 176 | 0, $2 + 112 | 0);
   b2Vec2__operator__28_29_20const($2 + 32 | 0, $2 + 24 | 0);
   b2Vec3__Set_28float_2c_20float_2c_20float_29($2 - -64 | 0, HEAPF32[$2 + 32 >> 2], HEAPF32[$2 + 36 >> 2], Math_fround(0));
  }
  b2Vec2__b2Vec2_28float_2c_20float_29($2 + 16 | 0, HEAPF32[$2 + 64 >> 2], HEAPF32[$2 + 68 >> 2]);
  operator__28float_2c_20b2Vec2_20const__29($2 + 8 | 0, HEAPF32[$2 + 264 >> 2], $2 + 16 | 0);
  b2Vec2__operator___28b2Vec2_20const__29_1($2 + 304 | 0, $2 + 8 | 0);
  wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$2 + 256 >> 2]) * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 244 | 0, $2 + 16 | 0) + HEAPF32[$2 + 72 >> 2])) + HEAPF32[$2 + 300 >> 2]), 
  HEAPF32[wasm2js_i32$0 + 300 >> 2] = wasm2js_f32$0;
  operator__28float_2c_20b2Vec2_20const__29($2, HEAPF32[$2 + 260 >> 2], $2 + 16 | 0);
  b2Vec2__operator___28b2Vec2_20const__29($2 + 288 | 0, $2);
  wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$2 + 252 >> 2] * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 228 | 0, $2 + 16 | 0) + HEAPF32[$2 + 72 >> 2])) + HEAPF32[$2 + 284 >> 2]), 
  HEAPF32[wasm2js_i32$0 + 284 >> 2] = wasm2js_f32$0;
 }
 $0 = HEAP32[$2 + 308 >> 2];
 $1 = HEAP32[$2 + 304 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 312 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 116 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 312 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 116 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 300 >> 2];
 $1 = HEAP32[$2 + 292 >> 2];
 $0 = HEAP32[$2 + 288 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 312 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 120 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 312 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 120 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 284 >> 2];
 __stack_pointer = $2 + 320 | 0;
 $5 = HEAPF32[$2 + 216 >> 2] <= Math_fround(.004999999888241291) ? HEAPF32[$2 + 212 >> 2] <= Math_fround(.03490658849477768) : $5;
 return $5 | 0;
}

function b2World__Solve_28b2TimeStep_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 176 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 172 >> 2] = $0;
 HEAP32[$2 + 168 >> 2] = $1;
 $0 = HEAP32[$2 + 172 >> 2];
 HEAPF32[$0 + 103008 >> 2] = 0;
 HEAPF32[$0 + 103012 >> 2] = 0;
 HEAPF32[$0 + 103016 >> 2] = 0;
 b2Island__b2Island_28int_2c_20int_2c_20int_2c_20b2StackAllocator__2c_20b2ContactListener__29($2 + 116 | 0, HEAP32[$0 + 102956 >> 2], HEAP32[$0 + 102932 >> 2], HEAP32[$0 + 102960 >> 2], $0 + 68 | 0, HEAP32[$0 + 102940 >> 2]);
 HEAP32[$2 + 112 >> 2] = HEAP32[$0 + 102948 >> 2];
 while (1) {
  if (HEAP32[$2 + 112 >> 2]) {
   $1 = HEAP32[$2 + 112 >> 2];
   HEAP16[$1 + 4 >> 1] = HEAPU16[$1 + 4 >> 1] & -2;
   HEAP32[$2 + 112 >> 2] = HEAP32[HEAP32[$2 + 112 >> 2] + 96 >> 2];
   continue;
  }
  break;
 }
 HEAP32[$2 + 108 >> 2] = HEAP32[$0 + 102928 >> 2];
 while (1) {
  if (HEAP32[$2 + 108 >> 2]) {
   $1 = HEAP32[$2 + 108 >> 2];
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] & -2;
   HEAP32[$2 + 108 >> 2] = HEAP32[HEAP32[$2 + 108 >> 2] + 12 >> 2];
   continue;
  }
  break;
 }
 HEAP32[$2 + 104 >> 2] = HEAP32[$0 + 102952 >> 2];
 while (1) {
  if (HEAP32[$2 + 104 >> 2]) {
   HEAP8[HEAP32[$2 + 104 >> 2] + 60 | 0] = 0;
   HEAP32[$2 + 104 >> 2] = HEAP32[HEAP32[$2 + 104 >> 2] + 12 >> 2];
   continue;
  }
  break;
 }
 HEAP32[$2 + 100 >> 2] = HEAP32[$0 + 102956 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2StackAllocator__Allocate_28int_29($0 + 68 | 0, HEAP32[$2 + 100 >> 2] << 2), 
 HEAP32[wasm2js_i32$0 + 96 >> 2] = wasm2js_i32$1;
 HEAP32[$2 + 92 >> 2] = HEAP32[$0 + 102948 >> 2];
 while (1) {
  if (HEAP32[$2 + 92 >> 2]) {
   label$9: {
    if (HEAP16[HEAP32[$2 + 92 >> 2] + 4 >> 1] & 1) {
     break label$9;
    }
    if (!(b2Body__IsAwake_28_29_20const(HEAP32[$2 + 92 >> 2]) & 1)) {
     break label$9;
    }
    if (!(b2Body__IsEnabled_28_29_20const(HEAP32[$2 + 92 >> 2]) & 1)) {
     break label$9;
    }
    if (!b2Body__GetType_28_29_20const(HEAP32[$2 + 92 >> 2])) {
     break label$9;
    }
    b2Island__Clear_28_29($2 + 116 | 0);
    HEAP32[$2 + 88 >> 2] = 0;
    $3 = HEAP32[$2 + 92 >> 2];
    $4 = HEAP32[$2 + 96 >> 2];
    $1 = HEAP32[$2 + 88 >> 2];
    HEAP32[$2 + 88 >> 2] = $1 + 1;
    HEAP32[($1 << 2) + $4 >> 2] = $3;
    $1 = HEAP32[$2 + 92 >> 2];
    HEAP16[$1 + 4 >> 1] = HEAPU16[$1 + 4 >> 1] | 1;
    while (1) {
     if (HEAP32[$2 + 88 >> 2] > 0) {
      $3 = HEAP32[$2 + 96 >> 2];
      $1 = HEAP32[$2 + 88 >> 2] - 1 | 0;
      HEAP32[$2 + 88 >> 2] = $1;
      HEAP32[$2 + 84 >> 2] = HEAP32[($1 << 2) + $3 >> 2];
      if (!(b2Body__IsEnabled_28_29_20const(HEAP32[$2 + 84 >> 2]) & 1)) {
       __assert_fail(8548, 6054, 453, 8520);
       wasm2js_trap();
      }
      b2Island__Add_28b2Body__29($2 + 116 | 0, HEAP32[$2 + 84 >> 2]);
      $1 = HEAP32[$2 + 84 >> 2];
      HEAP16[$1 + 4 >> 1] = HEAPU16[$1 + 4 >> 1] | 2;
      if (!b2Body__GetType_28_29_20const(HEAP32[$2 + 84 >> 2])) {
       continue;
      }
      HEAP32[$2 + 80 >> 2] = HEAP32[HEAP32[$2 + 84 >> 2] + 112 >> 2];
      while (1) {
       if (HEAP32[$2 + 80 >> 2]) {
        HEAP32[$2 + 76 >> 2] = HEAP32[HEAP32[$2 + 80 >> 2] + 4 >> 2];
        label$16: {
         if (HEAP32[HEAP32[$2 + 76 >> 2] + 4 >> 2] & 1) {
          break label$16;
         }
         if (!(b2Contact__IsEnabled_28_29_20const(HEAP32[$2 + 76 >> 2]) & 1)) {
          break label$16;
         }
         if (!(b2Contact__IsTouching_28_29_20const(HEAP32[$2 + 76 >> 2]) & 1)) {
          break label$16;
         }
         HEAP8[$2 + 75 | 0] = HEAP8[HEAP32[HEAP32[$2 + 76 >> 2] + 48 >> 2] + 38 | 0] & 1;
         HEAP8[$2 + 74 | 0] = HEAP8[HEAP32[HEAP32[$2 + 76 >> 2] + 52 >> 2] + 38 | 0] & 1;
         if (HEAP8[$2 + 75 | 0] & 1 | HEAP8[$2 + 74 | 0] & 1) {
          break label$16;
         }
         b2Island__Add_28b2Contact__29($2 + 116 | 0, HEAP32[$2 + 76 >> 2]);
         $1 = HEAP32[$2 + 76 >> 2];
         HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
         HEAP32[$2 + 68 >> 2] = HEAP32[HEAP32[$2 + 80 >> 2] >> 2];
         if (HEAP16[HEAP32[$2 + 68 >> 2] + 4 >> 1] & 1) {
          break label$16;
         }
         if (HEAP32[$2 + 88 >> 2] >= HEAP32[$2 + 100 >> 2]) {
          __assert_fail(8484, 6054, 503, 8520);
          wasm2js_trap();
         }
         $3 = HEAP32[$2 + 68 >> 2];
         $4 = HEAP32[$2 + 96 >> 2];
         $1 = HEAP32[$2 + 88 >> 2];
         HEAP32[$2 + 88 >> 2] = $1 + 1;
         HEAP32[($1 << 2) + $4 >> 2] = $3;
         $1 = HEAP32[$2 + 68 >> 2];
         HEAP16[$1 + 4 >> 1] = HEAPU16[$1 + 4 >> 1] | 1;
        }
        HEAP32[$2 + 80 >> 2] = HEAP32[HEAP32[$2 + 80 >> 2] + 12 >> 2];
        continue;
       }
       break;
      }
      HEAP32[$2 + 64 >> 2] = HEAP32[HEAP32[$2 + 84 >> 2] + 108 >> 2];
      while (1) {
       if (HEAP32[$2 + 64 >> 2]) {
        label$22: {
         if (HEAP8[HEAP32[HEAP32[$2 + 64 >> 2] + 4 >> 2] + 60 | 0] & 1) {
          break label$22;
         }
         HEAP32[$2 + 60 >> 2] = HEAP32[HEAP32[$2 + 64 >> 2] >> 2];
         if (!(b2Body__IsEnabled_28_29_20const(HEAP32[$2 + 60 >> 2]) & 1)) {
          break label$22;
         }
         b2Island__Add_28b2Joint__29($2 + 116 | 0, HEAP32[HEAP32[$2 + 64 >> 2] + 4 >> 2]);
         HEAP8[HEAP32[HEAP32[$2 + 64 >> 2] + 4 >> 2] + 60 | 0] = 1;
         if (HEAP16[HEAP32[$2 + 60 >> 2] + 4 >> 1] & 1) {
          break label$22;
         }
         if (HEAP32[$2 + 88 >> 2] >= HEAP32[$2 + 100 >> 2]) {
          __assert_fail(8484, 6054, 532, 8520);
          wasm2js_trap();
         }
         $3 = HEAP32[$2 + 60 >> 2];
         $4 = HEAP32[$2 + 96 >> 2];
         $1 = HEAP32[$2 + 88 >> 2];
         HEAP32[$2 + 88 >> 2] = $1 + 1;
         HEAP32[($1 << 2) + $4 >> 2] = $3;
         $1 = HEAP32[$2 + 60 >> 2];
         HEAP16[$1 + 4 >> 1] = HEAPU16[$1 + 4 >> 1] | 1;
        }
        HEAP32[$2 + 64 >> 2] = HEAP32[HEAP32[$2 + 64 >> 2] + 12 >> 2];
        continue;
       }
       break;
      }
      continue;
     }
     break;
    }
    b2Island__Solve_28b2Profile__2c_20b2TimeStep_20const__2c_20b2Vec2_20const__2c_20bool_29($2 + 116 | 0, $2 + 28 | 0, HEAP32[$2 + 168 >> 2], $0 + 102964 | 0, HEAP8[$0 + 102972 | 0] & 1);
    HEAPF32[$0 + 103008 >> 2] = HEAPF32[$0 + 103008 >> 2] + HEAPF32[$2 + 40 >> 2];
    HEAPF32[$0 + 103012 >> 2] = HEAPF32[$0 + 103012 >> 2] + HEAPF32[$2 + 44 >> 2];
    HEAPF32[$0 + 103016 >> 2] = HEAPF32[$0 + 103016 >> 2] + HEAPF32[$2 + 48 >> 2];
    HEAP32[$2 + 24 >> 2] = 0;
    while (1) {
     if (HEAP32[$2 + 24 >> 2] < HEAP32[$2 + 144 >> 2]) {
      HEAP32[$2 + 20 >> 2] = HEAP32[HEAP32[$2 + 124 >> 2] + (HEAP32[$2 + 24 >> 2] << 2) >> 2];
      if (!b2Body__GetType_28_29_20const(HEAP32[$2 + 20 >> 2])) {
       $1 = HEAP32[$2 + 20 >> 2];
       HEAP16[$1 + 4 >> 1] = HEAPU16[$1 + 4 >> 1] & -2;
      }
      HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] + 1;
      continue;
     }
     break;
    }
   }
   HEAP32[$2 + 92 >> 2] = HEAP32[HEAP32[$2 + 92 >> 2] + 96 >> 2];
   continue;
  }
  break;
 }
 b2StackAllocator__Free_28void__29($0 + 68 | 0, HEAP32[$2 + 96 >> 2]);
 b2Timer__b2Timer_28_29($2 + 19 | 0);
 HEAP32[$2 + 12 >> 2] = HEAP32[$0 + 102948 >> 2];
 while (1) {
  if (HEAP32[$2 + 12 >> 2]) {
   label$29: {
    if (!(HEAP16[HEAP32[$2 + 12 >> 2] + 4 >> 1] & 1)) {
     break label$29;
    }
    if (!b2Body__GetType_28_29_20const(HEAP32[$2 + 12 >> 2])) {
     break label$29;
    }
    b2Body__SynchronizeFixtures_28_29(HEAP32[$2 + 12 >> 2]);
   }
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Body__GetNext_28_29(HEAP32[$2 + 12 >> 2]), 
   HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   continue;
  }
  break;
 }
 b2ContactManager__FindNewContacts_28_29($0 + 102868 | 0);
 wasm2js_i32$0 = $0, wasm2js_f32$0 = b2Timer__GetMilliseconds_28_29_20const($2 + 19 | 0), 
 HEAPF32[wasm2js_i32$0 + 103020 >> 2] = wasm2js_f32$0;
 b2Island___b2Island_28_29($2 + 116 | 0);
 __stack_pointer = $2 + 176 | 0;
}

function b2DistanceJoint__InitVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 208 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 204 >> 2] = $0;
 HEAP32[$2 + 200 >> 2] = $1;
 $0 = HEAP32[$2 + 204 >> 2];
 HEAP32[$0 + 108 >> 2] = HEAP32[HEAP32[$0 + 48 >> 2] + 8 >> 2];
 HEAP32[$0 + 112 >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] + 8 >> 2];
 $4 = HEAP32[$0 + 48 >> 2];
 $1 = HEAP32[$4 + 28 >> 2];
 $3 = HEAP32[$4 + 32 >> 2];
 HEAP32[$0 + 140 >> 2] = $1;
 HEAP32[$0 + 144 >> 2] = $3;
 $4 = HEAP32[$0 + 52 >> 2];
 $3 = HEAP32[$4 + 28 >> 2];
 $1 = HEAP32[$4 + 32 >> 2];
 HEAP32[$0 + 148 >> 2] = $3;
 HEAP32[$0 + 152 >> 2] = $1;
 HEAPF32[$0 + 156 >> 2] = HEAPF32[HEAP32[$0 + 48 >> 2] + 120 >> 2];
 HEAPF32[$0 + 160 >> 2] = HEAPF32[HEAP32[$0 + 52 >> 2] + 120 >> 2];
 HEAPF32[$0 + 164 >> 2] = HEAPF32[HEAP32[$0 + 48 >> 2] + 128 >> 2];
 HEAPF32[$0 + 168 >> 2] = HEAPF32[HEAP32[$0 + 52 >> 2] + 128 >> 2];
 $4 = HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$0 + 108 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 192 >> 2] = $1;
 HEAP32[$2 + 196 >> 2] = $3;
 HEAPF32[$2 + 188 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$0 + 108 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$0 + 108 >> 2], 12) | 0;
 $3 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 176 >> 2] = $3;
 HEAP32[$2 + 180 >> 2] = $1;
 HEAPF32[$2 + 172 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$0 + 108 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$0 + 112 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 160 >> 2] = $1;
 HEAP32[$2 + 164 >> 2] = $3;
 HEAPF32[$2 + 156 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$0 + 112 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$0 + 112 >> 2], 12) | 0;
 $3 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 144 >> 2] = $3;
 HEAP32[$2 + 148 >> 2] = $1;
 HEAPF32[$2 + 140 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$0 + 112 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($2 + 132 | 0, HEAPF32[$2 + 188 >> 2]);
 b2Rot__b2Rot_28float_29($2 + 124 | 0, HEAPF32[$2 + 156 >> 2]);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 108 | 0, $0 + 80 | 0, $0 + 140 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 116 | 0, $2 + 132 | 0, $2 + 108 | 0);
 $3 = HEAP32[$2 + 120 >> 2];
 $1 = HEAP32[$2 + 116 >> 2];
 HEAP32[$0 + 124 >> 2] = $1;
 HEAP32[$0 + 128 >> 2] = $3;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 92 | 0, $0 + 88 | 0, $0 + 148 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 100 | 0, $2 + 124 | 0, $2 + 92 | 0);
 $1 = HEAP32[$2 + 104 >> 2];
 $3 = HEAP32[$2 + 100 >> 2];
 HEAP32[$0 + 132 >> 2] = $3;
 HEAP32[$0 + 136 >> 2] = $1;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 68 | 0, $2 + 160 | 0, $0 + 132 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 76 | 0, $2 + 68 | 0, $2 + 192 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 84 | 0, $2 + 76 | 0, $0 + 124 | 0);
 $3 = HEAP32[$2 + 88 >> 2];
 $1 = HEAP32[$2 + 84 >> 2];
 HEAP32[$0 + 116 >> 2] = $1;
 HEAP32[$0 + 120 >> 2] = $3;
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Vec2__Length_28_29_20const($0 + 116 | 0), 
 HEAPF32[wasm2js_i32$0 + 64 >> 2] = wasm2js_f32$0;
 label$1: {
  if (HEAPF32[$2 + 64 >> 2] > Math_fround(.004999999888241291)) {
   b2Vec2__operator___28float_29($0 + 116 | 0, Math_fround(Math_fround(1) / HEAPF32[$2 + 64 >> 2]));
   break label$1;
  }
  b2Vec2__Set_28float_2c_20float_29($0 + 116 | 0, Math_fround(0), Math_fround(0));
 }
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($0 + 124 | 0, $0 + 116 | 0), 
 HEAPF32[wasm2js_i32$0 + 60 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($0 + 132 | 0, $0 + 116 | 0), 
 HEAPF32[wasm2js_i32$0 + 56 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 52 >> 2] = Math_fround(Math_fround(HEAPF32[$0 + 168 >> 2] * HEAPF32[$2 + 56 >> 2]) * HEAPF32[$2 + 56 >> 2]) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 164 >> 2] * HEAPF32[$2 + 60 >> 2]) * HEAPF32[$2 + 60 >> 2]) + HEAPF32[$0 + 156 >> 2]) + HEAPF32[$0 + 160 >> 2]);
 if (HEAPF32[$2 + 52 >> 2] != Math_fround(0)) {
  $5 = Math_fround(Math_fround(1) / HEAPF32[$2 + 52 >> 2]);
 } else {
  $5 = Math_fround(0);
 }
 HEAPF32[$0 + 172 >> 2] = $5;
 label$5: {
  if (HEAPF32[$0 + 68 >> 2] > Math_fround(0)) {
   HEAPF32[$2 + 48 >> 2] = HEAPF32[$2 + 64 >> 2] - HEAPF32[$0 + 104 >> 2];
   HEAPF32[$2 + 44 >> 2] = HEAPF32[$0 + 68 >> 2] * Math_fround(6.2831854820251465);
   $5 = HEAPF32[$0 + 172 >> 2];
   HEAPF32[$2 + 40 >> 2] = Math_fround(Math_fround($5 + $5) * HEAPF32[$0 + 72 >> 2]) * HEAPF32[$2 + 44 >> 2];
   HEAPF32[$2 + 36 >> 2] = Math_fround(HEAPF32[$0 + 172 >> 2] * HEAPF32[$2 + 44 >> 2]) * HEAPF32[$2 + 44 >> 2];
   HEAPF32[$2 + 32 >> 2] = HEAPF32[HEAP32[$2 + 200 >> 2] >> 2];
   HEAPF32[$0 + 96 >> 2] = HEAPF32[$2 + 32 >> 2] * Math_fround(Math_fround(HEAPF32[$2 + 32 >> 2] * HEAPF32[$2 + 36 >> 2]) + HEAPF32[$2 + 40 >> 2]);
   if (HEAPF32[$0 + 96 >> 2] != Math_fround(0)) {
    $5 = Math_fround(Math_fround(1) / HEAPF32[$0 + 96 >> 2]);
   } else {
    $5 = Math_fround(0);
   }
   HEAPF32[$0 + 96 >> 2] = $5;
   HEAPF32[$0 + 76 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 48 >> 2] * HEAPF32[$2 + 32 >> 2]) * HEAPF32[$2 + 36 >> 2]) * HEAPF32[$0 + 96 >> 2];
   HEAPF32[$2 + 52 >> 2] = HEAPF32[$2 + 52 >> 2] + HEAPF32[$0 + 96 >> 2];
   if (HEAPF32[$2 + 52 >> 2] != Math_fround(0)) {
    $5 = Math_fround(Math_fround(1) / HEAPF32[$2 + 52 >> 2]);
   } else {
    $5 = Math_fround(0);
   }
   HEAPF32[$0 + 172 >> 2] = $5;
   break label$5;
  }
  HEAPF32[$0 + 96 >> 2] = 0;
  HEAPF32[$0 + 76 >> 2] = 0;
 }
 label$11: {
  if (HEAP8[HEAP32[$2 + 200 >> 2] + 20 | 0] & 1) {
   HEAPF32[$0 + 100 >> 2] = HEAPF32[$0 + 100 >> 2] * HEAPF32[HEAP32[$2 + 200 >> 2] + 8 >> 2];
   operator__28float_2c_20b2Vec2_20const__29($2 + 24 | 0, HEAPF32[$0 + 100 >> 2], $0 + 116 | 0);
   operator__28float_2c_20b2Vec2_20const__29($2 + 16 | 0, HEAPF32[$0 + 156 >> 2], $2 + 24 | 0);
   b2Vec2__operator___28b2Vec2_20const__29_1($2 + 176 | 0, $2 + 16 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$0 + 164 >> 2]) * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($0 + 124 | 0, $2 + 24 | 0)) + HEAPF32[$2 + 172 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 172 >> 2] = wasm2js_f32$0;
   operator__28float_2c_20b2Vec2_20const__29($2 + 8 | 0, HEAPF32[$0 + 160 >> 2], $2 + 24 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($2 + 144 | 0, $2 + 8 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$0 + 168 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($0 + 132 | 0, $2 + 24 | 0)) + HEAPF32[$2 + 140 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 140 >> 2] = wasm2js_f32$0;
   break label$11;
  }
  HEAPF32[$0 + 100 >> 2] = 0;
 }
 $1 = HEAP32[$2 + 180 >> 2];
 $3 = HEAP32[$2 + 176 >> 2];
 $4 = $3;
 $3 = HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$0 + 108 >> 2], 12) | 0;
 HEAP32[$3 >> 2] = $4;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$0 + 108 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 172 >> 2];
 $3 = HEAP32[$2 + 148 >> 2];
 $1 = HEAP32[$2 + 144 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$0 + 112 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $3;
 HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$0 + 112 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 140 >> 2];
 __stack_pointer = $2 + 208 | 0;
}

function b2RevoluteJoint__InitVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $3 = __stack_pointer - 144 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 140 >> 2] = $0;
 HEAP32[$3 + 136 >> 2] = $1;
 $2 = HEAP32[$3 + 140 >> 2];
 HEAP32[$2 + 128 >> 2] = HEAP32[HEAP32[$2 + 48 >> 2] + 8 >> 2];
 HEAP32[$2 + 132 >> 2] = HEAP32[HEAP32[$2 + 52 >> 2] + 8 >> 2];
 $1 = HEAP32[$2 + 48 >> 2];
 $4 = HEAP32[$1 + 28 >> 2];
 $0 = HEAP32[$1 + 32 >> 2];
 HEAP32[$2 + 152 >> 2] = $4;
 HEAP32[$2 + 156 >> 2] = $0;
 $1 = HEAP32[$2 + 52 >> 2];
 $0 = HEAP32[$1 + 28 >> 2];
 $4 = HEAP32[$1 + 32 >> 2];
 HEAP32[$2 + 160 >> 2] = $0;
 HEAP32[$2 + 164 >> 2] = $4;
 HEAPF32[$2 + 168 >> 2] = HEAPF32[HEAP32[$2 + 48 >> 2] + 120 >> 2];
 HEAPF32[$2 + 172 >> 2] = HEAPF32[HEAP32[$2 + 52 >> 2] + 120 >> 2];
 HEAPF32[$2 + 176 >> 2] = HEAPF32[HEAP32[$2 + 48 >> 2] + 128 >> 2];
 HEAPF32[$2 + 180 >> 2] = HEAPF32[HEAP32[$2 + 52 >> 2] + 128 >> 2];
 HEAPF32[$3 + 132 >> 2] = HEAPF32[(HEAP32[HEAP32[$3 + 136 >> 2] + 24 >> 2] + Math_imul(HEAP32[$2 + 128 >> 2], 12) | 0) + 8 >> 2];
 $1 = HEAP32[HEAP32[$3 + 136 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 128 >> 2], 12) | 0;
 $4 = HEAP32[$1 >> 2];
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 + 120 >> 2] = $4;
 HEAP32[$3 + 124 >> 2] = $0;
 HEAPF32[$3 + 116 >> 2] = HEAPF32[(HEAP32[HEAP32[$3 + 136 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 128 >> 2], 12) | 0) + 8 >> 2];
 HEAPF32[$3 + 112 >> 2] = HEAPF32[(HEAP32[HEAP32[$3 + 136 >> 2] + 24 >> 2] + Math_imul(HEAP32[$2 + 132 >> 2], 12) | 0) + 8 >> 2];
 $1 = HEAP32[HEAP32[$3 + 136 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 132 >> 2], 12) | 0;
 $0 = HEAP32[$1 >> 2];
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 + 104 >> 2] = $0;
 HEAP32[$3 + 108 >> 2] = $4;
 HEAPF32[$3 + 100 >> 2] = HEAPF32[(HEAP32[HEAP32[$3 + 136 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 132 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($3 + 92 | 0, HEAPF32[$3 + 132 >> 2]);
 b2Rot__b2Rot_28float_29($3 + 84 | 0, HEAPF32[$3 + 112 >> 2]);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 68 | 0, $2 + 68 | 0, $2 + 152 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($3 + 76 | 0, $3 + 92 | 0, $3 + 68 | 0);
 $0 = HEAP32[$3 + 80 >> 2];
 $4 = HEAP32[$3 + 76 >> 2];
 HEAP32[$2 + 136 >> 2] = $4;
 HEAP32[$2 + 140 >> 2] = $0;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 52 | 0, $2 + 76 | 0, $2 + 160 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($3 + 60 | 0, $3 + 84 | 0, $3 + 52 | 0);
 $4 = HEAP32[$3 + 64 >> 2];
 $0 = HEAP32[$3 + 60 >> 2];
 HEAP32[$2 + 144 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $4;
 HEAPF32[$3 + 48 >> 2] = HEAPF32[$2 + 168 >> 2];
 HEAPF32[$3 + 44 >> 2] = HEAPF32[$2 + 172 >> 2];
 HEAPF32[$3 + 40 >> 2] = HEAPF32[$2 + 176 >> 2];
 HEAPF32[$3 + 36 >> 2] = HEAPF32[$2 + 180 >> 2];
 HEAP8[$3 + 35 | 0] = Math_fround(HEAPF32[$3 + 40 >> 2] + HEAPF32[$3 + 36 >> 2]) == Math_fround(0);
 HEAPF32[$2 + 184 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 148 >> 2] * HEAPF32[$2 + 148 >> 2]) * HEAPF32[$3 + 36 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 140 >> 2] * HEAPF32[$2 + 140 >> 2]) * HEAPF32[$3 + 40 >> 2]) + Math_fround(HEAPF32[$3 + 48 >> 2] + HEAPF32[$3 + 44 >> 2]));
 HEAPF32[$2 + 196 >> 2] = Math_fround(Math_fround(Math_fround(-HEAPF32[$2 + 140 >> 2]) * HEAPF32[$2 + 136 >> 2]) * HEAPF32[$3 + 40 >> 2]) - Math_fround(Math_fround(HEAPF32[$2 + 148 >> 2] * HEAPF32[$2 + 144 >> 2]) * HEAPF32[$3 + 36 >> 2]);
 HEAPF32[$2 + 208 >> 2] = Math_fround(Math_fround(-HEAPF32[$2 + 140 >> 2]) * HEAPF32[$3 + 40 >> 2]) - Math_fround(HEAPF32[$2 + 148 >> 2] * HEAPF32[$3 + 36 >> 2]);
 HEAPF32[$2 + 188 >> 2] = HEAPF32[$2 + 196 >> 2];
 HEAPF32[$2 + 200 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 144 >> 2] * HEAPF32[$2 + 144 >> 2]) * HEAPF32[$3 + 36 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 136 >> 2] * HEAPF32[$2 + 136 >> 2]) * HEAPF32[$3 + 40 >> 2]) + Math_fround(HEAPF32[$3 + 48 >> 2] + HEAPF32[$3 + 44 >> 2]));
 HEAPF32[$2 + 212 >> 2] = Math_fround(HEAPF32[$2 + 136 >> 2] * HEAPF32[$3 + 40 >> 2]) + Math_fround(HEAPF32[$2 + 144 >> 2] * HEAPF32[$3 + 36 >> 2]);
 HEAPF32[$2 + 192 >> 2] = HEAPF32[$2 + 208 >> 2];
 HEAPF32[$2 + 204 >> 2] = HEAPF32[$2 + 212 >> 2];
 HEAPF32[$2 + 216 >> 2] = HEAPF32[$3 + 40 >> 2] + HEAPF32[$3 + 36 >> 2];
 HEAPF32[$2 + 220 >> 2] = HEAPF32[$3 + 40 >> 2] + HEAPF32[$3 + 36 >> 2];
 if (HEAPF32[$2 + 220 >> 2] > Math_fround(0)) {
  HEAPF32[$2 + 220 >> 2] = Math_fround(1) / HEAPF32[$2 + 220 >> 2];
 }
 if (!(!(HEAP8[$3 + 35 | 0] & 1) & (HEAP8[$2 + 100 | 0] & 1))) {
  HEAPF32[$2 + 96 >> 2] = 0;
 }
 label$4: {
  if (!(!(HEAP8[$2 + 112 | 0] & 1) | HEAP8[$3 + 35 | 0] & 1)) {
   HEAPF32[$3 + 28 >> 2] = Math_fround(HEAPF32[$3 + 112 >> 2] - HEAPF32[$3 + 132 >> 2]) - HEAPF32[$2 + 116 >> 2];
   label$6: {
    if (float_20b2Abs_float__28float_29(Math_fround(HEAPF32[$2 + 124 >> 2] - HEAPF32[$2 + 120 >> 2])) < Math_fround(.06981317698955536)) {
     HEAP32[$2 + 224 >> 2] = 3;
     break label$6;
    }
    label$8: {
     if (HEAPF32[$3 + 28 >> 2] <= HEAPF32[$2 + 120 >> 2]) {
      if (HEAP32[$2 + 224 >> 2] != 1) {
       HEAPF32[$2 + 92 >> 2] = 0;
      }
      HEAP32[$2 + 224 >> 2] = 1;
      break label$8;
     }
     label$11: {
      if (HEAPF32[$3 + 28 >> 2] >= HEAPF32[$2 + 124 >> 2]) {
       if (HEAP32[$2 + 224 >> 2] != 2) {
        HEAPF32[$2 + 92 >> 2] = 0;
       }
       HEAP32[$2 + 224 >> 2] = 2;
       break label$11;
      }
      HEAP32[$2 + 224 >> 2] = 0;
      HEAPF32[$2 + 92 >> 2] = 0;
     }
    }
   }
   break label$4;
  }
  HEAP32[$2 + 224 >> 2] = 0;
 }
 label$14: {
  if (HEAP8[HEAP32[$3 + 136 >> 2] + 20 | 0] & 1) {
   b2Vec3__operator___28float_29($2 + 84 | 0, HEAPF32[HEAP32[$3 + 136 >> 2] + 8 >> 2]);
   HEAPF32[$2 + 96 >> 2] = HEAPF32[$2 + 96 >> 2] * HEAPF32[HEAP32[$3 + 136 >> 2] + 8 >> 2];
   b2Vec2__b2Vec2_28float_2c_20float_29($3 + 20 | 0, HEAPF32[$2 + 84 >> 2], HEAPF32[$2 + 88 >> 2]);
   operator__28float_2c_20b2Vec2_20const__29($3 + 12 | 0, HEAPF32[$3 + 48 >> 2], $3 + 20 | 0);
   b2Vec2__operator___28b2Vec2_20const__29_1($3 + 120 | 0, $3 + 12 | 0);
   wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$3 + 40 >> 2]) * Math_fround(Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 136 | 0, $3 + 20 | 0) + HEAPF32[$2 + 96 >> 2]) + HEAPF32[$2 + 92 >> 2])) + HEAPF32[$3 + 116 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 116 >> 2] = wasm2js_f32$0;
   operator__28float_2c_20b2Vec2_20const__29($3 + 4 | 0, HEAPF32[$3 + 44 >> 2], $3 + 20 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($3 + 104 | 0, $3 + 4 | 0);
   wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$3 + 36 >> 2] * Math_fround(Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 144 | 0, $3 + 20 | 0) + HEAPF32[$2 + 96 >> 2]) + HEAPF32[$2 + 92 >> 2])) + HEAPF32[$3 + 100 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 100 >> 2] = wasm2js_f32$0;
   break label$14;
  }
  b2Vec3__SetZero_28_29($2 + 84 | 0);
  HEAPF32[$2 + 96 >> 2] = 0;
 }
 $0 = HEAP32[$3 + 124 >> 2];
 $4 = HEAP32[$3 + 120 >> 2];
 $1 = $4;
 $4 = HEAP32[HEAP32[$3 + 136 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 128 >> 2], 12) | 0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$3 + 136 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 128 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$3 + 116 >> 2];
 $4 = HEAP32[$3 + 108 >> 2];
 $0 = HEAP32[$3 + 104 >> 2];
 $1 = $0;
 $0 = HEAP32[HEAP32[$3 + 136 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 132 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $4;
 HEAPF32[(HEAP32[HEAP32[$3 + 136 >> 2] + 28 >> 2] + Math_imul(HEAP32[$2 + 132 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$3 + 100 >> 2];
 __stack_pointer = $3 + 144 | 0;
}

function b2GearJoint__b2GearJoint_28b2GearJointDef_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 240 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 232 >> 2] = $0;
 HEAP32[$2 + 228 >> 2] = $1;
 $1 = HEAP32[$2 + 232 >> 2];
 HEAP32[$2 + 236 >> 2] = $1;
 b2Joint__b2Joint_28b2JointDef_20const__29($1, HEAP32[$2 + 228 >> 2]);
 HEAP32[$1 >> 2] = 18764;
 b2Vec2__b2Vec2_28_29($1 + 92 | 0);
 b2Vec2__b2Vec2_28_29($1 + 100 | 0);
 b2Vec2__b2Vec2_28_29($1 + 108 | 0);
 b2Vec2__b2Vec2_28_29($1 + 116 | 0);
 b2Vec2__b2Vec2_28_29($1 + 124 | 0);
 b2Vec2__b2Vec2_28_29($1 + 132 | 0);
 b2Vec2__b2Vec2_28_29($1 + 176 | 0);
 b2Vec2__b2Vec2_28_29($1 + 184 | 0);
 b2Vec2__b2Vec2_28_29($1 + 192 | 0);
 b2Vec2__b2Vec2_28_29($1 + 200 | 0);
 b2Vec2__b2Vec2_28_29($1 + 240 | 0);
 b2Vec2__b2Vec2_28_29($1 + 248 | 0);
 HEAP32[$1 + 68 >> 2] = HEAP32[HEAP32[$2 + 228 >> 2] + 20 >> 2];
 HEAP32[$1 + 72 >> 2] = HEAP32[HEAP32[$2 + 228 >> 2] + 24 >> 2];
 wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Joint__GetType_28_29_20const(HEAP32[$1 + 68 >> 2]), 
 HEAP32[wasm2js_i32$0 + 76 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Joint__GetType_28_29_20const(HEAP32[$1 + 72 >> 2]), 
 HEAP32[wasm2js_i32$0 + 80 >> 2] = wasm2js_i32$1;
 if (!(HEAP32[$1 + 76 >> 2] == 1 | HEAP32[$1 + 76 >> 2] == 2)) {
  __assert_fail(2767, 4316, 57, 2613);
  wasm2js_trap();
 }
 if (!(HEAP32[$1 + 80 >> 2] == 1 | HEAP32[$1 + 80 >> 2] == 2)) {
  __assert_fail(2709, 4316, 58, 2613);
  wasm2js_trap();
 }
 wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Joint__GetBodyA_28_29(HEAP32[$1 + 68 >> 2]), 
 HEAP32[wasm2js_i32$0 + 84 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Joint__GetBodyB_28_29(HEAP32[$1 + 68 >> 2]), 
 HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
 $3 = HEAP32[$1 + 48 >> 2];
 $4 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$2 + 208 >> 2] = $4;
 HEAP32[$2 + 212 >> 2] = $0;
 $4 = HEAP32[$3 + 16 >> 2];
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$2 + 200 >> 2] = $0;
 HEAP32[$2 + 204 >> 2] = $4;
 HEAPF32[$2 + 196 >> 2] = HEAPF32[HEAP32[$1 + 48 >> 2] + 56 >> 2];
 $3 = HEAP32[$1 + 84 >> 2];
 $4 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$2 + 184 >> 2] = $4;
 HEAP32[$2 + 188 >> 2] = $0;
 $4 = HEAP32[$3 + 16 >> 2];
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$2 + 176 >> 2] = $0;
 HEAP32[$2 + 180 >> 2] = $4;
 HEAPF32[$2 + 172 >> 2] = HEAPF32[HEAP32[$1 + 84 >> 2] + 56 >> 2];
 label$3: {
  if (HEAP32[$1 + 76 >> 2] == 1) {
   HEAP32[$2 + 168 >> 2] = HEAP32[HEAP32[$2 + 228 >> 2] + 20 >> 2];
   $3 = HEAP32[$2 + 168 >> 2];
   $4 = HEAP32[$3 + 68 >> 2];
   $0 = HEAP32[$3 + 72 >> 2];
   HEAP32[$1 + 108 >> 2] = $4;
   HEAP32[$1 + 112 >> 2] = $0;
   $3 = HEAP32[$2 + 168 >> 2];
   $0 = HEAP32[$3 + 76 >> 2];
   $4 = HEAP32[$3 + 80 >> 2];
   HEAP32[$1 + 92 >> 2] = $0;
   HEAP32[$1 + 96 >> 2] = $4;
   HEAPF32[$1 + 140 >> 2] = HEAPF32[HEAP32[$2 + 168 >> 2] + 116 >> 2];
   b2Vec2__SetZero_28_29($1 + 124 | 0);
   HEAPF32[$2 + 224 >> 2] = Math_fround(HEAPF32[$2 + 196 >> 2] - HEAPF32[$2 + 172 >> 2]) - HEAPF32[$1 + 140 >> 2];
   $0 = $1;
   break label$3;
  }
  HEAP32[$2 + 164 >> 2] = HEAP32[HEAP32[$2 + 228 >> 2] + 20 >> 2];
  $3 = HEAP32[$2 + 164 >> 2];
  $4 = HEAP32[$3 + 68 >> 2];
  $0 = HEAP32[$3 + 72 >> 2];
  HEAP32[$1 + 108 >> 2] = $4;
  HEAP32[$1 + 112 >> 2] = $0;
  $3 = HEAP32[$2 + 164 >> 2];
  $0 = HEAP32[$3 + 76 >> 2];
  $4 = HEAP32[$3 + 80 >> 2];
  HEAP32[$1 + 92 >> 2] = $0;
  HEAP32[$1 + 96 >> 2] = $4;
  HEAPF32[$1 + 140 >> 2] = HEAPF32[HEAP32[$2 + 164 >> 2] + 100 >> 2];
  $3 = HEAP32[$2 + 164 >> 2];
  $4 = HEAP32[$3 + 84 >> 2];
  $0 = HEAP32[$3 + 88 >> 2];
  HEAP32[$1 + 124 >> 2] = $4;
  HEAP32[$1 + 128 >> 2] = $0;
  $4 = HEAP32[$1 + 112 >> 2];
  $0 = HEAP32[$1 + 108 >> 2];
  HEAP32[$2 + 152 >> 2] = $0;
  HEAP32[$2 + 156 >> 2] = $4;
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 128 | 0, $2 + 208 | 0, $1 + 92 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 120 | 0, $2 + 200 | 0, $2 + 176 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 136 | 0, $2 + 128 | 0, $2 + 120 | 0);
  b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 144 | 0, $2 + 184 | 0, $2 + 136 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 112 | 0, $2 + 144 | 0, $2 + 152 | 0);
  wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 112 | 0, $1 + 124 | 0), 
  HEAPF32[wasm2js_i32$0 + 224 >> 2] = wasm2js_f32$0;
  $0 = $2;
 }
 wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Joint__GetBodyA_28_29(HEAP32[$1 + 72 >> 2]), 
 HEAP32[wasm2js_i32$0 + 88 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Joint__GetBodyB_28_29(HEAP32[$1 + 72 >> 2]), 
 HEAP32[wasm2js_i32$0 + 52 >> 2] = wasm2js_i32$1;
 $3 = HEAP32[$1 + 52 >> 2];
 $4 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$2 + 104 >> 2] = $4;
 HEAP32[$2 + 108 >> 2] = $0;
 $4 = HEAP32[$3 + 16 >> 2];
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$2 + 96 >> 2] = $0;
 HEAP32[$2 + 100 >> 2] = $4;
 HEAPF32[$2 + 92 >> 2] = HEAPF32[HEAP32[$1 + 52 >> 2] + 56 >> 2];
 $3 = HEAP32[$1 + 88 >> 2];
 $4 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$2 + 80 >> 2] = $4;
 HEAP32[$2 + 84 >> 2] = $0;
 $4 = HEAP32[$3 + 16 >> 2];
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 76 >> 2] = $4;
 HEAPF32[$2 + 68 >> 2] = HEAPF32[HEAP32[$1 + 88 >> 2] + 56 >> 2];
 label$5: {
  if (HEAP32[$1 + 80 >> 2] == 1) {
   HEAP32[$2 + 64 >> 2] = HEAP32[HEAP32[$2 + 228 >> 2] + 24 >> 2];
   $3 = HEAP32[$2 + 64 >> 2];
   $4 = HEAP32[$3 + 68 >> 2];
   $0 = HEAP32[$3 + 72 >> 2];
   HEAP32[$1 + 116 >> 2] = $4;
   HEAP32[$1 + 120 >> 2] = $0;
   $3 = HEAP32[$2 + 64 >> 2];
   $0 = HEAP32[$3 + 76 >> 2];
   $4 = HEAP32[$3 + 80 >> 2];
   HEAP32[$1 + 100 >> 2] = $0;
   HEAP32[$1 + 104 >> 2] = $4;
   HEAPF32[$1 + 144 >> 2] = HEAPF32[HEAP32[$2 + 64 >> 2] + 116 >> 2];
   b2Vec2__SetZero_28_29($1 + 132 | 0);
   HEAPF32[$2 + 220 >> 2] = Math_fround(HEAPF32[$2 + 92 >> 2] - HEAPF32[$2 + 68 >> 2]) - HEAPF32[$1 + 144 >> 2];
   $0 = $1;
   break label$5;
  }
  HEAP32[$2 + 60 >> 2] = HEAP32[HEAP32[$2 + 228 >> 2] + 24 >> 2];
  $3 = HEAP32[$2 + 60 >> 2];
  $4 = HEAP32[$3 + 68 >> 2];
  $0 = HEAP32[$3 + 72 >> 2];
  HEAP32[$1 + 116 >> 2] = $4;
  HEAP32[$1 + 120 >> 2] = $0;
  $3 = HEAP32[$2 + 60 >> 2];
  $0 = HEAP32[$3 + 76 >> 2];
  $4 = HEAP32[$3 + 80 >> 2];
  HEAP32[$1 + 100 >> 2] = $0;
  HEAP32[$1 + 104 >> 2] = $4;
  HEAPF32[$1 + 144 >> 2] = HEAPF32[HEAP32[$2 + 60 >> 2] + 100 >> 2];
  $3 = HEAP32[$2 + 60 >> 2];
  $4 = HEAP32[$3 + 84 >> 2];
  $0 = HEAP32[$3 + 88 >> 2];
  HEAP32[$1 + 132 >> 2] = $4;
  HEAP32[$1 + 136 >> 2] = $0;
  $4 = HEAP32[$1 + 120 >> 2];
  $0 = HEAP32[$1 + 116 >> 2];
  HEAP32[$2 + 48 >> 2] = $0;
  HEAP32[$2 + 52 >> 2] = $4;
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 24 | 0, $2 + 104 | 0, $1 + 100 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 16 | 0, $2 + 96 | 0, $2 + 72 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 32 | 0, $2 + 24 | 0, $2 + 16 | 0);
  b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 40 | 0, $2 + 80 | 0, $2 + 32 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 8 | 0, $2 + 40 | 0, $2 + 48 | 0);
  wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 8 | 0, $1 + 132 | 0), 
  HEAPF32[wasm2js_i32$0 + 220 >> 2] = wasm2js_f32$0;
  $0 = $2;
 }
 HEAPF32[$1 + 152 >> 2] = HEAPF32[HEAP32[$2 + 228 >> 2] + 28 >> 2];
 HEAPF32[$1 + 148 >> 2] = Math_fround(HEAPF32[$1 + 152 >> 2] * HEAPF32[$2 + 220 >> 2]) + HEAPF32[$2 + 224 >> 2];
 HEAPF32[$1 + 156 >> 2] = 0;
 __stack_pointer = $2 + 240 | 0;
 return HEAP32[$2 + 236 >> 2];
}

function dlfree($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 label$1: {
  if (!$0) {
   break label$1;
  }
  $2 = $0 - 8 | 0;
  $1 = HEAP32[$0 - 4 >> 2];
  $0 = $1 & -8;
  $5 = $2 + $0 | 0;
  label$2: {
   if ($1 & 1) {
    break label$2;
   }
   if (!($1 & 3)) {
    break label$1;
   }
   $1 = HEAP32[$2 >> 2];
   $2 = $2 - $1 | 0;
   $4 = HEAP32[8038];
   if ($2 >>> 0 < $4 >>> 0) {
    break label$1;
   }
   $0 = $0 + $1 | 0;
   label$3: {
    label$4: {
     if (HEAP32[8039] != ($2 | 0)) {
      if ($1 >>> 0 <= 255) {
       $6 = $1 >>> 3 | 0;
       $1 = HEAP32[$2 + 12 >> 2];
       $4 = HEAP32[$2 + 8 >> 2];
       if (($1 | 0) == ($4 | 0)) {
        wasm2js_i32$0 = 32136, wasm2js_i32$1 = HEAP32[8034] & __wasm_rotl_i32(-2, $6), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$2;
       }
       HEAP32[$4 + 12 >> 2] = $1;
       HEAP32[$1 + 8 >> 2] = $4;
       break label$2;
      }
      $7 = HEAP32[$2 + 24 >> 2];
      $3 = HEAP32[$2 + 12 >> 2];
      if (($3 | 0) != ($2 | 0)) {
       $1 = HEAP32[$2 + 8 >> 2];
       HEAP32[$1 + 12 >> 2] = $3;
       HEAP32[$3 + 8 >> 2] = $1;
       break label$3;
      }
      $4 = $2 + 20 | 0;
      $1 = HEAP32[$4 >> 2];
      if (!$1) {
       $1 = HEAP32[$2 + 16 >> 2];
       if (!$1) {
        break label$4;
       }
       $4 = $2 + 16 | 0;
      }
      while (1) {
       $6 = $4;
       $3 = $1;
       $4 = $1 + 20 | 0;
       $1 = HEAP32[$4 >> 2];
       if ($1) {
        continue;
       }
       $4 = $3 + 16 | 0;
       $1 = HEAP32[$3 + 16 >> 2];
       if ($1) {
        continue;
       }
       break;
      }
      HEAP32[$6 >> 2] = 0;
      break label$3;
     }
     $1 = HEAP32[$5 + 4 >> 2];
     if (($1 & 3) != 3) {
      break label$2;
     }
     HEAP32[8036] = $0;
     HEAP32[$5 + 4 >> 2] = $1 & -2;
     HEAP32[$2 + 4 >> 2] = $0 | 1;
     HEAP32[$5 >> 2] = $0;
     return;
    }
    $3 = 0;
   }
   if (!$7) {
    break label$2;
   }
   $4 = HEAP32[$2 + 28 >> 2];
   $1 = ($4 << 2) + 32440 | 0;
   label$11: {
    if (HEAP32[$1 >> 2] == ($2 | 0)) {
     HEAP32[$1 >> 2] = $3;
     if ($3) {
      break label$11;
     }
     wasm2js_i32$0 = 32140, wasm2js_i32$1 = HEAP32[8035] & __wasm_rotl_i32(-2, $4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     break label$2;
    }
    HEAP32[(HEAP32[$7 + 16 >> 2] == ($2 | 0) ? 16 : 20) + $7 >> 2] = $3;
    if (!$3) {
     break label$2;
    }
   }
   HEAP32[$3 + 24 >> 2] = $7;
   $1 = HEAP32[$2 + 16 >> 2];
   if ($1) {
    HEAP32[$3 + 16 >> 2] = $1;
    HEAP32[$1 + 24 >> 2] = $3;
   }
   $1 = HEAP32[$2 + 20 >> 2];
   if (!$1) {
    break label$2;
   }
   HEAP32[$3 + 20 >> 2] = $1;
   HEAP32[$1 + 24 >> 2] = $3;
  }
  if ($2 >>> 0 >= $5 >>> 0) {
   break label$1;
  }
  $1 = HEAP32[$5 + 4 >> 2];
  if (!($1 & 1)) {
   break label$1;
  }
  label$14: {
   label$15: {
    label$16: {
     label$17: {
      if (!($1 & 2)) {
       if (HEAP32[8040] == ($5 | 0)) {
        HEAP32[8040] = $2;
        $0 = HEAP32[8037] + $0 | 0;
        HEAP32[8037] = $0;
        HEAP32[$2 + 4 >> 2] = $0 | 1;
        if (HEAP32[8039] != ($2 | 0)) {
         break label$1;
        }
        HEAP32[8036] = 0;
        HEAP32[8039] = 0;
        return;
       }
       if (HEAP32[8039] == ($5 | 0)) {
        HEAP32[8039] = $2;
        $0 = HEAP32[8036] + $0 | 0;
        HEAP32[8036] = $0;
        HEAP32[$2 + 4 >> 2] = $0 | 1;
        HEAP32[$0 + $2 >> 2] = $0;
        return;
       }
       $0 = ($1 & -8) + $0 | 0;
       if ($1 >>> 0 <= 255) {
        $6 = $1 >>> 3 | 0;
        $1 = HEAP32[$5 + 12 >> 2];
        $4 = HEAP32[$5 + 8 >> 2];
        if (($1 | 0) == ($4 | 0)) {
         wasm2js_i32$0 = 32136, wasm2js_i32$1 = HEAP32[8034] & __wasm_rotl_i32(-2, $6), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         break label$15;
        }
        HEAP32[$4 + 12 >> 2] = $1;
        HEAP32[$1 + 8 >> 2] = $4;
        break label$15;
       }
       $7 = HEAP32[$5 + 24 >> 2];
       $3 = HEAP32[$5 + 12 >> 2];
       if (($5 | 0) != ($3 | 0)) {
        $1 = HEAP32[$5 + 8 >> 2];
        HEAP32[$1 + 12 >> 2] = $3;
        HEAP32[$3 + 8 >> 2] = $1;
        break label$16;
       }
       $4 = $5 + 20 | 0;
       $1 = HEAP32[$4 >> 2];
       if (!$1) {
        $1 = HEAP32[$5 + 16 >> 2];
        if (!$1) {
         break label$17;
        }
        $4 = $5 + 16 | 0;
       }
       while (1) {
        $6 = $4;
        $3 = $1;
        $4 = $1 + 20 | 0;
        $1 = HEAP32[$4 >> 2];
        if ($1) {
         continue;
        }
        $4 = $3 + 16 | 0;
        $1 = HEAP32[$3 + 16 >> 2];
        if ($1) {
         continue;
        }
        break;
       }
       HEAP32[$6 >> 2] = 0;
       break label$16;
      }
      HEAP32[$5 + 4 >> 2] = $1 & -2;
      HEAP32[$2 + 4 >> 2] = $0 | 1;
      HEAP32[$0 + $2 >> 2] = $0;
      break label$14;
     }
     $3 = 0;
    }
    if (!$7) {
     break label$15;
    }
    $4 = HEAP32[$5 + 28 >> 2];
    $1 = ($4 << 2) + 32440 | 0;
    label$26: {
     if (HEAP32[$1 >> 2] == ($5 | 0)) {
      HEAP32[$1 >> 2] = $3;
      if ($3) {
       break label$26;
      }
      wasm2js_i32$0 = 32140, wasm2js_i32$1 = HEAP32[8035] & __wasm_rotl_i32(-2, $4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$15;
     }
     HEAP32[(HEAP32[$7 + 16 >> 2] == ($5 | 0) ? 16 : 20) + $7 >> 2] = $3;
     if (!$3) {
      break label$15;
     }
    }
    HEAP32[$3 + 24 >> 2] = $7;
    $1 = HEAP32[$5 + 16 >> 2];
    if ($1) {
     HEAP32[$3 + 16 >> 2] = $1;
     HEAP32[$1 + 24 >> 2] = $3;
    }
    $1 = HEAP32[$5 + 20 >> 2];
    if (!$1) {
     break label$15;
    }
    HEAP32[$3 + 20 >> 2] = $1;
    HEAP32[$1 + 24 >> 2] = $3;
   }
   HEAP32[$2 + 4 >> 2] = $0 | 1;
   HEAP32[$0 + $2 >> 2] = $0;
   if (HEAP32[8039] != ($2 | 0)) {
    break label$14;
   }
   HEAP32[8036] = $0;
   return;
  }
  if ($0 >>> 0 <= 255) {
   $1 = ($0 & -8) + 32176 | 0;
   $0 = 1 << ($0 >>> 3);
   $4 = HEAP32[8034];
   label$30: {
    if (!($0 & $4)) {
     HEAP32[8034] = $0 | $4;
     $0 = $1;
     break label$30;
    }
    $0 = HEAP32[$1 + 8 >> 2];
   }
   HEAP32[$1 + 8 >> 2] = $2;
   HEAP32[$0 + 12 >> 2] = $2;
   HEAP32[$2 + 12 >> 2] = $1;
   HEAP32[$2 + 8 >> 2] = $0;
   return;
  }
  $1 = 31;
  if ($0 >>> 0 <= 16777215) {
   $1 = Math_clz32($0 >>> 8 | 0);
   $1 = (($0 >>> 38 - $1 & 1) - ($1 << 1) | 0) + 62 | 0;
  }
  HEAP32[$2 + 28 >> 2] = $1;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = 0;
  $4 = ($1 << 2) + 32440 | 0;
  label$33: {
   label$34: {
    $3 = HEAP32[8035];
    $5 = 1 << $1;
    label$35: {
     if (!($3 & $5)) {
      HEAP32[8035] = $3 | $5;
      HEAP32[$4 >> 2] = $2;
      break label$35;
     }
     $1 = $0 << (($1 | 0) != 31 ? 25 - ($1 >>> 1 | 0) | 0 : 0);
     $3 = HEAP32[$4 >> 2];
     while (1) {
      $4 = $3;
      if ((HEAP32[$3 + 4 >> 2] & -8) == ($0 | 0)) {
       break label$34;
      }
      $3 = $1 >>> 29 | 0;
      $1 = $1 << 1;
      $6 = ($3 & 4) + $4 | 0;
      $5 = $6 + 16 | 0;
      $3 = HEAP32[$5 >> 2];
      if ($3) {
       continue;
      }
      break;
     }
     HEAP32[$6 + 16 >> 2] = $2;
    }
    HEAP32[$2 + 24 >> 2] = $4;
    HEAP32[$2 + 12 >> 2] = $2;
    HEAP32[$2 + 8 >> 2] = $2;
    break label$33;
   }
   $0 = HEAP32[$4 + 8 >> 2];
   HEAP32[$0 + 12 >> 2] = $2;
   HEAP32[$4 + 8 >> 2] = $2;
   HEAP32[$2 + 24 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = $4;
   HEAP32[$2 + 8 >> 2] = $0;
  }
  $2 = HEAP32[8042] - 1 | 0;
  HEAP32[8042] = $2 ? $2 : -1;
 }
}

function b2CollidePolygonAndCircle_28b2Manifold__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__2c_20b2CircleShape_20const__2c_20b2Transform_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $5 = __stack_pointer - 208 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 204 >> 2] = $0;
 HEAP32[$5 + 200 >> 2] = $1;
 HEAP32[$5 + 196 >> 2] = $2;
 HEAP32[$5 + 192 >> 2] = $3;
 HEAP32[$5 + 188 >> 2] = $4;
 HEAP32[HEAP32[$5 + 204 >> 2] + 60 >> 2] = 0;
 b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($5 + 180 | 0, HEAP32[$5 + 188 >> 2], HEAP32[$5 + 192 >> 2] + 12 | 0);
 b2MulT_28b2Transform_20const__2c_20b2Vec2_20const__29($5 + 172 | 0, HEAP32[$5 + 196 >> 2], $5 + 180 | 0);
 HEAP32[$5 + 168 >> 2] = 0;
 HEAPF32[$5 + 164 >> 2] = -34028234663852886e22;
 HEAPF32[$5 + 160 >> 2] = HEAPF32[HEAP32[$5 + 200 >> 2] + 8 >> 2] + HEAPF32[HEAP32[$5 + 192 >> 2] + 8 >> 2];
 HEAP32[$5 + 156 >> 2] = HEAP32[HEAP32[$5 + 200 >> 2] + 148 >> 2];
 HEAP32[$5 + 152 >> 2] = HEAP32[$5 + 200 >> 2] + 20;
 HEAP32[$5 + 148 >> 2] = HEAP32[$5 + 200 >> 2] + 84;
 HEAP32[$5 + 144 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAP32[$5 + 144 >> 2] < HEAP32[$5 + 156 >> 2]) {
    $0 = HEAP32[$5 + 148 >> 2];
    $1 = HEAP32[$5 + 144 >> 2] << 3;
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 132 | 0, $5 + 172 | 0, HEAP32[$5 + 152 >> 2] + (HEAP32[$5 + 144 >> 2] << 3) | 0);
    wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($0 + $1 | 0, $5 + 132 | 0), 
    HEAPF32[wasm2js_i32$0 + 140 >> 2] = wasm2js_f32$0;
    if (HEAPF32[$5 + 140 >> 2] > HEAPF32[$5 + 160 >> 2]) {
     break label$1;
    }
    if (HEAPF32[$5 + 140 >> 2] > HEAPF32[$5 + 164 >> 2]) {
     HEAPF32[$5 + 164 >> 2] = HEAPF32[$5 + 140 >> 2];
     HEAP32[$5 + 168 >> 2] = HEAP32[$5 + 144 >> 2];
    }
    HEAP32[$5 + 144 >> 2] = HEAP32[$5 + 144 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$5 + 128 >> 2] = HEAP32[$5 + 168 >> 2];
  if (HEAP32[$5 + 156 >> 2] > (HEAP32[$5 + 128 >> 2] + 1 | 0)) {
   $0 = HEAP32[$5 + 128 >> 2] + 1 | 0;
  } else {
   $0 = 0;
  }
  HEAP32[$5 + 124 >> 2] = $0;
  $2 = HEAP32[$5 + 152 >> 2] + (HEAP32[$5 + 128 >> 2] << 3) | 0;
  $1 = HEAP32[$2 >> 2];
  $0 = HEAP32[$2 + 4 >> 2];
  HEAP32[$5 + 112 >> 2] = $1;
  HEAP32[$5 + 116 >> 2] = $0;
  $2 = HEAP32[$5 + 152 >> 2] + (HEAP32[$5 + 124 >> 2] << 3) | 0;
  $0 = HEAP32[$2 >> 2];
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$5 + 104 >> 2] = $0;
  HEAP32[$5 + 108 >> 2] = $1;
  if (HEAPF32[$5 + 164 >> 2] < Math_fround(1.1920928955078125e-7)) {
   HEAP32[HEAP32[$5 + 204 >> 2] + 60 >> 2] = 1;
   HEAP32[HEAP32[$5 + 204 >> 2] + 56 >> 2] = 1;
   $2 = HEAP32[$5 + 148 >> 2] + (HEAP32[$5 + 168 >> 2] << 3) | 0;
   $1 = HEAP32[$2 >> 2];
   $0 = HEAP32[$2 + 4 >> 2];
   $2 = $1;
   $1 = HEAP32[$5 + 204 >> 2];
   HEAP32[$1 + 40 >> 2] = $2;
   HEAP32[$1 + 44 >> 2] = $0;
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($5 + 88 | 0, $5 + 112 | 0, $5 + 104 | 0);
   operator__28float_2c_20b2Vec2_20const__29($5 + 96 | 0, Math_fround(.5), $5 + 88 | 0);
   $1 = HEAP32[$5 + 100 >> 2];
   $0 = HEAP32[$5 + 96 >> 2];
   $2 = $0;
   $0 = HEAP32[$5 + 204 >> 2];
   HEAP32[$0 + 48 >> 2] = $2;
   HEAP32[$0 + 52 >> 2] = $1;
   $2 = HEAP32[$5 + 192 >> 2];
   $1 = HEAP32[$2 + 12 >> 2];
   $0 = HEAP32[$2 + 16 >> 2];
   $2 = $1;
   $1 = HEAP32[$5 + 204 >> 2];
   HEAP32[$1 >> 2] = $2;
   HEAP32[$1 + 4 >> 2] = $0;
   HEAP32[HEAP32[$5 + 204 >> 2] + 16 >> 2] = 0;
   break label$1;
  }
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 76 | 0, $5 + 172 | 0, $5 + 112 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 68 | 0, $5 + 104 | 0, $5 + 112 | 0);
  wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 76 | 0, $5 + 68 | 0), 
  HEAPF32[wasm2js_i32$0 + 84 >> 2] = wasm2js_f32$0;
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 56 | 0, $5 + 172 | 0, $5 + 104 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 48 | 0, $5 + 112 | 0, $5 + 104 | 0);
  wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 56 | 0, $5 + 48 | 0), 
  HEAPF32[wasm2js_i32$0 + 64 >> 2] = wasm2js_f32$0;
  if (HEAPF32[$5 + 84 >> 2] <= Math_fround(0)) {
   if (b2DistanceSquared_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 172 | 0, $5 + 112 | 0) > Math_fround(HEAPF32[$5 + 160 >> 2] * HEAPF32[$5 + 160 >> 2])) {
    break label$1;
   }
   HEAP32[HEAP32[$5 + 204 >> 2] + 60 >> 2] = 1;
   HEAP32[HEAP32[$5 + 204 >> 2] + 56 >> 2] = 1;
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 40 | 0, $5 + 172 | 0, $5 + 112 | 0);
   $1 = HEAP32[$5 + 44 >> 2];
   $0 = HEAP32[$5 + 40 >> 2];
   $2 = $0;
   $0 = HEAP32[$5 + 204 >> 2];
   HEAP32[$0 + 40 >> 2] = $2;
   HEAP32[$0 + 44 >> 2] = $1;
   b2Vec2__Normalize_28_29(HEAP32[$5 + 204 >> 2] + 40 | 0);
   $0 = HEAP32[$5 + 116 >> 2];
   $1 = HEAP32[$5 + 112 >> 2];
   $2 = $1;
   $1 = HEAP32[$5 + 204 >> 2];
   HEAP32[$1 + 48 >> 2] = $2;
   HEAP32[$1 + 52 >> 2] = $0;
   $2 = HEAP32[$5 + 192 >> 2];
   $0 = HEAP32[$2 + 12 >> 2];
   $1 = HEAP32[$2 + 16 >> 2];
   $2 = $0;
   $0 = HEAP32[$5 + 204 >> 2];
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $1;
   HEAP32[HEAP32[$5 + 204 >> 2] + 16 >> 2] = 0;
   break label$1;
  }
  label$9: {
   if (HEAPF32[$5 + 64 >> 2] <= Math_fround(0)) {
    if (b2DistanceSquared_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 172 | 0, $5 + 104 | 0) > Math_fround(HEAPF32[$5 + 160 >> 2] * HEAPF32[$5 + 160 >> 2])) {
     break label$1;
    }
    HEAP32[HEAP32[$5 + 204 >> 2] + 60 >> 2] = 1;
    HEAP32[HEAP32[$5 + 204 >> 2] + 56 >> 2] = 1;
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 32 | 0, $5 + 172 | 0, $5 + 104 | 0);
    $0 = HEAP32[$5 + 36 >> 2];
    $1 = HEAP32[$5 + 32 >> 2];
    $2 = $1;
    $1 = HEAP32[$5 + 204 >> 2];
    HEAP32[$1 + 40 >> 2] = $2;
    HEAP32[$1 + 44 >> 2] = $0;
    b2Vec2__Normalize_28_29(HEAP32[$5 + 204 >> 2] + 40 | 0);
    $1 = HEAP32[$5 + 108 >> 2];
    $0 = HEAP32[$5 + 104 >> 2];
    $2 = $0;
    $0 = HEAP32[$5 + 204 >> 2];
    HEAP32[$0 + 48 >> 2] = $2;
    HEAP32[$0 + 52 >> 2] = $1;
    break label$9;
   }
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($5 + 16 | 0, $5 + 112 | 0, $5 + 104 | 0);
   operator__28float_2c_20b2Vec2_20const__29($5 + 24 | 0, Math_fround(.5), $5 + 16 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 4 | 0, $5 + 172 | 0, $5 + 24 | 0);
   wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 4 | 0, HEAP32[$5 + 148 >> 2] + (HEAP32[$5 + 128 >> 2] << 3) | 0), 
   HEAPF32[wasm2js_i32$0 + 12 >> 2] = wasm2js_f32$0;
   if (HEAPF32[$5 + 12 >> 2] > HEAPF32[$5 + 160 >> 2]) {
    break label$1;
   }
   HEAP32[HEAP32[$5 + 204 >> 2] + 60 >> 2] = 1;
   HEAP32[HEAP32[$5 + 204 >> 2] + 56 >> 2] = 1;
   $2 = HEAP32[$5 + 148 >> 2] + (HEAP32[$5 + 128 >> 2] << 3) | 0;
   $1 = HEAP32[$2 >> 2];
   $0 = HEAP32[$2 + 4 >> 2];
   $2 = $1;
   $1 = HEAP32[$5 + 204 >> 2];
   HEAP32[$1 + 40 >> 2] = $2;
   HEAP32[$1 + 44 >> 2] = $0;
   $1 = HEAP32[$5 + 28 >> 2];
   $0 = HEAP32[$5 + 24 >> 2];
   $2 = $0;
   $0 = HEAP32[$5 + 204 >> 2];
   HEAP32[$0 + 48 >> 2] = $2;
   HEAP32[$0 + 52 >> 2] = $1;
  }
  $2 = HEAP32[$5 + 192 >> 2];
  $1 = HEAP32[$2 + 12 >> 2];
  $0 = HEAP32[$2 + 16 >> 2];
  $2 = $1;
  $1 = HEAP32[$5 + 204 >> 2];
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $0;
  HEAP32[HEAP32[$5 + 204 >> 2] + 16 >> 2] = 0;
 }
 __stack_pointer = $5 + 208 | 0;
}

function b2Island__SolveTOI_28b2TimeStep_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f32$0 = Math_fround(0);
 $4 = __stack_pointer - 208 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 204 >> 2] = $0;
 HEAP32[$4 + 200 >> 2] = $1;
 HEAP32[$4 + 196 >> 2] = $2;
 HEAP32[$4 + 192 >> 2] = $3;
 $5 = HEAP32[$4 + 204 >> 2];
 if (HEAP32[$4 + 196 >> 2] >= HEAP32[$5 + 28 >> 2]) {
  __assert_fail(2155, 5992, 391, 10675);
  wasm2js_trap();
 }
 if (HEAP32[$4 + 192 >> 2] >= HEAP32[$5 + 28 >> 2]) {
  __assert_fail(2131, 5992, 392, 10675);
  wasm2js_trap();
 }
 HEAP32[$4 + 188 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 188 >> 2] < HEAP32[$5 + 28 >> 2]) {
   HEAP32[$4 + 184 >> 2] = HEAP32[HEAP32[$5 + 8 >> 2] + (HEAP32[$4 + 188 >> 2] << 2) >> 2];
   $3 = HEAP32[$4 + 184 >> 2];
   $0 = HEAP32[$3 + 44 >> 2];
   $1 = HEAP32[$3 + 48 >> 2];
   $2 = $0;
   $0 = HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$4 + 188 >> 2], 12) | 0;
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $1;
   HEAPF32[(HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$4 + 188 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[HEAP32[$4 + 184 >> 2] + 56 >> 2];
   $3 = HEAP32[$4 + 184 >> 2];
   $1 = HEAP32[$3 + 64 >> 2];
   $0 = HEAP32[$3 + 68 >> 2];
   $2 = $1;
   $1 = HEAP32[$5 + 24 >> 2] + Math_imul(HEAP32[$4 + 188 >> 2], 12) | 0;
   HEAP32[$1 >> 2] = $2;
   HEAP32[$1 + 4 >> 2] = $0;
   HEAPF32[(HEAP32[$5 + 24 >> 2] + Math_imul(HEAP32[$4 + 188 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[HEAP32[$4 + 184 >> 2] + 72 >> 2];
   HEAP32[$4 + 188 >> 2] = HEAP32[$4 + 188 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$4 + 164 >> 2] = HEAP32[$5 + 12 >> 2];
 HEAP32[$4 + 168 >> 2] = HEAP32[$5 + 36 >> 2];
 HEAP32[$4 + 180 >> 2] = HEAP32[$5 >> 2];
 $3 = HEAP32[$4 + 200 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $6 = $0;
 $2 = $4 + 140 | 0;
 $0 = $2;
 HEAP32[$0 >> 2] = $6;
 HEAP32[$0 + 4 >> 2] = $1;
 $0 = HEAP32[$3 + 20 >> 2];
 $1 = HEAP32[$3 + 16 >> 2];
 $6 = $1;
 $1 = $2;
 HEAP32[$1 + 16 >> 2] = $6;
 HEAP32[$1 + 20 >> 2] = $0;
 $1 = HEAP32[$3 + 12 >> 2];
 $0 = HEAP32[$3 + 8 >> 2];
 $3 = $0;
 $0 = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$4 + 172 >> 2] = HEAP32[$5 + 20 >> 2];
 HEAP32[$4 + 176 >> 2] = HEAP32[$5 + 24 >> 2];
 b2ContactSolver__b2ContactSolver_28b2ContactSolverDef__29($4 + 88 | 0, $4 + 140 | 0);
 HEAP32[$4 + 84 >> 2] = 0;
 while (1) {
  label$6: {
   if (HEAP32[$4 + 84 >> 2] >= HEAP32[HEAP32[$4 + 200 >> 2] + 16 >> 2]) {
    break label$6;
   }
   wasm2js_i32$0 = $4, wasm2js_i32$1 = b2ContactSolver__SolveTOIPositionConstraints_28int_2c_20int_29($4 + 88 | 0, HEAP32[$4 + 196 >> 2], HEAP32[$4 + 192 >> 2]) & 1, 
   HEAP8[wasm2js_i32$0 + 83 | 0] = wasm2js_i32$1;
   if (HEAP8[$4 + 83 | 0] & 1) {
    break label$6;
   }
   HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 84 >> 2] + 1;
   continue;
  }
  break;
 }
 $3 = HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$4 + 196 >> 2], 12) | 0;
 $1 = HEAP32[$3 >> 2];
 $0 = HEAP32[$3 + 4 >> 2];
 $2 = $1;
 $1 = HEAP32[HEAP32[$5 + 8 >> 2] + (HEAP32[$4 + 196 >> 2] << 2) >> 2];
 HEAP32[$1 + 36 >> 2] = $2;
 HEAP32[$1 + 40 >> 2] = $0;
 HEAPF32[HEAP32[HEAP32[$5 + 8 >> 2] + (HEAP32[$4 + 196 >> 2] << 2) >> 2] + 52 >> 2] = HEAPF32[(HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$4 + 196 >> 2], 12) | 0) + 8 >> 2];
 $3 = HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$4 + 192 >> 2], 12) | 0;
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $2 = $0;
 $0 = HEAP32[HEAP32[$5 + 8 >> 2] + (HEAP32[$4 + 192 >> 2] << 2) >> 2];
 HEAP32[$0 + 36 >> 2] = $2;
 HEAP32[$0 + 40 >> 2] = $1;
 HEAPF32[HEAP32[HEAP32[$5 + 8 >> 2] + (HEAP32[$4 + 192 >> 2] << 2) >> 2] + 52 >> 2] = HEAPF32[(HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$4 + 192 >> 2], 12) | 0) + 8 >> 2];
 b2ContactSolver__InitializeVelocityConstraints_28_29($4 + 88 | 0);
 HEAP32[$4 + 76 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 76 >> 2] < HEAP32[HEAP32[$4 + 200 >> 2] + 12 >> 2]) {
   b2ContactSolver__SolveVelocityConstraints_28_29($4 + 88 | 0);
   HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAPF32[$4 + 72 >> 2] = HEAPF32[HEAP32[$4 + 200 >> 2] >> 2];
 HEAP32[$4 + 68 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 68 >> 2] < HEAP32[$5 + 28 >> 2]) {
   $3 = HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$4 + 68 >> 2], 12) | 0;
   $1 = HEAP32[$3 >> 2];
   $0 = HEAP32[$3 + 4 >> 2];
   HEAP32[$4 + 56 >> 2] = $1;
   HEAP32[$4 + 60 >> 2] = $0;
   HEAPF32[$4 + 52 >> 2] = HEAPF32[(HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$4 + 68 >> 2], 12) | 0) + 8 >> 2];
   $3 = HEAP32[$5 + 24 >> 2] + Math_imul(HEAP32[$4 + 68 >> 2], 12) | 0;
   $0 = HEAP32[$3 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   HEAP32[$4 + 40 >> 2] = $0;
   HEAP32[$4 + 44 >> 2] = $1;
   HEAPF32[$4 + 36 >> 2] = HEAPF32[(HEAP32[$5 + 24 >> 2] + Math_imul(HEAP32[$4 + 68 >> 2], 12) | 0) + 8 >> 2];
   operator__28float_2c_20b2Vec2_20const__29($4 + 28 | 0, HEAPF32[$4 + 72 >> 2], $4 + 40 | 0);
   $0 = $4 + 28 | 0;
   if (b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $0) > Math_fround(4)) {
    wasm2js_i32$0 = $4, wasm2js_f32$0 = Math_fround(Math_fround(2) / b2Vec2__Length_28_29_20const($4 + 28 | 0)), 
    HEAPF32[wasm2js_i32$0 + 24 >> 2] = wasm2js_f32$0;
    b2Vec2__operator___28float_29($4 + 40 | 0, HEAPF32[$4 + 24 >> 2]);
   }
   HEAPF32[$4 + 20 >> 2] = HEAPF32[$4 + 72 >> 2] * HEAPF32[$4 + 36 >> 2];
   if (Math_fround(HEAPF32[$4 + 20 >> 2] * HEAPF32[$4 + 20 >> 2]) > Math_fround(2.4674012660980225)) {
    wasm2js_i32$0 = $4, wasm2js_f32$0 = Math_fround(Math_fround(1.5707963705062866) / float_20b2Abs_float__28float_29(HEAPF32[$4 + 20 >> 2])), 
    HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
    HEAPF32[$4 + 36 >> 2] = HEAPF32[$4 + 36 >> 2] * HEAPF32[$4 + 16 >> 2];
   }
   operator__28float_2c_20b2Vec2_20const__29($4 + 8 | 0, HEAPF32[$4 + 72 >> 2], $4 + 40 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($4 + 56 | 0, $4 + 8 | 0);
   HEAPF32[$4 + 52 >> 2] = Math_fround(HEAPF32[$4 + 72 >> 2] * HEAPF32[$4 + 36 >> 2]) + HEAPF32[$4 + 52 >> 2];
   $0 = HEAP32[$4 + 60 >> 2];
   $1 = HEAP32[$4 + 56 >> 2];
   $2 = $1;
   $1 = HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$4 + 68 >> 2], 12) | 0;
   HEAP32[$1 >> 2] = $2;
   HEAP32[$1 + 4 >> 2] = $0;
   HEAPF32[(HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$4 + 68 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$4 + 52 >> 2];
   $1 = HEAP32[$4 + 44 >> 2];
   $0 = HEAP32[$4 + 40 >> 2];
   $2 = $0;
   $0 = HEAP32[$5 + 24 >> 2] + Math_imul(HEAP32[$4 + 68 >> 2], 12) | 0;
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $1;
   HEAPF32[(HEAP32[$5 + 24 >> 2] + Math_imul(HEAP32[$4 + 68 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$4 + 36 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[HEAP32[$5 + 8 >> 2] + (HEAP32[$4 + 68 >> 2] << 2) >> 2];
   $0 = HEAP32[$4 + 60 >> 2];
   $1 = HEAP32[$4 + 56 >> 2];
   $2 = $1;
   $1 = HEAP32[$4 + 4 >> 2];
   HEAP32[$1 + 44 >> 2] = $2;
   HEAP32[$1 + 48 >> 2] = $0;
   HEAPF32[HEAP32[$4 + 4 >> 2] + 56 >> 2] = HEAPF32[$4 + 52 >> 2];
   $1 = HEAP32[$4 + 44 >> 2];
   $0 = HEAP32[$4 + 40 >> 2];
   $2 = $0;
   $0 = HEAP32[$4 + 4 >> 2];
   HEAP32[$0 + 64 >> 2] = $2;
   HEAP32[$0 + 68 >> 2] = $1;
   HEAPF32[HEAP32[$4 + 4 >> 2] + 72 >> 2] = HEAPF32[$4 + 36 >> 2];
   b2Body__SynchronizeTransform_28_29(HEAP32[$4 + 4 >> 2]);
   HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] + 1;
   continue;
  }
  break;
 }
 b2Island__Report_28b2ContactVelocityConstraint_20const__29($5, HEAP32[$4 + 128 >> 2]);
 b2ContactSolver___b2ContactSolver_28_29($4 + 88 | 0);
 __stack_pointer = $4 + 208 | 0;
}

function b2ContactSolver__SolveTOIPositionConstraints_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $3 = __stack_pointer - 272 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 268 >> 2] = $0;
 HEAP32[$3 + 264 >> 2] = $1;
 HEAP32[$3 + 260 >> 2] = $2;
 $4 = HEAP32[$3 + 268 >> 2];
 HEAPF32[$3 + 256 >> 2] = 0;
 HEAP32[$3 + 252 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 252 >> 2] < HEAP32[$4 + 48 >> 2]) {
   HEAP32[$3 + 248 >> 2] = HEAP32[$4 + 36 >> 2] + Math_imul(HEAP32[$3 + 252 >> 2], 88);
   HEAP32[$3 + 244 >> 2] = HEAP32[HEAP32[$3 + 248 >> 2] + 32 >> 2];
   HEAP32[$3 + 240 >> 2] = HEAP32[HEAP32[$3 + 248 >> 2] + 36 >> 2];
   $2 = HEAP32[$3 + 248 >> 2];
   $1 = HEAP32[$2 + 48 >> 2];
   $0 = HEAP32[$2 + 52 >> 2];
   HEAP32[$3 + 232 >> 2] = $1;
   HEAP32[$3 + 236 >> 2] = $0;
   $2 = HEAP32[$3 + 248 >> 2];
   $0 = HEAP32[$2 + 56 >> 2];
   $1 = HEAP32[$2 + 60 >> 2];
   HEAP32[$3 + 224 >> 2] = $0;
   HEAP32[$3 + 228 >> 2] = $1;
   HEAP32[$3 + 220 >> 2] = HEAP32[HEAP32[$3 + 248 >> 2] + 84 >> 2];
   HEAPF32[$3 + 216 >> 2] = 0;
   HEAPF32[$3 + 212 >> 2] = 0;
   if (!(HEAP32[$3 + 244 >> 2] != HEAP32[$3 + 264 >> 2] & HEAP32[$3 + 244 >> 2] != HEAP32[$3 + 260 >> 2])) {
    HEAPF32[$3 + 216 >> 2] = HEAPF32[HEAP32[$3 + 248 >> 2] + 40 >> 2];
    HEAPF32[$3 + 212 >> 2] = HEAPF32[HEAP32[$3 + 248 >> 2] + 64 >> 2];
   }
   HEAPF32[$3 + 208 >> 2] = 0;
   HEAPF32[$3 + 204 >> 2] = 0;
   if (!(HEAP32[$3 + 240 >> 2] != HEAP32[$3 + 264 >> 2] & HEAP32[$3 + 240 >> 2] != HEAP32[$3 + 260 >> 2])) {
    HEAPF32[$3 + 208 >> 2] = HEAPF32[HEAP32[$3 + 248 >> 2] + 44 >> 2];
    HEAPF32[$3 + 204 >> 2] = HEAPF32[HEAP32[$3 + 248 >> 2] + 68 >> 2];
   }
   $2 = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$3 + 244 >> 2], 12) | 0;
   $1 = HEAP32[$2 >> 2];
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$3 + 192 >> 2] = $1;
   HEAP32[$3 + 196 >> 2] = $0;
   HEAPF32[$3 + 188 >> 2] = HEAPF32[(HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$3 + 244 >> 2], 12) | 0) + 8 >> 2];
   $2 = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$3 + 240 >> 2], 12) | 0;
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   HEAP32[$3 + 176 >> 2] = $0;
   HEAP32[$3 + 180 >> 2] = $1;
   HEAPF32[$3 + 172 >> 2] = HEAPF32[(HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$3 + 240 >> 2], 12) | 0) + 8 >> 2];
   HEAP32[$3 + 168 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 168 >> 2] < HEAP32[$3 + 220 >> 2]) {
     b2Transform__b2Transform_28_29($3 + 152 | 0);
     b2Transform__b2Transform_28_29($3 + 136 | 0);
     b2Rot__Set_28float_29($3 + 160 | 0, HEAPF32[$3 + 188 >> 2]);
     b2Rot__Set_28float_29($3 + 144 | 0, HEAPF32[$3 + 172 >> 2]);
     b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($3 + 120 | 0, $3 + 160 | 0, $3 + 232 | 0);
     operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 128 | 0, $3 + 192 | 0, $3 + 120 | 0);
     $0 = HEAP32[$3 + 132 >> 2];
     $1 = HEAP32[$3 + 128 >> 2];
     $2 = $1;
     $1 = $3 + 152 | 0;
     HEAP32[$1 >> 2] = $2;
     HEAP32[$1 + 4 >> 2] = $0;
     b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($3 + 104 | 0, $3 + 144 | 0, $3 + 224 | 0);
     operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 112 | 0, $3 + 176 | 0, $3 + 104 | 0);
     $1 = HEAP32[$3 + 116 >> 2];
     $0 = HEAP32[$3 + 112 >> 2];
     $2 = $0;
     $0 = $3 + 136 | 0;
     HEAP32[$0 >> 2] = $2;
     HEAP32[$0 + 4 >> 2] = $1;
     b2PositionSolverManifold__b2PositionSolverManifold_28_29($3 + 84 | 0);
     b2PositionSolverManifold__Initialize_28b2ContactPositionConstraint__2c_20b2Transform_20const__2c_20b2Transform_20const__2c_20int_29($3 + 84 | 0, HEAP32[$3 + 248 >> 2], $3 + 152 | 0, $3 + 136 | 0, HEAP32[$3 + 168 >> 2]);
     $2 = $3 + 84 | 0;
     $1 = HEAP32[$2 >> 2];
     $0 = HEAP32[$2 + 4 >> 2];
     HEAP32[$3 + 72 >> 2] = $1;
     HEAP32[$3 + 76 >> 2] = $0;
     $2 = $3 + 84 | 0;
     $0 = HEAP32[$2 + 8 >> 2];
     $1 = HEAP32[$2 + 12 >> 2];
     HEAP32[$3 + 64 >> 2] = $0;
     HEAP32[$3 + 68 >> 2] = $1;
     HEAPF32[$3 + 60 >> 2] = HEAPF32[$3 + 100 >> 2];
     operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 52 | 0, $3 - -64 | 0, $3 + 192 | 0);
     operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 44 | 0, $3 - -64 | 0, $3 + 176 | 0);
     wasm2js_i32$0 = $3, wasm2js_f32$0 = float_20b2Min_float__28float_2c_20float_29(HEAPF32[$3 + 256 >> 2], HEAPF32[$3 + 60 >> 2]), 
     HEAPF32[wasm2js_i32$0 + 256 >> 2] = wasm2js_f32$0;
     wasm2js_i32$0 = $3, wasm2js_f32$0 = float_20b2Clamp_float__28float_2c_20float_2c_20float_29(Math_fround(Math_fround(HEAPF32[$3 + 60 >> 2] + Math_fround(.004999999888241291)) * Math_fround(.75)), Math_fround(-.20000000298023224), Math_fround(0)), 
     HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
     wasm2js_i32$0 = $3, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 52 | 0, $3 + 72 | 0), 
     HEAPF32[wasm2js_i32$0 + 36 >> 2] = wasm2js_f32$0;
     wasm2js_i32$0 = $3, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 44 | 0, $3 + 72 | 0), 
     HEAPF32[wasm2js_i32$0 + 32 >> 2] = wasm2js_f32$0;
     HEAPF32[$3 + 28 >> 2] = Math_fround(Math_fround(HEAPF32[$3 + 204 >> 2] * HEAPF32[$3 + 32 >> 2]) * HEAPF32[$3 + 32 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$3 + 212 >> 2] * HEAPF32[$3 + 36 >> 2]) * HEAPF32[$3 + 36 >> 2]) + Math_fround(HEAPF32[$3 + 216 >> 2] + HEAPF32[$3 + 208 >> 2]));
     if (HEAPF32[$3 + 28 >> 2] > Math_fround(0)) {
      $5 = Math_fround(Math_fround(-HEAPF32[$3 + 40 >> 2]) / HEAPF32[$3 + 28 >> 2]);
     } else {
      $5 = Math_fround(0);
     }
     HEAPF32[$3 + 24 >> 2] = $5;
     operator__28float_2c_20b2Vec2_20const__29($3 + 16 | 0, HEAPF32[$3 + 24 >> 2], $3 + 72 | 0);
     operator__28float_2c_20b2Vec2_20const__29($3 + 8 | 0, HEAPF32[$3 + 216 >> 2], $3 + 16 | 0);
     b2Vec2__operator___28b2Vec2_20const__29_1($3 + 192 | 0, $3 + 8 | 0);
     wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$3 + 212 >> 2]) * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 52 | 0, $3 + 16 | 0)) + HEAPF32[$3 + 188 >> 2]), 
     HEAPF32[wasm2js_i32$0 + 188 >> 2] = wasm2js_f32$0;
     operator__28float_2c_20b2Vec2_20const__29($3, HEAPF32[$3 + 208 >> 2], $3 + 16 | 0);
     b2Vec2__operator___28b2Vec2_20const__29($3 + 176 | 0, $3);
     wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$3 + 204 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 44 | 0, $3 + 16 | 0)) + HEAPF32[$3 + 172 >> 2]), 
     HEAPF32[wasm2js_i32$0 + 172 >> 2] = wasm2js_f32$0;
     HEAP32[$3 + 168 >> 2] = HEAP32[$3 + 168 >> 2] + 1;
     continue;
    }
    break;
   }
   $0 = HEAP32[$3 + 196 >> 2];
   $1 = HEAP32[$3 + 192 >> 2];
   $2 = $1;
   $1 = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$3 + 244 >> 2], 12) | 0;
   HEAP32[$1 >> 2] = $2;
   HEAP32[$1 + 4 >> 2] = $0;
   HEAPF32[(HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$3 + 244 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$3 + 188 >> 2];
   $1 = HEAP32[$3 + 180 >> 2];
   $0 = HEAP32[$3 + 176 >> 2];
   $2 = $0;
   $0 = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$3 + 240 >> 2], 12) | 0;
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $1;
   HEAPF32[(HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$3 + 240 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$3 + 172 >> 2];
   HEAP32[$3 + 252 >> 2] = HEAP32[$3 + 252 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 272 | 0;
 return HEAPF32[$3 + 256 >> 2] >= Math_fround(-.007499999832361937);
}

function b2Distance_28b2DistanceOutput__2c_20b2SimplexCache__2c_20b2DistanceInput_20const__29($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 336 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 332 >> 2] = $0;
 HEAP32[$3 + 328 >> 2] = $1;
 HEAP32[$3 + 324 >> 2] = $2;
 HEAP32[7502] = HEAP32[7502] + 1;
 HEAP32[$3 + 320 >> 2] = HEAP32[$3 + 324 >> 2];
 HEAP32[$3 + 316 >> 2] = HEAP32[$3 + 324 >> 2] + 28;
 $2 = HEAP32[$3 + 324 >> 2];
 $1 = HEAP32[$2 + 64 >> 2];
 $0 = HEAP32[$2 + 68 >> 2];
 HEAP32[$3 + 304 >> 2] = $1;
 HEAP32[$3 + 308 >> 2] = $0;
 $1 = HEAP32[$2 + 60 >> 2];
 $0 = HEAP32[$2 + 56 >> 2];
 HEAP32[$3 + 296 >> 2] = $0;
 HEAP32[$3 + 300 >> 2] = $1;
 $2 = HEAP32[$3 + 324 >> 2];
 $1 = HEAP32[$2 + 80 >> 2];
 $0 = HEAP32[$2 + 84 >> 2];
 HEAP32[$3 + 288 >> 2] = $1;
 HEAP32[$3 + 292 >> 2] = $0;
 $1 = HEAP32[$2 + 76 >> 2];
 $0 = HEAP32[$2 + 72 >> 2];
 HEAP32[$3 + 280 >> 2] = $0;
 HEAP32[$3 + 284 >> 2] = $1;
 b2Simplex__b2Simplex_28_29($3 + 168 | 0);
 b2Simplex__ReadCache_28b2SimplexCache_20const__2c_20b2DistanceProxy_20const__2c_20b2Transform_20const__2c_20b2DistanceProxy_20const__2c_20b2Transform_20const__29($3 + 168 | 0, HEAP32[$3 + 328 >> 2], HEAP32[$3 + 320 >> 2], $3 + 296 | 0, HEAP32[$3 + 316 >> 2], $3 + 280 | 0);
 HEAP32[$3 + 164 >> 2] = $3 + 168;
 HEAP32[$3 + 160 >> 2] = 20;
 HEAP32[$3 + 132 >> 2] = 0;
 HEAP32[$3 + 128 >> 2] = 0;
 while (1) {
  label$2: {
   if (HEAP32[$3 + 128 >> 2] >= 20) {
    break label$2;
   }
   HEAP32[$3 + 132 >> 2] = HEAP32[$3 + 276 >> 2];
   HEAP32[$3 + 124 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 124 >> 2] < HEAP32[$3 + 132 >> 2]) {
     HEAP32[($3 + 148 | 0) + (HEAP32[$3 + 124 >> 2] << 2) >> 2] = HEAP32[(HEAP32[$3 + 164 >> 2] + Math_imul(HEAP32[$3 + 124 >> 2], 36) | 0) + 28 >> 2];
     HEAP32[($3 + 136 | 0) + (HEAP32[$3 + 124 >> 2] << 2) >> 2] = HEAP32[(HEAP32[$3 + 164 >> 2] + Math_imul(HEAP32[$3 + 124 >> 2], 36) | 0) + 32 >> 2];
     HEAP32[$3 + 124 >> 2] = HEAP32[$3 + 124 >> 2] + 1;
     continue;
    }
    break;
   }
   label$5: {
    label$6: {
     switch (HEAP32[$3 + 276 >> 2] - 1 | 0) {
     case 1:
      b2Simplex__Solve2_28_29($3 + 168 | 0);
      break label$5;

     case 2:
      b2Simplex__Solve3_28_29($3 + 168 | 0);
      break label$5;

     case 0:
      break label$5;

     default:
      break label$6;
     }
    }
    __assert_fail(8975, 5927, 505, 9791);
    wasm2js_trap();
   }
   if (HEAP32[$3 + 276 >> 2] == 3) {
    break label$2;
   }
   b2Simplex__GetSearchDirection_28_29_20const($3 + 116 | 0, $3 + 168 | 0);
   if (b2Vec2__LengthSquared_28_29_20const($3 + 116 | 0) < Math_fround(14210854715202004e-30)) {
    break label$2;
   }
   HEAP32[$3 + 112 >> 2] = HEAP32[$3 + 164 >> 2] + Math_imul(HEAP32[$3 + 276 >> 2], 36);
   $0 = HEAP32[$3 + 320 >> 2];
   b2Vec2__operator__28_29_20const($3 + 96 | 0, $3 + 116 | 0);
   b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($3 + 104 | 0, $3 + 304 | 0, $3 + 96 | 0);
   $0 = b2DistanceProxy__GetSupport_28b2Vec2_20const__29_20const($0, $3 + 104 | 0);
   HEAP32[HEAP32[$3 + 112 >> 2] + 28 >> 2] = $0;
   b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($3 + 88 | 0, $3 + 296 | 0, b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$3 + 320 >> 2], HEAP32[HEAP32[$3 + 112 >> 2] + 28 >> 2]));
   $0 = HEAP32[$3 + 92 >> 2];
   $1 = HEAP32[$3 + 88 >> 2];
   $2 = $1;
   $1 = HEAP32[$3 + 112 >> 2];
   HEAP32[$1 >> 2] = $2;
   HEAP32[$1 + 4 >> 2] = $0;
   $0 = HEAP32[$3 + 316 >> 2];
   b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($3 + 80 | 0, $3 + 288 | 0, $3 + 116 | 0);
   $0 = b2DistanceProxy__GetSupport_28b2Vec2_20const__29_20const($0, $3 + 80 | 0);
   HEAP32[HEAP32[$3 + 112 >> 2] + 32 >> 2] = $0;
   b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($3 + 72 | 0, $3 + 280 | 0, b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$3 + 316 >> 2], HEAP32[HEAP32[$3 + 112 >> 2] + 32 >> 2]));
   $1 = HEAP32[$3 + 76 >> 2];
   $0 = HEAP32[$3 + 72 >> 2];
   $2 = $0;
   $0 = HEAP32[$3 + 112 >> 2];
   HEAP32[$0 + 8 >> 2] = $2;
   HEAP32[$0 + 12 >> 2] = $1;
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 - -64 | 0, HEAP32[$3 + 112 >> 2] + 8 | 0, HEAP32[$3 + 112 >> 2]);
   $0 = HEAP32[$3 + 68 >> 2];
   $1 = HEAP32[$3 + 64 >> 2];
   $2 = $1;
   $1 = HEAP32[$3 + 112 >> 2];
   HEAP32[$1 + 16 >> 2] = $2;
   HEAP32[$1 + 20 >> 2] = $0;
   HEAP32[$3 + 128 >> 2] = HEAP32[$3 + 128 >> 2] + 1;
   HEAP32[7503] = HEAP32[7503] + 1;
   HEAP8[$3 + 63 | 0] = 0;
   HEAP32[$3 + 56 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 56 >> 2] < HEAP32[$3 + 132 >> 2]) {
     if (HEAP32[HEAP32[$3 + 112 >> 2] + 28 >> 2] != HEAP32[($3 + 148 | 0) + (HEAP32[$3 + 56 >> 2] << 2) >> 2] | HEAP32[HEAP32[$3 + 112 >> 2] + 32 >> 2] != HEAP32[($3 + 136 | 0) + (HEAP32[$3 + 56 >> 2] << 2) >> 2]) {
      HEAP32[$3 + 56 >> 2] = HEAP32[$3 + 56 >> 2] + 1;
      continue;
     } else {
      HEAP8[$3 + 63 | 0] = 1;
     }
    }
    break;
   }
   if (HEAP8[$3 + 63 | 0] & 1) {
    break label$2;
   }
   HEAP32[$3 + 276 >> 2] = HEAP32[$3 + 276 >> 2] + 1;
   continue;
  }
  break;
 }
 wasm2js_i32$0 = 30016, wasm2js_i32$1 = int_20b2Max_int__28int_2c_20int_29(HEAP32[7504], HEAP32[$3 + 128 >> 2]), 
 HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 b2Simplex__GetWitnessPoints_28b2Vec2__2c_20b2Vec2__29_20const($3 + 168 | 0, HEAP32[$3 + 332 >> 2], HEAP32[$3 + 332 >> 2] + 8 | 0);
 $4 = b2Distance_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$3 + 332 >> 2], HEAP32[$3 + 332 >> 2] + 8 | 0);
 HEAPF32[HEAP32[$3 + 332 >> 2] + 16 >> 2] = $4;
 HEAP32[HEAP32[$3 + 332 >> 2] + 20 >> 2] = HEAP32[$3 + 128 >> 2];
 b2Simplex__WriteCache_28b2SimplexCache__29_20const($3 + 168 | 0, HEAP32[$3 + 328 >> 2]);
 if (HEAP8[HEAP32[$3 + 324 >> 2] + 88 | 0] & 1) {
  HEAPF32[$3 + 52 >> 2] = HEAPF32[HEAP32[$3 + 320 >> 2] + 24 >> 2];
  HEAPF32[$3 + 48 >> 2] = HEAPF32[HEAP32[$3 + 316 >> 2] + 24 >> 2];
  label$13: {
   if (!(!(HEAPF32[HEAP32[$3 + 332 >> 2] + 16 >> 2] > Math_fround(HEAPF32[$3 + 52 >> 2] + HEAPF32[$3 + 48 >> 2])) | !(HEAPF32[HEAP32[$3 + 332 >> 2] + 16 >> 2] > Math_fround(1.1920928955078125e-7)))) {
    $0 = HEAP32[$3 + 332 >> 2];
    HEAPF32[$0 + 16 >> 2] = HEAPF32[$0 + 16 >> 2] - Math_fround(HEAPF32[$3 + 52 >> 2] + HEAPF32[$3 + 48 >> 2]);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 40 | 0, HEAP32[$3 + 332 >> 2] + 8 | 0, HEAP32[$3 + 332 >> 2]);
    b2Vec2__Normalize_28_29($3 + 40 | 0);
    operator__28float_2c_20b2Vec2_20const__29($3 + 32 | 0, HEAPF32[$3 + 52 >> 2], $3 + 40 | 0);
    b2Vec2__operator___28b2Vec2_20const__29(HEAP32[$3 + 332 >> 2], $3 + 32 | 0);
    operator__28float_2c_20b2Vec2_20const__29($3 + 24 | 0, HEAPF32[$3 + 48 >> 2], $3 + 40 | 0);
    b2Vec2__operator___28b2Vec2_20const__29_1(HEAP32[$3 + 332 >> 2] + 8 | 0, $3 + 24 | 0);
    break label$13;
   }
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 8 | 0, HEAP32[$3 + 332 >> 2], HEAP32[$3 + 332 >> 2] + 8 | 0);
   operator__28float_2c_20b2Vec2_20const__29($3 + 16 | 0, Math_fround(.5), $3 + 8 | 0);
   $1 = HEAP32[$3 + 20 >> 2];
   $0 = HEAP32[$3 + 16 >> 2];
   $2 = $0;
   $0 = HEAP32[$3 + 332 >> 2];
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $1;
   $0 = HEAP32[$3 + 20 >> 2];
   $1 = HEAP32[$3 + 16 >> 2];
   $2 = $1;
   $1 = HEAP32[$3 + 332 >> 2];
   HEAP32[$1 + 8 >> 2] = $2;
   HEAP32[$1 + 12 >> 2] = $0;
   HEAPF32[HEAP32[$3 + 332 >> 2] + 16 >> 2] = 0;
  }
 }
 __stack_pointer = $3 + 336 | 0;
}

function b2RevoluteJoint__SolvePositionConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 208 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 204 >> 2] = $0;
 HEAP32[$2 + 200 >> 2] = $1;
 $3 = HEAP32[$2 + 204 >> 2];
 $4 = HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 128 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 192 >> 2] = $1;
 HEAP32[$2 + 196 >> 2] = $0;
 HEAPF32[$2 + 188 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 128 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 176 >> 2] = $0;
 HEAP32[$2 + 180 >> 2] = $1;
 HEAPF32[$2 + 172 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($2 + 164 | 0, HEAPF32[$2 + 188 >> 2]);
 b2Rot__b2Rot_28float_29($2 + 156 | 0, HEAPF32[$2 + 172 >> 2]);
 HEAPF32[$2 + 152 >> 2] = 0;
 HEAPF32[$2 + 148 >> 2] = 0;
 HEAP8[$2 + 147 | 0] = Math_fround(HEAPF32[$3 + 176 >> 2] + HEAPF32[$3 + 180 >> 2]) == Math_fround(0);
 if (!(HEAP8[$2 + 147 | 0] & 1 | (!(HEAP8[$3 + 112 | 0] & 1) | !HEAP32[$3 + 224 >> 2]))) {
  HEAPF32[$2 + 140 >> 2] = Math_fround(HEAPF32[$2 + 172 >> 2] - HEAPF32[$2 + 188 >> 2]) - HEAPF32[$3 + 116 >> 2];
  HEAPF32[$2 + 136 >> 2] = 0;
  label$2: {
   if (HEAP32[$3 + 224 >> 2] == 3) {
    wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Clamp_float__28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[$2 + 140 >> 2] - HEAPF32[$3 + 120 >> 2]), Math_fround(-.13962635397911072), Math_fround(.13962635397911072)), 
    HEAPF32[wasm2js_i32$0 + 132 >> 2] = wasm2js_f32$0;
    HEAPF32[$2 + 136 >> 2] = Math_fround(-HEAPF32[$3 + 220 >> 2]) * HEAPF32[$2 + 132 >> 2];
    wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Abs_float__28float_29(HEAPF32[$2 + 132 >> 2]), 
    HEAPF32[wasm2js_i32$0 + 152 >> 2] = wasm2js_f32$0;
    break label$2;
   }
   label$4: {
    if (HEAP32[$3 + 224 >> 2] == 1) {
     HEAPF32[$2 + 128 >> 2] = HEAPF32[$2 + 140 >> 2] - HEAPF32[$3 + 120 >> 2];
     HEAPF32[$2 + 152 >> 2] = -HEAPF32[$2 + 128 >> 2];
     wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Clamp_float__28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[$2 + 128 >> 2] + Math_fround(.03490658849477768)), Math_fround(-.13962635397911072), Math_fround(0)), 
     HEAPF32[wasm2js_i32$0 + 128 >> 2] = wasm2js_f32$0;
     HEAPF32[$2 + 136 >> 2] = Math_fround(-HEAPF32[$3 + 220 >> 2]) * HEAPF32[$2 + 128 >> 2];
     break label$4;
    }
    if (HEAP32[$3 + 224 >> 2] == 2) {
     HEAPF32[$2 + 124 >> 2] = HEAPF32[$2 + 140 >> 2] - HEAPF32[$3 + 124 >> 2];
     HEAPF32[$2 + 152 >> 2] = HEAPF32[$2 + 124 >> 2];
     wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Clamp_float__28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[$2 + 124 >> 2] + Math_fround(-.03490658849477768)), Math_fround(0), Math_fround(.13962635397911072)), 
     HEAPF32[wasm2js_i32$0 + 124 >> 2] = wasm2js_f32$0;
     HEAPF32[$2 + 136 >> 2] = Math_fround(-HEAPF32[$3 + 220 >> 2]) * HEAPF32[$2 + 124 >> 2];
    }
   }
  }
  HEAPF32[$2 + 188 >> 2] = Math_fround(Math_fround(-HEAPF32[$3 + 176 >> 2]) * HEAPF32[$2 + 136 >> 2]) + HEAPF32[$2 + 188 >> 2];
  HEAPF32[$2 + 172 >> 2] = Math_fround(HEAPF32[$3 + 180 >> 2] * HEAPF32[$2 + 136 >> 2]) + HEAPF32[$2 + 172 >> 2];
 }
 b2Rot__Set_28float_29($2 + 164 | 0, HEAPF32[$2 + 188 >> 2]);
 b2Rot__Set_28float_29($2 + 156 | 0, HEAPF32[$2 + 172 >> 2]);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 108 | 0, $3 + 68 | 0, $3 + 152 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 116 | 0, $2 + 164 | 0, $2 + 108 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 92 | 0, $3 + 76 | 0, $3 + 160 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 100 | 0, $2 + 156 | 0, $2 + 92 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 68 | 0, $2 + 176 | 0, $2 + 100 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 76 | 0, $2 + 68 | 0, $2 + 192 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 84 | 0, $2 + 76 | 0, $2 + 116 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Vec2__Length_28_29_20const($2 + 84 | 0), HEAPF32[wasm2js_i32$0 + 148 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 64 >> 2] = HEAPF32[$3 + 168 >> 2];
 HEAPF32[$2 + 60 >> 2] = HEAPF32[$3 + 172 >> 2];
 HEAPF32[$2 + 56 >> 2] = HEAPF32[$3 + 176 >> 2];
 HEAPF32[$2 + 52 >> 2] = HEAPF32[$3 + 180 >> 2];
 b2Mat22__b2Mat22_28_29($2 + 36 | 0);
 HEAPF32[$2 + 36 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 52 >> 2] * HEAPF32[$2 + 104 >> 2]) * HEAPF32[$2 + 104 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 56 >> 2] * HEAPF32[$2 + 120 >> 2]) * HEAPF32[$2 + 120 >> 2]) + Math_fround(HEAPF32[$2 + 64 >> 2] + HEAPF32[$2 + 60 >> 2]));
 HEAPF32[$2 + 40 >> 2] = Math_fround(Math_fround(Math_fround(-HEAPF32[$2 + 56 >> 2]) * HEAPF32[$2 + 116 >> 2]) * HEAPF32[$2 + 120 >> 2]) - Math_fround(Math_fround(HEAPF32[$2 + 52 >> 2] * HEAPF32[$2 + 100 >> 2]) * HEAPF32[$2 + 104 >> 2]);
 HEAPF32[$2 + 44 >> 2] = HEAPF32[$2 + 40 >> 2];
 HEAPF32[$2 + 48 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 52 >> 2] * HEAPF32[$2 + 100 >> 2]) * HEAPF32[$2 + 100 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 56 >> 2] * HEAPF32[$2 + 116 >> 2]) * HEAPF32[$2 + 116 >> 2]) + Math_fround(HEAPF32[$2 + 64 >> 2] + HEAPF32[$2 + 60 >> 2]));
 b2Mat22__Solve_28b2Vec2_20const__29_20const($2 + 20 | 0, $2 + 36 | 0, $2 + 84 | 0);
 b2Vec2__operator__28_29_20const($2 + 28 | 0, $2 + 20 | 0);
 operator__28float_2c_20b2Vec2_20const__29($2 + 12 | 0, HEAPF32[$2 + 64 >> 2], $2 + 28 | 0);
 b2Vec2__operator___28b2Vec2_20const__29_1($2 + 192 | 0, $2 + 12 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$2 + 56 >> 2]) * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 116 | 0, $2 + 28 | 0)) + HEAPF32[$2 + 188 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 188 >> 2] = wasm2js_f32$0;
 operator__28float_2c_20b2Vec2_20const__29($2 + 4 | 0, HEAPF32[$2 + 60 >> 2], $2 + 28 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 176 | 0, $2 + 4 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$2 + 52 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 100 | 0, $2 + 28 | 0)) + HEAPF32[$2 + 172 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 172 >> 2] = wasm2js_f32$0;
 $0 = HEAP32[$2 + 196 >> 2];
 $1 = HEAP32[$2 + 192 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 128 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 128 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 188 >> 2];
 $1 = HEAP32[$2 + 180 >> 2];
 $0 = HEAP32[$2 + 176 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 172 >> 2];
 __stack_pointer = $2 + 208 | 0;
 $5 = HEAPF32[$2 + 148 >> 2] <= Math_fround(.004999999888241291) ? HEAPF32[$2 + 152 >> 2] <= Math_fround(.03490658849477768) : $5;
 return $5 | 0;
}

function b2Simplex__Solve3_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $1 = __stack_pointer - 144 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 140 >> 2] = $0;
 $2 = HEAP32[$1 + 140 >> 2];
 $0 = HEAP32[$2 + 16 >> 2];
 $3 = HEAP32[$2 + 20 >> 2];
 HEAP32[$1 + 128 >> 2] = $0;
 HEAP32[$1 + 132 >> 2] = $3;
 $0 = HEAP32[$2 + 56 >> 2];
 $3 = HEAP32[$2 + 52 >> 2];
 HEAP32[$1 + 120 >> 2] = $3;
 HEAP32[$1 + 124 >> 2] = $0;
 $3 = HEAP32[$2 + 92 >> 2];
 $0 = HEAP32[$2 + 88 >> 2];
 HEAP32[$1 + 112 >> 2] = $0;
 HEAP32[$1 + 116 >> 2] = $3;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 104 | 0, $1 + 120 | 0, $1 + 128 | 0);
 wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 128 | 0, $1 + 104 | 0), 
 HEAPF32[wasm2js_i32$0 + 100 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 120 | 0, $1 + 104 | 0), 
 HEAPF32[wasm2js_i32$0 + 96 >> 2] = wasm2js_f32$0;
 HEAPF32[$1 + 92 >> 2] = HEAPF32[$1 + 96 >> 2];
 HEAPF32[$1 + 88 >> 2] = -HEAPF32[$1 + 100 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 80 | 0, $1 + 112 | 0, $1 + 128 | 0);
 wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 128 | 0, $1 + 80 | 0), 
 HEAPF32[wasm2js_i32$0 + 76 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 112 | 0, $1 + 80 | 0), 
 HEAPF32[wasm2js_i32$0 + 72 >> 2] = wasm2js_f32$0;
 HEAPF32[$1 + 68 >> 2] = HEAPF32[$1 + 72 >> 2];
 HEAPF32[$1 + 64 >> 2] = -HEAPF32[$1 + 76 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 56 | 0, $1 + 112 | 0, $1 + 120 | 0);
 wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 120 | 0, $1 + 56 | 0), 
 HEAPF32[wasm2js_i32$0 + 52 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 112 | 0, $1 + 56 | 0), 
 HEAPF32[wasm2js_i32$0 + 48 >> 2] = wasm2js_f32$0;
 HEAPF32[$1 + 44 >> 2] = HEAPF32[$1 + 48 >> 2];
 HEAPF32[$1 + 40 >> 2] = -HEAPF32[$1 + 52 >> 2];
 wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 104 | 0, $1 + 80 | 0), 
 HEAPF32[wasm2js_i32$0 + 36 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(HEAPF32[$1 + 36 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 120 | 0, $1 + 112 | 0)), 
 HEAPF32[wasm2js_i32$0 + 32 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(HEAPF32[$1 + 36 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 112 | 0, $1 + 128 | 0)), 
 HEAPF32[wasm2js_i32$0 + 28 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(HEAPF32[$1 + 36 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 128 | 0, $1 + 120 | 0)), 
 HEAPF32[wasm2js_i32$0 + 24 >> 2] = wasm2js_f32$0;
 label$1: {
  if (!(!(HEAPF32[$1 + 88 >> 2] <= Math_fround(0)) | !(HEAPF32[$1 + 64 >> 2] <= Math_fround(0)))) {
   HEAPF32[$2 + 24 >> 2] = 1;
   HEAP32[$2 + 108 >> 2] = 1;
   break label$1;
  }
  if (!(!(HEAPF32[$1 + 24 >> 2] <= Math_fround(0)) | (!(HEAPF32[$1 + 92 >> 2] > Math_fround(0)) | !(HEAPF32[$1 + 88 >> 2] > Math_fround(0))))) {
   HEAPF32[$1 + 20 >> 2] = Math_fround(1) / Math_fround(HEAPF32[$1 + 92 >> 2] + HEAPF32[$1 + 88 >> 2]);
   HEAPF32[$2 + 24 >> 2] = HEAPF32[$1 + 92 >> 2] * HEAPF32[$1 + 20 >> 2];
   HEAPF32[$2 + 60 >> 2] = HEAPF32[$1 + 88 >> 2] * HEAPF32[$1 + 20 >> 2];
   HEAP32[$2 + 108 >> 2] = 2;
   break label$1;
  }
  if (!(!(HEAPF32[$1 + 28 >> 2] <= Math_fround(0)) | (!(HEAPF32[$1 + 68 >> 2] > Math_fround(0)) | !(HEAPF32[$1 + 64 >> 2] > Math_fround(0))))) {
   HEAPF32[$1 + 16 >> 2] = Math_fround(1) / Math_fround(HEAPF32[$1 + 68 >> 2] + HEAPF32[$1 + 64 >> 2]);
   HEAPF32[$2 + 24 >> 2] = HEAPF32[$1 + 68 >> 2] * HEAPF32[$1 + 16 >> 2];
   HEAPF32[$2 + 96 >> 2] = HEAPF32[$1 + 64 >> 2] * HEAPF32[$1 + 16 >> 2];
   HEAP32[$2 + 108 >> 2] = 2;
   $0 = HEAP32[$2 + 76 >> 2];
   $3 = HEAP32[$2 + 72 >> 2];
   HEAP32[$2 + 36 >> 2] = $3;
   HEAP32[$2 + 40 >> 2] = $0;
   HEAP32[$2 + 68 >> 2] = HEAP32[$2 + 104 >> 2];
   $3 = HEAP32[$2 + 100 >> 2];
   $0 = HEAP32[$2 + 96 >> 2];
   HEAP32[$2 + 60 >> 2] = $0;
   HEAP32[$2 + 64 >> 2] = $3;
   $0 = HEAP32[$2 + 92 >> 2];
   $3 = HEAP32[$2 + 88 >> 2];
   HEAP32[$2 + 52 >> 2] = $3;
   HEAP32[$2 + 56 >> 2] = $0;
   $3 = HEAP32[$2 + 84 >> 2];
   $0 = HEAP32[$2 + 80 >> 2];
   HEAP32[$2 + 44 >> 2] = $0;
   HEAP32[$2 + 48 >> 2] = $3;
   break label$1;
  }
  if (!(!(HEAPF32[$1 + 92 >> 2] <= Math_fround(0)) | !(HEAPF32[$1 + 40 >> 2] <= Math_fround(0)))) {
   HEAPF32[$2 + 60 >> 2] = 1;
   HEAP32[$2 + 108 >> 2] = 1;
   $0 = HEAP32[$2 + 40 >> 2];
   $3 = HEAP32[$2 + 36 >> 2];
   HEAP32[$2 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 68 >> 2];
   $3 = HEAP32[$2 + 64 >> 2];
   $0 = HEAP32[$2 + 60 >> 2];
   HEAP32[$2 + 24 >> 2] = $0;
   HEAP32[$2 + 28 >> 2] = $3;
   $0 = HEAP32[$2 + 56 >> 2];
   $3 = HEAP32[$2 + 52 >> 2];
   HEAP32[$2 + 16 >> 2] = $3;
   HEAP32[$2 + 20 >> 2] = $0;
   $3 = HEAP32[$2 + 48 >> 2];
   $0 = HEAP32[$2 + 44 >> 2];
   HEAP32[$2 + 8 >> 2] = $0;
   HEAP32[$2 + 12 >> 2] = $3;
   break label$1;
  }
  if (!(!(HEAPF32[$1 + 68 >> 2] <= Math_fround(0)) | !(HEAPF32[$1 + 44 >> 2] <= Math_fround(0)))) {
   HEAPF32[$2 + 96 >> 2] = 1;
   HEAP32[$2 + 108 >> 2] = 1;
   $0 = HEAP32[$2 + 76 >> 2];
   $3 = HEAP32[$2 + 72 >> 2];
   HEAP32[$2 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 104 >> 2];
   $3 = HEAP32[$2 + 100 >> 2];
   $0 = HEAP32[$2 + 96 >> 2];
   HEAP32[$2 + 24 >> 2] = $0;
   HEAP32[$2 + 28 >> 2] = $3;
   $0 = HEAP32[$2 + 92 >> 2];
   $3 = HEAP32[$2 + 88 >> 2];
   HEAP32[$2 + 16 >> 2] = $3;
   HEAP32[$2 + 20 >> 2] = $0;
   $3 = HEAP32[$2 + 84 >> 2];
   $0 = HEAP32[$2 + 80 >> 2];
   HEAP32[$2 + 8 >> 2] = $0;
   HEAP32[$2 + 12 >> 2] = $3;
   break label$1;
  }
  if (!(!(HEAPF32[$1 + 32 >> 2] <= Math_fround(0)) | (!(HEAPF32[$1 + 44 >> 2] > Math_fround(0)) | !(HEAPF32[$1 + 40 >> 2] > Math_fround(0))))) {
   HEAPF32[$1 + 12 >> 2] = Math_fround(1) / Math_fround(HEAPF32[$1 + 44 >> 2] + HEAPF32[$1 + 40 >> 2]);
   HEAPF32[$2 + 60 >> 2] = HEAPF32[$1 + 44 >> 2] * HEAPF32[$1 + 12 >> 2];
   HEAPF32[$2 + 96 >> 2] = HEAPF32[$1 + 40 >> 2] * HEAPF32[$1 + 12 >> 2];
   HEAP32[$2 + 108 >> 2] = 2;
   $0 = HEAP32[$2 + 76 >> 2];
   $3 = HEAP32[$2 + 72 >> 2];
   HEAP32[$2 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 104 >> 2];
   $3 = HEAP32[$2 + 100 >> 2];
   $0 = HEAP32[$2 + 96 >> 2];
   HEAP32[$2 + 24 >> 2] = $0;
   HEAP32[$2 + 28 >> 2] = $3;
   $0 = HEAP32[$2 + 92 >> 2];
   $3 = HEAP32[$2 + 88 >> 2];
   HEAP32[$2 + 16 >> 2] = $3;
   HEAP32[$2 + 20 >> 2] = $0;
   $3 = HEAP32[$2 + 84 >> 2];
   $0 = HEAP32[$2 + 80 >> 2];
   HEAP32[$2 + 8 >> 2] = $0;
   HEAP32[$2 + 12 >> 2] = $3;
   break label$1;
  }
  HEAPF32[$1 + 8 >> 2] = Math_fround(1) / Math_fround(Math_fround(HEAPF32[$1 + 32 >> 2] + HEAPF32[$1 + 28 >> 2]) + HEAPF32[$1 + 24 >> 2]);
  HEAPF32[$2 + 24 >> 2] = HEAPF32[$1 + 32 >> 2] * HEAPF32[$1 + 8 >> 2];
  HEAPF32[$2 + 60 >> 2] = HEAPF32[$1 + 28 >> 2] * HEAPF32[$1 + 8 >> 2];
  HEAPF32[$2 + 96 >> 2] = HEAPF32[$1 + 24 >> 2] * HEAPF32[$1 + 8 >> 2];
  HEAP32[$2 + 108 >> 2] = 3;
 }
 __stack_pointer = $1 + 144 | 0;
}

function b2PulleyJoint__InitVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 208 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 204 >> 2] = $0;
 HEAP32[$2 + 200 >> 2] = $1;
 $1 = HEAP32[$2 + 204 >> 2];
 HEAP32[$1 + 120 >> 2] = HEAP32[HEAP32[$1 + 48 >> 2] + 8 >> 2];
 HEAP32[$1 + 124 >> 2] = HEAP32[HEAP32[$1 + 52 >> 2] + 8 >> 2];
 $4 = HEAP32[$1 + 48 >> 2];
 $3 = HEAP32[$4 + 28 >> 2];
 $0 = HEAP32[$4 + 32 >> 2];
 HEAP32[$1 + 160 >> 2] = $3;
 HEAP32[$1 + 164 >> 2] = $0;
 $4 = HEAP32[$1 + 52 >> 2];
 $0 = HEAP32[$4 + 28 >> 2];
 $3 = HEAP32[$4 + 32 >> 2];
 HEAP32[$1 + 168 >> 2] = $0;
 HEAP32[$1 + 172 >> 2] = $3;
 HEAPF32[$1 + 176 >> 2] = HEAPF32[HEAP32[$1 + 48 >> 2] + 120 >> 2];
 HEAPF32[$1 + 180 >> 2] = HEAPF32[HEAP32[$1 + 52 >> 2] + 120 >> 2];
 HEAPF32[$1 + 184 >> 2] = HEAPF32[HEAP32[$1 + 48 >> 2] + 128 >> 2];
 HEAPF32[$1 + 188 >> 2] = HEAPF32[HEAP32[$1 + 52 >> 2] + 128 >> 2];
 $4 = HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$1 + 120 >> 2], 12) | 0;
 $3 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 192 >> 2] = $3;
 HEAP32[$2 + 196 >> 2] = $0;
 HEAPF32[$2 + 188 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$1 + 120 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 120 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 176 >> 2] = $0;
 HEAP32[$2 + 180 >> 2] = $3;
 HEAPF32[$2 + 172 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 120 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$1 + 124 >> 2], 12) | 0;
 $3 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 160 >> 2] = $3;
 HEAP32[$2 + 164 >> 2] = $0;
 HEAPF32[$2 + 156 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 24 >> 2] + Math_imul(HEAP32[$1 + 124 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 124 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 144 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $3;
 HEAPF32[$2 + 140 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 124 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($2 + 132 | 0, HEAPF32[$2 + 188 >> 2]);
 b2Rot__b2Rot_28float_29($2 + 124 | 0, HEAPF32[$2 + 156 >> 2]);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 108 | 0, $1 + 92 | 0, $1 + 160 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 116 | 0, $2 + 132 | 0, $2 + 108 | 0);
 $0 = HEAP32[$2 + 120 >> 2];
 $3 = HEAP32[$2 + 116 >> 2];
 HEAP32[$1 + 144 >> 2] = $3;
 HEAP32[$1 + 148 >> 2] = $0;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 92 | 0, $1 + 100 | 0, $1 + 168 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 100 | 0, $2 + 124 | 0, $2 + 92 | 0);
 $3 = HEAP32[$2 + 104 >> 2];
 $0 = HEAP32[$2 + 100 >> 2];
 HEAP32[$1 + 152 >> 2] = $0;
 HEAP32[$1 + 156 >> 2] = $3;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 76 | 0, $2 + 192 | 0, $1 + 144 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 84 | 0, $2 + 76 | 0, $1 + 68 | 0);
 $0 = HEAP32[$2 + 88 >> 2];
 $3 = HEAP32[$2 + 84 >> 2];
 HEAP32[$1 + 128 >> 2] = $3;
 HEAP32[$1 + 132 >> 2] = $0;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 60 | 0, $2 + 160 | 0, $1 + 152 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 68 | 0, $2 + 60 | 0, $1 + 76 | 0);
 $3 = HEAP32[$2 + 72 >> 2];
 $0 = HEAP32[$2 + 68 >> 2];
 HEAP32[$1 + 136 >> 2] = $0;
 HEAP32[$1 + 140 >> 2] = $3;
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Vec2__Length_28_29_20const($1 + 128 | 0), 
 HEAPF32[wasm2js_i32$0 + 56 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Vec2__Length_28_29_20const($1 + 136 | 0), 
 HEAPF32[wasm2js_i32$0 + 52 >> 2] = wasm2js_f32$0;
 label$1: {
  if (HEAPF32[$2 + 56 >> 2] > Math_fround(.04999999701976776)) {
   b2Vec2__operator___28float_29($1 + 128 | 0, Math_fround(Math_fround(1) / HEAPF32[$2 + 56 >> 2]));
   break label$1;
  }
  b2Vec2__SetZero_28_29($1 + 128 | 0);
 }
 label$3: {
  if (HEAPF32[$2 + 52 >> 2] > Math_fround(.04999999701976776)) {
   b2Vec2__operator___28float_29($1 + 136 | 0, Math_fround(Math_fround(1) / HEAPF32[$2 + 52 >> 2]));
   break label$3;
  }
  b2Vec2__SetZero_28_29($1 + 136 | 0);
 }
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 144 | 0, $1 + 128 | 0), 
 HEAPF32[wasm2js_i32$0 + 48 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 152 | 0, $1 + 136 | 0), 
 HEAPF32[wasm2js_i32$0 + 44 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 40 >> 2] = Math_fround(Math_fround(HEAPF32[$1 + 184 >> 2] * HEAPF32[$2 + 48 >> 2]) * HEAPF32[$2 + 48 >> 2]) + HEAPF32[$1 + 176 >> 2];
 HEAPF32[$2 + 36 >> 2] = Math_fround(Math_fround(HEAPF32[$1 + 188 >> 2] * HEAPF32[$2 + 44 >> 2]) * HEAPF32[$2 + 44 >> 2]) + HEAPF32[$1 + 180 >> 2];
 HEAPF32[$1 + 192 >> 2] = Math_fround(Math_fround(HEAPF32[$1 + 112 >> 2] * HEAPF32[$1 + 112 >> 2]) * HEAPF32[$2 + 36 >> 2]) + HEAPF32[$2 + 40 >> 2];
 if (HEAPF32[$1 + 192 >> 2] > Math_fround(0)) {
  HEAPF32[$1 + 192 >> 2] = Math_fround(1) / HEAPF32[$1 + 192 >> 2];
 }
 label$6: {
  if (HEAP8[HEAP32[$2 + 200 >> 2] + 20 | 0] & 1) {
   HEAPF32[$1 + 116 >> 2] = HEAPF32[$1 + 116 >> 2] * HEAPF32[HEAP32[$2 + 200 >> 2] + 8 >> 2];
   operator__28float_2c_20b2Vec2_20const__29($2 + 28 | 0, Math_fround(-HEAPF32[$1 + 116 >> 2]), $1 + 128 | 0);
   operator__28float_2c_20b2Vec2_20const__29($2 + 20 | 0, Math_fround(Math_fround(-HEAPF32[$1 + 112 >> 2]) * HEAPF32[$1 + 116 >> 2]), $1 + 136 | 0);
   operator__28float_2c_20b2Vec2_20const__29($2 + 12 | 0, HEAPF32[$1 + 176 >> 2], $2 + 28 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($2 + 176 | 0, $2 + 12 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$1 + 184 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 144 | 0, $2 + 28 | 0)) + HEAPF32[$2 + 172 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 172 >> 2] = wasm2js_f32$0;
   operator__28float_2c_20b2Vec2_20const__29($2 + 4 | 0, HEAPF32[$1 + 180 >> 2], $2 + 20 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($2 + 144 | 0, $2 + 4 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$1 + 188 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 152 | 0, $2 + 20 | 0)) + HEAPF32[$2 + 140 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 140 >> 2] = wasm2js_f32$0;
   break label$6;
  }
  HEAPF32[$1 + 116 >> 2] = 0;
 }
 $0 = HEAP32[$2 + 180 >> 2];
 $3 = HEAP32[$2 + 176 >> 2];
 $4 = $3;
 $3 = HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 120 >> 2], 12) | 0;
 HEAP32[$3 >> 2] = $4;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 120 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 172 >> 2];
 $3 = HEAP32[$2 + 148 >> 2];
 $0 = HEAP32[$2 + 144 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 124 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $3;
 HEAPF32[(HEAP32[HEAP32[$2 + 200 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 124 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 140 >> 2];
 __stack_pointer = $2 + 208 | 0;
}

function b2MotorJoint__InitVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 224 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 220 >> 2] = $0;
 HEAP32[$2 + 216 >> 2] = $1;
 $3 = HEAP32[$2 + 220 >> 2];
 HEAP32[$3 + 104 >> 2] = HEAP32[HEAP32[$3 + 48 >> 2] + 8 >> 2];
 HEAP32[$3 + 108 >> 2] = HEAP32[HEAP32[$3 + 52 >> 2] + 8 >> 2];
 $4 = HEAP32[$3 + 48 >> 2];
 $0 = HEAP32[$4 + 28 >> 2];
 $1 = HEAP32[$4 + 32 >> 2];
 HEAP32[$3 + 128 >> 2] = $0;
 HEAP32[$3 + 132 >> 2] = $1;
 $4 = HEAP32[$3 + 52 >> 2];
 $1 = HEAP32[$4 + 28 >> 2];
 $0 = HEAP32[$4 + 32 >> 2];
 HEAP32[$3 + 136 >> 2] = $1;
 HEAP32[$3 + 140 >> 2] = $0;
 HEAPF32[$3 + 156 >> 2] = HEAPF32[HEAP32[$3 + 48 >> 2] + 120 >> 2];
 HEAPF32[$3 + 160 >> 2] = HEAPF32[HEAP32[$3 + 52 >> 2] + 120 >> 2];
 HEAPF32[$3 + 164 >> 2] = HEAPF32[HEAP32[$3 + 48 >> 2] + 128 >> 2];
 HEAPF32[$3 + 168 >> 2] = HEAPF32[HEAP32[$3 + 52 >> 2] + 128 >> 2];
 $4 = HEAP32[HEAP32[$2 + 216 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 104 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 208 >> 2] = $0;
 HEAP32[$2 + 212 >> 2] = $1;
 HEAPF32[$2 + 204 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 216 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 104 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 216 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 104 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 192 >> 2] = $1;
 HEAP32[$2 + 196 >> 2] = $0;
 HEAPF32[$2 + 188 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 216 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 104 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 216 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 176 >> 2] = $0;
 HEAP32[$2 + 180 >> 2] = $1;
 HEAPF32[$2 + 172 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 216 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 216 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 160 >> 2] = $1;
 HEAP32[$2 + 164 >> 2] = $0;
 HEAPF32[$2 + 156 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 216 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($2 + 148 | 0, HEAPF32[$2 + 204 >> 2]);
 b2Rot__b2Rot_28float_29($2 + 140 | 0, HEAPF32[$2 + 172 >> 2]);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 124 | 0, $3 + 68 | 0, $3 + 128 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 132 | 0, $2 + 148 | 0, $2 + 124 | 0);
 $1 = HEAP32[$2 + 136 >> 2];
 $0 = HEAP32[$2 + 132 >> 2];
 HEAP32[$3 + 112 >> 2] = $0;
 HEAP32[$3 + 116 >> 2] = $1;
 b2Vec2__operator__28_29_20const($2 + 108 | 0, $3 + 136 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 116 | 0, $2 + 140 | 0, $2 + 108 | 0);
 $0 = HEAP32[$2 + 120 >> 2];
 $1 = HEAP32[$2 + 116 >> 2];
 HEAP32[$3 + 120 >> 2] = $1;
 HEAP32[$3 + 124 >> 2] = $0;
 HEAPF32[$2 + 104 >> 2] = HEAPF32[$3 + 156 >> 2];
 HEAPF32[$2 + 100 >> 2] = HEAPF32[$3 + 160 >> 2];
 HEAPF32[$2 + 96 >> 2] = HEAPF32[$3 + 164 >> 2];
 HEAPF32[$2 + 92 >> 2] = HEAPF32[$3 + 168 >> 2];
 b2Mat22__b2Mat22_28_29($2 + 76 | 0);
 HEAPF32[$2 + 76 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 92 >> 2] * HEAPF32[$3 + 124 >> 2]) * HEAPF32[$3 + 124 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 96 >> 2] * HEAPF32[$3 + 116 >> 2]) * HEAPF32[$3 + 116 >> 2]) + Math_fround(HEAPF32[$2 + 104 >> 2] + HEAPF32[$2 + 100 >> 2]));
 HEAPF32[$2 + 80 >> 2] = Math_fround(Math_fround(Math_fround(-HEAPF32[$2 + 96 >> 2]) * HEAPF32[$3 + 112 >> 2]) * HEAPF32[$3 + 116 >> 2]) - Math_fround(Math_fround(HEAPF32[$2 + 92 >> 2] * HEAPF32[$3 + 120 >> 2]) * HEAPF32[$3 + 124 >> 2]);
 HEAPF32[$2 + 84 >> 2] = HEAPF32[$2 + 80 >> 2];
 HEAPF32[$2 + 88 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 92 >> 2] * HEAPF32[$3 + 120 >> 2]) * HEAPF32[$3 + 120 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 96 >> 2] * HEAPF32[$3 + 112 >> 2]) * HEAPF32[$3 + 112 >> 2]) + Math_fround(HEAPF32[$2 + 104 >> 2] + HEAPF32[$2 + 100 >> 2]));
 b2Mat22__GetInverse_28_29_20const($2 + 60 | 0, $2 + 76 | 0);
 $1 = HEAP32[$2 + 64 >> 2];
 $0 = HEAP32[$2 + 60 >> 2];
 HEAP32[$3 + 172 >> 2] = $0;
 HEAP32[$3 + 176 >> 2] = $1;
 $0 = HEAP32[$2 + 72 >> 2];
 $1 = HEAP32[$2 + 68 >> 2];
 HEAP32[$3 + 180 >> 2] = $1;
 HEAP32[$3 + 184 >> 2] = $0;
 HEAPF32[$3 + 188 >> 2] = HEAPF32[$2 + 96 >> 2] + HEAPF32[$2 + 92 >> 2];
 if (HEAPF32[$3 + 188 >> 2] > Math_fround(0)) {
  HEAPF32[$3 + 188 >> 2] = Math_fround(1) / HEAPF32[$3 + 188 >> 2];
 }
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 36 | 0, $2 + 176 | 0, $3 + 120 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 44 | 0, $2 + 36 | 0, $2 + 208 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 52 | 0, $2 + 44 | 0, $3 + 112 | 0);
 $1 = HEAP32[$2 + 56 >> 2];
 $0 = HEAP32[$2 + 52 >> 2];
 HEAP32[$3 + 144 >> 2] = $0;
 HEAP32[$3 + 148 >> 2] = $1;
 HEAPF32[$3 + 152 >> 2] = Math_fround(HEAPF32[$2 + 172 >> 2] - HEAPF32[$2 + 204 >> 2]) - HEAPF32[$3 + 76 >> 2];
 label$2: {
  if (HEAP8[HEAP32[$2 + 216 >> 2] + 20 | 0] & 1) {
   b2Vec2__operator___28float_29($3 + 80 | 0, HEAPF32[HEAP32[$2 + 216 >> 2] + 8 >> 2]);
   HEAPF32[$3 + 88 >> 2] = HEAPF32[$3 + 88 >> 2] * HEAPF32[HEAP32[$2 + 216 >> 2] + 8 >> 2];
   b2Vec2__b2Vec2_28float_2c_20float_29($2 + 28 | 0, HEAPF32[$3 + 80 >> 2], HEAPF32[$3 + 84 >> 2]);
   operator__28float_2c_20b2Vec2_20const__29($2 + 20 | 0, HEAPF32[$2 + 104 >> 2], $2 + 28 | 0);
   b2Vec2__operator___28b2Vec2_20const__29_1($2 + 192 | 0, $2 + 20 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$2 + 96 >> 2]) * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 112 | 0, $2 + 28 | 0) + HEAPF32[$3 + 88 >> 2])) + HEAPF32[$2 + 188 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 188 >> 2] = wasm2js_f32$0;
   operator__28float_2c_20b2Vec2_20const__29($2 + 12 | 0, HEAPF32[$2 + 100 >> 2], $2 + 28 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($2 + 160 | 0, $2 + 12 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$2 + 92 >> 2] * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 120 | 0, $2 + 28 | 0) + HEAPF32[$3 + 88 >> 2])) + HEAPF32[$2 + 156 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 156 >> 2] = wasm2js_f32$0;
   break label$2;
  }
  b2Vec2__SetZero_28_29($3 + 80 | 0);
  HEAPF32[$3 + 88 >> 2] = 0;
 }
 $0 = HEAP32[$2 + 196 >> 2];
 $1 = HEAP32[$2 + 192 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 216 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 104 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 216 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 104 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 188 >> 2];
 $1 = HEAP32[$2 + 164 >> 2];
 $0 = HEAP32[$2 + 160 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 216 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 216 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 156 >> 2];
 __stack_pointer = $2 + 224 | 0;
}

function emscripten__class__std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___2c_20emscripten__internal__NoBaseClass__20emscripten__register_vector_b2Vec2__28char_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 256 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 80 >> 2] = $0;
 HEAP32[$1 + 76 >> 2] = 0;
 HEAP32[$1 + 72 >> 2] = 424;
 HEAP32[$1 + 68 >> 2] = 0;
 HEAP32[$1 + 64 >> 2] = 425;
 HEAP32[$1 + 60 >> 2] = 0;
 HEAP32[$1 + 56 >> 2] = 426;
 $0 = HEAP32[$1 + 80 >> 2];
 HEAP32[$1 + 104 >> 2] = $1 + 55;
 HEAP32[$1 + 100 >> 2] = $0;
 void_20emscripten__internal__NoBaseClass__verify_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28_29();
 HEAP32[$1 + 96 >> 2] = 427;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getUpcaster_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 92 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getDowncaster_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 88 >> 2] = wasm2js_i32$1;
 HEAP32[$1 + 84 >> 2] = 428;
 $0 = emscripten__internal__TypeID_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20void___get_28_29();
 $4 = emscripten__internal__NoBaseClass__get_28_29();
 HEAP32[$1 + 240 >> 2] = HEAP32[$1 + 96 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$1 + 96 >> 2];
 HEAP32[$1 + 112 >> 2] = HEAP32[$1 + 92 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $8 = HEAP32[$1 + 92 >> 2];
 HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 88 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $10 = HEAP32[$1 + 88 >> 2];
 $11 = HEAP32[$1 + 100 >> 2];
 HEAP32[$1 + 244 >> 2] = HEAP32[$1 + 84 >> 2];
 _embind_register_class($0 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$1 + 84 >> 2]);
 HEAP32[$1 + 116 >> 2] = $1 + 55;
 HEAP32[$1 + 252 >> 2] = HEAP32[$1 + 116 >> 2];
 HEAP32[$1 + 248 >> 2] = 429;
 $3 = HEAP32[$1 + 252 >> 2];
 void_20emscripten__internal__RegisterClassConstructor_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____20_28__29_28_29___invoke_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____20_28__29_28_29_29(HEAP32[$1 + 248 >> 2]);
 $0 = HEAP32[$1 + 72 >> 2];
 HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 76 >> 2];
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 48 >> 2];
 $2 = HEAP32[$1 + 44 >> 2];
 HEAP32[$1 + 120 >> 2] = $2;
 HEAP32[$1 + 124 >> 2] = $0;
 $0 = HEAP32[$1 + 120 >> 2];
 $2 = HEAP32[$1 + 124 >> 2];
 HEAP32[$1 + 148 >> 2] = $3;
 HEAP32[$1 + 144 >> 2] = 6895;
 HEAP32[$1 + 140 >> 2] = $2;
 HEAP32[$1 + 136 >> 2] = $0;
 $3 = HEAP32[$1 + 148 >> 2];
 $4 = HEAP32[$1 + 144 >> 2];
 $0 = HEAP32[$1 + 136 >> 2];
 HEAP32[$1 + 132 >> 2] = HEAP32[$1 + 140 >> 2];
 HEAP32[$1 + 128 >> 2] = $0;
 $2 = HEAP32[$1 + 132 >> 2];
 $0 = HEAP32[$1 + 128 >> 2];
 HEAP32[$1 + 16 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28b2Vec2_20const__29___invoke_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28char_20const__2c_20void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28b2Vec2_20const__29_29($4, $1 + 16 | 0);
 $0 = HEAP32[$1 + 64 >> 2];
 HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 68 >> 2];
 HEAP32[$1 + 36 >> 2] = $0;
 $0 = HEAP32[$1 + 40 >> 2];
 $2 = HEAP32[$1 + 36 >> 2];
 HEAP32[$1 + 152 >> 2] = $2;
 HEAP32[$1 + 156 >> 2] = $0;
 $0 = HEAP32[$1 + 152 >> 2];
 $2 = HEAP32[$1 + 156 >> 2];
 HEAP32[$1 + 180 >> 2] = $3;
 HEAP32[$1 + 176 >> 2] = 8418;
 HEAP32[$1 + 172 >> 2] = $2;
 HEAP32[$1 + 168 >> 2] = $0;
 $3 = HEAP32[$1 + 180 >> 2];
 $4 = HEAP32[$1 + 176 >> 2];
 $0 = HEAP32[$1 + 168 >> 2];
 HEAP32[$1 + 164 >> 2] = HEAP32[$1 + 172 >> 2];
 HEAP32[$1 + 160 >> 2] = $0;
 $2 = HEAP32[$1 + 164 >> 2];
 $0 = HEAP32[$1 + 160 >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28unsigned_20long_2c_20b2Vec2_20const__29___invoke_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28char_20const__2c_20void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28unsigned_20long_2c_20b2Vec2_20const__29_29($4, $1 + 8 | 0);
 $0 = HEAP32[$1 + 56 >> 2];
 HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 60 >> 2];
 HEAP32[$1 + 28 >> 2] = $0;
 $0 = HEAP32[$1 + 32 >> 2];
 $2 = HEAP32[$1 + 28 >> 2];
 HEAP32[$1 + 184 >> 2] = $2;
 HEAP32[$1 + 188 >> 2] = $0;
 $0 = HEAP32[$1 + 184 >> 2];
 $2 = HEAP32[$1 + 188 >> 2];
 HEAP32[$1 + 212 >> 2] = $3;
 HEAP32[$1 + 208 >> 2] = 8429;
 HEAP32[$1 + 204 >> 2] = $2;
 HEAP32[$1 + 200 >> 2] = $0;
 $3 = HEAP32[$1 + 212 >> 2];
 $4 = HEAP32[$1 + 208 >> 2];
 $0 = HEAP32[$1 + 200 >> 2];
 HEAP32[$1 + 196 >> 2] = HEAP32[$1 + 204 >> 2];
 HEAP32[$1 + 192 >> 2] = $0;
 $2 = HEAP32[$1 + 196 >> 2];
 $0 = HEAP32[$1 + 192 >> 2];
 HEAP32[$1 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28_29_20const___invoke_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28char_20const__2c_20unsigned_20long_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28_29_20const_29($4, $1);
 HEAP32[$1 + 224 >> 2] = $3;
 HEAP32[$1 + 220 >> 2] = 3077;
 HEAP32[$1 + 216 >> 2] = 430;
 $0 = HEAP32[$1 + 224 >> 2];
 void_20emscripten__internal__RegisterClassMethod_emscripten__val_20_28__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long_29___invoke_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28char_20const__2c_20emscripten__val_20_28__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long_29_29(HEAP32[$1 + 220 >> 2], HEAP32[$1 + 216 >> 2]);
 HEAP32[$1 + 236 >> 2] = $0;
 HEAP32[$1 + 232 >> 2] = 3024;
 HEAP32[$1 + 228 >> 2] = 431;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const__29___invoke_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28char_20const__2c_20bool_20_28__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const__29_29(HEAP32[$1 + 232 >> 2], HEAP32[$1 + 228 >> 2]);
 __stack_pointer = $1 + 256 | 0;
}

function b2ContactSolver__SolvePositionConstraints_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $1 = __stack_pointer - 272 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 268 >> 2] = $0;
 $4 = HEAP32[$1 + 268 >> 2];
 HEAPF32[$1 + 264 >> 2] = 0;
 HEAP32[$1 + 260 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 260 >> 2] < HEAP32[$4 + 48 >> 2]) {
   HEAP32[$1 + 256 >> 2] = HEAP32[$4 + 36 >> 2] + Math_imul(HEAP32[$1 + 260 >> 2], 88);
   HEAP32[$1 + 252 >> 2] = HEAP32[HEAP32[$1 + 256 >> 2] + 32 >> 2];
   HEAP32[$1 + 248 >> 2] = HEAP32[HEAP32[$1 + 256 >> 2] + 36 >> 2];
   $2 = HEAP32[$1 + 256 >> 2];
   $3 = HEAP32[$2 + 48 >> 2];
   $0 = HEAP32[$2 + 52 >> 2];
   HEAP32[$1 + 240 >> 2] = $3;
   HEAP32[$1 + 244 >> 2] = $0;
   HEAPF32[$1 + 236 >> 2] = HEAPF32[HEAP32[$1 + 256 >> 2] + 40 >> 2];
   HEAPF32[$1 + 232 >> 2] = HEAPF32[HEAP32[$1 + 256 >> 2] + 64 >> 2];
   $2 = HEAP32[$1 + 256 >> 2];
   $0 = HEAP32[$2 + 56 >> 2];
   $3 = HEAP32[$2 + 60 >> 2];
   HEAP32[$1 + 224 >> 2] = $0;
   HEAP32[$1 + 228 >> 2] = $3;
   HEAPF32[$1 + 220 >> 2] = HEAPF32[HEAP32[$1 + 256 >> 2] + 44 >> 2];
   HEAPF32[$1 + 216 >> 2] = HEAPF32[HEAP32[$1 + 256 >> 2] + 68 >> 2];
   HEAP32[$1 + 212 >> 2] = HEAP32[HEAP32[$1 + 256 >> 2] + 84 >> 2];
   $2 = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$1 + 252 >> 2], 12) | 0;
   $3 = HEAP32[$2 >> 2];
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 200 >> 2] = $3;
   HEAP32[$1 + 204 >> 2] = $0;
   HEAPF32[$1 + 196 >> 2] = HEAPF32[(HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$1 + 252 >> 2], 12) | 0) + 8 >> 2];
   $2 = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$1 + 248 >> 2], 12) | 0;
   $0 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 184 >> 2] = $0;
   HEAP32[$1 + 188 >> 2] = $3;
   HEAPF32[$1 + 180 >> 2] = HEAPF32[(HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$1 + 248 >> 2], 12) | 0) + 8 >> 2];
   HEAP32[$1 + 176 >> 2] = 0;
   while (1) {
    if (HEAP32[$1 + 176 >> 2] < HEAP32[$1 + 212 >> 2]) {
     b2Transform__b2Transform_28_29($1 + 160 | 0);
     b2Transform__b2Transform_28_29($1 + 144 | 0);
     b2Rot__Set_28float_29($1 + 168 | 0, HEAPF32[$1 + 196 >> 2]);
     b2Rot__Set_28float_29($1 + 152 | 0, HEAPF32[$1 + 180 >> 2]);
     b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($1 + 128 | 0, $1 + 168 | 0, $1 + 240 | 0);
     operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 136 | 0, $1 + 200 | 0, $1 + 128 | 0);
     $0 = HEAP32[$1 + 140 >> 2];
     $3 = HEAP32[$1 + 136 >> 2];
     $2 = $3;
     $3 = $1 + 160 | 0;
     HEAP32[$3 >> 2] = $2;
     HEAP32[$3 + 4 >> 2] = $0;
     b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($1 + 112 | 0, $1 + 152 | 0, $1 + 224 | 0);
     operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 120 | 0, $1 + 184 | 0, $1 + 112 | 0);
     $3 = HEAP32[$1 + 124 >> 2];
     $0 = HEAP32[$1 + 120 >> 2];
     $2 = $0;
     $0 = $1 + 144 | 0;
     HEAP32[$0 >> 2] = $2;
     HEAP32[$0 + 4 >> 2] = $3;
     b2PositionSolverManifold__b2PositionSolverManifold_28_29($1 + 92 | 0);
     b2PositionSolverManifold__Initialize_28b2ContactPositionConstraint__2c_20b2Transform_20const__2c_20b2Transform_20const__2c_20int_29($1 + 92 | 0, HEAP32[$1 + 256 >> 2], $1 + 160 | 0, $1 + 144 | 0, HEAP32[$1 + 176 >> 2]);
     $2 = $1 + 92 | 0;
     $3 = HEAP32[$2 >> 2];
     $0 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 80 >> 2] = $3;
     HEAP32[$1 + 84 >> 2] = $0;
     $2 = $1 + 92 | 0;
     $0 = HEAP32[$2 + 8 >> 2];
     $3 = HEAP32[$2 + 12 >> 2];
     HEAP32[$1 + 72 >> 2] = $0;
     HEAP32[$1 + 76 >> 2] = $3;
     HEAPF32[$1 + 68 >> 2] = HEAPF32[$1 + 108 >> 2];
     operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 60 | 0, $1 + 72 | 0, $1 + 200 | 0);
     operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 52 | 0, $1 + 72 | 0, $1 + 184 | 0);
     wasm2js_i32$0 = $1, wasm2js_f32$0 = float_20b2Min_float__28float_2c_20float_29(HEAPF32[$1 + 264 >> 2], HEAPF32[$1 + 68 >> 2]), 
     HEAPF32[wasm2js_i32$0 + 264 >> 2] = wasm2js_f32$0;
     wasm2js_i32$0 = $1, wasm2js_f32$0 = float_20b2Clamp_float__28float_2c_20float_2c_20float_29(Math_fround(Math_fround(HEAPF32[$1 + 68 >> 2] + Math_fround(.004999999888241291)) * Math_fround(.20000000298023224)), Math_fround(-.20000000298023224), Math_fround(0)), 
     HEAPF32[wasm2js_i32$0 + 48 >> 2] = wasm2js_f32$0;
     wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 60 | 0, $1 + 80 | 0), 
     HEAPF32[wasm2js_i32$0 + 44 >> 2] = wasm2js_f32$0;
     wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 52 | 0, $1 + 80 | 0), 
     HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
     HEAPF32[$1 + 36 >> 2] = Math_fround(Math_fround(HEAPF32[$1 + 216 >> 2] * HEAPF32[$1 + 40 >> 2]) * HEAPF32[$1 + 40 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 232 >> 2] * HEAPF32[$1 + 44 >> 2]) * HEAPF32[$1 + 44 >> 2]) + Math_fround(HEAPF32[$1 + 236 >> 2] + HEAPF32[$1 + 220 >> 2]));
     if (HEAPF32[$1 + 36 >> 2] > Math_fround(0)) {
      $5 = Math_fround(Math_fround(-HEAPF32[$1 + 48 >> 2]) / HEAPF32[$1 + 36 >> 2]);
     } else {
      $5 = Math_fround(0);
     }
     HEAPF32[$1 + 32 >> 2] = $5;
     operator__28float_2c_20b2Vec2_20const__29($1 + 24 | 0, HEAPF32[$1 + 32 >> 2], $1 + 80 | 0);
     operator__28float_2c_20b2Vec2_20const__29($1 + 16 | 0, HEAPF32[$1 + 236 >> 2], $1 + 24 | 0);
     b2Vec2__operator___28b2Vec2_20const__29_1($1 + 200 | 0, $1 + 16 | 0);
     wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$1 + 232 >> 2]) * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 60 | 0, $1 + 24 | 0)) + HEAPF32[$1 + 196 >> 2]), 
     HEAPF32[wasm2js_i32$0 + 196 >> 2] = wasm2js_f32$0;
     operator__28float_2c_20b2Vec2_20const__29($1 + 8 | 0, HEAPF32[$1 + 220 >> 2], $1 + 24 | 0);
     b2Vec2__operator___28b2Vec2_20const__29($1 + 184 | 0, $1 + 8 | 0);
     wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$1 + 216 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 52 | 0, $1 + 24 | 0)) + HEAPF32[$1 + 180 >> 2]), 
     HEAPF32[wasm2js_i32$0 + 180 >> 2] = wasm2js_f32$0;
     HEAP32[$1 + 176 >> 2] = HEAP32[$1 + 176 >> 2] + 1;
     continue;
    }
    break;
   }
   $0 = HEAP32[$1 + 204 >> 2];
   $3 = HEAP32[$1 + 200 >> 2];
   $2 = $3;
   $3 = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$1 + 252 >> 2], 12) | 0;
   HEAP32[$3 >> 2] = $2;
   HEAP32[$3 + 4 >> 2] = $0;
   HEAPF32[(HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$1 + 252 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$1 + 196 >> 2];
   $3 = HEAP32[$1 + 188 >> 2];
   $0 = HEAP32[$1 + 184 >> 2];
   $2 = $0;
   $0 = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$1 + 248 >> 2], 12) | 0;
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $3;
   HEAPF32[(HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$1 + 248 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$1 + 180 >> 2];
   HEAP32[$1 + 260 >> 2] = HEAP32[$1 + 260 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 272 | 0;
 return HEAPF32[$1 + 264 >> 2] >= Math_fround(-.014999999664723873);
}

function emscripten__class__std____2__vector_int_2c_20std____2__allocator_int___2c_20emscripten__internal__NoBaseClass__20emscripten__register_vector_int__28char_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 256 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 80 >> 2] = $0;
 HEAP32[$1 + 76 >> 2] = 0;
 HEAP32[$1 + 72 >> 2] = 412;
 HEAP32[$1 + 68 >> 2] = 0;
 HEAP32[$1 + 64 >> 2] = 413;
 HEAP32[$1 + 60 >> 2] = 0;
 HEAP32[$1 + 56 >> 2] = 414;
 $0 = HEAP32[$1 + 80 >> 2];
 HEAP32[$1 + 104 >> 2] = $1 + 55;
 HEAP32[$1 + 100 >> 2] = $0;
 void_20emscripten__internal__NoBaseClass__verify_std____2__vector_int_2c_20std____2__allocator_int____28_29();
 HEAP32[$1 + 96 >> 2] = 415;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getUpcaster_std____2__vector_int_2c_20std____2__allocator_int____28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 92 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = void_20_28_emscripten__internal__NoBaseClass__getDowncaster_std____2__vector_int_2c_20std____2__allocator_int____28_29_29_28_29(), 
 HEAP32[wasm2js_i32$0 + 88 >> 2] = wasm2js_i32$1;
 HEAP32[$1 + 84 >> 2] = 416;
 $0 = emscripten__internal__TypeID_std____2__vector_int_2c_20std____2__allocator_int___2c_20void___get_28_29();
 $2 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int____2c_20void___get_28_29();
 $3 = emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20void___get_28_29();
 $4 = emscripten__internal__NoBaseClass__get_28_29();
 HEAP32[$1 + 232 >> 2] = HEAP32[$1 + 96 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29();
 $6 = HEAP32[$1 + 96 >> 2];
 HEAP32[$1 + 240 >> 2] = HEAP32[$1 + 92 >> 2];
 $7 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $8 = HEAP32[$1 + 92 >> 2];
 HEAP32[$1 + 236 >> 2] = HEAP32[$1 + 88 >> 2];
 $9 = char_20const__20emscripten__internal__getGenericSignature_void__28_29();
 $10 = HEAP32[$1 + 88 >> 2];
 $11 = HEAP32[$1 + 100 >> 2];
 HEAP32[$1 + 244 >> 2] = HEAP32[$1 + 84 >> 2];
 _embind_register_class($0 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$1 + 84 >> 2]);
 HEAP32[$1 + 108 >> 2] = $1 + 55;
 HEAP32[$1 + 252 >> 2] = HEAP32[$1 + 108 >> 2];
 HEAP32[$1 + 248 >> 2] = 417;
 $3 = HEAP32[$1 + 252 >> 2];
 void_20emscripten__internal__RegisterClassConstructor_std____2__vector_int_2c_20std____2__allocator_int____20_28__29_28_29___invoke_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int____20_28__29_28_29_29(HEAP32[$1 + 248 >> 2]);
 $0 = HEAP32[$1 + 72 >> 2];
 HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 76 >> 2];
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 48 >> 2];
 $2 = HEAP32[$1 + 44 >> 2];
 HEAP32[$1 + 112 >> 2] = $2;
 HEAP32[$1 + 116 >> 2] = $0;
 $0 = HEAP32[$1 + 112 >> 2];
 $2 = HEAP32[$1 + 116 >> 2];
 HEAP32[$1 + 140 >> 2] = $3;
 HEAP32[$1 + 136 >> 2] = 6895;
 HEAP32[$1 + 132 >> 2] = $2;
 HEAP32[$1 + 128 >> 2] = $0;
 $3 = HEAP32[$1 + 140 >> 2];
 $4 = HEAP32[$1 + 136 >> 2];
 $0 = HEAP32[$1 + 128 >> 2];
 HEAP32[$1 + 124 >> 2] = HEAP32[$1 + 132 >> 2];
 HEAP32[$1 + 120 >> 2] = $0;
 $2 = HEAP32[$1 + 124 >> 2];
 $0 = HEAP32[$1 + 120 >> 2];
 HEAP32[$1 + 16 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28int_20const__29___invoke_std____2__vector_int_2c_20std____2__allocator_int____28char_20const__2c_20void_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28int_20const__29_29($4, $1 + 16 | 0);
 $0 = HEAP32[$1 + 64 >> 2];
 HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 68 >> 2];
 HEAP32[$1 + 36 >> 2] = $0;
 $0 = HEAP32[$1 + 40 >> 2];
 $2 = HEAP32[$1 + 36 >> 2];
 HEAP32[$1 + 144 >> 2] = $2;
 HEAP32[$1 + 148 >> 2] = $0;
 $0 = HEAP32[$1 + 144 >> 2];
 $2 = HEAP32[$1 + 148 >> 2];
 HEAP32[$1 + 172 >> 2] = $3;
 HEAP32[$1 + 168 >> 2] = 8418;
 HEAP32[$1 + 164 >> 2] = $2;
 HEAP32[$1 + 160 >> 2] = $0;
 $3 = HEAP32[$1 + 172 >> 2];
 $4 = HEAP32[$1 + 168 >> 2];
 $0 = HEAP32[$1 + 160 >> 2];
 HEAP32[$1 + 156 >> 2] = HEAP32[$1 + 164 >> 2];
 HEAP32[$1 + 152 >> 2] = $0;
 $2 = HEAP32[$1 + 156 >> 2];
 $0 = HEAP32[$1 + 152 >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28unsigned_20long_2c_20int_20const__29___invoke_std____2__vector_int_2c_20std____2__allocator_int____28char_20const__2c_20void_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28unsigned_20long_2c_20int_20const__29_29($4, $1 + 8 | 0);
 $0 = HEAP32[$1 + 56 >> 2];
 HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 60 >> 2];
 HEAP32[$1 + 28 >> 2] = $0;
 $0 = HEAP32[$1 + 32 >> 2];
 $2 = HEAP32[$1 + 28 >> 2];
 HEAP32[$1 + 176 >> 2] = $2;
 HEAP32[$1 + 180 >> 2] = $0;
 $0 = HEAP32[$1 + 176 >> 2];
 $2 = HEAP32[$1 + 180 >> 2];
 HEAP32[$1 + 204 >> 2] = $3;
 HEAP32[$1 + 200 >> 2] = 8429;
 HEAP32[$1 + 196 >> 2] = $2;
 HEAP32[$1 + 192 >> 2] = $0;
 $3 = HEAP32[$1 + 204 >> 2];
 $4 = HEAP32[$1 + 200 >> 2];
 $0 = HEAP32[$1 + 192 >> 2];
 HEAP32[$1 + 188 >> 2] = HEAP32[$1 + 196 >> 2];
 HEAP32[$1 + 184 >> 2] = $0;
 $2 = HEAP32[$1 + 188 >> 2];
 $0 = HEAP32[$1 + 184 >> 2];
 HEAP32[$1 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = $2;
 void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28_29_20const___invoke_std____2__vector_int_2c_20std____2__allocator_int____28char_20const__2c_20unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28_29_20const_29($4, $1);
 HEAP32[$1 + 216 >> 2] = $3;
 HEAP32[$1 + 212 >> 2] = 3077;
 HEAP32[$1 + 208 >> 2] = 418;
 $0 = HEAP32[$1 + 216 >> 2];
 void_20emscripten__internal__RegisterClassMethod_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long_29___invoke_std____2__vector_int_2c_20std____2__allocator_int____28char_20const__2c_20emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long_29_29(HEAP32[$1 + 212 >> 2], HEAP32[$1 + 208 >> 2]);
 HEAP32[$1 + 228 >> 2] = $0;
 HEAP32[$1 + 224 >> 2] = 3024;
 HEAP32[$1 + 220 >> 2] = 419;
 void_20emscripten__internal__RegisterClassMethod_bool_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const__29___invoke_std____2__vector_int_2c_20std____2__allocator_int____28char_20const__2c_20bool_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const__29_29(HEAP32[$1 + 224 >> 2], HEAP32[$1 + 220 >> 2]);
 __stack_pointer = $1 + 256 | 0;
}

function b2ContactSolver__b2ContactSolver_28b2ContactSolverDef__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 $4 = HEAP32[$2 + 72 >> 2];
 HEAP32[$2 + 76 >> 2] = $4;
 $3 = HEAP32[$2 + 68 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 HEAP32[$4 >> 2] = $0;
 HEAP32[$4 + 4 >> 2] = $1;
 $0 = HEAP32[$3 + 20 >> 2];
 $1 = HEAP32[$3 + 16 >> 2];
 HEAP32[$4 + 16 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $0;
 $1 = HEAP32[$3 + 12 >> 2];
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[$4 + 8 >> 2] = $0;
 HEAP32[$4 + 12 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = HEAP32[HEAP32[$2 + 68 >> 2] + 40 >> 2];
 HEAP32[$4 + 48 >> 2] = HEAP32[HEAP32[$2 + 68 >> 2] + 28 >> 2];
 wasm2js_i32$0 = $4, wasm2js_i32$1 = b2StackAllocator__Allocate_28int_29(HEAP32[$4 + 32 >> 2], Math_imul(HEAP32[$4 + 48 >> 2], 88)), 
 HEAP32[wasm2js_i32$0 + 36 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $4, wasm2js_i32$1 = b2StackAllocator__Allocate_28int_29(HEAP32[$4 + 32 >> 2], Math_imul(HEAP32[$4 + 48 >> 2], 156)), 
 HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
 HEAP32[$4 + 24 >> 2] = HEAP32[HEAP32[$2 + 68 >> 2] + 32 >> 2];
 HEAP32[$4 + 28 >> 2] = HEAP32[HEAP32[$2 + 68 >> 2] + 36 >> 2];
 HEAP32[$4 + 44 >> 2] = HEAP32[HEAP32[$2 + 68 >> 2] + 24 >> 2];
 HEAP32[$2 + 64 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 64 >> 2] < HEAP32[$4 + 48 >> 2]) {
   HEAP32[$2 + 60 >> 2] = HEAP32[HEAP32[$4 + 44 >> 2] + (HEAP32[$2 + 64 >> 2] << 2) >> 2];
   HEAP32[$2 + 56 >> 2] = HEAP32[HEAP32[$2 + 60 >> 2] + 48 >> 2];
   HEAP32[$2 + 52 >> 2] = HEAP32[HEAP32[$2 + 60 >> 2] + 52 >> 2];
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetShape_28_29(HEAP32[$2 + 56 >> 2]), 
   HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetShape_28_29(HEAP32[$2 + 52 >> 2]), 
   HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
   HEAPF32[$2 + 40 >> 2] = HEAPF32[HEAP32[$2 + 48 >> 2] + 8 >> 2];
   HEAPF32[$2 + 36 >> 2] = HEAPF32[HEAP32[$2 + 44 >> 2] + 8 >> 2];
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$2 + 56 >> 2]), 
   HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$2 + 52 >> 2]), 
   HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Contact__GetManifold_28_29(HEAP32[$2 + 60 >> 2]), 
   HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
   HEAP32[$2 + 20 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 60 >> 2];
   if (HEAP32[$2 + 20 >> 2] <= 0) {
    __assert_fail(12033, 5446, 78, 3836);
    wasm2js_trap();
   } else {
    HEAP32[$2 + 16 >> 2] = HEAP32[$4 + 40 >> 2] + Math_imul(HEAP32[$2 + 64 >> 2], 156);
    HEAPF32[HEAP32[$2 + 16 >> 2] + 136 >> 2] = HEAPF32[HEAP32[$2 + 60 >> 2] + 136 >> 2];
    HEAPF32[HEAP32[$2 + 16 >> 2] + 140 >> 2] = HEAPF32[HEAP32[$2 + 60 >> 2] + 140 >> 2];
    HEAPF32[HEAP32[$2 + 16 >> 2] + 144 >> 2] = HEAPF32[HEAP32[$2 + 60 >> 2] + 144 >> 2];
    HEAP32[HEAP32[$2 + 16 >> 2] + 112 >> 2] = HEAP32[HEAP32[$2 + 32 >> 2] + 8 >> 2];
    HEAP32[HEAP32[$2 + 16 >> 2] + 116 >> 2] = HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2];
    HEAPF32[HEAP32[$2 + 16 >> 2] + 120 >> 2] = HEAPF32[HEAP32[$2 + 32 >> 2] + 120 >> 2];
    HEAPF32[HEAP32[$2 + 16 >> 2] + 124 >> 2] = HEAPF32[HEAP32[$2 + 28 >> 2] + 120 >> 2];
    HEAPF32[HEAP32[$2 + 16 >> 2] + 128 >> 2] = HEAPF32[HEAP32[$2 + 32 >> 2] + 128 >> 2];
    HEAPF32[HEAP32[$2 + 16 >> 2] + 132 >> 2] = HEAPF32[HEAP32[$2 + 28 >> 2] + 128 >> 2];
    HEAP32[HEAP32[$2 + 16 >> 2] + 152 >> 2] = HEAP32[$2 + 64 >> 2];
    HEAP32[HEAP32[$2 + 16 >> 2] + 148 >> 2] = HEAP32[$2 + 20 >> 2];
    b2Mat22__SetZero_28_29(HEAP32[$2 + 16 >> 2] + 96 | 0);
    b2Mat22__SetZero_28_29(HEAP32[$2 + 16 >> 2] + 80 | 0);
    HEAP32[$2 + 12 >> 2] = HEAP32[$4 + 36 >> 2] + Math_imul(HEAP32[$2 + 64 >> 2], 88);
    HEAP32[HEAP32[$2 + 12 >> 2] + 32 >> 2] = HEAP32[HEAP32[$2 + 32 >> 2] + 8 >> 2];
    HEAP32[HEAP32[$2 + 12 >> 2] + 36 >> 2] = HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2];
    HEAPF32[HEAP32[$2 + 12 >> 2] + 40 >> 2] = HEAPF32[HEAP32[$2 + 32 >> 2] + 120 >> 2];
    HEAPF32[HEAP32[$2 + 12 >> 2] + 44 >> 2] = HEAPF32[HEAP32[$2 + 28 >> 2] + 120 >> 2];
    $3 = HEAP32[$2 + 32 >> 2];
    $1 = HEAP32[$3 + 28 >> 2];
    $0 = HEAP32[$3 + 32 >> 2];
    $3 = $1;
    $1 = HEAP32[$2 + 12 >> 2];
    HEAP32[$1 + 48 >> 2] = $3;
    HEAP32[$1 + 52 >> 2] = $0;
    $3 = HEAP32[$2 + 28 >> 2];
    $0 = HEAP32[$3 + 28 >> 2];
    $1 = HEAP32[$3 + 32 >> 2];
    $3 = $0;
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$0 + 56 >> 2] = $3;
    HEAP32[$0 + 60 >> 2] = $1;
    HEAPF32[HEAP32[$2 + 12 >> 2] + 64 >> 2] = HEAPF32[HEAP32[$2 + 32 >> 2] + 128 >> 2];
    HEAPF32[HEAP32[$2 + 12 >> 2] + 68 >> 2] = HEAPF32[HEAP32[$2 + 28 >> 2] + 128 >> 2];
    $3 = HEAP32[$2 + 24 >> 2];
    $1 = HEAP32[$3 + 40 >> 2];
    $0 = HEAP32[$3 + 44 >> 2];
    $3 = $1;
    $1 = HEAP32[$2 + 12 >> 2];
    HEAP32[$1 + 16 >> 2] = $3;
    HEAP32[$1 + 20 >> 2] = $0;
    $3 = HEAP32[$2 + 24 >> 2];
    $0 = HEAP32[$3 + 48 >> 2];
    $1 = HEAP32[$3 + 52 >> 2];
    $3 = $0;
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$0 + 24 >> 2] = $3;
    HEAP32[$0 + 28 >> 2] = $1;
    HEAP32[HEAP32[$2 + 12 >> 2] + 84 >> 2] = HEAP32[$2 + 20 >> 2];
    HEAPF32[HEAP32[$2 + 12 >> 2] + 76 >> 2] = HEAPF32[$2 + 40 >> 2];
    HEAPF32[HEAP32[$2 + 12 >> 2] + 80 >> 2] = HEAPF32[$2 + 36 >> 2];
    HEAP32[HEAP32[$2 + 12 >> 2] + 72 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 56 >> 2];
    HEAP32[$2 + 8 >> 2] = 0;
    while (1) {
     if (HEAP32[$2 + 8 >> 2] < HEAP32[$2 + 20 >> 2]) {
      HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 20);
      HEAP32[$2 >> 2] = HEAP32[$2 + 16 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 36);
      label$7: {
       if (HEAP8[$4 + 20 | 0] & 1) {
        HEAPF32[HEAP32[$2 >> 2] + 16 >> 2] = HEAPF32[$4 + 8 >> 2] * HEAPF32[HEAP32[$2 + 4 >> 2] + 8 >> 2];
        HEAPF32[HEAP32[$2 >> 2] + 20 >> 2] = HEAPF32[$4 + 8 >> 2] * HEAPF32[HEAP32[$2 + 4 >> 2] + 12 >> 2];
        break label$7;
       }
       HEAPF32[HEAP32[$2 >> 2] + 16 >> 2] = 0;
       HEAPF32[HEAP32[$2 >> 2] + 20 >> 2] = 0;
      }
      b2Vec2__SetZero_28_29(HEAP32[$2 >> 2]);
      b2Vec2__SetZero_28_29(HEAP32[$2 >> 2] + 8 | 0);
      HEAPF32[HEAP32[$2 >> 2] + 24 >> 2] = 0;
      HEAPF32[HEAP32[$2 >> 2] + 28 >> 2] = 0;
      HEAPF32[HEAP32[$2 >> 2] + 32 >> 2] = 0;
      $3 = HEAP32[$2 + 4 >> 2];
      $1 = HEAP32[$3 >> 2];
      $0 = HEAP32[$3 + 4 >> 2];
      $3 = $1;
      $1 = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 3) | 0;
      HEAP32[$1 >> 2] = $3;
      HEAP32[$1 + 4 >> 2] = $0;
      HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 64 >> 2] + 1;
    continue;
   }
  }
  break;
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}

function b2RopeJoint__InitVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 192 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 188 >> 2] = $0;
 HEAP32[$2 + 184 >> 2] = $1;
 $1 = HEAP32[$2 + 188 >> 2];
 HEAP32[$1 + 96 >> 2] = HEAP32[HEAP32[$1 + 48 >> 2] + 8 >> 2];
 HEAP32[$1 + 100 >> 2] = HEAP32[HEAP32[$1 + 52 >> 2] + 8 >> 2];
 $4 = HEAP32[$1 + 48 >> 2];
 $0 = HEAP32[$4 + 28 >> 2];
 $3 = HEAP32[$4 + 32 >> 2];
 HEAP32[$1 + 128 >> 2] = $0;
 HEAP32[$1 + 132 >> 2] = $3;
 $4 = HEAP32[$1 + 52 >> 2];
 $3 = HEAP32[$4 + 28 >> 2];
 $0 = HEAP32[$4 + 32 >> 2];
 HEAP32[$1 + 136 >> 2] = $3;
 HEAP32[$1 + 140 >> 2] = $0;
 HEAPF32[$1 + 144 >> 2] = HEAPF32[HEAP32[$1 + 48 >> 2] + 120 >> 2];
 HEAPF32[$1 + 148 >> 2] = HEAPF32[HEAP32[$1 + 52 >> 2] + 120 >> 2];
 HEAPF32[$1 + 152 >> 2] = HEAPF32[HEAP32[$1 + 48 >> 2] + 128 >> 2];
 HEAPF32[$1 + 156 >> 2] = HEAPF32[HEAP32[$1 + 52 >> 2] + 128 >> 2];
 $4 = HEAP32[HEAP32[$2 + 184 >> 2] + 24 >> 2] + Math_imul(HEAP32[$1 + 96 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 176 >> 2] = $0;
 HEAP32[$2 + 180 >> 2] = $3;
 HEAPF32[$2 + 172 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 184 >> 2] + 24 >> 2] + Math_imul(HEAP32[$1 + 96 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 184 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 96 >> 2], 12) | 0;
 $3 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 160 >> 2] = $3;
 HEAP32[$2 + 164 >> 2] = $0;
 HEAPF32[$2 + 156 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 184 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 96 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 184 >> 2] + 24 >> 2] + Math_imul(HEAP32[$1 + 100 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 144 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $3;
 HEAPF32[$2 + 140 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 184 >> 2] + 24 >> 2] + Math_imul(HEAP32[$1 + 100 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 184 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 100 >> 2], 12) | 0;
 $3 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 128 >> 2] = $3;
 HEAP32[$2 + 132 >> 2] = $0;
 HEAPF32[$2 + 124 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 184 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 100 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($2 + 116 | 0, HEAPF32[$2 + 172 >> 2]);
 b2Rot__b2Rot_28float_29($2 + 108 | 0, HEAPF32[$2 + 140 >> 2]);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 92 | 0, $1 + 68 | 0, $1 + 128 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 100 | 0, $2 + 116 | 0, $2 + 92 | 0);
 $3 = HEAP32[$2 + 104 >> 2];
 $0 = HEAP32[$2 + 100 >> 2];
 HEAP32[$1 + 112 >> 2] = $0;
 HEAP32[$1 + 116 >> 2] = $3;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 76 | 0, $1 + 76 | 0, $1 + 136 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 84 | 0, $2 + 108 | 0, $2 + 76 | 0);
 $0 = HEAP32[$2 + 88 >> 2];
 $3 = HEAP32[$2 + 84 >> 2];
 HEAP32[$1 + 120 >> 2] = $3;
 HEAP32[$1 + 124 >> 2] = $0;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 52 | 0, $2 + 144 | 0, $1 + 120 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 60 | 0, $2 + 52 | 0, $2 + 176 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 68 | 0, $2 + 60 | 0, $1 + 112 | 0);
 $3 = HEAP32[$2 + 72 >> 2];
 $0 = HEAP32[$2 + 68 >> 2];
 HEAP32[$1 + 104 >> 2] = $0;
 HEAP32[$1 + 108 >> 2] = $3;
 wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Vec2__Length_28_29_20const($1 + 104 | 0), 
 HEAPF32[wasm2js_i32$0 + 88 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 48 >> 2] = HEAPF32[$1 + 88 >> 2] - HEAPF32[$1 + 84 >> 2];
 label$1: {
  if (HEAPF32[$2 + 48 >> 2] > Math_fround(0)) {
   HEAP32[$1 + 164 >> 2] = 2;
   break label$1;
  }
  HEAP32[$1 + 164 >> 2] = 0;
 }
 label$3: {
  label$4: {
   if (HEAPF32[$1 + 88 >> 2] > Math_fround(.004999999888241291)) {
    b2Vec2__operator___28float_29($1 + 104 | 0, Math_fround(Math_fround(1) / HEAPF32[$1 + 88 >> 2]));
    break label$4;
   }
   b2Vec2__SetZero_28_29($1 + 104 | 0);
   HEAPF32[$1 + 160 >> 2] = 0;
   HEAPF32[$1 + 92 >> 2] = 0;
   break label$3;
  }
  wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 112 | 0, $1 + 104 | 0), 
  HEAPF32[wasm2js_i32$0 + 44 >> 2] = wasm2js_f32$0;
  wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 120 | 0, $1 + 104 | 0), 
  HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
  HEAPF32[$2 + 36 >> 2] = Math_fround(Math_fround(HEAPF32[$1 + 156 >> 2] * HEAPF32[$2 + 40 >> 2]) * HEAPF32[$2 + 40 >> 2]) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 152 >> 2] * HEAPF32[$2 + 44 >> 2]) * HEAPF32[$2 + 44 >> 2]) + HEAPF32[$1 + 144 >> 2]) + HEAPF32[$1 + 148 >> 2]);
  if (HEAPF32[$2 + 36 >> 2] != Math_fround(0)) {
   $5 = Math_fround(Math_fround(1) / HEAPF32[$2 + 36 >> 2]);
  } else {
   $5 = Math_fround(0);
  }
  HEAPF32[$1 + 160 >> 2] = $5;
  label$8: {
   if (HEAP8[HEAP32[$2 + 184 >> 2] + 20 | 0] & 1) {
    HEAPF32[$1 + 92 >> 2] = HEAPF32[$1 + 92 >> 2] * HEAPF32[HEAP32[$2 + 184 >> 2] + 8 >> 2];
    operator__28float_2c_20b2Vec2_20const__29($2 + 28 | 0, HEAPF32[$1 + 92 >> 2], $1 + 104 | 0);
    operator__28float_2c_20b2Vec2_20const__29($2 + 20 | 0, HEAPF32[$1 + 144 >> 2], $2 + 28 | 0);
    b2Vec2__operator___28b2Vec2_20const__29_1($2 + 160 | 0, $2 + 20 | 0);
    wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$1 + 152 >> 2]) * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 112 | 0, $2 + 28 | 0)) + HEAPF32[$2 + 156 >> 2]), 
    HEAPF32[wasm2js_i32$0 + 156 >> 2] = wasm2js_f32$0;
    operator__28float_2c_20b2Vec2_20const__29($2 + 12 | 0, HEAPF32[$1 + 148 >> 2], $2 + 28 | 0);
    b2Vec2__operator___28b2Vec2_20const__29($2 + 128 | 0, $2 + 12 | 0);
    wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$1 + 156 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 120 | 0, $2 + 28 | 0)) + HEAPF32[$2 + 124 >> 2]), 
    HEAPF32[wasm2js_i32$0 + 124 >> 2] = wasm2js_f32$0;
    break label$8;
   }
   HEAPF32[$1 + 92 >> 2] = 0;
  }
  $0 = HEAP32[$2 + 164 >> 2];
  $3 = HEAP32[$2 + 160 >> 2];
  $4 = $3;
  $3 = HEAP32[HEAP32[$2 + 184 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 96 >> 2], 12) | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $0;
  HEAPF32[(HEAP32[HEAP32[$2 + 184 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 96 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 156 >> 2];
  $3 = HEAP32[$2 + 132 >> 2];
  $0 = HEAP32[$2 + 128 >> 2];
  $4 = $0;
  $0 = HEAP32[HEAP32[$2 + 184 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 100 >> 2], 12) | 0;
  HEAP32[$0 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = $3;
  HEAPF32[(HEAP32[HEAP32[$2 + 184 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 100 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 124 >> 2];
 }
 __stack_pointer = $2 + 192 | 0;
}

function b2PolygonShape__Set_28b2Vec2_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f32$0 = Math_fround(0);
 $3 = __stack_pointer - 240 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 236 >> 2] = $0;
 HEAP32[$3 + 232 >> 2] = $1;
 HEAP32[$3 + 228 >> 2] = $2;
 $4 = HEAP32[$3 + 236 >> 2];
 if (!(HEAP32[$3 + 228 >> 2] <= 8 & HEAP32[$3 + 228 >> 2] >= 3)) {
  __assert_fail(11749, 5651, 128, 3081);
  wasm2js_trap();
 }
 label$3: {
  if (HEAP32[$3 + 228 >> 2] < 3) {
   b2PolygonShape__SetAsBox_28float_2c_20float_29($4, Math_fround(1), Math_fround(1));
   break label$3;
  }
  wasm2js_i32$0 = $3, wasm2js_i32$1 = int_20b2Min_int__28int_2c_20int_29(HEAP32[$3 + 228 >> 2], 8), 
  HEAP32[wasm2js_i32$0 + 224 >> 2] = wasm2js_i32$1;
  $0 = $3 + 160 | 0;
  $1 = $0 - -64 | 0;
  while (1) {
   b2Vec2__b2Vec2_28_29($0);
   $0 = $0 + 8 | 0;
   if (($1 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
  HEAP32[$3 + 156 >> 2] = 0;
  HEAP32[$3 + 152 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 152 >> 2] < HEAP32[$3 + 224 >> 2]) {
    $1 = HEAP32[$3 + 232 >> 2] + (HEAP32[$3 + 152 >> 2] << 3) | 0;
    $0 = HEAP32[$1 >> 2];
    $1 = HEAP32[$1 + 4 >> 2];
    HEAP32[$3 + 144 >> 2] = $0;
    HEAP32[$3 + 148 >> 2] = $1;
    HEAP8[$3 + 143 | 0] = 1;
    HEAP32[$3 + 136 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 136 >> 2] < HEAP32[$3 + 156 >> 2]) {
      if (b2DistanceSquared_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 144 | 0, ($3 + 160 | 0) + (HEAP32[$3 + 136 >> 2] << 3) | 0) < Math_fround(624999984211172e-20)) {
       HEAP8[$3 + 143 | 0] = 0;
      } else {
       HEAP32[$3 + 136 >> 2] = HEAP32[$3 + 136 >> 2] + 1;
       continue;
      }
     }
     break;
    }
    if (HEAP8[$3 + 143 | 0] & 1) {
     $5 = HEAP32[$3 + 156 >> 2];
     HEAP32[$3 + 156 >> 2] = $5 + 1;
     $0 = HEAP32[$3 + 148 >> 2];
     $1 = HEAP32[$3 + 144 >> 2];
     $2 = $1;
     $1 = ($3 + 160 | 0) + ($5 << 3) | 0;
     HEAP32[$1 >> 2] = $2;
     HEAP32[$1 + 4 >> 2] = $0;
    }
    HEAP32[$3 + 152 >> 2] = HEAP32[$3 + 152 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$3 + 224 >> 2] = HEAP32[$3 + 156 >> 2];
  if (HEAP32[$3 + 224 >> 2] < 3) {
   __assert_fail(8975, 5651, 164, 3081);
   wasm2js_trap();
  }
  HEAP32[$3 + 132 >> 2] = 0;
  HEAPF32[$3 + 128 >> 2] = HEAPF32[$3 + 160 >> 2];
  HEAP32[$3 + 124 >> 2] = 1;
  while (1) {
   if (HEAP32[$3 + 124 >> 2] < HEAP32[$3 + 224 >> 2]) {
    HEAPF32[$3 + 120 >> 2] = HEAPF32[($3 + 160 | 0) + (HEAP32[$3 + 124 >> 2] << 3) >> 2];
    if (!(!(HEAPF32[$3 + 120 >> 2] > HEAPF32[$3 + 128 >> 2]) & (!(HEAPF32[(($3 + 160 | 0) + (HEAP32[$3 + 124 >> 2] << 3) | 0) + 4 >> 2] < HEAPF32[(($3 + 160 | 0) + (HEAP32[$3 + 132 >> 2] << 3) | 0) + 4 >> 2]) | HEAPF32[$3 + 120 >> 2] != HEAPF32[$3 + 128 >> 2]))) {
     HEAP32[$3 + 132 >> 2] = HEAP32[$3 + 124 >> 2];
     HEAPF32[$3 + 128 >> 2] = HEAPF32[$3 + 120 >> 2];
    }
    HEAP32[$3 + 124 >> 2] = HEAP32[$3 + 124 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$3 + 76 >> 2] = 0;
  HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 132 >> 2];
  while (1) {
   if (HEAP32[$3 + 76 >> 2] >= 8) {
    __assert_fail(11791, 5651, 191, 3081);
    wasm2js_trap();
   }
   HEAP32[($3 + 80 | 0) + (HEAP32[$3 + 76 >> 2] << 2) >> 2] = HEAP32[$3 + 72 >> 2];
   HEAP32[$3 + 68 >> 2] = 0;
   HEAP32[$3 + 64 >> 2] = 1;
   while (1) {
    if (HEAP32[$3 + 64 >> 2] < HEAP32[$3 + 224 >> 2]) {
     label$22: {
      if (HEAP32[$3 + 68 >> 2] == HEAP32[$3 + 72 >> 2]) {
       HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 64 >> 2];
       break label$22;
      }
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 56 | 0, ($3 + 160 | 0) + (HEAP32[$3 + 68 >> 2] << 3) | 0, ($3 + 160 | 0) + (HEAP32[($3 + 80 | 0) + (HEAP32[$3 + 76 >> 2] << 2) >> 2] << 3) | 0);
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 48 | 0, ($3 + 160 | 0) + (HEAP32[$3 + 64 >> 2] << 3) | 0, ($3 + 160 | 0) + (HEAP32[($3 + 80 | 0) + (HEAP32[$3 + 76 >> 2] << 2) >> 2] << 3) | 0);
      wasm2js_i32$0 = $3, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 56 | 0, $3 + 48 | 0), 
      HEAPF32[wasm2js_i32$0 + 44 >> 2] = wasm2js_f32$0;
      if (HEAPF32[$3 + 44 >> 2] < Math_fround(0)) {
       HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 64 >> 2];
      }
      label$25: {
       if (HEAPF32[$3 + 44 >> 2] != Math_fround(0)) {
        break label$25;
       }
       if (!(b2Vec2__LengthSquared_28_29_20const($3 + 48 | 0) > b2Vec2__LengthSquared_28_29_20const($3 + 56 | 0))) {
        break label$25;
       }
       HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 64 >> 2];
      }
     }
     HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 64 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
   HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 68 >> 2];
   if (HEAP32[$3 + 68 >> 2] != HEAP32[$3 + 132 >> 2]) {
    continue;
   }
   break;
  }
  if (HEAP32[$3 + 76 >> 2] < 3) {
   __assert_fail(8975, 5651, 230, 3081);
   wasm2js_trap();
  }
  HEAP32[$4 + 148 >> 2] = HEAP32[$3 + 76 >> 2];
  HEAP32[$3 + 40 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 40 >> 2] < HEAP32[$3 + 76 >> 2]) {
    $1 = ($3 + 160 | 0) + (HEAP32[($3 + 80 | 0) + (HEAP32[$3 + 40 >> 2] << 2) >> 2] << 3) | 0;
    $0 = HEAP32[$1 >> 2];
    $1 = HEAP32[$1 + 4 >> 2];
    $2 = $0;
    $0 = ($4 + 20 | 0) + (HEAP32[$3 + 40 >> 2] << 3) | 0;
    HEAP32[$0 >> 2] = $2;
    HEAP32[$0 + 4 >> 2] = $1;
    HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 40 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$3 + 36 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 36 >> 2] < HEAP32[$3 + 76 >> 2]) {
    HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 36 >> 2];
    if (HEAP32[$3 + 76 >> 2] > (HEAP32[$3 + 36 >> 2] + 1 | 0)) {
     $0 = HEAP32[$3 + 36 >> 2] + 1 | 0;
    } else {
     $0 = 0;
    }
    HEAP32[$3 + 28 >> 2] = $0;
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 20 | 0, ($4 + 20 | 0) + (HEAP32[$3 + 28 >> 2] << 3) | 0, ($4 + 20 | 0) + (HEAP32[$3 + 32 >> 2] << 3) | 0);
    if (b2Vec2__LengthSquared_28_29_20const($3 + 20 | 0) > Math_fround(14210854715202004e-30)) {
     b2Cross_28b2Vec2_20const__2c_20float_29($3 + 12 | 0, $3 + 20 | 0, Math_fround(1));
     $0 = HEAP32[$3 + 16 >> 2];
     $1 = HEAP32[$3 + 12 >> 2];
     $2 = $1;
     $1 = ($4 + 84 | 0) + (HEAP32[$3 + 36 >> 2] << 3) | 0;
     HEAP32[$1 >> 2] = $2;
     HEAP32[$1 + 4 >> 2] = $0;
     b2Vec2__Normalize_28_29(($4 + 84 | 0) + (HEAP32[$3 + 36 >> 2] << 3) | 0);
     HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 36 >> 2] + 1;
     continue;
    } else {
     __assert_fail(10710, 5651, 249, 3081);
     wasm2js_trap();
    }
   }
   break;
  }
  ComputeCentroid_28b2Vec2_20const__2c_20int_29($3 + 4 | 0, $4 + 20 | 0, HEAP32[$3 + 76 >> 2]);
  $1 = HEAP32[$3 + 8 >> 2];
  $0 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 16 >> 2] = $1;
 }
 __stack_pointer = $3 + 240 | 0;
}

function b2WorldManifold__Initialize_28b2Manifold_20const__2c_20b2Transform_20const__2c_20float_2c_20b2Transform_20const__2c_20float_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $6 = __stack_pointer - 304 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 300 >> 2] = $0;
 HEAP32[$6 + 296 >> 2] = $1;
 HEAP32[$6 + 292 >> 2] = $2;
 HEAPF32[$6 + 288 >> 2] = $3;
 HEAP32[$6 + 284 >> 2] = $4;
 HEAPF32[$6 + 280 >> 2] = $5;
 $1 = HEAP32[$6 + 300 >> 2];
 label$1: {
  if (!HEAP32[HEAP32[$6 + 296 >> 2] + 60 >> 2]) {
   break label$1;
  }
  label$2: {
   switch (HEAP32[HEAP32[$6 + 296 >> 2] + 56 >> 2]) {
   case 0:
    b2Vec2__Set_28float_2c_20float_29($1, Math_fround(1), Math_fround(0));
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($6 + 272 | 0, HEAP32[$6 + 292 >> 2], HEAP32[$6 + 296 >> 2] + 48 | 0);
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($6 + 264 | 0, HEAP32[$6 + 284 >> 2], HEAP32[$6 + 296 >> 2]);
    if (b2DistanceSquared_28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 272 | 0, $6 + 264 | 0) > Math_fround(14210854715202004e-30)) {
     operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 256 | 0, $6 + 264 | 0, $6 + 272 | 0);
     $2 = HEAP32[$6 + 260 >> 2];
     $0 = HEAP32[$6 + 256 >> 2];
     HEAP32[$1 >> 2] = $0;
     HEAP32[$1 + 4 >> 2] = $2;
     b2Vec2__Normalize_28_29($1);
    }
    operator__28float_2c_20b2Vec2_20const__29($6 + 240 | 0, HEAPF32[$6 + 288 >> 2], $1);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($6 + 248 | 0, $6 + 272 | 0, $6 + 240 | 0);
    operator__28float_2c_20b2Vec2_20const__29($6 + 224 | 0, HEAPF32[$6 + 280 >> 2], $1);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 232 | 0, $6 + 264 | 0, $6 + 224 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($6 + 208 | 0, $6 + 248 | 0, $6 + 232 | 0);
    operator__28float_2c_20b2Vec2_20const__29($6 + 216 | 0, Math_fround(.5), $6 + 208 | 0);
    $0 = HEAP32[$6 + 220 >> 2];
    $2 = HEAP32[$6 + 216 >> 2];
    HEAP32[$1 + 8 >> 2] = $2;
    HEAP32[$1 + 12 >> 2] = $0;
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 200 | 0, $6 + 232 | 0, $6 + 248 | 0);
    wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 200 | 0, $1), 
    HEAPF32[wasm2js_i32$0 + 24 >> 2] = wasm2js_f32$0;
    break label$1;

   case 1:
    b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($6 + 192 | 0, HEAP32[$6 + 292 >> 2] + 8 | 0, HEAP32[$6 + 296 >> 2] + 40 | 0);
    $2 = HEAP32[$6 + 196 >> 2];
    $0 = HEAP32[$6 + 192 >> 2];
    HEAP32[$1 >> 2] = $0;
    HEAP32[$1 + 4 >> 2] = $2;
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($6 + 184 | 0, HEAP32[$6 + 292 >> 2], HEAP32[$6 + 296 >> 2] + 48 | 0);
    HEAP32[$6 + 180 >> 2] = 0;
    while (1) {
     if (HEAP32[$6 + 180 >> 2] < HEAP32[HEAP32[$6 + 296 >> 2] + 60 >> 2]) {
      b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($6 + 172 | 0, HEAP32[$6 + 284 >> 2], HEAP32[$6 + 296 >> 2] + Math_imul(HEAP32[$6 + 180 >> 2], 20) | 0);
      $3 = HEAPF32[$6 + 288 >> 2];
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 148 | 0, $6 + 172 | 0, $6 + 184 | 0);
      operator__28float_2c_20b2Vec2_20const__29($6 + 156 | 0, Math_fround($3 - b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 148 | 0, $1)), $1);
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($6 + 164 | 0, $6 + 172 | 0, $6 + 156 | 0);
      operator__28float_2c_20b2Vec2_20const__29($6 + 132 | 0, HEAPF32[$6 + 280 >> 2], $1);
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 140 | 0, $6 + 172 | 0, $6 + 132 | 0);
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($6 + 116 | 0, $6 + 164 | 0, $6 + 140 | 0);
      operator__28float_2c_20b2Vec2_20const__29($6 + 124 | 0, Math_fround(.5), $6 + 116 | 0);
      $0 = HEAP32[$6 + 128 >> 2];
      $2 = HEAP32[$6 + 124 >> 2];
      $4 = $2;
      $2 = ($1 + 8 | 0) + (HEAP32[$6 + 180 >> 2] << 3) | 0;
      HEAP32[$2 >> 2] = $4;
      HEAP32[$2 + 4 >> 2] = $0;
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 108 | 0, $6 + 140 | 0, $6 + 164 | 0);
      $3 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 108 | 0, $1);
      HEAPF32[($1 + 24 | 0) + (HEAP32[$6 + 180 >> 2] << 2) >> 2] = $3;
      HEAP32[$6 + 180 >> 2] = HEAP32[$6 + 180 >> 2] + 1;
      continue;
     }
     break;
    }
    ;
    break label$1;

   case 2:
    break label$2;

   default:
    break label$1;
   }
  }
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($6 + 100 | 0, HEAP32[$6 + 284 >> 2] + 8 | 0, HEAP32[$6 + 296 >> 2] + 40 | 0);
  $2 = HEAP32[$6 + 104 >> 2];
  $0 = HEAP32[$6 + 100 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($6 + 92 | 0, HEAP32[$6 + 284 >> 2], HEAP32[$6 + 296 >> 2] + 48 | 0);
  HEAP32[$6 + 88 >> 2] = 0;
  while (1) {
   if (HEAP32[$6 + 88 >> 2] < HEAP32[HEAP32[$6 + 296 >> 2] + 60 >> 2]) {
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($6 + 80 | 0, HEAP32[$6 + 292 >> 2], HEAP32[$6 + 296 >> 2] + Math_imul(HEAP32[$6 + 88 >> 2], 20) | 0);
    $3 = HEAPF32[$6 + 280 >> 2];
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 56 | 0, $6 + 80 | 0, $6 + 92 | 0);
    operator__28float_2c_20b2Vec2_20const__29($6 - -64 | 0, Math_fround($3 - b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 56 | 0, $1)), $1);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($6 + 72 | 0, $6 + 80 | 0, $6 - -64 | 0);
    operator__28float_2c_20b2Vec2_20const__29($6 + 40 | 0, HEAPF32[$6 + 288 >> 2], $1);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 48 | 0, $6 + 80 | 0, $6 + 40 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($6 + 24 | 0, $6 + 48 | 0, $6 + 72 | 0);
    operator__28float_2c_20b2Vec2_20const__29($6 + 32 | 0, Math_fround(.5), $6 + 24 | 0);
    $0 = HEAP32[$6 + 36 >> 2];
    $2 = HEAP32[$6 + 32 >> 2];
    $4 = $2;
    $2 = ($1 + 8 | 0) + (HEAP32[$6 + 88 >> 2] << 3) | 0;
    HEAP32[$2 >> 2] = $4;
    HEAP32[$2 + 4 >> 2] = $0;
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 16 | 0, $6 + 48 | 0, $6 + 72 | 0);
    $3 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 16 | 0, $1);
    HEAPF32[($1 + 24 | 0) + (HEAP32[$6 + 88 >> 2] << 2) >> 2] = $3;
    HEAP32[$6 + 88 >> 2] = HEAP32[$6 + 88 >> 2] + 1;
    continue;
   }
   break;
  }
  b2Vec2__operator__28_29_20const($6 + 8 | 0, $1);
  $2 = HEAP32[$6 + 12 >> 2];
  $0 = HEAP32[$6 + 8 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
 }
 __stack_pointer = $6 + 304 | 0;
}

function b2FrictionJoint__InitVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 176 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 172 >> 2] = $0;
 HEAP32[$2 + 168 >> 2] = $1;
 $1 = HEAP32[$2 + 172 >> 2];
 HEAP32[$1 + 104 >> 2] = HEAP32[HEAP32[$1 + 48 >> 2] + 8 >> 2];
 HEAP32[$1 + 108 >> 2] = HEAP32[HEAP32[$1 + 52 >> 2] + 8 >> 2];
 $4 = HEAP32[$1 + 48 >> 2];
 $3 = HEAP32[$4 + 28 >> 2];
 $0 = HEAP32[$4 + 32 >> 2];
 HEAP32[$1 + 128 >> 2] = $3;
 HEAP32[$1 + 132 >> 2] = $0;
 $4 = HEAP32[$1 + 52 >> 2];
 $0 = HEAP32[$4 + 28 >> 2];
 $3 = HEAP32[$4 + 32 >> 2];
 HEAP32[$1 + 136 >> 2] = $0;
 HEAP32[$1 + 140 >> 2] = $3;
 HEAPF32[$1 + 144 >> 2] = HEAPF32[HEAP32[$1 + 48 >> 2] + 120 >> 2];
 HEAPF32[$1 + 148 >> 2] = HEAPF32[HEAP32[$1 + 52 >> 2] + 120 >> 2];
 HEAPF32[$1 + 152 >> 2] = HEAPF32[HEAP32[$1 + 48 >> 2] + 128 >> 2];
 HEAPF32[$1 + 156 >> 2] = HEAPF32[HEAP32[$1 + 52 >> 2] + 128 >> 2];
 HEAPF32[$2 + 164 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 24 >> 2] + Math_imul(HEAP32[$1 + 104 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 104 >> 2], 12) | 0;
 $3 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 152 >> 2] = $3;
 HEAP32[$2 + 156 >> 2] = $0;
 HEAPF32[$2 + 148 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 104 >> 2], 12) | 0) + 8 >> 2];
 HEAPF32[$2 + 144 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 24 >> 2] + Math_imul(HEAP32[$1 + 108 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 108 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 136 >> 2] = $0;
 HEAP32[$2 + 140 >> 2] = $3;
 HEAPF32[$2 + 132 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 108 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($2 + 124 | 0, HEAPF32[$2 + 164 >> 2]);
 b2Rot__b2Rot_28float_29($2 + 116 | 0, HEAPF32[$2 + 144 >> 2]);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 100 | 0, $1 + 68 | 0, $1 + 128 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 108 | 0, $2 + 124 | 0, $2 + 100 | 0);
 $0 = HEAP32[$2 + 112 >> 2];
 $3 = HEAP32[$2 + 108 >> 2];
 HEAP32[$1 + 112 >> 2] = $3;
 HEAP32[$1 + 116 >> 2] = $0;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 84 | 0, $1 + 76 | 0, $1 + 136 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 92 | 0, $2 + 116 | 0, $2 + 84 | 0);
 $3 = HEAP32[$2 + 96 >> 2];
 $0 = HEAP32[$2 + 92 >> 2];
 HEAP32[$1 + 120 >> 2] = $0;
 HEAP32[$1 + 124 >> 2] = $3;
 HEAPF32[$2 + 80 >> 2] = HEAPF32[$1 + 144 >> 2];
 HEAPF32[$2 + 76 >> 2] = HEAPF32[$1 + 148 >> 2];
 HEAPF32[$2 + 72 >> 2] = HEAPF32[$1 + 152 >> 2];
 HEAPF32[$2 + 68 >> 2] = HEAPF32[$1 + 156 >> 2];
 b2Mat22__b2Mat22_28_29($2 + 52 | 0);
 HEAPF32[$2 + 52 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 68 >> 2] * HEAPF32[$1 + 124 >> 2]) * HEAPF32[$1 + 124 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 72 >> 2] * HEAPF32[$1 + 116 >> 2]) * HEAPF32[$1 + 116 >> 2]) + Math_fround(HEAPF32[$2 + 80 >> 2] + HEAPF32[$2 + 76 >> 2]));
 HEAPF32[$2 + 56 >> 2] = Math_fround(Math_fround(Math_fround(-HEAPF32[$2 + 72 >> 2]) * HEAPF32[$1 + 112 >> 2]) * HEAPF32[$1 + 116 >> 2]) - Math_fround(Math_fround(HEAPF32[$2 + 68 >> 2] * HEAPF32[$1 + 120 >> 2]) * HEAPF32[$1 + 124 >> 2]);
 HEAPF32[$2 + 60 >> 2] = HEAPF32[$2 + 56 >> 2];
 HEAPF32[$2 + 64 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 68 >> 2] * HEAPF32[$1 + 120 >> 2]) * HEAPF32[$1 + 120 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 72 >> 2] * HEAPF32[$1 + 112 >> 2]) * HEAPF32[$1 + 112 >> 2]) + Math_fround(HEAPF32[$2 + 80 >> 2] + HEAPF32[$2 + 76 >> 2]));
 b2Mat22__GetInverse_28_29_20const($2 + 36 | 0, $2 + 52 | 0);
 $0 = HEAP32[$2 + 40 >> 2];
 $3 = HEAP32[$2 + 36 >> 2];
 HEAP32[$1 + 160 >> 2] = $3;
 HEAP32[$1 + 164 >> 2] = $0;
 $3 = HEAP32[$2 + 48 >> 2];
 $0 = HEAP32[$2 + 44 >> 2];
 HEAP32[$1 + 168 >> 2] = $0;
 HEAP32[$1 + 172 >> 2] = $3;
 HEAPF32[$1 + 176 >> 2] = HEAPF32[$2 + 72 >> 2] + HEAPF32[$2 + 68 >> 2];
 if (HEAPF32[$1 + 176 >> 2] > Math_fround(0)) {
  HEAPF32[$1 + 176 >> 2] = Math_fround(1) / HEAPF32[$1 + 176 >> 2];
 }
 label$2: {
  if (HEAP8[HEAP32[$2 + 168 >> 2] + 20 | 0] & 1) {
   b2Vec2__operator___28float_29($1 + 84 | 0, HEAPF32[HEAP32[$2 + 168 >> 2] + 8 >> 2]);
   HEAPF32[$1 + 92 >> 2] = HEAPF32[$1 + 92 >> 2] * HEAPF32[HEAP32[$2 + 168 >> 2] + 8 >> 2];
   b2Vec2__b2Vec2_28float_2c_20float_29($2 + 28 | 0, HEAPF32[$1 + 84 >> 2], HEAPF32[$1 + 88 >> 2]);
   operator__28float_2c_20b2Vec2_20const__29($2 + 20 | 0, HEAPF32[$2 + 80 >> 2], $2 + 28 | 0);
   b2Vec2__operator___28b2Vec2_20const__29_1($2 + 152 | 0, $2 + 20 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$2 + 72 >> 2]) * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 112 | 0, $2 + 28 | 0) + HEAPF32[$1 + 92 >> 2])) + HEAPF32[$2 + 148 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 148 >> 2] = wasm2js_f32$0;
   operator__28float_2c_20b2Vec2_20const__29($2 + 12 | 0, HEAPF32[$2 + 76 >> 2], $2 + 28 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($2 + 136 | 0, $2 + 12 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$2 + 68 >> 2] * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 120 | 0, $2 + 28 | 0) + HEAPF32[$1 + 92 >> 2])) + HEAPF32[$2 + 132 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 132 >> 2] = wasm2js_f32$0;
   break label$2;
  }
  b2Vec2__SetZero_28_29($1 + 84 | 0);
  HEAPF32[$1 + 92 >> 2] = 0;
 }
 $0 = HEAP32[$2 + 156 >> 2];
 $3 = HEAP32[$2 + 152 >> 2];
 $4 = $3;
 $3 = HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 104 >> 2], 12) | 0;
 HEAP32[$3 >> 2] = $4;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 104 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 148 >> 2];
 $3 = HEAP32[$2 + 140 >> 2];
 $0 = HEAP32[$2 + 136 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 108 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $3;
 HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 108 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 132 >> 2];
 __stack_pointer = $2 + 176 | 0;
}

function b2WeldJoint__SolveVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 256 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 252 >> 2] = $0;
 HEAP32[$2 + 248 >> 2] = $1;
 $3 = HEAP32[$2 + 252 >> 2];
 $4 = HEAP32[HEAP32[$2 + 248 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 116 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 240 >> 2] = $0;
 HEAP32[$2 + 244 >> 2] = $1;
 HEAPF32[$2 + 236 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 248 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 116 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 248 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 120 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 224 >> 2] = $1;
 HEAP32[$2 + 228 >> 2] = $0;
 HEAPF32[$2 + 220 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 248 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 120 >> 2], 12) | 0) + 8 >> 2];
 HEAPF32[$2 + 216 >> 2] = HEAPF32[$3 + 156 >> 2];
 HEAPF32[$2 + 212 >> 2] = HEAPF32[$3 + 160 >> 2];
 HEAPF32[$2 + 208 >> 2] = HEAPF32[$3 + 164 >> 2];
 HEAPF32[$2 + 204 >> 2] = HEAPF32[$3 + 168 >> 2];
 label$1: {
  if (HEAPF32[$3 + 68 >> 2] > Math_fround(0)) {
   HEAPF32[$2 + 200 >> 2] = HEAPF32[$2 + 220 >> 2] - HEAPF32[$2 + 236 >> 2];
   HEAPF32[$2 + 196 >> 2] = Math_fround(-HEAPF32[$3 + 204 >> 2]) * Math_fround(Math_fround(HEAPF32[$3 + 100 >> 2] * HEAPF32[$3 + 112 >> 2]) + Math_fround(HEAPF32[$2 + 200 >> 2] + HEAPF32[$3 + 76 >> 2]));
   HEAPF32[$3 + 112 >> 2] = HEAPF32[$3 + 112 >> 2] + HEAPF32[$2 + 196 >> 2];
   HEAPF32[$2 + 236 >> 2] = Math_fround(Math_fround(-HEAPF32[$2 + 208 >> 2]) * HEAPF32[$2 + 196 >> 2]) + HEAPF32[$2 + 236 >> 2];
   HEAPF32[$2 + 220 >> 2] = Math_fround(HEAPF32[$2 + 204 >> 2] * HEAPF32[$2 + 196 >> 2]) + HEAPF32[$2 + 220 >> 2];
   b2Cross_28float_2c_20b2Vec2_20const__29($2 + 164 | 0, HEAPF32[$2 + 220 >> 2], $3 + 132 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 172 | 0, $2 + 224 | 0, $2 + 164 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 180 | 0, $2 + 172 | 0, $2 + 240 | 0);
   b2Cross_28float_2c_20b2Vec2_20const__29($2 + 156 | 0, HEAPF32[$2 + 236 >> 2], $3 + 124 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 188 | 0, $2 + 180 | 0, $2 + 156 | 0);
   b2Mul22_28b2Mat33_20const__2c_20b2Vec2_20const__29($2 + 140 | 0, $3 + 172 | 0, $2 + 188 | 0);
   b2Vec2__operator__28_29_20const($2 + 148 | 0, $2 + 140 | 0);
   HEAPF32[$3 + 104 >> 2] = HEAPF32[$3 + 104 >> 2] + HEAPF32[$2 + 148 >> 2];
   HEAPF32[$3 + 108 >> 2] = HEAPF32[$3 + 108 >> 2] + HEAPF32[$2 + 152 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   $0 = HEAP32[$2 + 148 >> 2];
   HEAP32[$2 + 128 >> 2] = $0;
   HEAP32[$2 + 132 >> 2] = $1;
   operator__28float_2c_20b2Vec2_20const__29($2 + 120 | 0, HEAPF32[$2 + 216 >> 2], $2 + 128 | 0);
   b2Vec2__operator___28b2Vec2_20const__29_1($2 + 240 | 0, $2 + 120 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$2 + 208 >> 2]) * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 124 | 0, $2 + 128 | 0)) + HEAPF32[$2 + 236 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 236 >> 2] = wasm2js_f32$0;
   operator__28float_2c_20b2Vec2_20const__29($2 + 112 | 0, HEAPF32[$2 + 212 >> 2], $2 + 128 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($2 + 224 | 0, $2 + 112 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$2 + 204 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 132 | 0, $2 + 128 | 0)) + HEAPF32[$2 + 220 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 220 >> 2] = wasm2js_f32$0;
   break label$1;
  }
  b2Cross_28float_2c_20b2Vec2_20const__29($2 + 80 | 0, HEAPF32[$2 + 220 >> 2], $3 + 132 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 88 | 0, $2 + 224 | 0, $2 + 80 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 96 | 0, $2 + 88 | 0, $2 + 240 | 0);
  b2Cross_28float_2c_20b2Vec2_20const__29($2 + 72 | 0, HEAPF32[$2 + 236 >> 2], $3 + 124 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 104 | 0, $2 + 96 | 0, $2 + 72 | 0);
  HEAPF32[$2 + 68 >> 2] = HEAPF32[$2 + 220 >> 2] - HEAPF32[$2 + 236 >> 2];
  b2Vec3__b2Vec3_28float_2c_20float_2c_20float_29($2 + 56 | 0, HEAPF32[$2 + 104 >> 2], HEAPF32[$2 + 108 >> 2], HEAPF32[$2 + 68 >> 2]);
  b2Mul_28b2Mat33_20const__2c_20b2Vec3_20const__29($2 + 32 | 0, $3 + 172 | 0, $2 + 56 | 0);
  b2Vec3__operator__28_29_20const($2 + 44 | 0, $2 + 32 | 0);
  b2Vec3__operator___28b2Vec3_20const__29($3 + 104 | 0, $2 + 44 | 0);
  b2Vec2__b2Vec2_28float_2c_20float_29($2 + 24 | 0, HEAPF32[$2 + 44 >> 2], HEAPF32[$2 + 48 >> 2]);
  operator__28float_2c_20b2Vec2_20const__29($2 + 16 | 0, HEAPF32[$2 + 216 >> 2], $2 + 24 | 0);
  b2Vec2__operator___28b2Vec2_20const__29_1($2 + 240 | 0, $2 + 16 | 0);
  wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$2 + 208 >> 2]) * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 124 | 0, $2 + 24 | 0) + HEAPF32[$2 + 52 >> 2])) + HEAPF32[$2 + 236 >> 2]), 
  HEAPF32[wasm2js_i32$0 + 236 >> 2] = wasm2js_f32$0;
  operator__28float_2c_20b2Vec2_20const__29($2 + 8 | 0, HEAPF32[$2 + 212 >> 2], $2 + 24 | 0);
  b2Vec2__operator___28b2Vec2_20const__29($2 + 224 | 0, $2 + 8 | 0);
  wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$2 + 204 >> 2] * Math_fround(b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 132 | 0, $2 + 24 | 0) + HEAPF32[$2 + 52 >> 2])) + HEAPF32[$2 + 220 >> 2]), 
  HEAPF32[wasm2js_i32$0 + 220 >> 2] = wasm2js_f32$0;
 }
 $0 = HEAP32[$2 + 244 >> 2];
 $1 = HEAP32[$2 + 240 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 248 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 116 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 248 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 116 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 236 >> 2];
 $1 = HEAP32[$2 + 228 >> 2];
 $0 = HEAP32[$2 + 224 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 248 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 120 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 248 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 120 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 220 >> 2];
 __stack_pointer = $2 + 256 | 0;
}

function b2Fixture__Dump_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 496 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 492 >> 2] = $0;
 HEAP32[$2 + 488 >> 2] = $1;
 $0 = HEAP32[$2 + 492 >> 2];
 b2Log_28char_20const__2c_20____29(13594, 0);
 HEAPF64[$2 + 448 >> 3] = HEAPF32[$0 + 16 >> 2];
 b2Log_28char_20const__2c_20____29(12682, $2 + 448 | 0);
 HEAPF64[$2 + 432 >> 3] = HEAPF32[$0 + 20 >> 2];
 b2Log_28char_20const__2c_20____29(12651, $2 + 432 | 0);
 HEAPF64[$2 + 416 >> 3] = HEAPF32[$0 >> 2];
 b2Log_28char_20const__2c_20____29(12442, $2 + 416 | 0);
 HEAP32[$2 + 400 >> 2] = HEAP8[$0 + 38 | 0] & 1;
 b2Log_28char_20const__2c_20____29(14809, $2 + 400 | 0);
 HEAP32[$2 + 384 >> 2] = HEAPU16[$0 + 32 >> 1];
 b2Log_28char_20const__2c_20____29(15085, $2 + 384 | 0);
 HEAP32[$2 + 368 >> 2] = HEAPU16[$0 + 34 >> 1];
 b2Log_28char_20const__2c_20____29(15127, $2 + 368 | 0);
 HEAP32[$2 + 352 >> 2] = HEAP16[$0 + 36 >> 1];
 b2Log_28char_20const__2c_20____29(15165, $2 + 352 | 0);
 label$1: {
  label$2: {
   label$3: {
    switch (HEAP32[HEAP32[$0 + 12 >> 2] + 4 >> 2]) {
    case 0:
     HEAP32[$2 + 484 >> 2] = HEAP32[$0 + 12 >> 2];
     b2Log_28char_20const__2c_20____29(13303, 0);
     HEAPF64[$2 + 16 >> 3] = HEAPF32[HEAP32[$2 + 484 >> 2] + 8 >> 2];
     b2Log_28char_20const__2c_20____29(12533, $2 + 16 | 0);
     $0 = HEAP32[$2 + 484 >> 2];
     $3 = HEAPF32[$0 + 12 >> 2];
     HEAPF64[$2 + 40 >> 3] = HEAPF32[$0 + 16 >> 2];
     HEAPF64[$2 + 32 >> 3] = $3;
     b2Log_28char_20const__2c_20____29(13998, $2 + 32 | 0);
     break label$2;

    case 1:
     HEAP32[$2 + 480 >> 2] = HEAP32[$0 + 12 >> 2];
     b2Log_28char_20const__2c_20____29(13329, 0);
     HEAPF64[$2 + 96 >> 3] = HEAPF32[HEAP32[$2 + 480 >> 2] + 8 >> 2];
     b2Log_28char_20const__2c_20____29(12533, $2 + 96 | 0);
     $0 = HEAP32[$2 + 480 >> 2];
     $3 = HEAPF32[$0 + 32 >> 2];
     HEAPF64[$2 + 80 >> 3] = HEAPF32[$0 + 28 >> 2];
     HEAPF64[$2 + 88 >> 3] = $3;
     b2Log_28char_20const__2c_20____29(14451, $2 + 80 | 0);
     $0 = HEAP32[$2 + 480 >> 2];
     $3 = HEAPF32[$0 + 16 >> 2];
     HEAPF64[$2 + 64 >> 3] = HEAPF32[$0 + 12 >> 2];
     HEAPF64[$2 + 72 >> 3] = $3;
     b2Log_28char_20const__2c_20____29(14407, $2 - -64 | 0);
     $0 = HEAP32[$2 + 480 >> 2];
     $3 = HEAPF32[$0 + 24 >> 2];
     HEAPF64[$2 + 48 >> 3] = HEAPF32[$0 + 20 >> 2];
     HEAPF64[$2 + 56 >> 3] = $3;
     b2Log_28char_20const__2c_20____29(14363, $2 + 48 | 0);
     $0 = HEAP32[$2 + 480 >> 2];
     $3 = HEAPF32[$0 + 36 >> 2];
     HEAPF64[$2 + 120 >> 3] = HEAPF32[$0 + 40 >> 2];
     HEAPF64[$2 + 112 >> 3] = $3;
     b2Log_28char_20const__2c_20____29(14319, $2 + 112 | 0);
     HEAP32[$2 + 128 >> 2] = HEAP8[HEAP32[$2 + 480 >> 2] + 44 | 0] & 1;
     b2Log_28char_20const__2c_20____29(15020, $2 + 128 | 0);
     HEAP32[$2 + 144 >> 2] = HEAP8[HEAP32[$2 + 480 >> 2] + 45 | 0] & 1;
     b2Log_28char_20const__2c_20____29(14984, $2 + 144 | 0);
     break label$2;

    case 2:
     HEAP32[$2 + 476 >> 2] = HEAP32[$0 + 12 >> 2];
     b2Log_28char_20const__2c_20____29(13251, 0);
     HEAP32[$2 + 208 >> 2] = 8;
     b2Log_28char_20const__2c_20____29(13633, $2 + 208 | 0);
     HEAP32[$2 + 472 >> 2] = 0;
     while (1) {
      if (HEAP32[$2 + 472 >> 2] < HEAP32[HEAP32[$2 + 476 >> 2] + 148 >> 2]) {
       $0 = HEAP32[$2 + 472 >> 2];
       $1 = HEAP32[$2 + 476 >> 2] + ($0 << 3) | 0;
       $3 = HEAPF32[$1 + 20 >> 2];
       HEAPF64[$2 + 176 >> 3] = HEAPF32[$1 + 24 >> 2];
       HEAPF64[$2 + 168 >> 3] = $3;
       HEAP32[$2 + 160 >> 2] = $0;
       b2Log_28char_20const__2c_20____29(14074, $2 + 160 | 0);
       HEAP32[$2 + 472 >> 2] = HEAP32[$2 + 472 >> 2] + 1;
       continue;
      }
      break;
     }
     ;
     HEAP32[$2 + 192 >> 2] = HEAP32[HEAP32[$2 + 476 >> 2] + 148 >> 2];
     b2Log_28char_20const__2c_20____29(15204, $2 + 192 | 0);
     break label$2;

    case 3:
     break label$3;

    default:
     break label$1;
    }
   }
   HEAP32[$2 + 468 >> 2] = HEAP32[$0 + 12 >> 2];
   b2Log_28char_20const__2c_20____29(13278, 0);
   HEAP32[$2 + 336 >> 2] = HEAP32[HEAP32[$2 + 468 >> 2] + 16 >> 2];
   b2Log_28char_20const__2c_20____29(13633, $2 + 336 | 0);
   HEAP32[$2 + 464 >> 2] = 0;
   while (1) {
    if (HEAP32[$2 + 464 >> 2] < HEAP32[HEAP32[$2 + 468 >> 2] + 16 >> 2]) {
     $0 = HEAP32[$2 + 464 >> 2];
     $1 = HEAP32[HEAP32[$2 + 468 >> 2] + 12 >> 2] + ($0 << 3) | 0;
     $3 = HEAPF32[$1 >> 2];
     HEAPF64[$2 + 240 >> 3] = HEAPF32[$1 + 4 >> 2];
     HEAPF64[$2 + 232 >> 3] = $3;
     HEAP32[$2 + 224 >> 2] = $0;
     b2Log_28char_20const__2c_20____29(14074, $2 + 224 | 0);
     HEAP32[$2 + 464 >> 2] = HEAP32[$2 + 464 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$2 + 272 >> 2] = HEAP32[HEAP32[$2 + 468 >> 2] + 16 >> 2];
   b2Log_28char_20const__2c_20____29(15228, $2 + 272 | 0);
   $0 = HEAP32[$2 + 468 >> 2];
   $3 = HEAPF32[$0 + 24 >> 2];
   HEAPF64[$2 + 256 >> 3] = HEAPF32[$0 + 20 >> 2];
   HEAPF64[$2 + 264 >> 3] = $3;
   b2Log_28char_20const__2c_20____29(13862, $2 + 256 | 0);
   $0 = HEAP32[$2 + 468 >> 2];
   $3 = HEAPF32[$0 + 28 >> 2];
   HEAPF64[$2 + 296 >> 3] = HEAPF32[$0 + 32 >> 2];
   HEAPF64[$2 + 288 >> 3] = $3;
   b2Log_28char_20const__2c_20____29(13909, $2 + 288 | 0);
   HEAP32[$2 + 304 >> 2] = HEAP8[HEAP32[$2 + 468 >> 2] + 36 | 0] & 1;
   b2Log_28char_20const__2c_20____29(14646, $2 + 304 | 0);
   HEAP32[$2 + 320 >> 2] = HEAP8[HEAP32[$2 + 468 >> 2] + 37 | 0] & 1;
   b2Log_28char_20const__2c_20____29(14685, $2 + 320 | 0);
  }
  b2Log_28char_20const__2c_20____29(15467, 0);
  b2Log_28char_20const__2c_20____29(13227, 0);
  b2Log_28char_20const__2c_20____29(15467, 0);
  HEAP32[$2 >> 2] = HEAP32[$2 + 488 >> 2];
  b2Log_28char_20const__2c_20____29(14567, $2);
 }
 __stack_pointer = $2 + 496 | 0;
}

function b2PulleyJoint__SolvePositionConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 192 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 188 >> 2] = $0;
 HEAP32[$2 + 184 >> 2] = $1;
 $3 = HEAP32[$2 + 188 >> 2];
 $4 = HEAP32[HEAP32[$2 + 184 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 120 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 176 >> 2] = $1;
 HEAP32[$2 + 180 >> 2] = $0;
 HEAPF32[$2 + 172 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 184 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 120 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 184 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 124 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 160 >> 2] = $0;
 HEAP32[$2 + 164 >> 2] = $1;
 HEAPF32[$2 + 156 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 184 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 124 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($2 + 148 | 0, HEAPF32[$2 + 172 >> 2]);
 b2Rot__b2Rot_28float_29($2 + 140 | 0, HEAPF32[$2 + 156 >> 2]);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 124 | 0, $3 + 92 | 0, $3 + 160 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 132 | 0, $2 + 148 | 0, $2 + 124 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 108 | 0, $3 + 100 | 0, $3 + 168 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 116 | 0, $2 + 140 | 0, $2 + 108 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 92 | 0, $2 + 176 | 0, $2 + 132 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 100 | 0, $2 + 92 | 0, $3 + 68 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 76 | 0, $2 + 160 | 0, $2 + 116 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 84 | 0, $2 + 76 | 0, $3 + 76 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Vec2__Length_28_29_20const($2 + 100 | 0), 
 HEAPF32[wasm2js_i32$0 + 72 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Vec2__Length_28_29_20const($2 + 84 | 0), HEAPF32[wasm2js_i32$0 + 68 >> 2] = wasm2js_f32$0;
 label$1: {
  if (HEAPF32[$2 + 72 >> 2] > Math_fround(.04999999701976776)) {
   b2Vec2__operator___28float_29($2 + 100 | 0, Math_fround(Math_fround(1) / HEAPF32[$2 + 72 >> 2]));
   break label$1;
  }
  b2Vec2__SetZero_28_29($2 + 100 | 0);
 }
 label$3: {
  if (HEAPF32[$2 + 68 >> 2] > Math_fround(.04999999701976776)) {
   b2Vec2__operator___28float_29($2 + 84 | 0, Math_fround(Math_fround(1) / HEAPF32[$2 + 68 >> 2]));
   break label$3;
  }
  b2Vec2__SetZero_28_29($2 + 84 | 0);
 }
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 132 | 0, $2 + 100 | 0), 
 HEAPF32[wasm2js_i32$0 + 64 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 116 | 0, $2 + 84 | 0), 
 HEAPF32[wasm2js_i32$0 + 60 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 56 >> 2] = Math_fround(Math_fround(HEAPF32[$3 + 184 >> 2] * HEAPF32[$2 + 64 >> 2]) * HEAPF32[$2 + 64 >> 2]) + HEAPF32[$3 + 176 >> 2];
 HEAPF32[$2 + 52 >> 2] = Math_fround(Math_fround(HEAPF32[$3 + 188 >> 2] * HEAPF32[$2 + 60 >> 2]) * HEAPF32[$2 + 60 >> 2]) + HEAPF32[$3 + 180 >> 2];
 HEAPF32[$2 + 48 >> 2] = Math_fround(Math_fround(HEAPF32[$3 + 112 >> 2] * HEAPF32[$3 + 112 >> 2]) * HEAPF32[$2 + 52 >> 2]) + HEAPF32[$2 + 56 >> 2];
 if (HEAPF32[$2 + 48 >> 2] > Math_fround(0)) {
  HEAPF32[$2 + 48 >> 2] = Math_fround(1) / HEAPF32[$2 + 48 >> 2];
 }
 HEAPF32[$2 + 44 >> 2] = Math_fround(Math_fround(-HEAPF32[$3 + 112 >> 2]) * HEAPF32[$2 + 68 >> 2]) + Math_fround(HEAPF32[$3 + 108 >> 2] - HEAPF32[$2 + 72 >> 2]);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Abs_float__28float_29(HEAPF32[$2 + 44 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 36 >> 2] = Math_fround(-HEAPF32[$2 + 48 >> 2]) * HEAPF32[$2 + 44 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 28 | 0, Math_fround(-HEAPF32[$2 + 36 >> 2]), $2 + 100 | 0);
 operator__28float_2c_20b2Vec2_20const__29($2 + 20 | 0, Math_fround(Math_fround(-HEAPF32[$3 + 112 >> 2]) * HEAPF32[$2 + 36 >> 2]), $2 + 84 | 0);
 operator__28float_2c_20b2Vec2_20const__29($2 + 12 | 0, HEAPF32[$3 + 176 >> 2], $2 + 28 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 176 | 0, $2 + 12 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$3 + 184 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 132 | 0, $2 + 28 | 0)) + HEAPF32[$2 + 172 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 172 >> 2] = wasm2js_f32$0;
 operator__28float_2c_20b2Vec2_20const__29($2 + 4 | 0, HEAPF32[$3 + 180 >> 2], $2 + 20 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 160 | 0, $2 + 4 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$3 + 188 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 116 | 0, $2 + 20 | 0)) + HEAPF32[$2 + 156 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 156 >> 2] = wasm2js_f32$0;
 $0 = HEAP32[$2 + 180 >> 2];
 $1 = HEAP32[$2 + 176 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 184 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 120 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 184 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 120 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 172 >> 2];
 $1 = HEAP32[$2 + 164 >> 2];
 $0 = HEAP32[$2 + 160 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 184 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 124 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 184 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 124 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 156 >> 2];
 __stack_pointer = $2 + 192 | 0;
 return HEAPF32[$2 + 40 >> 2] < Math_fround(.004999999888241291) | 0;
}

function b2World__DrawShape_28b2Fixture__2c_20b2Transform_20const__2c_20b2Color_20const__29($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 224 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 220 >> 2] = $0;
 HEAP32[$4 + 216 >> 2] = $1;
 HEAP32[$4 + 212 >> 2] = $2;
 HEAP32[$4 + 208 >> 2] = $3;
 $3 = HEAP32[$4 + 220 >> 2];
 label$1: {
  label$2: {
   switch (b2Fixture__GetType_28_29_20const(HEAP32[$4 + 216 >> 2]) | 0) {
   case 0:
    wasm2js_i32$0 = $4, wasm2js_i32$1 = b2Fixture__GetShape_28_29(HEAP32[$4 + 216 >> 2]), 
    HEAP32[wasm2js_i32$0 + 204 >> 2] = wasm2js_i32$1;
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 196 | 0, HEAP32[$4 + 212 >> 2], HEAP32[$4 + 204 >> 2] + 12 | 0);
    HEAPF32[$4 + 192 >> 2] = HEAPF32[HEAP32[$4 + 204 >> 2] + 8 >> 2];
    $0 = HEAP32[$4 + 212 >> 2];
    b2Vec2__b2Vec2_28float_2c_20float_29($4 + 176 | 0, Math_fround(1), Math_fround(0));
    b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($4 + 184 | 0, $0 + 8 | 0, $4 + 176 | 0);
    $0 = HEAP32[$3 + 102980 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $4 + 196 | 0, HEAPF32[$4 + 192 >> 2], $4 + 184 | 0, HEAP32[$4 + 208 >> 2]);
    break label$1;

   case 1:
    wasm2js_i32$0 = $4, wasm2js_i32$1 = b2Fixture__GetShape_28_29(HEAP32[$4 + 216 >> 2]), 
    HEAP32[wasm2js_i32$0 + 172 >> 2] = wasm2js_i32$1;
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 164 | 0, HEAP32[$4 + 212 >> 2], HEAP32[$4 + 172 >> 2] + 12 | 0);
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 156 | 0, HEAP32[$4 + 212 >> 2], HEAP32[$4 + 172 >> 2] + 20 | 0);
    $0 = HEAP32[$3 + 102980 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $4 + 164 | 0, $4 + 156 | 0, HEAP32[$4 + 208 >> 2]);
    break label$1;

   case 3:
    wasm2js_i32$0 = $4, wasm2js_i32$1 = b2Fixture__GetShape_28_29(HEAP32[$4 + 216 >> 2]), 
    HEAP32[wasm2js_i32$0 + 152 >> 2] = wasm2js_i32$1;
    HEAP32[$4 + 148 >> 2] = HEAP32[HEAP32[$4 + 152 >> 2] + 16 >> 2];
    HEAP32[$4 + 144 >> 2] = HEAP32[HEAP32[$4 + 152 >> 2] + 12 >> 2];
    b2Color__b2Color_28float_2c_20float_2c_20float_2c_20float_29($4 + 128 | 0, Math_fround(HEAPF32[HEAP32[$4 + 208 >> 2] >> 2] * Math_fround(.75)), Math_fround(HEAPF32[HEAP32[$4 + 208 >> 2] + 4 >> 2] * Math_fround(.75)), Math_fround(HEAPF32[HEAP32[$4 + 208 >> 2] + 8 >> 2] * Math_fround(.75)), HEAPF32[HEAP32[$4 + 208 >> 2] + 12 >> 2]);
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 120 | 0, HEAP32[$4 + 212 >> 2], HEAP32[$4 + 144 >> 2]);
    $0 = HEAP32[$3 + 102980 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $4 + 120 | 0, Math_fround(4), HEAP32[$4 + 208 >> 2]);
    if (HEAP8[HEAP32[$4 + 152 >> 2] + 36 | 0] & 1) {
     b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 112 | 0, HEAP32[$4 + 212 >> 2], HEAP32[$4 + 152 >> 2] + 20 | 0);
     $0 = HEAP32[$3 + 102980 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $4 + 112 | 0, $4 + 120 | 0, $4 + 128 | 0);
     $0 = HEAP32[$3 + 102980 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $4 + 112 | 0, Math_fround(.10000000149011612), $4 + 128 | 0);
    }
    HEAP32[$4 + 108 >> 2] = 1;
    while (1) {
     if (HEAP32[$4 + 108 >> 2] < HEAP32[$4 + 148 >> 2]) {
      b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 100 | 0, HEAP32[$4 + 212 >> 2], HEAP32[$4 + 144 >> 2] + (HEAP32[$4 + 108 >> 2] << 3) | 0);
      $0 = HEAP32[$3 + 102980 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $4 + 120 | 0, $4 + 100 | 0, HEAP32[$4 + 208 >> 2]);
      $0 = HEAP32[$3 + 102980 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $4 + 100 | 0, Math_fround(4), HEAP32[$4 + 208 >> 2]);
      $1 = HEAP32[$4 + 104 >> 2];
      $0 = HEAP32[$4 + 100 >> 2];
      HEAP32[$4 + 120 >> 2] = $0;
      HEAP32[$4 + 124 >> 2] = $1;
      HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 108 >> 2] + 1;
      continue;
     }
     break;
    }
    ;
    if (HEAP8[HEAP32[$4 + 152 >> 2] + 37 | 0] & 1) {
     b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 92 | 0, HEAP32[$4 + 212 >> 2], HEAP32[$4 + 152 >> 2] + 28 | 0);
     $0 = HEAP32[$3 + 102980 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $4 + 120 | 0, $4 + 92 | 0, $4 + 128 | 0);
     $0 = HEAP32[$3 + 102980 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $4 + 92 | 0, Math_fround(.10000000149011612), $4 + 128 | 0);
    }
    break label$1;

   case 2:
    break label$2;

   default:
    break label$1;
   }
  }
  wasm2js_i32$0 = $4, wasm2js_i32$1 = b2Fixture__GetShape_28_29(HEAP32[$4 + 216 >> 2]), 
  HEAP32[wasm2js_i32$0 + 88 >> 2] = wasm2js_i32$1;
  HEAP32[$4 + 84 >> 2] = HEAP32[HEAP32[$4 + 88 >> 2] + 148 >> 2];
  if (HEAP32[$4 + 84 >> 2] > 8) {
   __assert_fail(11774, 6054, 1103, 9128);
   wasm2js_trap();
  }
  $0 = $4 + 16 | 0;
  $1 = $0 - -64 | 0;
  while (1) {
   b2Vec2__b2Vec2_28_29($0);
   $0 = $0 + 8 | 0;
   if (($1 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
  HEAP32[$4 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$4 + 12 >> 2] < HEAP32[$4 + 84 >> 2]) {
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 4 | 0, HEAP32[$4 + 212 >> 2], (HEAP32[$4 + 88 >> 2] + 20 | 0) + (HEAP32[$4 + 12 >> 2] << 3) | 0);
    $0 = HEAP32[$4 + 8 >> 2];
    $1 = HEAP32[$4 + 4 >> 2];
    $2 = $1;
    $1 = ($4 + 16 | 0) + (HEAP32[$4 + 12 >> 2] << 3) | 0;
    HEAP32[$1 >> 2] = $2;
    HEAP32[$1 + 4 >> 2] = $0;
    HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  $0 = HEAP32[$3 + 102980 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $4 + 16 | 0, HEAP32[$4 + 84 >> 2], HEAP32[$4 + 208 >> 2]);
 }
 __stack_pointer = $4 + 224 | 0;
}

function b2ContactManager__AddPair_28void__2c_20void__29($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 76 >> 2] = $0;
 HEAP32[$3 + 72 >> 2] = $1;
 HEAP32[$3 + 68 >> 2] = $2;
 $0 = HEAP32[$3 + 76 >> 2];
 HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 72 >> 2];
 HEAP32[$3 + 60 >> 2] = HEAP32[$3 + 68 >> 2];
 HEAP32[$3 + 56 >> 2] = HEAP32[HEAP32[$3 + 64 >> 2] + 16 >> 2];
 HEAP32[$3 + 52 >> 2] = HEAP32[HEAP32[$3 + 60 >> 2] + 16 >> 2];
 HEAP32[$3 + 48 >> 2] = HEAP32[HEAP32[$3 + 64 >> 2] + 20 >> 2];
 HEAP32[$3 + 44 >> 2] = HEAP32[HEAP32[$3 + 60 >> 2] + 20 >> 2];
 wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$3 + 56 >> 2]), 
 HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$3 + 52 >> 2]), 
 HEAP32[wasm2js_i32$0 + 36 >> 2] = wasm2js_i32$1;
 label$1: {
  if (HEAP32[$3 + 40 >> 2] == HEAP32[$3 + 36 >> 2]) {
   break label$1;
  }
  wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Body__GetContactList_28_29(HEAP32[$3 + 36 >> 2]), 
  HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
  while (1) {
   if (HEAP32[$3 + 32 >> 2]) {
    if (HEAP32[HEAP32[$3 + 32 >> 2] >> 2] == HEAP32[$3 + 40 >> 2]) {
     wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Contact__GetFixtureA_28_29(HEAP32[HEAP32[$3 + 32 >> 2] + 4 >> 2]), 
     HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
     wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Contact__GetFixtureB_28_29(HEAP32[HEAP32[$3 + 32 >> 2] + 4 >> 2]), 
     HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
     wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Contact__GetChildIndexA_28_29_20const(HEAP32[HEAP32[$3 + 32 >> 2] + 4 >> 2]), 
     HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
     wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Contact__GetChildIndexB_28_29_20const(HEAP32[HEAP32[$3 + 32 >> 2] + 4 >> 2]), 
     HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
     if (!(HEAP32[$3 + 28 >> 2] != HEAP32[$3 + 56 >> 2] | HEAP32[$3 + 24 >> 2] != HEAP32[$3 + 52 >> 2] | (HEAP32[$3 + 20 >> 2] != HEAP32[$3 + 48 >> 2] | HEAP32[$3 + 16 >> 2] != HEAP32[$3 + 44 >> 2]))) {
      break label$1;
     }
     if (!(HEAP32[$3 + 28 >> 2] != HEAP32[$3 + 52 >> 2] | HEAP32[$3 + 24 >> 2] != HEAP32[$3 + 56 >> 2] | (HEAP32[$3 + 20 >> 2] != HEAP32[$3 + 44 >> 2] | HEAP32[$3 + 16 >> 2] != HEAP32[$3 + 48 >> 2]))) {
      break label$1;
     }
    }
    HEAP32[$3 + 32 >> 2] = HEAP32[HEAP32[$3 + 32 >> 2] + 12 >> 2];
    continue;
   }
   break;
  }
  if (!(b2Body__ShouldCollide_28b2Body_20const__29_20const(HEAP32[$3 + 36 >> 2], HEAP32[$3 + 40 >> 2]) & 1)) {
   break label$1;
  }
  label$7: {
   if (!HEAP32[$0 + 68 >> 2]) {
    break label$7;
   }
   $1 = HEAP32[$0 + 68 >> 2];
   if (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, HEAP32[$3 + 56 >> 2], HEAP32[$3 + 52 >> 2]) & 1) {
    break label$7;
   }
   break label$1;
  }
  wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Contact__Create_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29(HEAP32[$3 + 56 >> 2], HEAP32[$3 + 48 >> 2], HEAP32[$3 + 52 >> 2], HEAP32[$3 + 44 >> 2], HEAP32[$0 + 76 >> 2]), 
  HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
  if (!HEAP32[$3 + 12 >> 2]) {
   break label$1;
  }
  wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Contact__GetFixtureA_28_29(HEAP32[$3 + 12 >> 2]), 
  HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
  wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Contact__GetFixtureB_28_29(HEAP32[$3 + 12 >> 2]), 
  HEAP32[wasm2js_i32$0 + 52 >> 2] = wasm2js_i32$1;
  wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Contact__GetChildIndexA_28_29_20const(HEAP32[$3 + 12 >> 2]), 
  HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
  wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Contact__GetChildIndexB_28_29_20const(HEAP32[$3 + 12 >> 2]), 
  HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
  wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$3 + 56 >> 2]), 
  HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
  wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$3 + 52 >> 2]), 
  HEAP32[wasm2js_i32$0 + 36 >> 2] = wasm2js_i32$1;
  HEAP32[HEAP32[$3 + 12 >> 2] + 8 >> 2] = 0;
  HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2] = HEAP32[$0 + 60 >> 2];
  if (HEAP32[$0 + 60 >> 2]) {
   HEAP32[HEAP32[$0 + 60 >> 2] + 8 >> 2] = HEAP32[$3 + 12 >> 2];
  }
  HEAP32[$0 + 60 >> 2] = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 12 >> 2] + 20 >> 2] = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 12 >> 2] + 16 >> 2] = HEAP32[$3 + 36 >> 2];
  HEAP32[HEAP32[$3 + 12 >> 2] + 24 >> 2] = 0;
  HEAP32[HEAP32[$3 + 12 >> 2] + 28 >> 2] = HEAP32[HEAP32[$3 + 40 >> 2] + 112 >> 2];
  if (HEAP32[HEAP32[$3 + 40 >> 2] + 112 >> 2]) {
   HEAP32[HEAP32[HEAP32[$3 + 40 >> 2] + 112 >> 2] + 8 >> 2] = HEAP32[$3 + 12 >> 2] + 16;
  }
  HEAP32[HEAP32[$3 + 40 >> 2] + 112 >> 2] = HEAP32[$3 + 12 >> 2] + 16;
  HEAP32[HEAP32[$3 + 12 >> 2] + 36 >> 2] = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 12 >> 2] + 32 >> 2] = HEAP32[$3 + 40 >> 2];
  HEAP32[HEAP32[$3 + 12 >> 2] + 40 >> 2] = 0;
  HEAP32[HEAP32[$3 + 12 >> 2] + 44 >> 2] = HEAP32[HEAP32[$3 + 36 >> 2] + 112 >> 2];
  if (HEAP32[HEAP32[$3 + 36 >> 2] + 112 >> 2]) {
   HEAP32[HEAP32[HEAP32[$3 + 36 >> 2] + 112 >> 2] + 8 >> 2] = HEAP32[$3 + 12 >> 2] + 32;
  }
  HEAP32[HEAP32[$3 + 36 >> 2] + 112 >> 2] = HEAP32[$3 + 12 >> 2] + 32;
  label$11: {
   if (b2Fixture__IsSensor_28_29_20const(HEAP32[$3 + 56 >> 2]) & 1) {
    break label$11;
   }
   if (b2Fixture__IsSensor_28_29_20const(HEAP32[$3 + 52 >> 2]) & 1) {
    break label$11;
   }
   b2Body__SetAwake_28bool_29(HEAP32[$3 + 40 >> 2], 1);
   b2Body__SetAwake_28bool_29(HEAP32[$3 + 36 >> 2], 1);
  }
  HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 64 >> 2] + 1;
 }
 __stack_pointer = $3 + 80 | 0;
}

function void_20b2DynamicTree__RayCast_b2WorldRayCastWrapper__28b2WorldRayCastWrapper__2c_20b2RayCastInput_20const__29_20const($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0), $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f32$0 = Math_fround(0);
 $3 = __stack_pointer - 1264 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 1260 >> 2] = $0;
 HEAP32[$3 + 1256 >> 2] = $1;
 HEAP32[$3 + 1252 >> 2] = $2;
 $5 = HEAP32[$3 + 1260 >> 2];
 $2 = HEAP32[$3 + 1252 >> 2];
 $1 = HEAP32[$2 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 1240 >> 2] = $1;
 HEAP32[$3 + 1244 >> 2] = $0;
 $2 = HEAP32[$3 + 1252 >> 2];
 $0 = HEAP32[$2 + 8 >> 2];
 $1 = HEAP32[$2 + 12 >> 2];
 HEAP32[$3 + 1232 >> 2] = $0;
 HEAP32[$3 + 1236 >> 2] = $1;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 1224 | 0, $3 + 1232 | 0, $3 + 1240 | 0);
 if (!(b2Vec2__LengthSquared_28_29_20const($3 + 1224 | 0) > Math_fround(0))) {
  __assert_fail(7957, 7266, 230, 1955);
  wasm2js_trap();
 }
 b2Vec2__Normalize_28_29($3 + 1224 | 0);
 b2Cross_28float_2c_20b2Vec2_20const__29($3 + 1216 | 0, Math_fround(1), $3 + 1224 | 0);
 b2Abs_28b2Vec2_20const__29($3 + 1208 | 0, $3 + 1216 | 0);
 HEAPF32[$3 + 1204 >> 2] = HEAPF32[HEAP32[$3 + 1252 >> 2] + 16 >> 2];
 b2AABB__b2AABB_28_29($3 + 1188 | 0);
 $4 = HEAPF32[$3 + 1204 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 1164 | 0, $3 + 1232 | 0, $3 + 1240 | 0);
 operator__28float_2c_20b2Vec2_20const__29($3 + 1172 | 0, $4, $3 + 1164 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 1180 | 0, $3 + 1240 | 0, $3 + 1172 | 0);
 b2Min_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 1156 | 0, $3 + 1240 | 0, $3 + 1180 | 0);
 $0 = HEAP32[$3 + 1160 >> 2];
 $1 = HEAP32[$3 + 1156 >> 2];
 $2 = $1;
 $1 = $3 + 1188 | 0;
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $0;
 b2Max_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 1148 | 0, $3 + 1240 | 0, $3 + 1180 | 0);
 $1 = HEAP32[$3 + 1152 >> 2];
 $0 = HEAP32[$3 + 1148 >> 2];
 $2 = $0;
 $0 = $3 + 1188 | 0;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $1;
 b2GrowableStack_int_2c_20256___b2GrowableStack_28_29($3 + 112 | 0);
 b2GrowableStack_int_2c_20256___Push_28int_20const__29($3 + 112 | 0, $5);
 label$2: {
  while (1) {
   if ((b2GrowableStack_int_2c_20256___GetCount_28_29($3 + 112 | 0) | 0) > 0) {
    wasm2js_i32$0 = $3, wasm2js_i32$1 = b2GrowableStack_int_2c_20256___Pop_28_29($3 + 112 | 0), 
    HEAP32[wasm2js_i32$0 + 108 >> 2] = wasm2js_i32$1;
    if (HEAP32[$3 + 108 >> 2] == -1) {
     continue;
    }
    HEAP32[$3 + 104 >> 2] = HEAP32[$5 + 4 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 40);
    if (!(b2TestOverlap_28b2AABB_20const__2c_20b2AABB_20const__29(HEAP32[$3 + 104 >> 2], $3 + 1188 | 0) & 1)) {
     continue;
    }
    b2AABB__GetCenter_28_29_20const($3 + 96 | 0, HEAP32[$3 + 104 >> 2]);
    b2AABB__GetExtents_28_29_20const($3 + 88 | 0, HEAP32[$3 + 104 >> 2]);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 76 | 0, $3 + 1240 | 0, $3 + 96 | 0);
    wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(float_20b2Abs_float__28float_29(b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 1216 | 0, $3 + 76 | 0)) - b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 1208 | 0, $3 + 88 | 0)), 
    HEAPF32[wasm2js_i32$0 + 84 >> 2] = wasm2js_f32$0;
    if (HEAPF32[$3 + 84 >> 2] > Math_fround(0)) {
     continue;
    }
    label$5: {
     if (b2TreeNode__IsLeaf_28_29_20const(HEAP32[$3 + 104 >> 2]) & 1) {
      b2RayCastInput__b2RayCastInput_28_29($3 + 56 | 0);
      $2 = HEAP32[$3 + 1252 >> 2];
      $1 = HEAP32[$2 >> 2];
      $0 = HEAP32[$2 + 4 >> 2];
      $2 = $1;
      $1 = $3 + 56 | 0;
      HEAP32[$1 >> 2] = $2;
      HEAP32[$1 + 4 >> 2] = $0;
      $2 = HEAP32[$3 + 1252 >> 2];
      $0 = HEAP32[$2 + 8 >> 2];
      $1 = HEAP32[$2 + 12 >> 2];
      $2 = $0;
      $0 = $3 + 56 | 0;
      HEAP32[$0 + 8 >> 2] = $2;
      HEAP32[$0 + 12 >> 2] = $1;
      HEAPF32[$3 + 72 >> 2] = HEAPF32[$3 + 1204 >> 2];
      wasm2js_i32$0 = $3, wasm2js_f32$0 = b2WorldRayCastWrapper__RayCastCallback_28b2RayCastInput_20const__2c_20int_29(HEAP32[$3 + 1256 >> 2], $3 + 56 | 0, HEAP32[$3 + 108 >> 2]), 
      HEAPF32[wasm2js_i32$0 + 52 >> 2] = wasm2js_f32$0;
      if (HEAPF32[$3 + 52 >> 2] == Math_fround(0)) {
       HEAP32[$3 + 48 >> 2] = 1;
       break label$2;
      }
      if (HEAPF32[$3 + 52 >> 2] > Math_fround(0)) {
       HEAPF32[$3 + 1204 >> 2] = HEAPF32[$3 + 52 >> 2];
       $4 = HEAPF32[$3 + 1204 >> 2];
       operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 24 | 0, $3 + 1232 | 0, $3 + 1240 | 0);
       operator__28float_2c_20b2Vec2_20const__29($3 + 32 | 0, $4, $3 + 24 | 0);
       operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 40 | 0, $3 + 1240 | 0, $3 + 32 | 0);
       b2Min_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 16 | 0, $3 + 1240 | 0, $3 + 40 | 0);
       $0 = HEAP32[$3 + 20 >> 2];
       $1 = HEAP32[$3 + 16 >> 2];
       $2 = $1;
       $1 = $3 + 1188 | 0;
       HEAP32[$1 >> 2] = $2;
       HEAP32[$1 + 4 >> 2] = $0;
       b2Max_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 8 | 0, $3 + 1240 | 0, $3 + 40 | 0);
       $1 = HEAP32[$3 + 12 >> 2];
       $0 = HEAP32[$3 + 8 >> 2];
       $2 = $0;
       $0 = $3 + 1188 | 0;
       HEAP32[$0 + 8 >> 2] = $2;
       HEAP32[$0 + 12 >> 2] = $1;
      }
      break label$5;
     }
     b2GrowableStack_int_2c_20256___Push_28int_20const__29($3 + 112 | 0, HEAP32[$3 + 104 >> 2] + 24 | 0);
     b2GrowableStack_int_2c_20256___Push_28int_20const__29($3 + 112 | 0, HEAP32[$3 + 104 >> 2] + 28 | 0);
    }
    continue;
   }
   break;
  }
  HEAP32[$3 + 48 >> 2] = 0;
 }
 b2GrowableStack_int_2c_20256____b2GrowableStack_28_29($3 + 112 | 0);
 __stack_pointer = $3 + 1264 | 0;
}

function b2WheelJoint__SolveVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 176 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 172 >> 2] = $0;
 HEAP32[$2 + 168 >> 2] = $1;
 $3 = HEAP32[$2 + 172 >> 2];
 HEAPF32[$2 + 164 >> 2] = HEAPF32[$3 + 156 >> 2];
 HEAPF32[$2 + 160 >> 2] = HEAPF32[$3 + 160 >> 2];
 HEAPF32[$2 + 156 >> 2] = HEAPF32[$3 + 164 >> 2];
 HEAPF32[$2 + 152 >> 2] = HEAPF32[$3 + 168 >> 2];
 $4 = HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 144 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $1;
 HEAPF32[$2 + 140 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 136 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 128 >> 2] = $1;
 HEAP32[$2 + 132 >> 2] = $0;
 HEAPF32[$2 + 124 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 136 >> 2], 12) | 0) + 8 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 112 | 0, $2 + 128 | 0, $2 + 144 | 0);
 $5 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 172 | 0, $2 + 112 | 0);
 HEAPF32[$2 + 120 >> 2] = Math_fround(Math_fround(-HEAPF32[$3 + 188 >> 2]) * HEAPF32[$2 + 140 >> 2]) + Math_fround(Math_fround(HEAPF32[$3 + 192 >> 2] * HEAPF32[$2 + 124 >> 2]) + $5);
 HEAPF32[$2 + 108 >> 2] = Math_fround(-HEAPF32[$3 + 212 >> 2]) * Math_fround(Math_fround(HEAPF32[$3 + 220 >> 2] * HEAPF32[$3 + 116 >> 2]) + Math_fround(HEAPF32[$2 + 120 >> 2] + HEAPF32[$3 + 216 >> 2]));
 HEAPF32[$3 + 116 >> 2] = HEAPF32[$3 + 116 >> 2] + HEAPF32[$2 + 108 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 100 | 0, HEAPF32[$2 + 108 >> 2], $3 + 172 | 0);
 HEAPF32[$2 + 96 >> 2] = HEAPF32[$2 + 108 >> 2] * HEAPF32[$3 + 188 >> 2];
 HEAPF32[$2 + 92 >> 2] = HEAPF32[$2 + 108 >> 2] * HEAPF32[$3 + 192 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 84 | 0, HEAPF32[$2 + 164 >> 2], $2 + 100 | 0);
 b2Vec2__operator___28b2Vec2_20const__29_1($2 + 144 | 0, $2 + 84 | 0);
 HEAPF32[$2 + 140 >> 2] = Math_fround(Math_fround(-HEAPF32[$2 + 156 >> 2]) * HEAPF32[$2 + 96 >> 2]) + HEAPF32[$2 + 140 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 76 | 0, HEAPF32[$2 + 160 >> 2], $2 + 100 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 128 | 0, $2 + 76 | 0);
 HEAPF32[$2 + 124 >> 2] = Math_fround(HEAPF32[$2 + 152 >> 2] * HEAPF32[$2 + 92 >> 2]) + HEAPF32[$2 + 124 >> 2];
 HEAPF32[$2 + 72 >> 2] = Math_fround(HEAPF32[$2 + 124 >> 2] - HEAPF32[$2 + 140 >> 2]) - HEAPF32[$3 + 124 >> 2];
 HEAPF32[$2 + 68 >> 2] = Math_fround(-HEAPF32[$3 + 208 >> 2]) * HEAPF32[$2 + 72 >> 2];
 HEAPF32[$2 + 64 >> 2] = HEAPF32[$3 + 112 >> 2];
 HEAPF32[$2 + 60 >> 2] = HEAPF32[HEAP32[$2 + 168 >> 2] >> 2] * HEAPF32[$3 + 120 >> 2];
 wasm2js_i32$0 = $3, wasm2js_f32$0 = float_20b2Clamp_float__28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[$3 + 112 >> 2] + HEAPF32[$2 + 68 >> 2]), Math_fround(-HEAPF32[$2 + 60 >> 2]), HEAPF32[$2 + 60 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 112 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 68 >> 2] = HEAPF32[$3 + 112 >> 2] - HEAPF32[$2 + 64 >> 2];
 HEAPF32[$2 + 140 >> 2] = Math_fround(Math_fround(-HEAPF32[$2 + 156 >> 2]) * HEAPF32[$2 + 68 >> 2]) + HEAPF32[$2 + 140 >> 2];
 HEAPF32[$2 + 124 >> 2] = Math_fround(HEAPF32[$2 + 152 >> 2] * HEAPF32[$2 + 68 >> 2]) + HEAPF32[$2 + 124 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 48 | 0, $2 + 128 | 0, $2 + 144 | 0);
 $5 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 180 | 0, $2 + 48 | 0);
 HEAPF32[$2 + 56 >> 2] = Math_fround(Math_fround(-HEAPF32[$3 + 196 >> 2]) * HEAPF32[$2 + 140 >> 2]) + Math_fround(Math_fround(HEAPF32[$3 + 200 >> 2] * HEAPF32[$2 + 124 >> 2]) + $5);
 HEAPF32[$2 + 44 >> 2] = Math_fround(-HEAPF32[$3 + 204 >> 2]) * HEAPF32[$2 + 56 >> 2];
 HEAPF32[$3 + 108 >> 2] = HEAPF32[$3 + 108 >> 2] + HEAPF32[$2 + 44 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 36 | 0, HEAPF32[$2 + 44 >> 2], $3 + 180 | 0);
 HEAPF32[$2 + 32 >> 2] = HEAPF32[$2 + 44 >> 2] * HEAPF32[$3 + 196 >> 2];
 HEAPF32[$2 + 28 >> 2] = HEAPF32[$2 + 44 >> 2] * HEAPF32[$3 + 200 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 20 | 0, HEAPF32[$2 + 164 >> 2], $2 + 36 | 0);
 b2Vec2__operator___28b2Vec2_20const__29_1($2 + 144 | 0, $2 + 20 | 0);
 HEAPF32[$2 + 140 >> 2] = Math_fround(Math_fround(-HEAPF32[$2 + 156 >> 2]) * HEAPF32[$2 + 32 >> 2]) + HEAPF32[$2 + 140 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 12 | 0, HEAPF32[$2 + 160 >> 2], $2 + 36 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 128 | 0, $2 + 12 | 0);
 HEAPF32[$2 + 124 >> 2] = Math_fround(HEAPF32[$2 + 152 >> 2] * HEAPF32[$2 + 28 >> 2]) + HEAPF32[$2 + 124 >> 2];
 $1 = HEAP32[$2 + 148 >> 2];
 $0 = HEAP32[$2 + 144 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 140 >> 2];
 $0 = HEAP32[$2 + 132 >> 2];
 $1 = HEAP32[$2 + 128 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 136 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 136 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 124 >> 2];
 __stack_pointer = $2 + 176 | 0;
}

function void_20std____2____tree_balance_after_insert_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____2c_20std____2____tree_node_base_void____29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[HEAP32[$2 + 8 >> 2] + 12 | 0] = HEAP32[$2 + 8 >> 2] == HEAP32[$2 + 12 >> 2];
 while (1) {
  $0 = 0;
  if (HEAP32[$2 + 8 >> 2] != HEAP32[$2 + 12 >> 2]) {
   $0 = HEAPU8[std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 8 >> 2]) + 12 | 0] ^ -1;
  }
  label$3: {
   if (!($0 & 1)) {
    break label$3;
   }
   label$4: {
    if (bool_20std____2____tree_is_left_child_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 8 >> 2])) & 1) {
     wasm2js_i32$0 = $2, wasm2js_i32$1 = HEAP32[std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 8 >> 2])) + 4 >> 2], 
     HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
     label$6: {
      if (!(!HEAP32[$2 + 4 >> 2] | HEAP8[HEAP32[$2 + 4 >> 2] + 12 | 0] & 1)) {
       wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 8 >> 2]), 
       HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
       HEAP8[HEAP32[$2 + 8 >> 2] + 12 | 0] = 1;
       wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 8 >> 2]), 
       HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
       HEAP8[HEAP32[$2 + 8 >> 2] + 12 | 0] = HEAP32[$2 + 8 >> 2] == HEAP32[$2 + 12 >> 2];
       HEAP8[HEAP32[$2 + 4 >> 2] + 12 | 0] = 1;
       break label$6;
      }
      if (!(bool_20std____2____tree_is_left_child_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$2 + 8 >> 2]) & 1)) {
       wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 8 >> 2]), 
       HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
       void_20std____2____tree_left_rotate_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$2 + 8 >> 2]);
      }
      wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 8 >> 2]), 
      HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
      HEAP8[HEAP32[$2 + 8 >> 2] + 12 | 0] = 1;
      wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 8 >> 2]), 
      HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
      HEAP8[HEAP32[$2 + 8 >> 2] + 12 | 0] = 0;
      void_20std____2____tree_right_rotate_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$2 + 8 >> 2]);
      break label$3;
     }
     break label$4;
    }
    wasm2js_i32$0 = $2, wasm2js_i32$1 = HEAP32[HEAP32[std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 8 >> 2]) + 8 >> 2] >> 2], 
    HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    label$9: {
     if (!(!HEAP32[$2 >> 2] | HEAP8[HEAP32[$2 >> 2] + 12 | 0] & 1)) {
      wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 8 >> 2]), 
      HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
      HEAP8[HEAP32[$2 + 8 >> 2] + 12 | 0] = 1;
      wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 8 >> 2]), 
      HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
      HEAP8[HEAP32[$2 + 8 >> 2] + 12 | 0] = HEAP32[$2 + 8 >> 2] == HEAP32[$2 + 12 >> 2];
      HEAP8[HEAP32[$2 >> 2] + 12 | 0] = 1;
      break label$9;
     }
     if (bool_20std____2____tree_is_left_child_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$2 + 8 >> 2]) & 1) {
      wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 8 >> 2]), 
      HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
      void_20std____2____tree_right_rotate_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$2 + 8 >> 2]);
     }
     wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 8 >> 2]), 
     HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
     HEAP8[HEAP32[$2 + 8 >> 2] + 12 | 0] = 1;
     wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 8 >> 2]), 
     HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
     HEAP8[HEAP32[$2 + 8 >> 2] + 12 | 0] = 0;
     void_20std____2____tree_left_rotate_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$2 + 8 >> 2]);
     break label$3;
    }
   }
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 16 | 0;
}

function b2GearJoint__SolveVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 128 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 124 >> 2] = $0;
 HEAP32[$2 + 120 >> 2] = $1;
 $3 = HEAP32[$2 + 124 >> 2];
 $4 = HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 160 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 112 >> 2] = $0;
 HEAP32[$2 + 116 >> 2] = $1;
 HEAPF32[$2 + 108 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 160 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 164 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 96 >> 2] = $1;
 HEAP32[$2 + 100 >> 2] = $0;
 HEAPF32[$2 + 92 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 164 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 168 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 80 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 HEAPF32[$2 + 76 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 168 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 172 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 64 >> 2] = $1;
 HEAP32[$2 + 68 >> 2] = $0;
 HEAPF32[$2 + 60 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 172 >> 2], 12) | 0) + 8 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 48 | 0, $2 + 112 | 0, $2 + 80 | 0);
 $5 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 240 | 0, $2 + 48 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 40 | 0, $2 + 96 | 0, $2 - -64 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround($5 + b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 248 | 0, $2 + 40 | 0)), 
 HEAPF32[wasm2js_i32$0 + 56 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 56 >> 2] = HEAPF32[$2 + 56 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$3 + 256 >> 2] * HEAPF32[$2 + 108 >> 2]) - Math_fround(HEAPF32[$3 + 264 >> 2] * HEAPF32[$2 + 76 >> 2])) + Math_fround(Math_fround(HEAPF32[$3 + 260 >> 2] * HEAPF32[$2 + 92 >> 2]) - Math_fround(HEAPF32[$3 + 268 >> 2] * HEAPF32[$2 + 60 >> 2])));
 HEAPF32[$2 + 36 >> 2] = Math_fround(-HEAPF32[$3 + 272 >> 2]) * HEAPF32[$2 + 56 >> 2];
 HEAPF32[$3 + 156 >> 2] = HEAPF32[$3 + 156 >> 2] + HEAPF32[$2 + 36 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 28 | 0, Math_fround(HEAPF32[$3 + 208 >> 2] * HEAPF32[$2 + 36 >> 2]), $3 + 240 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 112 | 0, $2 + 28 | 0);
 HEAPF32[$2 + 108 >> 2] = Math_fround(Math_fround(HEAPF32[$3 + 224 >> 2] * HEAPF32[$2 + 36 >> 2]) * HEAPF32[$3 + 256 >> 2]) + HEAPF32[$2 + 108 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 20 | 0, Math_fround(HEAPF32[$3 + 212 >> 2] * HEAPF32[$2 + 36 >> 2]), $3 + 248 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 96 | 0, $2 + 20 | 0);
 HEAPF32[$2 + 92 >> 2] = Math_fround(Math_fround(HEAPF32[$3 + 228 >> 2] * HEAPF32[$2 + 36 >> 2]) * HEAPF32[$3 + 260 >> 2]) + HEAPF32[$2 + 92 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 12 | 0, Math_fround(HEAPF32[$3 + 216 >> 2] * HEAPF32[$2 + 36 >> 2]), $3 + 240 | 0);
 b2Vec2__operator___28b2Vec2_20const__29_1($2 + 80 | 0, $2 + 12 | 0);
 HEAPF32[$2 + 76 >> 2] = Math_fround(Math_fround(-Math_fround(HEAPF32[$3 + 232 >> 2] * HEAPF32[$2 + 36 >> 2])) * HEAPF32[$3 + 264 >> 2]) + HEAPF32[$2 + 76 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 4 | 0, Math_fround(HEAPF32[$3 + 220 >> 2] * HEAPF32[$2 + 36 >> 2]), $3 + 248 | 0);
 b2Vec2__operator___28b2Vec2_20const__29_1($2 - -64 | 0, $2 + 4 | 0);
 HEAPF32[$2 + 60 >> 2] = Math_fround(Math_fround(-Math_fround(HEAPF32[$3 + 236 >> 2] * HEAPF32[$2 + 36 >> 2])) * HEAPF32[$3 + 268 >> 2]) + HEAPF32[$2 + 60 >> 2];
 $1 = HEAP32[$2 + 116 >> 2];
 $0 = HEAP32[$2 + 112 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 160 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 160 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 108 >> 2];
 $0 = HEAP32[$2 + 100 >> 2];
 $1 = HEAP32[$2 + 96 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 164 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 164 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 92 >> 2];
 $1 = HEAP32[$2 + 84 >> 2];
 $0 = HEAP32[$2 + 80 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 168 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 168 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 76 >> 2];
 $0 = HEAP32[$2 + 68 >> 2];
 $1 = HEAP32[$2 + 64 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 172 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 172 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 60 >> 2];
 __stack_pointer = $2 + 128 | 0;
}

function b2MotorJoint__SolveVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 192 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 188 >> 2] = $0;
 HEAP32[$2 + 184 >> 2] = $1;
 $3 = HEAP32[$2 + 188 >> 2];
 $1 = HEAP32[HEAP32[$2 + 184 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 104 >> 2], 12) | 0;
 $0 = HEAP32[$1 >> 2];
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 176 >> 2] = $0;
 HEAP32[$2 + 180 >> 2] = $4;
 HEAPF32[$2 + 172 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 184 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 104 >> 2], 12) | 0) + 8 >> 2];
 $1 = HEAP32[HEAP32[$2 + 184 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0;
 $4 = HEAP32[$1 >> 2];
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 160 >> 2] = $4;
 HEAP32[$2 + 164 >> 2] = $0;
 HEAPF32[$2 + 156 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 184 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0) + 8 >> 2];
 HEAPF32[$2 + 152 >> 2] = HEAPF32[$3 + 156 >> 2];
 HEAPF32[$2 + 148 >> 2] = HEAPF32[$3 + 160 >> 2];
 HEAPF32[$2 + 144 >> 2] = HEAPF32[$3 + 164 >> 2];
 HEAPF32[$2 + 140 >> 2] = HEAPF32[$3 + 168 >> 2];
 HEAPF32[$2 + 136 >> 2] = HEAPF32[HEAP32[$2 + 184 >> 2] >> 2];
 HEAPF32[$2 + 132 >> 2] = HEAPF32[HEAP32[$2 + 184 >> 2] + 4 >> 2];
 HEAPF32[$2 + 128 >> 2] = Math_fround(Math_fround(HEAPF32[$2 + 132 >> 2] * HEAPF32[$3 + 100 >> 2]) * HEAPF32[$3 + 152 >> 2]) + Math_fround(HEAPF32[$2 + 156 >> 2] - HEAPF32[$2 + 172 >> 2]);
 HEAPF32[$2 + 124 >> 2] = Math_fround(-HEAPF32[$3 + 188 >> 2]) * HEAPF32[$2 + 128 >> 2];
 HEAPF32[$2 + 120 >> 2] = HEAPF32[$3 + 88 >> 2];
 HEAPF32[$2 + 116 >> 2] = HEAPF32[$2 + 136 >> 2] * HEAPF32[$3 + 96 >> 2];
 wasm2js_i32$0 = $3, wasm2js_f32$0 = float_20b2Clamp_float__28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[$3 + 88 >> 2] + HEAPF32[$2 + 124 >> 2]), Math_fround(-HEAPF32[$2 + 116 >> 2]), HEAPF32[$2 + 116 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 88 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 124 >> 2] = HEAPF32[$3 + 88 >> 2] - HEAPF32[$2 + 120 >> 2];
 HEAPF32[$2 + 172 >> 2] = Math_fround(Math_fround(-HEAPF32[$2 + 144 >> 2]) * HEAPF32[$2 + 124 >> 2]) + HEAPF32[$2 + 172 >> 2];
 HEAPF32[$2 + 156 >> 2] = Math_fround(HEAPF32[$2 + 140 >> 2] * HEAPF32[$2 + 124 >> 2]) + HEAPF32[$2 + 156 >> 2];
 b2Cross_28float_2c_20b2Vec2_20const__29($2 + 76 | 0, HEAPF32[$2 + 156 >> 2], $3 + 120 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 84 | 0, $2 + 160 | 0, $2 + 76 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 92 | 0, $2 + 84 | 0, $2 + 176 | 0);
 b2Cross_28float_2c_20b2Vec2_20const__29($2 + 68 | 0, HEAPF32[$2 + 172 >> 2], $3 + 112 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 100 | 0, $2 + 92 | 0, $2 + 68 | 0);
 operator__28float_2c_20b2Vec2_20const__29($2 + 60 | 0, Math_fround(HEAPF32[$2 + 132 >> 2] * HEAPF32[$3 + 100 >> 2]), $3 + 144 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 108 | 0, $2 + 100 | 0, $2 + 60 | 0);
 b2Mul_28b2Mat22_20const__2c_20b2Vec2_20const__29($2 + 40 | 0, $3 + 172 | 0, $2 + 108 | 0);
 b2Vec2__operator__28_29_20const($2 + 48 | 0, $2 + 40 | 0);
 $4 = HEAP32[$3 + 84 >> 2];
 $0 = HEAP32[$3 + 80 >> 2];
 HEAP32[$2 + 32 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $4;
 b2Vec2__operator___28b2Vec2_20const__29($3 + 80 | 0, $2 + 48 | 0);
 HEAPF32[$2 + 28 >> 2] = HEAPF32[$2 + 136 >> 2] * HEAPF32[$3 + 92 >> 2];
 if (b2Vec2__LengthSquared_28_29_20const($3 + 80 | 0) > Math_fround(HEAPF32[$2 + 28 >> 2] * HEAPF32[$2 + 28 >> 2])) {
  b2Vec2__Normalize_28_29($3 + 80 | 0);
  b2Vec2__operator___28float_29($3 + 80 | 0, HEAPF32[$2 + 28 >> 2]);
 }
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 20 | 0, $3 + 80 | 0, $2 + 32 | 0);
 $0 = HEAP32[$2 + 24 >> 2];
 $4 = HEAP32[$2 + 20 >> 2];
 HEAP32[$2 + 48 >> 2] = $4;
 HEAP32[$2 + 52 >> 2] = $0;
 operator__28float_2c_20b2Vec2_20const__29($2 + 12 | 0, HEAPF32[$2 + 152 >> 2], $2 + 48 | 0);
 b2Vec2__operator___28b2Vec2_20const__29_1($2 + 176 | 0, $2 + 12 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$2 + 144 >> 2]) * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 112 | 0, $2 + 48 | 0)) + HEAPF32[$2 + 172 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 172 >> 2] = wasm2js_f32$0;
 operator__28float_2c_20b2Vec2_20const__29($2 + 4 | 0, HEAPF32[$2 + 148 >> 2], $2 + 48 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 160 | 0, $2 + 4 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$2 + 140 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 120 | 0, $2 + 48 | 0)) + HEAPF32[$2 + 156 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 156 >> 2] = wasm2js_f32$0;
 $4 = HEAP32[$2 + 180 >> 2];
 $0 = HEAP32[$2 + 176 >> 2];
 $1 = $0;
 $0 = HEAP32[HEAP32[$2 + 184 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 104 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $4;
 HEAPF32[(HEAP32[HEAP32[$2 + 184 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 104 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 172 >> 2];
 $0 = HEAP32[$2 + 164 >> 2];
 $4 = HEAP32[$2 + 160 >> 2];
 $1 = $4;
 $4 = HEAP32[HEAP32[$2 + 184 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 184 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 156 >> 2];
 __stack_pointer = $2 + 192 | 0;
}

function b2Contact__Update_28b2ContactListener__29($0, $1) {
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 128 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 124 >> 2] = $0;
 HEAP32[$2 + 120 >> 2] = $1;
 $1 = HEAP32[$2 + 124 >> 2];
 $3 = HEAP32[$1 + 120 >> 2];
 $0 = HEAP32[$1 + 124 >> 2];
 HEAP32[$2 + 112 >> 2] = $3;
 HEAP32[$2 + 116 >> 2] = $0;
 $3 = HEAP32[$1 + 116 >> 2];
 $0 = HEAP32[$1 + 112 >> 2];
 HEAP32[$2 + 104 >> 2] = $0;
 HEAP32[$2 + 108 >> 2] = $3;
 $0 = HEAP32[$1 + 108 >> 2];
 $3 = HEAP32[$1 + 104 >> 2];
 HEAP32[$2 + 96 >> 2] = $3;
 HEAP32[$2 + 100 >> 2] = $0;
 $3 = HEAP32[$1 + 100 >> 2];
 $0 = HEAP32[$1 + 96 >> 2];
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 92 >> 2] = $3;
 $0 = HEAP32[$1 + 92 >> 2];
 $3 = HEAP32[$1 + 88 >> 2];
 HEAP32[$2 + 80 >> 2] = $3;
 HEAP32[$2 + 84 >> 2] = $0;
 $3 = HEAP32[$1 + 84 >> 2];
 $0 = HEAP32[$1 + 80 >> 2];
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 76 >> 2] = $3;
 $0 = HEAP32[$1 + 76 >> 2];
 $3 = HEAP32[$1 + 72 >> 2];
 HEAP32[$2 + 64 >> 2] = $3;
 HEAP32[$2 + 68 >> 2] = $0;
 $3 = HEAP32[$1 + 68 >> 2];
 $0 = HEAP32[$1 + 64 >> 2];
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 60 >> 2] = $3;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 4;
 HEAP8[$2 + 55 | 0] = 0;
 HEAP8[$2 + 54 | 0] = (HEAP32[$1 + 4 >> 2] & 2) == 2;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__IsSensor_28_29_20const(HEAP32[$1 + 48 >> 2]) & 1, 
 HEAP8[wasm2js_i32$0 + 53 | 0] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__IsSensor_28_29_20const(HEAP32[$1 + 52 >> 2]) & 1, 
 HEAP8[wasm2js_i32$0 + 52 | 0] = wasm2js_i32$1;
 $0 = 1;
 $0 = HEAP8[$2 + 53 | 0] & 1 ? $0 : HEAPU8[$2 + 52 | 0];
 HEAP8[$2 + 51 | 0] = $0 & 1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$1 + 48 >> 2]), 
 HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$1 + 52 >> 2]), 
 HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Body__GetTransform_28_29_20const(HEAP32[$2 + 44 >> 2]), 
 HEAP32[wasm2js_i32$0 + 36 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Body__GetTransform_28_29_20const(HEAP32[$2 + 40 >> 2]), 
 HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
 label$2: {
  if (HEAP8[$2 + 51 | 0] & 1) {
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetShape_28_29(HEAP32[$1 + 48 >> 2]), 
   HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetShape_28_29(HEAP32[$1 + 52 >> 2]), 
   HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2TestOverlap_28b2Shape_20const__2c_20int_2c_20b2Shape_20const__2c_20int_2c_20b2Transform_20const__2c_20b2Transform_20const__29(HEAP32[$2 + 28 >> 2], HEAP32[$1 + 56 >> 2], HEAP32[$2 + 24 >> 2], HEAP32[$1 + 60 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2]) & 1, 
   HEAP8[wasm2js_i32$0 + 55 | 0] = wasm2js_i32$1;
   HEAP32[$1 + 124 >> 2] = 0;
   break label$2;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1, $1 - -64 | 0, HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2]);
  HEAP8[$2 + 55 | 0] = HEAP32[$1 + 124 >> 2] > 0;
  HEAP32[$2 + 20 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 20 >> 2] < HEAP32[$1 + 124 >> 2]) {
    HEAP32[$2 + 16 >> 2] = ($1 - -64 | 0) + Math_imul(HEAP32[$2 + 20 >> 2], 20);
    HEAPF32[HEAP32[$2 + 16 >> 2] + 8 >> 2] = 0;
    HEAPF32[HEAP32[$2 + 16 >> 2] + 12 >> 2] = 0;
    HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 16 >> 2] + 16 >> 2];
    HEAP32[$2 + 8 >> 2] = 0;
    while (1) {
     if (HEAP32[$2 + 8 >> 2] < HEAP32[$2 + 116 >> 2]) {
      HEAP32[$2 + 4 >> 2] = ($2 + 56 | 0) + Math_imul(HEAP32[$2 + 8 >> 2], 20);
      if (HEAP32[HEAP32[$2 + 4 >> 2] + 16 >> 2] == HEAP32[$2 + 12 >> 2]) {
       HEAPF32[HEAP32[$2 + 16 >> 2] + 8 >> 2] = HEAPF32[HEAP32[$2 + 4 >> 2] + 8 >> 2];
       HEAPF32[HEAP32[$2 + 16 >> 2] + 12 >> 2] = HEAPF32[HEAP32[$2 + 4 >> 2] + 12 >> 2];
      } else {
       HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
       continue;
      }
     }
     break;
    }
    HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + 1;
    continue;
   }
   break;
  }
  if ((HEAP8[$2 + 55 | 0] & 1) != (HEAP8[$2 + 54 | 0] & 1)) {
   b2Body__SetAwake_28bool_29(HEAP32[$2 + 44 >> 2], 1);
   b2Body__SetAwake_28bool_29(HEAP32[$2 + 40 >> 2], 1);
  }
 }
 label$11: {
  if (HEAP8[$2 + 55 | 0] & 1) {
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 2;
   break label$11;
  }
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] & -3;
 }
 if (!(!HEAP32[$2 + 120 >> 2] | (!(HEAP8[$2 + 55 | 0] & 1) | HEAP8[$2 + 54 | 0] & 1))) {
  $0 = HEAP32[$2 + 120 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1);
 }
 if (!(!HEAP32[$2 + 120 >> 2] | (!(HEAP8[$2 + 54 | 0] & 1) | HEAP8[$2 + 55 | 0] & 1))) {
  $0 = HEAP32[$2 + 120 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1);
 }
 if (!(!HEAP32[$2 + 120 >> 2] | (!(HEAP8[$2 + 55 | 0] & 1) | HEAP8[$2 + 51 | 0] & 1))) {
  $0 = HEAP32[$2 + 120 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2 + 56 | 0);
 }
 __stack_pointer = $2 + 128 | 0;
}

function b2FrictionJoint__SolveVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 176 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 172 >> 2] = $0;
 HEAP32[$2 + 168 >> 2] = $1;
 $3 = HEAP32[$2 + 172 >> 2];
 $1 = HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 104 >> 2], 12) | 0;
 $0 = HEAP32[$1 >> 2];
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 160 >> 2] = $0;
 HEAP32[$2 + 164 >> 2] = $4;
 HEAPF32[$2 + 156 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 104 >> 2], 12) | 0) + 8 >> 2];
 $1 = HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0;
 $4 = HEAP32[$1 >> 2];
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 144 >> 2] = $4;
 HEAP32[$2 + 148 >> 2] = $0;
 HEAPF32[$2 + 140 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0) + 8 >> 2];
 HEAPF32[$2 + 136 >> 2] = HEAPF32[$3 + 144 >> 2];
 HEAPF32[$2 + 132 >> 2] = HEAPF32[$3 + 148 >> 2];
 HEAPF32[$2 + 128 >> 2] = HEAPF32[$3 + 152 >> 2];
 HEAPF32[$2 + 124 >> 2] = HEAPF32[$3 + 156 >> 2];
 HEAPF32[$2 + 120 >> 2] = HEAPF32[HEAP32[$2 + 168 >> 2] >> 2];
 HEAPF32[$2 + 116 >> 2] = HEAPF32[$2 + 140 >> 2] - HEAPF32[$2 + 156 >> 2];
 HEAPF32[$2 + 112 >> 2] = Math_fround(-HEAPF32[$3 + 176 >> 2]) * HEAPF32[$2 + 116 >> 2];
 HEAPF32[$2 + 108 >> 2] = HEAPF32[$3 + 92 >> 2];
 HEAPF32[$2 + 104 >> 2] = HEAPF32[$2 + 120 >> 2] * HEAPF32[$3 + 100 >> 2];
 wasm2js_i32$0 = $3, wasm2js_f32$0 = float_20b2Clamp_float__28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[$3 + 92 >> 2] + HEAPF32[$2 + 112 >> 2]), Math_fround(-HEAPF32[$2 + 104 >> 2]), HEAPF32[$2 + 104 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 92 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 112 >> 2] = HEAPF32[$3 + 92 >> 2] - HEAPF32[$2 + 108 >> 2];
 HEAPF32[$2 + 156 >> 2] = Math_fround(Math_fround(-HEAPF32[$2 + 128 >> 2]) * HEAPF32[$2 + 112 >> 2]) + HEAPF32[$2 + 156 >> 2];
 HEAPF32[$2 + 140 >> 2] = Math_fround(HEAPF32[$2 + 124 >> 2] * HEAPF32[$2 + 112 >> 2]) + HEAPF32[$2 + 140 >> 2];
 b2Cross_28float_2c_20b2Vec2_20const__29($2 + 72 | 0, HEAPF32[$2 + 140 >> 2], $3 + 120 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 80 | 0, $2 + 144 | 0, $2 + 72 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 88 | 0, $2 + 80 | 0, $2 + 160 | 0);
 b2Cross_28float_2c_20b2Vec2_20const__29($2 - -64 | 0, HEAPF32[$2 + 156 >> 2], $3 + 112 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 96 | 0, $2 + 88 | 0, $2 - -64 | 0);
 b2Mul_28b2Mat22_20const__2c_20b2Vec2_20const__29($2 + 48 | 0, $3 + 160 | 0, $2 + 96 | 0);
 b2Vec2__operator__28_29_20const($2 + 56 | 0, $2 + 48 | 0);
 $4 = HEAP32[$3 + 88 >> 2];
 $0 = HEAP32[$3 + 84 >> 2];
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 44 >> 2] = $4;
 b2Vec2__operator___28b2Vec2_20const__29($3 + 84 | 0, $2 + 56 | 0);
 HEAPF32[$2 + 36 >> 2] = HEAPF32[$2 + 120 >> 2] * HEAPF32[$3 + 96 >> 2];
 if (b2Vec2__LengthSquared_28_29_20const($3 + 84 | 0) > Math_fround(HEAPF32[$2 + 36 >> 2] * HEAPF32[$2 + 36 >> 2])) {
  b2Vec2__Normalize_28_29($3 + 84 | 0);
  b2Vec2__operator___28float_29($3 + 84 | 0, HEAPF32[$2 + 36 >> 2]);
 }
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 28 | 0, $3 + 84 | 0, $2 + 40 | 0);
 $0 = HEAP32[$2 + 32 >> 2];
 $4 = HEAP32[$2 + 28 >> 2];
 HEAP32[$2 + 56 >> 2] = $4;
 HEAP32[$2 + 60 >> 2] = $0;
 operator__28float_2c_20b2Vec2_20const__29($2 + 20 | 0, HEAPF32[$2 + 136 >> 2], $2 + 56 | 0);
 b2Vec2__operator___28b2Vec2_20const__29_1($2 + 160 | 0, $2 + 20 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$2 + 128 >> 2]) * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 112 | 0, $2 + 56 | 0)) + HEAPF32[$2 + 156 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 156 >> 2] = wasm2js_f32$0;
 operator__28float_2c_20b2Vec2_20const__29($2 + 12 | 0, HEAPF32[$2 + 132 >> 2], $2 + 56 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 144 | 0, $2 + 12 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$2 + 124 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 120 | 0, $2 + 56 | 0)) + HEAPF32[$2 + 140 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 140 >> 2] = wasm2js_f32$0;
 $4 = HEAP32[$2 + 164 >> 2];
 $0 = HEAP32[$2 + 160 >> 2];
 $1 = $0;
 $0 = HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 104 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $4;
 HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 104 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 156 >> 2];
 $0 = HEAP32[$2 + 148 >> 2];
 $4 = HEAP32[$2 + 144 >> 2];
 $1 = $4;
 $4 = HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 140 >> 2];
 __stack_pointer = $2 + 176 | 0;
}

function b2MouseJoint__InitVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 144 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 140 >> 2] = $0;
 HEAP32[$2 + 136 >> 2] = $1;
 $1 = HEAP32[$2 + 140 >> 2];
 HEAP32[$1 + 116 >> 2] = HEAP32[HEAP32[$1 + 52 >> 2] + 8 >> 2];
 $4 = HEAP32[$1 + 52 >> 2];
 $0 = HEAP32[$4 + 28 >> 2];
 $3 = HEAP32[$4 + 32 >> 2];
 HEAP32[$1 + 128 >> 2] = $0;
 HEAP32[$1 + 132 >> 2] = $3;
 HEAPF32[$1 + 136 >> 2] = HEAPF32[HEAP32[$1 + 52 >> 2] + 120 >> 2];
 HEAPF32[$1 + 140 >> 2] = HEAPF32[HEAP32[$1 + 52 >> 2] + 128 >> 2];
 $4 = HEAP32[HEAP32[$2 + 136 >> 2] + 24 >> 2] + Math_imul(HEAP32[$1 + 116 >> 2], 12) | 0;
 $3 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 128 >> 2] = $3;
 HEAP32[$2 + 132 >> 2] = $0;
 HEAPF32[$2 + 124 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 136 >> 2] + 24 >> 2] + Math_imul(HEAP32[$1 + 116 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 136 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 116 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 112 >> 2] = $0;
 HEAP32[$2 + 116 >> 2] = $3;
 HEAPF32[$2 + 108 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 136 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 116 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($2 + 100 | 0, HEAPF32[$2 + 124 >> 2]);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Body__GetMass_28_29_20const(HEAP32[$1 + 52 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 96 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 92 >> 2] = HEAPF32[$1 + 84 >> 2] * Math_fround(6.2831854820251465);
 $5 = HEAPF32[$2 + 96 >> 2];
 HEAPF32[$2 + 88 >> 2] = Math_fround(Math_fround($5 + $5) * HEAPF32[$1 + 88 >> 2]) * HEAPF32[$2 + 92 >> 2];
 HEAPF32[$2 + 84 >> 2] = HEAPF32[$2 + 96 >> 2] * Math_fround(HEAPF32[$2 + 92 >> 2] * HEAPF32[$2 + 92 >> 2]);
 HEAPF32[$2 + 80 >> 2] = HEAPF32[HEAP32[$2 + 136 >> 2] >> 2];
 HEAPF32[$1 + 108 >> 2] = HEAPF32[$2 + 80 >> 2] * Math_fround(Math_fround(HEAPF32[$2 + 80 >> 2] * HEAPF32[$2 + 84 >> 2]) + HEAPF32[$2 + 88 >> 2]);
 if (HEAPF32[$1 + 108 >> 2] != Math_fround(0)) {
  HEAPF32[$1 + 108 >> 2] = Math_fround(1) / HEAPF32[$1 + 108 >> 2];
 }
 HEAPF32[$1 + 92 >> 2] = Math_fround(HEAPF32[$2 + 80 >> 2] * HEAPF32[$2 + 84 >> 2]) * HEAPF32[$1 + 108 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 - -64 | 0, $1 + 68 | 0, $1 + 128 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 72 | 0, $2 + 100 | 0, $2 - -64 | 0);
 $0 = HEAP32[$2 + 76 >> 2];
 $3 = HEAP32[$2 + 72 >> 2];
 HEAP32[$1 + 120 >> 2] = $3;
 HEAP32[$1 + 124 >> 2] = $0;
 b2Mat22__b2Mat22_28_29($2 + 48 | 0);
 HEAPF32[$2 + 48 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 140 >> 2] * HEAPF32[$1 + 124 >> 2]) * HEAPF32[$1 + 124 >> 2]) + HEAPF32[$1 + 136 >> 2]) + HEAPF32[$1 + 108 >> 2];
 HEAPF32[$2 + 52 >> 2] = Math_fround(Math_fround(-HEAPF32[$1 + 140 >> 2]) * HEAPF32[$1 + 120 >> 2]) * HEAPF32[$1 + 124 >> 2];
 HEAPF32[$2 + 56 >> 2] = HEAPF32[$2 + 52 >> 2];
 HEAPF32[$2 + 60 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 140 >> 2] * HEAPF32[$1 + 120 >> 2]) * HEAPF32[$1 + 120 >> 2]) + HEAPF32[$1 + 136 >> 2]) + HEAPF32[$1 + 108 >> 2];
 b2Mat22__GetInverse_28_29_20const($2 + 32 | 0, $2 + 48 | 0);
 $3 = HEAP32[$2 + 36 >> 2];
 $0 = HEAP32[$2 + 32 >> 2];
 HEAP32[$1 + 144 >> 2] = $0;
 HEAP32[$1 + 148 >> 2] = $3;
 $0 = HEAP32[$2 + 44 >> 2];
 $3 = HEAP32[$2 + 40 >> 2];
 HEAP32[$1 + 152 >> 2] = $3;
 HEAP32[$1 + 156 >> 2] = $0;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 16 | 0, $2 + 128 | 0, $1 + 120 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 24 | 0, $2 + 16 | 0, $1 + 76 | 0);
 $3 = HEAP32[$2 + 28 >> 2];
 $0 = HEAP32[$2 + 24 >> 2];
 HEAP32[$1 + 160 >> 2] = $0;
 HEAP32[$1 + 164 >> 2] = $3;
 b2Vec2__operator___28float_29($1 + 160 | 0, HEAPF32[$1 + 92 >> 2]);
 HEAPF32[$2 + 108 >> 2] = HEAPF32[$2 + 108 >> 2] * Math_fround(.9800000190734863);
 label$2: {
  if (HEAP8[HEAP32[$2 + 136 >> 2] + 20 | 0] & 1) {
   b2Vec2__operator___28float_29($1 + 96 | 0, HEAPF32[HEAP32[$2 + 136 >> 2] + 8 >> 2]);
   operator__28float_2c_20b2Vec2_20const__29($2 + 8 | 0, HEAPF32[$1 + 136 >> 2], $1 + 96 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($2 + 112 | 0, $2 + 8 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$1 + 140 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 120 | 0, $1 + 96 | 0)) + HEAPF32[$2 + 108 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 108 >> 2] = wasm2js_f32$0;
   break label$2;
  }
  b2Vec2__SetZero_28_29($1 + 96 | 0);
 }
 $0 = HEAP32[$2 + 116 >> 2];
 $3 = HEAP32[$2 + 112 >> 2];
 $4 = $3;
 $3 = HEAP32[HEAP32[$2 + 136 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 116 >> 2], 12) | 0;
 HEAP32[$3 >> 2] = $4;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 136 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 116 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 108 >> 2];
 __stack_pointer = $2 + 144 | 0;
}

function b2SeparationFunction__FindMinSeparation_28int__2c_20int__2c_20float_29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $4 = __stack_pointer - 256 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 248 >> 2] = $0;
 HEAP32[$4 + 244 >> 2] = $1;
 HEAP32[$4 + 240 >> 2] = $2;
 HEAPF32[$4 + 236 >> 2] = $3;
 $2 = HEAP32[$4 + 248 >> 2];
 b2Transform__b2Transform_28_29($4 + 220 | 0);
 b2Transform__b2Transform_28_29($4 + 204 | 0);
 b2Sweep__GetTransform_28b2Transform__2c_20float_29_20const($2 + 8 | 0, $4 + 220 | 0, HEAPF32[$4 + 236 >> 2]);
 b2Sweep__GetTransform_28b2Transform__2c_20float_29_20const($2 + 44 | 0, $4 + 204 | 0, HEAPF32[$4 + 236 >> 2]);
 label$1: {
  label$2: {
   switch (HEAP32[$2 + 80 >> 2]) {
   case 0:
    b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($4 + 196 | 0, $4 + 228 | 0, $2 + 92 | 0);
    b2Vec2__operator__28_29_20const($4 + 180 | 0, $2 + 92 | 0);
    b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($4 + 188 | 0, $4 + 212 | 0, $4 + 180 | 0);
    $0 = b2DistanceProxy__GetSupport_28b2Vec2_20const__29_20const(HEAP32[$2 >> 2], $4 + 196 | 0);
    HEAP32[HEAP32[$4 + 244 >> 2] >> 2] = $0;
    $0 = b2DistanceProxy__GetSupport_28b2Vec2_20const__29_20const(HEAP32[$2 + 4 >> 2], $4 + 188 | 0);
    HEAP32[HEAP32[$4 + 240 >> 2] >> 2] = $0;
    $5 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$2 >> 2], HEAP32[HEAP32[$4 + 244 >> 2] >> 2]);
    $1 = HEAP32[$5 >> 2];
    $0 = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 168 >> 2] = $1;
    HEAP32[$4 + 172 >> 2] = $0;
    $5 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$2 + 4 >> 2], HEAP32[HEAP32[$4 + 240 >> 2] >> 2]);
    $0 = HEAP32[$5 >> 2];
    $1 = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 160 >> 2] = $0;
    HEAP32[$4 + 164 >> 2] = $1;
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 152 | 0, $4 + 220 | 0, $4 + 168 | 0);
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 144 | 0, $4 + 204 | 0, $4 + 160 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 132 | 0, $4 + 144 | 0, $4 + 152 | 0);
    wasm2js_i32$0 = $4, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 132 | 0, $2 + 92 | 0), 
    HEAPF32[wasm2js_i32$0 + 140 >> 2] = wasm2js_f32$0;
    HEAPF32[$4 + 252 >> 2] = HEAPF32[$4 + 140 >> 2];
    break label$1;

   case 1:
    b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($4 + 124 | 0, $4 + 228 | 0, $2 + 92 | 0);
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 116 | 0, $4 + 220 | 0, $2 + 84 | 0);
    b2Vec2__operator__28_29_20const($4 + 100 | 0, $4 + 124 | 0);
    b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($4 + 108 | 0, $4 + 212 | 0, $4 + 100 | 0);
    HEAP32[HEAP32[$4 + 244 >> 2] >> 2] = -1;
    $0 = b2DistanceProxy__GetSupport_28b2Vec2_20const__29_20const(HEAP32[$2 + 4 >> 2], $4 + 108 | 0);
    HEAP32[HEAP32[$4 + 240 >> 2] >> 2] = $0;
    $5 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$2 + 4 >> 2], HEAP32[HEAP32[$4 + 240 >> 2] >> 2]);
    $1 = HEAP32[$5 >> 2];
    $0 = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 88 >> 2] = $1;
    HEAP32[$4 + 92 >> 2] = $0;
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 80 | 0, $4 + 204 | 0, $4 + 88 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 68 | 0, $4 + 80 | 0, $4 + 116 | 0);
    wasm2js_i32$0 = $4, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 68 | 0, $4 + 124 | 0), 
    HEAPF32[wasm2js_i32$0 + 76 >> 2] = wasm2js_f32$0;
    HEAPF32[$4 + 252 >> 2] = HEAPF32[$4 + 76 >> 2];
    break label$1;

   case 2:
    b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($4 + 60 | 0, $4 + 212 | 0, $2 + 92 | 0);
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 52 | 0, $4 + 204 | 0, $2 + 84 | 0);
    b2Vec2__operator__28_29_20const($4 + 36 | 0, $4 + 60 | 0);
    b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($4 + 44 | 0, $4 + 228 | 0, $4 + 36 | 0);
    HEAP32[HEAP32[$4 + 240 >> 2] >> 2] = -1;
    $0 = b2DistanceProxy__GetSupport_28b2Vec2_20const__29_20const(HEAP32[$2 >> 2], $4 + 44 | 0);
    HEAP32[HEAP32[$4 + 244 >> 2] >> 2] = $0;
    $5 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$2 >> 2], HEAP32[HEAP32[$4 + 244 >> 2] >> 2]);
    $0 = HEAP32[$5 >> 2];
    $1 = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 24 >> 2] = $0;
    HEAP32[$4 + 28 >> 2] = $1;
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 16 | 0, $4 + 220 | 0, $4 + 24 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 4 | 0, $4 + 16 | 0, $4 + 52 | 0);
    wasm2js_i32$0 = $4, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 4 | 0, $4 + 60 | 0), 
    HEAPF32[wasm2js_i32$0 + 12 >> 2] = wasm2js_f32$0;
    HEAPF32[$4 + 252 >> 2] = HEAPF32[$4 + 12 >> 2];
    break label$1;

   default:
    break label$2;
   }
  }
  __assert_fail(8975, 5237, 190, 6562);
  wasm2js_trap();
 }
 __stack_pointer = $4 + 256 | 0;
 return HEAPF32[$4 + 252 >> 2];
}

function b2Simplex__ReadCache_28b2SimplexCache_20const__2c_20b2DistanceProxy_20const__2c_20b2Transform_20const__2c_20b2DistanceProxy_20const__2c_20b2Transform_20const__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $6 = __stack_pointer - 144 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 140 >> 2] = $0;
 HEAP32[$6 + 136 >> 2] = $1;
 HEAP32[$6 + 132 >> 2] = $2;
 HEAP32[$6 + 128 >> 2] = $3;
 HEAP32[$6 + 124 >> 2] = $4;
 HEAP32[$6 + 120 >> 2] = $5;
 $3 = HEAP32[$6 + 140 >> 2];
 if (HEAPU16[HEAP32[$6 + 136 >> 2] + 4 >> 1] > 3) {
  __assert_fail(11810, 5927, 112, 9550);
  wasm2js_trap();
 }
 HEAP32[$3 + 108 >> 2] = HEAPU16[HEAP32[$6 + 136 >> 2] + 4 >> 1];
 HEAP32[$6 + 116 >> 2] = $3;
 HEAP32[$6 + 112 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 112 >> 2] < HEAP32[$3 + 108 >> 2]) {
   HEAP32[$6 + 108 >> 2] = HEAP32[$6 + 116 >> 2] + Math_imul(HEAP32[$6 + 112 >> 2], 36);
   HEAP32[HEAP32[$6 + 108 >> 2] + 28 >> 2] = HEAPU8[HEAP32[$6 + 112 >> 2] + (HEAP32[$6 + 136 >> 2] + 6 | 0) | 0];
   HEAP32[HEAP32[$6 + 108 >> 2] + 32 >> 2] = HEAPU8[HEAP32[$6 + 112 >> 2] + (HEAP32[$6 + 136 >> 2] + 9 | 0) | 0];
   $2 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$6 + 132 >> 2], HEAP32[HEAP32[$6 + 108 >> 2] + 28 >> 2]);
   $0 = HEAP32[$2 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   HEAP32[$6 + 96 >> 2] = $0;
   HEAP32[$6 + 100 >> 2] = $1;
   $2 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$6 + 124 >> 2], HEAP32[HEAP32[$6 + 108 >> 2] + 32 >> 2]);
   $1 = HEAP32[$2 >> 2];
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$6 + 88 >> 2] = $1;
   HEAP32[$6 + 92 >> 2] = $0;
   b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($6 + 80 | 0, HEAP32[$6 + 128 >> 2], $6 + 96 | 0);
   $1 = HEAP32[$6 + 84 >> 2];
   $0 = HEAP32[$6 + 80 >> 2];
   $2 = $0;
   $0 = HEAP32[$6 + 108 >> 2];
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $1;
   b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($6 + 72 | 0, HEAP32[$6 + 120 >> 2], $6 + 88 | 0);
   $0 = HEAP32[$6 + 76 >> 2];
   $1 = HEAP32[$6 + 72 >> 2];
   $2 = $1;
   $1 = HEAP32[$6 + 108 >> 2];
   HEAP32[$1 + 8 >> 2] = $2;
   HEAP32[$1 + 12 >> 2] = $0;
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 - -64 | 0, HEAP32[$6 + 108 >> 2] + 8 | 0, HEAP32[$6 + 108 >> 2]);
   $1 = HEAP32[$6 + 68 >> 2];
   $0 = HEAP32[$6 + 64 >> 2];
   $2 = $0;
   $0 = HEAP32[$6 + 108 >> 2];
   HEAP32[$0 + 16 >> 2] = $2;
   HEAP32[$0 + 20 >> 2] = $1;
   HEAPF32[HEAP32[$6 + 108 >> 2] + 24 >> 2] = 0;
   HEAP32[$6 + 112 >> 2] = HEAP32[$6 + 112 >> 2] + 1;
   continue;
  }
  break;
 }
 if (HEAP32[$3 + 108 >> 2] > 1) {
  HEAPF32[$6 + 60 >> 2] = HEAPF32[HEAP32[$6 + 136 >> 2] >> 2];
  wasm2js_i32$0 = $6, wasm2js_f32$0 = b2Simplex__GetMetric_28_29_20const($3), HEAPF32[wasm2js_i32$0 + 56 >> 2] = wasm2js_f32$0;
  label$5: {
   label$6: {
    if (HEAPF32[$6 + 56 >> 2] < Math_fround(HEAPF32[$6 + 60 >> 2] * Math_fround(.5))) {
     break label$6;
    }
    $7 = HEAPF32[$6 + 60 >> 2];
    if (HEAPF32[$6 + 56 >> 2] > Math_fround($7 + $7)) {
     break label$6;
    }
    if (!(HEAPF32[$6 + 56 >> 2] < Math_fround(1.1920928955078125e-7))) {
     break label$5;
    }
   }
   HEAP32[$3 + 108 >> 2] = 0;
  }
 }
 if (!HEAP32[$3 + 108 >> 2]) {
  HEAP32[$6 + 52 >> 2] = HEAP32[$6 + 116 >> 2];
  HEAP32[HEAP32[$6 + 52 >> 2] + 28 >> 2] = 0;
  HEAP32[HEAP32[$6 + 52 >> 2] + 32 >> 2] = 0;
  $2 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$6 + 132 >> 2], 0);
  $1 = HEAP32[$2 >> 2];
  $0 = HEAP32[$2 + 4 >> 2];
  HEAP32[$6 + 40 >> 2] = $1;
  HEAP32[$6 + 44 >> 2] = $0;
  $2 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$6 + 124 >> 2], 0);
  $0 = HEAP32[$2 >> 2];
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$6 + 32 >> 2] = $0;
  HEAP32[$6 + 36 >> 2] = $1;
  b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($6 + 24 | 0, HEAP32[$6 + 128 >> 2], $6 + 40 | 0);
  $0 = HEAP32[$6 + 28 >> 2];
  $1 = HEAP32[$6 + 24 >> 2];
  $2 = $1;
  $1 = HEAP32[$6 + 52 >> 2];
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $0;
  b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($6 + 16 | 0, HEAP32[$6 + 120 >> 2], $6 + 32 | 0);
  $1 = HEAP32[$6 + 20 >> 2];
  $0 = HEAP32[$6 + 16 >> 2];
  $2 = $0;
  $0 = HEAP32[$6 + 52 >> 2];
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $1;
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 8 | 0, HEAP32[$6 + 52 >> 2] + 8 | 0, HEAP32[$6 + 52 >> 2]);
  $0 = HEAP32[$6 + 12 >> 2];
  $1 = HEAP32[$6 + 8 >> 2];
  $2 = $1;
  $1 = HEAP32[$6 + 52 >> 2];
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = $0;
  HEAPF32[HEAP32[$6 + 52 >> 2] + 24 >> 2] = 1;
  HEAP32[$3 + 108 >> 2] = 1;
 }
 __stack_pointer = $6 + 144 | 0;
}

function b2WheelJoint__SolvePositionConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 176 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 172 >> 2] = $0;
 HEAP32[$2 + 168 >> 2] = $1;
 $3 = HEAP32[$2 + 172 >> 2];
 $4 = HEAP32[HEAP32[$2 + 168 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 160 >> 2] = $1;
 HEAP32[$2 + 164 >> 2] = $0;
 HEAPF32[$2 + 156 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 168 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 136 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 144 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $1;
 HEAPF32[$2 + 140 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 136 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($2 + 132 | 0, HEAPF32[$2 + 156 >> 2]);
 b2Rot__b2Rot_28float_29($2 + 124 | 0, HEAPF32[$2 + 140 >> 2]);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 108 | 0, $3 + 76 | 0, $3 + 140 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 116 | 0, $2 + 132 | 0, $2 + 108 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 92 | 0, $3 + 84 | 0, $3 + 148 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 100 | 0, $2 + 124 | 0, $2 + 92 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 68 | 0, $2 + 144 | 0, $2 + 160 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 76 | 0, $2 + 68 | 0, $2 + 100 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 84 | 0, $2 + 76 | 0, $2 + 116 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 60 | 0, $2 + 132 | 0, $3 + 100 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 48 | 0, $2 + 84 | 0, $2 + 116 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 48 | 0, $2 + 60 | 0), 
 HEAPF32[wasm2js_i32$0 + 56 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 100 | 0, $2 + 60 | 0), 
 HEAPF32[wasm2js_i32$0 + 44 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 84 | 0, $2 + 60 | 0), 
 HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 36 >> 2] = Math_fround(Math_fround(HEAPF32[$3 + 168 >> 2] * HEAPF32[$3 + 200 >> 2]) * HEAPF32[$3 + 200 >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[$3 + 164 >> 2] * HEAPF32[$3 + 196 >> 2]) * HEAPF32[$3 + 196 >> 2]) + Math_fround(HEAPF32[$3 + 156 >> 2] + HEAPF32[$3 + 160 >> 2]));
 label$1: {
  if (HEAPF32[$2 + 36 >> 2] != Math_fround(0)) {
   HEAPF32[$2 + 32 >> 2] = Math_fround(-HEAPF32[$2 + 40 >> 2]) / HEAPF32[$2 + 36 >> 2];
   break label$1;
  }
  HEAPF32[$2 + 32 >> 2] = 0;
 }
 operator__28float_2c_20b2Vec2_20const__29($2 + 24 | 0, HEAPF32[$2 + 32 >> 2], $2 + 60 | 0);
 HEAPF32[$2 + 20 >> 2] = HEAPF32[$2 + 32 >> 2] * HEAPF32[$2 + 56 >> 2];
 HEAPF32[$2 + 16 >> 2] = HEAPF32[$2 + 32 >> 2] * HEAPF32[$2 + 44 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 8 | 0, HEAPF32[$3 + 156 >> 2], $2 + 24 | 0);
 b2Vec2__operator___28b2Vec2_20const__29_1($2 + 160 | 0, $2 + 8 | 0);
 HEAPF32[$2 + 156 >> 2] = Math_fround(Math_fround(-HEAPF32[$3 + 164 >> 2]) * HEAPF32[$2 + 20 >> 2]) + HEAPF32[$2 + 156 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2, HEAPF32[$3 + 160 >> 2], $2 + 24 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 144 | 0, $2);
 HEAPF32[$2 + 140 >> 2] = Math_fround(HEAPF32[$3 + 168 >> 2] * HEAPF32[$2 + 16 >> 2]) + HEAPF32[$2 + 140 >> 2];
 $0 = HEAP32[$2 + 164 >> 2];
 $1 = HEAP32[$2 + 160 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 168 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 132 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 156 >> 2];
 $1 = HEAP32[$2 + 148 >> 2];
 $0 = HEAP32[$2 + 144 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 168 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 136 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 168 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 136 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 140 >> 2];
 $5 = float_20b2Abs_float__28float_29(HEAPF32[$2 + 40 >> 2]);
 __stack_pointer = $2 + 176 | 0;
 return $5 <= Math_fround(.004999999888241291) | 0;
}

function b2PolygonShape__ComputeMass_28b2MassData__2c_20float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $3 = __stack_pointer - 128 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 124 >> 2] = $0;
 HEAP32[$3 + 120 >> 2] = $1;
 HEAPF32[$3 + 116 >> 2] = $2;
 $0 = HEAP32[$3 + 124 >> 2];
 if (HEAP32[$0 + 148 >> 2] < 3) {
  __assert_fail(11797, 5651, 391, 3462);
  wasm2js_trap();
 }
 b2Vec2__b2Vec2_28_29($3 + 108 | 0);
 b2Vec2__Set_28float_2c_20float_29($3 + 108 | 0, Math_fround(0), Math_fround(0));
 HEAPF32[$3 + 104 >> 2] = 0;
 HEAPF32[$3 + 100 >> 2] = 0;
 b2Vec2__b2Vec2_28float_2c_20float_29($3 + 92 | 0, Math_fround(0), Math_fround(0));
 HEAP32[$3 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 88 >> 2] < HEAP32[$0 + 148 >> 2]) {
   b2Vec2__operator___28b2Vec2_20const__29($3 + 92 | 0, ($0 + 20 | 0) + (HEAP32[$3 + 88 >> 2] << 3) | 0);
   HEAP32[$3 + 88 >> 2] = HEAP32[$3 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 b2Vec2__operator___28float_29($3 + 92 | 0, Math_fround(Math_fround(1) / Math_fround(HEAP32[$0 + 148 >> 2])));
 HEAPF32[$3 + 84 >> 2] = .3333333432674408;
 HEAP32[$3 + 80 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 80 >> 2] < HEAP32[$0 + 148 >> 2]) {
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 72 | 0, ($0 + 20 | 0) + (HEAP32[$3 + 80 >> 2] << 3) | 0, $3 + 92 | 0);
   label$6: {
    if (HEAP32[$0 + 148 >> 2] > (HEAP32[$3 + 80 >> 2] + 1 | 0)) {
     operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 - -64 | 0, ((HEAP32[$3 + 80 >> 2] << 3) + $0 | 0) + 28 | 0, $3 + 92 | 0);
     break label$6;
    }
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 - -64 | 0, $0 + 20 | 0, $3 + 92 | 0);
   }
   wasm2js_i32$0 = $3, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 72 | 0, $3 - -64 | 0), 
   HEAPF32[wasm2js_i32$0 + 60 >> 2] = wasm2js_f32$0;
   HEAPF32[$3 + 56 >> 2] = HEAPF32[$3 + 60 >> 2] * Math_fround(.5);
   HEAPF32[$3 + 104 >> 2] = HEAPF32[$3 + 104 >> 2] + HEAPF32[$3 + 56 >> 2];
   $2 = HEAPF32[$3 + 56 >> 2];
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 40 | 0, $3 + 72 | 0, $3 - -64 | 0);
   operator__28float_2c_20b2Vec2_20const__29($3 + 48 | 0, Math_fround($2 * Math_fround(.3333333432674408)), $3 + 40 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($3 + 108 | 0, $3 + 48 | 0);
   HEAPF32[$3 + 36 >> 2] = HEAPF32[$3 + 72 >> 2];
   HEAPF32[$3 + 32 >> 2] = HEAPF32[$3 + 76 >> 2];
   HEAPF32[$3 + 28 >> 2] = HEAPF32[$3 + 64 >> 2];
   HEAPF32[$3 + 24 >> 2] = HEAPF32[$3 + 68 >> 2];
   HEAPF32[$3 + 20 >> 2] = Math_fround(HEAPF32[$3 + 28 >> 2] * HEAPF32[$3 + 28 >> 2]) + Math_fround(Math_fround(HEAPF32[$3 + 36 >> 2] * HEAPF32[$3 + 36 >> 2]) + Math_fround(HEAPF32[$3 + 28 >> 2] * HEAPF32[$3 + 36 >> 2]));
   HEAPF32[$3 + 16 >> 2] = Math_fround(HEAPF32[$3 + 24 >> 2] * HEAPF32[$3 + 24 >> 2]) + Math_fround(Math_fround(HEAPF32[$3 + 32 >> 2] * HEAPF32[$3 + 32 >> 2]) + Math_fround(HEAPF32[$3 + 24 >> 2] * HEAPF32[$3 + 32 >> 2]));
   HEAPF32[$3 + 100 >> 2] = Math_fround(Math_fround(HEAPF32[$3 + 60 >> 2] * Math_fround(.0833333358168602)) * Math_fround(HEAPF32[$3 + 20 >> 2] + HEAPF32[$3 + 16 >> 2])) + HEAPF32[$3 + 100 >> 2];
   HEAP32[$3 + 80 >> 2] = HEAP32[$3 + 80 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAPF32[HEAP32[$3 + 120 >> 2] >> 2] = HEAPF32[$3 + 116 >> 2] * HEAPF32[$3 + 104 >> 2];
 if (!(HEAPF32[$3 + 104 >> 2] > Math_fround(1.1920928955078125e-7))) {
  __assert_fail(10688, 5651, 437, 3462);
  wasm2js_trap();
 }
 b2Vec2__operator___28float_29($3 + 108 | 0, Math_fround(Math_fround(1) / HEAPF32[$3 + 104 >> 2]));
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 8 | 0, $3 + 108 | 0, $3 + 92 | 0);
 $4 = HEAP32[$3 + 12 >> 2];
 $0 = HEAP32[$3 + 8 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 120 >> 2];
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $4;
 HEAPF32[HEAP32[$3 + 120 >> 2] + 12 >> 2] = HEAPF32[$3 + 116 >> 2] * HEAPF32[$3 + 100 >> 2];
 $2 = HEAPF32[HEAP32[$3 + 120 >> 2] >> 2];
 $5 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$3 + 120 >> 2] + 4 | 0, HEAP32[$3 + 120 >> 2] + 4 | 0);
 $0 = $3 + 108 | 0;
 $6 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $0);
 $0 = HEAP32[$3 + 120 >> 2];
 HEAPF32[$0 + 12 >> 2] = Math_fround($2 * Math_fround($5 - $6)) + HEAPF32[$0 + 12 >> 2];
 __stack_pointer = $3 + 128 | 0;
}

function b2PositionSolverManifold__Initialize_28b2ContactPositionConstraint__2c_20b2Transform_20const__2c_20b2Transform_20const__2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $5 = __stack_pointer - 144 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 $1 = HEAP32[$5 + 140 >> 2];
 if (HEAP32[HEAP32[$5 + 136 >> 2] + 84 >> 2] <= 0) {
  __assert_fail(12029, 5446, 627, 8434);
  wasm2js_trap();
 }
 label$2: {
  label$3: {
   switch (HEAP32[HEAP32[$5 + 136 >> 2] + 72 >> 2]) {
   case 0:
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($5 + 116 | 0, HEAP32[$5 + 132 >> 2], HEAP32[$5 + 136 >> 2] + 24 | 0);
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($5 + 108 | 0, HEAP32[$5 + 128 >> 2], HEAP32[$5 + 136 >> 2]);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 100 | 0, $5 + 108 | 0, $5 + 116 | 0);
    $2 = HEAP32[$5 + 104 >> 2];
    $0 = HEAP32[$5 + 100 >> 2];
    $3 = $0;
    $0 = $1;
    HEAP32[$0 >> 2] = $3;
    HEAP32[$0 + 4 >> 2] = $2;
    b2Vec2__Normalize_28_29($0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($5 + 84 | 0, $5 + 116 | 0, $5 + 108 | 0);
    operator__28float_2c_20b2Vec2_20const__29($5 + 92 | 0, Math_fround(.5), $5 + 84 | 0);
    $0 = HEAP32[$5 + 96 >> 2];
    $2 = HEAP32[$5 + 92 >> 2];
    $3 = $2;
    $2 = $1;
    HEAP32[$2 + 8 >> 2] = $3;
    HEAP32[$2 + 12 >> 2] = $0;
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 76 | 0, $5 + 108 | 0, $5 + 116 | 0);
    wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 76 | 0, $2) - HEAPF32[HEAP32[$5 + 136 >> 2] + 76 >> 2]) - HEAPF32[HEAP32[$5 + 136 >> 2] + 80 >> 2]), 
    HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
    break label$2;

   case 1:
    b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($5 + 68 | 0, HEAP32[$5 + 132 >> 2] + 8 | 0, HEAP32[$5 + 136 >> 2] + 16 | 0);
    $2 = HEAP32[$5 + 72 >> 2];
    $0 = HEAP32[$5 + 68 >> 2];
    $3 = $0;
    $0 = $1;
    HEAP32[$0 >> 2] = $3;
    HEAP32[$0 + 4 >> 2] = $2;
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($5 + 60 | 0, HEAP32[$5 + 132 >> 2], HEAP32[$5 + 136 >> 2] + 24 | 0);
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($5 + 52 | 0, HEAP32[$5 + 128 >> 2], HEAP32[$5 + 136 >> 2] + (HEAP32[$5 + 124 >> 2] << 3) | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 44 | 0, $5 + 52 | 0, $5 + 60 | 0);
    wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround(Math_fround(b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 44 | 0, $0) - HEAPF32[HEAP32[$5 + 136 >> 2] + 76 >> 2]) - HEAPF32[HEAP32[$5 + 136 >> 2] + 80 >> 2]), 
    HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
    $0 = HEAP32[$5 + 56 >> 2];
    $2 = HEAP32[$5 + 52 >> 2];
    $3 = $2;
    $2 = $1;
    HEAP32[$2 + 8 >> 2] = $3;
    HEAP32[$2 + 12 >> 2] = $0;
    break label$2;

   case 2:
    break label$3;

   default:
    break label$2;
   }
  }
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($5 + 36 | 0, HEAP32[$5 + 128 >> 2] + 8 | 0, HEAP32[$5 + 136 >> 2] + 16 | 0);
  $2 = HEAP32[$5 + 40 >> 2];
  $0 = HEAP32[$5 + 36 >> 2];
  $3 = $0;
  $0 = $1;
  HEAP32[$0 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = $2;
  b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($5 + 28 | 0, HEAP32[$5 + 128 >> 2], HEAP32[$5 + 136 >> 2] + 24 | 0);
  b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($5 + 20 | 0, HEAP32[$5 + 132 >> 2], HEAP32[$5 + 136 >> 2] + (HEAP32[$5 + 124 >> 2] << 3) | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 12 | 0, $5 + 20 | 0, $5 + 28 | 0);
  wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround(Math_fround(b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 12 | 0, $0) - HEAPF32[HEAP32[$5 + 136 >> 2] + 76 >> 2]) - HEAPF32[HEAP32[$5 + 136 >> 2] + 80 >> 2]), 
  HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
  $0 = HEAP32[$5 + 24 >> 2];
  $2 = HEAP32[$5 + 20 >> 2];
  $3 = $2;
  $2 = $1;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $0;
  b2Vec2__operator__28_29_20const($5 + 4 | 0, $2);
  $2 = HEAP32[$5 + 8 >> 2];
  $0 = HEAP32[$5 + 4 >> 2];
  $3 = $0;
  $0 = $1;
  HEAP32[$0 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = $2;
 }
 __stack_pointer = $5 + 144 | 0;
}

function b2DistanceJoint__SolvePositionConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 160 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 152 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $1;
 $3 = HEAP32[$2 + 152 >> 2];
 label$1: {
  if (HEAPF32[$3 + 68 >> 2] > Math_fround(0)) {
   HEAP8[$2 + 159 | 0] = 1;
   break label$1;
  }
  $4 = HEAP32[HEAP32[$2 + 148 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0;
  $0 = HEAP32[$4 >> 2];
  $1 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 136 >> 2] = $0;
  HEAP32[$2 + 140 >> 2] = $1;
  HEAPF32[$2 + 132 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 148 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0) + 8 >> 2];
  $4 = HEAP32[HEAP32[$2 + 148 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 112 >> 2], 12) | 0;
  $1 = HEAP32[$4 >> 2];
  $0 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 120 >> 2] = $1;
  HEAP32[$2 + 124 >> 2] = $0;
  HEAPF32[$2 + 116 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 148 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 112 >> 2], 12) | 0) + 8 >> 2];
  b2Rot__b2Rot_28float_29($2 + 108 | 0, HEAPF32[$2 + 132 >> 2]);
  b2Rot__b2Rot_28float_29($2 + 100 | 0, HEAPF32[$2 + 116 >> 2]);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 84 | 0, $3 + 80 | 0, $3 + 140 | 0);
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 92 | 0, $2 + 108 | 0, $2 + 84 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 68 | 0, $3 + 88 | 0, $3 + 148 | 0);
  b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 76 | 0, $2 + 100 | 0, $2 + 68 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 44 | 0, $2 + 120 | 0, $2 + 76 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 52 | 0, $2 + 44 | 0, $2 + 136 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 60 | 0, $2 + 52 | 0, $2 + 92 | 0);
  wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Vec2__Normalize_28_29($2 + 60 | 0), HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
  HEAPF32[$2 + 36 >> 2] = HEAPF32[$2 + 40 >> 2] - HEAPF32[$3 + 104 >> 2];
  wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Clamp_float__28float_2c_20float_2c_20float_29(HEAPF32[$2 + 36 >> 2], Math_fround(-.20000000298023224), Math_fround(.20000000298023224)), 
  HEAPF32[wasm2js_i32$0 + 36 >> 2] = wasm2js_f32$0;
  HEAPF32[$2 + 32 >> 2] = Math_fround(-HEAPF32[$3 + 172 >> 2]) * HEAPF32[$2 + 36 >> 2];
  operator__28float_2c_20b2Vec2_20const__29($2 + 24 | 0, HEAPF32[$2 + 32 >> 2], $2 + 60 | 0);
  operator__28float_2c_20b2Vec2_20const__29($2 + 16 | 0, HEAPF32[$3 + 156 >> 2], $2 + 24 | 0);
  b2Vec2__operator___28b2Vec2_20const__29_1($2 + 136 | 0, $2 + 16 | 0);
  wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$3 + 164 >> 2]) * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 92 | 0, $2 + 24 | 0)) + HEAPF32[$2 + 132 >> 2]), 
  HEAPF32[wasm2js_i32$0 + 132 >> 2] = wasm2js_f32$0;
  operator__28float_2c_20b2Vec2_20const__29($2 + 8 | 0, HEAPF32[$3 + 160 >> 2], $2 + 24 | 0);
  b2Vec2__operator___28b2Vec2_20const__29($2 + 120 | 0, $2 + 8 | 0);
  wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$3 + 168 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 76 | 0, $2 + 24 | 0)) + HEAPF32[$2 + 116 >> 2]), 
  HEAPF32[wasm2js_i32$0 + 116 >> 2] = wasm2js_f32$0;
  $1 = HEAP32[$2 + 140 >> 2];
  $0 = HEAP32[$2 + 136 >> 2];
  $4 = $0;
  $0 = HEAP32[HEAP32[$2 + 148 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0;
  HEAP32[$0 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = $1;
  HEAPF32[(HEAP32[HEAP32[$2 + 148 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 132 >> 2];
  $0 = HEAP32[$2 + 124 >> 2];
  $1 = HEAP32[$2 + 120 >> 2];
  $4 = $1;
  $1 = HEAP32[HEAP32[$2 + 148 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 112 >> 2], 12) | 0;
  HEAP32[$1 >> 2] = $4;
  HEAP32[$1 + 4 >> 2] = $0;
  HEAPF32[(HEAP32[HEAP32[$2 + 148 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 112 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 116 >> 2];
  wasm2js_i32$0 = $2, wasm2js_i32$1 = float_20b2Abs_float__28float_29(HEAPF32[$2 + 36 >> 2]) < Math_fround(.004999999888241291), 
  HEAP8[wasm2js_i32$0 + 159 | 0] = wasm2js_i32$1;
 }
 __stack_pointer = $2 + 160 | 0;
 return HEAP8[$2 + 159 | 0] & 1;
}

function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     label$5: {
      label$6: {
       label$7: {
        label$8: {
         label$9: {
          label$11: {
           $10 = $1;
           $7 = $10;
           if ($7) {
            $4 = $2;
            if (!$4) {
             break label$11;
            }
            $9 = $3;
            if (!$9) {
             break label$9;
            }
            $7 = Math_clz32($9) - Math_clz32($7) | 0;
            if ($7 >>> 0 <= 31) {
             break label$8;
            }
            break label$2;
           }
           $5 = $3;
           if (($5 | 0) == 1 | $5 >>> 0 > 1) {
            break label$2;
           }
           i64toi32_i32$HIGH_BITS = 0;
           $7 = $0;
           $4 = $2;
           $7 = ($7 >>> 0) / ($4 >>> 0) | 0;
           $5 = $7;
           return $5;
          }
          $5 = $3;
          $4 = $5;
          if (!$0) {
           break label$7;
          }
          if (!$4) {
           break label$6;
          }
          $9 = $4 - 1 | 0;
          if ($9 & $4) {
           break label$6;
          }
          $5 = 0;
          $6 = $7 >>> __wasm_ctz_i32($4) | 0;
          i64toi32_i32$HIGH_BITS = 0;
          return $6;
         }
         $9 = $4 - 1 | 0;
         if (!($9 & $4)) {
          break label$5;
         }
         $7 = (Math_clz32($4) + 33 | 0) - Math_clz32($7) | 0;
         $4 = 0 - $7 | 0;
         break label$3;
        }
        $4 = 63 - $7 | 0;
        $7 = $7 + 1 | 0;
        break label$3;
       }
       $9 = ($7 >>> 0) / ($4 >>> 0) | 0;
       i64toi32_i32$HIGH_BITS = 0;
       $5 = $9;
       return $5;
      }
      $7 = Math_clz32($4) - Math_clz32($7) | 0;
      if ($7 >>> 0 < 31) {
       break label$4;
      }
      break label$2;
     }
     if (($4 | 0) == 1) {
      break label$1;
     }
     $5 = $1;
     $6 = $0;
     $9 = 0;
     $10 = __wasm_ctz_i32($4);
     $8 = $10 & 31;
     if (($10 & 63) >>> 0 >= 32) {
      $6 = $5 >>> $8 | 0;
     } else {
      $9 = $5 >>> $8 | 0;
      $6 = ((1 << $8) - 1 & $5) << 32 - $8 | $6 >>> $8;
     }
     i64toi32_i32$HIGH_BITS = $9;
     return $6;
    }
    $4 = 63 - $7 | 0;
    $7 = $7 + 1 | 0;
   }
   $6 = $1;
   $5 = $0;
   $9 = 0;
   $10 = $7 & 63;
   $8 = $10 & 31;
   if (($10 & 63) >>> 0 >= 32) {
    $11 = $6 >>> $8 | 0;
   } else {
    $9 = $6 >>> $8 | 0;
    $11 = ((1 << $8) - 1 & $6) << 32 - $8 | $5 >>> $8;
   }
   $12 = $9;
   $9 = $1;
   $6 = $0;
   $10 = $4 & 63;
   $8 = $10 & 31;
   if (($10 & 63) >>> 0 >= 32) {
    $5 = $6 << $8;
    $0 = 0;
   } else {
    $5 = (1 << $8) - 1 & $6 >>> 32 - $8 | $9 << $8;
    $0 = $6 << $8;
   }
   $1 = $5;
   if ($7) {
    $5 = $3;
    $4 = $5 - 1 | 0;
    $9 = $2;
    $8 = $9 - 1 | 0;
    $4 = ($8 | 0) != -1 ? $4 + 1 | 0 : $4;
    $15 = $8;
    $16 = $4;
    while (1) {
     $4 = $12;
     $5 = $11;
     $9 = $4 << 1 | $5 >>> 31;
     $6 = $5 << 1;
     $5 = $9;
     $4 = $17;
     $4 = $5 | $4;
     $12 = $4;
     $10 = $1 >>> 31 | 0;
     $9 = $6;
     $11 = $10 | $9;
     $5 = $15;
     $10 = $11;
     $4 = $16;
     $9 = $12;
     $8 = $9 + ($5 >>> 0 < $10 >>> 0) | 0;
     $8 = $4 - $8 | 0;
     $13 = $8 >> 31;
     $5 = $8 >> 31;
     $14 = $5;
     $4 = $3;
     $4 = $5 & $4;
     $6 = $4;
     $5 = $10;
     $10 = $2;
     $8 = $13;
     $10 = $10 & $8;
     $9 = $5 - $10 | 0;
     $11 = $9;
     $4 = $12;
     $8 = $6;
     $6 = $8 + ($5 >>> 0 < $10 >>> 0) | 0;
     $6 = $4 - $6 | 0;
     $12 = $6;
     $6 = $1;
     $4 = $0;
     $5 = $6 << 1 | $4 >>> 31;
     $10 = $18;
     $6 = $4 << 1;
     $0 = $10 | $6;
     $4 = $17;
     $4 = $4 | $5;
     $1 = $4;
     $6 = 0;
     $14 = $6;
     $5 = $13;
     $13 = $5 & 1;
     $18 = $13;
     $7 = $7 - 1 | 0;
     if ($7) {
      continue;
     }
     break;
    }
   }
   $6 = $1;
   $4 = $0;
   $5 = $6 << 1 | $4 >>> 31;
   $4 = $14;
   $4 = $5 | $4;
   i64toi32_i32$HIGH_BITS = $4;
   $10 = $13;
   $6 = $0 << 1;
   $6 = $10 | $6;
   return $6;
  }
  $0 = 0;
  $1 = 0;
 }
 $6 = $1;
 i64toi32_i32$HIGH_BITS = $6;
 $4 = $0;
 return $4;
}

function b2Joint__Create_28b2JointDef_20const__2c_20b2BlockAllocator__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 60 >> 2] = $0;
 HEAP32[$2 + 56 >> 2] = $1;
 HEAP32[$2 + 52 >> 2] = 0;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$2 + 60 >> 2] >> 2] - 1 | 0) {
   case 2:
    wasm2js_i32$0 = $2, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$2 + 56 >> 2], 176), 
    HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
    $0 = HEAP32[$2 + 48 >> 2];
    b2DistanceJoint__b2DistanceJoint_28b2DistanceJointDef_20const__29($0, HEAP32[$2 + 60 >> 2]);
    HEAP32[$2 + 52 >> 2] = $0;
    break label$1;

   case 4:
    wasm2js_i32$0 = $2, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$2 + 56 >> 2], 168), 
    HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
    $0 = HEAP32[$2 + 44 >> 2];
    b2MouseJoint__b2MouseJoint_28b2MouseJointDef_20const__29($0, HEAP32[$2 + 60 >> 2]);
    HEAP32[$2 + 52 >> 2] = $0;
    break label$1;

   case 1:
    wasm2js_i32$0 = $2, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$2 + 56 >> 2], 256), 
    HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
    $0 = HEAP32[$2 + 40 >> 2];
    b2PrismaticJoint__b2PrismaticJoint_28b2PrismaticJointDef_20const__29($0, HEAP32[$2 + 60 >> 2]);
    HEAP32[$2 + 52 >> 2] = $0;
    break label$1;

   case 0:
    wasm2js_i32$0 = $2, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$2 + 56 >> 2], 228), 
    HEAP32[wasm2js_i32$0 + 36 >> 2] = wasm2js_i32$1;
    $0 = HEAP32[$2 + 36 >> 2];
    b2RevoluteJoint__b2RevoluteJoint_28b2RevoluteJointDef_20const__29($0, HEAP32[$2 + 60 >> 2]);
    HEAP32[$2 + 52 >> 2] = $0;
    break label$1;

   case 3:
    wasm2js_i32$0 = $2, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$2 + 56 >> 2], 196), 
    HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
    $0 = HEAP32[$2 + 32 >> 2];
    b2PulleyJoint__b2PulleyJoint_28b2PulleyJointDef_20const__29($0, HEAP32[$2 + 60 >> 2]);
    HEAP32[$2 + 52 >> 2] = $0;
    break label$1;

   case 5:
    wasm2js_i32$0 = $2, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$2 + 56 >> 2], 276), 
    HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
    $0 = HEAP32[$2 + 28 >> 2];
    b2GearJoint__b2GearJoint_28b2GearJointDef_20const__29($0, HEAP32[$2 + 60 >> 2]);
    HEAP32[$2 + 52 >> 2] = $0;
    break label$1;

   case 6:
    wasm2js_i32$0 = $2, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$2 + 56 >> 2], 224), 
    HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
    $0 = HEAP32[$2 + 24 >> 2];
    b2WheelJoint__b2WheelJoint_28b2WheelJointDef_20const__29($0, HEAP32[$2 + 60 >> 2]);
    HEAP32[$2 + 52 >> 2] = $0;
    break label$1;

   case 7:
    wasm2js_i32$0 = $2, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$2 + 56 >> 2], 208), 
    HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
    $0 = HEAP32[$2 + 20 >> 2];
    b2WeldJoint__b2WeldJoint_28b2WeldJointDef_20const__29($0, HEAP32[$2 + 60 >> 2]);
    HEAP32[$2 + 52 >> 2] = $0;
    break label$1;

   case 8:
    wasm2js_i32$0 = $2, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$2 + 56 >> 2], 180), 
    HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
    $0 = HEAP32[$2 + 16 >> 2];
    b2FrictionJoint__b2FrictionJoint_28b2FrictionJointDef_20const__29($0, HEAP32[$2 + 60 >> 2]);
    HEAP32[$2 + 52 >> 2] = $0;
    break label$1;

   case 9:
    wasm2js_i32$0 = $2, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$2 + 56 >> 2], 168), 
    HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
    $0 = HEAP32[$2 + 12 >> 2];
    b2RopeJoint__b2RopeJoint_28b2RopeJointDef_20const__29($0, HEAP32[$2 + 60 >> 2]);
    HEAP32[$2 + 52 >> 2] = $0;
    break label$1;

   case 10:
    wasm2js_i32$0 = $2, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$2 + 56 >> 2], 192), 
    HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
    $0 = HEAP32[$2 + 8 >> 2];
    b2MotorJoint__b2MotorJoint_28b2MotorJointDef_20const__29($0, HEAP32[$2 + 60 >> 2]);
    HEAP32[$2 + 52 >> 2] = $0;
    break label$1;

   default:
    break label$2;
   }
  }
  __assert_fail(8975, 4590, 124, 8764);
  wasm2js_trap();
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 52 >> 2];
}

function b2EdgeShape__RayCast_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $5 = __stack_pointer - 192 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 184 >> 2] = $0;
 HEAP32[$5 + 180 >> 2] = $1;
 HEAP32[$5 + 176 >> 2] = $2;
 HEAP32[$5 + 172 >> 2] = $3;
 HEAP32[$5 + 168 >> 2] = $4;
 $1 = HEAP32[$5 + 184 >> 2];
 $0 = HEAP32[$5 + 172 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 152 | 0, HEAP32[$5 + 176 >> 2], HEAP32[$5 + 172 >> 2]);
 b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($5 + 160 | 0, $0 + 8 | 0, $5 + 152 | 0);
 $0 = HEAP32[$5 + 172 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 136 | 0, HEAP32[$5 + 176 >> 2] + 8 | 0, HEAP32[$5 + 172 >> 2]);
 b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($5 + 144 | 0, $0 + 8 | 0, $5 + 136 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 128 | 0, $5 + 144 | 0, $5 + 160 | 0);
 $2 = HEAP32[$1 + 12 >> 2];
 $0 = HEAP32[$1 + 16 >> 2];
 HEAP32[$5 + 120 >> 2] = $2;
 HEAP32[$5 + 124 >> 2] = $0;
 $2 = HEAP32[$1 + 24 >> 2];
 $0 = HEAP32[$1 + 20 >> 2];
 HEAP32[$5 + 112 >> 2] = $0;
 HEAP32[$5 + 116 >> 2] = $2;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 104 | 0, $5 + 112 | 0, $5 + 120 | 0);
 b2Vec2__b2Vec2_28float_2c_20float_29($5 + 96 | 0, HEAPF32[$5 + 108 >> 2], Math_fround(-HEAPF32[$5 + 104 >> 2]));
 b2Vec2__Normalize_28_29($5 + 96 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 84 | 0, $5 + 120 | 0, $5 + 160 | 0);
 wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 96 | 0, $5 + 84 | 0), 
 HEAPF32[wasm2js_i32$0 + 92 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 96 | 0, $5 + 128 | 0), 
 HEAPF32[wasm2js_i32$0 + 80 >> 2] = wasm2js_f32$0;
 label$1: {
  if (HEAPF32[$5 + 80 >> 2] == Math_fround(0)) {
   HEAP8[$5 + 191 | 0] = 0;
   break label$1;
  }
  HEAPF32[$5 + 76 >> 2] = HEAPF32[$5 + 92 >> 2] / HEAPF32[$5 + 80 >> 2];
  if (HEAPF32[$5 + 76 >> 2] < Math_fround(0) | HEAPF32[HEAP32[$5 + 176 >> 2] + 16 >> 2] < HEAPF32[$5 + 76 >> 2]) {
   HEAP8[$5 + 191 | 0] = 0;
   break label$1;
  }
  operator__28float_2c_20b2Vec2_20const__29($5 + 60 | 0, HEAPF32[$5 + 76 >> 2], $5 + 128 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($5 + 68 | 0, $5 + 160 | 0, $5 + 60 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 52 | 0, $5 + 112 | 0, $5 + 120 | 0);
  $0 = $5 + 52 | 0;
  wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $0), 
  HEAPF32[wasm2js_i32$0 + 48 >> 2] = wasm2js_f32$0;
  if (HEAPF32[$5 + 48 >> 2] == Math_fround(0)) {
   HEAP8[$5 + 191 | 0] = 0;
   break label$1;
  }
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 36 | 0, $5 + 68 | 0, $5 + 120 | 0);
  wasm2js_i32$0 = $5, wasm2js_f32$0 = Math_fround(b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 36 | 0, $5 + 52 | 0) / HEAPF32[$5 + 48 >> 2]), 
  HEAPF32[wasm2js_i32$0 + 44 >> 2] = wasm2js_f32$0;
  if (HEAPF32[$5 + 44 >> 2] < Math_fround(0) | HEAPF32[$5 + 44 >> 2] > Math_fround(1)) {
   HEAP8[$5 + 191 | 0] = 0;
   break label$1;
  }
  HEAPF32[HEAP32[$5 + 180 >> 2] + 8 >> 2] = HEAPF32[$5 + 76 >> 2];
  label$8: {
   if (HEAPF32[$5 + 92 >> 2] > Math_fround(0)) {
    b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($5 + 20 | 0, HEAP32[$5 + 172 >> 2] + 8 | 0, $5 + 96 | 0);
    b2Vec2__operator__28_29_20const($5 + 28 | 0, $5 + 20 | 0);
    $0 = HEAP32[$5 + 32 >> 2];
    $2 = HEAP32[$5 + 28 >> 2];
    $1 = $2;
    $2 = HEAP32[$5 + 180 >> 2];
    HEAP32[$2 >> 2] = $1;
    HEAP32[$2 + 4 >> 2] = $0;
    break label$8;
   }
   b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($5 + 12 | 0, HEAP32[$5 + 172 >> 2] + 8 | 0, $5 + 96 | 0);
   $2 = HEAP32[$5 + 16 >> 2];
   $0 = HEAP32[$5 + 12 >> 2];
   $1 = $0;
   $0 = HEAP32[$5 + 180 >> 2];
   HEAP32[$0 >> 2] = $1;
   HEAP32[$0 + 4 >> 2] = $2;
  }
  HEAP8[$5 + 191 | 0] = 1;
 }
 __stack_pointer = $5 + 192 | 0;
 return HEAP8[$5 + 191 | 0] & 1;
}

function b2ContactSolver__WarmStart_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $1 = __stack_pointer - 144 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 140 >> 2] = $0;
 $4 = HEAP32[$1 + 140 >> 2];
 HEAP32[$1 + 136 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 136 >> 2] < HEAP32[$4 + 48 >> 2]) {
   HEAP32[$1 + 132 >> 2] = HEAP32[$4 + 40 >> 2] + Math_imul(HEAP32[$1 + 136 >> 2], 156);
   HEAP32[$1 + 128 >> 2] = HEAP32[HEAP32[$1 + 132 >> 2] + 112 >> 2];
   HEAP32[$1 + 124 >> 2] = HEAP32[HEAP32[$1 + 132 >> 2] + 116 >> 2];
   HEAPF32[$1 + 120 >> 2] = HEAPF32[HEAP32[$1 + 132 >> 2] + 120 >> 2];
   HEAPF32[$1 + 116 >> 2] = HEAPF32[HEAP32[$1 + 132 >> 2] + 128 >> 2];
   HEAPF32[$1 + 112 >> 2] = HEAPF32[HEAP32[$1 + 132 >> 2] + 124 >> 2];
   HEAPF32[$1 + 108 >> 2] = HEAPF32[HEAP32[$1 + 132 >> 2] + 132 >> 2];
   HEAP32[$1 + 104 >> 2] = HEAP32[HEAP32[$1 + 132 >> 2] + 148 >> 2];
   $2 = HEAP32[$4 + 28 >> 2] + Math_imul(HEAP32[$1 + 128 >> 2], 12) | 0;
   $0 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 96 >> 2] = $0;
   HEAP32[$1 + 100 >> 2] = $3;
   HEAPF32[$1 + 92 >> 2] = HEAPF32[(HEAP32[$4 + 28 >> 2] + Math_imul(HEAP32[$1 + 128 >> 2], 12) | 0) + 8 >> 2];
   $2 = HEAP32[$4 + 28 >> 2] + Math_imul(HEAP32[$1 + 124 >> 2], 12) | 0;
   $3 = HEAP32[$2 >> 2];
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 80 >> 2] = $3;
   HEAP32[$1 + 84 >> 2] = $0;
   HEAPF32[$1 + 76 >> 2] = HEAPF32[(HEAP32[$4 + 28 >> 2] + Math_imul(HEAP32[$1 + 124 >> 2], 12) | 0) + 8 >> 2];
   $2 = HEAP32[$1 + 132 >> 2];
   $0 = HEAP32[$2 + 72 >> 2];
   $3 = HEAP32[$2 + 76 >> 2];
   HEAP32[$1 + 64 >> 2] = $0;
   HEAP32[$1 + 68 >> 2] = $3;
   b2Cross_28b2Vec2_20const__2c_20float_29($1 + 56 | 0, $1 - -64 | 0, Math_fround(1));
   HEAP32[$1 + 52 >> 2] = 0;
   while (1) {
    if (HEAP32[$1 + 52 >> 2] < HEAP32[$1 + 104 >> 2]) {
     HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 132 >> 2] + Math_imul(HEAP32[$1 + 52 >> 2], 36);
     operator__28float_2c_20b2Vec2_20const__29($1 + 32 | 0, HEAPF32[HEAP32[$1 + 48 >> 2] + 16 >> 2], $1 - -64 | 0);
     operator__28float_2c_20b2Vec2_20const__29($1 + 24 | 0, HEAPF32[HEAP32[$1 + 48 >> 2] + 20 >> 2], $1 + 56 | 0);
     operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($1 + 40 | 0, $1 + 32 | 0, $1 + 24 | 0);
     wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$1 + 116 >> 2]) * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 48 >> 2], $1 + 40 | 0)) + HEAPF32[$1 + 92 >> 2]), 
     HEAPF32[wasm2js_i32$0 + 92 >> 2] = wasm2js_f32$0;
     operator__28float_2c_20b2Vec2_20const__29($1 + 16 | 0, HEAPF32[$1 + 120 >> 2], $1 + 40 | 0);
     b2Vec2__operator___28b2Vec2_20const__29_1($1 + 96 | 0, $1 + 16 | 0);
     wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$1 + 108 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$1 + 48 >> 2] + 8 | 0, $1 + 40 | 0)) + HEAPF32[$1 + 76 >> 2]), 
     HEAPF32[wasm2js_i32$0 + 76 >> 2] = wasm2js_f32$0;
     operator__28float_2c_20b2Vec2_20const__29($1 + 8 | 0, HEAPF32[$1 + 112 >> 2], $1 + 40 | 0);
     b2Vec2__operator___28b2Vec2_20const__29($1 + 80 | 0, $1 + 8 | 0);
     HEAP32[$1 + 52 >> 2] = HEAP32[$1 + 52 >> 2] + 1;
     continue;
    }
    break;
   }
   $0 = HEAP32[$1 + 100 >> 2];
   $3 = HEAP32[$1 + 96 >> 2];
   $2 = $3;
   $3 = HEAP32[$4 + 28 >> 2] + Math_imul(HEAP32[$1 + 128 >> 2], 12) | 0;
   HEAP32[$3 >> 2] = $2;
   HEAP32[$3 + 4 >> 2] = $0;
   HEAPF32[(HEAP32[$4 + 28 >> 2] + Math_imul(HEAP32[$1 + 128 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$1 + 92 >> 2];
   $3 = HEAP32[$1 + 84 >> 2];
   $0 = HEAP32[$1 + 80 >> 2];
   $2 = $0;
   $0 = HEAP32[$4 + 28 >> 2] + Math_imul(HEAP32[$1 + 124 >> 2], 12) | 0;
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $3;
   HEAPF32[(HEAP32[$4 + 28 >> 2] + Math_imul(HEAP32[$1 + 124 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$1 + 76 >> 2];
   HEAP32[$1 + 136 >> 2] = HEAP32[$1 + 136 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 144 | 0;
}
function b2RopeJoint__SolvePositionConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 144 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 140 >> 2] = $0;
 HEAP32[$2 + 136 >> 2] = $1;
 $3 = HEAP32[$2 + 140 >> 2];
 $4 = HEAP32[HEAP32[$2 + 136 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 96 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 128 >> 2] = $0;
 HEAP32[$2 + 132 >> 2] = $1;
 HEAPF32[$2 + 124 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 136 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 96 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 136 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 100 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 112 >> 2] = $1;
 HEAP32[$2 + 116 >> 2] = $0;
 HEAPF32[$2 + 108 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 136 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 100 >> 2], 12) | 0) + 8 >> 2];
 b2Rot__b2Rot_28float_29($2 + 100 | 0, HEAPF32[$2 + 124 >> 2]);
 b2Rot__b2Rot_28float_29($2 + 92 | 0, HEAPF32[$2 + 108 >> 2]);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 76 | 0, $3 + 68 | 0, $3 + 128 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 84 | 0, $2 + 100 | 0, $2 + 76 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 60 | 0, $3 + 76 | 0, $3 + 136 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($2 + 68 | 0, $2 + 92 | 0, $2 + 60 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 36 | 0, $2 + 112 | 0, $2 + 68 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 44 | 0, $2 + 36 | 0, $2 + 128 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 52 | 0, $2 + 44 | 0, $2 + 84 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Vec2__Normalize_28_29($2 + 52 | 0), HEAPF32[wasm2js_i32$0 + 32 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 28 >> 2] = HEAPF32[$2 + 32 >> 2] - HEAPF32[$3 + 84 >> 2];
 wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Clamp_float__28float_2c_20float_2c_20float_29(HEAPF32[$2 + 28 >> 2], Math_fround(0), Math_fround(.20000000298023224)), 
 HEAPF32[wasm2js_i32$0 + 28 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 24 >> 2] = Math_fround(-HEAPF32[$3 + 160 >> 2]) * HEAPF32[$2 + 28 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 16 | 0, HEAPF32[$2 + 24 >> 2], $2 + 52 | 0);
 operator__28float_2c_20b2Vec2_20const__29($2 + 8 | 0, HEAPF32[$3 + 144 >> 2], $2 + 16 | 0);
 b2Vec2__operator___28b2Vec2_20const__29_1($2 + 128 | 0, $2 + 8 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$3 + 152 >> 2]) * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 84 | 0, $2 + 16 | 0)) + HEAPF32[$2 + 124 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 124 >> 2] = wasm2js_f32$0;
 operator__28float_2c_20b2Vec2_20const__29($2, HEAPF32[$3 + 148 >> 2], $2 + 16 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 112 | 0, $2);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$3 + 156 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 68 | 0, $2 + 16 | 0)) + HEAPF32[$2 + 108 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 108 >> 2] = wasm2js_f32$0;
 $1 = HEAP32[$2 + 132 >> 2];
 $0 = HEAP32[$2 + 128 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 136 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 96 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 136 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 96 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 124 >> 2];
 $0 = HEAP32[$2 + 116 >> 2];
 $1 = HEAP32[$2 + 112 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 136 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 100 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 136 >> 2] + 24 >> 2] + Math_imul(HEAP32[$3 + 100 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 108 >> 2];
 __stack_pointer = $2 + 144 | 0;
 return Math_fround(HEAPF32[$2 + 32 >> 2] - HEAPF32[$3 + 84 >> 2]) < Math_fround(.004999999888241291) | 0;
}

function b2RopeJoint__SolveVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 128 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 124 >> 2] = $0;
 HEAP32[$2 + 120 >> 2] = $1;
 $3 = HEAP32[$2 + 124 >> 2];
 $4 = HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 96 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 112 >> 2] = $1;
 HEAP32[$2 + 116 >> 2] = $0;
 HEAPF32[$2 + 108 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 96 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 100 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 96 >> 2] = $0;
 HEAP32[$2 + 100 >> 2] = $1;
 HEAPF32[$2 + 92 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 100 >> 2], 12) | 0) + 8 >> 2];
 b2Cross_28float_2c_20b2Vec2_20const__29($2 + 76 | 0, HEAPF32[$2 + 108 >> 2], $3 + 112 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 84 | 0, $2 + 112 | 0, $2 + 76 | 0);
 b2Cross_28float_2c_20b2Vec2_20const__29($2 + 60 | 0, HEAPF32[$2 + 92 >> 2], $3 + 120 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 68 | 0, $2 + 96 | 0, $2 + 60 | 0);
 HEAPF32[$2 + 56 >> 2] = HEAPF32[$3 + 88 >> 2] - HEAPF32[$3 + 84 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 44 | 0, $2 + 68 | 0, $2 + 84 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 104 | 0, $2 + 44 | 0), 
 HEAPF32[wasm2js_i32$0 + 52 >> 2] = wasm2js_f32$0;
 if (HEAPF32[$2 + 56 >> 2] < Math_fround(0)) {
  HEAPF32[$2 + 52 >> 2] = Math_fround(HEAPF32[HEAP32[$2 + 120 >> 2] + 4 >> 2] * HEAPF32[$2 + 56 >> 2]) + HEAPF32[$2 + 52 >> 2];
 }
 HEAPF32[$2 + 40 >> 2] = Math_fround(-HEAPF32[$3 + 160 >> 2]) * HEAPF32[$2 + 52 >> 2];
 HEAPF32[$2 + 36 >> 2] = HEAPF32[$3 + 92 >> 2];
 wasm2js_i32$0 = $3, wasm2js_f32$0 = float_20b2Min_float__28float_2c_20float_29(Math_fround(0), Math_fround(HEAPF32[$3 + 92 >> 2] + HEAPF32[$2 + 40 >> 2])), 
 HEAPF32[wasm2js_i32$0 + 92 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 40 >> 2] = HEAPF32[$3 + 92 >> 2] - HEAPF32[$2 + 36 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 28 | 0, HEAPF32[$2 + 40 >> 2], $3 + 104 | 0);
 operator__28float_2c_20b2Vec2_20const__29($2 + 20 | 0, HEAPF32[$3 + 144 >> 2], $2 + 28 | 0);
 b2Vec2__operator___28b2Vec2_20const__29_1($2 + 112 | 0, $2 + 20 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$3 + 152 >> 2]) * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 112 | 0, $2 + 28 | 0)) + HEAPF32[$2 + 108 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 108 >> 2] = wasm2js_f32$0;
 operator__28float_2c_20b2Vec2_20const__29($2 + 12 | 0, HEAPF32[$3 + 148 >> 2], $2 + 28 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 96 | 0, $2 + 12 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$3 + 156 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 120 | 0, $2 + 28 | 0)) + HEAPF32[$2 + 92 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 92 >> 2] = wasm2js_f32$0;
 $0 = HEAP32[$2 + 116 >> 2];
 $1 = HEAP32[$2 + 112 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 96 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 96 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 108 >> 2];
 $1 = HEAP32[$2 + 100 >> 2];
 $0 = HEAP32[$2 + 96 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 100 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 120 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 100 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 92 >> 2];
 __stack_pointer = $2 + 128 | 0;
}

function __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 label$2: {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   if (!(HEAP32[$1 + 16 >> 2] != ($2 | 0) & HEAP32[$1 + 20 >> 2] != ($2 | 0))) {
    if (($3 | 0) != 1) {
     break label$2;
    }
    HEAP32[$1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1 + 32 >> 2] = $3;
   if (HEAP32[$1 + 44 >> 2] != 4) {
    $5 = $0 + 16 | 0;
    $3 = $5 + (HEAP32[$0 + 12 >> 2] << 3) | 0;
    label$7: {
     label$8: {
      while (1) {
       label$10: {
        if ($3 >>> 0 <= $5 >>> 0) {
         break label$10;
        }
        HEAP16[$1 + 52 >> 1] = 0;
        __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $2, 1, $4);
        if (HEAPU8[$1 + 54 | 0]) {
         break label$10;
        }
        label$11: {
         if (!HEAPU8[$1 + 53 | 0]) {
          break label$11;
         }
         if (HEAPU8[$1 + 52 | 0]) {
          $6 = 1;
          if (HEAP32[$1 + 24 >> 2] == 1) {
           break label$8;
          }
          $7 = 1;
          $8 = 1;
          if (HEAPU8[$0 + 8 | 0] & 2) {
           break label$11;
          }
          break label$8;
         }
         $7 = 1;
         $6 = $8;
         if (!(HEAP8[$0 + 8 | 0] & 1)) {
          break label$8;
         }
        }
        $5 = $5 + 8 | 0;
        continue;
       }
       break;
      }
      $6 = $8;
      $5 = 4;
      if (!($7 & 1)) {
       break label$7;
      }
     }
     $5 = 3;
    }
    HEAP32[$1 + 44 >> 2] = $5;
    if ($6 & 1) {
     break label$2;
    }
   }
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
    break label$2;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  $6 = HEAP32[$0 + 12 >> 2];
  $7 = $0 + 16 | 0;
  __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($7, $1, $2, $3, $4);
  $5 = $0 + 24 | 0;
  $6 = ($6 << 3) + $7 | 0;
  if ($5 >>> 0 >= $6 >>> 0) {
   break label$2;
  }
  $0 = HEAP32[$0 + 8 >> 2];
  if (!(!($0 & 2) & HEAP32[$1 + 36 >> 2] != 1)) {
   while (1) {
    if (HEAPU8[$1 + 54 | 0]) {
     break label$2;
    }
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
    $5 = $5 + 8 | 0;
    if ($6 >>> 0 > $5 >>> 0) {
     continue;
    }
    break;
   }
   break label$2;
  }
  if (!($0 & 1)) {
   while (1) {
    if (HEAPU8[$1 + 54 | 0] | HEAP32[$1 + 36 >> 2] == 1) {
     break label$2;
    }
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
    $5 = $5 + 8 | 0;
    if ($6 >>> 0 > $5 >>> 0) {
     continue;
    }
    break label$2;
   }
  }
  while (1) {
   if (HEAPU8[$1 + 54 | 0] | HEAP32[$1 + 36 >> 2] == 1 & HEAP32[$1 + 24 >> 2] == 1) {
    break label$2;
   }
   __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
   $5 = $5 + 8 | 0;
   if ($6 >>> 0 > $5 >>> 0) {
    continue;
   }
   break;
  }
 }
}

function b2ContactManager__Collide_28_29($0) {
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 60 >> 2] = $0;
 $0 = HEAP32[$1 + 60 >> 2];
 HEAP32[$1 + 56 >> 2] = HEAP32[$0 + 60 >> 2];
 while (1) {
  if (HEAP32[$1 + 56 >> 2]) {
   wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetFixtureA_28_29(HEAP32[$1 + 56 >> 2]), 
   HEAP32[wasm2js_i32$0 + 52 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetFixtureB_28_29(HEAP32[$1 + 56 >> 2]), 
   HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetChildIndexA_28_29_20const(HEAP32[$1 + 56 >> 2]), 
   HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetChildIndexB_28_29_20const(HEAP32[$1 + 56 >> 2]), 
   HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$1 + 52 >> 2]), 
   HEAP32[wasm2js_i32$0 + 36 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$1 + 48 >> 2]), 
   HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
   if (HEAP32[HEAP32[$1 + 56 >> 2] + 4 >> 2] & 8) {
    if (!(b2Body__ShouldCollide_28b2Body_20const__29_20const(HEAP32[$1 + 32 >> 2], HEAP32[$1 + 36 >> 2]) & 1)) {
     HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 56 >> 2];
     wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetNext_28_29(HEAP32[$1 + 28 >> 2]), 
     HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
     b2ContactManager__Destroy_28b2Contact__29($0, HEAP32[$1 + 28 >> 2]);
     continue;
    }
    label$5: {
     if (!HEAP32[$0 + 68 >> 2]) {
      break label$5;
     }
     $2 = HEAP32[$0 + 68 >> 2];
     if (FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, HEAP32[$1 + 52 >> 2], HEAP32[$1 + 48 >> 2]) & 1) {
      break label$5;
     }
     HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 56 >> 2];
     wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetNext_28_29(HEAP32[$1 + 24 >> 2]), 
     HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
     b2ContactManager__Destroy_28b2Contact__29($0, HEAP32[$1 + 24 >> 2]);
     continue;
    }
    $2 = HEAP32[$1 + 56 >> 2];
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] & -9;
   }
   $2 = 0;
   if (b2Body__IsAwake_28_29_20const(HEAP32[$1 + 36 >> 2]) & 1) {
    $2 = HEAP32[HEAP32[$1 + 36 >> 2] >> 2] != 0;
   }
   HEAP8[$1 + 23 | 0] = $2;
   $2 = 0;
   if (b2Body__IsAwake_28_29_20const(HEAP32[$1 + 32 >> 2]) & 1) {
    $2 = HEAP32[HEAP32[$1 + 32 >> 2] >> 2] != 0;
   }
   HEAP8[$1 + 22 | 0] = $2;
   if (!(HEAP8[$1 + 23 | 0] & 1 | HEAP8[$1 + 22 | 0] & 1)) {
    wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetNext_28_29(HEAP32[$1 + 56 >> 2]), 
    HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
    continue;
   }
   HEAP32[$1 + 16 >> 2] = HEAP32[(HEAP32[HEAP32[$1 + 52 >> 2] + 24 >> 2] + Math_imul(HEAP32[$1 + 44 >> 2], 28) | 0) + 24 >> 2];
   HEAP32[$1 + 12 >> 2] = HEAP32[(HEAP32[HEAP32[$1 + 48 >> 2] + 24 >> 2] + Math_imul(HEAP32[$1 + 40 >> 2], 28) | 0) + 24 >> 2];
   wasm2js_i32$0 = $1, wasm2js_i32$1 = b2BroadPhase__TestOverlap_28int_2c_20int_29_20const($0, HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2]) & 1, 
   HEAP8[wasm2js_i32$0 + 11 | 0] = wasm2js_i32$1;
   if (HEAP8[$1 + 11 | 0] & 1) {
    b2Contact__Update_28b2ContactListener__29(HEAP32[$1 + 56 >> 2], HEAP32[$0 + 72 >> 2]);
    wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetNext_28_29(HEAP32[$1 + 56 >> 2]), 
    HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
   } else {
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 56 >> 2];
    wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetNext_28_29(HEAP32[$1 + 4 >> 2]), 
    HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
    b2ContactManager__Destroy_28b2Contact__29($0, HEAP32[$1 + 4 >> 2]);
   }
   continue;
  }
  break;
 }
 __stack_pointer = $1 - -64 | 0;
}

function std____2__pair_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____20std____2____unwrap_and_dispatch_5babi_v160004_5d_std____2____overload_std____2____move_loop_std____2___ClassicAlgPolicy__2c_20std____2____move_trivial__2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_200__28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 80 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 76 >> 2] = $1;
 HEAP32[$4 + 72 >> 2] = $2;
 HEAP32[$4 + 68 >> 2] = $3;
 HEAP32[$4 + 56 >> 2] = HEAP32[$4 + 76 >> 2];
 HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 72 >> 2];
 std____2__pair_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____20std____2____unwrap_range_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29($4 + 60 | 0, HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2]);
 HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 60 >> 2];
 HEAP32[$4 + 32 >> 2] = HEAP32[($4 + 60 | 0) + 4 >> 2];
 HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 68 >> 2];
 wasm2js_i32$0 = $4, wasm2js_i32$1 = decltype_28std____2____unwrap_iter_impl_std____2__reverse_iterator_b2Vec2___2c_20false_____unwrap_28std__declval_std____2__reverse_iterator_b2Vec2____28_29_29_29_20std____2____unwrap_iter_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_b2Vec2___2c_20false__2c_200__28std____2__reverse_iterator_b2Vec2___29(HEAP32[$4 + 24 >> 2]), 
 HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
 std____2__pair_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____20std____2____move_loop_std____2___ClassicAlgPolicy___operator_28_29_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29_20const($4 + 44 | 0, $4 + 43 | 0, HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]);
 HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 76 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 44 >> 2];
 wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__reverse_iterator_b2Vec2___20std____2____rewrap_range_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2]), 
 HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
 HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 68 >> 2];
 HEAP32[$4 >> 2] = HEAP32[($4 + 44 | 0) + 4 >> 2];
 wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__reverse_iterator_b2Vec2___20std____2____rewrap_iter_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_b2Vec2___2c_20false___28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29(HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 std____2__pair_std____2____unwrap_ref_decay_std____2__reverse_iterator_b2Vec2_____type_2c_20std____2____unwrap_ref_decay_std____2__reverse_iterator_b2Vec2_____type__20std____2__make_pair_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____28std____2__reverse_iterator_b2Vec2_____2c_20std____2__reverse_iterator_b2Vec2_____29($0, $4 + 20 | 0, $4 + 8 | 0);
 __stack_pointer = $4 + 80 | 0;
}

function b2AABB__RayCast_28b2RayCastOutput__2c_20b2RayCastInput_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP32[$3 + 68 >> 2] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 $2 = HEAP32[$3 + 72 >> 2];
 HEAPF32[$3 + 60 >> 2] = -34028234663852886e22;
 HEAPF32[$3 + 56 >> 2] = 34028234663852886e22;
 $1 = HEAP32[$3 + 64 >> 2];
 $0 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 + 48 >> 2] = $0;
 HEAP32[$3 + 52 >> 2] = $1;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 40 | 0, HEAP32[$3 + 64 >> 2] + 8 | 0, HEAP32[$3 + 64 >> 2]);
 b2Abs_28b2Vec2_20const__29($3 + 32 | 0, $3 + 40 | 0);
 b2Vec2__b2Vec2_28_29($3 + 24 | 0);
 HEAP32[$3 + 20 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAP32[$3 + 20 >> 2] < 2) {
    label$4: {
     if (HEAPF32[b2Vec2__operator_28_29_28int_29($3 + 32 | 0, HEAP32[$3 + 20 >> 2]) >> 2] < Math_fround(1.1920928955078125e-7)) {
      if (!(HEAPF32[b2Vec2__operator_28_29_28int_29($3 + 48 | 0, HEAP32[$3 + 20 >> 2]) >> 2] < b2Vec2__operator_28_29_28int_29_20const($2, HEAP32[$3 + 20 >> 2]))) {
       if (!(b2Vec2__operator_28_29_28int_29_20const($2 + 8 | 0, HEAP32[$3 + 20 >> 2]) < HEAPF32[b2Vec2__operator_28_29_28int_29($3 + 48 | 0, HEAP32[$3 + 20 >> 2]) >> 2])) {
        break label$4;
       }
      }
      HEAP8[$3 + 79 | 0] = 0;
      break label$1;
     }
     wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(Math_fround(1) / HEAPF32[b2Vec2__operator_28_29_28int_29($3 + 40 | 0, HEAP32[$3 + 20 >> 2]) >> 2]), 
     HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
     wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(Math_fround(b2Vec2__operator_28_29_28int_29_20const($2, HEAP32[$3 + 20 >> 2]) - HEAPF32[b2Vec2__operator_28_29_28int_29($3 + 48 | 0, HEAP32[$3 + 20 >> 2]) >> 2]) * HEAPF32[$3 + 16 >> 2]), 
     HEAPF32[wasm2js_i32$0 + 12 >> 2] = wasm2js_f32$0;
     wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(Math_fround(b2Vec2__operator_28_29_28int_29_20const($2 + 8 | 0, HEAP32[$3 + 20 >> 2]) - HEAPF32[b2Vec2__operator_28_29_28int_29($3 + 48 | 0, HEAP32[$3 + 20 >> 2]) >> 2]) * HEAPF32[$3 + 16 >> 2]), 
     HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
     HEAPF32[$3 + 4 >> 2] = -1;
     if (HEAPF32[$3 + 12 >> 2] > HEAPF32[$3 + 8 >> 2]) {
      void_20b2Swap_float__28float__2c_20float__29($3 + 12 | 0, $3 + 8 | 0);
      HEAPF32[$3 + 4 >> 2] = 1;
     }
     if (HEAPF32[$3 + 12 >> 2] > HEAPF32[$3 + 60 >> 2]) {
      b2Vec2__SetZero_28_29($3 + 24 | 0);
      $4 = HEAPF32[$3 + 4 >> 2];
      wasm2js_i32$0 = b2Vec2__operator_28_29_28int_29($3 + 24 | 0, HEAP32[$3 + 20 >> 2]), 
      wasm2js_f32$0 = $4, HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
      HEAPF32[$3 + 60 >> 2] = HEAPF32[$3 + 12 >> 2];
     }
     wasm2js_i32$0 = $3, wasm2js_f32$0 = float_20b2Min_float__28float_2c_20float_29(HEAPF32[$3 + 56 >> 2], HEAPF32[$3 + 8 >> 2]), 
     HEAPF32[wasm2js_i32$0 + 56 >> 2] = wasm2js_f32$0;
     if (HEAPF32[$3 + 60 >> 2] > HEAPF32[$3 + 56 >> 2]) {
      HEAP8[$3 + 79 | 0] = 0;
      break label$1;
     }
    }
    HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAPF32[$3 + 60 >> 2] < Math_fround(0) | HEAPF32[HEAP32[$3 + 64 >> 2] + 16 >> 2] < HEAPF32[$3 + 60 >> 2]) {
   HEAP8[$3 + 79 | 0] = 0;
   break label$1;
  }
  HEAPF32[HEAP32[$3 + 68 >> 2] + 8 >> 2] = HEAPF32[$3 + 60 >> 2];
  $0 = HEAP32[$3 + 28 >> 2];
  $1 = HEAP32[$3 + 24 >> 2];
  $2 = $1;
  $1 = HEAP32[$3 + 68 >> 2];
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $0;
  HEAP8[$3 + 79 | 0] = 1;
 }
 __stack_pointer = $3 + 80 | 0;
 return HEAP8[$3 + 79 | 0] & 1;
}

function b2Body__b2Body_28b2BodyDef_20const__2c_20b2World__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 $1 = HEAP32[$3 + 8 >> 2];
 HEAP32[$3 + 12 >> 2] = $1;
 b2Transform__b2Transform_28_29($1 + 12 | 0);
 b2Sweep__b2Sweep_28_29($1 + 28 | 0);
 b2Vec2__b2Vec2_28_29($1 - -64 | 0);
 b2Vec2__b2Vec2_28_29($1 + 76 | 0);
 if (!(b2Vec2__IsValid_28_29_20const(HEAP32[$3 + 4 >> 2] + 4 | 0) & 1)) {
  __assert_fail(12312, 4121, 33, 1744);
  wasm2js_trap();
 }
 if (!(b2Vec2__IsValid_28_29_20const(HEAP32[$3 + 4 >> 2] + 16 | 0) & 1)) {
  __assert_fail(12261, 4121, 34, 1744);
  wasm2js_trap();
 }
 if (!(b2IsValid_28float_29(HEAPF32[HEAP32[$3 + 4 >> 2] + 12 >> 2]) & 1)) {
  __assert_fail(12173, 4121, 35, 1744);
  wasm2js_trap();
 }
 if (!(b2IsValid_28float_29(HEAPF32[HEAP32[$3 + 4 >> 2] + 24 >> 2]) & 1)) {
  __assert_fail(12135, 4121, 36, 1744);
  wasm2js_trap();
 }
 if (!(b2IsValid_28float_29(HEAPF32[HEAP32[$3 + 4 >> 2] + 32 >> 2]) & 1 & HEAPF32[HEAP32[$3 + 4 >> 2] + 32 >> 2] >= Math_fround(0))) {
  __assert_fail(8161, 4121, 37, 1744);
  wasm2js_trap();
 }
 if (!(b2IsValid_28float_29(HEAPF32[HEAP32[$3 + 4 >> 2] + 28 >> 2]) & 1 & HEAPF32[HEAP32[$3 + 4 >> 2] + 28 >> 2] >= Math_fround(0))) {
  __assert_fail(8221, 4121, 38, 1744);
  wasm2js_trap();
 }
 HEAP16[$1 + 4 >> 1] = 0;
 if (HEAP8[HEAP32[$3 + 4 >> 2] + 39 | 0] & 1) {
  HEAP16[$1 + 4 >> 1] = HEAPU16[$1 + 4 >> 1] | 8;
 }
 if (HEAP8[HEAP32[$3 + 4 >> 2] + 38 | 0] & 1) {
  HEAP16[$1 + 4 >> 1] = HEAPU16[$1 + 4 >> 1] | 16;
 }
 if (HEAP8[HEAP32[$3 + 4 >> 2] + 36 | 0] & 1) {
  HEAP16[$1 + 4 >> 1] = HEAPU16[$1 + 4 >> 1] | 4;
 }
 if (HEAP8[HEAP32[$3 + 4 >> 2] + 37 | 0] & 1) {
  HEAP16[$1 + 4 >> 1] = HEAPU16[$1 + 4 >> 1] | 2;
 }
 if (HEAP8[HEAP32[$3 + 4 >> 2] + 40 | 0] & 1) {
  HEAP16[$1 + 4 >> 1] = HEAPU16[$1 + 4 >> 1] | 32;
 }
 HEAP32[$1 + 88 >> 2] = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 $2 = HEAP32[$4 + 4 >> 2];
 $0 = HEAP32[$4 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $2;
 HEAP32[$1 + 16 >> 2] = $0;
 b2Rot__Set_28float_29($1 + 20 | 0, HEAPF32[HEAP32[$3 + 4 >> 2] + 12 >> 2]);
 b2Vec2__SetZero_28_29($1 + 28 | 0);
 $2 = HEAP32[$1 + 16 >> 2];
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 36 >> 2] = $0;
 HEAP32[$1 + 40 >> 2] = $2;
 $0 = HEAP32[$1 + 16 >> 2];
 $2 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 44 >> 2] = $2;
 HEAP32[$1 + 48 >> 2] = $0;
 HEAPF32[$1 + 52 >> 2] = HEAPF32[HEAP32[$3 + 4 >> 2] + 12 >> 2];
 HEAPF32[$1 + 56 >> 2] = HEAPF32[HEAP32[$3 + 4 >> 2] + 12 >> 2];
 HEAPF32[$1 + 60 >> 2] = 0;
 HEAP32[$1 + 108 >> 2] = 0;
 HEAP32[$1 + 112 >> 2] = 0;
 HEAP32[$1 + 92 >> 2] = 0;
 HEAP32[$1 + 96 >> 2] = 0;
 $4 = HEAP32[$3 + 4 >> 2];
 $0 = HEAP32[$4 + 16 >> 2];
 $2 = HEAP32[$4 + 20 >> 2];
 HEAP32[$1 + 64 >> 2] = $0;
 HEAP32[$1 + 68 >> 2] = $2;
 HEAPF32[$1 + 72 >> 2] = HEAPF32[HEAP32[$3 + 4 >> 2] + 24 >> 2];
 HEAPF32[$1 + 132 >> 2] = HEAPF32[HEAP32[$3 + 4 >> 2] + 28 >> 2];
 HEAPF32[$1 + 136 >> 2] = HEAPF32[HEAP32[$3 + 4 >> 2] + 32 >> 2];
 HEAPF32[$1 + 140 >> 2] = HEAPF32[HEAP32[$3 + 4 >> 2] + 48 >> 2];
 b2Vec2__SetZero_28_29($1 + 76 | 0);
 HEAPF32[$1 + 84 >> 2] = 0;
 HEAPF32[$1 + 144 >> 2] = 0;
 HEAP32[$1 >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
 label$14: {
  if (HEAP32[HEAP32[$3 + 4 >> 2] >> 2] == 2) {
   HEAPF32[$1 + 116 >> 2] = 1;
   HEAPF32[$1 + 120 >> 2] = 1;
   break label$14;
  }
  HEAPF32[$1 + 116 >> 2] = 0;
  HEAPF32[$1 + 120 >> 2] = 0;
 }
 HEAPF32[$1 + 124 >> 2] = 0;
 HEAPF32[$1 + 128 >> 2] = 0;
 HEAP32[$1 + 148 >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] + 44 >> 2];
 HEAP32[$1 + 100 >> 2] = 0;
 HEAP32[$1 + 104 >> 2] = 0;
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 + 12 >> 2];
}

function b2World__DrawJoint_28b2Joint__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 108 >> 2] = $0;
 HEAP32[$2 + 104 >> 2] = $1;
 $1 = HEAP32[$2 + 108 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Joint__GetBodyA_28_29(HEAP32[$2 + 104 >> 2]), 
 HEAP32[wasm2js_i32$0 + 100 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Joint__GetBodyB_28_29(HEAP32[$2 + 104 >> 2]), 
 HEAP32[wasm2js_i32$0 + 96 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Body__GetTransform_28_29_20const(HEAP32[$2 + 100 >> 2]), 
 HEAP32[wasm2js_i32$0 + 92 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Body__GetTransform_28_29_20const(HEAP32[$2 + 96 >> 2]), 
 HEAP32[wasm2js_i32$0 + 88 >> 2] = wasm2js_i32$1;
 $3 = HEAP32[$2 + 92 >> 2];
 $4 = HEAP32[$3 >> 2];
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 80 >> 2] = $4;
 HEAP32[$2 + 84 >> 2] = $0;
 $3 = HEAP32[$2 + 88 >> 2];
 $0 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 76 >> 2] = $4;
 $0 = HEAP32[$2 + 104 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($2 - -64 | 0, $0);
 $0 = HEAP32[$2 + 104 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($2 + 56 | 0, $0);
 b2Color__b2Color_28float_2c_20float_2c_20float_2c_20float_29($2 + 40 | 0, Math_fround(.5), Math_fround(.800000011920929), Math_fround(.800000011920929), Math_fround(1));
 label$1: {
  label$2: {
   switch (b2Joint__GetType_28_29_20const(HEAP32[$2 + 104 >> 2]) - 3 | 0) {
   case 0:
    $0 = HEAP32[$1 + 102980 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $2 - -64 | 0, $2 + 56 | 0, $2 + 40 | 0);
    break label$1;

   case 1:
    HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 104 >> 2];
    b2PulleyJoint__GetGroundAnchorA_28_29_20const($2 + 28 | 0, HEAP32[$2 + 36 >> 2]);
    b2PulleyJoint__GetGroundAnchorB_28_29_20const($2 + 20 | 0, HEAP32[$2 + 36 >> 2]);
    $0 = HEAP32[$1 + 102980 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $2 + 28 | 0, $2 - -64 | 0, $2 + 40 | 0);
    $0 = HEAP32[$1 + 102980 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $2 + 20 | 0, $2 + 56 | 0, $2 + 40 | 0);
    $0 = HEAP32[$1 + 102980 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $2 + 28 | 0, $2 + 20 | 0, $2 + 40 | 0);
    break label$1;

   case 2:
    b2Color__b2Color_28_29($2 + 4 | 0);
    b2Color__Set_28float_2c_20float_2c_20float_2c_20float_29($2 + 4 | 0, Math_fround(0), Math_fround(1), Math_fround(0), Math_fround(1));
    $0 = HEAP32[$1 + 102980 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $2 - -64 | 0, Math_fround(4), $2 + 4 | 0);
    $0 = HEAP32[$1 + 102980 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $2 + 56 | 0, Math_fround(4), $2 + 4 | 0);
    b2Color__Set_28float_2c_20float_2c_20float_2c_20float_29($2 + 4 | 0, Math_fround(.800000011920929), Math_fround(.800000011920929), Math_fround(.800000011920929), Math_fround(1));
    $0 = HEAP32[$1 + 102980 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $2 - -64 | 0, $2 + 56 | 0, $2 + 4 | 0);
    break label$1;

   default:
    break label$2;
   }
  }
  $0 = HEAP32[$1 + 102980 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $2 + 80 | 0, $2 - -64 | 0, $2 + 40 | 0);
  $0 = HEAP32[$1 + 102980 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $2 - -64 | 0, $2 + 56 | 0, $2 + 40 | 0);
  $0 = HEAP32[$1 + 102980 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $2 + 72 | 0, $2 + 56 | 0, $2 + 40 | 0);
 }
 __stack_pointer = $2 + 112 | 0;
}

function std____2__pair_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____20std____2____unwrap_and_dispatch_5babi_v160004_5d_std____2____overload_std____2____move_loop_std____2___ClassicAlgPolicy__2c_20std____2____move_trivial__2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_200__28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 80 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 76 >> 2] = $1;
 HEAP32[$4 + 72 >> 2] = $2;
 HEAP32[$4 + 68 >> 2] = $3;
 HEAP32[$4 + 56 >> 2] = HEAP32[$4 + 76 >> 2];
 HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 72 >> 2];
 std____2__pair_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____20std____2____unwrap_range_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29($4 + 60 | 0, HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2]);
 HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 60 >> 2];
 HEAP32[$4 + 32 >> 2] = HEAP32[($4 + 60 | 0) + 4 >> 2];
 HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 68 >> 2];
 wasm2js_i32$0 = $4, wasm2js_i32$1 = decltype_28std____2____unwrap_iter_impl_std____2__reverse_iterator_int___2c_20false_____unwrap_28std__declval_std____2__reverse_iterator_int____28_29_29_29_20std____2____unwrap_iter_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_int___2c_20false__2c_200__28std____2__reverse_iterator_int___29(HEAP32[$4 + 24 >> 2]), 
 HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
 std____2__pair_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____20std____2____move_loop_std____2___ClassicAlgPolicy___operator_28_29_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29_20const($4 + 44 | 0, $4 + 43 | 0, HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]);
 HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 76 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 44 >> 2];
 wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__reverse_iterator_int___20std____2____rewrap_range_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2]), 
 HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
 HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 68 >> 2];
 HEAP32[$4 >> 2] = HEAP32[($4 + 44 | 0) + 4 >> 2];
 wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__reverse_iterator_int___20std____2____rewrap_iter_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_int___2c_20false___28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29(HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 std____2__pair_std____2____unwrap_ref_decay_std____2__reverse_iterator_int_____type_2c_20std____2____unwrap_ref_decay_std____2__reverse_iterator_int_____type__20std____2__make_pair_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____28std____2__reverse_iterator_int_____2c_20std____2__reverse_iterator_int_____29($0, $4 + 20 | 0, $4 + 8 | 0);
 __stack_pointer = $4 + 80 | 0;
}

function b2PulleyJoint__SolveVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 108 >> 2] = $0;
 HEAP32[$2 + 104 >> 2] = $1;
 $3 = HEAP32[$2 + 108 >> 2];
 $4 = HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 120 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 96 >> 2] = $0;
 HEAP32[$2 + 100 >> 2] = $1;
 HEAPF32[$2 + 92 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 120 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 124 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 80 >> 2] = $1;
 HEAP32[$2 + 84 >> 2] = $0;
 HEAPF32[$2 + 76 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 124 >> 2], 12) | 0) + 8 >> 2];
 b2Cross_28float_2c_20b2Vec2_20const__29($2 + 60 | 0, HEAPF32[$2 + 92 >> 2], $3 + 144 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 68 | 0, $2 + 96 | 0, $2 + 60 | 0);
 b2Cross_28float_2c_20b2Vec2_20const__29($2 + 44 | 0, HEAPF32[$2 + 76 >> 2], $3 + 152 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 52 | 0, $2 + 80 | 0, $2 + 44 | 0);
 $5 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 128 | 0, $2 + 68 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$3 + 112 >> 2]) * b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 136 | 0, $2 + 52 | 0)) - $5), 
 HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 36 >> 2] = Math_fround(-HEAPF32[$3 + 192 >> 2]) * HEAPF32[$2 + 40 >> 2];
 HEAPF32[$3 + 116 >> 2] = HEAPF32[$3 + 116 >> 2] + HEAPF32[$2 + 36 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 28 | 0, Math_fround(-HEAPF32[$2 + 36 >> 2]), $3 + 128 | 0);
 operator__28float_2c_20b2Vec2_20const__29($2 + 20 | 0, Math_fround(Math_fround(-HEAPF32[$3 + 112 >> 2]) * HEAPF32[$2 + 36 >> 2]), $3 + 136 | 0);
 operator__28float_2c_20b2Vec2_20const__29($2 + 12 | 0, HEAPF32[$3 + 176 >> 2], $2 + 28 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 96 | 0, $2 + 12 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$3 + 184 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 144 | 0, $2 + 28 | 0)) + HEAPF32[$2 + 92 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 92 >> 2] = wasm2js_f32$0;
 operator__28float_2c_20b2Vec2_20const__29($2 + 4 | 0, HEAPF32[$3 + 180 >> 2], $2 + 20 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 80 | 0, $2 + 4 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$3 + 188 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 152 | 0, $2 + 20 | 0)) + HEAPF32[$2 + 76 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 76 >> 2] = wasm2js_f32$0;
 $1 = HEAP32[$2 + 100 >> 2];
 $0 = HEAP32[$2 + 96 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 120 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 120 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 92 >> 2];
 $0 = HEAP32[$2 + 84 >> 2];
 $1 = HEAP32[$2 + 80 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 124 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 124 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 76 >> 2];
 __stack_pointer = $2 + 112 | 0;
}

function b2SeparationFunction__Evaluate_28int_2c_20int_2c_20float_29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $4 = __stack_pointer - 208 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 200 >> 2] = $0;
 HEAP32[$4 + 196 >> 2] = $1;
 HEAP32[$4 + 192 >> 2] = $2;
 HEAPF32[$4 + 188 >> 2] = $3;
 $2 = HEAP32[$4 + 200 >> 2];
 b2Transform__b2Transform_28_29($4 + 172 | 0);
 b2Transform__b2Transform_28_29($4 + 156 | 0);
 b2Sweep__GetTransform_28b2Transform__2c_20float_29_20const($2 + 8 | 0, $4 + 172 | 0, HEAPF32[$4 + 188 >> 2]);
 b2Sweep__GetTransform_28b2Transform__2c_20float_29_20const($2 + 44 | 0, $4 + 156 | 0, HEAPF32[$4 + 188 >> 2]);
 label$1: {
  label$2: {
   switch (HEAP32[$2 + 80 >> 2]) {
   case 0:
    $5 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$2 >> 2], HEAP32[$4 + 196 >> 2]);
    $1 = HEAP32[$5 >> 2];
    $0 = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 144 >> 2] = $1;
    HEAP32[$4 + 148 >> 2] = $0;
    $5 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$2 + 4 >> 2], HEAP32[$4 + 192 >> 2]);
    $0 = HEAP32[$5 >> 2];
    $1 = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 136 >> 2] = $0;
    HEAP32[$4 + 140 >> 2] = $1;
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 128 | 0, $4 + 172 | 0, $4 + 144 | 0);
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 120 | 0, $4 + 156 | 0, $4 + 136 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 108 | 0, $4 + 120 | 0, $4 + 128 | 0);
    wasm2js_i32$0 = $4, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 108 | 0, $2 + 92 | 0), 
    HEAPF32[wasm2js_i32$0 + 116 >> 2] = wasm2js_f32$0;
    HEAPF32[$4 + 204 >> 2] = HEAPF32[$4 + 116 >> 2];
    break label$1;

   case 1:
    b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($4 + 100 | 0, $4 + 180 | 0, $2 + 92 | 0);
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 92 | 0, $4 + 172 | 0, $2 + 84 | 0);
    $5 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$2 + 4 >> 2], HEAP32[$4 + 192 >> 2]);
    $1 = HEAP32[$5 >> 2];
    $0 = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 80 >> 2] = $1;
    HEAP32[$4 + 84 >> 2] = $0;
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 72 | 0, $4 + 156 | 0, $4 + 80 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 60 | 0, $4 + 72 | 0, $4 + 92 | 0);
    wasm2js_i32$0 = $4, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 60 | 0, $4 + 100 | 0), 
    HEAPF32[wasm2js_i32$0 + 68 >> 2] = wasm2js_f32$0;
    HEAPF32[$4 + 204 >> 2] = HEAPF32[$4 + 68 >> 2];
    break label$1;

   case 2:
    b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($4 + 52 | 0, $4 + 164 | 0, $2 + 92 | 0);
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 44 | 0, $4 + 156 | 0, $2 + 84 | 0);
    $5 = b2DistanceProxy__GetVertex_28int_29_20const(HEAP32[$2 >> 2], HEAP32[$4 + 196 >> 2]);
    $0 = HEAP32[$5 >> 2];
    $1 = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 32 >> 2] = $0;
    HEAP32[$4 + 36 >> 2] = $1;
    b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 24 | 0, $4 + 172 | 0, $4 + 32 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 12 | 0, $4 + 24 | 0, $4 + 44 | 0);
    wasm2js_i32$0 = $4, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 12 | 0, $4 + 52 | 0), 
    HEAPF32[wasm2js_i32$0 + 20 >> 2] = wasm2js_f32$0;
    HEAPF32[$4 + 204 >> 2] = HEAPF32[$4 + 20 >> 2];
    break label$1;

   default:
    break label$2;
   }
  }
  __assert_fail(8975, 5237, 243, 8755);
  wasm2js_trap();
 }
 __stack_pointer = $4 + 208 | 0;
 return HEAPF32[$4 + 204 >> 2];
}

function b2PolygonShape__RayCast_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAP32[$5 + 100 >> 2] = $1;
 HEAP32[$5 + 96 >> 2] = $2;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP32[$5 + 88 >> 2] = $4;
 $0 = HEAP32[$5 + 104 >> 2];
 $1 = HEAP32[$5 + 92 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 72 | 0, HEAP32[$5 + 96 >> 2], HEAP32[$5 + 92 >> 2]);
 b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($5 + 80 | 0, $1 + 8 | 0, $5 + 72 | 0);
 $1 = HEAP32[$5 + 92 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 56 | 0, HEAP32[$5 + 96 >> 2] + 8 | 0, HEAP32[$5 + 92 >> 2]);
 b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($5 - -64 | 0, $1 + 8 | 0, $5 + 56 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 48 | 0, $5 - -64 | 0, $5 + 80 | 0);
 HEAPF32[$5 + 44 >> 2] = 0;
 HEAPF32[$5 + 40 >> 2] = HEAPF32[HEAP32[$5 + 96 >> 2] + 16 >> 2];
 HEAP32[$5 + 36 >> 2] = -1;
 HEAP32[$5 + 32 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAP32[$5 + 32 >> 2] < HEAP32[$0 + 148 >> 2]) {
    $1 = HEAP32[$5 + 32 >> 2] << 3;
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 20 | 0, ($0 + 20 | 0) + (HEAP32[$5 + 32 >> 2] << 3) | 0, $5 + 80 | 0);
    wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + ($0 + 84 | 0) | 0, $5 + 20 | 0), 
    HEAPF32[wasm2js_i32$0 + 28 >> 2] = wasm2js_f32$0;
    wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29(($0 + 84 | 0) + (HEAP32[$5 + 32 >> 2] << 3) | 0, $5 + 48 | 0), 
    HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
    label$4: {
     if (HEAPF32[$5 + 16 >> 2] == Math_fround(0)) {
      if (HEAPF32[$5 + 28 >> 2] < Math_fround(0)) {
       HEAP8[$5 + 111 | 0] = 0;
       break label$1;
      }
      break label$4;
     }
     label$7: {
      if (!(!(HEAPF32[$5 + 16 >> 2] < Math_fround(0)) | !(HEAPF32[$5 + 28 >> 2] < Math_fround(HEAPF32[$5 + 44 >> 2] * HEAPF32[$5 + 16 >> 2])))) {
       HEAPF32[$5 + 44 >> 2] = HEAPF32[$5 + 28 >> 2] / HEAPF32[$5 + 16 >> 2];
       HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 32 >> 2];
       break label$7;
      }
      if (!(!(HEAPF32[$5 + 16 >> 2] > Math_fround(0)) | !(HEAPF32[$5 + 28 >> 2] < Math_fround(HEAPF32[$5 + 40 >> 2] * HEAPF32[$5 + 16 >> 2])))) {
       HEAPF32[$5 + 40 >> 2] = HEAPF32[$5 + 28 >> 2] / HEAPF32[$5 + 16 >> 2];
      }
     }
    }
    if (HEAPF32[$5 + 40 >> 2] < HEAPF32[$5 + 44 >> 2]) {
     HEAP8[$5 + 111 | 0] = 0;
     break label$1;
    } else {
     HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 32 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  if (!(HEAPF32[$5 + 44 >> 2] <= HEAPF32[HEAP32[$5 + 96 >> 2] + 16 >> 2] & HEAPF32[$5 + 44 >> 2] >= Math_fround(0))) {
   __assert_fail(6471, 5651, 334, 1955);
   wasm2js_trap();
  }
  if (HEAP32[$5 + 36 >> 2] >= 0) {
   HEAPF32[HEAP32[$5 + 100 >> 2] + 8 >> 2] = HEAPF32[$5 + 44 >> 2];
   b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($5 + 8 | 0, HEAP32[$5 + 92 >> 2] + 8 | 0, ($0 + 84 | 0) + (HEAP32[$5 + 36 >> 2] << 3) | 0);
   $2 = HEAP32[$5 + 12 >> 2];
   $0 = HEAP32[$5 + 8 >> 2];
   $1 = $0;
   $0 = HEAP32[$5 + 100 >> 2];
   HEAP32[$0 >> 2] = $1;
   HEAP32[$0 + 4 >> 2] = $2;
   HEAP8[$5 + 111 | 0] = 1;
   break label$1;
  }
  HEAP8[$5 + 111 | 0] = 0;
 }
 __stack_pointer = $5 + 112 | 0;
 return HEAP8[$5 + 111 | 0] & 1;
}

function b2DynamicTree__MoveProxy_28int_2c_20b2AABB_20const__2c_20b2Vec2_20const__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 128 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 120 >> 2] = $0;
 HEAP32[$4 + 116 >> 2] = $1;
 HEAP32[$4 + 112 >> 2] = $2;
 HEAP32[$4 + 108 >> 2] = $3;
 $5 = HEAP32[$4 + 120 >> 2];
 if (!(HEAP32[$4 + 116 >> 2] < HEAP32[$5 + 12 >> 2] & HEAP32[$4 + 116 >> 2] >= 0)) {
  __assert_fail(1383, 5858, 137, 1091);
  wasm2js_trap();
 }
 if (!(b2TreeNode__IsLeaf_28_29_20const(HEAP32[$5 + 4 >> 2] + Math_imul(HEAP32[$4 + 116 >> 2], 40) | 0) & 1)) {
  __assert_fail(12235, 5858, 139, 1091);
  wasm2js_trap();
 }
 b2AABB__b2AABB_28_29($4 + 92 | 0);
 b2Vec2__b2Vec2_28float_2c_20float_29($4 + 84 | 0, Math_fround(.10000000149011612), Math_fround(.10000000149011612));
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 76 | 0, HEAP32[$4 + 112 >> 2], $4 + 84 | 0);
 $0 = HEAP32[$4 + 80 >> 2];
 $1 = HEAP32[$4 + 76 >> 2];
 $2 = $1;
 $1 = $4 + 92 | 0;
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $0;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($4 + 68 | 0, HEAP32[$4 + 112 >> 2] + 8 | 0, $4 + 84 | 0);
 $1 = HEAP32[$4 + 72 >> 2];
 $0 = HEAP32[$4 + 68 >> 2];
 $2 = $0;
 $0 = $4 + 92 | 0;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $1;
 operator__28float_2c_20b2Vec2_20const__29($4 + 60 | 0, Math_fround(4), HEAP32[$4 + 108 >> 2]);
 label$4: {
  if (HEAPF32[$4 + 60 >> 2] < Math_fround(0)) {
   HEAPF32[$4 + 92 >> 2] = HEAPF32[$4 + 92 >> 2] + HEAPF32[$4 + 60 >> 2];
   break label$4;
  }
  HEAPF32[$4 + 100 >> 2] = HEAPF32[$4 + 100 >> 2] + HEAPF32[$4 + 60 >> 2];
 }
 label$6: {
  if (HEAPF32[$4 + 64 >> 2] < Math_fround(0)) {
   HEAPF32[$4 + 96 >> 2] = HEAPF32[$4 + 96 >> 2] + HEAPF32[$4 + 64 >> 2];
   break label$6;
  }
  HEAPF32[$4 + 104 >> 2] = HEAPF32[$4 + 104 >> 2] + HEAPF32[$4 + 64 >> 2];
 }
 HEAP32[$4 + 56 >> 2] = HEAP32[$5 + 4 >> 2] + Math_imul(HEAP32[$4 + 116 >> 2], 40);
 label$8: {
  if (b2AABB__Contains_28b2AABB_20const__29_20const(HEAP32[$4 + 56 >> 2], HEAP32[$4 + 112 >> 2]) & 1) {
   b2AABB__b2AABB_28_29($4 + 40 | 0);
   operator__28float_2c_20b2Vec2_20const__29($4 + 24 | 0, Math_fround(4), $4 + 84 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 32 | 0, $4 + 92 | 0, $4 + 24 | 0);
   $0 = HEAP32[$4 + 36 >> 2];
   $1 = HEAP32[$4 + 32 >> 2];
   $2 = $1;
   $1 = $4 + 40 | 0;
   HEAP32[$1 >> 2] = $2;
   HEAP32[$1 + 4 >> 2] = $0;
   operator__28float_2c_20b2Vec2_20const__29($4 + 8 | 0, Math_fround(4), $4 + 84 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($4 + 16 | 0, $4 + 100 | 0, $4 + 8 | 0);
   $1 = HEAP32[$4 + 20 >> 2];
   $0 = HEAP32[$4 + 16 >> 2];
   $2 = $0;
   $0 = $4 + 40 | 0;
   HEAP32[$0 + 8 >> 2] = $2;
   HEAP32[$0 + 12 >> 2] = $1;
   if (b2AABB__Contains_28b2AABB_20const__29_20const($4 + 40 | 0, HEAP32[$4 + 56 >> 2]) & 1) {
    HEAP8[$4 + 127 | 0] = 0;
    break label$8;
   }
  }
  b2DynamicTree__RemoveLeaf_28int_29($5, HEAP32[$4 + 116 >> 2]);
  $0 = HEAP32[$4 + 96 >> 2];
  $1 = HEAP32[$4 + 92 >> 2];
  $3 = $1;
  $2 = HEAP32[$5 + 4 >> 2] + Math_imul(HEAP32[$4 + 116 >> 2], 40) | 0;
  $1 = $2;
  HEAP32[$1 >> 2] = $3;
  HEAP32[$1 + 4 >> 2] = $0;
  $1 = HEAP32[$4 + 104 >> 2];
  $0 = HEAP32[$4 + 100 >> 2];
  $3 = $0;
  $0 = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $1;
  b2DynamicTree__InsertLeaf_28int_29($5, HEAP32[$4 + 116 >> 2]);
  HEAP8[(HEAP32[$5 + 4 >> 2] + Math_imul(HEAP32[$4 + 116 >> 2], 40) | 0) + 36 | 0] = 1;
  HEAP8[$4 + 127 | 0] = 1;
 }
 __stack_pointer = $4 + 128 | 0;
 return HEAP8[$4 + 127 | 0] & 1;
}

function b2DistanceJoint__SolveVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 108 >> 2] = $0;
 HEAP32[$2 + 104 >> 2] = $1;
 $3 = HEAP32[$2 + 108 >> 2];
 $4 = HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 96 >> 2] = $0;
 HEAP32[$2 + 100 >> 2] = $1;
 HEAPF32[$2 + 92 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0) + 8 >> 2];
 $4 = HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 112 >> 2], 12) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 80 >> 2] = $1;
 HEAP32[$2 + 84 >> 2] = $0;
 HEAPF32[$2 + 76 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 112 >> 2], 12) | 0) + 8 >> 2];
 b2Cross_28float_2c_20b2Vec2_20const__29($2 + 60 | 0, HEAPF32[$2 + 92 >> 2], $3 + 124 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 68 | 0, $2 + 96 | 0, $2 + 60 | 0);
 b2Cross_28float_2c_20b2Vec2_20const__29($2 + 44 | 0, HEAPF32[$2 + 76 >> 2], $3 + 132 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 52 | 0, $2 + 80 | 0, $2 + 44 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 32 | 0, $2 + 52 | 0, $2 + 68 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 116 | 0, $2 + 32 | 0), 
 HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
 HEAPF32[$2 + 28 >> 2] = Math_fround(-HEAPF32[$3 + 172 >> 2]) * Math_fround(Math_fround(HEAPF32[$3 + 96 >> 2] * HEAPF32[$3 + 100 >> 2]) + Math_fround(HEAPF32[$2 + 40 >> 2] + HEAPF32[$3 + 76 >> 2]));
 HEAPF32[$3 + 100 >> 2] = HEAPF32[$3 + 100 >> 2] + HEAPF32[$2 + 28 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($2 + 20 | 0, HEAPF32[$2 + 28 >> 2], $3 + 116 | 0);
 operator__28float_2c_20b2Vec2_20const__29($2 + 12 | 0, HEAPF32[$3 + 156 >> 2], $2 + 20 | 0);
 b2Vec2__operator___28b2Vec2_20const__29_1($2 + 96 | 0, $2 + 12 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$3 + 164 >> 2]) * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 124 | 0, $2 + 20 | 0)) + HEAPF32[$2 + 92 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 92 >> 2] = wasm2js_f32$0;
 operator__28float_2c_20b2Vec2_20const__29($2 + 4 | 0, HEAPF32[$3 + 160 >> 2], $2 + 20 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 80 | 0, $2 + 4 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$3 + 168 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 132 | 0, $2 + 20 | 0)) + HEAPF32[$2 + 76 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 76 >> 2] = wasm2js_f32$0;
 $1 = HEAP32[$2 + 100 >> 2];
 $0 = HEAP32[$2 + 96 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAPF32[(HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 108 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 92 >> 2];
 $0 = HEAP32[$2 + 84 >> 2];
 $1 = HEAP32[$2 + 80 >> 2];
 $4 = $1;
 $1 = HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 112 >> 2], 12) | 0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAPF32[(HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 112 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 76 >> 2];
 __stack_pointer = $2 + 112 | 0;
}

function __trunctfdf2($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $12 = __stack_pointer - 32 | 0;
 __stack_pointer = $12;
 $6 = $3;
 $8 = $6 & 2147483647;
 $9 = $8;
 $4 = $2;
 $2 = $4;
 $6 = $4;
 $5 = $6;
 $7 = 1006698496;
 $7 = $8 - $7 | 0;
 $6 = $7;
 $7 = $8;
 $5 = 1140785152;
 $5 = $7 - $5 | 0;
 $8 = $5;
 $5 = $6;
 label$1: {
  if (($8 | 0) == ($5 | 0) & $4 >>> 0 < $4 >>> 0 | $5 >>> 0 < $8 >>> 0) {
   $7 = $3;
   $5 = $7 << 4 | $2 >>> 28;
   $4 = $5;
   $5 = $1;
   $8 = $5 >>> 28 | 0;
   $5 = $2 << 4;
   $2 = $8 | $5;
   $7 = $10;
   $7 = $4 | $7;
   $9 = $7;
   $7 = $1;
   $5 = $7 & 268435455;
   $1 = $5;
   $7 = $0;
   if (($5 | 0) == 134217728 & ($7 | 0) != 0 | $5 >>> 0 > 134217728) {
    $7 = $9;
    $4 = $7 + 1073741824 | 0;
    $8 = $2;
    $6 = $8 + 1 | 0;
    $4 = $6 ? $4 : $4 + 1 | 0;
    $11 = $6;
    $10 = $4;
    break label$1;
   }
   $7 = $2;
   $5 = $7;
   $11 = $5;
   $4 = $9;
   $6 = -1073741824;
   $6 = $4 - $6 | 0;
   $10 = $6;
   $4 = $0;
   $6 = $1;
   if ($4 | ($6 | 0) != 134217728) {
    break label$1;
   }
   $4 = $11;
   $7 = $2 & 1;
   $8 = $4 + $7 | 0;
   $6 = $10;
   $4 = $13;
   $5 = $6 + $4 | 0;
   $11 = $8;
   $5 = $7 >>> 0 > $8 >>> 0 ? $5 + 1 | 0 : $5;
   $10 = $5;
   break label$1;
  }
  $5 = $1;
  $4 = !($5 | $0);
  $5 = $9;
  $5 = $5 >>> 0 < 2147418112;
  $6 = $9;
  if (!(!$2 & ($6 | 0) == 2147418112 ? $4 : $5)) {
   $7 = $3;
   $4 = $2;
   $6 = $7 << 4 | $4 >>> 28;
   $0 = $4 << 4;
   $4 = $6;
   $6 = $1;
   $5 = $6 >>> 28 | 0;
   $7 = $10;
   $7 = $4 | $7;
   $6 = $0;
   $4 = $6 | $5;
   $6 = $7 & 524287;
   $11 = $4;
   $4 = $6 | 2146959360;
   $10 = $4;
   break label$1;
  }
  $10 = 2146435072;
  $4 = $9;
  if ($4 >>> 0 > 1140785151) {
   break label$1;
  }
  $10 = 0;
  $6 = $9;
  $7 = $6 >>> 16 | 0;
  if ($7 >>> 0 < 15249) {
   break label$1;
  }
  $4 = $3;
  $5 = $4 & 65535;
  $6 = $2;
  $6 = $5 | 65536;
  $9 = $6;
  $6 = $1;
  $4 = $9;
  __ashlti3($12 + 16 | 0, $0, $6, $2, $4, $7 - 15233 | 0);
  $4 = $6;
  $6 = $9;
  __lshrti3($12, $0, $4, $2, $6, 15361 - $7 | 0);
  $5 = $12;
  $6 = HEAP32[$5 + 8 >> 2];
  $4 = HEAP32[$5 + 12 >> 2];
  $1 = $6 << 4;
  $6 = $4 << 4 | $6 >>> 28;
  $0 = $6;
  $4 = $12;
  $6 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  $9 = $5;
  $2 = $6;
  $7 = $5 >>> 28 | 0;
  $5 = $1;
  $11 = $5 | $7;
  $6 = $0;
  $4 = $13;
  $4 = $6 | $4;
  $10 = $4;
  $6 = $12;
  $4 = HEAP32[$6 + 16 >> 2];
  $0 = $4;
  $5 = HEAP32[$6 + 20 >> 2];
  $1 = $5;
  $5 = HEAP32[$6 + 24 >> 2];
  $7 = $5;
  $4 = HEAP32[$6 + 28 >> 2];
  $5 = $4;
  $4 = $1;
  $5 = $4 | $5;
  $6 = $0;
  $4 = $6 | $7;
  $0 = ($5 | $4) != 0;
  $4 = $9;
  $5 = $4 & 268435455;
  $7 = $2;
  $6 = $7;
  $4 = $0;
  $2 = $6 | $4;
  $7 = $5;
  $9 = $5;
  $5 = $2;
  if (($7 | 0) == 134217728 & ($5 | 0) != 0 | $7 >>> 0 > 134217728) {
   $5 = $10;
   $6 = $11;
   $4 = $6 + 1 | 0;
   $8 = $4 ? $5 : $5 + 1 | 0;
   $11 = $4;
   $10 = $8;
   break label$1;
  }
  $8 = $9;
  if ($2 | ($8 | 0) != 134217728) {
   break label$1;
  }
  $4 = $11;
  $6 = $4;
  $5 = $6 & 1;
  $7 = $6 + $5 | 0;
  $8 = 0;
  $4 = $10;
  $4 = $8 + $4 | 0;
  $11 = $7;
  $4 = $7 >>> 0 < $6 >>> 0 ? $4 + 1 | 0 : $4;
  $10 = $4;
 }
 __stack_pointer = $12 + 32 | 0;
 $4 = $3;
 $5 = $4 & -2147483648;
 $6 = 0;
 $4 = $11;
 wasm2js_scratch_store_i32(0, $6 | $4);
 $8 = $5;
 $5 = $10;
 $8 = $8 | $5;
 wasm2js_scratch_store_i32(1, $8 | 0);
 return +wasm2js_scratch_load_f64();
}

function b2Body__ResetMassData_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 76 >> 2] = $0;
 $1 = HEAP32[$2 + 76 >> 2];
 HEAPF32[$1 + 116 >> 2] = 0;
 HEAPF32[$1 + 120 >> 2] = 0;
 HEAPF32[$1 + 124 >> 2] = 0;
 HEAPF32[$1 + 128 >> 2] = 0;
 b2Vec2__SetZero_28_29($1 + 28 | 0);
 label$1: {
  if (!(HEAP32[$1 >> 2] != 1 ? HEAP32[$1 >> 2] : 0)) {
   $3 = HEAP32[$1 + 16 >> 2];
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$1 + 36 >> 2] = $0;
   HEAP32[$1 + 40 >> 2] = $3;
   $0 = HEAP32[$1 + 16 >> 2];
   $3 = HEAP32[$1 + 12 >> 2];
   HEAP32[$1 + 44 >> 2] = $3;
   HEAP32[$1 + 48 >> 2] = $0;
   HEAPF32[$1 + 52 >> 2] = HEAPF32[$1 + 56 >> 2];
   break label$1;
  }
  if (HEAP32[$1 >> 2] != 2) {
   __assert_fail(1719, 4121, 306, 10229);
   wasm2js_trap();
  }
  $3 = HEAP32[7667];
  $0 = HEAP32[7666];
  HEAP32[$2 + 64 >> 2] = $0;
  HEAP32[$2 + 68 >> 2] = $3;
  HEAP32[$2 + 60 >> 2] = HEAP32[$1 + 100 >> 2];
  while (1) {
   if (HEAP32[$2 + 60 >> 2]) {
    if (HEAPF32[HEAP32[$2 + 60 >> 2] >> 2] != Math_fround(0)) {
     b2MassData__b2MassData_28_29($2 + 44 | 0);
     b2Fixture__GetMassData_28b2MassData__29_20const(HEAP32[$2 + 60 >> 2], $2 + 44 | 0);
     HEAPF32[$1 + 116 >> 2] = HEAPF32[$1 + 116 >> 2] + HEAPF32[$2 + 44 >> 2];
     operator__28float_2c_20b2Vec2_20const__29($2 + 36 | 0, HEAPF32[$2 + 44 >> 2], $2 + 48 | 0);
     b2Vec2__operator___28b2Vec2_20const__29($2 - -64 | 0, $2 + 36 | 0);
     HEAPF32[$1 + 124 >> 2] = HEAPF32[$1 + 124 >> 2] + HEAPF32[$2 + 56 >> 2];
    }
    HEAP32[$2 + 60 >> 2] = HEAP32[HEAP32[$2 + 60 >> 2] + 4 >> 2];
    continue;
   }
   break;
  }
  if (HEAPF32[$1 + 116 >> 2] > Math_fround(0)) {
   HEAPF32[$1 + 120 >> 2] = Math_fround(1) / HEAPF32[$1 + 116 >> 2];
   b2Vec2__operator___28float_29($2 - -64 | 0, HEAPF32[$1 + 120 >> 2]);
  }
  label$9: {
   if (!(!(HEAPF32[$1 + 124 >> 2] > Math_fround(0)) | HEAPU16[$1 + 4 >> 1] & 16)) {
    $0 = $2 - -64 | 0;
    wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$1 + 116 >> 2]) * b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $0)) + HEAPF32[$1 + 124 >> 2]), 
    HEAPF32[wasm2js_i32$0 + 124 >> 2] = wasm2js_f32$0;
    if (!(HEAPF32[$1 + 124 >> 2] > Math_fround(0))) {
     __assert_fail(7946, 4121, 335, 10229);
     wasm2js_trap();
    }
    HEAPF32[$1 + 128 >> 2] = Math_fround(1) / HEAPF32[$1 + 124 >> 2];
    break label$9;
   }
   HEAPF32[$1 + 124 >> 2] = 0;
   HEAPF32[$1 + 128 >> 2] = 0;
  }
  $0 = HEAP32[$1 + 48 >> 2];
  $3 = HEAP32[$1 + 44 >> 2];
  HEAP32[$2 + 24 >> 2] = $3;
  HEAP32[$2 + 28 >> 2] = $0;
  $3 = HEAP32[$2 + 68 >> 2];
  $0 = HEAP32[$2 + 64 >> 2];
  HEAP32[$1 + 28 >> 2] = $0;
  HEAP32[$1 + 32 >> 2] = $3;
  b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($2 + 16 | 0, $1 + 12 | 0, $1 + 28 | 0);
  $0 = HEAP32[$2 + 20 >> 2];
  $3 = HEAP32[$2 + 16 >> 2];
  HEAP32[$1 + 44 >> 2] = $3;
  HEAP32[$1 + 48 >> 2] = $0;
  $3 = HEAP32[$1 + 48 >> 2];
  $0 = HEAP32[$1 + 44 >> 2];
  HEAP32[$1 + 36 >> 2] = $0;
  HEAP32[$1 + 40 >> 2] = $3;
  $4 = HEAPF32[$1 + 72 >> 2];
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2, $1 + 44 | 0, $2 + 24 | 0);
  b2Cross_28float_2c_20b2Vec2_20const__29($2 + 8 | 0, $4, $2);
  b2Vec2__operator___28b2Vec2_20const__29($1 - -64 | 0, $2 + 8 | 0);
 }
 __stack_pointer = $2 + 80 | 0;
}

function std____2__pair_std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__2c_20bool__20std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______emplace_unique_key_args_b2Fixture__2c_20b2Fixture__20const___28b2Fixture__20const__2c_20b2Fixture__20const__29($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $1;
 HEAP32[$4 + 40 >> 2] = $2;
 HEAP32[$4 + 36 >> 2] = $3;
 $1 = HEAP32[$4 + 44 >> 2];
 wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2____tree_node_base_void_____20std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______find_equal_b2Fixture___28std____2____tree_end_node_std____2____tree_node_base_void_______2c_20b2Fixture__20const__29($1, $4 + 32 | 0, HEAP32[$4 + 40 >> 2]), 
 HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
 HEAP32[$4 + 24 >> 2] = HEAP32[HEAP32[$4 + 28 >> 2] >> 2];
 HEAP8[$4 + 23 | 0] = 0;
 if (!HEAP32[HEAP32[$4 + 28 >> 2] >> 2]) {
  std____2__unique_ptr_std____2____tree_node_b2Fixture__2c_20void___2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______20std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______construct_node_b2Fixture__20const___28b2Fixture__20const__29($4 + 8 | 0, $1, HEAP32[$4 + 36 >> 2]);
  std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______insert_node_at_28std____2____tree_end_node_std____2____tree_node_base_void______2c_20std____2____tree_node_base_void_____2c_20std____2____tree_node_base_void____29($1, HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2], std____2__unique_ptr_std____2____tree_node_b2Fixture__2c_20void___2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______get_5babi_v160004_5d_28_29_20const($4 + 8 | 0));
  wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__unique_ptr_std____2____tree_node_b2Fixture__2c_20void___2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______release_5babi_v160004_5d_28_29($4 + 8 | 0), 
  HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
  HEAP8[$4 + 23 | 0] = 1;
  std____2__unique_ptr_std____2____tree_node_b2Fixture__2c_20void___2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void________unique_ptr_5babi_v160004_5d_28_29($4 + 8 | 0);
 }
 std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long_____tree_iterator_5babi_v160004_5d_28std____2____tree_node_b2Fixture__2c_20void____29($4 + 4 | 0, HEAP32[$4 + 24 >> 2]);
 std____2__pair_std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__2c_20bool___pair_5babi_v160004_5d_std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__2c_20bool__2c_20_28void__290__28std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long____2c_20bool__29($0, $4 + 4 | 0, $4 + 23 | 0);
 __stack_pointer = $4 + 48 | 0;
}

function b2World__DestroyJoint_28b2Joint__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 if (b2World__IsLocked_28_29_20const($0) & 1) {
  __assert_fail(8961, 6054, 282, 2557);
  wasm2js_trap();
 }
 label$2: {
  if (b2World__IsLocked_28_29_20const($0) & 1) {
   break label$2;
  }
  HEAP8[$2 + 23 | 0] = HEAP8[HEAP32[$2 + 24 >> 2] + 61 | 0] & 1;
  if (HEAP32[HEAP32[$2 + 24 >> 2] + 8 >> 2]) {
   HEAP32[HEAP32[HEAP32[$2 + 24 >> 2] + 8 >> 2] + 12 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 12 >> 2];
  }
  if (HEAP32[HEAP32[$2 + 24 >> 2] + 12 >> 2]) {
   HEAP32[HEAP32[HEAP32[$2 + 24 >> 2] + 12 >> 2] + 8 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 8 >> 2];
  }
  if (HEAP32[$2 + 24 >> 2] == HEAP32[$0 + 102952 >> 2]) {
   HEAP32[$0 + 102952 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 12 >> 2];
  }
  HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 48 >> 2];
  HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 52 >> 2];
  b2Body__SetAwake_28bool_29(HEAP32[$2 + 16 >> 2], 1);
  b2Body__SetAwake_28bool_29(HEAP32[$2 + 12 >> 2], 1);
  if (HEAP32[HEAP32[$2 + 24 >> 2] + 24 >> 2]) {
   HEAP32[HEAP32[HEAP32[$2 + 24 >> 2] + 24 >> 2] + 12 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 28 >> 2];
  }
  if (HEAP32[HEAP32[$2 + 24 >> 2] + 28 >> 2]) {
   HEAP32[HEAP32[HEAP32[$2 + 24 >> 2] + 28 >> 2] + 8 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 24 >> 2];
  }
  if (HEAP32[HEAP32[$2 + 16 >> 2] + 108 >> 2] == (HEAP32[$2 + 24 >> 2] + 16 | 0)) {
   HEAP32[HEAP32[$2 + 16 >> 2] + 108 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 28 >> 2];
  }
  HEAP32[HEAP32[$2 + 24 >> 2] + 24 >> 2] = 0;
  HEAP32[HEAP32[$2 + 24 >> 2] + 28 >> 2] = 0;
  if (HEAP32[HEAP32[$2 + 24 >> 2] + 40 >> 2]) {
   HEAP32[HEAP32[HEAP32[$2 + 24 >> 2] + 40 >> 2] + 12 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 44 >> 2];
  }
  if (HEAP32[HEAP32[$2 + 24 >> 2] + 44 >> 2]) {
   HEAP32[HEAP32[HEAP32[$2 + 24 >> 2] + 44 >> 2] + 8 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 40 >> 2];
  }
  if (HEAP32[HEAP32[$2 + 12 >> 2] + 108 >> 2] == (HEAP32[$2 + 24 >> 2] + 32 | 0)) {
   HEAP32[HEAP32[$2 + 12 >> 2] + 108 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 44 >> 2];
  }
  HEAP32[HEAP32[$2 + 24 >> 2] + 40 >> 2] = 0;
  HEAP32[HEAP32[$2 + 24 >> 2] + 44 >> 2] = 0;
  b2Joint__Destroy_28b2Joint__2c_20b2BlockAllocator__29(HEAP32[$2 + 24 >> 2], $0);
  if (HEAP32[$0 + 102960 >> 2] <= 0) {
   __assert_fail(12048, 6054, 354, 2557);
   wasm2js_trap();
  }
  HEAP32[$0 + 102960 >> 2] = HEAP32[$0 + 102960 >> 2] - 1;
  if (HEAP8[$2 + 23 | 0] & 1) {
   break label$2;
  }
  wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Body__GetContactList_28_29(HEAP32[$2 + 12 >> 2]), 
  HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  while (1) {
   if (HEAP32[$2 + 8 >> 2]) {
    if (HEAP32[HEAP32[$2 + 8 >> 2] >> 2] == HEAP32[$2 + 16 >> 2]) {
     b2Contact__FlagForFiltering_28_29(HEAP32[HEAP32[$2 + 8 >> 2] + 4 >> 2]);
    }
    HEAP32[$2 + 8 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2];
    continue;
   }
   break;
  }
 }
 __stack_pointer = $2 + 32 | 0;
}

function b2World__DestroyBody_28b2Body__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 if (HEAP32[$0 + 102956 >> 2] <= 0) {
  __assert_fail(11988, 6054, 141, 1657);
  wasm2js_trap();
 }
 if (b2World__IsLocked_28_29_20const($0) & 1) {
  __assert_fail(8961, 6054, 142, 1657);
  wasm2js_trap();
 }
 if (!(b2World__IsLocked_28_29_20const($0) & 1)) {
  HEAP32[$2 + 20 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 108 >> 2];
  while (1) {
   if (HEAP32[$2 + 20 >> 2]) {
    HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 20 >> 2];
    HEAP32[$2 + 20 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2];
    if (HEAP32[$0 + 102976 >> 2]) {
     $1 = HEAP32[$0 + 102976 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2]);
    }
    b2World__DestroyJoint_28b2Joint__29($0, HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2]);
    HEAP32[HEAP32[$2 + 24 >> 2] + 108 >> 2] = HEAP32[$2 + 20 >> 2];
    continue;
   }
   break;
  }
  HEAP32[HEAP32[$2 + 24 >> 2] + 108 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 112 >> 2];
  while (1) {
   if (HEAP32[$2 + 12 >> 2]) {
    HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 12 >> 2];
    HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2];
    b2ContactManager__Destroy_28b2Contact__29($0 + 102868 | 0, HEAP32[HEAP32[$2 + 8 >> 2] + 4 >> 2]);
    continue;
   }
   break;
  }
  HEAP32[HEAP32[$2 + 24 >> 2] + 112 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 100 >> 2];
  while (1) {
   if (HEAP32[$2 + 4 >> 2]) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 4 >> 2];
    HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2];
    if (HEAP32[$0 + 102976 >> 2]) {
     $1 = HEAP32[$0 + 102976 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, HEAP32[$2 >> 2]);
    }
    b2Fixture__DestroyProxies_28b2BroadPhase__29(HEAP32[$2 >> 2], $0 + 102868 | 0);
    b2Fixture__Destroy_28b2BlockAllocator__29(HEAP32[$2 >> 2], $0);
    b2BlockAllocator__Free_28void__2c_20int_29($0, HEAP32[$2 >> 2], 44);
    HEAP32[HEAP32[$2 + 24 >> 2] + 100 >> 2] = HEAP32[$2 + 4 >> 2];
    $1 = HEAP32[$2 + 24 >> 2];
    HEAP32[$1 + 104 >> 2] = HEAP32[$1 + 104 >> 2] - 1;
    continue;
   }
   break;
  }
  HEAP32[HEAP32[$2 + 24 >> 2] + 100 >> 2] = 0;
  HEAP32[HEAP32[$2 + 24 >> 2] + 104 >> 2] = 0;
  if (HEAP32[HEAP32[$2 + 24 >> 2] + 92 >> 2]) {
   HEAP32[HEAP32[HEAP32[$2 + 24 >> 2] + 92 >> 2] + 96 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 96 >> 2];
  }
  if (HEAP32[HEAP32[$2 + 24 >> 2] + 96 >> 2]) {
   HEAP32[HEAP32[HEAP32[$2 + 24 >> 2] + 96 >> 2] + 92 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 92 >> 2];
  }
  if (HEAP32[$2 + 24 >> 2] == HEAP32[$0 + 102948 >> 2]) {
   HEAP32[$0 + 102948 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 96 >> 2];
  }
  HEAP32[$0 + 102956 >> 2] = HEAP32[$0 + 102956 >> 2] - 1;
  b2Body___b2Body_28_29(HEAP32[$2 + 24 >> 2]);
  b2BlockAllocator__Free_28void__2c_20int_29($0, HEAP32[$2 + 24 >> 2], 152);
 }
 __stack_pointer = $2 + 32 | 0;
}

function b2BlockAllocator__Allocate_28int_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 $0 = HEAP32[$2 + 56 >> 2];
 label$1: {
  if (!HEAP32[$2 + 52 >> 2]) {
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$2 + 52 >> 2] <= 0) {
   __assert_fail(8425, 5308, 118, 8780);
   wasm2js_trap();
  }
  if (HEAP32[$2 + 52 >> 2] > 640) {
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Alloc_28int_29(HEAP32[$2 + 52 >> 2]), HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
   break label$1;
  }
  HEAP32[$2 + 48 >> 2] = HEAPU8[HEAP32[$2 + 52 >> 2] + 30020 | 0];
  if (!(HEAP32[$2 + 48 >> 2] < 14 & HEAP32[$2 + 48 >> 2] >= 0)) {
   __assert_fail(2224, 5308, 126, 8780);
   wasm2js_trap();
  }
  if (HEAP32[($0 + 12 | 0) + (HEAP32[$2 + 48 >> 2] << 2) >> 2]) {
   HEAP32[$2 + 44 >> 2] = HEAP32[($0 + 12 | 0) + (HEAP32[$2 + 48 >> 2] << 2) >> 2];
   HEAP32[($0 + 12 | 0) + (HEAP32[$2 + 48 >> 2] << 2) >> 2] = HEAP32[HEAP32[$2 + 44 >> 2] >> 2];
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 44 >> 2];
   break label$1;
  }
  if (HEAP32[$0 + 4 >> 2] == HEAP32[$0 + 8 >> 2]) {
   HEAP32[$2 + 40 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 128;
   wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Alloc_28int_29(HEAP32[$0 + 8 >> 2] << 3), 
   HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   __memcpy(HEAP32[$0 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$0 + 4 >> 2] << 3);
   __memset(HEAP32[$0 >> 2] + (HEAP32[$0 + 4 >> 2] << 3) | 0, 0, 1024);
   b2Free_28void__29(HEAP32[$2 + 40 >> 2]);
  }
  HEAP32[$2 + 36 >> 2] = HEAP32[$0 >> 2] + (HEAP32[$0 + 4 >> 2] << 3);
  $1 = b2Alloc_28int_29(16384);
  HEAP32[HEAP32[$2 + 36 >> 2] + 4 >> 2] = $1;
  HEAP32[$2 + 32 >> 2] = HEAP32[(HEAP32[$2 + 48 >> 2] << 2) + 18240 >> 2];
  HEAP32[HEAP32[$2 + 36 >> 2] >> 2] = HEAP32[$2 + 32 >> 2];
  HEAP32[$2 + 28 >> 2] = 16384 / HEAP32[$2 + 32 >> 2];
  if ((Math_imul(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 32 >> 2]) | 0) > 16384) {
   __assert_fail(8445, 5308, 154, 8780);
   wasm2js_trap();
  }
  HEAP32[$2 + 24 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 24 >> 2] < (HEAP32[$2 + 28 >> 2] - 1 | 0)) {
    HEAP32[$2 + 20 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 4 >> 2] + Math_imul(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 24 >> 2]);
    HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 4 >> 2] + Math_imul(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 24 >> 2] + 1 | 0);
    HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAP32[$2 + 16 >> 2];
    HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 4 >> 2] + Math_imul(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 28 >> 2] - 1 | 0);
  HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = 0;
  HEAP32[($0 + 12 | 0) + (HEAP32[$2 + 48 >> 2] << 2) >> 2] = HEAP32[HEAP32[HEAP32[$2 + 36 >> 2] + 4 >> 2] >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
  HEAP32[$2 + 60 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 4 >> 2];
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function std____2__unique_ptr_std____2____tree_node_b2Fixture__2c_20void___2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______20std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______construct_node_b2Fixture__20const___28b2Fixture__20const__29($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______node_alloc_5babi_v160004_5d_28_29(HEAP32[$3 + 28 >> 2]), 
 HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
 HEAP8[$3 + 19 | 0] = 0;
 $1 = std____2__allocator_traits_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______allocate_5babi_v160004_5d_28std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_20unsigned_20long_29(HEAP32[$3 + 20 >> 2], 1);
 std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void________tree_node_destructor_5babi_v160004_5d_28std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_20bool_29($3 + 8 | 0, HEAP32[$3 + 20 >> 2], 0);
 std____2__unique_ptr_std____2____tree_node_b2Fixture__2c_20void___2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______unique_ptr_5babi_v160004_5d_true_2c_20void__28std____2____tree_node_b2Fixture__2c_20void____2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______2c_20true_____good_rval_ref_type_29($0, $1, $3 + 8 | 0);
 void_20std____2__allocator_traits_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______construct_5babi_v160004_5d_b2Fixture__2c_20b2Fixture__20const__2c_20void__28std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_20b2Fixture___2c_20b2Fixture__20const__29(HEAP32[$3 + 20 >> 2], std____2____tree_key_value_types_b2Fixture______get_ptr_5babi_v160004_5d_28b2Fixture___29(std____2__unique_ptr_std____2____tree_node_b2Fixture__2c_20void___2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______operator___5babi_v160004_5d_28_29_20const($0) + 16 | 0), HEAP32[$3 + 24 >> 2]);
 wasm2js_i32$0 = std____2__unique_ptr_std____2____tree_node_b2Fixture__2c_20void___2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______get_deleter_5babi_v160004_5d_28_29($0), 
 wasm2js_i32$1 = 1, HEAP8[wasm2js_i32$0 + 4 | 0] = wasm2js_i32$1;
 HEAP8[$3 + 19 | 0] = 1;
 if (!(HEAP8[$3 + 19 | 0] & 1)) {
  std____2__unique_ptr_std____2____tree_node_b2Fixture__2c_20void___2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void________unique_ptr_5babi_v160004_5d_28_29($0);
 }
 __stack_pointer = $3 + 32 | 0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______swap_out_circular_buffer_28std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_____29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______annotate_delete_5babi_v160004_5d_28_29_20const($0);
 $1 = std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______alloc_5babi_v160004_5d_28_29($0);
 std____2__reverse_iterator_b2Vec2____reverse_iterator_5babi_v160004_5d_28b2Vec2__29($2 + 16 | 0, HEAP32[$0 + 4 >> 2]);
 std____2__reverse_iterator_b2Vec2____reverse_iterator_5babi_v160004_5d_28b2Vec2__29($2 + 12 | 0, HEAP32[$0 >> 2]);
 std____2__reverse_iterator_b2Vec2____reverse_iterator_5babi_v160004_5d_28b2Vec2__29($2 + 8 | 0, HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2]);
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__reverse_iterator_b2Vec2___20std____2____uninitialized_allocator_move_if_noexcept_5babi_v160004_5d_std____2__allocator_b2Vec2__2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20b2Vec2_2c_20void__28std____2__allocator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29($1, HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]), 
 HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
 $1 = std____2__reverse_iterator_b2Vec2____base_5babi_v160004_5d_28_29_20const($2 + 20 | 0);
 HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2] = $1;
 std____2__enable_if_is_move_constructible_b2Vec2____value_20___20is_move_assignable_b2Vec2____value_2c_20void___type_20std____2__swap_5babi_v160004_5d_b2Vec2___28b2Vec2___2c_20b2Vec2___29($0, HEAP32[$2 + 24 >> 2] + 4 | 0);
 std____2__enable_if_is_move_constructible_b2Vec2____value_20___20is_move_assignable_b2Vec2____value_2c_20void___type_20std____2__swap_5babi_v160004_5d_b2Vec2___28b2Vec2___2c_20b2Vec2___29($0 + 4 | 0, HEAP32[$2 + 24 >> 2] + 8 | 0);
 std____2__enable_if_is_move_constructible_b2Vec2____value_20___20is_move_assignable_b2Vec2____value_2c_20void___type_20std____2__swap_5babi_v160004_5d_b2Vec2___28b2Vec2___2c_20b2Vec2___29(std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______end_cap_5babi_v160004_5d_28_29($0), std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______end_cap_5babi_v160004_5d_28_29(HEAP32[$2 + 24 >> 2]));
 HEAP32[HEAP32[$2 + 24 >> 2] >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2];
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______annotate_new_5babi_v160004_5d_28unsigned_20long_29_20const($0, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____size_5babi_v160004_5d_28_29_20const($0));
 void_20std____2____debug_db_invalidate_all_5babi_v160004_5d_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29($0);
 __stack_pointer = $2 + 32 | 0;
}

function b2FindIncidentEdge_28b2ClipVertex__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__2c_20int_2c_20b2PolygonShape_20const__2c_20b2Transform_20const__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $6 = __stack_pointer - 96 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 92 >> 2] = $0;
 HEAP32[$6 + 88 >> 2] = $1;
 HEAP32[$6 + 84 >> 2] = $2;
 HEAP32[$6 + 80 >> 2] = $3;
 HEAP32[$6 + 76 >> 2] = $4;
 HEAP32[$6 + 72 >> 2] = $5;
 HEAP32[$6 + 68 >> 2] = HEAP32[$6 + 88 >> 2] + 84;
 HEAP32[$6 + 64 >> 2] = HEAP32[HEAP32[$6 + 76 >> 2] + 148 >> 2];
 HEAP32[$6 + 60 >> 2] = HEAP32[$6 + 76 >> 2] + 20;
 HEAP32[$6 + 56 >> 2] = HEAP32[$6 + 76 >> 2] + 84;
 if (!(HEAP32[$6 + 80 >> 2] < HEAP32[HEAP32[$6 + 88 >> 2] + 148 >> 2] & HEAP32[$6 + 80 >> 2] >= 0)) {
  __assert_fail(2019, 5516, 78, 9601);
  wasm2js_trap();
 }
 $0 = HEAP32[$6 + 72 >> 2];
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($6 + 40 | 0, HEAP32[$6 + 84 >> 2] + 8 | 0, HEAP32[$6 + 68 >> 2] + (HEAP32[$6 + 80 >> 2] << 3) | 0);
 b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($6 + 48 | 0, $0 + 8 | 0, $6 + 40 | 0);
 HEAP32[$6 + 36 >> 2] = 0;
 HEAPF32[$6 + 32 >> 2] = 34028234663852886e22;
 HEAP32[$6 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 28 >> 2] < HEAP32[$6 + 64 >> 2]) {
   wasm2js_i32$0 = $6, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($6 + 48 | 0, HEAP32[$6 + 56 >> 2] + (HEAP32[$6 + 28 >> 2] << 3) | 0), 
   HEAPF32[wasm2js_i32$0 + 24 >> 2] = wasm2js_f32$0;
   if (HEAPF32[$6 + 24 >> 2] < HEAPF32[$6 + 32 >> 2]) {
    HEAPF32[$6 + 32 >> 2] = HEAPF32[$6 + 24 >> 2];
    HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 28 >> 2];
   }
   HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 36 >> 2];
 if (HEAP32[$6 + 64 >> 2] > (HEAP32[$6 + 20 >> 2] + 1 | 0)) {
  $0 = HEAP32[$6 + 20 >> 2] + 1 | 0;
 } else {
  $0 = 0;
 }
 HEAP32[$6 + 16 >> 2] = $0;
 b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($6 + 8 | 0, HEAP32[$6 + 72 >> 2], HEAP32[$6 + 60 >> 2] + (HEAP32[$6 + 20 >> 2] << 3) | 0);
 $0 = HEAP32[$6 + 12 >> 2];
 $1 = HEAP32[$6 + 8 >> 2];
 $2 = $1;
 $1 = HEAP32[$6 + 92 >> 2];
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAP8[HEAP32[$6 + 92 >> 2] + 8 | 0] = HEAP32[$6 + 80 >> 2];
 HEAP8[HEAP32[$6 + 92 >> 2] + 9 | 0] = HEAP32[$6 + 20 >> 2];
 HEAP8[HEAP32[$6 + 92 >> 2] + 10 | 0] = 1;
 HEAP8[HEAP32[$6 + 92 >> 2] + 11 | 0] = 0;
 b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($6, HEAP32[$6 + 72 >> 2], HEAP32[$6 + 60 >> 2] + (HEAP32[$6 + 16 >> 2] << 3) | 0);
 $1 = HEAP32[$6 + 4 >> 2];
 $0 = HEAP32[$6 >> 2];
 $2 = $0;
 $0 = HEAP32[$6 + 92 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = $1;
 HEAP8[HEAP32[$6 + 92 >> 2] + 20 | 0] = HEAP32[$6 + 80 >> 2];
 HEAP8[HEAP32[$6 + 92 >> 2] + 21 | 0] = HEAP32[$6 + 16 >> 2];
 HEAP8[HEAP32[$6 + 92 >> 2] + 22 | 0] = 1;
 HEAP8[HEAP32[$6 + 92 >> 2] + 23 | 0] = 0;
 __stack_pointer = $6 + 96 | 0;
}

function b2DynamicTree__RemoveLeaf_28int_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 label$1: {
  if (HEAP32[$2 + 24 >> 2] == HEAP32[$0 >> 2]) {
   HEAP32[$0 >> 2] = -1;
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 24 >> 2], 40) | 0) + 20 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 20 >> 2], 40) | 0) + 20 >> 2];
  label$3: {
   if (HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 20 >> 2], 40) | 0) + 24 >> 2] == HEAP32[$2 + 24 >> 2]) {
    HEAP32[$2 + 12 >> 2] = HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 20 >> 2], 40) | 0) + 28 >> 2];
    break label$3;
   }
   HEAP32[$2 + 12 >> 2] = HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 20 >> 2], 40) | 0) + 24 >> 2];
  }
  if (HEAP32[$2 + 16 >> 2] != -1) {
   label$6: {
    if (HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 16 >> 2], 40) | 0) + 24 >> 2] == HEAP32[$2 + 20 >> 2]) {
     HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 16 >> 2], 40) | 0) + 24 >> 2] = HEAP32[$2 + 12 >> 2];
     break label$6;
    }
    HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 16 >> 2], 40) | 0) + 28 >> 2] = HEAP32[$2 + 12 >> 2];
   }
   HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 40) | 0) + 20 >> 2] = HEAP32[$2 + 16 >> 2];
   b2DynamicTree__FreeNode_28int_29($0, HEAP32[$2 + 20 >> 2]);
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 16 >> 2];
   while (1) {
    if (HEAP32[$2 + 8 >> 2] != -1) {
     wasm2js_i32$0 = $2, wasm2js_i32$1 = b2DynamicTree__Balance_28int_29($0, HEAP32[$2 + 8 >> 2]), 
     HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
     HEAP32[$2 + 4 >> 2] = HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0) + 24 >> 2];
     HEAP32[$2 >> 2] = HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0) + 28 >> 2];
     b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0, HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 4 >> 2], 40) | 0, HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 >> 2], 40) | 0);
     $1 = int_20b2Max_int__28int_2c_20int_29(HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 4 >> 2], 40) | 0) + 32 >> 2], HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 >> 2], 40) | 0) + 32 >> 2]);
     HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0) + 32 >> 2] = $1 + 1;
     HEAP32[$2 + 8 >> 2] = HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0) + 20 >> 2];
     continue;
    }
    break;
   }
   break label$1;
  }
  HEAP32[$0 >> 2] = HEAP32[$2 + 12 >> 2];
  HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 40) | 0) + 20 >> 2] = -1;
  b2DynamicTree__FreeNode_28int_29($0, HEAP32[$2 + 20 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function b2Simplex__GetWitnessPoints_28b2Vec2__2c_20b2Vec2__29_20const($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 112 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 108 >> 2] = $0;
 HEAP32[$3 + 104 >> 2] = $1;
 HEAP32[$3 + 100 >> 2] = $2;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     label$5: {
      label$6: {
       $2 = HEAP32[$3 + 108 >> 2];
       switch (HEAP32[$2 + 108 >> 2]) {
       case 3:
        break label$3;

       case 2:
        break label$4;

       case 1:
        break label$5;

       case 0:
        break label$6;

       default:
        break label$2;
       }
      }
      __assert_fail(8975, 5927, 228, 3334);
      wasm2js_trap();
     }
     $0 = HEAP32[$2 + 4 >> 2];
     $1 = HEAP32[$2 >> 2];
     $4 = $1;
     $1 = HEAP32[$3 + 104 >> 2];
     HEAP32[$1 >> 2] = $4;
     HEAP32[$1 + 4 >> 2] = $0;
     $1 = HEAP32[$2 + 12 >> 2];
     $0 = HEAP32[$2 + 8 >> 2];
     $2 = $0;
     $0 = HEAP32[$3 + 100 >> 2];
     HEAP32[$0 >> 2] = $2;
     HEAP32[$0 + 4 >> 2] = $1;
     break label$1;
    }
    operator__28float_2c_20b2Vec2_20const__29($3 + 84 | 0, HEAPF32[$2 + 24 >> 2], $2);
    operator__28float_2c_20b2Vec2_20const__29($3 + 76 | 0, HEAPF32[$2 + 60 >> 2], $2 + 36 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 92 | 0, $3 + 84 | 0, $3 + 76 | 0);
    $0 = HEAP32[$3 + 96 >> 2];
    $1 = HEAP32[$3 + 92 >> 2];
    $4 = $1;
    $1 = HEAP32[$3 + 104 >> 2];
    HEAP32[$1 >> 2] = $4;
    HEAP32[$1 + 4 >> 2] = $0;
    operator__28float_2c_20b2Vec2_20const__29($3 + 60 | 0, HEAPF32[$2 + 24 >> 2], $2 + 8 | 0);
    operator__28float_2c_20b2Vec2_20const__29($3 + 52 | 0, HEAPF32[$2 + 60 >> 2], $2 + 44 | 0);
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 68 | 0, $3 + 60 | 0, $3 + 52 | 0);
    $1 = HEAP32[$3 + 72 >> 2];
    $0 = HEAP32[$3 + 68 >> 2];
    $2 = $0;
    $0 = HEAP32[$3 + 100 >> 2];
    HEAP32[$0 >> 2] = $2;
    HEAP32[$0 + 4 >> 2] = $1;
    break label$1;
   }
   operator__28float_2c_20b2Vec2_20const__29($3 + 28 | 0, HEAPF32[$2 + 24 >> 2], $2);
   operator__28float_2c_20b2Vec2_20const__29($3 + 20 | 0, HEAPF32[$2 + 60 >> 2], $2 + 36 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 36 | 0, $3 + 28 | 0, $3 + 20 | 0);
   operator__28float_2c_20b2Vec2_20const__29($3 + 12 | 0, HEAPF32[$2 + 96 >> 2], $2 + 72 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 44 | 0, $3 + 36 | 0, $3 + 12 | 0);
   $0 = HEAP32[$3 + 48 >> 2];
   $1 = HEAP32[$3 + 44 >> 2];
   $2 = $1;
   $1 = HEAP32[$3 + 104 >> 2];
   HEAP32[$1 >> 2] = $2;
   HEAP32[$1 + 4 >> 2] = $0;
   $1 = HEAP32[$3 + 104 >> 2];
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
   $2 = $0;
   $0 = HEAP32[$3 + 100 >> 2];
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $1;
   break label$1;
  }
  __assert_fail(8975, 5927, 247, 3334);
  wasm2js_trap();
 }
 __stack_pointer = $3 + 112 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int______swap_out_circular_buffer_28std____2____split_buffer_int_2c_20std____2__allocator_int_____29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 std____2__vector_int_2c_20std____2__allocator_int______annotate_delete_5babi_v160004_5d_28_29_20const($0);
 $1 = std____2__vector_int_2c_20std____2__allocator_int______alloc_5babi_v160004_5d_28_29($0);
 std____2__reverse_iterator_int____reverse_iterator_5babi_v160004_5d_28int__29($2 + 16 | 0, HEAP32[$0 + 4 >> 2]);
 std____2__reverse_iterator_int____reverse_iterator_5babi_v160004_5d_28int__29($2 + 12 | 0, HEAP32[$0 >> 2]);
 std____2__reverse_iterator_int____reverse_iterator_5babi_v160004_5d_28int__29($2 + 8 | 0, HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2]);
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__reverse_iterator_int___20std____2____uninitialized_allocator_move_if_noexcept_5babi_v160004_5d_std____2__allocator_int__2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20int_2c_20void__28std____2__allocator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29($1, HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]), 
 HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
 $1 = std____2__reverse_iterator_int____base_5babi_v160004_5d_28_29_20const($2 + 20 | 0);
 HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2] = $1;
 std____2__enable_if_is_move_constructible_int____value_20___20is_move_assignable_int____value_2c_20void___type_20std____2__swap_5babi_v160004_5d_int___28int___2c_20int___29($0, HEAP32[$2 + 24 >> 2] + 4 | 0);
 std____2__enable_if_is_move_constructible_int____value_20___20is_move_assignable_int____value_2c_20void___type_20std____2__swap_5babi_v160004_5d_int___28int___2c_20int___29($0 + 4 | 0, HEAP32[$2 + 24 >> 2] + 8 | 0);
 std____2__enable_if_is_move_constructible_int____value_20___20is_move_assignable_int____value_2c_20void___type_20std____2__swap_5babi_v160004_5d_int___28int___2c_20int___29(std____2__vector_int_2c_20std____2__allocator_int______end_cap_5babi_v160004_5d_28_29($0), std____2____split_buffer_int_2c_20std____2__allocator_int_______end_cap_5babi_v160004_5d_28_29(HEAP32[$2 + 24 >> 2]));
 HEAP32[HEAP32[$2 + 24 >> 2] >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2];
 std____2__vector_int_2c_20std____2__allocator_int______annotate_new_5babi_v160004_5d_28unsigned_20long_29_20const($0, std____2__vector_int_2c_20std____2__allocator_int____size_5babi_v160004_5d_28_29_20const($0));
 void_20std____2____debug_db_invalidate_all_5babi_v160004_5d_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int____29($0);
 __stack_pointer = $2 + 32 | 0;
}

function b2World__CreateJoint_28b2JointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 if (b2World__IsLocked_28_29_20const($0) & 1) {
  __assert_fail(8961, 6054, 222, 2650);
  wasm2js_trap();
 }
 label$2: {
  if (b2World__IsLocked_28_29_20const($0) & 1) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$2;
  }
  wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Joint__Create_28b2JointDef_20const__2c_20b2BlockAllocator__29(HEAP32[$2 + 20 >> 2], $0), 
  HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  HEAP32[HEAP32[$2 + 16 >> 2] + 8 >> 2] = 0;
  HEAP32[HEAP32[$2 + 16 >> 2] + 12 >> 2] = HEAP32[$0 + 102952 >> 2];
  if (HEAP32[$0 + 102952 >> 2]) {
   HEAP32[HEAP32[$0 + 102952 >> 2] + 8 >> 2] = HEAP32[$2 + 16 >> 2];
  }
  HEAP32[$0 + 102952 >> 2] = HEAP32[$2 + 16 >> 2];
  HEAP32[$0 + 102960 >> 2] = HEAP32[$0 + 102960 >> 2] + 1;
  HEAP32[HEAP32[$2 + 16 >> 2] + 20 >> 2] = HEAP32[$2 + 16 >> 2];
  HEAP32[HEAP32[$2 + 16 >> 2] + 16 >> 2] = HEAP32[HEAP32[$2 + 16 >> 2] + 52 >> 2];
  HEAP32[HEAP32[$2 + 16 >> 2] + 24 >> 2] = 0;
  HEAP32[HEAP32[$2 + 16 >> 2] + 28 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 16 >> 2] + 48 >> 2] + 108 >> 2];
  if (HEAP32[HEAP32[HEAP32[$2 + 16 >> 2] + 48 >> 2] + 108 >> 2]) {
   HEAP32[HEAP32[HEAP32[HEAP32[$2 + 16 >> 2] + 48 >> 2] + 108 >> 2] + 8 >> 2] = HEAP32[$2 + 16 >> 2] + 16;
  }
  HEAP32[HEAP32[HEAP32[$2 + 16 >> 2] + 48 >> 2] + 108 >> 2] = HEAP32[$2 + 16 >> 2] + 16;
  HEAP32[HEAP32[$2 + 16 >> 2] + 36 >> 2] = HEAP32[$2 + 16 >> 2];
  HEAP32[HEAP32[$2 + 16 >> 2] + 32 >> 2] = HEAP32[HEAP32[$2 + 16 >> 2] + 48 >> 2];
  HEAP32[HEAP32[$2 + 16 >> 2] + 40 >> 2] = 0;
  HEAP32[HEAP32[$2 + 16 >> 2] + 44 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 16 >> 2] + 52 >> 2] + 108 >> 2];
  if (HEAP32[HEAP32[HEAP32[$2 + 16 >> 2] + 52 >> 2] + 108 >> 2]) {
   HEAP32[HEAP32[HEAP32[HEAP32[$2 + 16 >> 2] + 52 >> 2] + 108 >> 2] + 8 >> 2] = HEAP32[$2 + 16 >> 2] + 32;
  }
  HEAP32[HEAP32[HEAP32[$2 + 16 >> 2] + 52 >> 2] + 108 >> 2] = HEAP32[$2 + 16 >> 2] + 32;
  HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2];
  if (!(HEAP8[HEAP32[$2 + 20 >> 2] + 16 | 0] & 1)) {
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Body__GetContactList_28_29(HEAP32[$2 + 8 >> 2]), 
   HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
   while (1) {
    if (HEAP32[$2 + 4 >> 2]) {
     if (HEAP32[HEAP32[$2 + 4 >> 2] >> 2] == HEAP32[$2 + 12 >> 2]) {
      b2Contact__FlagForFiltering_28_29(HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2]);
     }
     HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 4 >> 2] + 12 >> 2];
     continue;
    }
    break;
   }
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function b2ClipSegmentToLine_28b2ClipVertex__2c_20b2ClipVertex_20const__2c_20b2Vec2_20const__2c_20float_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAPF32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[$5 + 40 >> 2] = 0;
 wasm2js_i32$0 = $5, wasm2js_f32$0 = Math_fround(b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$5 + 52 >> 2], HEAP32[$5 + 56 >> 2]) - HEAPF32[$5 + 48 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 36 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $5, wasm2js_f32$0 = Math_fround(b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$5 + 52 >> 2], HEAP32[$5 + 56 >> 2] + 12 | 0) - HEAPF32[$5 + 48 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 32 >> 2] = wasm2js_f32$0;
 if (HEAPF32[$5 + 36 >> 2] <= Math_fround(0)) {
  $0 = HEAP32[$5 + 56 >> 2];
  $7 = HEAP32[$5 + 60 >> 2];
  $6 = HEAP32[$5 + 40 >> 2];
  HEAP32[$5 + 40 >> 2] = $6 + 1;
  $1 = HEAP32[$0 >> 2];
  $2 = HEAP32[$0 + 4 >> 2];
  $4 = $1;
  $1 = Math_imul($6, 12) + $7 | 0;
  HEAP32[$1 >> 2] = $4;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 if (HEAPF32[$5 + 32 >> 2] <= Math_fround(0)) {
  $0 = HEAP32[$5 + 56 >> 2];
  $7 = HEAP32[$5 + 60 >> 2];
  $6 = HEAP32[$5 + 40 >> 2];
  HEAP32[$5 + 40 >> 2] = $6 + 1;
  $2 = HEAP32[$0 + 12 >> 2];
  $1 = HEAP32[$0 + 16 >> 2];
  $4 = $2;
  $2 = Math_imul($6, 12) + $7 | 0;
  HEAP32[$2 >> 2] = $4;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 + 20 >> 2];
 }
 if (Math_fround(HEAPF32[$5 + 36 >> 2] * HEAPF32[$5 + 32 >> 2]) < Math_fround(0)) {
  HEAPF32[$5 + 28 >> 2] = HEAPF32[$5 + 36 >> 2] / Math_fround(HEAPF32[$5 + 36 >> 2] - HEAPF32[$5 + 32 >> 2]);
  $0 = HEAP32[$5 + 56 >> 2];
  $3 = HEAPF32[$5 + 28 >> 2];
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 4 | 0, HEAP32[$5 + 56 >> 2] + 12 | 0, HEAP32[$5 + 56 >> 2]);
  operator__28float_2c_20b2Vec2_20const__29($5 + 12 | 0, $3, $5 + 4 | 0);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($5 + 20 | 0, $0, $5 + 12 | 0);
  $2 = HEAP32[$5 + 24 >> 2];
  $1 = HEAP32[$5 + 20 >> 2];
  $0 = $1;
  $1 = HEAP32[$5 + 60 >> 2] + Math_imul(HEAP32[$5 + 40 >> 2], 12) | 0;
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP8[(HEAP32[$5 + 60 >> 2] + Math_imul(HEAP32[$5 + 40 >> 2], 12) | 0) + 8 | 0] = HEAP32[$5 + 44 >> 2];
  HEAP8[(HEAP32[$5 + 60 >> 2] + Math_imul(HEAP32[$5 + 40 >> 2], 12) | 0) + 9 | 0] = HEAPU8[HEAP32[$5 + 56 >> 2] + 9 | 0];
  HEAP8[(HEAP32[$5 + 60 >> 2] + Math_imul(HEAP32[$5 + 40 >> 2], 12) | 0) + 10 | 0] = 0;
  HEAP8[(HEAP32[$5 + 60 >> 2] + Math_imul(HEAP32[$5 + 40 >> 2], 12) | 0) + 11 | 0] = 1;
  HEAP32[$5 + 40 >> 2] = HEAP32[$5 + 40 >> 2] + 1;
 }
 __stack_pointer = $5 - -64 | 0;
 return HEAP32[$5 + 40 >> 2];
}

function __cxxabiv1____pointer_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 label$1: {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($1, 24336, 0)) {
   HEAP32[$2 >> 2] = 0;
   $5 = 1;
   break label$1;
  }
  if (__cxxabiv1____pbase_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $1)) {
   $5 = 1;
   $1 = HEAP32[$2 >> 2];
   if (!$1) {
    break label$1;
   }
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   break label$1;
  }
  label$4: {
   if (!$1) {
    break label$4;
   }
   $1 = __dynamic_cast($1, 23972, 24116, 0);
   if (!$1) {
    break label$1;
   }
   $4 = HEAP32[$2 >> 2];
   if ($4) {
    HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
   }
   $4 = HEAP32[$1 + 8 >> 2];
   $6 = HEAP32[$0 + 8 >> 2];
   if ($4 & ($6 ^ -1) & 7 | ($4 ^ -1) & $6 & 96) {
    break label$1;
   }
   $5 = 1;
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[$0 + 12 >> 2], HEAP32[$1 + 12 >> 2], 0)) {
    break label$1;
   }
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[$0 + 12 >> 2], 24324, 0)) {
    $1 = HEAP32[$1 + 12 >> 2];
    if (!$1) {
     break label$1;
    }
    $5 = !__dynamic_cast($1, 23972, 24168, 0);
    break label$1;
   }
   $4 = HEAP32[$0 + 12 >> 2];
   if (!$4) {
    break label$4;
   }
   $5 = 0;
   $6 = __dynamic_cast($4, 23972, 24116, 0);
   if ($6) {
    if (!(HEAP8[$0 + 8 | 0] & 1)) {
     break label$1;
    }
    $5 = __cxxabiv1____pointer_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($6, HEAP32[$1 + 12 >> 2]);
    break label$1;
   }
   $6 = __dynamic_cast($4, 23972, 24228, 0);
   if ($6) {
    if (!(HEAP8[$0 + 8 | 0] & 1)) {
     break label$1;
    }
    $5 = __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($6, HEAP32[$1 + 12 >> 2]);
    break label$1;
   }
   $0 = __dynamic_cast($4, 23972, 24020, 0);
   if (!$0) {
    break label$1;
   }
   $1 = HEAP32[$1 + 12 >> 2];
   if (!$1) {
    break label$1;
   }
   $1 = __dynamic_cast($1, 23972, 24020, 0);
   if (!$1) {
    break label$1;
   }
   __memset($3 + 12 | 0, 0, 52);
   HEAP32[$3 + 56 >> 2] = 1;
   HEAP32[$3 + 20 >> 2] = -1;
   HEAP32[$3 + 16 >> 2] = $0;
   HEAP32[$3 + 8 >> 2] = $1;
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, $3 + 8 | 0, HEAP32[$2 >> 2], 1);
   $1 = HEAP32[$3 + 32 >> 2];
   if (!(!HEAP32[$2 >> 2] | ($1 | 0) != 1)) {
    HEAP32[$2 >> 2] = HEAP32[$3 + 24 >> 2];
   }
   $5 = ($1 | 0) == 1;
   break label$1;
  }
  $5 = 0;
 }
 __stack_pointer = $3 - -64 | 0;
 return $5 | 0;
}

function std____2____tree_node_base_void_____20std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______find_equal_b2Fixture___28std____2____tree_end_node_std____2____tree_node_base_void_______2c_20b2Fixture__20const__29($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 $0 = HEAP32[$3 + 24 >> 2];
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______root_5babi_v160004_5d_28_29_20const($0), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______root_ptr_28_29_20const($0), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 label$1: {
  if (HEAP32[$3 + 12 >> 2]) {
   while (1) {
    if (std____2__less_b2Fixture____operator_28_29_5babi_v160004_5d_28b2Fixture__20const__2c_20b2Fixture__20const__29_20const(std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____value_comp_5babi_v160004_5d_28_29($0), HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2] + 16 | 0) & 1) {
     if (HEAP32[HEAP32[$3 + 12 >> 2] >> 2]) {
      HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 12 >> 2];
      HEAP32[$3 + 12 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] >> 2];
      continue;
     }
     HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = HEAP32[$3 + 12 >> 2];
     HEAP32[$3 + 28 >> 2] = HEAP32[HEAP32[$3 + 20 >> 2] >> 2];
     break label$1;
    }
    label$6: {
     if (std____2__less_b2Fixture____operator_28_29_5babi_v160004_5d_28b2Fixture__20const__2c_20b2Fixture__20const__29_20const(std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____value_comp_5babi_v160004_5d_28_29($0), HEAP32[$3 + 12 >> 2] + 16 | 0, HEAP32[$3 + 16 >> 2]) & 1) {
      if (HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2]) {
       HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 12 >> 2] + 4;
       HEAP32[$3 + 12 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2];
       break label$6;
      }
      HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = HEAP32[$3 + 12 >> 2];
      HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2] + 4;
      break label$1;
     }
     HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = HEAP32[$3 + 12 >> 2];
     HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
     break label$1;
    }
    continue;
   }
  }
  $0 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______end_node_5babi_v160004_5d_28_29($0);
  HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = $0;
  HEAP32[$3 + 28 >> 2] = HEAP32[HEAP32[$3 + 20 >> 2] >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function b2MouseJoint__SolveVelocityConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 108 >> 2] = $0;
 HEAP32[$2 + 104 >> 2] = $1;
 $1 = HEAP32[$2 + 108 >> 2];
 $0 = HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 116 >> 2], 12) | 0;
 $3 = HEAP32[$0 >> 2];
 $0 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 + 96 >> 2] = $3;
 HEAP32[$2 + 100 >> 2] = $0;
 HEAPF32[$2 + 92 >> 2] = HEAPF32[(HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 116 >> 2], 12) | 0) + 8 >> 2];
 b2Cross_28float_2c_20b2Vec2_20const__29($2 + 76 | 0, HEAPF32[$2 + 92 >> 2], $1 + 120 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 84 | 0, $2 + 96 | 0, $2 + 76 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 40 | 0, $2 + 84 | 0, $1 + 160 | 0);
 operator__28float_2c_20b2Vec2_20const__29($2 + 32 | 0, HEAPF32[$1 + 108 >> 2], $1 + 96 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 48 | 0, $2 + 40 | 0, $2 + 32 | 0);
 b2Vec2__operator__28_29_20const($2 + 56 | 0, $2 + 48 | 0);
 b2Mul_28b2Mat22_20const__2c_20b2Vec2_20const__29($2 - -64 | 0, $1 + 144 | 0, $2 + 56 | 0);
 $3 = HEAP32[$1 + 100 >> 2];
 $0 = HEAP32[$1 + 96 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 28 >> 2] = $3;
 b2Vec2__operator___28b2Vec2_20const__29($1 + 96 | 0, $2 - -64 | 0);
 HEAPF32[$2 + 20 >> 2] = HEAPF32[HEAP32[$2 + 104 >> 2] >> 2] * HEAPF32[$1 + 104 >> 2];
 if (b2Vec2__LengthSquared_28_29_20const($1 + 96 | 0) > Math_fround(HEAPF32[$2 + 20 >> 2] * HEAPF32[$2 + 20 >> 2])) {
  b2Vec2__operator___28float_29($1 + 96 | 0, Math_fround(HEAPF32[$2 + 20 >> 2] / b2Vec2__Length_28_29_20const($1 + 96 | 0)));
 }
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 12 | 0, $1 + 96 | 0, $2 + 24 | 0);
 $0 = HEAP32[$2 + 16 >> 2];
 $3 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 64 >> 2] = $3;
 HEAP32[$2 + 68 >> 2] = $0;
 operator__28float_2c_20b2Vec2_20const__29($2 + 4 | 0, HEAPF32[$1 + 136 >> 2], $2 - -64 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($2 + 96 | 0, $2 + 4 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[$1 + 140 >> 2] * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 120 | 0, $2 - -64 | 0)) + HEAPF32[$2 + 92 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 92 >> 2] = wasm2js_f32$0;
 $3 = HEAP32[$2 + 100 >> 2];
 $0 = HEAP32[$2 + 96 >> 2];
 $4 = $0;
 $0 = HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 116 >> 2], 12) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $3;
 HEAPF32[(HEAP32[HEAP32[$2 + 104 >> 2] + 28 >> 2] + Math_imul(HEAP32[$1 + 116 >> 2], 12) | 0) + 8 >> 2] = HEAPF32[$2 + 92 >> 2];
 __stack_pointer = $2 + 112 | 0;
}

function b2CircleShape__RayCast_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $5 = __stack_pointer - 96 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 88 >> 2] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 $1 = HEAP32[$5 + 76 >> 2];
 $0 = HEAP32[$5 + 88 >> 2];
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($5 + 56 | 0, HEAP32[$5 + 76 >> 2] + 8 | 0, $0 + 12 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($5 - -64 | 0, $1, $5 + 56 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 48 | 0, HEAP32[$5 + 80 >> 2], $5 - -64 | 0);
 $1 = $5 + 48 | 0;
 $6 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1, $1);
 HEAPF32[$5 + 44 >> 2] = Math_fround(Math_fround(-HEAPF32[$0 + 8 >> 2]) * HEAPF32[$0 + 8 >> 2]) + $6;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 36 | 0, HEAP32[$5 + 80 >> 2] + 8 | 0, HEAP32[$5 + 80 >> 2]);
 wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 48 | 0, $5 + 36 | 0), 
 HEAPF32[wasm2js_i32$0 + 32 >> 2] = wasm2js_f32$0;
 $0 = $5 + 36 | 0;
 wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $0), 
 HEAPF32[wasm2js_i32$0 + 28 >> 2] = wasm2js_f32$0;
 HEAPF32[$5 + 24 >> 2] = Math_fround(HEAPF32[$5 + 32 >> 2] * HEAPF32[$5 + 32 >> 2]) - Math_fround(HEAPF32[$5 + 28 >> 2] * HEAPF32[$5 + 44 >> 2]);
 label$1: {
  if (HEAPF32[$5 + 24 >> 2] < Math_fround(0) | HEAPF32[$5 + 28 >> 2] < Math_fround(1.1920928955078125e-7)) {
   HEAP8[$5 + 95 | 0] = 0;
   break label$1;
  }
  HEAPF32[$5 + 20 >> 2] = -Math_fround(HEAPF32[$5 + 32 >> 2] + Math_fround(Math_sqrt(HEAPF32[$5 + 24 >> 2])));
  if (!(!(HEAPF32[$5 + 20 >> 2] >= Math_fround(0)) | !(HEAPF32[$5 + 20 >> 2] <= Math_fround(HEAPF32[HEAP32[$5 + 80 >> 2] + 16 >> 2] * HEAPF32[$5 + 28 >> 2])))) {
   HEAPF32[$5 + 20 >> 2] = HEAPF32[$5 + 20 >> 2] / HEAPF32[$5 + 28 >> 2];
   HEAPF32[HEAP32[$5 + 84 >> 2] + 8 >> 2] = HEAPF32[$5 + 20 >> 2];
   operator__28float_2c_20b2Vec2_20const__29($5 + 4 | 0, HEAPF32[$5 + 20 >> 2], $5 + 36 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($5 + 12 | 0, $5 + 48 | 0, $5 + 4 | 0);
   $2 = HEAP32[$5 + 16 >> 2];
   $0 = HEAP32[$5 + 12 >> 2];
   $1 = $0;
   $0 = HEAP32[$5 + 84 >> 2];
   HEAP32[$0 >> 2] = $1;
   HEAP32[$0 + 4 >> 2] = $2;
   b2Vec2__Normalize_28_29(HEAP32[$5 + 84 >> 2]);
   HEAP8[$5 + 95 | 0] = 1;
   break label$1;
  }
  HEAP8[$5 + 95 | 0] = 0;
 }
 __stack_pointer = $5 + 96 | 0;
 return HEAP8[$5 + 95 | 0] & 1;
}

function b2Body__DestroyFixture_28b2Fixture__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 $0 = HEAP32[$2 + 44 >> 2];
 label$1: {
  if (!HEAP32[$2 + 40 >> 2]) {
   break label$1;
  }
  if (b2World__IsLocked_28_29_20const(HEAP32[$0 + 88 >> 2]) & 1) {
   __assert_fail(8952, 4121, 223, 8981);
   wasm2js_trap();
  }
  if (b2World__IsLocked_28_29_20const(HEAP32[$0 + 88 >> 2]) & 1) {
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 40 >> 2] + 8 >> 2] != ($0 | 0)) {
   __assert_fail(3483, 4121, 229, 8981);
   wasm2js_trap();
  }
  if (HEAP32[$0 + 104 >> 2] <= 0) {
   __assert_fail(12065, 4121, 232, 8981);
   wasm2js_trap();
  }
  HEAP32[$2 + 36 >> 2] = $0 + 100;
  HEAP8[$2 + 35 | 0] = 0;
  while (1) {
   if (HEAP32[HEAP32[$2 + 36 >> 2] >> 2]) {
    if (HEAP32[HEAP32[$2 + 36 >> 2] >> 2] == HEAP32[$2 + 40 >> 2]) {
     HEAP32[HEAP32[$2 + 36 >> 2] >> 2] = HEAP32[HEAP32[$2 + 40 >> 2] + 4 >> 2];
     HEAP8[$2 + 35 | 0] = 1;
    } else {
     HEAP32[$2 + 36 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] >> 2] + 4;
     continue;
    }
   }
   break;
  }
  if (!(HEAP8[$2 + 35 | 0] & 1)) {
   __assert_fail(9829, 4121, 248, 8981);
   wasm2js_trap();
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$0 + 112 >> 2];
  while (1) {
   if (HEAP32[$2 + 28 >> 2]) {
    HEAP32[$2 + 24 >> 2] = HEAP32[HEAP32[$2 + 28 >> 2] + 4 >> 2];
    HEAP32[$2 + 28 >> 2] = HEAP32[HEAP32[$2 + 28 >> 2] + 12 >> 2];
    wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Contact__GetFixtureA_28_29(HEAP32[$2 + 24 >> 2]), 
    HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
    wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Contact__GetFixtureB_28_29(HEAP32[$2 + 24 >> 2]), 
    HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
    if (!(HEAP32[$2 + 40 >> 2] != HEAP32[$2 + 20 >> 2] & HEAP32[$2 + 40 >> 2] != HEAP32[$2 + 16 >> 2])) {
     b2ContactManager__Destroy_28b2Contact__29(HEAP32[$0 + 88 >> 2] + 102868 | 0, HEAP32[$2 + 24 >> 2]);
    }
    continue;
   }
   break;
  }
  HEAP32[$2 + 12 >> 2] = HEAP32[$0 + 88 >> 2];
  if (HEAPU16[$0 + 4 >> 1] & 32) {
   HEAP32[$2 + 8 >> 2] = HEAP32[$0 + 88 >> 2] + 102868;
   b2Fixture__DestroyProxies_28b2BroadPhase__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 8 >> 2]);
  }
  HEAP32[HEAP32[$2 + 40 >> 2] + 8 >> 2] = 0;
  HEAP32[HEAP32[$2 + 40 >> 2] + 4 >> 2] = 0;
  b2Fixture__Destroy_28b2BlockAllocator__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 12 >> 2]);
  b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 40 >> 2], 44);
  HEAP32[$0 + 104 >> 2] = HEAP32[$0 + 104 >> 2] - 1;
  b2Body__ResetMassData_28_29($0);
 }
 __stack_pointer = $2 + 48 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______init_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____max_size_5babi_v160004_5d_28_29_20const($0) >>> 0 >= $2 >>> 0) {
  label$2: {
   if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______fits_in_sso_5babi_v160004_5d_28unsigned_20long_29($2)) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_v160004_5d_28unsigned_20long_29($0, $2);
    $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_pointer_5babi_v160004_5d_28_29($0);
    break label$2;
   }
   std____2____allocation_result_std____2__allocator_traits_std____2__allocator_char____pointer__20std____2____allocate_at_least_5babi_v160004_5d_std____2__allocator_char___28std____2__allocator_char___2c_20unsigned_20long_29($3 + 8 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______alloc_5babi_v160004_5d_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_v160004_5d_28unsigned_20long_29($2) + 1 | 0);
   $4 = HEAP32[$3 + 8 >> 2];
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______begin_lifetime_5babi_v160004_5d_28char__2c_20unsigned_20long_29($4, HEAP32[$3 + 12 >> 2]);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_v160004_5d_28char__29($0, $4);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_v160004_5d_28unsigned_20long_29($0, HEAP32[$3 + 12 >> 2]);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_v160004_5d_28unsigned_20long_29($0, $2);
  }
  std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_5babi_v160004_5d_char__28char__29($4), $1, $2);
  HEAP8[$3 + 7 | 0] = 0;
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $4 | 0, $3 + 7 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v160004_5d_28_29_20const($0);
 wasm2js_trap();
}

function b2ContactManager__Destroy_28b2Contact__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Contact__GetFixtureA_28_29(HEAP32[$2 + 24 >> 2]), 
 HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Contact__GetFixtureB_28_29(HEAP32[$2 + 24 >> 2]), 
 HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$2 + 20 >> 2]), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$2 + 16 >> 2]), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 label$1: {
  if (!HEAP32[$0 + 72 >> 2]) {
   break label$1;
  }
  if (!(b2Contact__IsTouching_28_29_20const(HEAP32[$2 + 24 >> 2]) & 1)) {
   break label$1;
  }
  $1 = HEAP32[$0 + 72 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, HEAP32[$2 + 24 >> 2]);
 }
 if (HEAP32[HEAP32[$2 + 24 >> 2] + 8 >> 2]) {
  HEAP32[HEAP32[HEAP32[$2 + 24 >> 2] + 8 >> 2] + 12 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 12 >> 2];
 }
 if (HEAP32[HEAP32[$2 + 24 >> 2] + 12 >> 2]) {
  HEAP32[HEAP32[HEAP32[$2 + 24 >> 2] + 12 >> 2] + 8 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 8 >> 2];
 }
 if (HEAP32[$2 + 24 >> 2] == HEAP32[$0 + 60 >> 2]) {
  HEAP32[$0 + 60 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 12 >> 2];
 }
 if (HEAP32[HEAP32[$2 + 24 >> 2] + 24 >> 2]) {
  HEAP32[HEAP32[HEAP32[$2 + 24 >> 2] + 24 >> 2] + 12 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 28 >> 2];
 }
 if (HEAP32[HEAP32[$2 + 24 >> 2] + 28 >> 2]) {
  HEAP32[HEAP32[HEAP32[$2 + 24 >> 2] + 28 >> 2] + 8 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 24 >> 2];
 }
 if (HEAP32[HEAP32[$2 + 12 >> 2] + 112 >> 2] == (HEAP32[$2 + 24 >> 2] + 16 | 0)) {
  HEAP32[HEAP32[$2 + 12 >> 2] + 112 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 28 >> 2];
 }
 if (HEAP32[HEAP32[$2 + 24 >> 2] + 40 >> 2]) {
  HEAP32[HEAP32[HEAP32[$2 + 24 >> 2] + 40 >> 2] + 12 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 44 >> 2];
 }
 if (HEAP32[HEAP32[$2 + 24 >> 2] + 44 >> 2]) {
  HEAP32[HEAP32[HEAP32[$2 + 24 >> 2] + 44 >> 2] + 8 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 40 >> 2];
 }
 if (HEAP32[HEAP32[$2 + 8 >> 2] + 112 >> 2] == (HEAP32[$2 + 24 >> 2] + 32 | 0)) {
  HEAP32[HEAP32[$2 + 8 >> 2] + 112 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 44 >> 2];
 }
 b2Contact__Destroy_28b2Contact__2c_20b2BlockAllocator__29(HEAP32[$2 + 24 >> 2], HEAP32[$0 + 76 >> 2]);
 HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 64 >> 2] - 1;
 __stack_pointer = $2 + 32 | 0;
}

function ComputeCentroid_28b2Vec2_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $3 = __stack_pointer - 112 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 108 >> 2] = $1;
 HEAP32[$3 + 104 >> 2] = $2;
 if (HEAP32[$3 + 104 >> 2] < 3) {
  __assert_fail(11799, 5651, 82, 9921);
  wasm2js_trap();
 }
 b2Vec2__b2Vec2_28_29($0);
 b2Vec2__Set_28float_2c_20float_29($0, Math_fround(0), Math_fround(0));
 HEAPF32[$3 + 100 >> 2] = 0;
 b2Vec2__b2Vec2_28float_2c_20float_29($3 + 92 | 0, Math_fround(0), Math_fround(0));
 HEAPF32[$3 + 88 >> 2] = .3333333432674408;
 HEAP32[$3 + 84 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 84 >> 2] < HEAP32[$3 + 104 >> 2]) {
   $5 = HEAP32[$3 + 96 >> 2];
   $1 = HEAP32[$3 + 92 >> 2];
   HEAP32[$3 + 72 >> 2] = $1;
   HEAP32[$3 + 76 >> 2] = $5;
   $4 = HEAP32[$3 + 108 >> 2] + (HEAP32[$3 + 84 >> 2] << 3) | 0;
   $5 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   HEAP32[$3 + 64 >> 2] = $5;
   HEAP32[$3 + 68 >> 2] = $1;
   $2 = $3;
   if (HEAP32[$3 + 104 >> 2] > (HEAP32[$3 + 84 >> 2] + 1 | 0)) {
    $4 = HEAP32[$3 + 108 >> 2] + (HEAP32[$3 + 84 >> 2] + 1 << 3) | 0;
   } else {
    $4 = HEAP32[$3 + 108 >> 2];
   }
   $1 = HEAP32[$4 >> 2];
   $5 = HEAP32[$4 + 4 >> 2];
   $4 = $1;
   $1 = $2;
   HEAP32[$1 + 56 >> 2] = $4;
   HEAP32[$1 + 60 >> 2] = $5;
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 48 | 0, $3 - -64 | 0, $3 + 72 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 40 | 0, $3 + 56 | 0, $3 + 72 | 0);
   wasm2js_i32$0 = $3, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 48 | 0, $3 + 40 | 0), 
   HEAPF32[wasm2js_i32$0 + 36 >> 2] = wasm2js_f32$0;
   HEAPF32[$3 + 32 >> 2] = HEAPF32[$3 + 36 >> 2] * Math_fround(.5);
   HEAPF32[$3 + 100 >> 2] = HEAPF32[$3 + 100 >> 2] + HEAPF32[$3 + 32 >> 2];
   $6 = HEAPF32[$3 + 32 >> 2];
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 8 | 0, $3 + 72 | 0, $3 - -64 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 16 | 0, $3 + 8 | 0, $3 + 56 | 0);
   operator__28float_2c_20b2Vec2_20const__29($3 + 24 | 0, Math_fround($6 * Math_fround(.3333333432674408)), $3 + 16 | 0);
   b2Vec2__operator___28b2Vec2_20const__29($0, $3 + 24 | 0);
   HEAP32[$3 + 84 >> 2] = HEAP32[$3 + 84 >> 2] + 1;
   continue;
  }
  break;
 }
 if (!(HEAPF32[$3 + 100 >> 2] > Math_fround(1.1920928955078125e-7))) {
  __assert_fail(10688, 5651, 121, 9921);
  wasm2js_trap();
 }
 b2Vec2__operator___28float_29($0, Math_fround(Math_fround(1) / HEAPF32[$3 + 100 >> 2]));
 __stack_pointer = $3 + 112 | 0;
}

function b2EPCollider__ComputePolygonSeparation_28_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 76 >> 2] = $1;
 $1 = HEAP32[$2 + 76 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = -1;
 HEAPF32[$0 + 8 >> 2] = -34028234663852886e22;
 b2Vec2__b2Vec2_28float_2c_20float_29($2 + 68 | 0, Math_fround(-HEAPF32[$1 + 216 >> 2]), HEAPF32[$1 + 212 >> 2]);
 HEAP32[$2 + 64 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 64 >> 2] < HEAP32[$1 + 128 >> 2]) {
   b2Vec2__operator__28_29_20const($2 + 56 | 0, ($1 - -64 | 0) + (HEAP32[$2 + 64 >> 2] << 3) | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 44 | 0, (HEAP32[$2 + 64 >> 2] << 3) + $1 | 0, $1 + 164 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 56 | 0, $2 + 44 | 0), 
   HEAPF32[wasm2js_i32$0 + 52 >> 2] = wasm2js_f32$0;
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 32 | 0, (HEAP32[$2 + 64 >> 2] << 3) + $1 | 0, $1 + 172 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 56 | 0, $2 + 32 | 0), 
   HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
   wasm2js_i32$0 = $2, wasm2js_f32$0 = float_20b2Min_float__28float_2c_20float_29(HEAPF32[$2 + 52 >> 2], HEAPF32[$2 + 40 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 28 >> 2] = wasm2js_f32$0;
   if (HEAPF32[$2 + 28 >> 2] > HEAPF32[$1 + 244 >> 2]) {
    HEAP32[$0 >> 2] = 2;
    HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 64 >> 2];
    HEAPF32[$0 + 8 >> 2] = HEAPF32[$2 + 28 >> 2];
   } else {
    label$5: {
     label$6: {
      if (b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 56 | 0, $2 + 68 | 0) >= Math_fround(0)) {
       operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 20 | 0, $2 + 56 | 0, $1 + 236 | 0);
       if (b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 20 | 0, $1 + 212 | 0) < Math_fround(-.03490658849477768)) {
        break label$5;
       }
       break label$6;
      }
      operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 12 | 0, $2 + 56 | 0, $1 + 228 | 0);
      if (b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 12 | 0, $1 + 212 | 0) < Math_fround(-.03490658849477768)) {
       break label$5;
      }
     }
     if (HEAPF32[$2 + 28 >> 2] > HEAPF32[$0 + 8 >> 2]) {
      HEAP32[$0 >> 2] = 2;
      HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 64 >> 2];
      HEAPF32[$0 + 8 >> 2] = HEAPF32[$2 + 28 >> 2];
     }
    }
    HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 64 >> 2] + 1;
    continue;
   }
  }
  break;
 }
 __stack_pointer = $2 + 80 | 0;
}

function b2PrismaticJoint__GetJointSpeed_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $1 = __stack_pointer - 160 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 156 >> 2] = $0;
 $0 = HEAP32[$1 + 156 >> 2];
 HEAP32[$1 + 152 >> 2] = HEAP32[$0 + 48 >> 2];
 HEAP32[$1 + 148 >> 2] = HEAP32[$0 + 52 >> 2];
 $2 = HEAP32[$1 + 152 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 132 | 0, $0 + 68 | 0, HEAP32[$1 + 152 >> 2] + 28 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($1 + 140 | 0, $2 + 20 | 0, $1 + 132 | 0);
 $2 = HEAP32[$1 + 148 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 116 | 0, $0 + 76 | 0, HEAP32[$1 + 148 >> 2] + 28 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($1 + 124 | 0, $2 + 20 | 0, $1 + 116 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($1 + 108 | 0, HEAP32[$1 + 152 >> 2] + 44 | 0, $1 + 140 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($1 + 100 | 0, HEAP32[$1 + 148 >> 2] + 44 | 0, $1 + 124 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 92 | 0, $1 + 100 | 0, $1 + 108 | 0);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($1 + 84 | 0, HEAP32[$1 + 152 >> 2] + 20 | 0, $0 + 84 | 0);
 $2 = HEAP32[$1 + 152 >> 2];
 $3 = HEAP32[$2 + 64 >> 2];
 $0 = HEAP32[$2 + 68 >> 2];
 HEAP32[$1 + 72 >> 2] = $3;
 HEAP32[$1 + 76 >> 2] = $0;
 $2 = HEAP32[$1 + 148 >> 2];
 $0 = HEAP32[$2 + 64 >> 2];
 $3 = HEAP32[$2 + 68 >> 2];
 HEAP32[$1 + 64 >> 2] = $0;
 HEAP32[$1 + 68 >> 2] = $3;
 HEAPF32[$1 + 60 >> 2] = HEAPF32[HEAP32[$1 + 152 >> 2] + 72 >> 2];
 HEAPF32[$1 + 56 >> 2] = HEAPF32[HEAP32[$1 + 148 >> 2] + 72 >> 2];
 b2Cross_28float_2c_20b2Vec2_20const__29($1 + 44 | 0, HEAPF32[$1 + 60 >> 2], $1 + 84 | 0);
 $4 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 92 | 0, $1 + 44 | 0);
 b2Cross_28float_2c_20b2Vec2_20const__29($1 + 12 | 0, HEAPF32[$1 + 56 >> 2], $1 + 124 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($1 + 20 | 0, $1 - -64 | 0, $1 + 12 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 28 | 0, $1 + 20 | 0, $1 + 72 | 0);
 b2Cross_28float_2c_20b2Vec2_20const__29($1 + 4 | 0, HEAPF32[$1 + 60 >> 2], $1 + 140 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 36 | 0, $1 + 28 | 0, $1 + 4 | 0);
 wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround($4 + b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 84 | 0, $1 + 36 | 0)), 
 HEAPF32[wasm2js_i32$0 + 52 >> 2] = wasm2js_f32$0;
 __stack_pointer = $1 + 160 | 0;
 return Math_fround(HEAPF32[$1 + 52 >> 2]);
}

function std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____find_b2Fixture___28b2Fixture__20const__29($0, $1) {
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______lower_bound_b2Fixture___28b2Fixture__20const__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20std____2____tree_end_node_std____2____tree_node_base_void______29($0, HEAP32[$2 + 20 >> 2], std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______root_5babi_v160004_5d_28_29_20const($0), std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______end_node_5babi_v160004_5d_28_29($0)), 
 HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____end_5babi_v160004_5d_28_29($0), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 if (std____2__operator___5babi_v160004_5d_28std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__2c_20std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__29_1($2 + 16 | 0, $2 + 12 | 0) & 1) {
  $3 = std____2__less_b2Fixture____operator_28_29_5babi_v160004_5d_28b2Fixture__20const__2c_20b2Fixture__20const__29_20const(std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____value_comp_5babi_v160004_5d_28_29($0), HEAP32[$2 + 20 >> 2], std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long___operator__5babi_v160004_5d_28_29_20const($2 + 16 | 0)) ^ -1;
 }
 label$2: {
  if ($3 & 1) {
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
   break label$2;
  }
  wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____end_5babi_v160004_5d_28_29($0), 
  HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function emscripten__internal__WireTypePack_unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float____WireTypePack_28unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = __stack_pointer - 80 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 20 >> 2] = $0;
 HEAP32[$5 + 16 >> 2] = $1;
 HEAP32[$5 + 12 >> 2] = $2;
 HEAP32[$5 + 8 >> 2] = $3;
 HEAP32[$5 + 4 >> 2] = $4;
 $0 = HEAP32[$5 + 20 >> 2];
 wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__array_emscripten__internal__GenericWireType_2c_204ul___data_5babi_v160004_5d_28_29($0), 
 HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $1 = HEAP32[$5 + 16 >> 2];
 $2 = HEAP32[$5 + 12 >> 2];
 $3 = HEAP32[$5 + 8 >> 2];
 $4 = HEAP32[$5 + 4 >> 2];
 HEAP32[$5 + 40 >> 2] = $5;
 HEAP32[$5 + 36 >> 2] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP32[$5 + 24 >> 2] = $4;
 void_20emscripten__internal__writeGenericWireType_unsigned_20int__28emscripten__internal__GenericWireType___2c_20unsigned_20int_29(HEAP32[$5 + 40 >> 2], emscripten__internal__BindingType_unsigned_20int_2c_20void___toWireType_28unsigned_20int_20const__29(HEAP32[$5 + 36 >> 2]));
 $1 = HEAP32[$5 + 32 >> 2];
 $2 = HEAP32[$5 + 28 >> 2];
 $3 = HEAP32[$5 + 24 >> 2];
 HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 40 >> 2];
 HEAP32[$5 + 52 >> 2] = $1;
 HEAP32[$5 + 48 >> 2] = $2;
 HEAP32[$5 + 44 >> 2] = $3;
 void_20emscripten__internal__writeGenericWireType_b2Vec2__28emscripten__internal__GenericWireType___2c_20b2Vec2__29(HEAP32[$5 + 56 >> 2], emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$5 + 52 >> 2]));
 $1 = HEAP32[$5 + 48 >> 2];
 $2 = HEAP32[$5 + 44 >> 2];
 HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 56 >> 2];
 HEAP32[$5 + 64 >> 2] = $1;
 HEAP32[$5 + 60 >> 2] = $2;
 void_20emscripten__internal__writeGenericWireType_b2Vec2__28emscripten__internal__GenericWireType___2c_20b2Vec2__29(HEAP32[$5 + 68 >> 2], emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$5 + 64 >> 2]));
 $1 = HEAP32[$5 + 60 >> 2];
 HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 68 >> 2];
 HEAP32[$5 + 72 >> 2] = $1;
 emscripten__internal__writeGenericWireType_28emscripten__internal__GenericWireType___2c_20float_29(HEAP32[$5 + 76 >> 2], emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$5 + 72 >> 2]));
 emscripten__internal__writeGenericWireTypes_28emscripten__internal__GenericWireType___29(HEAP32[$5 + 76 >> 2]);
 __stack_pointer = $5 + 80 | 0;
 return $0;
}

function __memcpy($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 if ($2 >>> 0 >= 512) {
  emscripten_memcpy_big($0 | 0, $1 | 0, $2 | 0);
  return $0;
 }
 $4 = $0 + $2 | 0;
 label$2: {
  if (!(($0 ^ $1) & 3)) {
   label$4: {
    if (!($0 & 3)) {
     $2 = $0;
     break label$4;
    }
    if (!$2) {
     $2 = $0;
     break label$4;
    }
    $2 = $0;
    while (1) {
     HEAP8[$2 | 0] = HEAPU8[$1 | 0];
     $1 = $1 + 1 | 0;
     $2 = $2 + 1 | 0;
     if (!($2 & 3)) {
      break label$4;
     }
     if ($2 >>> 0 < $4 >>> 0) {
      continue;
     }
     break;
    }
   }
   $3 = $4 & -4;
   label$8: {
    if ($3 >>> 0 < 64) {
     break label$8;
    }
    $5 = $3 + -64 | 0;
    if ($5 >>> 0 < $2 >>> 0) {
     break label$8;
    }
    while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
     HEAP32[$2 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
     HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
     HEAP32[$2 + 28 >> 2] = HEAP32[$1 + 28 >> 2];
     HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
     HEAP32[$2 + 36 >> 2] = HEAP32[$1 + 36 >> 2];
     HEAP32[$2 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
     HEAP32[$2 + 44 >> 2] = HEAP32[$1 + 44 >> 2];
     HEAP32[$2 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
     HEAP32[$2 + 52 >> 2] = HEAP32[$1 + 52 >> 2];
     HEAP32[$2 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
     HEAP32[$2 + 60 >> 2] = HEAP32[$1 + 60 >> 2];
     $1 = $1 - -64 | 0;
     $2 = $2 - -64 | 0;
     if ($5 >>> 0 >= $2 >>> 0) {
      continue;
     }
     break;
    }
   }
   if ($2 >>> 0 >= $3 >>> 0) {
    break label$2;
   }
   while (1) {
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($3 >>> 0 > $2 >>> 0) {
     continue;
    }
    break;
   }
   break label$2;
  }
  if ($4 >>> 0 < 4) {
   $2 = $0;
   break label$2;
  }
  $3 = $4 - 4 | 0;
  if ($3 >>> 0 < $0 >>> 0) {
   $2 = $0;
   break label$2;
  }
  $2 = $0;
  while (1) {
   HEAP8[$2 | 0] = HEAPU8[$1 | 0];
   HEAP8[$2 + 1 | 0] = HEAPU8[$1 + 1 | 0];
   HEAP8[$2 + 2 | 0] = HEAPU8[$1 + 2 | 0];
   HEAP8[$2 + 3 | 0] = HEAPU8[$1 + 3 | 0];
   $1 = $1 + 4 | 0;
   $2 = $2 + 4 | 0;
   if ($3 >>> 0 >= $2 >>> 0) {
    continue;
   }
   break;
  }
 }
 if ($2 >>> 0 < $4 >>> 0) {
  while (1) {
   HEAP8[$2 | 0] = HEAPU8[$1 | 0];
   $1 = $1 + 1 | 0;
   $2 = $2 + 1 | 0;
   if (($4 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 return $0;
}

function emscripten__internal__WireTypePack_b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const____WireTypePack_28b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = __stack_pointer - 80 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 20 >> 2] = $0;
 HEAP32[$5 + 16 >> 2] = $1;
 HEAP32[$5 + 12 >> 2] = $2;
 HEAP32[$5 + 8 >> 2] = $3;
 HEAP32[$5 + 4 >> 2] = $4;
 $0 = HEAP32[$5 + 20 >> 2];
 wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__array_emscripten__internal__GenericWireType_2c_204ul___data_5babi_v160004_5d_28_29($0), 
 HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $1 = HEAP32[$5 + 16 >> 2];
 $2 = HEAP32[$5 + 12 >> 2];
 $3 = HEAP32[$5 + 8 >> 2];
 $4 = HEAP32[$5 + 4 >> 2];
 HEAP32[$5 + 40 >> 2] = $5;
 HEAP32[$5 + 36 >> 2] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP32[$5 + 24 >> 2] = $4;
 void_20emscripten__internal__writeGenericWireType_b2Vec2__28emscripten__internal__GenericWireType___2c_20b2Vec2__29(HEAP32[$5 + 40 >> 2], emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$5 + 36 >> 2]));
 $1 = HEAP32[$5 + 32 >> 2];
 $2 = HEAP32[$5 + 28 >> 2];
 $3 = HEAP32[$5 + 24 >> 2];
 HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 40 >> 2];
 HEAP32[$5 + 52 >> 2] = $1;
 HEAP32[$5 + 48 >> 2] = $2;
 HEAP32[$5 + 44 >> 2] = $3;
 emscripten__internal__writeGenericWireType_28emscripten__internal__GenericWireType___2c_20float_29(HEAP32[$5 + 56 >> 2], emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$5 + 52 >> 2]));
 $1 = HEAP32[$5 + 48 >> 2];
 $2 = HEAP32[$5 + 44 >> 2];
 HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 56 >> 2];
 HEAP32[$5 + 64 >> 2] = $1;
 HEAP32[$5 + 60 >> 2] = $2;
 void_20emscripten__internal__writeGenericWireType_b2Vec2__28emscripten__internal__GenericWireType___2c_20b2Vec2__29(HEAP32[$5 + 68 >> 2], emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$5 + 64 >> 2]));
 $1 = HEAP32[$5 + 60 >> 2];
 HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 68 >> 2];
 HEAP32[$5 + 72 >> 2] = $1;
 void_20emscripten__internal__writeGenericWireType_b2Color__28emscripten__internal__GenericWireType___2c_20b2Color__29(HEAP32[$5 + 76 >> 2], emscripten__internal__GenericBindingType_b2Color___toWireType_28b2Color_20const__29(HEAP32[$5 + 72 >> 2]));
 emscripten__internal__writeGenericWireTypes_28emscripten__internal__GenericWireType___29(HEAP32[$5 + 76 >> 2]);
 __stack_pointer = $5 + 80 | 0;
 return $0;
}

function b2World__Dump_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 60 >> 2] = $0;
 $0 = HEAP32[$1 + 60 >> 2];
 if (!(HEAP8[$0 + 102989 | 0] & 1)) {
  $3 = HEAPF32[$0 + 102964 >> 2];
  HEAPF64[$1 + 8 >> 3] = HEAPF32[$0 + 102968 >> 2];
  HEAPF64[$1 >> 3] = $3;
  b2Log_28char_20const__2c_20____29(14495, $1);
  b2Log_28char_20const__2c_20____29(13793, 0);
  HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 102956 >> 2];
  b2Log_28char_20const__2c_20____29(15260, $1 + 16 | 0);
  HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 102960 >> 2];
  b2Log_28char_20const__2c_20____29(15320, $1 + 32 | 0);
  HEAP32[$1 + 56 >> 2] = 0;
  HEAP32[$1 + 52 >> 2] = HEAP32[$0 + 102948 >> 2];
  while (1) {
   if (HEAP32[$1 + 52 >> 2]) {
    HEAP32[HEAP32[$1 + 52 >> 2] + 8 >> 2] = HEAP32[$1 + 56 >> 2];
    b2Body__Dump_28_29(HEAP32[$1 + 52 >> 2]);
    HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 56 >> 2] + 1;
    HEAP32[$1 + 52 >> 2] = HEAP32[HEAP32[$1 + 52 >> 2] + 96 >> 2];
    continue;
   }
   break;
  }
  HEAP32[$1 + 56 >> 2] = 0;
  HEAP32[$1 + 48 >> 2] = HEAP32[$0 + 102952 >> 2];
  while (1) {
   if (HEAP32[$1 + 48 >> 2]) {
    HEAP32[HEAP32[$1 + 48 >> 2] + 56 >> 2] = HEAP32[$1 + 56 >> 2];
    HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 56 >> 2] + 1;
    HEAP32[$1 + 48 >> 2] = HEAP32[HEAP32[$1 + 48 >> 2] + 12 >> 2];
    continue;
   }
   break;
  }
  HEAP32[$1 + 44 >> 2] = HEAP32[$0 + 102952 >> 2];
  while (1) {
   if (HEAP32[$1 + 44 >> 2]) {
    if (HEAP32[HEAP32[$1 + 44 >> 2] + 4 >> 2] != 6) {
     b2Log_28char_20const__2c_20____29(12372, 0);
     $2 = HEAP32[$1 + 44 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2);
     b2Log_28char_20const__2c_20____29(12367, 0);
    }
    HEAP32[$1 + 44 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 12 >> 2];
    continue;
   }
   break;
  }
  HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 102952 >> 2];
  while (1) {
   if (HEAP32[$1 + 40 >> 2]) {
    if (HEAP32[HEAP32[$1 + 40 >> 2] + 4 >> 2] == 6) {
     b2Log_28char_20const__2c_20____29(12372, 0);
     $0 = HEAP32[$1 + 40 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
     b2Log_28char_20const__2c_20____29(12367, 0);
    }
    HEAP32[$1 + 40 >> 2] = HEAP32[HEAP32[$1 + 40 >> 2] + 12 >> 2];
    continue;
   }
   break;
  }
  b2Log_28char_20const__2c_20____29(13759, 0);
  b2Log_28char_20const__2c_20____29(13776, 0);
  b2Log_28char_20const__2c_20____29(12375, 0);
  b2Log_28char_20const__2c_20____29(12394, 0);
 }
 __stack_pointer = $1 - -64 | 0;
}

function b2PolygonShape__SetAsBox_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = Math_fround($2);
 $3 = $3 | 0;
 $4 = Math_fround($4);
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAPF32[$5 + 56 >> 2] = $1;
 HEAPF32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAPF32[$5 + 44 >> 2] = $4;
 $6 = HEAP32[$5 + 60 >> 2];
 HEAP32[$6 + 148 >> 2] = 4;
 b2Vec2__Set_28float_2c_20float_29($6 + 20 | 0, Math_fround(-HEAPF32[$5 + 56 >> 2]), Math_fround(-HEAPF32[$5 + 52 >> 2]));
 b2Vec2__Set_28float_2c_20float_29($6 + 28 | 0, HEAPF32[$5 + 56 >> 2], Math_fround(-HEAPF32[$5 + 52 >> 2]));
 b2Vec2__Set_28float_2c_20float_29($6 + 36 | 0, HEAPF32[$5 + 56 >> 2], HEAPF32[$5 + 52 >> 2]);
 b2Vec2__Set_28float_2c_20float_29($6 + 44 | 0, Math_fround(-HEAPF32[$5 + 56 >> 2]), HEAPF32[$5 + 52 >> 2]);
 b2Vec2__Set_28float_2c_20float_29($6 + 84 | 0, Math_fround(0), Math_fround(-1));
 b2Vec2__Set_28float_2c_20float_29($6 + 92 | 0, Math_fround(1), Math_fround(0));
 b2Vec2__Set_28float_2c_20float_29($6 + 100 | 0, Math_fround(0), Math_fround(1));
 b2Vec2__Set_28float_2c_20float_29($6 + 108 | 0, Math_fround(-1), Math_fround(0));
 $7 = HEAP32[$5 + 48 >> 2];
 $3 = HEAP32[$7 >> 2];
 $0 = HEAP32[$7 + 4 >> 2];
 HEAP32[$6 + 12 >> 2] = $3;
 HEAP32[$6 + 16 >> 2] = $0;
 b2Transform__b2Transform_28_29($5 + 28 | 0);
 $7 = HEAP32[$5 + 48 >> 2];
 $0 = HEAP32[$7 >> 2];
 $3 = HEAP32[$7 + 4 >> 2];
 $7 = $0;
 $0 = $5 + 28 | 0;
 HEAP32[$0 >> 2] = $7;
 HEAP32[$0 + 4 >> 2] = $3;
 b2Rot__Set_28float_29($5 + 36 | 0, HEAPF32[$5 + 44 >> 2]);
 HEAP32[$5 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 24 >> 2] < HEAP32[$6 + 148 >> 2]) {
   b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($5 + 16 | 0, $5 + 28 | 0, ($6 + 20 | 0) + (HEAP32[$5 + 24 >> 2] << 3) | 0);
   $0 = HEAP32[$5 + 20 >> 2];
   $3 = HEAP32[$5 + 16 >> 2];
   $7 = $3;
   $3 = ($6 + 20 | 0) + (HEAP32[$5 + 24 >> 2] << 3) | 0;
   HEAP32[$3 >> 2] = $7;
   HEAP32[$3 + 4 >> 2] = $0;
   b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($5 + 8 | 0, $5 + 36 | 0, ($6 + 84 | 0) + (HEAP32[$5 + 24 >> 2] << 3) | 0);
   $3 = HEAP32[$5 + 12 >> 2];
   $0 = HEAP32[$5 + 8 >> 2];
   $7 = $0;
   $0 = ($6 + 84 | 0) + (HEAP32[$5 + 24 >> 2] << 3) | 0;
   HEAP32[$0 >> 2] = $7;
   HEAP32[$0 + 4 >> 2] = $3;
   HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 - -64 | 0;
}

function b2Body__Dump_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 224 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 220 >> 2] = $0;
 $0 = HEAP32[$1 + 220 >> 2];
 HEAP32[$1 + 216 >> 2] = HEAP32[$0 + 8 >> 2];
 b2Log_28char_20const__2c_20____29(12372, 0);
 b2Log_28char_20const__2c_20____29(13616, 0);
 HEAP32[$1 + 176 >> 2] = HEAP32[$0 >> 2];
 b2Log_28char_20const__2c_20____29(15056, $1 + 176 | 0);
 $2 = HEAPF32[$0 + 12 >> 2];
 HEAPF64[$1 + 168 >> 3] = HEAPF32[$0 + 16 >> 2];
 HEAPF64[$1 + 160 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14036, $1 + 160 | 0);
 HEAPF64[$1 + 144 >> 3] = HEAPF32[$0 + 56 >> 2];
 b2Log_28char_20const__2c_20____29(12951, $1 + 144 | 0);
 $2 = HEAPF32[$0 + 64 >> 2];
 HEAPF64[$1 + 136 >> 3] = HEAPF32[$0 + 68 >> 2];
 HEAPF64[$1 + 128 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(13818, $1 + 128 | 0);
 HEAPF64[$1 + 112 >> 3] = HEAPF32[$0 + 72 >> 2];
 b2Log_28char_20const__2c_20____29(12469, $1 + 112 | 0);
 HEAPF64[$1 + 96 >> 3] = HEAPF32[$0 + 132 >> 2];
 b2Log_28char_20const__2c_20____29(12861, $1 + 96 | 0);
 HEAPF64[$1 + 80 >> 3] = HEAPF32[$0 + 136 >> 2];
 b2Log_28char_20const__2c_20____29(12829, $1 + 80 | 0);
 HEAP32[$1 + 64 >> 2] = HEAPU16[$0 + 4 >> 1] & 4;
 b2Log_28char_20const__2c_20____29(14838, $1 - -64 | 0);
 HEAP32[$1 + 48 >> 2] = HEAPU16[$0 + 4 >> 1] & 2;
 b2Log_28char_20const__2c_20____29(14899, $1 + 48 | 0);
 HEAP32[$1 + 32 >> 2] = HEAPU16[$0 + 4 >> 1] & 16;
 b2Log_28char_20const__2c_20____29(14867, $1 + 32 | 0);
 HEAP32[$1 + 16 >> 2] = HEAPU16[$0 + 4 >> 1] & 8;
 b2Log_28char_20const__2c_20____29(14754, $1 + 16 | 0);
 HEAP32[$1 >> 2] = HEAPU16[$0 + 4 >> 1] & 32;
 b2Log_28char_20const__2c_20____29(14958, $1);
 HEAPF64[$1 + 192 >> 3] = HEAPF32[$0 + 140 >> 2];
 b2Log_28char_20const__2c_20____29(13062, $1 + 192 | 0);
 HEAP32[$1 + 208 >> 2] = HEAP32[$0 + 8 >> 2];
 b2Log_28char_20const__2c_20____29(14604, $1 + 208 | 0);
 b2Log_28char_20const__2c_20____29(15467, 0);
 HEAP32[$1 + 212 >> 2] = HEAP32[$0 + 100 >> 2];
 while (1) {
  if (HEAP32[$1 + 212 >> 2]) {
   b2Log_28char_20const__2c_20____29(12370, 0);
   b2Fixture__Dump_28int_29(HEAP32[$1 + 212 >> 2], HEAP32[$1 + 216 >> 2]);
   b2Log_28char_20const__2c_20____29(12365, 0);
   HEAP32[$1 + 212 >> 2] = HEAP32[HEAP32[$1 + 212 >> 2] + 4 >> 2];
   continue;
  }
  break;
 }
 b2Log_28char_20const__2c_20____29(12367, 0);
 __stack_pointer = $1 + 224 | 0;
}

function b2Mat33__GetSymInverse33_28b2Mat33__29_20const($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 $0 = HEAP32[$2 + 44 >> 2];
 b2Cross_28b2Vec3_20const__2c_20b2Vec3_20const__29($2 + 24 | 0, $0 + 12 | 0, $0 + 24 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec3_20const__2c_20b2Vec3_20const__29($0, $2 + 24 | 0), 
 HEAPF32[wasm2js_i32$0 + 36 >> 2] = wasm2js_f32$0;
 if (HEAPF32[$2 + 36 >> 2] != Math_fround(0)) {
  HEAPF32[$2 + 36 >> 2] = Math_fround(1) / HEAPF32[$2 + 36 >> 2];
 }
 HEAPF32[$2 + 20 >> 2] = HEAPF32[$0 >> 2];
 HEAPF32[$2 + 16 >> 2] = HEAPF32[$0 + 12 >> 2];
 HEAPF32[$2 + 12 >> 2] = HEAPF32[$0 + 24 >> 2];
 HEAPF32[$2 + 8 >> 2] = HEAPF32[$0 + 16 >> 2];
 HEAPF32[$2 + 4 >> 2] = HEAPF32[$0 + 28 >> 2];
 HEAPF32[$2 >> 2] = HEAPF32[$0 + 32 >> 2];
 HEAPF32[HEAP32[$2 + 40 >> 2] >> 2] = HEAPF32[$2 + 36 >> 2] * Math_fround(Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[$2 >> 2]) - Math_fround(HEAPF32[$2 + 4 >> 2] * HEAPF32[$2 + 4 >> 2]));
 HEAPF32[HEAP32[$2 + 40 >> 2] + 4 >> 2] = HEAPF32[$2 + 36 >> 2] * Math_fround(Math_fround(HEAPF32[$2 + 12 >> 2] * HEAPF32[$2 + 4 >> 2]) - Math_fround(HEAPF32[$2 + 16 >> 2] * HEAPF32[$2 >> 2]));
 HEAPF32[HEAP32[$2 + 40 >> 2] + 8 >> 2] = HEAPF32[$2 + 36 >> 2] * Math_fround(Math_fround(HEAPF32[$2 + 16 >> 2] * HEAPF32[$2 + 4 >> 2]) - Math_fround(HEAPF32[$2 + 12 >> 2] * HEAPF32[$2 + 8 >> 2]));
 HEAPF32[HEAP32[$2 + 40 >> 2] + 12 >> 2] = HEAPF32[HEAP32[$2 + 40 >> 2] + 4 >> 2];
 HEAPF32[HEAP32[$2 + 40 >> 2] + 16 >> 2] = HEAPF32[$2 + 36 >> 2] * Math_fround(Math_fround(HEAPF32[$2 + 20 >> 2] * HEAPF32[$2 >> 2]) - Math_fround(HEAPF32[$2 + 12 >> 2] * HEAPF32[$2 + 12 >> 2]));
 HEAPF32[HEAP32[$2 + 40 >> 2] + 20 >> 2] = HEAPF32[$2 + 36 >> 2] * Math_fround(Math_fround(HEAPF32[$2 + 12 >> 2] * HEAPF32[$2 + 16 >> 2]) - Math_fround(HEAPF32[$2 + 20 >> 2] * HEAPF32[$2 + 4 >> 2]));
 HEAPF32[HEAP32[$2 + 40 >> 2] + 24 >> 2] = HEAPF32[HEAP32[$2 + 40 >> 2] + 8 >> 2];
 HEAPF32[HEAP32[$2 + 40 >> 2] + 28 >> 2] = HEAPF32[HEAP32[$2 + 40 >> 2] + 20 >> 2];
 HEAPF32[HEAP32[$2 + 40 >> 2] + 32 >> 2] = HEAPF32[$2 + 36 >> 2] * Math_fround(Math_fround(HEAPF32[$2 + 20 >> 2] * HEAPF32[$2 + 8 >> 2]) - Math_fround(HEAPF32[$2 + 16 >> 2] * HEAPF32[$2 + 16 >> 2]));
 __stack_pointer = $2 + 48 | 0;
}

function b2Body__SetMassData_28b2MassData_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 $0 = HEAP32[$2 + 44 >> 2];
 if (b2World__IsLocked_28_29_20const(HEAP32[$0 + 88 >> 2]) & 1) {
  __assert_fail(8952, 4121, 356, 10243);
  wasm2js_trap();
 }
 if (!(b2World__IsLocked_28_29_20const(HEAP32[$0 + 88 >> 2]) & 1 | HEAP32[$0 >> 2] != 2)) {
  HEAPF32[$0 + 120 >> 2] = 0;
  HEAPF32[$0 + 124 >> 2] = 0;
  HEAPF32[$0 + 128 >> 2] = 0;
  HEAPF32[$0 + 116 >> 2] = HEAPF32[HEAP32[$2 + 40 >> 2] >> 2];
  if (HEAPF32[$0 + 116 >> 2] <= Math_fround(0)) {
   HEAPF32[$0 + 116 >> 2] = 1;
  }
  HEAPF32[$0 + 120 >> 2] = Math_fround(1) / HEAPF32[$0 + 116 >> 2];
  if (!(!(HEAPF32[HEAP32[$2 + 40 >> 2] + 12 >> 2] > Math_fround(0)) | HEAPU16[$0 + 4 >> 1] & 16)) {
   $4 = HEAPF32[HEAP32[$2 + 40 >> 2] + 12 >> 2];
   wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(-HEAPF32[$0 + 116 >> 2]) * b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$2 + 40 >> 2] + 4 | 0, HEAP32[$2 + 40 >> 2] + 4 | 0)) + $4), 
   HEAPF32[wasm2js_i32$0 + 124 >> 2] = wasm2js_f32$0;
   if (!(HEAPF32[$0 + 124 >> 2] > Math_fround(0))) {
    __assert_fail(7946, 4121, 382, 10243);
    wasm2js_trap();
   }
   HEAPF32[$0 + 128 >> 2] = Math_fround(1) / HEAPF32[$0 + 124 >> 2];
  }
  $1 = HEAP32[$0 + 48 >> 2];
  $3 = HEAP32[$0 + 44 >> 2];
  HEAP32[$2 + 32 >> 2] = $3;
  HEAP32[$2 + 36 >> 2] = $1;
  $3 = HEAP32[$2 + 40 >> 2];
  $1 = HEAP32[$3 + 4 >> 2];
  $3 = HEAP32[$3 + 8 >> 2];
  HEAP32[$0 + 28 >> 2] = $1;
  HEAP32[$0 + 32 >> 2] = $3;
  b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($2 + 24 | 0, $0 + 12 | 0, $0 + 28 | 0);
  $1 = HEAP32[$2 + 28 >> 2];
  $3 = HEAP32[$2 + 24 >> 2];
  HEAP32[$0 + 44 >> 2] = $3;
  HEAP32[$0 + 48 >> 2] = $1;
  $3 = HEAP32[$0 + 48 >> 2];
  $1 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 36 >> 2] = $1;
  HEAP32[$0 + 40 >> 2] = $3;
  $4 = HEAPF32[$0 + 72 >> 2];
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 8 | 0, $0 + 44 | 0, $2 + 32 | 0);
  b2Cross_28float_2c_20b2Vec2_20const__29($2 + 16 | 0, $4, $2 + 8 | 0);
  b2Vec2__operator___28b2Vec2_20const__29($0 - -64 | 0, $2 + 16 | 0);
 }
 __stack_pointer = $2 + 48 | 0;
}

function b2FindMaxSeparation_28int__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 108 >> 2] = $0;
 HEAP32[$5 + 104 >> 2] = $1;
 HEAP32[$5 + 100 >> 2] = $2;
 HEAP32[$5 + 96 >> 2] = $3;
 HEAP32[$5 + 92 >> 2] = $4;
 HEAP32[$5 + 88 >> 2] = HEAP32[HEAP32[$5 + 104 >> 2] + 148 >> 2];
 HEAP32[$5 + 84 >> 2] = HEAP32[HEAP32[$5 + 96 >> 2] + 148 >> 2];
 HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 104 >> 2] + 84;
 HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 104 >> 2] + 20;
 HEAP32[$5 + 72 >> 2] = HEAP32[$5 + 96 >> 2] + 20;
 b2MulT_28b2Transform_20const__2c_20b2Transform_20const__29($5 + 56 | 0, HEAP32[$5 + 92 >> 2], HEAP32[$5 + 100 >> 2]);
 HEAP32[$5 + 52 >> 2] = 0;
 HEAPF32[$5 + 48 >> 2] = -34028234663852886e22;
 HEAP32[$5 + 44 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 44 >> 2] < HEAP32[$5 + 88 >> 2]) {
   b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($5 + 36 | 0, $5 - -64 | 0, HEAP32[$5 + 80 >> 2] + (HEAP32[$5 + 44 >> 2] << 3) | 0);
   b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($5 + 28 | 0, $5 + 56 | 0, HEAP32[$5 + 76 >> 2] + (HEAP32[$5 + 44 >> 2] << 3) | 0);
   HEAPF32[$5 + 24 >> 2] = 34028234663852886e22;
   HEAP32[$5 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 20 >> 2] < HEAP32[$5 + 84 >> 2]) {
     operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 8 | 0, HEAP32[$5 + 72 >> 2] + (HEAP32[$5 + 20 >> 2] << 3) | 0, $5 + 28 | 0);
     wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 36 | 0, $5 + 8 | 0), 
     HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
     if (HEAPF32[$5 + 16 >> 2] < HEAPF32[$5 + 24 >> 2]) {
      HEAPF32[$5 + 24 >> 2] = HEAPF32[$5 + 16 >> 2];
     }
     HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   if (HEAPF32[$5 + 24 >> 2] > HEAPF32[$5 + 48 >> 2]) {
    HEAPF32[$5 + 48 >> 2] = HEAPF32[$5 + 24 >> 2];
    HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 44 >> 2];
   }
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 44 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[HEAP32[$5 + 108 >> 2] >> 2] = HEAP32[$5 + 52 >> 2];
 __stack_pointer = $5 + 112 | 0;
 return HEAPF32[$5 + 48 >> 2];
}

function b2World__Step_28float_2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAPF32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 $0 = HEAP32[$4 + 44 >> 2];
 b2Timer__b2Timer_28_29($4 + 31 | 0);
 if (HEAP8[$0 + 102988 | 0] & 1) {
  b2ContactManager__FindNewContacts_28_29($0 + 102868 | 0);
  HEAP8[$0 + 102988 | 0] = 0;
 }
 HEAP8[$0 + 102989 | 0] = 1;
 HEAPF32[$4 + 4 >> 2] = HEAPF32[$4 + 40 >> 2];
 HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 36 >> 2];
 HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 32 >> 2];
 label$2: {
  if (HEAPF32[$4 + 40 >> 2] > Math_fround(0)) {
   HEAPF32[$4 + 8 >> 2] = Math_fround(1) / HEAPF32[$4 + 40 >> 2];
   break label$2;
  }
  HEAPF32[$4 + 8 >> 2] = 0;
 }
 HEAPF32[$4 + 12 >> 2] = HEAPF32[$0 + 102984 >> 2] * HEAPF32[$4 + 40 >> 2];
 HEAP8[$4 + 24 | 0] = HEAP8[$0 + 102991 | 0] & 1;
 b2Timer__b2Timer_28_29($4 + 3 | 0);
 b2ContactManager__Collide_28_29($0 + 102868 | 0);
 wasm2js_i32$0 = $0, wasm2js_f32$0 = b2Timer__GetMilliseconds_28_29_20const($4 + 3 | 0), 
 HEAPF32[wasm2js_i32$0 + 103e3 >> 2] = wasm2js_f32$0;
 if (!(!(HEAP8[$0 + 102994 | 0] & 1) | !(HEAPF32[$4 + 4 >> 2] > Math_fround(0)))) {
  b2Timer__b2Timer_28_29($4 + 2 | 0);
  b2World__Solve_28b2TimeStep_20const__29($0, $4 + 4 | 0);
  wasm2js_i32$0 = $0, wasm2js_f32$0 = b2Timer__GetMilliseconds_28_29_20const($4 + 2 | 0), 
  HEAPF32[wasm2js_i32$0 + 103004 >> 2] = wasm2js_f32$0;
 }
 if (!(!(HEAP8[$0 + 102992 | 0] & 1) | !(HEAPF32[$4 + 4 >> 2] > Math_fround(0)))) {
  b2Timer__b2Timer_28_29($4 + 1 | 0);
  b2World__SolveTOI_28b2TimeStep_20const__29($0, $4 + 4 | 0);
  wasm2js_i32$0 = $0, wasm2js_f32$0 = b2Timer__GetMilliseconds_28_29_20const($4 + 1 | 0), 
  HEAPF32[wasm2js_i32$0 + 103024 >> 2] = wasm2js_f32$0;
 }
 if (HEAPF32[$4 + 4 >> 2] > Math_fround(0)) {
  HEAPF32[$0 + 102984 >> 2] = HEAPF32[$4 + 8 >> 2];
 }
 if (HEAP8[$0 + 102990 | 0] & 1) {
  b2World__ClearForces_28_29($0);
 }
 HEAP8[$0 + 102989 | 0] = 0;
 wasm2js_i32$0 = $0, wasm2js_f32$0 = b2Timer__GetMilliseconds_28_29_20const($4 + 31 | 0), 
 HEAPF32[wasm2js_i32$0 + 102996 >> 2] = wasm2js_f32$0;
 __stack_pointer = $4 + 48 | 0;
}

function b2DistanceProxy__Set_28b2Shape_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $1 = HEAP32[$3 + 28 >> 2];
 label$1: {
  label$2: {
   switch (b2Shape__GetType_28_29_20const(HEAP32[$3 + 24 >> 2]) | 0) {
   case 0:
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 24 >> 2];
    HEAP32[$1 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 12;
    HEAP32[$1 + 20 >> 2] = 1;
    HEAPF32[$1 + 24 >> 2] = HEAPF32[HEAP32[$3 + 16 >> 2] + 8 >> 2];
    break label$1;

   case 2:
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 24 >> 2];
    HEAP32[$1 + 16 >> 2] = HEAP32[$3 + 12 >> 2] + 20;
    HEAP32[$1 + 20 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 148 >> 2];
    HEAPF32[$1 + 24 >> 2] = HEAPF32[HEAP32[$3 + 12 >> 2] + 8 >> 2];
    break label$1;

   case 3:
    HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
    if (!(HEAP32[$3 + 20 >> 2] < HEAP32[HEAP32[$3 + 8 >> 2] + 16 >> 2] & HEAP32[$3 + 20 >> 2] >= 0)) {
     __assert_fail(1982, 5927, 57, 3081);
     wasm2js_trap();
    }
    $4 = HEAP32[HEAP32[$3 + 8 >> 2] + 12 >> 2] + (HEAP32[$3 + 20 >> 2] << 3) | 0;
    $0 = HEAP32[$4 >> 2];
    $2 = HEAP32[$4 + 4 >> 2];
    HEAP32[$1 >> 2] = $0;
    HEAP32[$1 + 4 >> 2] = $2;
    label$9: {
     if (HEAP32[HEAP32[$3 + 8 >> 2] + 16 >> 2] > (HEAP32[$3 + 20 >> 2] + 1 | 0)) {
      $4 = HEAP32[HEAP32[$3 + 8 >> 2] + 12 >> 2] + (HEAP32[$3 + 20 >> 2] + 1 << 3) | 0;
      $2 = HEAP32[$4 >> 2];
      $0 = HEAP32[$4 + 4 >> 2];
      HEAP32[$1 + 8 >> 2] = $2;
      HEAP32[$1 + 12 >> 2] = $0;
      break label$9;
     }
     $4 = HEAP32[HEAP32[$3 + 8 >> 2] + 12 >> 2];
     $0 = HEAP32[$4 >> 2];
     $2 = HEAP32[$4 + 4 >> 2];
     HEAP32[$1 + 8 >> 2] = $0;
     HEAP32[$1 + 12 >> 2] = $2;
    }
    HEAP32[$1 + 16 >> 2] = $1;
    HEAP32[$1 + 20 >> 2] = 2;
    HEAPF32[$1 + 24 >> 2] = HEAPF32[HEAP32[$3 + 8 >> 2] + 8 >> 2];
    break label$1;

   case 1:
    HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 24 >> 2];
    HEAP32[$1 + 16 >> 2] = HEAP32[$3 + 4 >> 2] + 12;
    HEAP32[$1 + 20 >> 2] = 2;
    HEAPF32[$1 + 24 >> 2] = HEAPF32[HEAP32[$3 + 4 >> 2] + 8 >> 2];
    break label$1;

   default:
    break label$2;
   }
  }
  __assert_fail(8975, 5927, 85, 3081);
  wasm2js_trap();
 }
 __stack_pointer = $3 + 32 | 0;
}

function b2DynamicTree__AllocateNode_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if (HEAP32[$0 + 16 >> 2] == -1) {
  if (HEAP32[$0 + 8 >> 2] != HEAP32[$0 + 12 >> 2]) {
   __assert_fail(1353, 5858, 61, 9638);
   wasm2js_trap();
  }
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] << 1;
  wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Alloc_28int_29(Math_imul(HEAP32[$0 + 12 >> 2], 40)), 
  HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  __memcpy(HEAP32[$0 + 4 >> 2], HEAP32[$1 + 8 >> 2], Math_imul(HEAP32[$0 + 8 >> 2], 40));
  b2Free_28void__29(HEAP32[$1 + 8 >> 2]);
  HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 8 >> 2];
  while (1) {
   if (HEAP32[$1 + 4 >> 2] < (HEAP32[$0 + 12 >> 2] - 1 | 0)) {
    HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$1 + 4 >> 2], 40) | 0) + 20 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
    HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$1 + 4 >> 2], 40) | 0) + 32 >> 2] = -1;
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$0 + 12 >> 2] - 1 | 0, 40) | 0) + 20 >> 2] = -1;
  HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$0 + 12 >> 2] - 1 | 0, 40) | 0) + 32 >> 2] = -1;
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 HEAP32[$1 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$1 >> 2], 40) | 0) + 20 >> 2];
 HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$1 >> 2], 40) | 0) + 20 >> 2] = -1;
 HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$1 >> 2], 40) | 0) + 24 >> 2] = -1;
 HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$1 >> 2], 40) | 0) + 28 >> 2] = -1;
 HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$1 >> 2], 40) | 0) + 32 >> 2] = 0;
 HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$1 >> 2], 40) | 0) + 16 >> 2] = 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$1 >> 2], 40) | 0) + 36 | 0] = 0;
 HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 >> 2];
}

function b2ChainShape__GetChildEdge_28b2EdgeShape__2c_20int_29_20const($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = HEAP32[$3 + 12 >> 2];
 if (!(HEAP32[$3 + 4 >> 2] < (HEAP32[$2 + 16 >> 2] - 1 | 0) & HEAP32[$3 + 4 >> 2] >= 0)) {
  __assert_fail(11925, 5721, 123, 9620);
  wasm2js_trap();
 }
 HEAP32[HEAP32[$3 + 8 >> 2] + 4 >> 2] = 1;
 HEAPF32[HEAP32[$3 + 8 >> 2] + 8 >> 2] = HEAPF32[$2 + 8 >> 2];
 $4 = HEAP32[$2 + 12 >> 2] + (HEAP32[$3 + 4 >> 2] << 3) | 0;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 $4 = $0;
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = $4;
 HEAP32[$0 + 16 >> 2] = $1;
 $4 = HEAP32[$2 + 12 >> 2] + (HEAP32[$3 + 4 >> 2] + 1 << 3) | 0;
 $1 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 $4 = $1;
 $1 = HEAP32[$3 + 8 >> 2];
 HEAP32[$1 + 20 >> 2] = $4;
 HEAP32[$1 + 24 >> 2] = $0;
 label$3: {
  if (HEAP32[$3 + 4 >> 2] > 0) {
   $4 = HEAP32[$2 + 12 >> 2] + (HEAP32[$3 + 4 >> 2] - 1 << 3) | 0;
   $0 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $4 = $0;
   $0 = HEAP32[$3 + 8 >> 2];
   HEAP32[$0 + 28 >> 2] = $4;
   HEAP32[$0 + 32 >> 2] = $1;
   HEAP8[HEAP32[$3 + 8 >> 2] + 44 | 0] = 1;
   break label$3;
  }
  $0 = HEAP32[$2 + 24 >> 2];
  $1 = HEAP32[$2 + 20 >> 2];
  $4 = $1;
  $1 = HEAP32[$3 + 8 >> 2];
  HEAP32[$1 + 28 >> 2] = $4;
  HEAP32[$1 + 32 >> 2] = $0;
  HEAP8[HEAP32[$3 + 8 >> 2] + 44 | 0] = HEAP8[$2 + 36 | 0] & 1;
 }
 label$5: {
  if (HEAP32[$3 + 4 >> 2] < (HEAP32[$2 + 16 >> 2] - 2 | 0)) {
   $4 = HEAP32[$2 + 12 >> 2] + (HEAP32[$3 + 4 >> 2] + 2 << 3) | 0;
   $0 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $2 = $0;
   $0 = HEAP32[$3 + 8 >> 2];
   HEAP32[$0 + 36 >> 2] = $2;
   HEAP32[$0 + 40 >> 2] = $1;
   HEAP8[HEAP32[$3 + 8 >> 2] + 45 | 0] = 1;
   break label$5;
  }
  $0 = HEAP32[$2 + 32 >> 2];
  $1 = HEAP32[$2 + 28 >> 2];
  $4 = $1;
  $1 = HEAP32[$3 + 8 >> 2];
  HEAP32[$1 + 36 >> 2] = $4;
  HEAP32[$1 + 40 >> 2] = $0;
  HEAP8[HEAP32[$3 + 8 >> 2] + 45 | 0] = HEAP8[$2 + 37 | 0] & 1;
 }
 __stack_pointer = $3 + 16 | 0;
}

function b2MouseJoint__b2MouseJoint_28b2MouseJointDef_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $1 = HEAP32[$2 + 24 >> 2];
 HEAP32[$2 + 28 >> 2] = $1;
 b2Joint__b2Joint_28b2JointDef_20const__29($1, HEAP32[$2 + 20 >> 2]);
 HEAP32[$1 >> 2] = 19060;
 b2Vec2__b2Vec2_28_29($1 + 68 | 0);
 b2Vec2__b2Vec2_28_29($1 + 76 | 0);
 b2Vec2__b2Vec2_28_29($1 + 96 | 0);
 b2Vec2__b2Vec2_28_29($1 + 120 | 0);
 b2Vec2__b2Vec2_28_29($1 + 128 | 0);
 b2Mat22__b2Mat22_28_29($1 + 144 | 0);
 b2Vec2__b2Vec2_28_29($1 + 160 | 0);
 if (!(b2Vec2__IsValid_28_29_20const(HEAP32[$2 + 20 >> 2] + 20 | 0) & 1)) {
  __assert_fail(12290, 4452, 38, 2662);
  wasm2js_trap();
 }
 if (!(b2IsValid_28float_29(HEAPF32[HEAP32[$2 + 20 >> 2] + 28 >> 2]) & 1 & HEAPF32[HEAP32[$2 + 20 >> 2] + 28 >> 2] >= Math_fround(0))) {
  __assert_fail(8349, 4452, 39, 2662);
  wasm2js_trap();
 }
 if (!(b2IsValid_28float_29(HEAPF32[HEAP32[$2 + 20 >> 2] + 32 >> 2]) & 1 & HEAPF32[HEAP32[$2 + 20 >> 2] + 32 >> 2] >= Math_fround(0))) {
  __assert_fail(7982, 4452, 40, 2662);
  wasm2js_trap();
 }
 if (!(b2IsValid_28float_29(HEAPF32[HEAP32[$2 + 20 >> 2] + 36 >> 2]) & 1 & HEAPF32[HEAP32[$2 + 20 >> 2] + 36 >> 2] >= Math_fround(0))) {
  __assert_fail(8103, 4452, 41, 2662);
  wasm2js_trap();
 }
 $0 = HEAP32[$2 + 20 >> 2];
 $3 = HEAP32[$0 + 20 >> 2];
 $0 = HEAP32[$0 + 24 >> 2];
 HEAP32[$1 + 76 >> 2] = $3;
 HEAP32[$1 + 80 >> 2] = $0;
 b2MulT_28b2Transform_20const__2c_20b2Vec2_20const__29($2 + 12 | 0, b2Body__GetTransform_28_29_20const(HEAP32[$1 + 52 >> 2]), $1 + 76 | 0);
 $3 = HEAP32[$2 + 16 >> 2];
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$1 + 68 >> 2] = $0;
 HEAP32[$1 + 72 >> 2] = $3;
 HEAPF32[$1 + 104 >> 2] = HEAPF32[HEAP32[$2 + 20 >> 2] + 28 >> 2];
 b2Vec2__SetZero_28_29($1 + 96 | 0);
 HEAPF32[$1 + 84 >> 2] = HEAPF32[HEAP32[$2 + 20 >> 2] + 32 >> 2];
 HEAPF32[$1 + 88 >> 2] = HEAPF32[HEAP32[$2 + 20 >> 2] + 36 >> 2];
 HEAPF32[$1 + 92 >> 2] = 0;
 HEAPF32[$1 + 108 >> 2] = 0;
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____erase_28std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = $0;
 $0 = HEAP32[$2 + 20 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long_____get_np_5babi_v160004_5d_28_29_20const($2 + 24 | 0), 
 HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______remove_node_pointer_28std____2____tree_node_b2Fixture__2c_20void____29($0, HEAP32[$2 + 16 >> 2]), 
 HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______node_alloc_5babi_v160004_5d_28_29($0), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 void_20std____2__allocator_traits_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______destroy_5babi_v160004_5d_b2Fixture__2c_20void_2c_20void__28std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_20b2Fixture___29(HEAP32[$2 + 12 >> 2], std____2____tree_key_value_types_b2Fixture______get_ptr_5babi_v160004_5d_28b2Fixture___29(std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long___operator__5babi_v160004_5d_28_29_20const($2 + 24 | 0)));
 std____2__allocator_traits_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______deallocate_5babi_v160004_5d_28std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20unsigned_20long_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2], 1);
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function std____2__pair_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____20std____2____move_loop_std____2___ClassicAlgPolicy___operator_28_29_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29_20const($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 12 >> 2] = $2;
 HEAP32[$5 + 8 >> 2] = $3;
 HEAP32[$5 + 4 >> 2] = $4;
 HEAP32[$5 >> 2] = $1;
 while (1) {
  if (bool_20std____2__operator___5babi_v160004_5d_b2Vec2__2c_20b2Vec2___28std____2__reverse_iterator_b2Vec2___20const__2c_20std____2__reverse_iterator_b2Vec2___20const__29($5 + 12 | 0, $5 + 8 | 0) & 1) {
   $1 = std____2__enable_if_is_reference_decltype_28_std__declval_std____2__reverse_iterator_b2Vec2_____28_29_29___value_2c_20decltype_28std__move_28_std__declval_std____2__reverse_iterator_b2Vec2_____28_29_29_29___type_20std____2___IterOps_std____2___ClassicAlgPolicy_____iter_move_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2_____28std____2__reverse_iterator_b2Vec2____29($5 + 12 | 0);
   $2 = std____2__reverse_iterator_b2Vec2____operator__5babi_v160004_5d_28_29_20const($5 + 4 | 0);
   $3 = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = $3;
   std____2__reverse_iterator_b2Vec2____operator___5babi_v160004_5d_28_29($5 + 12 | 0);
   std____2__reverse_iterator_b2Vec2____operator___5babi_v160004_5d_28_29($5 + 4 | 0);
   continue;
  }
  break;
 }
 std____2__pair_std____2____unwrap_ref_decay_std____2__reverse_iterator_b2Vec2_____type_2c_20std____2____unwrap_ref_decay_std____2__reverse_iterator_b2Vec2_____type__20std____2__make_pair_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____28std____2__reverse_iterator_b2Vec2_____2c_20std____2__reverse_iterator_b2Vec2_____29($0, $5 + 12 | 0, $5 + 4 | 0);
 __stack_pointer = $5 + 16 | 0;
}

function unsigned_20long_20std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______erase_unique_b2Fixture___28b2Fixture__20const__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____find_b2Fixture___28b2Fixture__20const__29($0, HEAP32[$2 + 20 >> 2]), 
 HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____end_5babi_v160004_5d_28_29($0), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 label$1: {
  if (std____2__operator___5babi_v160004_5d_28std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__2c_20std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__29($2 + 16 | 0, $2 + 12 | 0) & 1) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 16 >> 2];
  std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long_____tree_const_iterator_5babi_v160004_5d_28std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__29($2 + 8 | 0, HEAP32[$2 + 4 >> 2]);
  wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____erase_28std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__29($0, HEAP32[$2 + 8 >> 2]), 
  HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$2 + 28 >> 2] = 1;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2PolygonShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const___invoke_b2PolygonShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20bool_20_28b2PolygonShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 554;
 $0 = emscripten__internal__TypeID_b2PolygonShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2PolygonShape____emscripten__internal__getContext_bool_20_28b2PolygonShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const__28bool_20_28b2PolygonShape____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_29_29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20b2BroadPhase__UpdatePairs_b2ContactManager__28b2ContactManager__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 $0 = HEAP32[$2 + 44 >> 2];
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$2 + 36 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 36 >> 2] < HEAP32[$0 + 40 >> 2]) {
   HEAP32[$0 + 56 >> 2] = HEAP32[HEAP32[$0 + 32 >> 2] + (HEAP32[$2 + 36 >> 2] << 2) >> 2];
   if (HEAP32[$0 + 56 >> 2] != -1) {
    wasm2js_i32$0 = $2, wasm2js_i32$1 = b2DynamicTree__GetFatAABB_28int_29_20const($0, HEAP32[$0 + 56 >> 2]), 
    HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
    void_20b2DynamicTree__Query_b2BroadPhase__28b2BroadPhase__2c_20b2AABB_20const__29_20const($0, $0, HEAP32[$2 + 32 >> 2]);
   }
   HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$2 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 28 >> 2] < HEAP32[$0 + 52 >> 2]) {
   HEAP32[$2 + 24 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAP32[$2 + 28 >> 2] << 3);
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2DynamicTree__GetUserData_28int_29_20const($0, HEAP32[HEAP32[$2 + 24 >> 2] >> 2]), 
   HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $2, wasm2js_i32$1 = b2DynamicTree__GetUserData_28int_29_20const($0, HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2]), 
   HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
   b2ContactManager__AddPair_28void__2c_20void__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$2 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 12 >> 2] < HEAP32[$0 + 40 >> 2]) {
   HEAP32[$2 + 8 >> 2] = HEAP32[HEAP32[$0 + 32 >> 2] + (HEAP32[$2 + 12 >> 2] << 2) >> 2];
   if (HEAP32[$2 + 8 >> 2] != -1) {
    b2DynamicTree__ClearMoved_28int_29($0, HEAP32[$2 + 8 >> 2]);
   }
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$0 + 40 >> 2] = 0;
 __stack_pointer = $2 + 48 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2CircleShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const___invoke_b2CircleShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20bool_20_28b2CircleShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 536;
 $0 = emscripten__internal__TypeID_b2CircleShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2CircleShape____emscripten__internal__getContext_bool_20_28b2CircleShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const__28bool_20_28b2CircleShape____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_29_29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2PrismaticJoint__b2PrismaticJoint_28b2PrismaticJointDef_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Joint__b2Joint_28b2JointDef_20const__29($1, HEAP32[$2 + 8 >> 2]);
 HEAP32[$1 >> 2] = 19252;
 b2Vec2__b2Vec2_28_29($1 + 68 | 0);
 b2Vec2__b2Vec2_28_29($1 + 76 | 0);
 b2Vec2__b2Vec2_28_29($1 + 84 | 0);
 b2Vec2__b2Vec2_28_29($1 + 92 | 0);
 b2Vec3__b2Vec3_28_29($1 + 104 | 0);
 b2Vec2__b2Vec2_28_29($1 + 152 | 0);
 b2Vec2__b2Vec2_28_29($1 + 160 | 0);
 b2Vec2__b2Vec2_28_29($1 + 184 | 0);
 b2Vec2__b2Vec2_28_29($1 + 192 | 0);
 b2Mat33__b2Mat33_28_29($1 + 216 | 0);
 $3 = HEAP32[$2 + 8 >> 2];
 $4 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$1 + 68 >> 2] = $4;
 HEAP32[$1 + 72 >> 2] = $0;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 $4 = HEAP32[$3 + 32 >> 2];
 HEAP32[$1 + 76 >> 2] = $0;
 HEAP32[$1 + 80 >> 2] = $4;
 $3 = HEAP32[$2 + 8 >> 2];
 $4 = HEAP32[$3 + 36 >> 2];
 $0 = HEAP32[$3 + 40 >> 2];
 HEAP32[$1 + 84 >> 2] = $4;
 HEAP32[$1 + 88 >> 2] = $0;
 b2Vec2__Normalize_28_29($1 + 84 | 0);
 b2Cross_28float_2c_20b2Vec2_20const__29($2, Math_fround(1), $1 + 84 | 0);
 $4 = HEAP32[$2 + 4 >> 2];
 $0 = HEAP32[$2 >> 2];
 HEAP32[$1 + 92 >> 2] = $0;
 HEAP32[$1 + 96 >> 2] = $4;
 HEAPF32[$1 + 100 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 44 >> 2];
 b2Vec3__SetZero_28_29($1 + 104 | 0);
 HEAPF32[$1 + 252 >> 2] = 0;
 HEAPF32[$1 + 116 >> 2] = 0;
 HEAPF32[$1 + 120 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 52 >> 2];
 HEAPF32[$1 + 124 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 56 >> 2];
 HEAPF32[$1 + 128 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 64 >> 2];
 HEAPF32[$1 + 132 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 68 >> 2];
 HEAP8[$1 + 136 | 0] = HEAP8[HEAP32[$2 + 8 >> 2] + 48 | 0] & 1;
 HEAP8[$1 + 137 | 0] = HEAP8[HEAP32[$2 + 8 >> 2] + 60 | 0] & 1;
 HEAP32[$1 + 140 >> 2] = 0;
 b2Vec2__SetZero_28_29($1 + 184 | 0);
 b2Vec2__SetZero_28_29($1 + 192 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $1;
}

function b2Body__SetType_28b2BodyType_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 if (b2World__IsLocked_28_29_20const(HEAP32[$0 + 88 >> 2]) & 1) {
  __assert_fail(8952, 4121, 117, 9065);
  wasm2js_trap();
 }
 label$2: {
  if (b2World__IsLocked_28_29_20const(HEAP32[$0 + 88 >> 2]) & 1 | HEAP32[$0 >> 2] == HEAP32[$2 + 24 >> 2]) {
   break label$2;
  }
  HEAP32[$0 >> 2] = HEAP32[$2 + 24 >> 2];
  b2Body__ResetMassData_28_29($0);
  if (!HEAP32[$0 >> 2]) {
   b2Vec2__SetZero_28_29($0 - -64 | 0);
   HEAPF32[$0 + 72 >> 2] = 0;
   HEAPF32[$0 + 52 >> 2] = HEAPF32[$0 + 56 >> 2];
   $1 = HEAP32[$0 + 48 >> 2];
   HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 44 >> 2];
   HEAP32[$0 + 40 >> 2] = $1;
   b2Body__SynchronizeFixtures_28_29($0);
  }
  b2Body__SetAwake_28bool_29($0, 1);
  b2Vec2__SetZero_28_29($0 + 76 | 0);
  HEAPF32[$0 + 84 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = HEAP32[$0 + 112 >> 2];
  while (1) {
   if (HEAP32[$2 + 20 >> 2]) {
    HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 20 >> 2];
    HEAP32[$2 + 20 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2];
    b2ContactManager__Destroy_28b2Contact__29(HEAP32[$0 + 88 >> 2] + 102868 | 0, HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2]);
    continue;
   }
   break;
  }
  HEAP32[$0 + 112 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = HEAP32[$0 + 88 >> 2] + 102868;
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 + 100 >> 2];
  while (1) {
   if (!HEAP32[$2 + 8 >> 2]) {
    break label$2;
   }
   HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] + 28 >> 2];
   HEAP32[$2 >> 2] = 0;
   while (1) {
    if (HEAP32[$2 >> 2] < HEAP32[$2 + 4 >> 2]) {
     b2BroadPhase__TouchProxy_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[(HEAP32[HEAP32[$2 + 8 >> 2] + 24 >> 2] + Math_imul(HEAP32[$2 >> 2], 28) | 0) + 24 >> 2]);
     HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$2 + 8 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] + 4 >> 2];
   continue;
  }
 }
 __stack_pointer = $2 + 32 | 0;
}

function b2PrismaticJoint__Dump_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 224 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 220 >> 2] = $0;
 $0 = HEAP32[$1 + 220 >> 2];
 HEAP32[$1 + 216 >> 2] = HEAP32[HEAP32[$0 + 48 >> 2] + 8 >> 2];
 HEAP32[$1 + 212 >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] + 8 >> 2];
 b2Log_28char_20const__2c_20____29(13567, 0);
 HEAP32[$1 + 176 >> 2] = HEAP32[$1 + 216 >> 2];
 b2Log_28char_20const__2c_20____29(13733, $1 + 176 | 0);
 HEAP32[$1 + 160 >> 2] = HEAP32[$1 + 212 >> 2];
 b2Log_28char_20const__2c_20____29(13707, $1 + 160 | 0);
 HEAP32[$1 + 144 >> 2] = HEAP8[$0 + 61 | 0] & 1;
 b2Log_28char_20const__2c_20____29(14923, $1 + 144 | 0);
 $2 = HEAPF32[$0 + 68 >> 2];
 HEAPF64[$1 + 136 >> 3] = HEAPF32[$0 + 72 >> 2];
 HEAPF64[$1 + 128 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14234, $1 + 128 | 0);
 $2 = HEAPF32[$0 + 76 >> 2];
 HEAPF64[$1 + 120 >> 3] = HEAPF32[$0 + 80 >> 2];
 HEAPF64[$1 + 112 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14109, $1 + 112 | 0);
 $2 = HEAPF32[$0 + 84 >> 2];
 HEAPF64[$1 + 104 >> 3] = HEAPF32[$0 + 88 >> 2];
 HEAPF64[$1 + 96 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14194, $1 + 96 | 0);
 HEAPF64[$1 + 80 >> 3] = HEAPF32[$0 + 100 >> 2];
 b2Log_28char_20const__2c_20____29(13030, $1 + 80 | 0);
 HEAP32[$1 + 64 >> 2] = HEAP8[$0 + 136 | 0] & 1;
 b2Log_28char_20const__2c_20____29(14724, $1 - -64 | 0);
 HEAPF64[$1 + 48 >> 3] = HEAPF32[$0 + 120 >> 2];
 b2Log_28char_20const__2c_20____29(12710, $1 + 48 | 0);
 HEAPF64[$1 + 32 >> 3] = HEAPF32[$0 + 124 >> 2];
 b2Log_28char_20const__2c_20____29(12744, $1 + 32 | 0);
 HEAP32[$1 + 16 >> 2] = HEAP8[$0 + 137 | 0] & 1;
 b2Log_28char_20const__2c_20____29(14779, $1 + 16 | 0);
 HEAPF64[$1 >> 3] = HEAPF32[$0 + 132 >> 2];
 b2Log_28char_20const__2c_20____29(13149, $1);
 HEAPF64[$1 + 192 >> 3] = HEAPF32[$0 + 128 >> 2];
 b2Log_28char_20const__2c_20____29(13118, $1 + 192 | 0);
 HEAP32[$1 + 208 >> 2] = HEAP32[$0 + 56 >> 2];
 b2Log_28char_20const__2c_20____29(14524, $1 + 208 | 0);
 __stack_pointer = $1 + 224 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28b2RayCastCallback____29_28unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_29___invoke_b2RayCastCallback_2c_20emscripten__pure_virtual_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20float_20_28b2RayCastCallback____29_28unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 475;
 $0 = emscripten__internal__TypeID_b2RayCastCallback_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__pure_virtual_2c_20emscripten__allow_raw_pointers___ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RayCastCallback__2c_20unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__pure_virtual_2c_20emscripten__allow_raw_pointers___ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RayCastCallback__2c_20unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28b2RayCastCallback____emscripten__internal__getContext_float_20_28b2RayCastCallback____29_28unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_29__28float_20_28b2RayCastCallback____20const__29_28unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_29_29_29_28unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_29($2 + 16 | 0) | 0, 1, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2EdgeShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const___invoke_b2EdgeShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20bool_20_28b2EdgeShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 544;
 $0 = emscripten__internal__TypeID_b2EdgeShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2EdgeShape____emscripten__internal__getContext_bool_20_28b2EdgeShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const__28bool_20_28b2EdgeShape____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_29_29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function embind_init_builtin_28_29() {
 _embind_register_void(24324, 9916);
 _embind_register_bool(24348, 6837, 1, 1, 0);
 _embind_register_integer(24360, 4114, 1, -128, 127);
 _embind_register_integer(24384, 4107, 1, -128, 127);
 _embind_register_integer(24372, 4105, 1, 0, 255);
 _embind_register_integer(24396, 1972, 2, -32768, 32767);
 _embind_register_integer(24408, 1963, 2, 0, 65535);
 _embind_register_integer(24420, 2857, 4, -2147483648, 2147483647);
 _embind_register_integer(24432, 2848, 4, 0, -1);
 _embind_register_integer(24444, 7479, 4, -2147483648, 2147483647);
 _embind_register_integer(24456, 7470, 4, 0, -1);
 legalfunc$_embind_register_bigint(24468, 3297, 8, 0, -2147483648, -1, 2147483647);
 legalfunc$_embind_register_bigint(24480, 3296, 8, 0, 0, -1, -1);
 _embind_register_float(24492, 3290, 4);
 _embind_register_float(24504, 9475, 8);
 _embind_register_std_string(25548, 7510);
 _embind_register_std_string(19844, 11578);
 _embind_register_std_wstring(19916, 4, 7484);
 _embind_register_std_wstring(19992, 2, 7522);
 _embind_register_std_wstring(20068, 4, 7537);
 _embind_register_emval(25108, 6842);
 _embind_register_memory_view(20108, 0, 11509);
 _embind_register_memory_view(20148, 0, 11611);
 _embind_register_memory_view(20188, 1, 11539);
 _embind_register_memory_view(20228, 2, 11074);
 _embind_register_memory_view(20268, 3, 11105);
 _embind_register_memory_view(20308, 4, 11145);
 _embind_register_memory_view(20348, 5, 11174);
 _embind_register_memory_view(20388, 4, 11648);
 _embind_register_memory_view(20428, 5, 11678);
 _embind_register_memory_view(20148, 0, 11276);
 _embind_register_memory_view(20188, 1, 11243);
 _embind_register_memory_view(20228, 2, 11342);
 _embind_register_memory_view(20268, 3, 11308);
 _embind_register_memory_view(20308, 4, 11476);
 _embind_register_memory_view(20348, 5, 11442);
 _embind_register_memory_view(20468, 8, 11409);
 _embind_register_memory_view(20508, 9, 11375);
 _embind_register_memory_view(20548, 6, 11212);
 _embind_register_memory_view(20588, 7, 11717);
}

function std____2__pair_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____20std____2____move_loop_std____2___ClassicAlgPolicy___operator_28_29_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 12 >> 2] = $2;
 HEAP32[$5 + 8 >> 2] = $3;
 HEAP32[$5 + 4 >> 2] = $4;
 HEAP32[$5 >> 2] = $1;
 while (1) {
  if (bool_20std____2__operator___5babi_v160004_5d_int__2c_20int___28std____2__reverse_iterator_int___20const__2c_20std____2__reverse_iterator_int___20const__29($5 + 12 | 0, $5 + 8 | 0) & 1) {
   $1 = HEAP32[std____2__enable_if_is_reference_decltype_28_std__declval_std____2__reverse_iterator_int_____28_29_29___value_2c_20decltype_28std__move_28_std__declval_std____2__reverse_iterator_int_____28_29_29_29___type_20std____2___IterOps_std____2___ClassicAlgPolicy_____iter_move_5babi_v160004_5d_std____2__reverse_iterator_int_____28std____2__reverse_iterator_int____29($5 + 12 | 0) >> 2];
   wasm2js_i32$0 = std____2__reverse_iterator_int____operator__5babi_v160004_5d_28_29_20const($5 + 4 | 0), 
   wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   std____2__reverse_iterator_int____operator___5babi_v160004_5d_28_29($5 + 12 | 0);
   std____2__reverse_iterator_int____operator___5babi_v160004_5d_28_29($5 + 4 | 0);
   continue;
  }
  break;
 }
 std____2__pair_std____2____unwrap_ref_decay_std____2__reverse_iterator_int_____type_2c_20std____2____unwrap_ref_decay_std____2__reverse_iterator_int_____type__20std____2__make_pair_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____28std____2__reverse_iterator_int_____2c_20std____2__reverse_iterator_int_____29($0, $5 + 12 | 0, $5 + 4 | 0);
 __stack_pointer = $5 + 16 | 0;
}

function __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
  return;
 }
 $6 = HEAPU8[$1 + 53 | 0];
 $8 = HEAP32[$0 + 12 >> 2];
 HEAP8[$1 + 53 | 0] = 0;
 $7 = HEAPU8[$1 + 52 | 0];
 HEAP8[$1 + 52 | 0] = 0;
 $12 = $0 + 16 | 0;
 __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($12, $1, $2, $3, $4, $5);
 $9 = HEAPU8[$1 + 53 | 0];
 $11 = $9 | $6;
 $10 = HEAPU8[$1 + 52 | 0];
 $7 = $10 | $7;
 $6 = $0 + 24 | 0;
 $8 = ($8 << 3) + $12 | 0;
 label$2: {
  if ($6 >>> 0 >= $8 >>> 0) {
   break label$2;
  }
  while (1) {
   if (HEAPU8[$1 + 54 | 0]) {
    break label$2;
   }
   label$4: {
    if ($10) {
     if (HEAP32[$1 + 24 >> 2] == 1) {
      break label$2;
     }
     if (HEAPU8[$0 + 8 | 0] & 2) {
      break label$4;
     }
     break label$2;
    }
    if (!$9) {
     break label$4;
    }
    if (!(HEAP8[$0 + 8 | 0] & 1)) {
     break label$2;
    }
   }
   HEAP16[$1 + 52 >> 1] = 0;
   __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4, $5);
   $9 = HEAPU8[$1 + 53 | 0];
   $11 = $9 | $11;
   $10 = HEAPU8[$1 + 52 | 0];
   $7 = $10 | $7;
   $6 = $6 + 8 | 0;
   if ($8 >>> 0 > $6 >>> 0) {
    continue;
   }
   break;
  }
 }
 HEAP8[$1 + 53 | 0] = ($11 & 255) != 0;
 HEAP8[$1 + 52 | 0] = ($7 & 255) != 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Shape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const___invoke_b2Shape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20bool_20_28b2Shape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 525;
 $0 = emscripten__internal__TypeID_b2Shape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2Shape____emscripten__internal__getContext_bool_20_28b2Shape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const__28bool_20_28b2Shape____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_29_29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2Simplex__Solve2_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 $1 = HEAP32[$2 + 44 >> 2];
 $3 = HEAP32[$1 + 16 >> 2];
 $0 = HEAP32[$1 + 20 >> 2];
 HEAP32[$2 + 32 >> 2] = $3;
 HEAP32[$2 + 36 >> 2] = $0;
 $3 = HEAP32[$1 + 56 >> 2];
 $0 = HEAP32[$1 + 52 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 28 >> 2] = $3;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 16 | 0, $2 + 24 | 0, $2 + 32 | 0);
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(-b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 32 | 0, $2 + 16 | 0)), 
 HEAPF32[wasm2js_i32$0 + 12 >> 2] = wasm2js_f32$0;
 label$1: {
  if (HEAPF32[$2 + 12 >> 2] <= Math_fround(0)) {
   HEAPF32[$1 + 24 >> 2] = 1;
   HEAP32[$1 + 108 >> 2] = 1;
   break label$1;
  }
  wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 24 | 0, $2 + 16 | 0), 
  HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
  if (HEAPF32[$2 + 8 >> 2] <= Math_fround(0)) {
   HEAPF32[$1 + 60 >> 2] = 1;
   HEAP32[$1 + 108 >> 2] = 1;
   $0 = HEAP32[$1 + 40 >> 2];
   $3 = HEAP32[$1 + 36 >> 2];
   HEAP32[$1 >> 2] = $3;
   HEAP32[$1 + 4 >> 2] = $0;
   HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 68 >> 2];
   $3 = HEAP32[$1 + 64 >> 2];
   $0 = HEAP32[$1 + 60 >> 2];
   HEAP32[$1 + 24 >> 2] = $0;
   HEAP32[$1 + 28 >> 2] = $3;
   $0 = HEAP32[$1 + 56 >> 2];
   $3 = HEAP32[$1 + 52 >> 2];
   HEAP32[$1 + 16 >> 2] = $3;
   HEAP32[$1 + 20 >> 2] = $0;
   $3 = HEAP32[$1 + 48 >> 2];
   $0 = HEAP32[$1 + 44 >> 2];
   HEAP32[$1 + 8 >> 2] = $0;
   HEAP32[$1 + 12 >> 2] = $3;
   break label$1;
  }
  HEAPF32[$2 + 4 >> 2] = Math_fround(1) / Math_fround(HEAPF32[$2 + 8 >> 2] + HEAPF32[$2 + 12 >> 2]);
  HEAPF32[$1 + 24 >> 2] = HEAPF32[$2 + 8 >> 2] * HEAPF32[$2 + 4 >> 2];
  HEAPF32[$1 + 60 >> 2] = HEAPF32[$2 + 12 >> 2] * HEAPF32[$2 + 4 >> 2];
  HEAP32[$1 + 108 >> 2] = 2;
 }
 __stack_pointer = $2 + 48 | 0;
}

function emscripten__internal__WireTypePack_unsigned_20int__2c_20int__2c_20b2Color_20const____WireTypePack_28unsigned_20int__2c_20int__2c_20b2Color_20const__29($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__array_emscripten__internal__GenericWireType_2c_203ul___data_5babi_v160004_5d_28_29($0), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 $1 = HEAP32[$4 + 20 >> 2];
 $2 = HEAP32[$4 + 16 >> 2];
 $3 = HEAP32[$4 + 12 >> 2];
 HEAP32[$4 + 40 >> 2] = $4 + 8;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 void_20emscripten__internal__writeGenericWireType_unsigned_20int__28emscripten__internal__GenericWireType___2c_20unsigned_20int_29(HEAP32[$4 + 40 >> 2], emscripten__internal__BindingType_unsigned_20int_2c_20void___toWireType_28unsigned_20int_20const__29(HEAP32[$4 + 36 >> 2]));
 $1 = HEAP32[$4 + 32 >> 2];
 $2 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 40 >> 2];
 HEAP32[$4 + 48 >> 2] = $1;
 HEAP32[$4 + 44 >> 2] = $2;
 void_20emscripten__internal__writeGenericWireType_int__28emscripten__internal__GenericWireType___2c_20int_29(HEAP32[$4 + 52 >> 2], emscripten__internal__BindingType_int_2c_20void___toWireType_28int_20const__29(HEAP32[$4 + 48 >> 2]));
 $1 = HEAP32[$4 + 44 >> 2];
 HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 52 >> 2];
 HEAP32[$4 + 56 >> 2] = $1;
 void_20emscripten__internal__writeGenericWireType_b2Color__28emscripten__internal__GenericWireType___2c_20b2Color__29(HEAP32[$4 + 60 >> 2], emscripten__internal__GenericBindingType_b2Color___toWireType_28b2Color_20const__29(HEAP32[$4 + 56 >> 2]));
 emscripten__internal__writeGenericWireTypes_28emscripten__internal__GenericWireType___29(HEAP32[$4 + 60 >> 2]);
 __stack_pointer = $4 - -64 | 0;
 return $0;
}

function emscripten__internal__WireTypePack_b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____WireTypePack_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__array_emscripten__internal__GenericWireType_2c_203ul___data_5babi_v160004_5d_28_29($0), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 $1 = HEAP32[$4 + 20 >> 2];
 $2 = HEAP32[$4 + 16 >> 2];
 $3 = HEAP32[$4 + 12 >> 2];
 HEAP32[$4 + 40 >> 2] = $4 + 8;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 void_20emscripten__internal__writeGenericWireType_b2Vec2__28emscripten__internal__GenericWireType___2c_20b2Vec2__29(HEAP32[$4 + 40 >> 2], emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$4 + 36 >> 2]));
 $1 = HEAP32[$4 + 32 >> 2];
 $2 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 40 >> 2];
 HEAP32[$4 + 48 >> 2] = $1;
 HEAP32[$4 + 44 >> 2] = $2;
 void_20emscripten__internal__writeGenericWireType_b2Vec2__28emscripten__internal__GenericWireType___2c_20b2Vec2__29(HEAP32[$4 + 52 >> 2], emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$4 + 48 >> 2]));
 $1 = HEAP32[$4 + 44 >> 2];
 HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 52 >> 2];
 HEAP32[$4 + 56 >> 2] = $1;
 void_20emscripten__internal__writeGenericWireType_b2Color__28emscripten__internal__GenericWireType___2c_20b2Color__29(HEAP32[$4 + 60 >> 2], emscripten__internal__GenericBindingType_b2Color___toWireType_28b2Color_20const__29(HEAP32[$4 + 56 >> 2]));
 emscripten__internal__writeGenericWireTypes_28emscripten__internal__GenericWireType___29(HEAP32[$4 + 60 >> 2]);
 __stack_pointer = $4 - -64 | 0;
 return $0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28unsigned_20long_2c_20b2Vec2_20const__29___invoke_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28char_20const__2c_20void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28unsigned_20long_2c_20b2Vec2_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 708;
 $0 = emscripten__internal__TypeID_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______emscripten__internal__getContext_void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28unsigned_20long_2c_20b2Vec2_20const__29__28void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______20const__29_28unsigned_20long_2c_20b2Vec2_20const__29_29_29_28unsigned_20long_2c_20b2Vec2_20const__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______append_28unsigned_20long_2c_20b2Vec2_20const__29($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 $0 = HEAP32[$3 + 44 >> 2];
 label$1: {
  if (HEAP32[std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______end_cap_5babi_v160004_5d_28_29($0) >> 2] - HEAP32[$0 + 4 >> 2] >> 3 >>> 0 >= HEAPU32[$3 + 40 >> 2]) {
   std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______construct_at_end_28unsigned_20long_2c_20b2Vec2_20const__29($0, HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2]);
   break label$1;
  }
  wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______alloc_5babi_v160004_5d_28_29($0), 
  HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
  std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_b2Vec2___29($3 + 12 | 0, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______recommend_5babi_v160004_5d_28unsigned_20long_29_20const($0, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____size_5babi_v160004_5d_28_29_20const($0) + HEAP32[$3 + 40 >> 2] | 0), std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____size_5babi_v160004_5d_28_29_20const($0), HEAP32[$3 + 32 >> 2]);
  std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______construct_at_end_28unsigned_20long_2c_20b2Vec2_20const__29($3 + 12 | 0, HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2]);
  std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______swap_out_circular_buffer_28std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_____29($0, $3 + 12 | 0);
  std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2________split_buffer_28_29($3 + 12 | 0);
 }
 __stack_pointer = $3 + 48 | 0;
}

function std____2__pair_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____20std____2____unwrap_range_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 28 >> 2];
 wasm2js_i32$0 = $3, wasm2js_i32$1 = decltype_28std____2____unwrap_iter_impl_std____2__reverse_iterator_b2Vec2___2c_20false_____unwrap_28std__declval_std____2__reverse_iterator_b2Vec2____28_29_29_29_20std____2____unwrap_iter_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_b2Vec2___2c_20false__2c_200__28std____2__reverse_iterator_b2Vec2___29(HEAP32[$3 + 16 >> 2]), 
 HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
 wasm2js_i32$0 = $3, wasm2js_i32$1 = decltype_28std____2____unwrap_iter_impl_std____2__reverse_iterator_b2Vec2___2c_20false_____unwrap_28std__declval_std____2__reverse_iterator_b2Vec2____28_29_29_29_20std____2____unwrap_iter_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_b2Vec2___2c_20false__2c_200__28std____2__reverse_iterator_b2Vec2___29(HEAP32[$3 + 8 >> 2]), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 std____2__pair_std____2____unwrap_ref_decay_std____2__reverse_iterator_b2Vec2_____type_2c_20std____2____unwrap_ref_decay_std____2__reverse_iterator_b2Vec2_____type__20std____2__make_pair_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____28std____2__reverse_iterator_b2Vec2_____2c_20std____2__reverse_iterator_b2Vec2_____29($0, $3 + 20 | 0, $3 + 12 | 0);
 __stack_pointer = $3 + 32 | 0;
}

function b2Fixture__Destroy_28b2BlockAllocator__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 if (HEAP32[$0 + 28 >> 2]) {
  __assert_fail(12097, 5588, 76, 1649);
  wasm2js_trap();
 }
 $1 = HEAP32[$0 + 12 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1) | 0, 
 HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
 b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$0 + 24 >> 2], Math_imul(HEAP32[$2 + 20 >> 2], 28));
 HEAP32[$0 + 24 >> 2] = 0;
 label$2: {
  label$3: {
   switch (HEAP32[HEAP32[$0 + 12 >> 2] + 4 >> 2]) {
   case 0:
    HEAP32[$2 + 16 >> 2] = HEAP32[$0 + 12 >> 2];
    $1 = HEAP32[$2 + 16 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
    b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 16 >> 2], 20);
    break label$2;

   case 1:
    HEAP32[$2 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
    $1 = HEAP32[$2 + 12 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
    b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 12 >> 2], 48);
    break label$2;

   case 2:
    HEAP32[$2 + 8 >> 2] = HEAP32[$0 + 12 >> 2];
    $1 = HEAP32[$2 + 8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
    b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 8 >> 2], 152);
    break label$2;

   case 3:
    HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 12 >> 2];
    $1 = HEAP32[$2 + 4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
    b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 4 >> 2], 40);
    break label$2;

   default:
    break label$3;
   }
  }
  __assert_fail(8975, 5588, 119, 1649);
  wasm2js_trap();
 }
 HEAP32[$0 + 12 >> 2] = 0;
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__WireTypePack_b2Vec2_20const__2c_20float__2c_20b2Color_20const____WireTypePack_28b2Vec2_20const__2c_20float__2c_20b2Color_20const__29($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__array_emscripten__internal__GenericWireType_2c_203ul___data_5babi_v160004_5d_28_29($0), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 $1 = HEAP32[$4 + 20 >> 2];
 $2 = HEAP32[$4 + 16 >> 2];
 $3 = HEAP32[$4 + 12 >> 2];
 HEAP32[$4 + 40 >> 2] = $4 + 8;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 void_20emscripten__internal__writeGenericWireType_b2Vec2__28emscripten__internal__GenericWireType___2c_20b2Vec2__29(HEAP32[$4 + 40 >> 2], emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$4 + 36 >> 2]));
 $1 = HEAP32[$4 + 32 >> 2];
 $2 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 40 >> 2];
 HEAP32[$4 + 48 >> 2] = $1;
 HEAP32[$4 + 44 >> 2] = $2;
 emscripten__internal__writeGenericWireType_28emscripten__internal__GenericWireType___2c_20float_29(HEAP32[$4 + 52 >> 2], emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$4 + 48 >> 2]));
 $1 = HEAP32[$4 + 44 >> 2];
 HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 52 >> 2];
 HEAP32[$4 + 56 >> 2] = $1;
 void_20emscripten__internal__writeGenericWireType_b2Color__28emscripten__internal__GenericWireType___2c_20b2Color__29(HEAP32[$4 + 60 >> 2], emscripten__internal__GenericBindingType_b2Color___toWireType_28b2Color_20const__29(HEAP32[$4 + 56 >> 2]));
 emscripten__internal__writeGenericWireTypes_28emscripten__internal__GenericWireType___29(HEAP32[$4 + 60 >> 2]);
 __stack_pointer = $4 - -64 | 0;
 return $0;
}

function b2PolygonShape__ComputeAABB_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 92 >> 2] = $0;
 HEAP32[$4 + 88 >> 2] = $1;
 HEAP32[$4 + 84 >> 2] = $2;
 HEAP32[$4 + 80 >> 2] = $3;
 $2 = HEAP32[$4 + 92 >> 2];
 b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 72 | 0, HEAP32[$4 + 84 >> 2], $2 + 20 | 0);
 $1 = HEAP32[$4 + 76 >> 2];
 $0 = HEAP32[$4 + 72 >> 2];
 HEAP32[$4 + 64 >> 2] = $0;
 HEAP32[$4 + 68 >> 2] = $1;
 HEAP32[$4 + 60 >> 2] = 1;
 while (1) {
  if (HEAP32[$4 + 60 >> 2] < HEAP32[$2 + 148 >> 2]) {
   b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 52 | 0, HEAP32[$4 + 84 >> 2], ($2 + 20 | 0) + (HEAP32[$4 + 60 >> 2] << 3) | 0);
   b2Min_28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 44 | 0, $4 + 72 | 0, $4 + 52 | 0);
   $0 = HEAP32[$4 + 48 >> 2];
   $1 = HEAP32[$4 + 44 >> 2];
   HEAP32[$4 + 72 >> 2] = $1;
   HEAP32[$4 + 76 >> 2] = $0;
   b2Max_28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 36 | 0, $4 - -64 | 0, $4 + 52 | 0);
   $1 = HEAP32[$4 + 40 >> 2];
   $0 = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 + 64 >> 2] = $0;
   HEAP32[$4 + 68 >> 2] = $1;
   HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 60 >> 2] + 1;
   continue;
  }
  break;
 }
 b2Vec2__b2Vec2_28float_2c_20float_29($4 + 28 | 0, HEAPF32[$2 + 8 >> 2], HEAPF32[$2 + 8 >> 2]);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 20 | 0, $4 + 72 | 0, $4 + 28 | 0);
 $0 = HEAP32[$4 + 24 >> 2];
 $1 = HEAP32[$4 + 20 >> 2];
 $2 = $1;
 $1 = HEAP32[$4 + 88 >> 2];
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $0;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($4 + 12 | 0, $4 - -64 | 0, $4 + 28 | 0);
 $1 = HEAP32[$4 + 16 >> 2];
 $0 = HEAP32[$4 + 12 >> 2];
 $2 = $0;
 $0 = HEAP32[$4 + 88 >> 2];
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $1;
 __stack_pointer = $4 + 96 | 0;
}

function b2Fixture__Create_28b2BlockAllocator__2c_20b2Body__2c_20b2FixtureDef_20const__29($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 $0 = HEAP32[$4 + 28 >> 2];
 HEAP32[$0 + 40 >> 2] = HEAP32[HEAP32[$4 + 16 >> 2] + 4 >> 2];
 HEAPF32[$0 + 16 >> 2] = HEAPF32[HEAP32[$4 + 16 >> 2] + 8 >> 2];
 HEAPF32[$0 + 20 >> 2] = HEAPF32[HEAP32[$4 + 16 >> 2] + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$4 + 20 >> 2];
 HEAP32[$0 + 4 >> 2] = 0;
 $1 = HEAP32[$4 + 16 >> 2];
 $2 = HEAPU16[$1 + 22 >> 1] | HEAPU16[$1 + 24 >> 1] << 16;
 HEAP16[$0 + 32 >> 1] = $2;
 HEAP16[$0 + 34 >> 1] = $2 >>> 16;
 HEAP16[$0 + 36 >> 1] = HEAPU16[$1 + 26 >> 1];
 HEAP8[$0 + 38 | 0] = HEAP8[HEAP32[$4 + 16 >> 2] + 20 | 0] & 1;
 $1 = HEAP32[HEAP32[$4 + 16 >> 2] >> 2];
 wasm2js_i32$0 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, HEAP32[$4 + 24 >> 2]) | 0, 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 $1 = HEAP32[$0 + 12 >> 2];
 wasm2js_i32$0 = $4, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1) | 0, 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$4 + 24 >> 2], Math_imul(HEAP32[$4 + 12 >> 2], 28)), 
 HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
 HEAP32[$4 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 8 >> 2] < HEAP32[$4 + 12 >> 2]) {
   HEAP32[(HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$4 + 8 >> 2], 28) | 0) + 16 >> 2] = 0;
   HEAP32[(HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$4 + 8 >> 2], 28) | 0) + 24 >> 2] = -1;
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$0 + 28 >> 2] = 0;
 HEAPF32[$0 >> 2] = HEAPF32[HEAP32[$4 + 16 >> 2] + 16 >> 2];
 __stack_pointer = $4 + 32 | 0;
}

function b2Contact__Create_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29($0, $1, $2, $3, $4) {
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP32[$5 + 36 >> 2] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP32[$5 + 24 >> 2] = $4;
 if (!(HEAP8[30864] & 1)) {
  b2Contact__InitializeRegisters_28_29();
  HEAP8[30864] = 1;
 }
 wasm2js_i32$0 = $5, wasm2js_i32$1 = b2Fixture__GetType_28_29_20const(HEAP32[$5 + 40 >> 2]), 
 HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $5, wasm2js_i32$1 = b2Fixture__GetType_28_29_20const(HEAP32[$5 + 32 >> 2]), 
 HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 if (!(HEAP32[$5 + 20 >> 2] < 4 & HEAP32[$5 + 20 >> 2] >= 0)) {
  __assert_fail(2372, 5174, 84, 8764);
  wasm2js_trap();
 }
 if (!(HEAP32[$5 + 16 >> 2] < 4 & HEAP32[$5 + 16 >> 2] >= 0)) {
  __assert_fail(2329, 5174, 85, 8764);
  wasm2js_trap();
 }
 HEAP32[$5 + 12 >> 2] = HEAP32[(Math_imul(HEAP32[$5 + 20 >> 2], 48) + 30672 | 0) + Math_imul(HEAP32[$5 + 16 >> 2], 12) >> 2];
 label$6: {
  if (HEAP32[$5 + 12 >> 2]) {
   if (HEAP8[((Math_imul(HEAP32[$5 + 20 >> 2], 48) + 30672 | 0) + Math_imul(HEAP32[$5 + 16 >> 2], 12) | 0) + 8 | 0] & 1) {
    wasm2js_i32$0 = $5, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[$5 + 12 >> 2]](HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2]) | 0, 
    HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
    break label$6;
   }
   wasm2js_i32$0 = $5, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[$5 + 12 >> 2]](HEAP32[$5 + 32 >> 2], HEAP32[$5 + 28 >> 2], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 24 >> 2]) | 0, 
   HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
   break label$6;
  }
  HEAP32[$5 + 44 >> 2] = 0;
 }
 __stack_pointer = $5 + 48 | 0;
 return HEAP32[$5 + 44 >> 2];
}

function b2WheelJoint__b2WheelJoint_28b2WheelJointDef_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Joint__b2Joint_28b2JointDef_20const__29($1, HEAP32[$2 + 8 >> 2]);
 HEAP32[$1 >> 2] = 19660;
 b2Vec2__b2Vec2_28_29($1 + 76 | 0);
 b2Vec2__b2Vec2_28_29($1 + 84 | 0);
 b2Vec2__b2Vec2_28_29($1 + 92 | 0);
 b2Vec2__b2Vec2_28_29($1 + 100 | 0);
 b2Vec2__b2Vec2_28_29($1 + 140 | 0);
 b2Vec2__b2Vec2_28_29($1 + 148 | 0);
 b2Vec2__b2Vec2_28_29($1 + 172 | 0);
 b2Vec2__b2Vec2_28_29($1 + 180 | 0);
 $3 = HEAP32[$2 + 8 >> 2];
 $4 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$1 + 76 >> 2] = $4;
 HEAP32[$1 + 80 >> 2] = $0;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 $4 = HEAP32[$3 + 32 >> 2];
 HEAP32[$1 + 84 >> 2] = $0;
 HEAP32[$1 + 88 >> 2] = $4;
 $3 = HEAP32[$2 + 8 >> 2];
 $4 = HEAP32[$3 + 36 >> 2];
 $0 = HEAP32[$3 + 40 >> 2];
 HEAP32[$1 + 92 >> 2] = $4;
 HEAP32[$1 + 96 >> 2] = $0;
 b2Cross_28float_2c_20b2Vec2_20const__29($2, Math_fround(1), $1 + 92 | 0);
 $4 = HEAP32[$2 + 4 >> 2];
 $0 = HEAP32[$2 >> 2];
 HEAP32[$1 + 100 >> 2] = $0;
 HEAP32[$1 + 104 >> 2] = $4;
 HEAPF32[$1 + 204 >> 2] = 0;
 HEAPF32[$1 + 108 >> 2] = 0;
 HEAPF32[$1 + 208 >> 2] = 0;
 HEAPF32[$1 + 112 >> 2] = 0;
 HEAPF32[$1 + 212 >> 2] = 0;
 HEAPF32[$1 + 116 >> 2] = 0;
 HEAPF32[$1 + 120 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 48 >> 2];
 HEAPF32[$1 + 124 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 52 >> 2];
 HEAP8[$1 + 128 | 0] = HEAP8[HEAP32[$2 + 8 >> 2] + 44 | 0] & 1;
 HEAPF32[$1 + 68 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 56 >> 2];
 HEAPF32[$1 + 72 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 60 >> 2];
 HEAPF32[$1 + 216 >> 2] = 0;
 HEAPF32[$1 + 220 >> 2] = 0;
 b2Vec2__SetZero_28_29($1 + 172 | 0);
 b2Vec2__SetZero_28_29($1 + 180 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $1;
}

function std____2__pair_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____20std____2____unwrap_range_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 28 >> 2];
 wasm2js_i32$0 = $3, wasm2js_i32$1 = decltype_28std____2____unwrap_iter_impl_std____2__reverse_iterator_int___2c_20false_____unwrap_28std__declval_std____2__reverse_iterator_int____28_29_29_29_20std____2____unwrap_iter_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_int___2c_20false__2c_200__28std____2__reverse_iterator_int___29(HEAP32[$3 + 16 >> 2]), 
 HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
 wasm2js_i32$0 = $3, wasm2js_i32$1 = decltype_28std____2____unwrap_iter_impl_std____2__reverse_iterator_int___2c_20false_____unwrap_28std__declval_std____2__reverse_iterator_int____28_29_29_29_20std____2____unwrap_iter_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_int___2c_20false__2c_200__28std____2__reverse_iterator_int___29(HEAP32[$3 + 8 >> 2]), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 std____2__pair_std____2____unwrap_ref_decay_std____2__reverse_iterator_int_____type_2c_20std____2____unwrap_ref_decay_std____2__reverse_iterator_int_____type__20std____2__make_pair_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____28std____2__reverse_iterator_int_____2c_20std____2__reverse_iterator_int_____29($0, $3 + 20 | 0, $3 + 12 | 0);
 __stack_pointer = $3 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28unsigned_20long_2c_20int_20const__29___invoke_std____2__vector_int_2c_20std____2__allocator_int____28char_20const__2c_20void_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28unsigned_20long_2c_20int_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 702;
 $0 = emscripten__internal__TypeID_std____2__vector_int_2c_20std____2__allocator_int___2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28std____2__vector_int_2c_20std____2__allocator_int______emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28unsigned_20long_2c_20int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int______20const__29_28unsigned_20long_2c_20int_20const__29_29_29_28unsigned_20long_2c_20int_20const__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2Joint__Destroy_28b2Joint__2c_20b2BlockAllocator__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] - 1 | 0) {
   case 2:
    b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 176);
    break label$1;

   case 4:
    b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 168);
    break label$1;

   case 1:
    b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 256);
    break label$1;

   case 0:
    b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 228);
    break label$1;

   case 3:
    b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 196);
    break label$1;

   case 5:
    b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 276);
    break label$1;

   case 6:
    b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 224);
    break label$1;

   case 7:
    b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 208);
    break label$1;

   case 8:
    b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 180);
    break label$1;

   case 9:
    b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 168);
    break label$1;

   case 10:
    b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 192);
    break label$1;

   default:
    break label$2;
   }
  }
  __assert_fail(8975, 4590, 181, 1649);
  wasm2js_trap();
 }
 __stack_pointer = $2 + 16 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int______append_28unsigned_20long_2c_20int_20const__29($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 $0 = HEAP32[$3 + 44 >> 2];
 label$1: {
  if (HEAP32[std____2__vector_int_2c_20std____2__allocator_int______end_cap_5babi_v160004_5d_28_29($0) >> 2] - HEAP32[$0 + 4 >> 2] >> 2 >>> 0 >= HEAPU32[$3 + 40 >> 2]) {
   std____2__vector_int_2c_20std____2__allocator_int______construct_at_end_28unsigned_20long_2c_20int_20const__29($0, HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2]);
   break label$1;
  }
  wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__vector_int_2c_20std____2__allocator_int______alloc_5babi_v160004_5d_28_29($0), 
  HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
  std____2____split_buffer_int_2c_20std____2__allocator_int_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_int___29($3 + 12 | 0, std____2__vector_int_2c_20std____2__allocator_int______recommend_5babi_v160004_5d_28unsigned_20long_29_20const($0, std____2__vector_int_2c_20std____2__allocator_int____size_5babi_v160004_5d_28_29_20const($0) + HEAP32[$3 + 40 >> 2] | 0), std____2__vector_int_2c_20std____2__allocator_int____size_5babi_v160004_5d_28_29_20const($0), HEAP32[$3 + 32 >> 2]);
  std____2____split_buffer_int_2c_20std____2__allocator_int_______construct_at_end_28unsigned_20long_2c_20int_20const__29($3 + 12 | 0, HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2]);
  std____2__vector_int_2c_20std____2__allocator_int______swap_out_circular_buffer_28std____2____split_buffer_int_2c_20std____2__allocator_int_____29($0, $3 + 12 | 0);
  std____2____split_buffer_int_2c_20std____2__allocator_int________split_buffer_28_29($3 + 12 | 0);
 }
 __stack_pointer = $3 + 48 | 0;
}

function b2RevoluteJoint__Dump_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 208 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 204 >> 2] = $0;
 $0 = HEAP32[$1 + 204 >> 2];
 HEAP32[$1 + 200 >> 2] = HEAP32[HEAP32[$0 + 48 >> 2] + 8 >> 2];
 HEAP32[$1 + 196 >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] + 8 >> 2];
 b2Log_28char_20const__2c_20____29(13471, 0);
 HEAP32[$1 + 160 >> 2] = HEAP32[$1 + 200 >> 2];
 b2Log_28char_20const__2c_20____29(13733, $1 + 160 | 0);
 HEAP32[$1 + 144 >> 2] = HEAP32[$1 + 196 >> 2];
 b2Log_28char_20const__2c_20____29(13707, $1 + 144 | 0);
 HEAP32[$1 + 128 >> 2] = HEAP8[$0 + 61 | 0] & 1;
 b2Log_28char_20const__2c_20____29(14923, $1 + 128 | 0);
 $2 = HEAPF32[$0 + 68 >> 2];
 HEAPF64[$1 + 120 >> 3] = HEAPF32[$0 + 72 >> 2];
 HEAPF64[$1 + 112 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14234, $1 + 112 | 0);
 $2 = HEAPF32[$0 + 76 >> 2];
 HEAPF64[$1 + 104 >> 3] = HEAPF32[$0 + 80 >> 2];
 HEAPF64[$1 + 96 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14109, $1 + 96 | 0);
 HEAPF64[$1 + 80 >> 3] = HEAPF32[$0 + 116 >> 2];
 b2Log_28char_20const__2c_20____29(13030, $1 + 80 | 0);
 HEAP32[$1 + 64 >> 2] = HEAP8[$0 + 112 | 0] & 1;
 b2Log_28char_20const__2c_20____29(14724, $1 - -64 | 0);
 HEAPF64[$1 + 48 >> 3] = HEAPF32[$0 + 120 >> 2];
 b2Log_28char_20const__2c_20____29(12974, $1 + 48 | 0);
 HEAPF64[$1 + 32 >> 3] = HEAPF32[$0 + 124 >> 2];
 b2Log_28char_20const__2c_20____29(13002, $1 + 32 | 0);
 HEAP32[$1 + 16 >> 2] = HEAP8[$0 + 100 | 0] & 1;
 b2Log_28char_20const__2c_20____29(14779, $1 + 16 | 0);
 HEAPF64[$1 >> 3] = HEAPF32[$0 + 108 >> 2];
 b2Log_28char_20const__2c_20____29(13149, $1);
 HEAPF64[$1 + 176 >> 3] = HEAPF32[$0 + 104 >> 2];
 b2Log_28char_20const__2c_20____29(12919, $1 + 176 | 0);
 HEAP32[$1 + 192 >> 2] = HEAP32[$0 + 56 >> 2];
 b2Log_28char_20const__2c_20____29(14524, $1 + 192 | 0);
 __stack_pointer = $1 + 208 | 0;
}

function emscripten__internal__MethodInvoker_float_20_28b2RayCastCallback____29_28unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_29_2c_20float_2c_20b2RayCastCallback__2c_20unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float___invoke_28float_20_28b2RayCastCallback____20const__29_28unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_29_2c_20b2RayCastCallback__2c_20unsigned_20int_2c_20b2Vec2__2c_20b2Vec2__2c_20float_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = Math_fround($5);
 var $6 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAPF32[$6 + 8 >> 2] = $5;
 $2 = emscripten__internal__BindingType_b2RayCastCallback__2c_20void___fromWireType_28b2RayCastCallback__29(HEAP32[$6 + 24 >> 2]);
 $0 = HEAP32[$6 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $6, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$6 + 20 >> 2]), emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$6 + 16 >> 2]), emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$6 + 12 >> 2]), emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$6 + 8 >> 2]))), 
 HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 $5 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($6 + 4 | 0);
 __stack_pointer = $6 + 32 | 0;
 return Math_fround($5);
}

function memmove($0, $1, $2) {
 var $3 = 0, $4 = 0;
 label$1: {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  $3 = $0 + $2 | 0;
  if ($1 - $3 >>> 0 <= 0 - ($2 << 1) >>> 0) {
   return __memcpy($0, $1, $2);
  }
  $4 = ($0 ^ $1) & 3;
  label$3: {
   label$4: {
    if ($0 >>> 0 < $1 >>> 0) {
     if ($4) {
      $3 = $0;
      break label$3;
     }
     if (!($0 & 3)) {
      $3 = $0;
      break label$4;
     }
     $3 = $0;
     while (1) {
      if (!$2) {
       break label$1;
      }
      HEAP8[$3 | 0] = HEAPU8[$1 | 0];
      $1 = $1 + 1 | 0;
      $2 = $2 - 1 | 0;
      $3 = $3 + 1 | 0;
      if ($3 & 3) {
       continue;
      }
      break;
     }
     break label$4;
    }
    label$9: {
     if ($4) {
      break label$9;
     }
     if ($3 & 3) {
      while (1) {
       if (!$2) {
        break label$1;
       }
       $2 = $2 - 1 | 0;
       $3 = $2 + $0 | 0;
       HEAP8[$3 | 0] = HEAPU8[$1 + $2 | 0];
       if ($3 & 3) {
        continue;
       }
       break;
      }
     }
     if ($2 >>> 0 <= 3) {
      break label$9;
     }
     while (1) {
      $2 = $2 - 4 | 0;
      HEAP32[$2 + $0 >> 2] = HEAP32[$1 + $2 >> 2];
      if ($2 >>> 0 > 3) {
       continue;
      }
      break;
     }
    }
    if (!$2) {
     break label$1;
    }
    while (1) {
     $2 = $2 - 1 | 0;
     HEAP8[$2 + $0 | 0] = HEAPU8[$1 + $2 | 0];
     if ($2) {
      continue;
     }
     break;
    }
    break label$1;
   }
   if ($2 >>> 0 <= 3) {
    break label$3;
   }
   while (1) {
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    $1 = $1 + 4 | 0;
    $3 = $3 + 4 | 0;
    $2 = $2 - 4 | 0;
    if ($2 >>> 0 > 3) {
     continue;
    }
    break;
   }
  }
  if (!$2) {
   break label$1;
  }
  while (1) {
   HEAP8[$3 | 0] = HEAPU8[$1 | 0];
   $3 = $3 + 1 | 0;
   $1 = $1 + 1 | 0;
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}

function b2ContactFilter__ShouldCollide_28b2Fixture__2c_20b2Fixture__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$3 + 36 >> 2]), 
 HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$3 + 32 >> 2]), 
 HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
 label$1: {
  label$2: {
   if (b2Body__GetType_28_29_20const(HEAP32[$3 + 24 >> 2])) {
    break label$2;
   }
   if (b2Body__GetType_28_29_20const(HEAP32[$3 + 28 >> 2])) {
    break label$2;
   }
   HEAP8[$3 + 47 | 0] = 0;
   break label$1;
  }
  if (!(b2Body__ShouldCollideConnected_28b2Body_20const__29_20const(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 28 >> 2]) & 1)) {
   HEAP8[$3 + 47 | 0] = 0;
   break label$1;
  }
  wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Fixture__GetFilterData_28_29_20const(HEAP32[$3 + 36 >> 2]), 
  HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
  wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Fixture__GetFilterData_28_29_20const(HEAP32[$3 + 32 >> 2]), 
  HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  if (!(!HEAPU16[HEAP32[$3 + 20 >> 2] + 4 >> 1] | HEAPU16[HEAP32[$3 + 20 >> 2] + 4 >> 1] != HEAPU16[HEAP32[$3 + 16 >> 2] + 4 >> 1])) {
   HEAP8[$3 + 47 | 0] = HEAPU16[HEAP32[$3 + 20 >> 2] + 4 >> 1] << 16 >> 16 > 0;
   break label$1;
  }
  $4 = HEAPU16[HEAP32[$3 + 20 >> 2] + 2 >> 1] & HEAPU16[HEAP32[$3 + 16 >> 2] >> 1] ? (HEAPU16[HEAP32[$3 + 20 >> 2] >> 1] & HEAPU16[HEAP32[$3 + 16 >> 2] + 2 >> 1]) != 0 : $4;
  HEAP8[$3 + 15 | 0] = $4;
  HEAP8[$3 + 47 | 0] = HEAP8[$3 + 15 | 0] & 1;
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP8[$3 + 47 | 0] & 1;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const__29___invoke_b2Draw_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 492;
 $0 = emscripten__internal__TypeID_b2Draw_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20float_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Draw____emscripten__internal__getContext_void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const__29__28void_20_28b2Draw____20const__29_28b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const__29_29_29_28b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______insert_node_at_28std____2____tree_end_node_std____2____tree_node_base_void______2c_20std____2____tree_node_base_void_____2c_20std____2____tree_node_base_void____29($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP32[HEAP32[$4 >> 2] >> 2] = 0;
 HEAP32[HEAP32[$4 >> 2] + 4 >> 2] = 0;
 HEAP32[HEAP32[$4 >> 2] + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[HEAP32[$4 + 4 >> 2] >> 2] = HEAP32[$4 >> 2];
 if (HEAP32[HEAP32[std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______begin_node_5babi_v160004_5d_28_29($0) >> 2] >> 2]) {
  $1 = HEAP32[HEAP32[std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______begin_node_5babi_v160004_5d_28_29($0) >> 2] >> 2];
  wasm2js_i32$0 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______begin_node_5babi_v160004_5d_28_29($0), 
  wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 void_20std____2____tree_balance_after_insert_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____2c_20std____2____tree_node_base_void____29(HEAP32[std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______end_node_5babi_v160004_5d_28_29($0) >> 2], HEAP32[HEAP32[$4 + 4 >> 2] >> 2]);
 $0 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____size_5babi_v160004_5d_28_29($0);
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 __stack_pointer = $4 + 16 | 0;
}

function b2CollideCircles_28b2Manifold__2c_20b2CircleShape_20const__2c_20b2Transform_20const__2c_20b2CircleShape_20const__2c_20b2Transform_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[HEAP32[$5 + 60 >> 2] + 60 >> 2] = 0;
 b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($5 + 36 | 0, HEAP32[$5 + 52 >> 2], HEAP32[$5 + 56 >> 2] + 12 | 0);
 b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($5 + 28 | 0, HEAP32[$5 + 44 >> 2], HEAP32[$5 + 48 >> 2] + 12 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($5 + 20 | 0, $5 + 28 | 0, $5 + 36 | 0);
 $0 = $5 + 20 | 0;
 wasm2js_i32$0 = $5, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $0), 
 HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
 HEAPF32[$5 + 12 >> 2] = HEAPF32[HEAP32[$5 + 56 >> 2] + 8 >> 2];
 HEAPF32[$5 + 8 >> 2] = HEAPF32[HEAP32[$5 + 48 >> 2] + 8 >> 2];
 HEAPF32[$5 + 4 >> 2] = HEAPF32[$5 + 12 >> 2] + HEAPF32[$5 + 8 >> 2];
 if (!(HEAPF32[$5 + 16 >> 2] > Math_fround(HEAPF32[$5 + 4 >> 2] * HEAPF32[$5 + 4 >> 2]))) {
  HEAP32[HEAP32[$5 + 60 >> 2] + 56 >> 2] = 0;
  $2 = HEAP32[$5 + 56 >> 2];
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = HEAP32[$2 + 16 >> 2];
  $2 = $0;
  $0 = HEAP32[$5 + 60 >> 2];
  HEAP32[$0 + 48 >> 2] = $2;
  HEAP32[$0 + 52 >> 2] = $1;
  b2Vec2__SetZero_28_29(HEAP32[$5 + 60 >> 2] + 40 | 0);
  HEAP32[HEAP32[$5 + 60 >> 2] + 60 >> 2] = 1;
  $2 = HEAP32[$5 + 48 >> 2];
  $1 = HEAP32[$2 + 12 >> 2];
  $0 = HEAP32[$2 + 16 >> 2];
  $2 = $1;
  $1 = HEAP32[$5 + 60 >> 2];
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $0;
  HEAP32[HEAP32[$5 + 60 >> 2] + 16 >> 2] = 0;
 }
 __stack_pointer = $5 - -64 | 0;
}

function std____2__pair_char_20const__2c_20char___20std____2____unwrap_and_dispatch_5babi_v160004_5d_std____2____overload_std____2____copy_loop_std____2___ClassicAlgPolicy__2c_20std____2____copy_trivial__2c_20char_20const__2c_20char_20const__2c_20char__2c_200__28char_20const__2c_20char_20const__2c_20char__29($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 auto_20std____2____unwrap_range_5babi_v160004_5d_char_20const__2c_20char_20const___28char_20const__2c_20char_20const__29($4 + 24 | 0, $1, $2);
 std____2__pair_char_20const__2c_20char___20std____2____copy_trivial__operator_28_29_5babi_v160004_5d_char_20const_2c_20char_2c_200__28char_20const__2c_20char_20const__2c_20char__29_20const($4 + 16 | 0, $4 + 12 | 0, HEAP32[$4 + 24 >> 2], HEAP32[$4 + 28 >> 2], decltype_28std____2____unwrap_iter_impl_char__2c_20true_____unwrap_28std__declval_char___28_29_29_29_20std____2____unwrap_iter_5babi_v160004_5d_char__2c_20std____2____unwrap_iter_impl_char__2c_20true__2c_200__28char__29($3));
 wasm2js_i32$0 = $4, wasm2js_i32$1 = char_20const__20std____2____rewrap_range_5babi_v160004_5d_char_20const__2c_20char_20const__2c_20char_20const___28char_20const__2c_20char_20const__29($1, HEAP32[$4 + 16 >> 2]), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $4, wasm2js_i32$1 = char__20std____2____rewrap_iter_5babi_v160004_5d_char__2c_20char__2c_20std____2____unwrap_iter_impl_char__2c_20true___28char__2c_20char__29($3, HEAP32[$4 + 20 >> 2]), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 std____2__pair_std____2____unwrap_ref_decay_char_20const____type_2c_20std____2____unwrap_ref_decay_char____type__20std____2__make_pair_5babi_v160004_5d_char_20const__2c_20char___28char_20const____2c_20char____29($0, $4 + 12 | 0, $4 + 8 | 0);
 __stack_pointer = $4 + 32 | 0;
}

function b2WorldRayCastWrapper__RayCastCallback_28b2RayCastInput_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f32$0 = Math_fround(0);
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP32[$3 + 68 >> 2] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 $0 = HEAP32[$3 + 72 >> 2];
 wasm2js_i32$0 = $3, wasm2js_i32$1 = b2BroadPhase__GetUserData_28int_29_20const(HEAP32[$0 >> 2], HEAP32[$3 + 64 >> 2]), 
 HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
 HEAP32[$3 + 56 >> 2] = HEAP32[$3 + 60 >> 2];
 HEAP32[$3 + 52 >> 2] = HEAP32[HEAP32[$3 + 56 >> 2] + 16 >> 2];
 HEAP32[$3 + 48 >> 2] = HEAP32[HEAP32[$3 + 56 >> 2] + 20 >> 2];
 b2RayCastOutput__b2RayCastOutput_28_29($3 + 36 | 0);
 wasm2js_i32$0 = $3, wasm2js_i32$1 = b2Fixture__RayCast_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int_29_20const(HEAP32[$3 + 52 >> 2], $3 + 36 | 0, HEAP32[$3 + 68 >> 2], HEAP32[$3 + 48 >> 2]) & 1, 
 HEAP8[wasm2js_i32$0 + 35 | 0] = wasm2js_i32$1;
 label$1: {
  if (HEAP8[$3 + 35 | 0] & 1) {
   HEAPF32[$3 + 28 >> 2] = HEAPF32[$3 + 44 >> 2];
   operator__28float_2c_20b2Vec2_20const__29($3 + 12 | 0, Math_fround(Math_fround(1) - HEAPF32[$3 + 28 >> 2]), HEAP32[$3 + 68 >> 2]);
   operator__28float_2c_20b2Vec2_20const__29($3 + 4 | 0, HEAPF32[$3 + 28 >> 2], HEAP32[$3 + 68 >> 2] + 8 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 20 | 0, $3 + 12 | 0, $3 + 4 | 0);
   $0 = HEAP32[$0 + 4 >> 2];
   wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$3 + 52 >> 2], $3 + 20 | 0, $3 + 36 | 0, HEAPF32[$3 + 28 >> 2])), 
   HEAPF32[wasm2js_i32$0 + 76 >> 2] = wasm2js_f32$0;
   break label$1;
  }
  HEAPF32[$3 + 76 >> 2] = HEAPF32[HEAP32[$3 + 68 >> 2] + 16 >> 2];
 }
 __stack_pointer = $3 + 80 | 0;
 return HEAPF32[$3 + 76 >> 2];
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const__29_20const___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2World____29_28b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const__29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 517;
 $0 = emscripten__internal__TypeID_b2World_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World_20const__2c_20b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World_20const__2c_20b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const__29_20const__28void_20_28b2World____20const__29_28b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const__29_20const_29_29_28b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const__29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2PulleyJoint__b2PulleyJoint_28b2PulleyJointDef_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[$2 + 12 >> 2] = $1;
 b2Joint__b2Joint_28b2JointDef_20const__29($1, HEAP32[$2 + 4 >> 2]);
 HEAP32[$1 >> 2] = 19336;
 b2Vec2__b2Vec2_28_29($1 + 68 | 0);
 b2Vec2__b2Vec2_28_29($1 + 76 | 0);
 b2Vec2__b2Vec2_28_29($1 + 92 | 0);
 b2Vec2__b2Vec2_28_29($1 + 100 | 0);
 b2Vec2__b2Vec2_28_29($1 + 128 | 0);
 b2Vec2__b2Vec2_28_29($1 + 136 | 0);
 b2Vec2__b2Vec2_28_29($1 + 144 | 0);
 b2Vec2__b2Vec2_28_29($1 + 152 | 0);
 b2Vec2__b2Vec2_28_29($1 + 160 | 0);
 b2Vec2__b2Vec2_28_29($1 + 168 | 0);
 $3 = HEAP32[$2 + 4 >> 2];
 $4 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$1 + 68 >> 2] = $4;
 HEAP32[$1 + 72 >> 2] = $0;
 $3 = HEAP32[$2 + 4 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 $4 = HEAP32[$3 + 32 >> 2];
 HEAP32[$1 + 76 >> 2] = $0;
 HEAP32[$1 + 80 >> 2] = $4;
 $3 = HEAP32[$2 + 4 >> 2];
 $4 = HEAP32[$3 + 36 >> 2];
 $0 = HEAP32[$3 + 40 >> 2];
 HEAP32[$1 + 92 >> 2] = $4;
 HEAP32[$1 + 96 >> 2] = $0;
 $3 = HEAP32[$2 + 4 >> 2];
 $0 = HEAP32[$3 + 44 >> 2];
 $4 = HEAP32[$3 + 48 >> 2];
 HEAP32[$1 + 100 >> 2] = $0;
 HEAP32[$1 + 104 >> 2] = $4;
 HEAPF32[$1 + 84 >> 2] = HEAPF32[HEAP32[$2 + 4 >> 2] + 52 >> 2];
 HEAPF32[$1 + 88 >> 2] = HEAPF32[HEAP32[$2 + 4 >> 2] + 56 >> 2];
 if (HEAPF32[HEAP32[$2 + 4 >> 2] + 60 >> 2] == Math_fround(0)) {
  __assert_fail(8399, 4181, 69, 2570);
  wasm2js_trap();
 }
 HEAPF32[$1 + 112 >> 2] = HEAPF32[HEAP32[$2 + 4 >> 2] + 60 >> 2];
 HEAPF32[$1 + 108 >> 2] = Math_fround(HEAPF32[$1 + 112 >> 2] * HEAPF32[HEAP32[$2 + 4 >> 2] + 56 >> 2]) + HEAPF32[HEAP32[$2 + 4 >> 2] + 52 >> 2];
 HEAPF32[$1 + 116 >> 2] = 0;
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const__29___invoke_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28char_20const__2c_20bool_20_28__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 711;
 $0 = emscripten__internal__TypeID_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const____getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const____getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28__emscripten__internal__getContext_bool_20_28__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const__29__28bool_20_28__20const__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const__29_29_29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const__29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodCaller_float_2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float____call_28emscripten___EM_VAL__2c_20char_20const__2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0;
 $6 = __stack_pointer - 96 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 92 >> 2] = $0;
 HEAP32[$6 + 88 >> 2] = $1;
 HEAP32[$6 + 84 >> 2] = $2;
 HEAP32[$6 + 80 >> 2] = $3;
 HEAP32[$6 + 76 >> 2] = $4;
 HEAP32[$6 + 72 >> 2] = $5;
 wasm2js_i32$0 = $6, wasm2js_i32$1 = emscripten__internal__Signature_float_2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float____get_method_caller_28_29(), 
 HEAP32[wasm2js_i32$0 + 68 >> 2] = wasm2js_i32$1;
 emscripten__internal__WireTypePack_unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float____WireTypePack_28unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float__29($6 + 32 | 0, HEAP32[$6 + 84 >> 2], HEAP32[$6 + 80 >> 2], HEAP32[$6 + 76 >> 2], HEAP32[$6 + 72 >> 2]);
 wasm2js_i32$0 = $6, wasm2js_f64$0 = +_emval_call_method(HEAP32[$6 + 68 >> 2], HEAP32[$6 + 92 >> 2], HEAP32[$6 + 88 >> 2], $6 + 28 | 0, emscripten__internal__WireTypePack_unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float____operator_20void_20const__28_29_20const($6 + 32 | 0) | 0), 
 HEAPF64[wasm2js_i32$0 + 16 >> 3] = wasm2js_f64$0;
 emscripten__internal__DestructorsRunner__DestructorsRunner_28emscripten__internal___EM_DESTRUCTORS__29($6 + 12 | 0, HEAP32[$6 + 28 >> 2]);
 $7 = float_20emscripten__internal__fromGenericWireType_float__28double_29(HEAPF64[$6 + 16 >> 3]);
 emscripten__internal__DestructorsRunner___DestructorsRunner_28_29($6 + 12 | 0);
 __stack_pointer = $6 + 96 | 0;
 return $7;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Fixture____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int_29_20const___invoke_b2Fixture_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20bool_20_28b2Fixture____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 573;
 $0 = emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2Fixture____emscripten__internal__getContext_bool_20_28b2Fixture____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int_29_20const__28bool_20_28b2Fixture____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int_29_20const_29_29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2WheelJoint__Dump_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 192 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 188 >> 2] = $0;
 $0 = HEAP32[$1 + 188 >> 2];
 HEAP32[$1 + 184 >> 2] = HEAP32[HEAP32[$0 + 48 >> 2] + 8 >> 2];
 HEAP32[$1 + 180 >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] + 8 >> 2];
 b2Log_28char_20const__2c_20____29(13448, 0);
 HEAP32[$1 + 144 >> 2] = HEAP32[$1 + 184 >> 2];
 b2Log_28char_20const__2c_20____29(13733, $1 + 144 | 0);
 HEAP32[$1 + 128 >> 2] = HEAP32[$1 + 180 >> 2];
 b2Log_28char_20const__2c_20____29(13707, $1 + 128 | 0);
 HEAP32[$1 + 112 >> 2] = HEAP8[$0 + 61 | 0] & 1;
 b2Log_28char_20const__2c_20____29(14923, $1 + 112 | 0);
 $2 = HEAPF32[$0 + 76 >> 2];
 HEAPF64[$1 + 104 >> 3] = HEAPF32[$0 + 80 >> 2];
 HEAPF64[$1 + 96 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14234, $1 + 96 | 0);
 $2 = HEAPF32[$0 + 84 >> 2];
 HEAPF64[$1 + 88 >> 3] = HEAPF32[$0 + 88 >> 2];
 HEAPF64[$1 + 80 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14109, $1 + 80 | 0);
 $2 = HEAPF32[$0 + 92 >> 2];
 HEAPF64[$1 + 72 >> 3] = HEAPF32[$0 + 96 >> 2];
 HEAPF64[$1 + 64 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14194, $1 - -64 | 0);
 HEAP32[$1 + 48 >> 2] = HEAP8[$0 + 128 | 0] & 1;
 b2Log_28char_20const__2c_20____29(14779, $1 + 48 | 0);
 HEAPF64[$1 + 32 >> 3] = HEAPF32[$0 + 124 >> 2];
 b2Log_28char_20const__2c_20____29(13149, $1 + 32 | 0);
 HEAPF64[$1 + 16 >> 3] = HEAPF32[$0 + 120 >> 2];
 b2Log_28char_20const__2c_20____29(12919, $1 + 16 | 0);
 HEAPF64[$1 >> 3] = HEAPF32[$0 + 68 >> 2];
 b2Log_28char_20const__2c_20____29(12413, $1);
 HEAPF64[$1 + 160 >> 3] = HEAPF32[$0 + 72 >> 2];
 b2Log_28char_20const__2c_20____29(12621, $1 + 160 | 0);
 HEAP32[$1 + 176 >> 2] = HEAP32[$0 + 56 >> 2];
 b2Log_28char_20const__2c_20____29(14524, $1 + 176 | 0);
 __stack_pointer = $1 + 192 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28_29_20const___invoke_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28char_20const__2c_20unsigned_20long_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 709;
 $0 = emscripten__internal__TypeID_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_unsigned_20long_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_unsigned_20long_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], unsigned_20long_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______emscripten__internal__getContext_unsigned_20long_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28_29_20const__28unsigned_20long_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28b2Vec2_20const__29___invoke_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28char_20const__2c_20void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28b2Vec2_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 707;
 $0 = emscripten__internal__TypeID_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20b2Vec2_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20b2Vec2_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______emscripten__internal__getContext_void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28b2Vec2_20const__29__28void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______20const__29_28b2Vec2_20const__29_29_29_28b2Vec2_20const__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_emscripten__val_20_28__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long_29___invoke_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28char_20const__2c_20emscripten__val_20_28__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 710;
 $0 = emscripten__internal__TypeID_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long___getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long___getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long_29_29_29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long_29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20b2DynamicTree__Query_b2WorldQueryWrapper__28b2WorldQueryWrapper__2c_20b2AABB_20const__29_20const($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 1072 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 1068 >> 2] = $0;
 HEAP32[$3 + 1064 >> 2] = $1;
 HEAP32[$3 + 1060 >> 2] = $2;
 $0 = HEAP32[$3 + 1068 >> 2];
 b2GrowableStack_int_2c_20256___b2GrowableStack_28_29($3 + 24 | 0);
 b2GrowableStack_int_2c_20256___Push_28int_20const__29($3 + 24 | 0, $0);
 label$1: {
  while (1) {
   if ((b2GrowableStack_int_2c_20256___GetCount_28_29($3 + 24 | 0) | 0) > 0) {
    wasm2js_i32$0 = $3, wasm2js_i32$1 = b2GrowableStack_int_2c_20256___Pop_28_29($3 + 24 | 0), 
    HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
    if (HEAP32[$3 + 20 >> 2] == -1) {
     continue;
    }
    HEAP32[$3 + 16 >> 2] = HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$3 + 20 >> 2], 40);
    if (b2TestOverlap_28b2AABB_20const__2c_20b2AABB_20const__29(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 1060 >> 2]) & 1) {
     label$5: {
      if (b2TreeNode__IsLeaf_28_29_20const(HEAP32[$3 + 16 >> 2]) & 1) {
       wasm2js_i32$0 = $3, wasm2js_i32$1 = b2WorldQueryWrapper__QueryCallback_28int_29(HEAP32[$3 + 1064 >> 2], HEAP32[$3 + 20 >> 2]) & 1, 
       HEAP8[wasm2js_i32$0 + 15 | 0] = wasm2js_i32$1;
       if (!(HEAP8[$3 + 15 | 0] & 1)) {
        HEAP32[$3 + 8 >> 2] = 1;
        break label$1;
       }
       break label$5;
      }
      b2GrowableStack_int_2c_20256___Push_28int_20const__29($3 + 24 | 0, HEAP32[$3 + 16 >> 2] + 24 | 0);
      b2GrowableStack_int_2c_20256___Push_28int_20const__29($3 + 24 | 0, HEAP32[$3 + 16 >> 2] + 28 | 0);
     }
    }
    continue;
   }
   break;
  }
  HEAP32[$3 + 8 >> 2] = 0;
 }
 b2GrowableStack_int_2c_20256____b2GrowableStack_28_29($3 + 24 | 0);
 __stack_pointer = $3 + 1072 | 0;
}

function b2Body__SetEnabled_28bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP8[$2 + 27 | 0] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 if (b2World__IsLocked_28_29_20const(HEAP32[$0 + 88 >> 2]) & 1) {
  __assert_fail(8952, 4121, 482, 10061);
  wasm2js_trap();
 }
 label$2: {
  if ((HEAP8[$2 + 27 | 0] & 1) == (b2Body__IsEnabled_28_29_20const($0) & 1)) {
   break label$2;
  }
  if (HEAP8[$2 + 27 | 0] & 1) {
   HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] | 32;
   HEAP32[$2 + 20 >> 2] = HEAP32[$0 + 88 >> 2] + 102868;
   HEAP32[$2 + 16 >> 2] = HEAP32[$0 + 100 >> 2];
   while (1) {
    if (HEAP32[$2 + 16 >> 2]) {
     b2Fixture__CreateProxies_28b2BroadPhase__2c_20b2Transform_20const__29(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2], $0 + 12 | 0);
     HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2];
     continue;
    }
    break;
   }
   HEAP8[HEAP32[$0 + 88 >> 2] + 102988 | 0] = 1;
   break label$2;
  }
  HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] & -33;
  HEAP32[$2 + 12 >> 2] = HEAP32[$0 + 88 >> 2] + 102868;
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 + 100 >> 2];
  while (1) {
   if (HEAP32[$2 + 8 >> 2]) {
    b2Fixture__DestroyProxies_28b2BroadPhase__29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
    HEAP32[$2 + 8 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] + 4 >> 2];
    continue;
   }
   break;
  }
  HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 112 >> 2];
  while (1) {
   if (HEAP32[$2 + 4 >> 2]) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 4 >> 2];
    HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 4 >> 2] + 12 >> 2];
    b2ContactManager__Destroy_28b2Contact__29(HEAP32[$0 + 88 >> 2] + 102868 | 0, HEAP32[HEAP32[$2 >> 2] + 4 >> 2]);
    continue;
   }
   break;
  }
  HEAP32[$0 + 112 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
}

function b2PolygonShape__Validate_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 $0 = HEAP32[$1 + 56 >> 2];
 HEAP32[$1 + 52 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAP32[$1 + 52 >> 2] < HEAP32[$0 + 148 >> 2]) {
    HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 52 >> 2];
    if (HEAP32[$1 + 52 >> 2] < (HEAP32[$0 + 148 >> 2] - 1 | 0)) {
     $2 = HEAP32[$1 + 48 >> 2] + 1 | 0;
    } else {
     $2 = 0;
    }
    HEAP32[$1 + 44 >> 2] = $2;
    $2 = ($0 + 20 | 0) + (HEAP32[$1 + 48 >> 2] << 3) | 0;
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 32 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$1 + 36 >> 2] = $3;
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 24 | 0, ($0 + 20 | 0) + (HEAP32[$1 + 44 >> 2] << 3) | 0, $1 + 32 | 0);
    HEAP32[$1 + 20 >> 2] = 0;
    while (1) {
     if (HEAP32[$1 + 20 >> 2] < HEAP32[$0 + 148 >> 2]) {
      if (!(HEAP32[$1 + 20 >> 2] == HEAP32[$1 + 48 >> 2] | HEAP32[$1 + 20 >> 2] == HEAP32[$1 + 44 >> 2])) {
       operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 12 | 0, ($0 + 20 | 0) + (HEAP32[$1 + 20 >> 2] << 3) | 0, $1 + 32 | 0);
       wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 24 | 0, $1 + 12 | 0), 
       HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
       if (HEAPF32[$1 + 8 >> 2] < Math_fround(0)) {
        HEAP8[$1 + 63 | 0] = 0;
        break label$1;
       }
      }
      HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$1 + 52 >> 2] = HEAP32[$1 + 52 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP8[$1 + 63 | 0] = 1;
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP8[$1 + 63 | 0] & 1;
}

function void_20b2DynamicTree__Query_b2BroadPhase__28b2BroadPhase__2c_20b2AABB_20const__29_20const($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 1072 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 1068 >> 2] = $0;
 HEAP32[$3 + 1064 >> 2] = $1;
 HEAP32[$3 + 1060 >> 2] = $2;
 $0 = HEAP32[$3 + 1068 >> 2];
 b2GrowableStack_int_2c_20256___b2GrowableStack_28_29($3 + 24 | 0);
 b2GrowableStack_int_2c_20256___Push_28int_20const__29($3 + 24 | 0, $0);
 label$1: {
  while (1) {
   if ((b2GrowableStack_int_2c_20256___GetCount_28_29($3 + 24 | 0) | 0) > 0) {
    wasm2js_i32$0 = $3, wasm2js_i32$1 = b2GrowableStack_int_2c_20256___Pop_28_29($3 + 24 | 0), 
    HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
    if (HEAP32[$3 + 20 >> 2] == -1) {
     continue;
    }
    HEAP32[$3 + 16 >> 2] = HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$3 + 20 >> 2], 40);
    if (b2TestOverlap_28b2AABB_20const__2c_20b2AABB_20const__29(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 1060 >> 2]) & 1) {
     label$5: {
      if (b2TreeNode__IsLeaf_28_29_20const(HEAP32[$3 + 16 >> 2]) & 1) {
       wasm2js_i32$0 = $3, wasm2js_i32$1 = b2BroadPhase__QueryCallback_28int_29(HEAP32[$3 + 1064 >> 2], HEAP32[$3 + 20 >> 2]) & 1, 
       HEAP8[wasm2js_i32$0 + 15 | 0] = wasm2js_i32$1;
       if (!(HEAP8[$3 + 15 | 0] & 1)) {
        HEAP32[$3 + 8 >> 2] = 1;
        break label$1;
       }
       break label$5;
      }
      b2GrowableStack_int_2c_20256___Push_28int_20const__29($3 + 24 | 0, HEAP32[$3 + 16 >> 2] + 24 | 0);
      b2GrowableStack_int_2c_20256___Push_28int_20const__29($3 + 24 | 0, HEAP32[$3 + 16 >> 2] + 28 | 0);
     }
    }
    continue;
   }
   break;
  }
  HEAP32[$3 + 8 >> 2] = 0;
 }
 b2GrowableStack_int_2c_20256____b2GrowableStack_28_29($3 + 24 | 0);
 __stack_pointer = $3 + 1072 | 0;
}

function __stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 $3 = HEAP32[$0 + 28 >> 2];
 HEAP32[$4 + 16 >> 2] = $3;
 $5 = HEAP32[$0 + 20 >> 2];
 HEAP32[$4 + 28 >> 2] = $2;
 HEAP32[$4 + 24 >> 2] = $1;
 $1 = $5 - $3 | 0;
 HEAP32[$4 + 20 >> 2] = $1;
 $7 = $1 + $2 | 0;
 $3 = $4 + 16 | 0;
 $8 = 2;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     if (__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $4 + 16 | 0, 2, $4 + 12 | 0) | 0)) {
      $5 = $3;
      break label$4;
     }
     while (1) {
      $1 = HEAP32[$4 + 12 >> 2];
      if (($7 | 0) == ($1 | 0)) {
       break label$3;
      }
      if (($1 | 0) < 0) {
       $5 = $3;
       break label$2;
      }
      $6 = HEAP32[$3 + 4 >> 2];
      $9 = $6 >>> 0 < $1 >>> 0;
      $5 = ($9 << 3) + $3 | 0;
      $6 = $1 - ($9 ? $6 : 0) | 0;
      HEAP32[$5 >> 2] = $6 + HEAP32[$5 >> 2];
      $3 = ($9 ? 12 : 4) + $3 | 0;
      HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - $6;
      $7 = $7 - $1 | 0;
      $3 = $5;
      $8 = $8 - $9 | 0;
      if (!__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $3 | 0, $8 | 0, $4 + 12 | 0) | 0)) {
       continue;
      }
      break;
     }
    }
    if (($7 | 0) != -1) {
     break label$2;
    }
   }
   $1 = HEAP32[$0 + 44 >> 2];
   HEAP32[$0 + 28 >> 2] = $1;
   HEAP32[$0 + 20 >> 2] = $1;
   HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 48 >> 2] + $1;
   $1 = $2;
   break label$1;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
  $1 = 0;
  if (($8 | 0) == 2) {
   break label$1;
  }
  $1 = $2 - HEAP32[$5 + 4 >> 2] | 0;
 }
 __stack_pointer = $4 + 32 | 0;
 return $1 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2PolygonShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const___invoke_b2PolygonShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2PolygonShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 555;
 $0 = emscripten__internal__TypeID_b2PolygonShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2PolygonShape____emscripten__internal__getContext_void_20_28b2PolygonShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const__28void_20_28b2PolygonShape____20const__29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_29_29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_bool_20_28b2PolygonShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_2c_20bool_2c_20b2PolygonShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___invoke_28bool_20_28b2PolygonShape____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_2c_20b2PolygonShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput__2c_20b2Transform__2c_20int_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 $2 = emscripten__internal__BindingType_b2PolygonShape_20const__2c_20void___fromWireType_28b2PolygonShape_20const__29(HEAP32[$6 + 24 >> 2]);
 $0 = HEAP32[$6 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2RayCastOutput__2c_20void___fromWireType_28b2RayCastOutput__29(HEAP32[$6 + 20 >> 2]), emscripten__internal__GenericBindingType_b2RayCastInput___fromWireType_28b2RayCastInput__29(HEAP32[$6 + 16 >> 2]), emscripten__internal__GenericBindingType_b2Transform___fromWireType_28b2Transform__29(HEAP32[$6 + 12 >> 2]), emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$6 + 8 >> 2])) & 1);
 __stack_pointer = $6 + 32 | 0;
 return $0 & 1;
}

function emscripten__internal__MethodInvoker_bool_20_28b2CircleShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_2c_20bool_2c_20b2CircleShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___invoke_28bool_20_28b2CircleShape____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_2c_20b2CircleShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput__2c_20b2Transform__2c_20int_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 $2 = emscripten__internal__BindingType_b2CircleShape_20const__2c_20void___fromWireType_28b2CircleShape_20const__29(HEAP32[$6 + 24 >> 2]);
 $0 = HEAP32[$6 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2RayCastOutput__2c_20void___fromWireType_28b2RayCastOutput__29(HEAP32[$6 + 20 >> 2]), emscripten__internal__GenericBindingType_b2RayCastInput___fromWireType_28b2RayCastInput__29(HEAP32[$6 + 16 >> 2]), emscripten__internal__GenericBindingType_b2Transform___fromWireType_28b2Transform__29(HEAP32[$6 + 12 >> 2]), emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$6 + 8 >> 2])) & 1);
 __stack_pointer = $6 + 32 | 0;
 return $0 & 1;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2CircleShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const___invoke_b2CircleShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2CircleShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 537;
 $0 = emscripten__internal__TypeID_b2CircleShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2CircleShape____emscripten__internal__getContext_void_20_28b2CircleShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const__28void_20_28b2CircleShape____20const__29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_29_29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2PulleyJoint__Dump_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 176 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 172 >> 2] = $0;
 $0 = HEAP32[$1 + 172 >> 2];
 HEAP32[$1 + 168 >> 2] = HEAP32[HEAP32[$0 + 48 >> 2] + 8 >> 2];
 HEAP32[$1 + 164 >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] + 8 >> 2];
 b2Log_28char_20const__2c_20____29(13353, 0);
 HEAP32[$1 + 128 >> 2] = HEAP32[$1 + 168 >> 2];
 b2Log_28char_20const__2c_20____29(13733, $1 + 128 | 0);
 HEAP32[$1 + 112 >> 2] = HEAP32[$1 + 164 >> 2];
 b2Log_28char_20const__2c_20____29(13707, $1 + 112 | 0);
 HEAP32[$1 + 96 >> 2] = HEAP8[$0 + 61 | 0] & 1;
 b2Log_28char_20const__2c_20____29(14923, $1 + 96 | 0);
 $2 = HEAPF32[$0 + 68 >> 2];
 HEAPF64[$1 + 88 >> 3] = HEAPF32[$0 + 72 >> 2];
 HEAPF64[$1 + 80 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14276, $1 + 80 | 0);
 $2 = HEAPF32[$0 + 76 >> 2];
 HEAPF64[$1 + 72 >> 3] = HEAPF32[$0 + 80 >> 2];
 HEAPF64[$1 + 64 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14151, $1 - -64 | 0);
 $2 = HEAPF32[$0 + 92 >> 2];
 HEAPF64[$1 + 56 >> 3] = HEAPF32[$0 + 96 >> 2];
 HEAPF64[$1 + 48 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14234, $1 + 48 | 0);
 $2 = HEAPF32[$0 + 100 >> 2];
 HEAPF64[$1 + 40 >> 3] = HEAPF32[$0 + 104 >> 2];
 HEAPF64[$1 + 32 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14109, $1 + 32 | 0);
 HEAPF64[$1 + 16 >> 3] = HEAPF32[$0 + 84 >> 2];
 b2Log_28char_20const__2c_20____29(13202, $1 + 16 | 0);
 HEAPF64[$1 >> 3] = HEAPF32[$0 + 88 >> 2];
 b2Log_28char_20const__2c_20____29(13177, $1);
 HEAPF64[$1 + 144 >> 3] = HEAPF32[$0 + 112 >> 2];
 b2Log_28char_20const__2c_20____29(12598, $1 + 144 | 0);
 HEAP32[$1 + 160 >> 2] = HEAP32[$0 + 56 >> 2];
 b2Log_28char_20const__2c_20____29(14524, $1 + 160 | 0);
 __stack_pointer = $1 + 176 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Draw____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29___invoke_b2Draw_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Draw____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 493;
 $0 = emscripten__internal__TypeID_b2Draw_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Draw____emscripten__internal__getContext_void_20_28b2Draw____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29__28void_20_28b2Draw____20const__29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29_29_29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28_29_20const___invoke_std____2__vector_int_2c_20std____2__allocator_int____28char_20const__2c_20unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 703;
 $0 = emscripten__internal__TypeID_std____2__vector_int_2c_20std____2__allocator_int___2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_unsigned_20long_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int___20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_unsigned_20long_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int___20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int______emscripten__internal__getContext_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28_29_20const__28unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int______20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_bool_20_28b2EdgeShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_2c_20bool_2c_20b2EdgeShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___invoke_28bool_20_28b2EdgeShape____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_2c_20b2EdgeShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput__2c_20b2Transform__2c_20int_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 $2 = emscripten__internal__BindingType_b2EdgeShape_20const__2c_20void___fromWireType_28b2EdgeShape_20const__29(HEAP32[$6 + 24 >> 2]);
 $0 = HEAP32[$6 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2RayCastOutput__2c_20void___fromWireType_28b2RayCastOutput__29(HEAP32[$6 + 20 >> 2]), emscripten__internal__GenericBindingType_b2RayCastInput___fromWireType_28b2RayCastInput__29(HEAP32[$6 + 16 >> 2]), emscripten__internal__GenericBindingType_b2Transform___fromWireType_28b2Transform__29(HEAP32[$6 + 12 >> 2]), emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$6 + 8 >> 2])) & 1);
 __stack_pointer = $6 + 32 | 0;
 return $0 & 1;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29___invoke_b2PolygonShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28__29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 552;
 $0 = emscripten__internal__TypeID_b2PolygonShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int___getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int___getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28__emscripten__internal__getContext_void_20_28__29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29__28void_20_28__20const__29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29_29_29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____destroy_28std____2____tree_node_b2Fixture__2c_20void____29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAP32[$2 + 8 >> 2]) {
  std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____destroy_28std____2____tree_node_b2Fixture__2c_20void____29($0, HEAP32[HEAP32[$2 + 8 >> 2] >> 2]);
  std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____destroy_28std____2____tree_node_b2Fixture__2c_20void____29($0, HEAP32[HEAP32[$2 + 8 >> 2] + 4 >> 2]);
  wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______node_alloc_5babi_v160004_5d_28_29($0), 
  HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  void_20std____2__allocator_traits_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______destroy_5babi_v160004_5d_b2Fixture__2c_20void_2c_20void__28std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_20b2Fixture___29(HEAP32[$2 + 4 >> 2], std____2____tree_key_value_types_b2Fixture______get_ptr_5babi_v160004_5d_28b2Fixture___29(HEAP32[$2 + 8 >> 2] + 16 | 0));
  std____2__allocator_traits_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______deallocate_5babi_v160004_5d_28std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20unsigned_20long_29(HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2], 1);
 }
 __stack_pointer = $2 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const__29___invoke_std____2__vector_int_2c_20std____2__allocator_int____28char_20const__2c_20bool_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 705;
 $0 = emscripten__internal__TypeID_std____2__vector_int_2c_20std____2__allocator_int___2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const____getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const____getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28__emscripten__internal__getContext_bool_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const__29__28bool_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const__29_29_29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const__29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2EdgeShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const___invoke_b2EdgeShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2EdgeShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 545;
 $0 = emscripten__internal__TypeID_b2EdgeShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2EdgeShape____emscripten__internal__getContext_void_20_28b2EdgeShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const__28void_20_28b2EdgeShape____20const__29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_29_29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long_29___invoke_std____2__vector_int_2c_20std____2__allocator_int____28char_20const__2c_20emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 704;
 $0 = emscripten__internal__TypeID_std____2__vector_int_2c_20std____2__allocator_int___2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long___getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long___getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long_29_29_29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long_29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______remove_node_pointer_28std____2____tree_node_b2Fixture__2c_20void____29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long_____tree_iterator_5babi_v160004_5d_28std____2____tree_node_b2Fixture__2c_20void____29($2 + 12 | 0, HEAP32[$2 + 4 >> 2]);
 std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long___operator___5babi_v160004_5d_28_29($2 + 12 | 0);
 if (HEAP32[std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______begin_node_5babi_v160004_5d_28_29($0) >> 2] == HEAP32[$2 + 4 >> 2]) {
  $1 = HEAP32[$2 + 12 >> 2];
  wasm2js_i32$0 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______begin_node_5babi_v160004_5d_28_29($0), 
  wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 $1 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____size_5babi_v160004_5d_28_29($0);
 HEAP32[$1 >> 2] = HEAP32[$1 >> 2] - 1;
 void_20std____2____tree_remove_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____2c_20std____2____tree_node_base_void____29(HEAP32[std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______end_node_5babi_v160004_5d_28_29($0) >> 2], HEAP32[$2 + 4 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function emscripten__internal__MethodInvoker_bool_20_28b2Shape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_2c_20bool_2c_20b2Shape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___invoke_28bool_20_28b2Shape____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_2c_20b2Shape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput__2c_20b2Transform__2c_20int_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 $2 = emscripten__internal__BindingType_b2Shape_20const__2c_20void___fromWireType_28b2Shape_20const__29(HEAP32[$6 + 24 >> 2]);
 $0 = HEAP32[$6 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2RayCastOutput__2c_20void___fromWireType_28b2RayCastOutput__29(HEAP32[$6 + 20 >> 2]), emscripten__internal__GenericBindingType_b2RayCastInput___fromWireType_28b2RayCastInput__29(HEAP32[$6 + 16 >> 2]), emscripten__internal__GenericBindingType_b2Transform___fromWireType_28b2Transform__29(HEAP32[$6 + 12 >> 2]), emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$6 + 8 >> 2])) & 1);
 __stack_pointer = $6 + 32 | 0;
 return $0 & 1;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28int_20const__29___invoke_std____2__vector_int_2c_20std____2__allocator_int____28char_20const__2c_20void_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28int_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 701;
 $0 = emscripten__internal__TypeID_std____2__vector_int_2c_20std____2__allocator_int___2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int____2c_20int_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int____2c_20int_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28std____2__vector_int_2c_20std____2__allocator_int______emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int______20const__29_28int_20const__29_29_29_28int_20const__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2AABB____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__29_20const___invoke_b2AABB_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20bool_20_28b2AABB____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 506;
 $0 = emscripten__internal__TypeID_b2AABB_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2AABB____emscripten__internal__getContext_bool_20_28b2AABB____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__29_20const__28bool_20_28b2AABB____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__29_20const_29_29_28b2RayCastOutput__2c_20b2RayCastInput_20const__29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Shape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const___invoke_b2Shape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Shape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 526;
 $0 = emscripten__internal__TypeID_b2Shape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Shape____emscripten__internal__getContext_void_20_28b2Shape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const__28void_20_28b2Shape____20const__29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_29_29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______push_back_slow_path_b2Vec2_20const___28b2Vec2_20const__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______alloc_5babi_v160004_5d_28_29($0), 
 HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
 std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_b2Vec2___29($2, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______recommend_5babi_v160004_5d_28unsigned_20long_29_20const($0, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____size_5babi_v160004_5d_28_29_20const($0) + 1 | 0), std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____size_5babi_v160004_5d_28_29_20const($0), HEAP32[$2 + 20 >> 2]);
 void_20std____2__allocator_traits_std____2__allocator_b2Vec2____construct_5babi_v160004_5d_b2Vec2_2c_20b2Vec2_20const__2c_20void__28std____2__allocator_b2Vec2___2c_20b2Vec2__2c_20b2Vec2_20const__29(HEAP32[$2 + 20 >> 2], b2Vec2__20std____2____to_address_5babi_v160004_5d_b2Vec2__28b2Vec2__29(HEAP32[$2 + 8 >> 2]), HEAP32[$2 + 24 >> 2]);
 HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 8;
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______swap_out_circular_buffer_28std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_____29($0, $2);
 std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2________split_buffer_28_29($2);
 __stack_pointer = $2 + 32 | 0;
}

function std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_b2Vec2___29($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = 0;
 std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2_______compressed_pair_5babi_v160004_5d_std__nullptr_t_2c_20std____2__allocator_b2Vec2____28std__nullptr_t___2c_20std____2__allocator_b2Vec2___29($0 + 12 | 0, $4 + 8 | 0, HEAP32[$4 + 12 >> 2]);
 label$1: {
  if (!HEAP32[$4 + 20 >> 2]) {
   HEAP32[$0 >> 2] = 0;
   break label$1;
  }
  std____2____allocation_result_std____2__allocator_traits_std____2__allocator_b2Vec2____pointer__20std____2____allocate_at_least_5babi_v160004_5d_std____2__allocator_b2Vec2___28std____2__allocator_b2Vec2___2c_20unsigned_20long_29($4, std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______alloc_5babi_v160004_5d_28_29($0), HEAP32[$4 + 20 >> 2]);
  HEAP32[$0 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 4 >> 2];
 }
 $1 = HEAP32[$0 >> 2] + (HEAP32[$4 + 16 >> 2] << 3) | 0;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $1;
 $1 = HEAP32[$0 >> 2];
 $2 = HEAP32[$4 + 20 >> 2] << 3;
 wasm2js_i32$0 = std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______end_cap_5babi_v160004_5d_28_29($0), 
 wasm2js_i32$1 = $1 + $2 | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29___invoke_b2Draw_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 491;
 $0 = emscripten__internal__TypeID_b2Draw_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20float_2c_20b2Color_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20float_2c_20b2Color_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20float_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Draw____emscripten__internal__getContext_void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29__28void_20_28b2Draw____20const__29_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29_29_29_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2ContactListener____29_28unsigned_20int_2c_20unsigned_20int_29___invoke_b2ContactListener_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2ContactListener____29_28unsigned_20int_2c_20unsigned_20int_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 481;
 $0 = emscripten__internal__TypeID_b2ContactListener_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListener__2c_20unsigned_20int_2c_20unsigned_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListener__2c_20unsigned_20int_2c_20unsigned_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2ContactListener____emscripten__internal__getContext_void_20_28b2ContactListener____29_28unsigned_20int_2c_20unsigned_20int_29__28void_20_28b2ContactListener____20const__29_28unsigned_20int_2c_20unsigned_20int_29_29_29_28unsigned_20int_2c_20unsigned_20int_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2PolygonShape____29_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29___invoke_b2PolygonShape__28char_20const__2c_20void_20_28b2PolygonShape____29_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 559;
 $0 = emscripten__internal__TypeID_b2PolygonShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape__2c_20float_2c_20float_2c_20b2Vec2_20const__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape__2c_20float_2c_20float_2c_20b2Vec2_20const__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float_2c_20float_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2PolygonShape____emscripten__internal__getContext_void_20_28b2PolygonShape____29_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29__28void_20_28b2PolygonShape____20const__29_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29_29_29_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__Invoker_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const____invoke_28emscripten__val_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const__29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void___fromWireType_28emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($3 + 4 | 0, HEAP32[$3 + 24 >> 2]);
 emscripten__internal__BindingType_emscripten__val_2c_20void___fromWireType_28emscripten___EM_VAL__29($3, HEAP32[$3 + 20 >> 2]);
 FUNCTION_TABLE[$0 | 0]($3 + 16 | 0, $3 + 4 | 0, $3);
 $0 = emscripten__internal__BindingType_emscripten__val_2c_20void___toWireType_28emscripten__val_20const__29($3 + 16 | 0);
 emscripten__val___val_28_29($3 + 16 | 0);
 emscripten__val___val_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($3 + 4 | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28b2QueryCallback__2c_20b2AABB_20const__29_20const___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2World____29_28b2QueryCallback__2c_20b2AABB_20const__29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 516;
 $0 = emscripten__internal__TypeID_b2World_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World_20const__2c_20b2QueryCallback__2c_20b2AABB_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World_20const__2c_20b2QueryCallback__2c_20b2AABB_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28b2QueryCallback__2c_20b2AABB_20const__29_20const__28void_20_28b2World____20const__29_28b2QueryCallback__2c_20b2AABB_20const__29_20const_29_29_28b2QueryCallback__2c_20b2AABB_20const__29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Draw____29_28unsigned_20int_2c_20int_2c_20b2Color_20const__29___invoke_b2Draw_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Draw____29_28unsigned_20int_2c_20int_2c_20b2Color_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 490;
 $0 = emscripten__internal__TypeID_b2Draw_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20unsigned_20int_2c_20int_2c_20b2Color_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20unsigned_20int_2c_20int_2c_20b2Color_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Draw____emscripten__internal__getContext_void_20_28b2Draw____29_28unsigned_20int_2c_20int_2c_20b2Color_20const__29__28void_20_28b2Draw____20const__29_28unsigned_20int_2c_20int_2c_20b2Color_20const__29_29_29_28unsigned_20int_2c_20int_2c_20b2Color_20const__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2Contact__InitializeRegisters_28_29() {
 b2Contact__AddType_28b2Contact__20_28__29_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29_2c_20void_20_28__29_28b2Contact__2c_20b2BlockAllocator__29_2c_20b2Shape__Type_2c_20b2Shape__Type_29(805, 806, 0, 0);
 b2Contact__AddType_28b2Contact__20_28__29_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29_2c_20void_20_28__29_28b2Contact__2c_20b2BlockAllocator__29_2c_20b2Shape__Type_2c_20b2Shape__Type_29(807, 808, 2, 0);
 b2Contact__AddType_28b2Contact__20_28__29_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29_2c_20void_20_28__29_28b2Contact__2c_20b2BlockAllocator__29_2c_20b2Shape__Type_2c_20b2Shape__Type_29(809, 810, 2, 2);
 b2Contact__AddType_28b2Contact__20_28__29_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29_2c_20void_20_28__29_28b2Contact__2c_20b2BlockAllocator__29_2c_20b2Shape__Type_2c_20b2Shape__Type_29(811, 812, 1, 0);
 b2Contact__AddType_28b2Contact__20_28__29_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29_2c_20void_20_28__29_28b2Contact__2c_20b2BlockAllocator__29_2c_20b2Shape__Type_2c_20b2Shape__Type_29(813, 814, 1, 2);
 b2Contact__AddType_28b2Contact__20_28__29_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29_2c_20void_20_28__29_28b2Contact__2c_20b2BlockAllocator__29_2c_20b2Shape__Type_2c_20b2Shape__Type_29(815, 816, 3, 0);
 b2Contact__AddType_28b2Contact__20_28__29_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29_2c_20void_20_28__29_28b2Contact__2c_20b2BlockAllocator__29_2c_20b2Shape__Type_2c_20b2Shape__Type_29(817, 818, 3, 2);
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2PolygonShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const___invoke_b2PolygonShape__28char_20const__2c_20bool_20_28b2PolygonShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 553;
 $0 = emscripten__internal__TypeID_b2PolygonShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2PolygonShape____emscripten__internal__getContext_bool_20_28b2PolygonShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const__28bool_20_28b2PolygonShape____20const__29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_29_29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2Body__CreateFixture_28b2FixtureDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 if (b2World__IsLocked_28_29_20const(HEAP32[$0 + 88 >> 2]) & 1) {
  __assert_fail(8952, 4121, 170, 9035);
  wasm2js_trap();
 }
 label$2: {
  if (b2World__IsLocked_28_29_20const(HEAP32[$0 + 88 >> 2]) & 1) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$2;
  }
  HEAP32[$2 + 16 >> 2] = HEAP32[$0 + 88 >> 2];
  wasm2js_i32$0 = $2, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$2 + 16 >> 2], 44), 
  HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
  $1 = HEAP32[$2 + 12 >> 2];
  b2Fixture__b2Fixture_28_29($1);
  HEAP32[$2 + 8 >> 2] = $1;
  b2Fixture__Create_28b2BlockAllocator__2c_20b2Body__2c_20b2FixtureDef_20const__29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 16 >> 2], $0, HEAP32[$2 + 20 >> 2]);
  if (HEAPU16[$0 + 4 >> 1] & 32) {
   HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 88 >> 2] + 102868;
   b2Fixture__CreateProxies_28b2BroadPhase__2c_20b2Transform_20const__29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], $0 + 12 | 0);
  }
  HEAP32[HEAP32[$2 + 8 >> 2] + 4 >> 2] = HEAP32[$0 + 100 >> 2];
  HEAP32[$0 + 100 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 104 >> 2] = HEAP32[$0 + 104 >> 2] + 1;
  HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2] = $0;
  if (HEAPF32[HEAP32[$2 + 8 >> 2] >> 2] > Math_fround(0)) {
   b2Body__ResetMassData_28_29($0);
  }
  HEAP8[HEAP32[$0 + 88 >> 2] + 102988 | 0] = 1;
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function b2Contact__Destroy_28b2Contact__2c_20b2BlockAllocator__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 if (!(HEAP8[30864] & 1)) {
  __assert_fail(8526, 5174, 107, 1649);
  wasm2js_trap();
 }
 HEAP32[$2 + 20 >> 2] = HEAP32[HEAP32[$2 + 28 >> 2] + 48 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 28 >> 2] + 52 >> 2];
 label$2: {
  if (HEAP32[HEAP32[$2 + 28 >> 2] + 124 >> 2] <= 0) {
   break label$2;
  }
  if (b2Fixture__IsSensor_28_29_20const(HEAP32[$2 + 20 >> 2]) & 1) {
   break label$2;
  }
  if (b2Fixture__IsSensor_28_29_20const(HEAP32[$2 + 16 >> 2]) & 1) {
   break label$2;
  }
  b2Body__SetAwake_28bool_29(b2Fixture__GetBody_28_29(HEAP32[$2 + 20 >> 2]), 1);
  b2Body__SetAwake_28bool_29(b2Fixture__GetBody_28_29(HEAP32[$2 + 16 >> 2]), 1);
 }
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetType_28_29_20const(HEAP32[$2 + 20 >> 2]), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetType_28_29_20const(HEAP32[$2 + 16 >> 2]), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 if (!(HEAP32[$2 + 8 >> 2] < 4 & HEAP32[$2 + 12 >> 2] >= 0)) {
  __assert_fail(2286, 5174, 123, 1649);
  wasm2js_trap();
 }
 if (!(HEAP32[$2 + 8 >> 2] < 4 & HEAP32[$2 + 12 >> 2] >= 0)) {
  __assert_fail(2286, 5174, 124, 1649);
  wasm2js_trap();
 }
 HEAP32[$2 + 4 >> 2] = HEAP32[((Math_imul(HEAP32[$2 + 12 >> 2], 48) + 30672 | 0) + Math_imul(HEAP32[$2 + 8 >> 2], 12) | 0) + 4 >> 2];
 FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]](HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2CircleShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const___invoke_b2CircleShape__28char_20const__2c_20bool_20_28b2CircleShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 535;
 $0 = emscripten__internal__TypeID_b2CircleShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2CircleShape____emscripten__internal__getContext_bool_20_28b2CircleShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const__28bool_20_28b2CircleShape____20const__29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_29_29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2____split_buffer_int_2c_20std____2__allocator_int_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_int___29($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = 0;
 std____2____compressed_pair_int__2c_20std____2__allocator_int_______compressed_pair_5babi_v160004_5d_std__nullptr_t_2c_20std____2__allocator_int____28std__nullptr_t___2c_20std____2__allocator_int___29($0 + 12 | 0, $4 + 8 | 0, HEAP32[$4 + 12 >> 2]);
 label$1: {
  if (!HEAP32[$4 + 20 >> 2]) {
   HEAP32[$0 >> 2] = 0;
   break label$1;
  }
  std____2____allocation_result_std____2__allocator_traits_std____2__allocator_int____pointer__20std____2____allocate_at_least_5babi_v160004_5d_std____2__allocator_int___28std____2__allocator_int___2c_20unsigned_20long_29($4, std____2____split_buffer_int_2c_20std____2__allocator_int_______alloc_5babi_v160004_5d_28_29($0), HEAP32[$4 + 20 >> 2]);
  HEAP32[$0 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 4 >> 2];
 }
 $1 = HEAP32[$0 >> 2] + (HEAP32[$4 + 16 >> 2] << 2) | 0;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $1;
 $1 = HEAP32[$0 >> 2];
 $2 = HEAP32[$4 + 20 >> 2] << 2;
 wasm2js_i32$0 = std____2____split_buffer_int_2c_20std____2__allocator_int_______end_cap_5babi_v160004_5d_28_29($0), 
 wasm2js_i32$1 = $1 + $2 | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function b2Body__SetTransform_28b2Vec2_20const__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAPF32[$3 + 20 >> 2] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 if (b2World__IsLocked_28_29_20const(HEAP32[$0 + 88 >> 2]) & 1) {
  __assert_fail(8952, 4121, 432, 6811);
  wasm2js_trap();
 }
 if (!(b2World__IsLocked_28_29_20const(HEAP32[$0 + 88 >> 2]) & 1)) {
  b2Rot__Set_28float_29($0 + 20 | 0, HEAPF32[$3 + 20 >> 2]);
  $4 = HEAP32[$3 + 24 >> 2];
  $1 = HEAP32[$4 >> 2];
  $4 = HEAP32[$4 + 4 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  HEAP32[$0 + 16 >> 2] = $4;
  b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($3 + 12 | 0, $0 + 12 | 0, $0 + 28 | 0);
  $1 = HEAP32[$3 + 16 >> 2];
  $4 = HEAP32[$3 + 12 >> 2];
  HEAP32[$0 + 44 >> 2] = $4;
  HEAP32[$0 + 48 >> 2] = $1;
  HEAPF32[$0 + 56 >> 2] = HEAPF32[$3 + 20 >> 2];
  $4 = HEAP32[$0 + 48 >> 2];
  $1 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 36 >> 2] = $1;
  HEAP32[$0 + 40 >> 2] = $4;
  HEAPF32[$0 + 52 >> 2] = HEAPF32[$3 + 20 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$0 + 88 >> 2] + 102868;
  HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 100 >> 2];
  while (1) {
   if (HEAP32[$3 + 4 >> 2]) {
    b2Fixture__Synchronize_28b2BroadPhase__2c_20b2Transform_20const__2c_20b2Transform_20const__29(HEAP32[$3 + 4 >> 2], HEAP32[$3 + 8 >> 2], $0 + 12 | 0, $0 + 12 | 0);
    HEAP32[$3 + 4 >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] + 4 >> 2];
    continue;
   }
   break;
  }
  b2ContactManager__FindNewContacts_28_29(HEAP32[$0 + 88 >> 2] + 102868 | 0);
 }
 __stack_pointer = $3 + 32 | 0;
}

function b2Fixture__Refilter_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 label$1: {
  $0 = HEAP32[$1 + 28 >> 2];
  if (!HEAP32[$0 + 8 >> 2]) {
   break label$1;
  }
  wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Body__GetContactList_28_29(HEAP32[$0 + 8 >> 2]), 
  HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
  while (1) {
   if (HEAP32[$1 + 24 >> 2]) {
    HEAP32[$1 + 20 >> 2] = HEAP32[HEAP32[$1 + 24 >> 2] + 4 >> 2];
    wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetFixtureA_28_29(HEAP32[$1 + 20 >> 2]), 
    HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
    wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetFixtureB_28_29(HEAP32[$1 + 20 >> 2]), 
    HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
    if (!(HEAP32[$1 + 16 >> 2] != ($0 | 0) & HEAP32[$1 + 12 >> 2] != ($0 | 0))) {
     b2Contact__FlagForFiltering_28_29(HEAP32[$1 + 20 >> 2]);
    }
    HEAP32[$1 + 24 >> 2] = HEAP32[HEAP32[$1 + 24 >> 2] + 12 >> 2];
    continue;
   }
   break;
  }
  wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Body__GetWorld_28_29(HEAP32[$0 + 8 >> 2]), 
  HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  if (!HEAP32[$1 + 8 >> 2]) {
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 8 >> 2] + 102868;
  HEAP32[$1 >> 2] = 0;
  while (1) {
   if (HEAP32[$1 >> 2] >= HEAP32[$0 + 28 >> 2]) {
    break label$1;
   }
   b2BroadPhase__TouchProxy_28int_29(HEAP32[$1 + 4 >> 2], HEAP32[(HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$1 >> 2], 28) | 0) + 24 >> 2]);
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
   continue;
  }
 }
 __stack_pointer = $1 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2EdgeShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const___invoke_b2EdgeShape__28char_20const__2c_20bool_20_28b2EdgeShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 543;
 $0 = emscripten__internal__TypeID_b2EdgeShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2EdgeShape____emscripten__internal__getContext_bool_20_28b2EdgeShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const__28bool_20_28b2EdgeShape____20const__29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_29_29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2PolygonShape____29_28b2MassData__2c_20float_29_20const___invoke_b2PolygonShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2PolygonShape____29_28b2MassData__2c_20float_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 556;
 $0 = emscripten__internal__TypeID_b2PolygonShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2MassData__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2MassData__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2PolygonShape____emscripten__internal__getContext_void_20_28b2PolygonShape____29_28b2MassData__2c_20float_29_20const__28void_20_28b2PolygonShape____20const__29_28b2MassData__2c_20float_29_20const_29_29_28b2MassData__2c_20float_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2Island__b2Island_28int_2c_20int_2c_20int_2c_20b2StackAllocator__2c_20b2ContactListener__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 $0 = HEAP32[$6 + 28 >> 2];
 HEAP32[$0 + 40 >> 2] = HEAP32[$6 + 24 >> 2];
 HEAP32[$0 + 44 >> 2] = HEAP32[$6 + 20 >> 2];
 HEAP32[$0 + 48 >> 2] = HEAP32[$6 + 16 >> 2];
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 >> 2] = HEAP32[$6 + 12 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$6 + 8 >> 2];
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2StackAllocator__Allocate_28int_29(HEAP32[$0 >> 2], HEAP32[$6 + 24 >> 2] << 2), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2StackAllocator__Allocate_28int_29(HEAP32[$0 >> 2], HEAP32[$6 + 20 >> 2] << 2), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2StackAllocator__Allocate_28int_29(HEAP32[$0 >> 2], HEAP32[$6 + 16 >> 2] << 2), 
 HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2StackAllocator__Allocate_28int_29(HEAP32[$0 >> 2], Math_imul(HEAP32[$0 + 40 >> 2], 12)), 
 HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2StackAllocator__Allocate_28int_29(HEAP32[$0 >> 2], Math_imul(HEAP32[$0 + 40 >> 2], 12)), 
 HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
 __stack_pointer = $6 + 32 | 0;
 return $0;
}

function pop_arg($0, $1, $2, $3) {
 label$1: {
  switch ($1 - 9 | 0) {
  case 0:
   $1 = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = $1 + 4;
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   return;

  case 6:
   $1 = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = $1 + 4;
   $1 = HEAP16[$1 >> 1];
   $2 = $1 >> 31;
   HEAP32[$0 >> 2] = $1;
   HEAP32[$0 + 4 >> 2] = $2;
   return;

  case 7:
   $1 = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = $1 + 4;
   $2 = HEAPU16[$1 >> 1];
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = 0;
   return;

  case 8:
   $1 = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = $1 + 4;
   $1 = HEAP8[$1 | 0];
   $2 = $1 >> 31;
   HEAP32[$0 >> 2] = $1;
   HEAP32[$0 + 4 >> 2] = $2;
   return;

  case 9:
   $1 = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = $1 + 4;
   $2 = HEAPU8[$1 | 0];
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = 0;
   return;

  case 16:
   $1 = HEAP32[$2 >> 2] + 7 & -8;
   HEAP32[$2 >> 2] = $1 + 8;
   HEAPF64[$0 >> 3] = HEAPF64[$1 >> 3];
   return;

  case 17:
   FUNCTION_TABLE[$3 | 0]($0, $2);

  default:
   return;

  case 1:
  case 4:
  case 14:
   $1 = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = $1 + 4;
   $1 = HEAP32[$1 >> 2];
   $2 = $1 >> 31;
   HEAP32[$0 >> 2] = $1;
   HEAP32[$0 + 4 >> 2] = $2;
   return;

  case 2:
  case 5:
  case 11:
  case 15:
   $1 = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = $1 + 4;
   $2 = HEAP32[$1 >> 2];
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = 0;
   return;

  case 3:
  case 10:
  case 12:
  case 13:
   break label$1;
  }
 }
 $1 = HEAP32[$2 >> 2] + 7 & -8;
 HEAP32[$2 >> 2] = $1 + 8;
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2CircleShape____29_28b2MassData__2c_20float_29_20const___invoke_b2CircleShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2CircleShape____29_28b2MassData__2c_20float_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 538;
 $0 = emscripten__internal__TypeID_b2CircleShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2MassData__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2MassData__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2CircleShape____emscripten__internal__getContext_void_20_28b2CircleShape____29_28b2MassData__2c_20float_29_20const__28void_20_28b2CircleShape____20const__29_28b2MassData__2c_20float_29_20const_29_29_28b2MassData__2c_20float_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2Mat33__Solve33_28b2Vec3_20const__29_20const($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $1;
 HEAP32[$3 + 56 >> 2] = $2;
 $1 = HEAP32[$3 + 60 >> 2];
 b2Cross_28b2Vec3_20const__2c_20b2Vec3_20const__29($3 + 40 | 0, $1 + 12 | 0, $1 + 24 | 0);
 wasm2js_i32$0 = $3, wasm2js_f32$0 = b2Dot_28b2Vec3_20const__2c_20b2Vec3_20const__29($1, $3 + 40 | 0), 
 HEAPF32[wasm2js_i32$0 + 52 >> 2] = wasm2js_f32$0;
 if (HEAPF32[$3 + 52 >> 2] != Math_fround(0)) {
  HEAPF32[$3 + 52 >> 2] = Math_fround(1) / HEAPF32[$3 + 52 >> 2];
 }
 b2Vec3__b2Vec3_28_29($0);
 $4 = HEAPF32[$3 + 52 >> 2];
 $2 = HEAP32[$3 + 56 >> 2];
 b2Cross_28b2Vec3_20const__2c_20b2Vec3_20const__29($3 + 28 | 0, $1 + 12 | 0, $1 + 24 | 0);
 wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround($4 * b2Dot_28b2Vec3_20const__2c_20b2Vec3_20const__29($2, $3 + 28 | 0)), 
 HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
 $4 = HEAPF32[$3 + 52 >> 2];
 b2Cross_28b2Vec3_20const__2c_20b2Vec3_20const__29($3 + 16 | 0, HEAP32[$3 + 56 >> 2], $1 + 24 | 0);
 wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround($4 * b2Dot_28b2Vec3_20const__2c_20b2Vec3_20const__29($1, $3 + 16 | 0)), 
 HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 $4 = HEAPF32[$3 + 52 >> 2];
 b2Cross_28b2Vec3_20const__2c_20b2Vec3_20const__29($3 + 4 | 0, $1 + 12 | 0, HEAP32[$3 + 56 >> 2]);
 wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround($4 * b2Dot_28b2Vec3_20const__2c_20b2Vec3_20const__29($1, $3 + 4 | 0)), 
 HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
 __stack_pointer = $3 - -64 | 0;
}

function b2TestOverlap_28b2Shape_20const__2c_20int_2c_20b2Shape_20const__2c_20int_2c_20b2Transform_20const__2c_20b2Transform_20const__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 160 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 156 >> 2] = $0;
 HEAP32[$6 + 152 >> 2] = $1;
 HEAP32[$6 + 148 >> 2] = $2;
 HEAP32[$6 + 144 >> 2] = $3;
 HEAP32[$6 + 140 >> 2] = $4;
 HEAP32[$6 + 136 >> 2] = $5;
 b2DistanceInput__b2DistanceInput_28_29($6 + 44 | 0);
 b2DistanceProxy__Set_28b2Shape_20const__2c_20int_29($6 + 44 | 0, HEAP32[$6 + 156 >> 2], HEAP32[$6 + 152 >> 2]);
 b2DistanceProxy__Set_28b2Shape_20const__2c_20int_29($6 + 72 | 0, HEAP32[$6 + 148 >> 2], HEAP32[$6 + 144 >> 2]);
 $4 = HEAP32[$6 + 140 >> 2];
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 $3 = $0;
 $2 = $6 + 44 | 0;
 $0 = $2;
 HEAP32[$0 + 56 >> 2] = $3;
 HEAP32[$0 + 60 >> 2] = $1;
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$4 + 8 >> 2];
 $3 = $1;
 $1 = $2;
 HEAP32[$1 + 64 >> 2] = $3;
 HEAP32[$1 + 68 >> 2] = $0;
 $4 = HEAP32[$6 + 136 >> 2];
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 $3 = $0;
 $2 = $6 + 44 | 0;
 $0 = $2;
 HEAP32[$0 + 72 >> 2] = $3;
 HEAP32[$0 + 76 >> 2] = $1;
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$4 + 8 >> 2];
 $3 = $1;
 $1 = $2;
 HEAP32[$1 + 80 >> 2] = $3;
 HEAP32[$1 + 84 >> 2] = $0;
 HEAP8[$6 + 132 | 0] = 1;
 HEAP16[$6 + 36 >> 1] = 0;
 b2DistanceOutput__b2DistanceOutput_28_29($6 + 8 | 0);
 b2Distance_28b2DistanceOutput__2c_20b2SimplexCache__2c_20b2DistanceInput_20const__29($6 + 8 | 0, $6 + 32 | 0, $6 + 44 | 0);
 __stack_pointer = $6 + 160 | 0;
 return HEAPF32[$6 + 24 >> 2] < Math_fround(11920928955078125e-22);
}

function __dynamic_cast($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 $6 = HEAP32[$0 >> 2];
 $5 = HEAP32[$6 - 4 >> 2];
 $6 = HEAP32[$6 - 8 >> 2];
 HEAP32[$4 + 32 >> 2] = 0;
 HEAP32[$4 + 36 >> 2] = 0;
 HEAP32[$4 + 40 >> 2] = 0;
 HEAP32[$4 + 44 >> 2] = 0;
 HEAP32[$4 + 48 >> 2] = 0;
 HEAP32[$4 + 52 >> 2] = 0;
 HEAP8[$4 + 55 | 0] = 0;
 HEAP8[$4 + 56 | 0] = 0;
 HEAP8[$4 + 57 | 0] = 0;
 HEAP8[$4 + 58 | 0] = 0;
 HEAP8[$4 + 59 | 0] = 0;
 HEAP8[$4 + 60 | 0] = 0;
 HEAP8[$4 + 61 | 0] = 0;
 HEAP8[$4 + 62 | 0] = 0;
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 28 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = $3;
 HEAP32[$4 + 16 >> 2] = $1;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $2;
 $0 = $0 + $6 | 0;
 $3 = 0;
 label$1: {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($5, $2, 0)) {
   HEAP32[$4 + 56 >> 2] = 1;
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 20 >> 2]]($5, $4 + 8 | 0, $0, $0, 1, 0);
   $3 = HEAP32[$4 + 32 >> 2] == 1 ? $0 : 0;
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 24 >> 2]]($5, $4 + 8 | 0, $0, 1, 0);
  label$3: {
   switch (HEAP32[$4 + 44 >> 2]) {
   case 0:
    $3 = HEAP32[$4 + 48 >> 2] == 1 ? HEAP32[$4 + 36 >> 2] == 1 ? HEAP32[$4 + 40 >> 2] == 1 ? HEAP32[$4 + 28 >> 2] : 0 : 0 : 0;
    break label$1;

   case 1:
    break label$3;

   default:
    break label$1;
   }
  }
  if (HEAP32[$4 + 32 >> 2] != 1) {
   if (HEAP32[$4 + 48 >> 2] | HEAP32[$4 + 36 >> 2] != 1 | HEAP32[$4 + 40 >> 2] != 1) {
    break label$1;
   }
  }
  $3 = HEAP32[$4 + 24 >> 2];
 }
 __stack_pointer = $4 - -64 | 0;
 return $3;
}

function void_20std____2__vector_int_2c_20std____2__allocator_int______push_back_slow_path_int_20const___28int_20const__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__vector_int_2c_20std____2__allocator_int______alloc_5babi_v160004_5d_28_29($0), 
 HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
 std____2____split_buffer_int_2c_20std____2__allocator_int_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_int___29($2, std____2__vector_int_2c_20std____2__allocator_int______recommend_5babi_v160004_5d_28unsigned_20long_29_20const($0, std____2__vector_int_2c_20std____2__allocator_int____size_5babi_v160004_5d_28_29_20const($0) + 1 | 0), std____2__vector_int_2c_20std____2__allocator_int____size_5babi_v160004_5d_28_29_20const($0), HEAP32[$2 + 20 >> 2]);
 void_20std____2__allocator_traits_std____2__allocator_int____construct_5babi_v160004_5d_int_2c_20int_20const__2c_20void__28std____2__allocator_int___2c_20int__2c_20int_20const__29(HEAP32[$2 + 20 >> 2], int__20std____2____to_address_5babi_v160004_5d_int__28int__29(HEAP32[$2 + 8 >> 2]), HEAP32[$2 + 24 >> 2]);
 HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 4;
 std____2__vector_int_2c_20std____2__allocator_int______swap_out_circular_buffer_28std____2____split_buffer_int_2c_20std____2__allocator_int_____29($0, $2);
 std____2____split_buffer_int_2c_20std____2__allocator_int________split_buffer_28_29($2);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Shape__20_28b2PolygonShape____29_28b2BlockAllocator__29_20const___invoke_b2PolygonShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Shape__20_28b2PolygonShape____29_28b2BlockAllocator__29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 550;
 $0 = emscripten__internal__TypeID_b2PolygonShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2BlockAllocator____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2BlockAllocator____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Shape__20_28b2PolygonShape____emscripten__internal__getContext_b2Shape__20_28b2PolygonShape____29_28b2BlockAllocator__29_20const__28b2Shape__20_28b2PolygonShape____20const__29_28b2BlockAllocator__29_20const_29_29_28b2BlockAllocator__29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2EdgeShape____29_28b2MassData__2c_20float_29_20const___invoke_b2EdgeShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2EdgeShape____29_28b2MassData__2c_20float_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 546;
 $0 = emscripten__internal__TypeID_b2EdgeShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2MassData__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2MassData__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2EdgeShape____emscripten__internal__getContext_void_20_28b2EdgeShape____29_28b2MassData__2c_20float_29_20const__28void_20_28b2EdgeShape____20const__29_28b2MassData__2c_20float_29_20const_29_29_28b2MassData__2c_20float_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Shape__20_28b2CircleShape____29_28b2BlockAllocator__29_20const___invoke_b2CircleShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Shape__20_28b2CircleShape____29_28b2BlockAllocator__29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 533;
 $0 = emscripten__internal__TypeID_b2CircleShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2BlockAllocator____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2BlockAllocator____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Shape__20_28b2CircleShape____emscripten__internal__getContext_b2Shape__20_28b2CircleShape____29_28b2BlockAllocator__29_20const__28b2Shape__20_28b2CircleShape____20const__29_28b2BlockAllocator__29_20const_29_29_28b2BlockAllocator__29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Shape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const___invoke_b2Shape__28char_20const__2c_20bool_20_28b2Shape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 524;
 $0 = emscripten__internal__TypeID_b2Shape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2Shape____emscripten__internal__getContext_bool_20_28b2Shape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const__28bool_20_28b2Shape____20const__29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_29_29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function __memset($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 label$1: {
  if (!$2) {
   break label$1;
  }
  HEAP8[$0 | 0] = $1;
  $3 = $0 + $2 | 0;
  HEAP8[$3 - 1 | 0] = $1;
  if ($2 >>> 0 < 3) {
   break label$1;
  }
  HEAP8[$0 + 2 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1;
  HEAP8[$3 - 3 | 0] = $1;
  HEAP8[$3 - 2 | 0] = $1;
  if ($2 >>> 0 < 7) {
   break label$1;
  }
  HEAP8[$0 + 3 | 0] = $1;
  HEAP8[$3 - 4 | 0] = $1;
  if ($2 >>> 0 < 9) {
   break label$1;
  }
  $4 = 0 - $0 & 3;
  $3 = $4 + $0 | 0;
  $1 = Math_imul($1 & 255, 16843009);
  HEAP32[$3 >> 2] = $1;
  $4 = $2 - $4 & -4;
  $2 = $4 + $3 | 0;
  HEAP32[$2 - 4 >> 2] = $1;
  if ($4 >>> 0 < 9) {
   break label$1;
  }
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$2 - 8 >> 2] = $1;
  HEAP32[$2 - 12 >> 2] = $1;
  if ($4 >>> 0 < 25) {
   break label$1;
  }
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $1;
  HEAP32[$3 + 12 >> 2] = $1;
  HEAP32[$2 - 16 >> 2] = $1;
  HEAP32[$2 - 20 >> 2] = $1;
  HEAP32[$2 - 24 >> 2] = $1;
  HEAP32[$2 - 28 >> 2] = $1;
  $6 = $3 & 4 | 24;
  $2 = $4 - $6 | 0;
  if ($2 >>> 0 < 32) {
   break label$1;
  }
  $5 = __wasm_i64_mul($1, 0, 1, 1);
  $4 = i64toi32_i32$HIGH_BITS;
  $1 = $3 + $6 | 0;
  while (1) {
   HEAP32[$1 + 24 >> 2] = $5;
   HEAP32[$1 + 28 >> 2] = $4;
   HEAP32[$1 + 16 >> 2] = $5;
   HEAP32[$1 + 20 >> 2] = $4;
   HEAP32[$1 + 8 >> 2] = $5;
   HEAP32[$1 + 12 >> 2] = $4;
   HEAP32[$1 >> 2] = $5;
   HEAP32[$1 + 4 >> 2] = $4;
   $1 = $1 + 32 | 0;
   $2 = $2 - 32 | 0;
   if ($2 >>> 0 > 31) {
    continue;
   }
   break;
  }
 }
 return $0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Shape__20_28b2EdgeShape____29_28b2BlockAllocator__29_20const___invoke_b2EdgeShape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Shape__20_28b2EdgeShape____29_28b2BlockAllocator__29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 541;
 $0 = emscripten__internal__TypeID_b2EdgeShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2BlockAllocator____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2BlockAllocator____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Shape__20_28b2EdgeShape____emscripten__internal__getContext_b2Shape__20_28b2EdgeShape____29_28b2BlockAllocator__29_20const__28b2Shape__20_28b2EdgeShape____20const__29_28b2BlockAllocator__29_20const_29_29_28b2BlockAllocator__29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 589;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29__28void_20_28b2Body____20const__29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29_29_29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Fixture__20_28b2Body____29_28b2Shape_20const__2c_20float_29___invoke_b2Body_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Fixture__20_28b2Body____29_28b2Shape_20const__2c_20float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 581;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Shape_20const__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Shape_20const__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Fixture__20_28b2Body____emscripten__internal__getContext_b2Fixture__20_28b2Body____29_28b2Shape_20const__2c_20float_29__28b2Fixture__20_28b2Body____20const__29_28b2Shape_20const__2c_20float_29_29_29_28b2Shape_20const__2c_20float_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2Fixture__Synchronize_28b2BroadPhase__2c_20b2Transform_20const__2c_20b2Transform_20const__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 80 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 76 >> 2] = $0;
 HEAP32[$4 + 72 >> 2] = $1;
 HEAP32[$4 + 68 >> 2] = $2;
 HEAP32[$4 + 64 >> 2] = $3;
 label$1: {
  $0 = HEAP32[$4 + 76 >> 2];
  if (!HEAP32[$0 + 28 >> 2]) {
   break label$1;
  }
  HEAP32[$4 + 60 >> 2] = 0;
  while (1) {
   if (HEAP32[$4 + 60 >> 2] >= HEAP32[$0 + 28 >> 2]) {
    break label$1;
   }
   HEAP32[$4 + 56 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$4 + 60 >> 2], 28);
   b2AABB__b2AABB_28_29($4 + 40 | 0);
   b2AABB__b2AABB_28_29($4 + 24 | 0);
   $1 = HEAP32[$0 + 12 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1, $4 + 40 | 0, HEAP32[$4 + 68 >> 2], HEAP32[HEAP32[$4 + 56 >> 2] + 20 >> 2]);
   $1 = HEAP32[$0 + 12 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1, $4 + 24 | 0, HEAP32[$4 + 64 >> 2], HEAP32[HEAP32[$4 + 56 >> 2] + 20 >> 2]);
   b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29(HEAP32[$4 + 56 >> 2], $4 + 40 | 0, $4 + 24 | 0);
   b2AABB__GetCenter_28_29_20const($4 + 8 | 0, $4 + 24 | 0);
   b2AABB__GetCenter_28_29_20const($4, $4 + 40 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 16 | 0, $4 + 8 | 0, $4);
   b2BroadPhase__MoveProxy_28int_2c_20b2AABB_20const__2c_20b2Vec2_20const__29(HEAP32[$4 + 72 >> 2], HEAP32[HEAP32[$4 + 56 >> 2] + 24 >> 2], HEAP32[$4 + 56 >> 2], $4 + 16 | 0);
   HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 60 >> 2] + 1;
   continue;
  }
 }
 __stack_pointer = $4 + 80 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Shape____29_28b2MassData__2c_20float_29_20const___invoke_b2Shape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Shape____29_28b2MassData__2c_20float_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 527;
 $0 = emscripten__internal__TypeID_b2Shape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2MassData__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2MassData__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Shape____emscripten__internal__getContext_void_20_28b2Shape____29_28b2MassData__2c_20float_29_20const__28void_20_28b2Shape____20const__29_28b2MassData__2c_20float_29_20const_29_29_28b2MassData__2c_20float_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2__unique_ptr_std____2____tree_node_b2Fixture__2c_20void___2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______reset_5babi_v160004_5d_28std____2____tree_node_b2Fixture__2c_20void____29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = HEAP32[std____2____compressed_pair_std____2____tree_node_b2Fixture__2c_20void____2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______first_5babi_v160004_5d_28_29($0) >> 2], 
 HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 $1 = HEAP32[$2 + 8 >> 2];
 wasm2js_i32$0 = std____2____compressed_pair_std____2____tree_node_b2Fixture__2c_20void____2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______first_5babi_v160004_5d_28_29($0), 
 wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 if (HEAP32[$2 + 4 >> 2]) {
  std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______operator_28_29_5babi_v160004_5d_28std____2____tree_node_b2Fixture__2c_20void____29(std____2____compressed_pair_std____2____tree_node_b2Fixture__2c_20void____2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______second_5babi_v160004_5d_28_29($0), HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 label$2: {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   if (!(HEAP32[$1 + 16 >> 2] != ($2 | 0) & HEAP32[$1 + 20 >> 2] != ($2 | 0))) {
    if (($3 | 0) != 1) {
     break label$2;
    }
    HEAP32[$1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1 + 32 >> 2] = $3;
   label$6: {
    if (HEAP32[$1 + 44 >> 2] == 4) {
     break label$6;
    }
    HEAP16[$1 + 52 >> 1] = 0;
    $0 = HEAP32[$0 + 8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $2, 1, $4);
    if (HEAPU8[$1 + 53 | 0]) {
     HEAP32[$1 + 44 >> 2] = 3;
     if (!HEAPU8[$1 + 52 | 0]) {
      break label$6;
     }
     break label$2;
    }
    HEAP32[$1 + 44 >> 2] = 4;
   }
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
    break label$2;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4);
 }
}

function cosf($0) {
 var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
 $3 = $4 & 2147483647;
 label$1: {
  if ($3 >>> 0 <= 1061752794) {
   $1 = Math_fround(1);
   if ($3 >>> 0 < 964689920) {
    break label$1;
   }
   $1 = __cosdf(+$0);
   break label$1;
  }
  if ($3 >>> 0 <= 1081824209) {
   if ($3 >>> 0 >= 1075235812) {
    $1 = Math_fround(-__cosdf((($4 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + +$0));
    break label$1;
   }
   $5 = +$0;
   if (($4 | 0) < 0) {
    $1 = __sindf($5 + 1.5707963267948966);
    break label$1;
   }
   $1 = __sindf(1.5707963267948966 - $5);
   break label$1;
  }
  if ($3 >>> 0 <= 1088565717) {
   if ($3 >>> 0 >= 1085271520) {
    $1 = __cosdf((($4 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0);
    break label$1;
   }
   if (($4 | 0) < 0) {
    $1 = __sindf(-4.71238898038469 - +$0);
    break label$1;
   }
   $1 = __sindf(+$0 + -4.71238898038469);
   break label$1;
  }
  $1 = Math_fround($0 - $0);
  if ($3 >>> 0 >= 2139095040) {
   break label$1;
  }
  label$9: {
   switch (__rem_pio2f($0, $2 + 8 | 0) & 3) {
   case 0:
    $1 = __cosdf(HEAPF64[$2 + 8 >> 3]);
    break label$1;

   case 1:
    $1 = __sindf(-HEAPF64[$2 + 8 >> 3]);
    break label$1;

   case 2:
    $1 = Math_fround(-__cosdf(HEAPF64[$2 + 8 >> 3]));
    break label$1;

   default:
    break label$9;
   }
  }
  $1 = __sindf(HEAPF64[$2 + 8 >> 3]);
 }
 __stack_pointer = $2 + 16 | 0;
 return $1;
}

function sinf($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
 $2 = $4 & 2147483647;
 label$1: {
  if ($2 >>> 0 <= 1061752794) {
   if ($2 >>> 0 < 964689920) {
    break label$1;
   }
   $0 = __sindf(+$0);
   break label$1;
  }
  if ($2 >>> 0 <= 1081824209) {
   $3 = +$0;
   if ($2 >>> 0 <= 1075235811) {
    if (($4 | 0) < 0) {
     $0 = Math_fround(-__cosdf($3 + 1.5707963267948966));
     break label$1;
    }
    $0 = __cosdf($3 + -1.5707963267948966);
    break label$1;
   }
   $0 = __sindf(-((($4 | 0) >= 0 ? -3.141592653589793 : 3.141592653589793) + $3));
   break label$1;
  }
  if ($2 >>> 0 <= 1088565717) {
   if ($2 >>> 0 <= 1085271519) {
    $3 = +$0;
    if (($4 | 0) < 0) {
     $0 = __cosdf($3 + 4.71238898038469);
     break label$1;
    }
    $0 = Math_fround(-__cosdf($3 + -4.71238898038469));
    break label$1;
   }
   $0 = __sindf((($4 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0);
   break label$1;
  }
  if ($2 >>> 0 >= 2139095040) {
   $0 = Math_fround($0 - $0);
   break label$1;
  }
  label$10: {
   switch (__rem_pio2f($0, $1 + 8 | 0) & 3) {
   case 0:
    $0 = __sindf(HEAPF64[$1 + 8 >> 3]);
    break label$1;

   case 1:
    $0 = __cosdf(HEAPF64[$1 + 8 >> 3]);
    break label$1;

   case 2:
    $0 = __sindf(-HEAPF64[$1 + 8 >> 3]);
    break label$1;

   default:
    break label$10;
   }
  }
  $0 = Math_fround(-__cosdf(HEAPF64[$1 + 8 >> 3]));
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2ContactListener____29_28unsigned_20int_29___invoke_b2ContactListener_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2ContactListener____29_28unsigned_20int_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 480;
 $0 = emscripten__internal__TypeID_b2ContactListener_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListener__2c_20unsigned_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListener__2c_20unsigned_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2ContactListener____emscripten__internal__getContext_void_20_28b2ContactListener____29_28unsigned_20int_29__28void_20_28b2ContactListener____20const__29_28unsigned_20int_29_29_29_28unsigned_20int_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2DynamicTree__CreateProxy_28b2AABB_20const__2c_20void__29($0, $1, $2) {
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 $4 = HEAP32[$3 + 44 >> 2];
 wasm2js_i32$0 = $3, wasm2js_i32$1 = b2DynamicTree__AllocateNode_28_29($4), HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
 b2Vec2__b2Vec2_28float_2c_20float_29($3 + 24 | 0, Math_fround(.10000000149011612), Math_fround(.10000000149011612));
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 16 | 0, HEAP32[$3 + 40 >> 2], $3 + 24 | 0);
 $0 = HEAP32[$3 + 20 >> 2];
 $1 = HEAP32[$3 + 16 >> 2];
 $2 = $1;
 $1 = HEAP32[$4 + 4 >> 2] + Math_imul(HEAP32[$3 + 32 >> 2], 40) | 0;
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $0;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 8 | 0, HEAP32[$3 + 40 >> 2] + 8 | 0, $3 + 24 | 0);
 $1 = HEAP32[$3 + 12 >> 2];
 $0 = HEAP32[$3 + 8 >> 2];
 $2 = $0;
 $0 = HEAP32[$4 + 4 >> 2] + Math_imul(HEAP32[$3 + 32 >> 2], 40) | 0;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[(HEAP32[$4 + 4 >> 2] + Math_imul(HEAP32[$3 + 32 >> 2], 40) | 0) + 16 >> 2] = HEAP32[$3 + 36 >> 2];
 HEAP32[(HEAP32[$4 + 4 >> 2] + Math_imul(HEAP32[$3 + 32 >> 2], 40) | 0) + 32 >> 2] = 0;
 HEAP8[(HEAP32[$4 + 4 >> 2] + Math_imul(HEAP32[$3 + 32 >> 2], 40) | 0) + 36 | 0] = 1;
 b2DynamicTree__InsertLeaf_28int_29($4, HEAP32[$3 + 32 >> 2]);
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 32 >> 2];
}

function void_20emscripten__internal__RegisterClassMethod_b2Fixture__20_28b2Body____29_28b2FixtureDef_20const__29___invoke_b2Body_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Fixture__20_28b2Body____29_28b2FixtureDef_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 580;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2FixtureDef_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2FixtureDef_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Fixture__20_28b2Body____emscripten__internal__getContext_b2Fixture__20_28b2Body____29_28b2FixtureDef_20const__29__28b2Fixture__20_28b2Body____20const__29_28b2FixtureDef_20const__29_29_29_28b2FixtureDef_20const__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2QueryCallback____29_28unsigned_20int_29___invoke_b2QueryCallback_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20bool_20_28b2QueryCallback____29_28unsigned_20int_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 470;
 $0 = emscripten__internal__TypeID_b2QueryCallback_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2QueryCallback__2c_20unsigned_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2QueryCallback__2c_20unsigned_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2QueryCallback____emscripten__internal__getContext_bool_20_28b2QueryCallback____29_28unsigned_20int_29__28bool_20_28b2QueryCallback____20const__29_28unsigned_20int_29_29_29_28unsigned_20int_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function __vfprintf_internal($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = __stack_pointer - 208 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 204 >> 2] = $2;
 __memset($5 + 160 | 0, 0, 40);
 HEAP32[$5 + 200 >> 2] = HEAP32[$5 + 204 >> 2];
 label$1: {
  if ((printf_core(0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4) | 0) < 0) {
   $4 = -1;
   break label$1;
  }
  if (HEAP32[$0 + 76 >> 2] >= 0) {
   $8 = __lockfile($0);
  }
  $6 = HEAP32[$0 >> 2];
  if (HEAP32[$0 + 72 >> 2] <= 0) {
   HEAP32[$0 >> 2] = $6 & -33;
  }
  label$5: {
   label$6: {
    label$7: {
     if (!HEAP32[$0 + 48 >> 2]) {
      HEAP32[$0 + 48 >> 2] = 80;
      HEAP32[$0 + 28 >> 2] = 0;
      HEAP32[$0 + 16 >> 2] = 0;
      HEAP32[$0 + 20 >> 2] = 0;
      $7 = HEAP32[$0 + 44 >> 2];
      HEAP32[$0 + 44 >> 2] = $5;
      break label$7;
     }
     if (HEAP32[$0 + 16 >> 2]) {
      break label$6;
     }
    }
    $2 = -1;
    if (__towrite($0)) {
     break label$5;
    }
   }
   $2 = printf_core($0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4);
  }
  $4 = $6 & 32;
  if ($7) {
   FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
   HEAP32[$0 + 48 >> 2] = 0;
   HEAP32[$0 + 44 >> 2] = $7;
   HEAP32[$0 + 28 >> 2] = 0;
   $3 = HEAP32[$0 + 20 >> 2];
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   $2 = $3 ? $2 : -1;
  }
  $3 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $4 | $3;
  $4 = $3 & 32 ? -1 : $2;
  if (!$8) {
   break label$1;
  }
  __unlockfile($0);
 }
 __stack_pointer = $5 + 208 | 0;
 return $4;
}

function void_20emscripten__internal__RegisterClassMethod_b2Joint__20_28b2World____29_28b2JointDef_20const__29___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Joint__20_28b2World____29_28b2JointDef_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 513;
 $0 = emscripten__internal__TypeID_b2World_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Joint__2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2JointDef_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Joint__2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2JointDef_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Joint__20_28b2World____emscripten__internal__getContext_b2Joint__20_28b2World____29_28b2JointDef_20const__29__28b2Joint__20_28b2World____20const__29_28b2JointDef_20const__29_29_29_28b2JointDef_20const__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2BroadPhase__QueryCallback_28int_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 label$1: {
  if (HEAP32[$2 + 20 >> 2] == HEAP32[$0 + 56 >> 2]) {
   break label$1;
  }
  wasm2js_i32$0 = $2, wasm2js_i32$1 = b2DynamicTree__WasMoved_28int_29_20const($0, HEAP32[$2 + 20 >> 2]) & 1, 
  HEAP8[wasm2js_i32$0 + 19 | 0] = wasm2js_i32$1;
  if (!(!(HEAP8[$2 + 19 | 0] & 1) | HEAP32[$2 + 20 >> 2] <= HEAP32[$0 + 56 >> 2])) {
   break label$1;
  }
  if (HEAP32[$0 + 52 >> 2] == HEAP32[$0 + 48 >> 2]) {
   HEAP32[$2 + 12 >> 2] = HEAP32[$0 + 44 >> 2];
   HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 48 >> 2] + (HEAP32[$0 + 48 >> 2] >> 1);
   wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Alloc_28int_29(HEAP32[$0 + 48 >> 2] << 3), 
   HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
   __memcpy(HEAP32[$0 + 44 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$0 + 52 >> 2] << 3);
   b2Free_28void__29(HEAP32[$2 + 12 >> 2]);
  }
  $1 = int_20b2Min_int__28int_2c_20int_29(HEAP32[$2 + 20 >> 2], HEAP32[$0 + 56 >> 2]);
  HEAP32[HEAP32[$0 + 44 >> 2] + (HEAP32[$0 + 52 >> 2] << 3) >> 2] = $1;
  $1 = int_20b2Max_int__28int_2c_20int_29(HEAP32[$2 + 20 >> 2], HEAP32[$0 + 56 >> 2]);
  HEAP32[(HEAP32[$0 + 44 >> 2] + (HEAP32[$0 + 52 >> 2] << 3) | 0) + 4 >> 2] = $1;
  HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 52 >> 2] + 1;
 }
 HEAP8[$2 + 31 | 0] = 1;
 __stack_pointer = $2 + 32 | 0;
 return HEAP8[$2 + 31 | 0] & 1;
}

function emscripten__value_object_b2Filter___20emscripten__value_object_b2Filter___field_b2Filter_2c_20unsigned_20short__28char_20const__2c_20unsigned_20short_20b2Filter____29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 20 >> 2] = $0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = HEAP32[$3 + 20 >> 2];
 HEAP32[$3 + 8 >> 2] = 466;
 HEAP32[$3 + 4 >> 2] = 467;
 $1 = emscripten__internal__TypeID_b2Filter_2c_20void___get_28_29();
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = emscripten__internal__TypeID_unsigned_20short_2c_20void___get_28_29();
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 8 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$3 + 8 >> 2];
 $7 = unsigned_20short_20b2Filter_____20emscripten__internal__getContext_unsigned_20short_20b2Filter_____28unsigned_20short_20b2Filter____20const__29($3 + 12 | 0);
 $8 = emscripten__internal__TypeID_unsigned_20short_2c_20void___get_28_29();
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
 _embind_register_value_object_field($1 | 0, $2 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$3 + 4 >> 2], unsigned_20short_20b2Filter_____20emscripten__internal__getContext_unsigned_20short_20b2Filter_____28unsigned_20short_20b2Filter____20const__29($3 + 12 | 0) | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function emscripten__internal__WireTypePack_unsigned_20int__2c_20unsigned_20int____WireTypePack_28unsigned_20int__2c_20unsigned_20int__29($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 $0 = HEAP32[$3 + 24 >> 2];
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__array_emscripten__internal__GenericWireType_2c_202ul___data_5babi_v160004_5d_28_29($0), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 $1 = HEAP32[$3 + 20 >> 2];
 $2 = HEAP32[$3 + 16 >> 2];
 HEAP32[$3 + 36 >> 2] = $3 + 12;
 HEAP32[$3 + 32 >> 2] = $1;
 HEAP32[$3 + 28 >> 2] = $2;
 void_20emscripten__internal__writeGenericWireType_unsigned_20int__28emscripten__internal__GenericWireType___2c_20unsigned_20int_29(HEAP32[$3 + 36 >> 2], emscripten__internal__BindingType_unsigned_20int_2c_20void___toWireType_28unsigned_20int_20const__29(HEAP32[$3 + 32 >> 2]));
 $1 = HEAP32[$3 + 28 >> 2];
 HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 36 >> 2];
 HEAP32[$3 + 40 >> 2] = $1;
 void_20emscripten__internal__writeGenericWireType_unsigned_20int__28emscripten__internal__GenericWireType___2c_20unsigned_20int_29(HEAP32[$3 + 44 >> 2], emscripten__internal__BindingType_unsigned_20int_2c_20void___toWireType_28unsigned_20int_20const__29(HEAP32[$3 + 40 >> 2]));
 emscripten__internal__writeGenericWireTypes_28emscripten__internal__GenericWireType___29(HEAP32[$3 + 44 >> 2]);
 __stack_pointer = $3 + 48 | 0;
 return $0;
}

function emscripten__internal__MethodInvoker_void_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28unsigned_20long_2c_20int_20const__29_2c_20void_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const____invoke_28void_20_28std____2__vector_int_2c_20std____2__allocator_int______20const__29_28unsigned_20long_2c_20int_20const__29_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 $2 = emscripten__internal__BindingType_std____2__vector_int_2c_20std____2__allocator_int____2c_20void___fromWireType_28std____2__vector_int_2c_20std____2__allocator_int____29(HEAP32[$4 + 24 >> 2]);
 $0 = HEAP32[$4 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $1 = emscripten__internal__BindingType_unsigned_20long_2c_20void___fromWireType_28unsigned_20long_29(HEAP32[$4 + 20 >> 2]);
 wasm2js_i32$0 = $4, wasm2js_i32$1 = emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$4 + 16 >> 2]), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 FUNCTION_TABLE[$0 | 0]($2, $1, $4 + 12 | 0);
 __stack_pointer = $4 + 32 | 0;
}

function b2RevoluteJoint__b2RevoluteJoint_28b2RevoluteJointDef_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Joint__b2Joint_28b2JointDef_20const__29($1, HEAP32[$2 + 8 >> 2]);
 HEAP32[$1 >> 2] = 19416;
 b2Vec2__b2Vec2_28_29($1 + 68 | 0);
 b2Vec2__b2Vec2_28_29($1 + 76 | 0);
 b2Vec3__b2Vec3_28_29($1 + 84 | 0);
 b2Vec2__b2Vec2_28_29($1 + 136 | 0);
 b2Vec2__b2Vec2_28_29($1 + 144 | 0);
 b2Vec2__b2Vec2_28_29($1 + 152 | 0);
 b2Vec2__b2Vec2_28_29($1 + 160 | 0);
 b2Mat33__b2Mat33_28_29($1 + 184 | 0);
 $3 = HEAP32[$2 + 8 >> 2];
 $4 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$1 + 68 >> 2] = $4;
 HEAP32[$1 + 72 >> 2] = $0;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 $4 = HEAP32[$3 + 32 >> 2];
 HEAP32[$1 + 76 >> 2] = $0;
 HEAP32[$1 + 80 >> 2] = $4;
 HEAPF32[$1 + 116 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 36 >> 2];
 b2Vec3__SetZero_28_29($1 + 84 | 0);
 HEAPF32[$1 + 96 >> 2] = 0;
 HEAPF32[$1 + 120 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 44 >> 2];
 HEAPF32[$1 + 124 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 48 >> 2];
 HEAPF32[$1 + 104 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 60 >> 2];
 HEAPF32[$1 + 108 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 56 >> 2];
 HEAP8[$1 + 112 | 0] = HEAP8[HEAP32[$2 + 8 >> 2] + 40 | 0] & 1;
 HEAP8[$1 + 100 | 0] = HEAP8[HEAP32[$2 + 8 >> 2] + 52 | 0] & 1;
 HEAP32[$1 + 224 >> 2] = 0;
 __stack_pointer = $2 + 16 | 0;
 return $1;
}

function emscripten__internal__MethodInvoker_void_20_28b2PolygonShape____29_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29_2c_20void_2c_20b2PolygonShape__2c_20float_2c_20float_2c_20b2Vec2_20const__2c_20float___invoke_28void_20_28b2PolygonShape____20const__29_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29_2c_20b2PolygonShape__2c_20float_2c_20float_2c_20b2Vec2__2c_20float_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = Math_fround($3);
 $4 = $4 | 0;
 $5 = Math_fround($5);
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAPF32[$6 + 20 >> 2] = $2;
 HEAPF32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAPF32[$6 + 8 >> 2] = $5;
 $4 = emscripten__internal__BindingType_b2PolygonShape__2c_20void___fromWireType_28b2PolygonShape__29(HEAP32[$6 + 24 >> 2]);
 $0 = HEAP32[$6 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$6 + 20 >> 2]), emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$6 + 16 >> 2]), emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$6 + 12 >> 2]), emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$6 + 8 >> 2]));
 __stack_pointer = $6 + 32 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const__29_2c_20void_2c_20b2Draw__2c_20b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const____invoke_28void_20_28b2Draw____20const__29_28b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const__29_2c_20b2Draw__2c_20b2Vec2__2c_20float_2c_20b2Vec2__2c_20b2Color__29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAPF32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 $2 = emscripten__internal__BindingType_b2Draw__2c_20void___fromWireType_28b2Draw__29(HEAP32[$6 + 24 >> 2]);
 $0 = HEAP32[$6 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$6 + 20 >> 2]), emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$6 + 16 >> 2]), emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$6 + 12 >> 2]), emscripten__internal__GenericBindingType_b2Color___fromWireType_28b2Color__29(HEAP32[$6 + 8 >> 2]));
 __stack_pointer = $6 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Fixture____29_28b2MassData__29_20const___invoke_b2Fixture_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Fixture____29_28b2MassData__29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 574;
 $0 = emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20b2MassData____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20b2MassData____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Fixture____emscripten__internal__getContext_void_20_28b2Fixture____29_28b2MassData__29_20const__28void_20_28b2Fixture____20const__29_28b2MassData__29_20const_29_29_28b2MassData__29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_bool_20_28b2Fixture____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int_29_20const_2c_20bool_2c_20b2Fixture_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int___invoke_28bool_20_28b2Fixture____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int_29_20const_2c_20b2Fixture_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput__2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $2 = emscripten__internal__BindingType_b2Fixture_20const__2c_20void___fromWireType_28b2Fixture_20const__29(HEAP32[$5 + 24 >> 2]);
 $0 = HEAP32[$5 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2RayCastOutput__2c_20void___fromWireType_28b2RayCastOutput__29(HEAP32[$5 + 20 >> 2]), emscripten__internal__GenericBindingType_b2RayCastInput___fromWireType_28b2RayCastInput__29(HEAP32[$5 + 16 >> 2]), emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$5 + 12 >> 2])) & 1);
 __stack_pointer = $5 + 32 | 0;
 return $0 & 1;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2ContactListenerWrapper____29_28unsigned_20int_29___invoke_b2ContactListener__28char_20const__2c_20void_20_28b2ContactListenerWrapper____29_28unsigned_20int_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 482;
 $0 = emscripten__internal__TypeID_b2ContactListenerWrapper_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper__2c_20unsigned_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper__2c_20unsigned_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2ContactListenerWrapper____emscripten__internal__getContext_void_20_28b2ContactListenerWrapper____29_28unsigned_20int_29__28void_20_28b2ContactListenerWrapper____20const__29_28unsigned_20int_29_29_29_28unsigned_20int_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2ContactListenerWrapper____29_28unsigned_20int_29___invoke_b2ContactListener__28char_20const__2c_20bool_20_28b2ContactListenerWrapper____29_28unsigned_20int_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 483;
 $0 = emscripten__internal__TypeID_b2ContactListenerWrapper_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper__2c_20unsigned_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper__2c_20unsigned_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2ContactListenerWrapper____emscripten__internal__getContext_bool_20_28b2ContactListenerWrapper____29_28unsigned_20int_29__28bool_20_28b2ContactListenerWrapper____20const__29_28unsigned_20int_29_29_29_28unsigned_20int_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Body__20_28b2World____29_28b2BodyDef_20const__29___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Body__20_28b2World____29_28b2BodyDef_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 511;
 $0 = emscripten__internal__TypeID_b2World_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2BodyDef_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2BodyDef_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Body__20_28b2World____emscripten__internal__getContext_b2Body__20_28b2World____29_28b2BodyDef_20const__29__28b2Body__20_28b2World____20const__29_28b2BodyDef_20const__29_29_29_28b2BodyDef_20const__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______lower_bound_b2Fixture___28b2Fixture__20const__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20std____2____tree_end_node_std____2____tree_node_base_void______29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 while (1) {
  if (HEAP32[$4 + 16 >> 2]) {
   if (!(std____2__less_b2Fixture____operator_28_29_5babi_v160004_5d_28b2Fixture__20const__2c_20b2Fixture__20const__29_20const(std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____value_comp_5babi_v160004_5d_28_29($0), HEAP32[$4 + 16 >> 2] + 16 | 0, HEAP32[$4 + 20 >> 2]) & 1)) {
    HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 16 >> 2];
    HEAP32[$4 + 16 >> 2] = HEAP32[HEAP32[$4 + 16 >> 2] >> 2];
    continue;
   }
   HEAP32[$4 + 16 >> 2] = HEAP32[HEAP32[$4 + 16 >> 2] + 4 >> 2];
   continue;
  }
  break;
 }
 std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long_____tree_iterator_5babi_v160004_5d_28std____2____tree_end_node_std____2____tree_node_base_void______29($4 + 28 | 0, HEAP32[$4 + 12 >> 2]);
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function emscripten__value_object_b2RayCastOutput___20emscripten__value_object_b2RayCastOutput___field_b2RayCastOutput_2c_20b2Vec2__28char_20const__2c_20b2Vec2_20b2RayCastOutput____29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 20 >> 2] = $0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = HEAP32[$3 + 20 >> 2];
 HEAP32[$3 + 8 >> 2] = 454;
 HEAP32[$3 + 4 >> 2] = 455;
 $1 = emscripten__internal__TypeID_b2RayCastOutput_2c_20void___get_28_29();
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 8 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$3 + 8 >> 2];
 $7 = b2Vec2_20b2RayCastOutput_____20emscripten__internal__getContext_b2Vec2_20b2RayCastOutput_____28b2Vec2_20b2RayCastOutput____20const__29($3 + 12 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
 _embind_register_value_object_field($1 | 0, $2 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$3 + 4 >> 2], b2Vec2_20b2RayCastOutput_____20emscripten__internal__getContext_b2Vec2_20b2RayCastOutput_____28b2Vec2_20b2RayCastOutput____20const__29($3 + 12 | 0) | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function b2Body__SynchronizeFixtures_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $2 = HEAP32[$1 + 44 >> 2];
 HEAP32[$1 + 40 >> 2] = HEAP32[$2 + 88 >> 2] + 102868;
 label$1: {
  if (HEAPU16[$2 + 4 >> 1] & 2) {
   b2Transform__b2Transform_28_29($1 + 24 | 0);
   b2Rot__Set_28float_29($1 + 32 | 0, HEAPF32[$2 + 52 >> 2]);
   b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($1 + 8 | 0, $1 + 32 | 0, $2 + 28 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 16 | 0, $2 + 36 | 0, $1 + 8 | 0);
   $3 = HEAP32[$1 + 20 >> 2];
   $0 = HEAP32[$1 + 16 >> 2];
   $4 = $0;
   $0 = $1 + 24 | 0;
   HEAP32[$0 >> 2] = $4;
   HEAP32[$0 + 4 >> 2] = $3;
   HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 100 >> 2];
   while (1) {
    if (HEAP32[$1 + 4 >> 2]) {
     b2Fixture__Synchronize_28b2BroadPhase__2c_20b2Transform_20const__2c_20b2Transform_20const__29(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 40 >> 2], $1 + 24 | 0, $2 + 12 | 0);
     HEAP32[$1 + 4 >> 2] = HEAP32[HEAP32[$1 + 4 >> 2] + 4 >> 2];
     continue;
    }
    break;
   }
   break label$1;
  }
  HEAP32[$1 >> 2] = HEAP32[$2 + 100 >> 2];
  while (1) {
   if (HEAP32[$1 >> 2]) {
    b2Fixture__Synchronize_28b2BroadPhase__2c_20b2Transform_20const__2c_20b2Transform_20const__29(HEAP32[$1 >> 2], HEAP32[$1 + 40 >> 2], $2 + 12 | 0, $2 + 12 | 0);
    HEAP32[$1 >> 2] = HEAP32[HEAP32[$1 >> 2] + 4 >> 2];
    continue;
   }
   break;
  }
 }
 __stack_pointer = $1 + 48 | 0;
}

function std____2____compressed_pair_std____2____tree_node_b2Fixture__2c_20void____2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_________compressed_pair_5babi_v160004_5d_std____2____tree_node_b2Fixture__2c_20void_____2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______28std____2____tree_node_b2Fixture__2c_20void_____2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_std____2____tree_node_b2Fixture__2c_20void____2c_200_2c_20false_____compressed_pair_elem_5babi_v160004_5d_std____2____tree_node_b2Fixture__2c_20void_____2c_20void__28std____2____tree_node_b2Fixture__2c_20void_____29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_201_2c_20false_____compressed_pair_elem_5babi_v160004_5d_std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_20void__28std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______29($0 + 4 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function emscripten__internal__FunctionInvoker_bool_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const__29_2c_20bool_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const____invoke_28bool_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const__29_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 $0 = HEAP32[HEAP32[$4 + 28 >> 2] >> 2];
 $1 = emscripten__internal__GenericBindingType_std____2__vector_int_2c_20std____2__allocator_int_____fromWireType_28std____2__vector_int_2c_20std____2__allocator_int____29(HEAP32[$4 + 24 >> 2]);
 $2 = emscripten__internal__BindingType_unsigned_20long_2c_20void___fromWireType_28unsigned_20long_29(HEAP32[$4 + 20 >> 2]);
 wasm2js_i32$0 = $4, wasm2js_i32$1 = emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$4 + 16 >> 2]), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($1, $2, $4 + 12 | 0) & 1);
 __stack_pointer = $4 + 32 | 0;
 return $0 & 1;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Draw____29_28b2Transform_20const__29___invoke_b2Draw_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Draw____29_28b2Transform_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 494;
 $0 = emscripten__internal__TypeID_b2Draw_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Transform_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Transform_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Draw____emscripten__internal__getContext_void_20_28b2Draw____29_28b2Transform_20const__29__28void_20_28b2Draw____20const__29_28b2Transform_20const__29_29_29_28b2Transform_20const__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__value_object_b2RayCastOutput___20emscripten__value_object_b2RayCastOutput___field_b2RayCastOutput_2c_20float__28char_20const__2c_20float_20b2RayCastOutput____29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 20 >> 2] = $0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = HEAP32[$3 + 20 >> 2];
 HEAP32[$3 + 8 >> 2] = 456;
 HEAP32[$3 + 4 >> 2] = 457;
 $1 = emscripten__internal__TypeID_b2RayCastOutput_2c_20void___get_28_29();
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 8 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$3 + 8 >> 2];
 $7 = float_20b2RayCastOutput_____20emscripten__internal__getContext_float_20b2RayCastOutput_____28float_20b2RayCastOutput____20const__29($3 + 12 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
 _embind_register_value_object_field($1 | 0, $2 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$3 + 4 >> 2], float_20b2RayCastOutput_____20emscripten__internal__getContext_float_20b2RayCastOutput_____28float_20b2RayCastOutput____20const__29($3 + 12 | 0) | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function b2Contact__b2Contact_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $0 = HEAP32[$5 + 28 >> 2];
 HEAP32[$0 >> 2] = 18520;
 b2Manifold__b2Manifold_28_29($0 - -64 | 0);
 HEAP32[$0 + 4 >> 2] = 4;
 HEAP32[$0 + 48 >> 2] = HEAP32[$5 + 24 >> 2];
 HEAP32[$0 + 52 >> 2] = HEAP32[$5 + 16 >> 2];
 HEAP32[$0 + 56 >> 2] = HEAP32[$5 + 20 >> 2];
 HEAP32[$0 + 60 >> 2] = HEAP32[$5 + 12 >> 2];
 HEAP32[$0 + 124 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 128 >> 2] = 0;
 wasm2js_i32$0 = $0, wasm2js_f32$0 = b2MixFriction_28float_2c_20float_29(HEAPF32[HEAP32[$0 + 48 >> 2] + 16 >> 2], HEAPF32[HEAP32[$0 + 52 >> 2] + 16 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 136 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $0, wasm2js_f32$0 = b2MixRestitution_28float_2c_20float_29(HEAPF32[HEAP32[$0 + 48 >> 2] + 20 >> 2], HEAPF32[HEAP32[$0 + 52 >> 2] + 20 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 140 >> 2] = wasm2js_f32$0;
 HEAPF32[$0 + 144 >> 2] = 0;
 __stack_pointer = $5 + 32 | 0;
 return $0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28b2ContactListener__29___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2World____29_28b2ContactListener__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 508;
 $0 = emscripten__internal__TypeID_b2World_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2ContactListener____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2ContactListener____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28b2ContactListener__29__28void_20_28b2World____20const__29_28b2ContactListener__29_29_29_28b2ContactListener__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28b2MassData__29_20const___invoke_b2Body_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Body____29_28b2MassData__29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 592;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const__2c_20b2MassData____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const__2c_20b2MassData____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28b2MassData__29_20const__28void_20_28b2Body____20const__29_28b2MassData__29_20const_29_29_28b2MassData__29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__value_object_b2RayCastInput___20emscripten__value_object_b2RayCastInput___field_b2RayCastInput_2c_20b2Vec2__28char_20const__2c_20b2Vec2_20b2RayCastInput____29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 20 >> 2] = $0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = HEAP32[$3 + 20 >> 2];
 HEAP32[$3 + 8 >> 2] = 448;
 HEAP32[$3 + 4 >> 2] = 449;
 $1 = emscripten__internal__TypeID_b2RayCastInput_2c_20void___get_28_29();
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 8 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$3 + 8 >> 2];
 $7 = b2Vec2_20b2RayCastInput_____20emscripten__internal__getContext_b2Vec2_20b2RayCastInput_____28b2Vec2_20b2RayCastInput____20const__29($3 + 12 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
 _embind_register_value_object_field($1 | 0, $2 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$3 + 4 >> 2], b2Vec2_20b2RayCastInput_____20emscripten__internal__getContext_b2Vec2_20b2RayCastInput_____28b2Vec2_20b2RayCastInput____20const__29($3 + 12 | 0) | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function emscripten__value_object_b2RayCastInput___20emscripten__value_object_b2RayCastInput___field_b2RayCastInput_2c_20float__28char_20const__2c_20float_20b2RayCastInput____29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 20 >> 2] = $0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = HEAP32[$3 + 20 >> 2];
 HEAP32[$3 + 8 >> 2] = 450;
 HEAP32[$3 + 4 >> 2] = 451;
 $1 = emscripten__internal__TypeID_b2RayCastInput_2c_20void___get_28_29();
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 8 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$3 + 8 >> 2];
 $7 = float_20b2RayCastInput_____20emscripten__internal__getContext_float_20b2RayCastInput_____28float_20b2RayCastInput____20const__29($3 + 12 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
 _embind_register_value_object_field($1 | 0, $2 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$3 + 4 >> 2], float_20b2RayCastInput_____20emscripten__internal__getContext_float_20b2RayCastInput_____28float_20b2RayCastInput____20const__29($3 + 12 | 0) | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2PrismaticJoint____29_28float_2c_20float_29___invoke_b2PrismaticJoint__28char_20const__2c_20void_20_28b2PrismaticJoint____29_28float_2c_20float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 651;
 $0 = emscripten__internal__TypeID_b2PrismaticJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20float_2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20float_2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2PrismaticJoint____emscripten__internal__getContext_void_20_28b2PrismaticJoint____29_28float_2c_20float_29__28void_20_28b2PrismaticJoint____20const__29_28float_2c_20float_29_29_29_28float_2c_20float_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2RevoluteJoint____29_28float_2c_20float_29___invoke_b2RevoluteJoint__28char_20const__2c_20void_20_28b2RevoluteJoint____29_28float_2c_20float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 664;
 $0 = emscripten__internal__TypeID_b2RevoluteJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20float_2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20float_2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2RevoluteJoint____emscripten__internal__getContext_void_20_28b2RevoluteJoint____29_28float_2c_20float_29__28void_20_28b2RevoluteJoint____20const__29_28float_2c_20float_29_29_29_28float_2c_20float_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2PrismaticJoint____29_28_29_20const___invoke_b2PrismaticJoint__28char_20const__2c_20b2Vec2_20const__20_28b2PrismaticJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 647;
 $0 = emscripten__internal__TypeID_b2PrismaticJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Vec2_20const__20_28b2PrismaticJoint____emscripten__internal__getContext_b2Vec2_20const__20_28b2PrismaticJoint____29_28_29_20const__28b2Vec2_20const__20_28b2PrismaticJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20std____2____tree_left_rotate_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] >> 2];
 if (HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) {
  std____2____tree_node_base_void______set_parent_5babi_v160004_5d_28std____2____tree_node_base_void____29(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2], HEAP32[$1 + 12 >> 2]);
 }
 HEAP32[HEAP32[$1 + 8 >> 2] + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
 label$2: {
  if (bool_20std____2____tree_is_left_child_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$1 + 12 >> 2]) & 1) {
   HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] >> 2] = HEAP32[$1 + 8 >> 2];
   break label$2;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  wasm2js_i32$0 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]), 
  wasm2js_i32$1 = $0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 }
 HEAP32[HEAP32[$1 + 8 >> 2] >> 2] = HEAP32[$1 + 12 >> 2];
 std____2____tree_node_base_void______set_parent_5babi_v160004_5d_28std____2____tree_node_base_void____29(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2PolygonShape____29_28float_2c_20float_29___invoke_b2PolygonShape__28char_20const__2c_20void_20_28b2PolygonShape____29_28float_2c_20float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 558;
 $0 = emscripten__internal__TypeID_b2PolygonShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape__2c_20float_2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape__2c_20float_2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2PolygonShape____emscripten__internal__getContext_void_20_28b2PolygonShape____29_28float_2c_20float_29__28void_20_28b2PolygonShape____20const__29_28float_2c_20float_29_29_29_28float_2c_20float_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__value_object_b2Transform___20emscripten__value_object_b2Transform___field_b2Transform_2c_20b2Vec2__28char_20const__2c_20b2Vec2_20b2Transform____29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 20 >> 2] = $0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = HEAP32[$3 + 20 >> 2];
 HEAP32[$3 + 8 >> 2] = 438;
 HEAP32[$3 + 4 >> 2] = 439;
 $1 = emscripten__internal__TypeID_b2Transform_2c_20void___get_28_29();
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 8 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$3 + 8 >> 2];
 $7 = b2Vec2_20b2Transform_____20emscripten__internal__getContext_b2Vec2_20b2Transform_____28b2Vec2_20b2Transform____20const__29($3 + 12 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
 _embind_register_value_object_field($1 | 0, $2 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$3 + 4 >> 2], b2Vec2_20b2Transform_____20emscripten__internal__getContext_b2Vec2_20b2Transform_____28b2Vec2_20b2Transform____20const__29($3 + 12 | 0) | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function b2DistanceJoint__Dump_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 144 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 140 >> 2] = $0;
 $0 = HEAP32[$1 + 140 >> 2];
 HEAP32[$1 + 136 >> 2] = HEAP32[HEAP32[$0 + 48 >> 2] + 8 >> 2];
 HEAP32[$1 + 132 >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] + 8 >> 2];
 b2Log_28char_20const__2c_20____29(13519, 0);
 HEAP32[$1 + 96 >> 2] = HEAP32[$1 + 136 >> 2];
 b2Log_28char_20const__2c_20____29(13733, $1 + 96 | 0);
 HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 132 >> 2];
 b2Log_28char_20const__2c_20____29(13707, $1 + 80 | 0);
 HEAP32[$1 + 64 >> 2] = HEAP8[$0 + 61 | 0] & 1;
 b2Log_28char_20const__2c_20____29(14923, $1 - -64 | 0);
 $2 = HEAPF32[$0 + 80 >> 2];
 HEAPF64[$1 + 56 >> 3] = HEAPF32[$0 + 84 >> 2];
 HEAPF64[$1 + 48 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14234, $1 + 48 | 0);
 $2 = HEAPF32[$0 + 88 >> 2];
 HEAPF64[$1 + 40 >> 3] = HEAPF32[$0 + 92 >> 2];
 HEAPF64[$1 + 32 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14109, $1 + 32 | 0);
 HEAPF64[$1 + 16 >> 3] = HEAPF32[$0 + 104 >> 2];
 b2Log_28char_20const__2c_20____29(12778, $1 + 16 | 0);
 HEAPF64[$1 >> 3] = HEAPF32[$0 + 68 >> 2];
 b2Log_28char_20const__2c_20____29(12413, $1);
 HEAPF64[$1 + 112 >> 3] = HEAPF32[$0 + 72 >> 2];
 b2Log_28char_20const__2c_20____29(12621, $1 + 112 | 0);
 HEAP32[$1 + 128 >> 2] = HEAP32[$0 + 56 >> 2];
 b2Log_28char_20const__2c_20____29(14524, $1 + 128 | 0);
 __stack_pointer = $1 + 144 | 0;
}

function b2Contact__AddType_28b2Contact__20_28__29_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29_2c_20void_20_28__29_28b2Contact__2c_20b2BlockAllocator__29_2c_20b2Shape__Type_2c_20b2Shape__Type_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 if (!(HEAP32[$4 + 4 >> 2] < 4 & HEAP32[$4 + 4 >> 2] >= 0)) {
  __assert_fail(2372, 5174, 58, 9120);
  wasm2js_trap();
 }
 if (!(HEAP32[$4 >> 2] < 4 & HEAP32[$4 >> 2] >= 0)) {
  __assert_fail(2329, 5174, 59, 9120);
  wasm2js_trap();
 }
 HEAP32[(Math_imul(HEAP32[$4 + 4 >> 2], 48) + 30672 | 0) + Math_imul(HEAP32[$4 >> 2], 12) >> 2] = HEAP32[$4 + 12 >> 2];
 HEAP32[((Math_imul(HEAP32[$4 + 4 >> 2], 48) + 30672 | 0) + Math_imul(HEAP32[$4 >> 2], 12) | 0) + 4 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP8[((Math_imul(HEAP32[$4 + 4 >> 2], 48) + 30672 | 0) + Math_imul(HEAP32[$4 >> 2], 12) | 0) + 8 | 0] = 1;
 if (HEAP32[$4 + 4 >> 2] != HEAP32[$4 >> 2]) {
  HEAP32[(Math_imul(HEAP32[$4 >> 2], 48) + 30672 | 0) + Math_imul(HEAP32[$4 + 4 >> 2], 12) >> 2] = HEAP32[$4 + 12 >> 2];
  HEAP32[((Math_imul(HEAP32[$4 >> 2], 48) + 30672 | 0) + Math_imul(HEAP32[$4 + 4 >> 2], 12) | 0) + 4 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP8[((Math_imul(HEAP32[$4 >> 2], 48) + 30672 | 0) + Math_imul(HEAP32[$4 + 4 >> 2], 12) | 0) + 8 | 0] = 0;
 }
 __stack_pointer = $4 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28b2Vec2_20const__2c_20float_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28b2Vec2_20const__2c_20float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 583;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28b2Vec2_20const__2c_20float_29__28void_20_28b2Body____20const__29_28b2Vec2_20const__2c_20float_29_29_29_28b2Vec2_20const__2c_20float_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2RevoluteJoint____29_28_29_20const___invoke_b2RevoluteJoint__28char_20const__2c_20b2Vec2_20const__20_28b2RevoluteJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 660;
 $0 = emscripten__internal__TypeID_b2RevoluteJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Vec2_20const__20_28b2RevoluteJoint____emscripten__internal__getContext_b2Vec2_20const__20_28b2RevoluteJoint____29_28_29_20const__28b2Vec2_20const__20_28b2RevoluteJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2DistanceJoint____29_28_29_20const___invoke_b2DistanceJoint__28char_20const__2c_20b2Vec2_20const__20_28b2DistanceJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 618;
 $0 = emscripten__internal__TypeID_b2DistanceJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Vec2_20const__20_28b2DistanceJoint____emscripten__internal__getContext_b2Vec2_20const__20_28b2DistanceJoint____29_28_29_20const__28b2Vec2_20const__20_28b2DistanceJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20std____2____tree_right_rotate_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2];
 if (HEAP32[HEAP32[$1 + 12 >> 2] >> 2]) {
  std____2____tree_node_base_void______set_parent_5babi_v160004_5d_28std____2____tree_node_base_void____29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2], HEAP32[$1 + 12 >> 2]);
 }
 HEAP32[HEAP32[$1 + 8 >> 2] + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
 label$2: {
  if (bool_20std____2____tree_is_left_child_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$1 + 12 >> 2]) & 1) {
   HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] >> 2] = HEAP32[$1 + 8 >> 2];
   break label$2;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  wasm2js_i32$0 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]), 
  wasm2js_i32$1 = $0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 }
 HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2] = HEAP32[$1 + 12 >> 2];
 std____2____tree_node_base_void______set_parent_5babi_v160004_5d_28std____2____tree_node_base_void____29(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28b2PrismaticJoint____29_28float_29_20const___invoke_b2PrismaticJoint__28char_20const__2c_20float_20_28b2PrismaticJoint____29_28float_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 653;
 $0 = emscripten__internal__TypeID_b2PrismaticJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28b2PrismaticJoint____emscripten__internal__getContext_float_20_28b2PrismaticJoint____29_28float_29_20const__28float_20_28b2PrismaticJoint____20const__29_28float_29_20const_29_29_28float_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2WeldJoint__Dump_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 144 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 140 >> 2] = $0;
 $0 = HEAP32[$1 + 140 >> 2];
 HEAP32[$1 + 136 >> 2] = HEAP32[HEAP32[$0 + 48 >> 2] + 8 >> 2];
 HEAP32[$1 + 132 >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] + 8 >> 2];
 b2Log_28char_20const__2c_20____29(13545, 0);
 HEAP32[$1 + 96 >> 2] = HEAP32[$1 + 136 >> 2];
 b2Log_28char_20const__2c_20____29(13733, $1 + 96 | 0);
 HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 132 >> 2];
 b2Log_28char_20const__2c_20____29(13707, $1 + 80 | 0);
 HEAP32[$1 + 64 >> 2] = HEAP8[$0 + 61 | 0] & 1;
 b2Log_28char_20const__2c_20____29(14923, $1 - -64 | 0);
 $2 = HEAPF32[$0 + 80 >> 2];
 HEAPF64[$1 + 56 >> 3] = HEAPF32[$0 + 84 >> 2];
 HEAPF64[$1 + 48 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14234, $1 + 48 | 0);
 $2 = HEAPF32[$0 + 88 >> 2];
 HEAPF64[$1 + 40 >> 3] = HEAPF32[$0 + 92 >> 2];
 HEAPF64[$1 + 32 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14109, $1 + 32 | 0);
 HEAPF64[$1 + 16 >> 3] = HEAPF32[$0 + 96 >> 2];
 b2Log_28char_20const__2c_20____29(13030, $1 + 16 | 0);
 HEAPF64[$1 >> 3] = HEAPF32[$0 + 68 >> 2];
 b2Log_28char_20const__2c_20____29(12413, $1);
 HEAPF64[$1 + 112 >> 3] = HEAPF32[$0 + 72 >> 2];
 b2Log_28char_20const__2c_20____29(12621, $1 + 112 | 0);
 HEAP32[$1 + 128 >> 2] = HEAP32[$0 + 56 >> 2];
 b2Log_28char_20const__2c_20____29(14524, $1 + 128 | 0);
 __stack_pointer = $1 + 144 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28float_2c_20int_2c_20int_29___invoke_b2World__28char_20const__2c_20void_20_28b2World____29_28float_2c_20int_2c_20int_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 515;
 $0 = emscripten__internal__TypeID_b2World_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20float_2c_20int_2c_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20float_2c_20int_2c_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28float_2c_20int_2c_20int_29__28void_20_28b2World____20const__29_28float_2c_20int_2c_20int_29_29_29_28float_2c_20int_2c_20int_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Fixture____29_28b2Vec2_20const__29_20const___invoke_b2Fixture__28char_20const__2c_20bool_20_28b2Fixture____29_28b2Vec2_20const__29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 572;
 $0 = emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20b2Vec2_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20b2Vec2_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2Fixture____emscripten__internal__getContext_bool_20_28b2Fixture____29_28b2Vec2_20const__29_20const__28bool_20_28b2Fixture____20const__29_28b2Vec2_20const__29_20const_29_29_28b2Vec2_20const__29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__value_object_b2Transform___20emscripten__value_object_b2Transform___field_b2Transform_2c_20b2Rot__28char_20const__2c_20b2Rot_20b2Transform____29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 20 >> 2] = $0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = HEAP32[$3 + 20 >> 2];
 HEAP32[$3 + 8 >> 2] = 440;
 HEAP32[$3 + 4 >> 2] = 441;
 $1 = emscripten__internal__TypeID_b2Transform_2c_20void___get_28_29();
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = emscripten__internal__TypeID_b2Rot_2c_20void___get_28_29();
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 8 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$3 + 8 >> 2];
 $7 = b2Rot_20b2Transform_____20emscripten__internal__getContext_b2Rot_20b2Transform_____28b2Rot_20b2Transform____20const__29($3 + 12 | 0);
 $8 = emscripten__internal__TypeID_b2Rot_2c_20void___get_28_29();
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
 _embind_register_value_object_field($1 | 0, $2 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$3 + 4 >> 2], b2Rot_20b2Transform_____20emscripten__internal__getContext_b2Rot_20b2Transform_____28b2Rot_20b2Transform____20const__29($3 + 12 | 0) | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function emscripten__value_object_b2MassData___20emscripten__value_object_b2MassData___field_b2MassData_2c_20b2Vec2__28char_20const__2c_20b2Vec2_20b2MassData____29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 20 >> 2] = $0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = HEAP32[$3 + 20 >> 2];
 HEAP32[$3 + 8 >> 2] = 462;
 HEAP32[$3 + 4 >> 2] = 463;
 $1 = emscripten__internal__TypeID_b2MassData_2c_20void___get_28_29();
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 8 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$3 + 8 >> 2];
 $7 = b2Vec2_20b2MassData_____20emscripten__internal__getContext_b2Vec2_20b2MassData_____28b2Vec2_20b2MassData____20const__29($3 + 12 | 0);
 $8 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
 _embind_register_value_object_field($1 | 0, $2 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$3 + 4 >> 2], b2Vec2_20b2MassData_____20emscripten__internal__getContext_b2Vec2_20b2MassData_____28b2Vec2_20b2MassData____20const__29($3 + 12 | 0) | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28b2Vec2_20const__2c_20bool_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28b2Vec2_20const__2c_20bool_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 590;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20bool___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20bool___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28b2Vec2_20const__2c_20bool_29__28void_20_28b2Body____20const__29_28b2Vec2_20const__2c_20bool_29_29_29_28b2Vec2_20const__2c_20bool_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28b2RevoluteJoint____29_28float_29_20const___invoke_b2RevoluteJoint__28char_20const__2c_20float_20_28b2RevoluteJoint____29_28float_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 666;
 $0 = emscripten__internal__TypeID_b2RevoluteJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28b2RevoluteJoint____emscripten__internal__getContext_float_20_28b2RevoluteJoint____29_28float_29_20const__28float_20_28b2RevoluteJoint____20const__29_28float_29_20const_29_29_28float_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2AABB_20const__20_28b2Fixture____29_28int_29_20const___invoke_b2Fixture__28char_20const__2c_20b2AABB_20const__20_28b2Fixture____29_28int_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 577;
 $0 = emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2AABB_20const__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2AABB_20const__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2AABB_20const__20_28b2Fixture____emscripten__internal__getContext_b2AABB_20const__20_28b2Fixture____29_28int_29_20const__28b2AABB_20const__20_28b2Fixture____20const__29_28int_29_20const_29_29_28int_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__value_object_b2MassData___20emscripten__value_object_b2MassData___field_b2MassData_2c_20float__28char_20const__2c_20float_20b2MassData____29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 20 >> 2] = $0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = HEAP32[$3 + 20 >> 2];
 HEAP32[$3 + 8 >> 2] = 460;
 HEAP32[$3 + 4 >> 2] = 461;
 $1 = emscripten__internal__TypeID_b2MassData_2c_20void___get_28_29();
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 8 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$3 + 8 >> 2];
 $7 = float_20b2MassData_____20emscripten__internal__getContext_float_20b2MassData_____28float_20b2MassData____20const__29($3 + 12 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
 _embind_register_value_object_field($1 | 0, $2 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$3 + 4 >> 2], float_20b2MassData_____20emscripten__internal__getContext_float_20b2MassData_____28float_20b2MassData____20const__29($3 + 12 | 0) | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function __rem_pio2f($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $5 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
 $2 = $5 & 2147483647;
 label$1: {
  if ($2 >>> 0 <= 1305022426) {
   $6 = +$0;
   $3 = $6 * .6366197723675814 + 6755399441055744 + -6755399441055744;
   $7 = $6 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-8;
   HEAPF64[$1 >> 3] = $7;
   $5 = $7 < -.7853981852531433;
   if (Math_abs($3) < 2147483648) {
    $2 = ~~$3;
   } else {
    $2 = -2147483648;
   }
   if ($5) {
    $3 = $3 + -1;
    HEAPF64[$1 >> 3] = $6 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-8;
    $2 = $2 - 1 | 0;
    break label$1;
   }
   if (!($7 > .7853981852531433)) {
    break label$1;
   }
   $3 = $3 + 1;
   HEAPF64[$1 >> 3] = $6 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-8;
   $2 = $2 + 1 | 0;
   break label$1;
  }
  if ($2 >>> 0 >= 2139095040) {
   HEAPF64[$1 >> 3] = Math_fround($0 - $0);
   $2 = 0;
   break label$1;
  }
  $8 = ($2 >>> 23 | 0) - 150 | 0;
  HEAPF64[$4 + 8 >> 3] = (wasm2js_scratch_store_i32(2, $2 - ($8 << 23) | 0), wasm2js_scratch_load_f32());
  $2 = __rem_pio2_large($4 + 8 | 0, $4, $8, 1, 0);
  $3 = HEAPF64[$4 >> 3];
  if (($5 | 0) < 0) {
   HEAPF64[$1 >> 3] = -$3;
   $2 = 0 - $2 | 0;
   break label$1;
  }
  HEAPF64[$1 >> 3] = $3;
 }
 __stack_pointer = $4 + 16 | 0;
 return $2;
}

function void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const___invoke_b2Body__28char_20const__2c_20b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 595;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const__2c_20b2Vec2_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const__2c_20b2Vec2_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Vec2_20_28b2Body____emscripten__internal__getContext_b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const__28b2Vec2_20_28b2Body____20const__29_28b2Vec2_20const__29_20const_29_29_28b2Vec2_20const__29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2__pair_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____20std____2____dispatch_copy_or_move_5babi_v160004_5d_std____2___ClassicAlgPolicy_2c_20std____2____move_loop_std____2___ClassicAlgPolicy__2c_20std____2____move_trivial_2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $1;
 HEAP32[$4 + 24 >> 2] = $2;
 HEAP32[$4 + 20 >> 2] = $3;
 HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 20 >> 2];
 std____2__pair_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____20std____2____unwrap_and_dispatch_5babi_v160004_5d_std____2____overload_std____2____move_loop_std____2___ClassicAlgPolicy__2c_20std____2____move_trivial__2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_200__28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29($0, HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
 __stack_pointer = $4 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28b2Fixture__29___invoke_b2Body_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2Body____29_28b2Fixture__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 582;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Fixture____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Fixture____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28b2Fixture__29__28void_20_28b2Body____20const__29_28b2Fixture__29_29_29_28b2Fixture__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2WheelJoint____29_28_29_20const___invoke_b2WheelJoint__28char_20const__2c_20b2Vec2_20const__20_28b2WheelJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 693;
 $0 = emscripten__internal__TypeID_b2WheelJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Vec2_20const__20_28b2WheelJoint____emscripten__internal__getContext_b2Vec2_20const__20_28b2WheelJoint____29_28_29_20const__28b2Vec2_20const__20_28b2WheelJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2MouseJoint____29_28_29_20const___invoke_b2MouseJoint__28char_20const__2c_20b2Vec2_20const__20_28b2MouseJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 638;
 $0 = emscripten__internal__TypeID_b2MouseJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Vec2_20const__20_28b2MouseJoint____emscripten__internal__getContext_b2Vec2_20const__20_28b2MouseJoint____29_28_29_20const__28b2Vec2_20const__20_28b2MouseJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2MotorJoint____29_28_29_20const___invoke_b2MotorJoint__28char_20const__2c_20b2Vec2_20const__20_28b2MotorJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 628;
 $0 = emscripten__internal__TypeID_b2MotorJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Vec2_20const__20_28b2MotorJoint____emscripten__internal__getContext_b2Vec2_20const__20_28b2MotorJoint____29_28_29_20const__28b2Vec2_20const__20_28b2MotorJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28b2Joint__29___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2World____29_28b2Joint__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 514;
 $0 = emscripten__internal__TypeID_b2World_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Joint____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Joint____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28b2Joint__29__28void_20_28b2World____20const__29_28b2Joint__29_29_29_28b2Joint__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2AABB____29_28b2AABB_20const__29_20const___invoke_b2AABB__28char_20const__2c_20bool_20_28b2AABB____29_28b2AABB_20const__29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 505;
 $0 = emscripten__internal__TypeID_b2AABB_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const__2c_20b2AABB_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const__2c_20b2AABB_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2AABB____emscripten__internal__getContext_bool_20_28b2AABB____29_28b2AABB_20const__29_20const__28bool_20_28b2AABB____20const__29_28b2AABB_20const__29_20const_29_29_28b2AABB_20const__29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2MouseJoint____29_28b2Vec2_20const__29___invoke_b2MouseJoint__28char_20const__2c_20void_20_28b2MouseJoint____29_28b2Vec2_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 637;
 $0 = emscripten__internal__TypeID_b2MouseJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint__2c_20b2Vec2_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint__2c_20b2Vec2_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2MouseJoint____emscripten__internal__getContext_void_20_28b2MouseJoint____29_28b2Vec2_20const__29__28void_20_28b2MouseJoint____20const__29_28b2Vec2_20const__29_29_29_28b2Vec2_20const__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2MotorJoint____29_28b2Vec2_20const__29___invoke_b2MotorJoint__28char_20const__2c_20void_20_28b2MotorJoint____29_28b2Vec2_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 627;
 $0 = emscripten__internal__TypeID_b2MotorJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint__2c_20b2Vec2_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint__2c_20b2Vec2_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2MotorJoint____emscripten__internal__getContext_void_20_28b2MotorJoint____29_28b2Vec2_20const__29__28void_20_28b2MotorJoint____20const__29_28b2Vec2_20const__29_29_29_28b2Vec2_20const__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______recommend_5babi_v160004_5d_28unsigned_20long_29_20const($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____max_size_28_29_20const($0), 
 HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 if (HEAPU32[$2 + 20 >> 2] > HEAPU32[$2 + 16 >> 2]) {
  std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______throw_length_error_5babi_v160004_5d_28_29_20const($0);
  wasm2js_trap();
 }
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____capacity_5babi_v160004_5d_28_29_20const($0), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 label$2: {
  if (HEAPU32[$2 + 12 >> 2] >= HEAP32[$2 + 16 >> 2] >>> 1 >>> 0) {
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
   break label$2;
  }
  HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 12 >> 2] << 1;
  wasm2js_i32$0 = $2, wasm2js_i32$1 = HEAP32[unsigned_20long_20const__20std____2__max_5babi_v160004_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($2 + 8 | 0, $2 + 20 | 0) >> 2], 
  HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______construct_at_end_28unsigned_20long_2c_20b2Vec2_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____ConstructTransaction___ConstructTransaction_5babi_v160004_5d_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_29($3 + 8 | 0, $0, HEAP32[$3 + 24 >> 2]);
 HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 16 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$3 + 12 >> 2];
 while (1) {
  if (HEAP32[$3 >> 2] != HEAP32[$3 + 4 >> 2]) {
   void_20std____2__allocator_traits_std____2__allocator_b2Vec2____construct_5babi_v160004_5d_b2Vec2_2c_20b2Vec2_20const__2c_20void__28std____2__allocator_b2Vec2___2c_20b2Vec2__2c_20b2Vec2_20const__29(std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______alloc_5babi_v160004_5d_28_29($0), b2Vec2__20std____2____to_address_5babi_v160004_5d_b2Vec2__28b2Vec2__29(HEAP32[$3 >> 2]), HEAP32[$3 + 20 >> 2]);
   $1 = HEAP32[$3 >> 2] + 8 | 0;
   HEAP32[$3 >> 2] = $1;
   HEAP32[$3 + 12 >> 2] = $1;
   continue;
  }
  break;
 }
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____ConstructTransaction____ConstructTransaction_5babi_v160004_5d_28_29($3 + 8 | 0);
 __stack_pointer = $3 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2WeldJoint____29_28_29_20const___invoke_b2WeldJoint__28char_20const__2c_20b2Vec2_20const__20_28b2WeldJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 684;
 $0 = emscripten__internal__TypeID_b2WeldJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Vec2_20const__20_28b2WeldJoint____emscripten__internal__getContext_b2Vec2_20const__20_28b2WeldJoint____29_28_29_20const__28b2Vec2_20const__20_28b2WeldJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2RopeJoint____29_28_29_20const___invoke_b2RopeJoint__28char_20const__2c_20b2Vec2_20const__20_28b2RopeJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 673;
 $0 = emscripten__internal__TypeID_b2RopeJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Vec2_20const__20_28b2RopeJoint____emscripten__internal__getContext_b2Vec2_20const__20_28b2RopeJoint____29_28_29_20const__28b2Vec2_20const__20_28b2RopeJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28b2WheelJoint____29_28float_29_20const___invoke_b2WheelJoint__28char_20const__2c_20float_20_28b2WheelJoint____29_28float_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 698;
 $0 = emscripten__internal__TypeID_b2WheelJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28b2WheelJoint____emscripten__internal__getContext_float_20_28b2WheelJoint____29_28float_29_20const__28float_20_28b2WheelJoint____20const__29_28float_29_20const_29_29_28float_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28b2Draw__29___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2World____29_28b2Draw__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 509;
 $0 = emscripten__internal__TypeID_b2World_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Draw____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Draw____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28b2Draw__29__28void_20_28b2World____20const__29_28b2Draw__29_29_29_28b2Draw__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28b2Body__29___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2World____29_28b2Body__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 512;
 $0 = emscripten__internal__TypeID_b2World_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Body____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Body____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28b2Body__29__28void_20_28b2World____20const__29_28b2Body__29_29_29_28b2Body__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2Joint____29_28_29_20const___invoke_b2Joint_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Vec2_20_28b2Joint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 608;
 $0 = emscripten__internal__TypeID_b2Joint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Vec2_20_28b2Joint____emscripten__internal__getContext_b2Vec2_20_28b2Joint____29_28_29_20const__28b2Vec2_20_28b2Joint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__value_object_b2Filter___20emscripten__value_object_b2Filter___field_b2Filter_2c_20short__28char_20const__2c_20short_20b2Filter____29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 20 >> 2] = $0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = HEAP32[$3 + 20 >> 2];
 HEAP32[$3 + 8 >> 2] = 468;
 HEAP32[$3 + 4 >> 2] = 469;
 $1 = emscripten__internal__TypeID_b2Filter_2c_20void___get_28_29();
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = emscripten__internal__TypeID_short_2c_20void___get_28_29();
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 8 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$3 + 8 >> 2];
 $7 = short_20b2Filter_____20emscripten__internal__getContext_short_20b2Filter_____28short_20b2Filter____20const__29($3 + 12 | 0);
 $8 = emscripten__internal__TypeID_short_2c_20void___get_28_29();
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
 _embind_register_value_object_field($1 | 0, $2 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$3 + 4 >> 2], short_20b2Filter_____20emscripten__internal__getContext_short_20b2Filter_____28short_20b2Filter____20const__29($3 + 12 | 0) | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function emscripten__internal__MethodInvoker_void_20_28b2World____29_28b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const__29_20const_2c_20void_2c_20b2World_20const__2c_20b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const____invoke_28void_20_28b2World____20const__29_28b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const__29_20const_2c_20b2World_20const__2c_20b2RayCastCallback__2c_20b2Vec2__2c_20b2Vec2__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $2 = emscripten__internal__BindingType_b2World_20const__2c_20void___fromWireType_28b2World_20const__29(HEAP32[$5 + 24 >> 2]);
 $0 = HEAP32[$5 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2RayCastCallback__2c_20void___fromWireType_28b2RayCastCallback__29(HEAP32[$5 + 20 >> 2]), emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$5 + 16 >> 2]), emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$5 + 12 >> 2]));
 __stack_pointer = $5 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Filter_20const__20_28b2Fixture____29_28_29_20const___invoke_b2Fixture__28char_20const__2c_20b2Filter_20const__20_28b2Fixture____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 568;
 $0 = emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Filter_20const__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Filter_20const__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Filter_20const__20_28b2Fixture____emscripten__internal__getContext_b2Filter_20const__20_28b2Fixture____29_28_29_20const__28b2Filter_20const__20_28b2Fixture____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28unsigned_20long_2c_20b2Vec2_20const__29_2c_20void_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const____invoke_28void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______20const__29_28unsigned_20long_2c_20b2Vec2_20const__29_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $2 = emscripten__internal__BindingType_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20void___fromWireType_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_unsigned_20long_2c_20void___fromWireType_28unsigned_20long_29(HEAP32[$4 + 4 >> 2]), emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$4 >> 2]));
 __stack_pointer = $4 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2RopeJoint____29_28float_29_20const___invoke_b2RopeJoint__28char_20const__2c_20b2Vec2_20_28b2RopeJoint____29_28float_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 674;
 $0 = emscripten__internal__TypeID_b2RopeJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Vec2_20_28b2RopeJoint____emscripten__internal__getContext_b2Vec2_20_28b2RopeJoint____29_28float_29_20const__28b2Vec2_20_28b2RopeJoint____20const__29_28float_29_20const_29_29_28float_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2Simplex__GetMetric_28_29_20const($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     label$5: {
      label$6: {
       $0 = HEAP32[$1 + 24 >> 2];
       switch (HEAP32[$0 + 108 >> 2]) {
       case 3:
        break label$3;

       case 2:
        break label$4;

       case 1:
        break label$5;

       case 0:
        break label$6;

       default:
        break label$2;
       }
      }
      __assert_fail(8975, 5927, 257, 10200);
      wasm2js_trap();
     }
     HEAPF32[$1 + 28 >> 2] = 0;
     break label$1;
    }
    wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Distance_28b2Vec2_20const__2c_20b2Vec2_20const__29($0 + 16 | 0, $0 + 52 | 0), 
    HEAPF32[wasm2js_i32$0 + 28 >> 2] = wasm2js_f32$0;
    break label$1;
   }
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 16 | 0, $0 + 52 | 0, $0 + 16 | 0);
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 8 | 0, $0 + 88 | 0, $0 + 16 | 0);
   wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 16 | 0, $1 + 8 | 0), 
   HEAPF32[wasm2js_i32$0 + 28 >> 2] = wasm2js_f32$0;
   break label$1;
  }
  __assert_fail(8975, 5927, 270, 10200);
  wasm2js_trap();
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAPF32[$1 + 28 >> 2];
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Fixture____29_28b2Filter_20const__29___invoke_b2Fixture__28char_20const__2c_20void_20_28b2Fixture____29_28b2Filter_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 567;
 $0 = emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20b2Filter_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20b2Filter_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Fixture____emscripten__internal__getContext_void_20_28b2Fixture____29_28b2Filter_20const__29__28void_20_28b2Fixture____20const__29_28b2Filter_20const__29_29_29_28b2Filter_20const__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28b2RopeJoint____29_28float_29_20const___invoke_b2RopeJoint__28char_20const__2c_20float_20_28b2RopeJoint____29_28float_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 675;
 $0 = emscripten__internal__TypeID_b2RopeJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28b2RopeJoint____emscripten__internal__getContext_float_20_28b2RopeJoint____29_28float_29_20const__28float_20_28b2RopeJoint____20const__29_28float_29_20const_29_29_28float_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Transform_20const__20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20b2Transform_20const__20_28b2Body____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 584;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Transform_20const__2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Transform_20const__2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Transform_20const__20_28b2Body____emscripten__internal__getContext_b2Transform_20const__20_28b2Body____29_28_29_20const__28b2Transform_20const__20_28b2Body____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__value_object_b2Color___20emscripten__value_object_b2Color___field_b2Color_2c_20float__28char_20const__2c_20float_20b2Color____29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 20 >> 2] = $0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = HEAP32[$3 + 20 >> 2];
 HEAP32[$3 + 8 >> 2] = 444;
 HEAP32[$3 + 4 >> 2] = 445;
 $1 = emscripten__internal__TypeID_b2Color_2c_20void___get_28_29();
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 8 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$3 + 8 >> 2];
 $7 = float_20b2Color_____20emscripten__internal__getContext_float_20b2Color_____28float_20b2Color____20const__29($3 + 12 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
 _embind_register_value_object_field($1 | 0, $2 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$3 + 4 >> 2], float_20b2Color_____20emscripten__internal__getContext_float_20b2Color_____28float_20b2Color____20const__29($3 + 12 | 0) | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Fixture__20_28b2Fixture____29_28_29___invoke_b2Fixture_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Fixture__20_28b2Fixture____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 571;
 $0 = emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Fixture____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Fixture____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Fixture__20_28b2Fixture____emscripten__internal__getContext_b2Fixture__20_28b2Fixture____29_28_29__28b2Fixture__20_28b2Fixture____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int______recommend_5babi_v160004_5d_28unsigned_20long_29_20const($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__vector_int_2c_20std____2__allocator_int____max_size_28_29_20const($0), 
 HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 if (HEAPU32[$2 + 20 >> 2] > HEAPU32[$2 + 16 >> 2]) {
  std____2__vector_int_2c_20std____2__allocator_int______throw_length_error_5babi_v160004_5d_28_29_20const($0);
  wasm2js_trap();
 }
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__vector_int_2c_20std____2__allocator_int____capacity_5babi_v160004_5d_28_29_20const($0), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 label$2: {
  if (HEAPU32[$2 + 12 >> 2] >= HEAP32[$2 + 16 >> 2] >>> 1 >>> 0) {
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
   break label$2;
  }
  HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 12 >> 2] << 1;
  wasm2js_i32$0 = $2, wasm2js_i32$1 = HEAP32[unsigned_20long_20const__20std____2__max_5babi_v160004_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($2 + 8 | 0, $2 + 20 | 0) >> 2], 
  HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function emscripten__value_object_b2Vec2___20emscripten__value_object_b2Vec2___field_b2Vec2_2c_20float__28char_20const__2c_20float_20b2Vec2____29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 20 >> 2] = $0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = HEAP32[$3 + 20 >> 2];
 HEAP32[$3 + 8 >> 2] = 422;
 HEAP32[$3 + 4 >> 2] = 423;
 $1 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 8 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$3 + 8 >> 2];
 $7 = float_20b2Vec2_____20emscripten__internal__getContext_float_20b2Vec2_____28float_20b2Vec2____20const__29($3 + 12 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
 _embind_register_value_object_field($1 | 0, $2 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$3 + 4 >> 2], float_20b2Vec2_____20emscripten__internal__getContext_float_20b2Vec2_____28float_20b2Vec2____20const__29($3 + 12 | 0) | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function b2MotorJoint__Dump_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 144 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 140 >> 2] = $0;
 $0 = HEAP32[$1 + 140 >> 2];
 HEAP32[$1 + 136 >> 2] = HEAP32[HEAP32[$0 + 48 >> 2] + 8 >> 2];
 HEAP32[$1 + 132 >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] + 8 >> 2];
 b2Log_28char_20const__2c_20____29(13377, 0);
 HEAP32[$1 + 96 >> 2] = HEAP32[$1 + 136 >> 2];
 b2Log_28char_20const__2c_20____29(13733, $1 + 96 | 0);
 HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 132 >> 2];
 b2Log_28char_20const__2c_20____29(13707, $1 + 80 | 0);
 HEAP32[$1 + 64 >> 2] = HEAP8[$0 + 61 | 0] & 1;
 b2Log_28char_20const__2c_20____29(14923, $1 - -64 | 0);
 $2 = HEAPF32[$0 + 68 >> 2];
 HEAPF64[$1 + 56 >> 3] = HEAPF32[$0 + 72 >> 2];
 HEAPF64[$1 + 48 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(13956, $1 + 48 | 0);
 HEAPF64[$1 + 32 >> 3] = HEAPF32[$0 + 76 >> 2];
 b2Log_28char_20const__2c_20____29(12502, $1 + 32 | 0);
 HEAPF64[$1 + 16 >> 3] = HEAPF32[$0 + 92 >> 2];
 b2Log_28char_20const__2c_20____29(13092, $1 + 16 | 0);
 HEAPF64[$1 >> 3] = HEAPF32[$0 + 96 >> 2];
 b2Log_28char_20const__2c_20____29(12892, $1);
 HEAPF64[$1 + 112 >> 3] = HEAPF32[$0 + 100 >> 2];
 b2Log_28char_20const__2c_20____29(12564, $1 + 112 | 0);
 HEAP32[$1 + 128 >> 2] = HEAP32[$0 + 56 >> 2];
 b2Log_28char_20const__2c_20____29(14524, $1 + 128 | 0);
 __stack_pointer = $1 + 144 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28b2PrismaticJoint____29_28_29_20const___invoke_b2PrismaticJoint__28char_20const__2c_20float_20_28b2PrismaticJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 648;
 $0 = emscripten__internal__TypeID_b2PrismaticJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28b2PrismaticJoint____emscripten__internal__getContext_float_20_28b2PrismaticJoint____29_28_29_20const__28float_20_28b2PrismaticJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2Island__Report_28b2ContactVelocityConstraint_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 label$1: {
  $0 = HEAP32[$2 + 44 >> 2];
  if (!HEAP32[$0 + 4 >> 2]) {
   break label$1;
  }
  HEAP32[$2 + 36 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 36 >> 2] >= HEAP32[$0 + 36 >> 2]) {
    break label$1;
   }
   HEAP32[$2 + 32 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$2 + 36 >> 2] << 2) >> 2];
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 40 >> 2] + Math_imul(HEAP32[$2 + 36 >> 2], 156);
   HEAP32[$2 + 24 >> 2] = HEAP32[HEAP32[$2 + 28 >> 2] + 148 >> 2];
   HEAP32[$2 + 4 >> 2] = 0;
   while (1) {
    if (HEAP32[$2 + 4 >> 2] < HEAP32[HEAP32[$2 + 28 >> 2] + 148 >> 2]) {
     HEAPF32[($2 + 8 | 0) + (HEAP32[$2 + 4 >> 2] << 2) >> 2] = HEAPF32[(HEAP32[$2 + 28 >> 2] + Math_imul(HEAP32[$2 + 4 >> 2], 36) | 0) + 16 >> 2];
     HEAPF32[($2 + 16 | 0) + (HEAP32[$2 + 4 >> 2] << 2) >> 2] = HEAPF32[(HEAP32[$2 + 28 >> 2] + Math_imul(HEAP32[$2 + 4 >> 2], 36) | 0) + 20 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
     continue;
    }
    break;
   }
   $1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1, HEAP32[$2 + 32 >> 2], $2 + 8 | 0);
   HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 36 >> 2] + 1;
   continue;
  }
 }
 __stack_pointer = $2 + 48 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2FixtureDef__2c_20b2Shape_20const__29___invoke_b2FixtureDef_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28__29_28b2FixtureDef__2c_20b2Shape_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 561;
 $0 = emscripten__internal__TypeID_b2FixtureDef_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2FixtureDef__2c_20b2Shape_20const____getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2FixtureDef__2c_20b2Shape_20const____getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28__emscripten__internal__getContext_void_20_28__29_28b2FixtureDef__2c_20b2Shape_20const__29__28void_20_28__20const__29_28b2FixtureDef__2c_20b2Shape_20const__29_29_29_28b2FixtureDef__2c_20b2Shape_20const__29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Shape__20_28b2Fixture____29_28_29___invoke_b2Fixture_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Shape__20_28b2Fixture____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 564;
 $0 = emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2Fixture____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2Fixture____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Shape__20_28b2Fixture____emscripten__internal__getContext_b2Shape__20_28b2Fixture____29_28_29__28b2Shape__20_28b2Fixture____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2PrismaticJoint____29_28float_29___invoke_b2PrismaticJoint__28char_20const__2c_20void_20_28b2PrismaticJoint____29_28float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 652;
 $0 = emscripten__internal__TypeID_b2PrismaticJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2PrismaticJoint____emscripten__internal__getContext_void_20_28b2PrismaticJoint____29_28float_29__28void_20_28b2PrismaticJoint____20const__29_28float_29_29_29_28float_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28b2RevoluteJoint____29_28_29_20const___invoke_b2RevoluteJoint__28char_20const__2c_20float_20_28b2RevoluteJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 661;
 $0 = emscripten__internal__TypeID_b2RevoluteJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28b2RevoluteJoint____emscripten__internal__getContext_float_20_28b2RevoluteJoint____29_28_29_20const__28float_20_28b2RevoluteJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28b2DistanceJoint____29_28_29_20const___invoke_b2DistanceJoint__28char_20const__2c_20float_20_28b2DistanceJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 620;
 $0 = emscripten__internal__TypeID_b2DistanceJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28b2DistanceJoint____emscripten__internal__getContext_float_20_28b2DistanceJoint____29_28_29_20const__28float_20_28b2DistanceJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2PrismaticJoint____29_28_29_20const___invoke_b2PrismaticJoint__28char_20const__2c_20bool_20_28b2PrismaticJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 649;
 $0 = emscripten__internal__TypeID_b2PrismaticJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2PrismaticJoint____emscripten__internal__getContext_bool_20_28b2PrismaticJoint____29_28_29_20const__28bool_20_28b2PrismaticJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Shape__Type_20_28b2Fixture____29_28_29_20const___invoke_b2Fixture__28char_20const__2c_20b2Shape__Type_20_28b2Fixture____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 563;
 $0 = emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Shape__Type_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Shape__Type_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Shape__Type_20_28b2Fixture____emscripten__internal__getContext_b2Shape__Type_20_28b2Fixture____29_28_29_20const__28b2Shape__Type_20_28b2Fixture____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__value_object_b2Rot___20emscripten__value_object_b2Rot___field_b2Rot_2c_20float__28char_20const__2c_20float_20b2Rot____29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 20 >> 2] = $0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = HEAP32[$3 + 20 >> 2];
 HEAP32[$3 + 8 >> 2] = 434;
 HEAP32[$3 + 4 >> 2] = 435;
 $1 = emscripten__internal__TypeID_b2Rot_2c_20void___get_28_29();
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 8 >> 2];
 $5 = char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29();
 $6 = HEAP32[$3 + 8 >> 2];
 $7 = float_20b2Rot_____20emscripten__internal__getContext_float_20b2Rot_____28float_20b2Rot____20const__29($3 + 12 | 0);
 $8 = emscripten__internal__TypeID_float_2c_20void___get_28_29();
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
 _embind_register_value_object_field($1 | 0, $2 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$3 + 4 >> 2], float_20b2Rot_____20emscripten__internal__getContext_float_20b2Rot_____28float_20b2Rot____20const__29($3 + 12 | 0) | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function std____2__pair_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____20std____2____dispatch_copy_or_move_5babi_v160004_5d_std____2___ClassicAlgPolicy_2c_20std____2____move_loop_std____2___ClassicAlgPolicy__2c_20std____2____move_trivial_2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $1;
 HEAP32[$4 + 24 >> 2] = $2;
 HEAP32[$4 + 20 >> 2] = $3;
 HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 20 >> 2];
 std____2__pair_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____20std____2____unwrap_and_dispatch_5babi_v160004_5d_std____2____overload_std____2____move_loop_std____2___ClassicAlgPolicy__2c_20std____2____move_trivial__2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_200__28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29($0, HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
 __stack_pointer = $4 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Body__20_28b2Fixture____29_28_29___invoke_b2Fixture_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Body__20_28b2Fixture____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 570;
 $0 = emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2Fixture____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2Fixture____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Body__20_28b2Fixture____emscripten__internal__getContext_b2Body__20_28b2Fixture____29_28_29__28b2Body__20_28b2Fixture____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2RevoluteJoint____29_28float_29___invoke_b2RevoluteJoint__28char_20const__2c_20void_20_28b2RevoluteJoint____29_28float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 665;
 $0 = emscripten__internal__TypeID_b2RevoluteJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2RevoluteJoint____emscripten__internal__getContext_void_20_28b2RevoluteJoint____29_28float_29__28void_20_28b2RevoluteJoint____20const__29_28float_29_29_29_28float_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2PrismaticJoint____29_28bool_29___invoke_b2PrismaticJoint__28char_20const__2c_20void_20_28b2PrismaticJoint____29_28bool_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 650;
 $0 = emscripten__internal__TypeID_b2PrismaticJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20bool___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20bool___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2PrismaticJoint____emscripten__internal__getContext_void_20_28b2PrismaticJoint____29_28bool_29__28void_20_28b2PrismaticJoint____20const__29_28bool_29_29_29_28bool_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2DistanceJoint____29_28float_29___invoke_b2DistanceJoint__28char_20const__2c_20void_20_28b2DistanceJoint____29_28float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 619;
 $0 = emscripten__internal__TypeID_b2DistanceJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2DistanceJoint____emscripten__internal__getContext_void_20_28b2DistanceJoint____29_28float_29__28void_20_28b2DistanceJoint____20const__29_28float_29_29_29_28float_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__FunctionInvoker_bool_20_28__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const__29_2c_20bool_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const____invoke_28bool_20_28___29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const__29_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[HEAP32[$4 + 12 >> 2] >> 2];
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0](emscripten__internal__GenericBindingType_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____fromWireType_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29(HEAP32[$4 + 8 >> 2]), emscripten__internal__BindingType_unsigned_20long_2c_20void___fromWireType_28unsigned_20long_29(HEAP32[$4 + 4 >> 2]), emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$4 >> 2])) & 1);
 __stack_pointer = $4 + 16 | 0;
 return $0 & 1;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28float_2c_20bool_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28float_2c_20bool_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 591;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20float_2c_20bool___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20float_2c_20bool___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28float_2c_20bool_29__28void_20_28b2Body____20const__29_28float_2c_20bool_29_29_29_28float_2c_20bool_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Fixture__20_28b2Body____29_28_29___invoke_b2Body_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Fixture__20_28b2Body____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 600;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Fixture__20_28b2Body____emscripten__internal__getContext_b2Fixture__20_28b2Body____29_28_29__28b2Fixture__20_28b2Body____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2RevoluteJoint____29_28_29_20const___invoke_b2RevoluteJoint__28char_20const__2c_20bool_20_28b2RevoluteJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 662;
 $0 = emscripten__internal__TypeID_b2RevoluteJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2RevoluteJoint____emscripten__internal__getContext_bool_20_28b2RevoluteJoint____29_28_29_20const__28bool_20_28b2RevoluteJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2Joint____29_28float_29_20const___invoke_b2Joint__28char_20const__2c_20b2Vec2_20_28b2Joint____29_28float_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 609;
 $0 = emscripten__internal__TypeID_b2Joint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Vec2_20_28b2Joint____emscripten__internal__getContext_b2Vec2_20_28b2Joint____29_28float_29_20const__28b2Vec2_20_28b2Joint____20const__29_28float_29_20const_29_29_28float_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2PolygonShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_2c_20void_2c_20b2PolygonShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___invoke_28void_20_28b2PolygonShape____20const__29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_2c_20b2PolygonShape_20const__2c_20b2AABB__2c_20b2Transform__2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $2 = emscripten__internal__BindingType_b2PolygonShape_20const__2c_20void___fromWireType_28b2PolygonShape_20const__29(HEAP32[$5 + 24 >> 2]);
 $0 = HEAP32[$5 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2AABB__2c_20void___fromWireType_28b2AABB__29(HEAP32[$5 + 20 >> 2]), emscripten__internal__GenericBindingType_b2Transform___fromWireType_28b2Transform__29(HEAP32[$5 + 16 >> 2]), emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$5 + 12 >> 2]));
 __stack_pointer = $5 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28b2Vec2_20const__29___invoke_b2World__28char_20const__2c_20void_20_28b2World____29_28b2Vec2_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 520;
 $0 = emscripten__internal__TypeID_b2World_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Vec2_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Vec2_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28b2Vec2_20const__29__28void_20_28b2World____20const__29_28b2Vec2_20const__29_29_29_28b2Vec2_20const__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29___invoke_b2AABB_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28__29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 504;
 $0 = emscripten__internal__TypeID_b2AABB_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2AABB__2c_20b2AABB__2c_20b2AABB____getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2AABB__2c_20b2AABB__2c_20b2AABB____getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28__emscripten__internal__getContext_void_20_28__29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29__28void_20_28__20const__29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29_29_29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Vec2_20const__20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20b2Vec2_20const__20_28b2Body____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 585;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Vec2_20const__20_28b2Body____emscripten__internal__getContext_b2Vec2_20const__20_28b2Body____29_28_29_20const__28b2Vec2_20const__20_28b2Body____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28b2Joint____29_28float_29_20const___invoke_b2Joint__28char_20const__2c_20float_20_28b2Joint____29_28float_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 610;
 $0 = emscripten__internal__TypeID_b2Joint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28b2Joint____emscripten__internal__getContext_float_20_28b2Joint____29_28float_29_20const__28float_20_28b2Joint____20const__29_28float_29_20const_29_29_28float_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2RevoluteJoint____29_28bool_29___invoke_b2RevoluteJoint__28char_20const__2c_20void_20_28b2RevoluteJoint____29_28bool_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 663;
 $0 = emscripten__internal__TypeID_b2RevoluteJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20bool___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20bool___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2RevoluteJoint____emscripten__internal__getContext_void_20_28b2RevoluteJoint____29_28bool_29__28void_20_28b2RevoluteJoint____20const__29_28bool_29_29_29_28bool_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2CircleShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_2c_20void_2c_20b2CircleShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___invoke_28void_20_28b2CircleShape____20const__29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_2c_20b2CircleShape_20const__2c_20b2AABB__2c_20b2Transform__2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $2 = emscripten__internal__BindingType_b2CircleShape_20const__2c_20void___fromWireType_28b2CircleShape_20const__29(HEAP32[$5 + 24 >> 2]);
 $0 = HEAP32[$5 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2AABB__2c_20void___fromWireType_28b2AABB__29(HEAP32[$5 + 20 >> 2]), emscripten__internal__GenericBindingType_b2Transform___fromWireType_28b2Transform__29(HEAP32[$5 + 16 >> 2]), emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$5 + 12 >> 2]));
 __stack_pointer = $5 + 32 | 0;
}

function b2EdgeShape__ComputeAABB_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 80 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 76 >> 2] = $0;
 HEAP32[$4 + 72 >> 2] = $1;
 HEAP32[$4 + 68 >> 2] = $2;
 HEAP32[$4 + 64 >> 2] = $3;
 $0 = HEAP32[$4 + 76 >> 2];
 b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 56 | 0, HEAP32[$4 + 68 >> 2], $0 + 12 | 0);
 b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($4 + 48 | 0, HEAP32[$4 + 68 >> 2], $0 + 20 | 0);
 b2Min_28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 40 | 0, $4 + 56 | 0, $4 + 48 | 0);
 b2Max_28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 32 | 0, $4 + 56 | 0, $4 + 48 | 0);
 b2Vec2__b2Vec2_28float_2c_20float_29($4 + 24 | 0, HEAPF32[$0 + 8 >> 2], HEAPF32[$0 + 8 >> 2]);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 16 | 0, $4 + 40 | 0, $4 + 24 | 0);
 $0 = HEAP32[$4 + 20 >> 2];
 $1 = HEAP32[$4 + 16 >> 2];
 $2 = $1;
 $1 = HEAP32[$4 + 72 >> 2];
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $0;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($4 + 8 | 0, $4 + 32 | 0, $4 + 24 | 0);
 $1 = HEAP32[$4 + 12 >> 2];
 $0 = HEAP32[$4 + 8 >> 2];
 $2 = $0;
 $0 = HEAP32[$4 + 72 >> 2];
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $1;
 __stack_pointer = $4 + 80 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2PolygonShape____29_28_29_20const___invoke_b2PolygonShape__28char_20const__2c_20bool_20_28b2PolygonShape____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 557;
 $0 = emscripten__internal__TypeID_b2PolygonShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2PolygonShape____emscripten__internal__getContext_bool_20_28b2PolygonShape____29_28_29_20const__28bool_20_28b2PolygonShape____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Shape__Type_20_28b2Shape____29_28_29_20const___invoke_b2Shape__28char_20const__2c_20b2Shape__Type_20_28b2Shape____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 522;
 $0 = emscripten__internal__TypeID_b2Shape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Shape__Type_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Shape__Type_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Shape__Type_20_28b2Shape____emscripten__internal__getContext_b2Shape__Type_20_28b2Shape____29_28_29_20const__28b2Shape__Type_20_28b2Shape____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28b2Vec2_20const__29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28b2Vec2_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 587;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28b2Vec2_20const__29__28void_20_28b2Body____20const__29_28b2Vec2_20const__29_29_29_28b2Vec2_20const__29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_unsigned_20int_20_28b2Draw____29_28_29_20const___invoke_b2Draw__28char_20const__2c_20unsigned_20int_20_28b2Draw____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 489;
 $0 = emscripten__internal__TypeID_b2Draw_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_unsigned_20int_2c_20emscripten__internal__AllowedRawPointer_b2Draw_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_unsigned_20int_2c_20emscripten__internal__AllowedRawPointer_b2Draw_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], unsigned_20int_20_28b2Draw____emscripten__internal__getContext_unsigned_20int_20_28b2Draw____29_28_29_20const__28unsigned_20int_20_28b2Draw____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Body__20_28b2Joint____29_28_29___invoke_b2Joint_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Body__20_28b2Joint____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 607;
 $0 = emscripten__internal__TypeID_b2Joint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2Joint____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2Joint____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Body__20_28b2Joint____emscripten__internal__getContext_b2Body__20_28b2Joint____29_28_29__28b2Body__20_28b2Joint____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2World__20_28b2Body____29_28_29___invoke_b2Body_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2World__20_28b2Body____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 602;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2World__2c_20emscripten__internal__AllowedRawPointer_b2Body____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2World__2c_20emscripten__internal__AllowedRawPointer_b2Body____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2World__20_28b2Body____emscripten__internal__getContext_b2World__20_28b2Body____29_28_29__28b2World__20_28b2Body____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodCaller_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const____call_28emscripten___EM_VAL__2c_20char_20const__2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = __stack_pointer + -64 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 60 >> 2] = $0;
 HEAP32[$6 + 56 >> 2] = $1;
 HEAP32[$6 + 52 >> 2] = $2;
 HEAP32[$6 + 48 >> 2] = $3;
 HEAP32[$6 + 44 >> 2] = $4;
 HEAP32[$6 + 40 >> 2] = $5;
 wasm2js_i32$0 = $6, wasm2js_i32$1 = emscripten__internal__Signature_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const____get_method_caller_28_29(), 
 HEAP32[wasm2js_i32$0 + 36 >> 2] = wasm2js_i32$1;
 emscripten__internal__WireTypePack_b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const____WireTypePack_28b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const__29($6, HEAP32[$6 + 52 >> 2], HEAP32[$6 + 48 >> 2], HEAP32[$6 + 44 >> 2], HEAP32[$6 + 40 >> 2]);
 _emval_call_void_method(HEAP32[$6 + 36 >> 2], HEAP32[$6 + 60 >> 2], HEAP32[$6 + 56 >> 2], emscripten__internal__WireTypePack_b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const____operator_20void_20const__28_29_20const($6) | 0);
 __stack_pointer = $6 - -64 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_int_20_28b2PolygonShape____29_28_29_20const___invoke_b2PolygonShape__28char_20const__2c_20int_20_28b2PolygonShape____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 551;
 $0 = emscripten__internal__TypeID_b2PolygonShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], int_20_28b2PolygonShape____emscripten__internal__getContext_int_20_28b2PolygonShape____29_28_29_20const__28int_20_28b2PolygonShape____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int______construct_at_end_28unsigned_20long_2c_20int_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 std____2__vector_int_2c_20std____2__allocator_int_____ConstructTransaction___ConstructTransaction_5babi_v160004_5d_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_29($3 + 8 | 0, $0, HEAP32[$3 + 24 >> 2]);
 HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 16 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$3 + 12 >> 2];
 while (1) {
  if (HEAP32[$3 >> 2] != HEAP32[$3 + 4 >> 2]) {
   void_20std____2__allocator_traits_std____2__allocator_int____construct_5babi_v160004_5d_int_2c_20int_20const__2c_20void__28std____2__allocator_int___2c_20int__2c_20int_20const__29(std____2__vector_int_2c_20std____2__allocator_int______alloc_5babi_v160004_5d_28_29($0), int__20std____2____to_address_5babi_v160004_5d_int__28int__29(HEAP32[$3 >> 2]), HEAP32[$3 + 20 >> 2]);
   $1 = HEAP32[$3 >> 2] + 4 | 0;
   HEAP32[$3 >> 2] = $1;
   HEAP32[$3 + 12 >> 2] = $1;
   continue;
  }
  break;
 }
 std____2__vector_int_2c_20std____2__allocator_int_____ConstructTransaction____ConstructTransaction_5babi_v160004_5d_28_29($3 + 8 | 0);
 __stack_pointer = $3 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Draw____29_28unsigned_20int_29___invoke_b2Draw__28char_20const__2c_20void_20_28b2Draw____29_28unsigned_20int_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 488;
 $0 = emscripten__internal__TypeID_b2Draw_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20unsigned_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20unsigned_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Draw____emscripten__internal__getContext_void_20_28b2Draw____29_28unsigned_20int_29__28void_20_28b2Draw____20const__29_28unsigned_20int_29_29_29_28unsigned_20int_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28b2WheelJoint____29_28_29_20const___invoke_b2WheelJoint__28char_20const__2c_20float_20_28b2WheelJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 694;
 $0 = emscripten__internal__TypeID_b2WheelJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28b2WheelJoint____emscripten__internal__getContext_float_20_28b2WheelJoint____29_28_29_20const__28float_20_28b2WheelJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28b2MouseJoint____29_28_29_20const___invoke_b2MouseJoint__28char_20const__2c_20float_20_28b2MouseJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 640;
 $0 = emscripten__internal__TypeID_b2MouseJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28b2MouseJoint____emscripten__internal__getContext_float_20_28b2MouseJoint____29_28_29_20const__28float_20_28b2MouseJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28b2MotorJoint____29_28_29_20const___invoke_b2MotorJoint__28char_20const__2c_20float_20_28b2MotorJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 630;
 $0 = emscripten__internal__TypeID_b2MotorJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28b2MotorJoint____emscripten__internal__getContext_float_20_28b2MotorJoint____29_28_29_20const__28float_20_28b2MotorJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2EdgeShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_2c_20void_2c_20b2EdgeShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___invoke_28void_20_28b2EdgeShape____20const__29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_2c_20b2EdgeShape_20const__2c_20b2AABB__2c_20b2Transform__2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $2 = emscripten__internal__BindingType_b2EdgeShape_20const__2c_20void___fromWireType_28b2EdgeShape_20const__29(HEAP32[$5 + 24 >> 2]);
 $0 = HEAP32[$5 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2AABB__2c_20void___fromWireType_28b2AABB__29(HEAP32[$5 + 20 >> 2]), emscripten__internal__GenericBindingType_b2Transform___fromWireType_28b2Transform__29(HEAP32[$5 + 16 >> 2]), emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$5 + 12 >> 2]));
 __stack_pointer = $5 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2Body__2c_20b2MassData_20const__29___invoke_b2Body_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28__29_28b2Body__2c_20b2MassData_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 593;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2Body__2c_20b2MassData_20const____getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2Body__2c_20b2MassData_20const____getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28__emscripten__internal__getContext_void_20_28__29_28b2Body__2c_20b2MassData_20const__29__28void_20_28__20const__29_28b2Body__2c_20b2MassData_20const__29_29_29_28b2Body__2c_20b2MassData_20const__29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2JointType_20_28b2Joint____29_28_29_20const___invoke_b2Joint__28char_20const__2c_20b2JointType_20_28b2Joint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 606;
 $0 = emscripten__internal__TypeID_b2Joint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2JointType_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2JointType_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2JointType_20_28b2Joint____emscripten__internal__getContext_b2JointType_20_28b2Joint____29_28_29_20const__28b2JointType_20_28b2Joint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2WheelJoint____29_28float_29___invoke_b2WheelJoint__28char_20const__2c_20void_20_28b2WheelJoint____29_28float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 697;
 $0 = emscripten__internal__TypeID_b2WheelJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2WheelJoint____emscripten__internal__getContext_void_20_28b2WheelJoint____29_28float_29__28void_20_28b2WheelJoint____20const__29_28float_29_29_29_28float_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2MouseJoint____29_28float_29___invoke_b2MouseJoint__28char_20const__2c_20void_20_28b2MouseJoint____29_28float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 639;
 $0 = emscripten__internal__TypeID_b2MouseJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2MouseJoint____emscripten__internal__getContext_void_20_28b2MouseJoint____29_28float_29__28void_20_28b2MouseJoint____20const__29_28float_29_29_29_28float_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2MotorJoint____29_28float_29___invoke_b2MotorJoint__28char_20const__2c_20void_20_28b2MotorJoint____29_28float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 629;
 $0 = emscripten__internal__TypeID_b2MotorJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2MotorJoint____emscripten__internal__getContext_void_20_28b2MotorJoint____29_28float_29__28void_20_28b2MotorJoint____20const__29_28float_29_29_29_28float_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_int_20_28b2CircleShape____29_28_29_20const___invoke_b2CircleShape__28char_20const__2c_20int_20_28b2CircleShape____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 534;
 $0 = emscripten__internal__TypeID_b2CircleShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], int_20_28b2CircleShape____emscripten__internal__getContext_int_20_28b2CircleShape____29_28_29_20const__28int_20_28b2CircleShape____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2FrictionJoint__Dump_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 128 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 124 >> 2] = $0;
 $0 = HEAP32[$1 + 124 >> 2];
 HEAP32[$1 + 120 >> 2] = HEAP32[HEAP32[$0 + 48 >> 2] + 8 >> 2];
 HEAP32[$1 + 116 >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] + 8 >> 2];
 b2Log_28char_20const__2c_20____29(13422, 0);
 HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 120 >> 2];
 b2Log_28char_20const__2c_20____29(13733, $1 + 80 | 0);
 HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 116 >> 2];
 b2Log_28char_20const__2c_20____29(13707, $1 - -64 | 0);
 HEAP32[$1 + 48 >> 2] = HEAP8[$0 + 61 | 0] & 1;
 b2Log_28char_20const__2c_20____29(14923, $1 + 48 | 0);
 $2 = HEAPF32[$0 + 68 >> 2];
 HEAPF64[$1 + 40 >> 3] = HEAPF32[$0 + 72 >> 2];
 HEAPF64[$1 + 32 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14234, $1 + 32 | 0);
 $2 = HEAPF32[$0 + 76 >> 2];
 HEAPF64[$1 + 24 >> 3] = HEAPF32[$0 + 80 >> 2];
 HEAPF64[$1 + 16 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14109, $1 + 16 | 0);
 HEAPF64[$1 >> 3] = HEAPF32[$0 + 96 >> 2];
 b2Log_28char_20const__2c_20____29(13092, $1);
 HEAPF64[$1 + 96 >> 3] = HEAPF32[$0 + 100 >> 2];
 b2Log_28char_20const__2c_20____29(12892, $1 + 96 | 0);
 HEAP32[$1 + 112 >> 2] = HEAP32[$0 + 56 >> 2];
 b2Log_28char_20const__2c_20____29(14524, $1 + 112 | 0);
 __stack_pointer = $1 + 128 | 0;
}

function b2World__b2World_28b2Vec2_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 $2 = HEAP32[$3 + 12 >> 2];
 b2BlockAllocator__b2BlockAllocator_28_29($2);
 b2StackAllocator__b2StackAllocator_28_29($2 + 68 | 0);
 b2ContactManager__b2ContactManager_28_29($2 + 102868 | 0);
 b2Vec2__b2Vec2_28_29($2 + 102964 | 0);
 HEAP32[$2 + 102976 >> 2] = 0;
 HEAP32[$2 + 102980 >> 2] = 0;
 HEAP32[$2 + 102948 >> 2] = 0;
 HEAP32[$2 + 102952 >> 2] = 0;
 HEAP32[$2 + 102956 >> 2] = 0;
 HEAP32[$2 + 102960 >> 2] = 0;
 HEAP8[$2 + 102991 | 0] = 1;
 HEAP8[$2 + 102992 | 0] = 1;
 HEAP8[$2 + 102993 | 0] = 0;
 HEAP8[$2 + 102994 | 0] = 1;
 HEAP8[$2 + 102972 | 0] = 1;
 $1 = HEAP32[$3 + 8 >> 2];
 $0 = HEAP32[$1 >> 2];
 $4 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = $2 + 102964 | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $4;
 HEAP8[$2 + 102988 | 0] = 0;
 HEAP8[$2 + 102989 | 0] = 0;
 HEAP8[$2 + 102990 | 0] = 1;
 HEAPF32[$2 + 102984 >> 2] = 0;
 HEAP32[$2 + 102944 >> 2] = $2;
 $0 = $2 + 102996 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 __stack_pointer = $3 + 16 | 0;
 return $2;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28b2WeldJoint____29_28_29_20const___invoke_b2WeldJoint__28char_20const__2c_20float_20_28b2WeldJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 685;
 $0 = emscripten__internal__TypeID_b2WeldJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28b2WeldJoint____emscripten__internal__getContext_float_20_28b2WeldJoint____29_28_29_20const__28float_20_28b2WeldJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28b2RopeJoint____29_28_29_20const___invoke_b2RopeJoint__28char_20const__2c_20float_20_28b2RopeJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 677;
 $0 = emscripten__internal__TypeID_b2RopeJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28b2RopeJoint____emscripten__internal__getContext_float_20_28b2RopeJoint____29_28_29_20const__28float_20_28b2RopeJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2WheelJoint____29_28_29_20const___invoke_b2WheelJoint__28char_20const__2c_20bool_20_28b2WheelJoint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 695;
 $0 = emscripten__internal__TypeID_b2WheelJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2WheelJoint____emscripten__internal__getContext_bool_20_28b2WheelJoint____29_28_29_20const__28bool_20_28b2WheelJoint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28_29___invoke_b2World_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28b2World____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 510;
 $0 = emscripten__internal__TypeID_b2World_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28_29__28void_20_28b2World____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2PolygonShape__TestPoint_28b2Transform_20const__2c_20b2Vec2_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 $0 = HEAP32[$3 + 40 >> 2];
 $1 = HEAP32[$3 + 36 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 16 | 0, HEAP32[$3 + 32 >> 2], HEAP32[$3 + 36 >> 2]);
 b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($3 + 24 | 0, $1 + 8 | 0, $3 + 16 | 0);
 HEAP32[$3 + 12 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAP32[$3 + 12 >> 2] < HEAP32[$0 + 148 >> 2]) {
    $1 = HEAP32[$3 + 12 >> 2] << 3;
    operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3, $3 + 24 | 0, ($0 + 20 | 0) + (HEAP32[$3 + 12 >> 2] << 3) | 0);
    wasm2js_i32$0 = $3, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + ($0 + 84 | 0) | 0, $3), 
    HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
    if (HEAPF32[$3 + 8 >> 2] > Math_fround(0)) {
     HEAP8[$3 + 47 | 0] = 0;
     break label$1;
    } else {
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP8[$3 + 47 | 0] = 1;
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP8[$3 + 47 | 0] & 1;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2WheelJoint____29_28bool_29___invoke_b2WheelJoint__28char_20const__2c_20void_20_28b2WheelJoint____29_28bool_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 696;
 $0 = emscripten__internal__TypeID_b2WheelJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint__2c_20bool___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint__2c_20bool___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2WheelJoint____emscripten__internal__getContext_void_20_28b2WheelJoint____29_28bool_29__28void_20_28b2WheelJoint____20const__29_28bool_29_29_29_28bool_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2WeldJoint____29_28float_29___invoke_b2WeldJoint__28char_20const__2c_20void_20_28b2WeldJoint____29_28float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 686;
 $0 = emscripten__internal__TypeID_b2WeldJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2WeldJoint____emscripten__internal__getContext_void_20_28b2WeldJoint____29_28float_29__28void_20_28b2WeldJoint____20const__29_28float_29_29_29_28float_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2RopeJoint____29_28float_29___invoke_b2RopeJoint__28char_20const__2c_20void_20_28b2RopeJoint____29_28float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 676;
 $0 = emscripten__internal__TypeID_b2RopeJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2RopeJoint____emscripten__internal__getContext_void_20_28b2RopeJoint____29_28float_29__28void_20_28b2RopeJoint____20const__29_28float_29_29_29_28float_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2____tree_node_base_void____20std____2____tree_next_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) {
   wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2____tree_node_base_void____20std____2____tree_min_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]), 
   HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   break label$1;
  }
  while (1) {
   if ((bool_20std____2____tree_is_left_child_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$1 + 8 >> 2]) ^ -1) & 1) {
    wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 8 >> 2]), 
    HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
    continue;
   }
   break;
  }
  wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 8 >> 2]), 
  HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function void_20emscripten__internal__RegisterClassMethod_b2BodyType_20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20b2BodyType_20_28b2Body____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 597;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2BodyType_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2BodyType_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2BodyType_20_28b2Body____emscripten__internal__getContext_b2BodyType_20_28b2Body____29_28_29_20const__28b2BodyType_20_28b2Body____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2__pair_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____20std____2____move_5babi_v160004_5d_std____2___ClassicAlgPolicy_2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $1;
 HEAP32[$4 + 24 >> 2] = $2;
 HEAP32[$4 + 20 >> 2] = $3;
 HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 20 >> 2];
 std____2__pair_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____20std____2____dispatch_copy_or_move_5babi_v160004_5d_std____2___ClassicAlgPolicy_2c_20std____2____move_loop_std____2___ClassicAlgPolicy__2c_20std____2____move_trivial_2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29($0, HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
 __stack_pointer = $4 + 32 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Shape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_2c_20void_2c_20b2Shape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___invoke_28void_20_28b2Shape____20const__29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_2c_20b2Shape_20const__2c_20b2AABB__2c_20b2Transform__2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $2 = emscripten__internal__BindingType_b2Shape_20const__2c_20void___fromWireType_28b2Shape_20const__29(HEAP32[$5 + 24 >> 2]);
 $0 = HEAP32[$5 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2AABB__2c_20void___fromWireType_28b2AABB__29(HEAP32[$5 + 20 >> 2]), emscripten__internal__GenericBindingType_b2Transform___fromWireType_28b2Transform__29(HEAP32[$5 + 16 >> 2]), emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$5 + 12 >> 2]));
 __stack_pointer = $5 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_int_20_28b2EdgeShape____29_28_29_20const___invoke_b2EdgeShape__28char_20const__2c_20int_20_28b2EdgeShape____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 542;
 $0 = emscripten__internal__TypeID_b2EdgeShape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], int_20_28b2EdgeShape____emscripten__internal__getContext_int_20_28b2EdgeShape____29_28_29_20const__28int_20_28b2EdgeShape____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28b2BodyType_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28b2BodyType_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 596;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2BodyType___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2BodyType___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28b2BodyType_29__28void_20_28b2Body____20const__29_28b2BodyType_29_29_29_28b2BodyType_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28b2Fixture____29_28_29_20const___invoke_b2Fixture__28char_20const__2c_20float_20_28b2Fixture____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 576;
 $0 = emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28b2Fixture____emscripten__internal__getContext_float_20_28b2Fixture____29_28_29_20const__28float_20_28b2Fixture____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodCaller_bool_2c_20unsigned_20int____call_28emscripten___EM_VAL__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = emscripten__internal__Signature_bool_2c_20unsigned_20int____get_method_caller_28_29(), 
 HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
 emscripten__internal__WireTypePack_unsigned_20int____WireTypePack_28unsigned_20int__29($3 + 24 | 0, HEAP32[$3 + 36 >> 2]);
 wasm2js_i32$0 = $3, wasm2js_f64$0 = +_emval_call_method(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2], $3 + 20 | 0, emscripten__internal__WireTypePack_unsigned_20int____operator_20void_20const__28_29_20const($3 + 24 | 0) | 0), 
 HEAPF64[wasm2js_i32$0 + 8 >> 3] = wasm2js_f64$0;
 emscripten__internal__DestructorsRunner__DestructorsRunner_28emscripten__internal___EM_DESTRUCTORS__29($3 + 4 | 0, HEAP32[$3 + 20 >> 2]);
 $0 = bool_20emscripten__internal__fromGenericWireType_bool__28double_29(HEAPF64[$3 + 8 >> 3]);
 emscripten__internal__DestructorsRunner___DestructorsRunner_28_29($3 + 4 | 0);
 __stack_pointer = $3 + 48 | 0;
 return $0 & 1;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2PrismaticJoint____29_28_29___invoke_b2PrismaticJoint__28char_20const__2c_20void_20_28b2PrismaticJoint____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 654;
 $0 = emscripten__internal__TypeID_b2PrismaticJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2PrismaticJoint____emscripten__internal__getContext_void_20_28b2PrismaticJoint____29_28_29__28void_20_28b2PrismaticJoint____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Fixture____29_28float_29___invoke_b2Fixture__28char_20const__2c_20void_20_28b2Fixture____29_28float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 575;
 $0 = emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Fixture____emscripten__internal__getContext_void_20_28b2Fixture____29_28float_29__28void_20_28b2Fixture____20const__29_28float_29_29_29_28float_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2Fixture__CreateProxies_28b2BroadPhase__2c_20b2Transform_20const__29($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 if (HEAP32[$0 + 28 >> 2]) {
  __assert_fail(12097, 5588, 128, 3548);
  wasm2js_trap();
 }
 $1 = HEAP32[$0 + 12 >> 2];
 wasm2js_i32$0 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1) | 0, 
 HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
 HEAP32[$3 + 16 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 16 >> 2] < HEAP32[$0 + 28 >> 2]) {
   HEAP32[$3 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$3 + 16 >> 2], 28);
   $1 = HEAP32[$0 + 12 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
   $1 = b2BroadPhase__CreateProxy_28b2AABB_20const__2c_20void__29(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 12 >> 2]);
   HEAP32[HEAP32[$3 + 12 >> 2] + 24 >> 2] = $1;
   HEAP32[HEAP32[$3 + 12 >> 2] + 16 >> 2] = $0;
   HEAP32[HEAP32[$3 + 12 >> 2] + 20 >> 2] = HEAP32[$3 + 16 >> 2];
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Fixture____29_28_29_20const___invoke_b2Fixture__28char_20const__2c_20bool_20_28b2Fixture____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 566;
 $0 = emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2Fixture____emscripten__internal__getContext_bool_20_28b2Fixture____29_28_29_20const__28bool_20_28b2Fixture____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2RevoluteJoint____29_28_29___invoke_b2RevoluteJoint__28char_20const__2c_20void_20_28b2RevoluteJoint____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 667;
 $0 = emscripten__internal__TypeID_b2RevoluteJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2RevoluteJoint____emscripten__internal__getContext_void_20_28b2RevoluteJoint____29_28_29__28void_20_28b2RevoluteJoint____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2DistanceJoint____29_28_29___invoke_b2DistanceJoint__28char_20const__2c_20void_20_28b2DistanceJoint____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 621;
 $0 = emscripten__internal__TypeID_b2DistanceJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2DistanceJoint____emscripten__internal__getContext_void_20_28b2DistanceJoint____29_28_29__28void_20_28b2DistanceJoint____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Draw____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29_2c_20void_2c_20b2Draw__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____invoke_28void_20_28b2Draw____20const__29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29_2c_20b2Draw__2c_20b2Vec2__2c_20b2Vec2__2c_20b2Color__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $2 = emscripten__internal__BindingType_b2Draw__2c_20void___fromWireType_28b2Draw__29(HEAP32[$5 + 24 >> 2]);
 $0 = HEAP32[$5 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$5 + 20 >> 2]), emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$5 + 16 >> 2]), emscripten__internal__GenericBindingType_b2Color___fromWireType_28b2Color__29(HEAP32[$5 + 12 >> 2]));
 __stack_pointer = $5 + 32 | 0;
}

function emscripten__internal__MethodInvoker_unsigned_20long_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28_29_20const_2c_20unsigned_20long_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const____invoke_28unsigned_20long_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______20const__29_28_29_20const_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20void___fromWireType_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[$0 | 0]($1) | 0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 $0 = emscripten__internal__BindingType_unsigned_20long_2c_20void___toWireType_28unsigned_20long_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2World____29_28_29_20const___invoke_b2World__28char_20const__2c_20b2Vec2_20_28b2World____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 521;
 $0 = emscripten__internal__TypeID_b2World_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2World_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2World_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Vec2_20_28b2World____emscripten__internal__getContext_b2Vec2_20_28b2World____29_28_29_20const__28b2Vec2_20_28b2World____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Fixture____29_28bool_29___invoke_b2Fixture__28char_20const__2c_20void_20_28b2Fixture____29_28bool_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 565;
 $0 = emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20bool___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20bool___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Fixture____emscripten__internal__getContext_void_20_28b2Fixture____29_28bool_29__28void_20_28b2Fixture____20const__29_28bool_29_29_29_28bool_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2____tree_end_node_std____2____tree_node_base_void______20std____2____tree_next_iter_5babi_v160004_5d_std____2____tree_end_node_std____2____tree_node_base_void______2c_20std____2____tree_node_base_void_____28std____2____tree_node_base_void____29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) {
   wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2____tree_node_base_void____20std____2____tree_min_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]), 
   HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   break label$1;
  }
  while (1) {
   if ((bool_20std____2____tree_is_left_child_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$1 + 8 >> 2]) ^ -1) & 1) {
    wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 8 >> 2]), 
    HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
    continue;
   }
   break;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] + 8 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function __lshrti3($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 label$1: {
  if ($5 & 64) {
   $7 = $4;
   $8 = $3;
   $9 = $5 + -64 | 0;
   $6 = $9 & 31;
   if (($9 & 63) >>> 0 >= 32) {
    $1 = $7 >>> $6 | 0;
   } else {
    $10 = $7 >>> $6 | 0;
    $1 = ((1 << $6) - 1 & $7) << 32 - $6 | $8 >>> $6;
   }
   $2 = $10;
   $3 = 0;
   $4 = 0;
   break label$1;
  }
  if (!$5) {
   break label$1;
  }
  $10 = $4;
  $7 = $3;
  $9 = 64 - $5 | 0;
  $6 = $9 & 31;
  if (($9 & 63) >>> 0 >= 32) {
   $8 = $7 << $6;
   $11 = 0;
  } else {
   $8 = (1 << $6) - 1 & $7 >>> 32 - $6 | $10 << $6;
   $11 = $7 << $6;
  }
  $12 = $8;
  $8 = $2;
  $10 = $1;
  $7 = 0;
  $9 = $5;
  $6 = $9 & 31;
  if (($9 & 63) >>> 0 >= 32) {
   $9 = $8 >>> $6 | 0;
  } else {
   $7 = $8 >>> $6 | 0;
   $9 = ((1 << $6) - 1 & $8) << 32 - $6 | $10 >>> $6;
  }
  $10 = $7;
  $8 = $11;
  $1 = $8 | $9;
  $7 = $12;
  $10 = $7 | $10;
  $2 = $10;
  $10 = $4;
  $7 = $3;
  $8 = 0;
  $9 = $5;
  $6 = $9 & 31;
  if (($9 & 63) >>> 0 >= 32) {
   $3 = $10 >>> $6 | 0;
  } else {
   $8 = $10 >>> $6 | 0;
   $3 = ((1 << $6) - 1 & $10) << 32 - $6 | $7 >>> $6;
  }
  $4 = $8;
 }
 $7 = $0;
 HEAP32[$7 >> 2] = $1;
 $8 = $2;
 HEAP32[$7 + 4 >> 2] = $8;
 HEAP32[$7 + 8 >> 2] = $3;
 $8 = $4;
 HEAP32[$7 + 12 >> 2] = $8;
}

function void_20emscripten__internal__RegisterClassMethod_b2Shape_20const__20_28__29_28b2FixtureDef__29___invoke_b2FixtureDef_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Shape_20const__20_28__29_28b2FixtureDef__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 562;
 $0 = emscripten__internal__TypeID_b2FixtureDef_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape_20const__2c_20b2FixtureDef____getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape_20const__2c_20b2FixtureDef____getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Shape_20const__20_28__emscripten__internal__getContext_b2Shape_20const__20_28__29_28b2FixtureDef__29__28b2Shape_20const__20_28__20const__29_28b2FixtureDef__29_29_29_28b2FixtureDef__29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Fixture____29_28int_29___invoke_b2Fixture__28char_20const__2c_20void_20_28b2Fixture____29_28int_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 578;
 $0 = emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20int___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20int___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Fixture____emscripten__internal__getContext_void_20_28b2Fixture____29_28int_29__28void_20_28b2Fixture____20const__29_28int_29_29_29_28int_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2JointDef__2c_20b2Body__29___invoke_b2JointDef_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28__29_28b2JointDef__2c_20b2Body__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 604;
 $0 = emscripten__internal__TypeID_b2JointDef_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2JointDef__2c_20b2Body____getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2JointDef__2c_20b2Body____getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28__emscripten__internal__getContext_void_20_28__29_28b2JointDef__2c_20b2Body__29__28void_20_28__20const__29_28b2JointDef__2c_20b2Body__29_29_29_28b2JointDef__2c_20b2Body__29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Vec2_20_28b2AABB____29_28_29_20const___invoke_b2AABB__28char_20const__2c_20b2Vec2_20_28b2AABB____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 501;
 $0 = emscripten__internal__TypeID_b2AABB_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Vec2_20_28b2AABB____emscripten__internal__getContext_b2Vec2_20_28b2AABB____29_28_29_20const__28b2Vec2_20_28b2AABB____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2StackAllocator__Allocate_28int_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAP32[$0 + 102796 >> 2] >= 32) {
  __assert_fail(3562, 5377, 42, 8780);
  wasm2js_trap();
 }
 HEAP32[$2 + 4 >> 2] = ($0 + 102412 | 0) + Math_imul(HEAP32[$0 + 102796 >> 2], 12);
 HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 label$2: {
  if ((HEAP32[$0 + 102400 >> 2] + HEAP32[$2 + 8 >> 2] | 0) > 102400) {
   $1 = b2Alloc_28int_29(HEAP32[$2 + 8 >> 2]);
   HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = $1;
   HEAP8[HEAP32[$2 + 4 >> 2] + 8 | 0] = 1;
   break label$2;
  }
  HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = HEAP32[$0 + 102400 >> 2] + $0;
  HEAP8[HEAP32[$2 + 4 >> 2] + 8 | 0] = 0;
  HEAP32[$0 + 102400 >> 2] = HEAP32[$2 + 8 >> 2] + HEAP32[$0 + 102400 >> 2];
 }
 HEAP32[$0 + 102404 >> 2] = HEAP32[$2 + 8 >> 2] + HEAP32[$0 + 102404 >> 2];
 wasm2js_i32$0 = $0, wasm2js_i32$1 = int_20b2Max_int__28int_2c_20int_29(HEAP32[$0 + 102408 >> 2], HEAP32[$0 + 102404 >> 2]), 
 HEAP32[wasm2js_i32$0 + 102408 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 102796 >> 2] = HEAP32[$0 + 102796 >> 2] + 1;
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[HEAP32[$2 + 4 >> 2] >> 2];
}

function emscripten__internal__MethodInvoker_bool_20_28b2AABB____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__29_20const_2c_20bool_2c_20b2AABB_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const____invoke_28bool_20_28b2AABB____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__29_20const_2c_20b2AABB_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $2 = emscripten__internal__BindingType_b2AABB_20const__2c_20void___fromWireType_28b2AABB_20const__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2RayCastOutput__2c_20void___fromWireType_28b2RayCastOutput__29(HEAP32[$4 + 4 >> 2]), emscripten__internal__GenericBindingType_b2RayCastInput___fromWireType_28b2RayCastInput__29(HEAP32[$4 >> 2])) & 1);
 __stack_pointer = $4 + 16 | 0;
 return $0 & 1;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20float_20_28b2Body____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 586;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28b2Body____emscripten__internal__getContext_float_20_28b2Body____29_28_29_20const__28float_20_28b2Body____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28b2AABB____29_28_29_20const___invoke_b2AABB__28char_20const__2c_20float_20_28b2AABB____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 502;
 $0 = emscripten__internal__TypeID_b2AABB_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28b2AABB____emscripten__internal__getContext_float_20_28b2AABB____29_28_29_20const__28float_20_28b2AABB____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2World____29_28_29_20const___invoke_b2World__28char_20const__2c_20bool_20_28b2World____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 519;
 $0 = emscripten__internal__TypeID_b2World_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2World_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2World_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2World____emscripten__internal__getContext_bool_20_28b2World____29_28_29_20const__28bool_20_28b2World____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Joint____29_28_29_20const___invoke_b2Joint__28char_20const__2c_20bool_20_28b2Joint____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 611;
 $0 = emscripten__internal__TypeID_b2Joint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2Joint____emscripten__internal__getContext_bool_20_28b2Joint____29_28_29_20const__28bool_20_28b2Joint____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_bool_20_28b2PolygonShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_2c_20bool_2c_20b2PolygonShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____invoke_28bool_20_28b2PolygonShape____20const__29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_2c_20b2PolygonShape_20const__2c_20b2Transform__2c_20b2Vec2__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $2 = emscripten__internal__BindingType_b2PolygonShape_20const__2c_20void___fromWireType_28b2PolygonShape_20const__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Transform___fromWireType_28b2Transform__29(HEAP32[$4 + 4 >> 2]), emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$4 >> 2])) & 1);
 __stack_pointer = $4 + 16 | 0;
 return $0 & 1;
}

function std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______construct_at_end_28unsigned_20long_2c_20b2Vec2_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2______ConstructTransaction___ConstructTransaction_5babi_v160004_5d_28b2Vec2___2c_20unsigned_20long_29($3 + 8 | 0, $0 + 8 | 0, HEAP32[$3 + 24 >> 2]);
 while (1) {
  if (HEAP32[$3 + 8 >> 2] != HEAP32[$3 + 12 >> 2]) {
   void_20std____2__allocator_traits_std____2__allocator_b2Vec2____construct_5babi_v160004_5d_b2Vec2_2c_20b2Vec2_20const__2c_20void__28std____2__allocator_b2Vec2___2c_20b2Vec2__2c_20b2Vec2_20const__29(std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______alloc_5babi_v160004_5d_28_29($0), b2Vec2__20std____2____to_address_5babi_v160004_5d_b2Vec2__28b2Vec2__29(HEAP32[$3 + 8 >> 2]), HEAP32[$3 + 20 >> 2]);
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 8;
   continue;
  }
  break;
 }
 std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2______ConstructTransaction____ConstructTransaction_5babi_v160004_5d_28_29($3 + 8 | 0);
 __stack_pointer = $3 + 32 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29_2c_20void_2c_20b2Draw__2c_20b2Vec2_20const__2c_20float_2c_20b2Color_20const____invoke_28void_20_28b2Draw____20const__29_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29_2c_20b2Draw__2c_20b2Vec2__2c_20float_2c_20b2Color__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAPF32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $2 = emscripten__internal__BindingType_b2Draw__2c_20void___fromWireType_28b2Draw__29(HEAP32[$5 + 24 >> 2]);
 $0 = HEAP32[$5 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$5 + 20 >> 2]), emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$5 + 16 >> 2]), emscripten__internal__GenericBindingType_b2Color___fromWireType_28b2Color__29(HEAP32[$5 + 12 >> 2]));
 __stack_pointer = $5 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28bool_29___invoke_b2World__28char_20const__2c_20void_20_28b2World____29_28bool_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 518;
 $0 = emscripten__internal__TypeID_b2World_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20bool___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20bool___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28bool_29__28void_20_28b2World____20const__29_28bool_29_29_29_28bool_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28float_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 588;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20float___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20float___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28float_29__28void_20_28b2Body____20const__29_28float_29_29_29_28float_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Draw____29_28unsigned_20int_2c_20int_2c_20b2Color_20const__29_2c_20void_2c_20b2Draw__2c_20unsigned_20int_2c_20int_2c_20b2Color_20const____invoke_28void_20_28b2Draw____20const__29_28unsigned_20int_2c_20int_2c_20b2Color_20const__29_2c_20b2Draw__2c_20unsigned_20int_2c_20int_2c_20b2Color__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $2 = emscripten__internal__BindingType_b2Draw__2c_20void___fromWireType_28b2Draw__29(HEAP32[$5 + 24 >> 2]);
 $0 = HEAP32[$5 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$5 + 20 >> 2]), emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$5 + 16 >> 2]), emscripten__internal__GenericBindingType_b2Color___fromWireType_28b2Color__29(HEAP32[$5 + 12 >> 2]));
 __stack_pointer = $5 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_int_20_28b2Shape____29_28_29_20const___invoke_b2Shape__28char_20const__2c_20int_20_28b2Shape____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 523;
 $0 = emscripten__internal__TypeID_b2Shape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], int_20_28b2Shape____emscripten__internal__getContext_int_20_28b2Shape____29_28_29_20const__28int_20_28b2Shape____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_bool_20_28b2CircleShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_2c_20bool_2c_20b2CircleShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____invoke_28bool_20_28b2CircleShape____20const__29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_2c_20b2CircleShape_20const__2c_20b2Transform__2c_20b2Vec2__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $2 = emscripten__internal__BindingType_b2CircleShape_20const__2c_20void___fromWireType_28b2CircleShape_20const__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Transform___fromWireType_28b2Transform__29(HEAP32[$4 + 4 >> 2]), emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$4 >> 2])) & 1);
 __stack_pointer = $4 + 16 | 0;
 return $0 & 1;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2Body____29_28_29_20const___invoke_b2Body__28char_20const__2c_20bool_20_28b2Body____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 599;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2Body____emscripten__internal__getContext_bool_20_28b2Body____29_28_29_20const__28bool_20_28b2Body____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_bool_20_28b2AABB____29_28_29_20const___invoke_b2AABB__28char_20const__2c_20bool_20_28b2AABB____29_28_29_20const_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 500;
 $0 = emscripten__internal__TypeID_b2AABB_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], bool_20_28b2AABB____emscripten__internal__getContext_bool_20_28b2AABB____29_28_29_20const__28bool_20_28b2AABB____20const__29_28_29_20const_29_29_28_29_20const($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2WheelJoint____29_28_29___invoke_b2WheelJoint__28char_20const__2c_20void_20_28b2WheelJoint____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 699;
 $0 = emscripten__internal__TypeID_b2WheelJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2WheelJoint____emscripten__internal__getContext_void_20_28b2WheelJoint____29_28_29__28void_20_28b2WheelJoint____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2MouseJoint____29_28_29___invoke_b2MouseJoint__28char_20const__2c_20void_20_28b2MouseJoint____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 641;
 $0 = emscripten__internal__TypeID_b2MouseJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2MouseJoint____emscripten__internal__getContext_void_20_28b2MouseJoint____29_28_29__28void_20_28b2MouseJoint____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2MotorJoint____29_28_29___invoke_b2MotorJoint__28char_20const__2c_20void_20_28b2MotorJoint____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 631;
 $0 = emscripten__internal__TypeID_b2MotorJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2MotorJoint____emscripten__internal__getContext_void_20_28b2MotorJoint____29_28_29__28void_20_28b2MotorJoint____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long_29_2c_20emscripten__val_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long___invoke_28emscripten__val_20_28___29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long_29_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[HEAP32[$3 + 12 >> 2] >> 2];
 FUNCTION_TABLE[$0 | 0]($3, emscripten__internal__GenericBindingType_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____fromWireType_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29(HEAP32[$3 + 8 >> 2]), emscripten__internal__BindingType_unsigned_20long_2c_20void___fromWireType_28unsigned_20long_29(HEAP32[$3 + 4 >> 2]));
 $0 = emscripten__internal__BindingType_emscripten__val_2c_20void___toWireType_28emscripten__val_20const__29($3);
 emscripten__val___val_28_29($3);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28bool_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28bool_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 598;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20bool___getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20bool___getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28bool_29__28void_20_28b2Body____20const__29_28bool_29_29_29_28bool_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2__unique_ptr_std____2____tree_node_b2Fixture__2c_20void___2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______unique_ptr_5babi_v160004_5d_true_2c_20void__28std____2____tree_node_b2Fixture__2c_20void____2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_std____2____tree_node_b2Fixture__2c_20void____2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_________compressed_pair_5babi_v160004_5d_std____2____tree_node_b2Fixture__2c_20void_____2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______28std____2____tree_node_b2Fixture__2c_20void_____2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______29($0, $3 + 8 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______tree_28std____2__less_b2Fixture___20const__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 std____2____compressed_pair_std____2____tree_end_node_std____2____tree_node_base_void_____2c_20std____2__allocator_std____2____tree_node_b2Fixture__2c_20void________compressed_pair_5babi_v160004_5d_true_2c_20void__28_29($0 + 4 | 0);
 HEAP32[$2 + 4 >> 2] = 0;
 std____2____compressed_pair_unsigned_20long_2c_20std____2__less_b2Fixture_______compressed_pair_5babi_v160004_5d_int_2c_20std____2__less_b2Fixture___20const___28int___2c_20std____2__less_b2Fixture___20const__29($0 + 8 | 0, $2 + 4 | 0, HEAP32[$2 + 8 >> 2]);
 $1 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______end_node_5babi_v160004_5d_28_29($0);
 wasm2js_i32$0 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______begin_node_5babi_v160004_5d_28_29($0), 
 wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2__pair_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____20std____2____move_5babi_v160004_5d_std____2___ClassicAlgPolicy_2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $1;
 HEAP32[$4 + 24 >> 2] = $2;
 HEAP32[$4 + 20 >> 2] = $3;
 HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 20 >> 2];
 std____2__pair_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____20std____2____dispatch_copy_or_move_5babi_v160004_5d_std____2___ClassicAlgPolicy_2c_20std____2____move_loop_std____2___ClassicAlgPolicy__2c_20std____2____move_trivial_2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29($0, HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
 __stack_pointer = $4 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2WeldJoint____29_28_29___invoke_b2WeldJoint__28char_20const__2c_20void_20_28b2WeldJoint____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 687;
 $0 = emscripten__internal__TypeID_b2WeldJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2WeldJoint____emscripten__internal__getContext_void_20_28b2WeldJoint____29_28_29__28void_20_28b2WeldJoint____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2RopeJoint____29_28_29___invoke_b2RopeJoint__28char_20const__2c_20void_20_28b2RopeJoint____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 678;
 $0 = emscripten__internal__TypeID_b2RopeJoint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2RopeJoint____emscripten__internal__getContext_void_20_28b2RopeJoint____29_28_29__28void_20_28b2RopeJoint____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_bool_20_28b2EdgeShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_2c_20bool_2c_20b2EdgeShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____invoke_28bool_20_28b2EdgeShape____20const__29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_2c_20b2EdgeShape_20const__2c_20b2Transform__2c_20b2Vec2__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $2 = emscripten__internal__BindingType_b2EdgeShape_20const__2c_20void___fromWireType_28b2EdgeShape_20const__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Transform___fromWireType_28b2Transform__29(HEAP32[$4 + 4 >> 2]), emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$4 >> 2])) & 1);
 __stack_pointer = $4 + 16 | 0;
 return $0 & 1;
}

function emscripten__internal__MethodInvoker_void_20_28b2Body____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29_2c_20void_2c_20b2Body__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool___invoke_28void_20_28b2Body____20const__29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29_2c_20b2Body__2c_20b2Vec2__2c_20b2Vec2__2c_20bool_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP8[$5 + 15 | 0] = $4 & 1;
 $2 = emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$5 + 24 >> 2]);
 $0 = HEAP32[$5 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$5 + 20 >> 2]), emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$5 + 16 >> 2]), emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29(HEAP8[$5 + 15 | 0] & 1) & 1);
 __stack_pointer = $5 + 32 | 0;
}

function emscripten__internal__MethodInvoker_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28_29_20const_2c_20unsigned_20long_2c_20std____2__vector_int_2c_20std____2__allocator_int___20const____invoke_28unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int______20const__29_28_29_20const_2c_20std____2__vector_int_2c_20std____2__allocator_int___20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20void___fromWireType_28std____2__vector_int_2c_20std____2__allocator_int___20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[$0 | 0]($1) | 0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 $0 = emscripten__internal__BindingType_unsigned_20long_2c_20void___toWireType_28unsigned_20long_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2ContactSolver__StoreImpulses_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 $0 = HEAP32[$1 + 28 >> 2];
 HEAP32[$1 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 24 >> 2] < HEAP32[$0 + 48 >> 2]) {
   HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 40 >> 2] + Math_imul(HEAP32[$1 + 24 >> 2], 156);
   wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Contact__GetManifold_28_29(HEAP32[HEAP32[$0 + 44 >> 2] + (HEAP32[HEAP32[$1 + 20 >> 2] + 152 >> 2] << 2) >> 2]), 
   HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
   HEAP32[$1 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$1 + 12 >> 2] < HEAP32[HEAP32[$1 + 20 >> 2] + 148 >> 2]) {
     HEAPF32[(HEAP32[$1 + 16 >> 2] + Math_imul(HEAP32[$1 + 12 >> 2], 20) | 0) + 8 >> 2] = HEAPF32[(HEAP32[$1 + 20 >> 2] + Math_imul(HEAP32[$1 + 12 >> 2], 36) | 0) + 16 >> 2];
     HEAPF32[(HEAP32[$1 + 16 >> 2] + Math_imul(HEAP32[$1 + 12 >> 2], 20) | 0) + 12 >> 2] = HEAPF32[(HEAP32[$1 + 20 >> 2] + Math_imul(HEAP32[$1 + 12 >> 2], 36) | 0) + 20 >> 2];
     HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2AABB__2c_20b2AABB__29___invoke_b2AABB_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28__29_28b2AABB__2c_20b2AABB__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 503;
 $0 = emscripten__internal__TypeID_b2AABB_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2AABB__2c_20b2AABB____getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2AABB__2c_20b2AABB____getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28__emscripten__internal__getContext_void_20_28__29_28b2AABB__2c_20b2AABB__29__28void_20_28__20const__29_28b2AABB__2c_20b2AABB__29_29_29_28b2AABB__2c_20b2AABB__29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2Shape__2c_20float_29___invoke_b2Shape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28__29_28b2Shape__2c_20float_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 528;
 $0 = emscripten__internal__TypeID_b2Shape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2Shape__2c_20float___getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2Shape__2c_20float___getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28__emscripten__internal__getContext_void_20_28__29_28b2Shape__2c_20float_29__28void_20_28__20const__29_28b2Shape__2c_20float_29_29_29_28b2Shape__2c_20float_29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_v160004_5d_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$3 + 28 >> 2] = $0;
 std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char______compressed_pair_5babi_v160004_5d_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $3 + 15 | 0, $3 + 14 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______init_28char_20const__2c_20unsigned_20long_29($0, HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
 void_20std____2____debug_db_insert_c_5babi_v160004_5d_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____29($0);
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Fixture____29_28_29___invoke_b2Fixture__28char_20const__2c_20void_20_28b2Fixture____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 569;
 $0 = emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Fixture____emscripten__internal__getContext_void_20_28b2Fixture____29_28_29__28void_20_28b2Fixture____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function __ashlti3($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 label$1: {
  if ($5 & 64) {
   $7 = $2;
   $8 = $1;
   $5 = $5 + -64 | 0;
   $6 = $5 & 31;
   if (($5 & 63) >>> 0 >= 32) {
    $9 = $8 << $6;
    $3 = 0;
   } else {
    $9 = (1 << $6) - 1 & $8 >>> 32 - $6 | $7 << $6;
    $3 = $8 << $6;
   }
   $4 = $9;
   $1 = 0;
   $2 = 0;
   break label$1;
  }
  if (!$5) {
   break label$1;
  }
  $10 = $5;
  $9 = $4;
  $7 = $3;
  $6 = $5 & 31;
  if (($5 & 63) >>> 0 >= 32) {
   $8 = $7 << $6;
   $3 = 0;
  } else {
   $8 = (1 << $6) - 1 & $7 >>> 32 - $6 | $9 << $6;
   $3 = $7 << $6;
  }
  $4 = $8;
  $8 = $2;
  $9 = $1;
  $7 = 0;
  $5 = 64 - $5 | 0;
  $6 = $5 & 31;
  if (($5 & 63) >>> 0 >= 32) {
   $5 = $8 >>> $6 | 0;
  } else {
   $7 = $8 >>> $6 | 0;
   $5 = ((1 << $6) - 1 & $8) << 32 - $6 | $9 >>> $6;
  }
  $9 = $7;
  $8 = $3;
  $3 = $8 | $5;
  $7 = $4;
  $9 = $7 | $9;
  $4 = $9;
  $9 = $2;
  $7 = $1;
  $5 = $10;
  $6 = $5 & 31;
  if (($5 & 63) >>> 0 >= 32) {
   $8 = $7 << $6;
   $1 = 0;
  } else {
   $8 = (1 << $6) - 1 & $7 >>> 32 - $6 | $9 << $6;
   $1 = $7 << $6;
  }
  $2 = $8;
 }
 $7 = $0;
 HEAP32[$7 >> 2] = $1;
 $8 = $2;
 HEAP32[$7 + 4 >> 2] = $8;
 HEAP32[$7 + 8 >> 2] = $3;
 $8 = $4;
 HEAP32[$7 + 12 >> 2] = $8;
}

function emscripten__internal__MethodInvoker_bool_20_28b2Shape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_2c_20bool_2c_20b2Shape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____invoke_28bool_20_28b2Shape____20const__29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_2c_20b2Shape_20const__2c_20b2Transform__2c_20b2Vec2__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $2 = emscripten__internal__BindingType_b2Shape_20const__2c_20void___fromWireType_28b2Shape_20const__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Transform___fromWireType_28b2Transform__29(HEAP32[$4 + 4 >> 2]), emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$4 >> 2])) & 1);
 __stack_pointer = $4 + 16 | 0;
 return $0 & 1;
}

function std____2__reverse_iterator_b2Vec2___20std____2____uninitialized_allocator_move_if_noexcept_5babi_v160004_5d_std____2__allocator_b2Vec2__2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20b2Vec2_2c_20void__28std____2__allocator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 24 >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 20 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$4 + 16 >> 2];
 wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__reverse_iterator_b2Vec2___20std____2__move_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]), 
 HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long_29_2c_20emscripten__val_2c_20std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long___invoke_28emscripten__val_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long_29_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[HEAP32[$3 + 12 >> 2] >> 2];
 FUNCTION_TABLE[$0 | 0]($3, emscripten__internal__GenericBindingType_std____2__vector_int_2c_20std____2__allocator_int_____fromWireType_28std____2__vector_int_2c_20std____2__allocator_int____29(HEAP32[$3 + 8 >> 2]), emscripten__internal__BindingType_unsigned_20long_2c_20void___fromWireType_28unsigned_20long_29(HEAP32[$3 + 4 >> 2]));
 $0 = emscripten__internal__BindingType_emscripten__val_2c_20void___toWireType_28emscripten__val_20const__29($3);
 emscripten__val___val_28_29($3);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function b2DynamicTree__b2DynamicTree_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$0 >> 2] = -1;
 HEAP32[$0 + 12 >> 2] = 16;
 HEAP32[$0 + 8 >> 2] = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Alloc_28int_29(Math_imul(HEAP32[$0 + 12 >> 2], 40)), 
 HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 __memset(HEAP32[$0 + 4 >> 2], 0, Math_imul(HEAP32[$0 + 12 >> 2], 40));
 HEAP32[$1 + 4 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 4 >> 2] < (HEAP32[$0 + 12 >> 2] - 1 | 0)) {
   HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$1 + 4 >> 2], 40) | 0) + 20 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
   HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$1 + 4 >> 2], 40) | 0) + 32 >> 2] = -1;
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$0 + 12 >> 2] - 1 | 0, 40) | 0) + 20 >> 2] = -1;
 HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$0 + 12 >> 2] - 1 | 0, 40) | 0) + 32 >> 2] = -1;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2World____29_28_29___invoke_b2World__28char_20const__2c_20void_20_28b2World____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 510;
 $0 = emscripten__internal__TypeID_b2World_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28_29__28void_20_28b2World____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Joint____29_28_29___invoke_b2Joint__28char_20const__2c_20void_20_28b2Joint____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 612;
 $0 = emscripten__internal__TypeID_b2Joint_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Joint____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Joint____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Joint____emscripten__internal__getContext_void_20_28b2Joint____29_28_29__28void_20_28b2Joint____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28int_20const__29_2c_20void_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20int_20const____invoke_28void_20_28std____2__vector_int_2c_20std____2__allocator_int______20const__29_28int_20const__29_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_std____2__vector_int_2c_20std____2__allocator_int____2c_20void___fromWireType_28std____2__vector_int_2c_20std____2__allocator_int____29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $3, wasm2js_i32$1 = emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$3 + 4 >> 2]), 
 HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 FUNCTION_TABLE[$0 | 0]($2, $3);
 __stack_pointer = $3 + 16 | 0;
}

function b2Mat33__GetInverse22_28b2Mat33__29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 HEAPF32[$2 + 20 >> 2] = HEAPF32[$0 >> 2];
 HEAPF32[$2 + 16 >> 2] = HEAPF32[$0 + 12 >> 2];
 HEAPF32[$2 + 12 >> 2] = HEAPF32[$0 + 4 >> 2];
 HEAPF32[$2 + 8 >> 2] = HEAPF32[$0 + 16 >> 2];
 HEAPF32[$2 + 4 >> 2] = Math_fround(HEAPF32[$2 + 20 >> 2] * HEAPF32[$2 + 8 >> 2]) - Math_fround(HEAPF32[$2 + 16 >> 2] * HEAPF32[$2 + 12 >> 2]);
 if (HEAPF32[$2 + 4 >> 2] != Math_fround(0)) {
  HEAPF32[$2 + 4 >> 2] = Math_fround(1) / HEAPF32[$2 + 4 >> 2];
 }
 HEAPF32[HEAP32[$2 + 24 >> 2] >> 2] = HEAPF32[$2 + 4 >> 2] * HEAPF32[$2 + 8 >> 2];
 HEAPF32[HEAP32[$2 + 24 >> 2] + 12 >> 2] = Math_fround(-HEAPF32[$2 + 4 >> 2]) * HEAPF32[$2 + 16 >> 2];
 HEAPF32[HEAP32[$2 + 24 >> 2] + 8 >> 2] = 0;
 HEAPF32[HEAP32[$2 + 24 >> 2] + 4 >> 2] = Math_fround(-HEAPF32[$2 + 4 >> 2]) * HEAPF32[$2 + 12 >> 2];
 HEAPF32[HEAP32[$2 + 24 >> 2] + 16 >> 2] = HEAPF32[$2 + 4 >> 2] * HEAPF32[$2 + 20 >> 2];
 HEAPF32[HEAP32[$2 + 24 >> 2] + 20 >> 2] = 0;
 HEAPF32[HEAP32[$2 + 24 >> 2] + 24 >> 2] = 0;
 HEAPF32[HEAP32[$2 + 24 >> 2] + 28 >> 2] = 0;
 HEAPF32[HEAP32[$2 + 24 >> 2] + 32 >> 2] = 0;
}

function void_20emscripten__internal__RegisterClassMethod_unsigned_20int_20_28__29_28b2Body__29___invoke_b2Body_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20unsigned_20int_20_28__29_28b2Body__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 601;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_unsigned_20int_2c_20b2Body____getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_unsigned_20int_2c_20b2Body____getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], unsigned_20int_20_28__emscripten__internal__getContext_unsigned_20int_20_28__29_28b2Body__29__28unsigned_20int_20_28__20const__29_28b2Body__29_29_29_28b2Body__29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2____split_buffer_int_2c_20std____2__allocator_int_______construct_at_end_28unsigned_20long_2c_20int_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 std____2____split_buffer_int_2c_20std____2__allocator_int______ConstructTransaction___ConstructTransaction_5babi_v160004_5d_28int___2c_20unsigned_20long_29($3 + 8 | 0, $0 + 8 | 0, HEAP32[$3 + 24 >> 2]);
 while (1) {
  if (HEAP32[$3 + 8 >> 2] != HEAP32[$3 + 12 >> 2]) {
   void_20std____2__allocator_traits_std____2__allocator_int____construct_5babi_v160004_5d_int_2c_20int_20const__2c_20void__28std____2__allocator_int___2c_20int__2c_20int_20const__29(std____2____split_buffer_int_2c_20std____2__allocator_int_______alloc_5babi_v160004_5d_28_29($0), int__20std____2____to_address_5babi_v160004_5d_int__28int__29(HEAP32[$3 + 8 >> 2]), HEAP32[$3 + 20 >> 2]);
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 4;
   continue;
  }
  break;
 }
 std____2____split_buffer_int_2c_20std____2__allocator_int______ConstructTransaction____ConstructTransaction_5babi_v160004_5d_28_29($3 + 8 | 0);
 __stack_pointer = $3 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28b2Body____29_28_29___invoke_b2Body__28char_20const__2c_20void_20_28b2Body____29_28_29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = 594;
 $0 = emscripten__internal__TypeID_b2Body_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body____getCount_28_29_20const($2 + 11 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body____getTypes_28_29_20const($2 + 11 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28_29__28void_20_28b2Body____20const__29_28_29_29_29_28_29($2 + 16 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2RayCastCallbackWrapper__29___invoke_b2RayCastCallbackWrapper__28char_20const__2c_20void_20_28__29_28b2RayCastCallbackWrapper__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 479;
 $0 = emscripten__internal__TypeID_b2RayCastCallbackWrapper_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2RayCastCallbackWrapper____getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2RayCastCallbackWrapper____getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28__emscripten__internal__getContext_void_20_28__29_28b2RayCastCallbackWrapper__29__28void_20_28__20const__29_28b2RayCastCallbackWrapper__29_29_29_28b2RayCastCallbackWrapper__29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2ContactListenerWrapper__29___invoke_b2ContactListenerWrapper__28char_20const__2c_20void_20_28__29_28b2ContactListenerWrapper__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 487;
 $0 = emscripten__internal__TypeID_b2ContactListenerWrapper_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2ContactListenerWrapper____getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2ContactListenerWrapper____getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28__emscripten__internal__getContext_void_20_28__29_28b2ContactListenerWrapper__29__28void_20_28__20const__29_28b2ContactListenerWrapper__29_29_29_28b2ContactListenerWrapper__29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2RopeJoint__Dump_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 108 >> 2] = $0;
 $0 = HEAP32[$1 + 108 >> 2];
 HEAP32[$1 + 104 >> 2] = HEAP32[HEAP32[$0 + 48 >> 2] + 8 >> 2];
 HEAP32[$1 + 100 >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] + 8 >> 2];
 b2Log_28char_20const__2c_20____29(13497, 0);
 HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 104 >> 2];
 b2Log_28char_20const__2c_20____29(13733, $1 - -64 | 0);
 HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 100 >> 2];
 b2Log_28char_20const__2c_20____29(13707, $1 + 48 | 0);
 HEAP32[$1 + 32 >> 2] = HEAP8[$0 + 61 | 0] & 1;
 b2Log_28char_20const__2c_20____29(14923, $1 + 32 | 0);
 $2 = HEAPF32[$0 + 68 >> 2];
 HEAPF64[$1 + 24 >> 3] = HEAPF32[$0 + 72 >> 2];
 HEAPF64[$1 + 16 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14234, $1 + 16 | 0);
 $2 = HEAPF32[$0 + 76 >> 2];
 HEAPF64[$1 + 8 >> 3] = HEAPF32[$0 + 80 >> 2];
 HEAPF64[$1 >> 3] = $2;
 b2Log_28char_20const__2c_20____29(14109, $1);
 HEAPF64[$1 + 80 >> 3] = HEAPF32[$0 + 84 >> 2];
 b2Log_28char_20const__2c_20____29(12802, $1 + 80 | 0);
 HEAP32[$1 + 96 >> 2] = HEAP32[$0 + 56 >> 2];
 b2Log_28char_20const__2c_20____29(14524, $1 + 96 | 0);
 __stack_pointer = $1 + 112 | 0;
}

function emscripten__internal__FunctionInvoker_void_20_28__29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29_2c_20void_2c_20b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int___invoke_28void_20_28___29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29_2c_20b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[HEAP32[$4 + 12 >> 2] >> 2];
 FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_b2PolygonShape__2c_20void___fromWireType_28b2PolygonShape__29(HEAP32[$4 + 8 >> 2]), emscripten__internal__GenericBindingType_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____fromWireType_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29(HEAP32[$4 + 4 >> 2]), emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$4 >> 2]));
 __stack_pointer = $4 + 16 | 0;
}

function emscripten__internal__MethodCaller_void_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____call_28emscripten___EM_VAL__2c_20char_20const__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 wasm2js_i32$0 = $5, wasm2js_i32$1 = emscripten__internal__Signature_void_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____get_method_caller_28_29(), 
 HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
 emscripten__internal__WireTypePack_b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____WireTypePack_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29($5, HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], HEAP32[$5 + 28 >> 2]);
 _emval_call_void_method(HEAP32[$5 + 24 >> 2], HEAP32[$5 + 44 >> 2], HEAP32[$5 + 40 >> 2], emscripten__internal__WireTypePack_b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____operator_20void_20const__28_29_20const($5) | 0);
 __stack_pointer = $5 + 48 | 0;
}

function emscripten__internal__MethodInvoker_float_20_28b2PrismaticJoint____29_28float_29_20const_2c_20float_2c_20b2PrismaticJoint_20const__2c_20float___invoke_28float_20_28b2PrismaticJoint____20const__29_28float_29_20const_2c_20b2PrismaticJoint_20const__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = emscripten__internal__BindingType_b2PrismaticJoint_20const__2c_20void___fromWireType_28b2PrismaticJoint_20const__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0]($4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]))), 
 HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
 $2 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($3);
 __stack_pointer = $3 + 16 | 0;
 return Math_fround($2);
}

function b2World__CreateBody_28b2BodyDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 if (b2World__IsLocked_28_29_20const($0) & 1) {
  __assert_fail(8961, 6054, 117, 1677);
  wasm2js_trap();
 }
 label$2: {
  if (b2World__IsLocked_28_29_20const($0) & 1) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$2;
  }
  wasm2js_i32$0 = $2, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29($0, 152), 
  HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  $1 = HEAP32[$2 + 16 >> 2];
  b2Body__b2Body_28b2BodyDef_20const__2c_20b2World__29($1, HEAP32[$2 + 20 >> 2], $0);
  HEAP32[$2 + 12 >> 2] = $1;
  HEAP32[HEAP32[$2 + 12 >> 2] + 92 >> 2] = 0;
  HEAP32[HEAP32[$2 + 12 >> 2] + 96 >> 2] = HEAP32[$0 + 102948 >> 2];
  if (HEAP32[$0 + 102948 >> 2]) {
   HEAP32[HEAP32[$0 + 102948 >> 2] + 92 >> 2] = HEAP32[$2 + 12 >> 2];
  }
  HEAP32[$0 + 102948 >> 2] = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 102956 >> 2] = HEAP32[$0 + 102956 >> 2] + 1;
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function b2GearJoint__Dump_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 128 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 124 >> 2] = $0;
 $0 = HEAP32[$1 + 124 >> 2];
 HEAP32[$1 + 120 >> 2] = HEAP32[HEAP32[$0 + 48 >> 2] + 8 >> 2];
 HEAP32[$1 + 116 >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] + 8 >> 2];
 HEAP32[$1 + 112 >> 2] = HEAP32[HEAP32[$0 + 68 >> 2] + 56 >> 2];
 HEAP32[$1 + 108 >> 2] = HEAP32[HEAP32[$0 + 72 >> 2] + 56 >> 2];
 b2Log_28char_20const__2c_20____29(13400, 0);
 HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 120 >> 2];
 b2Log_28char_20const__2c_20____29(13733, $1 - -64 | 0);
 HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 116 >> 2];
 b2Log_28char_20const__2c_20____29(13707, $1 + 48 | 0);
 HEAP32[$1 + 32 >> 2] = HEAP8[$0 + 61 | 0] & 1;
 b2Log_28char_20const__2c_20____29(14923, $1 + 32 | 0);
 HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 112 >> 2];
 b2Log_28char_20const__2c_20____29(13680, $1 + 16 | 0);
 HEAP32[$1 >> 2] = HEAP32[$1 + 108 >> 2];
 b2Log_28char_20const__2c_20____29(13653, $1);
 HEAPF64[$1 + 80 >> 3] = HEAPF32[$0 + 152 >> 2];
 b2Log_28char_20const__2c_20____29(12598, $1 + 80 | 0);
 HEAP32[$1 + 96 >> 2] = HEAP32[$0 + 56 >> 2];
 b2Log_28char_20const__2c_20____29(14524, $1 + 96 | 0);
 __stack_pointer = $1 + 128 | 0;
}

function b2Body__ApplyLinearImpulse_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP8[$4 + 19 | 0] = $3;
 $0 = HEAP32[$4 + 28 >> 2];
 label$1: {
  if (HEAP32[$0 >> 2] != 2) {
   break label$1;
  }
  if (!(!(HEAP8[$4 + 19 | 0] & 1) | HEAPU16[$0 + 4 >> 1] & 2)) {
   b2Body__SetAwake_28bool_29($0, 1);
  }
  if (!(HEAPU16[$0 + 4 >> 1] & 2)) {
   break label$1;
  }
  operator__28float_2c_20b2Vec2_20const__29($4 + 8 | 0, HEAPF32[$0 + 120 >> 2], HEAP32[$4 + 24 >> 2]);
  b2Vec2__operator___28b2Vec2_20const__29($0 - -64 | 0, $4 + 8 | 0);
  $5 = HEAPF32[$0 + 128 >> 2];
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($4, HEAP32[$4 + 20 >> 2], $0 + 44 | 0);
  wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround(Math_fround($5 * b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($4, HEAP32[$4 + 24 >> 2])) + HEAPF32[$0 + 72 >> 2]), 
  HEAPF32[wasm2js_i32$0 + 72 >> 2] = wasm2js_f32$0;
 }
 __stack_pointer = $4 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_b2Body__20_28__29_28b2JointDef__29___invoke_b2JointDef_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Body__20_28__29_28b2JointDef__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 605;
 $0 = emscripten__internal__TypeID_b2JointDef_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Body__2c_20b2JointDef____getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Body__2c_20b2JointDef____getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], b2Body__20_28__emscripten__internal__getContext_b2Body__20_28__29_28b2JointDef__29__28b2Body__20_28__20const__29_28b2JointDef__29_29_29_28b2JointDef__29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______annotate_delete_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______annotate_contiguous_container_5babi_v160004_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____data_5babi_v160004_5d_28_29_20const($0), std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____data_5babi_v160004_5d_28_29_20const($0) + (std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____capacity_5babi_v160004_5d_28_29_20const($0) << 3) | 0, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____data_5babi_v160004_5d_28_29_20const($0) + (std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____size_5babi_v160004_5d_28_29_20const($0) << 3) | 0, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____data_5babi_v160004_5d_28_29_20const($0) + (std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____capacity_5babi_v160004_5d_28_29_20const($0) << 3) | 0);
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__internal__MethodInvoker_float_20_28b2RevoluteJoint____29_28float_29_20const_2c_20float_2c_20b2RevoluteJoint_20const__2c_20float___invoke_28float_20_28b2RevoluteJoint____20const__29_28float_29_20const_2c_20b2RevoluteJoint_20const__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = emscripten__internal__BindingType_b2RevoluteJoint_20const__2c_20void___fromWireType_28b2RevoluteJoint_20const__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0]($4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]))), 
 HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
 $2 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($3);
 __stack_pointer = $3 + 16 | 0;
 return Math_fround($2);
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2QueryCallbackWrapper__29___invoke_b2QueryCallbackWrapper__28char_20const__2c_20void_20_28__29_28b2QueryCallbackWrapper__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 474;
 $0 = emscripten__internal__TypeID_b2QueryCallbackWrapper_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2QueryCallbackWrapper____getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2QueryCallbackWrapper____getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28__emscripten__internal__getContext_void_20_28__29_28b2QueryCallbackWrapper__29__28void_20_28__20const__29_28b2QueryCallbackWrapper__29_29_29_28b2QueryCallbackWrapper__29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_b2Fixture__20_28b2Body____29_28b2Shape_20const__2c_20float_29_2c_20b2Fixture__2c_20b2Body__2c_20b2Shape_20const__2c_20float___invoke_28b2Fixture__20_28b2Body____20const__29_28b2Shape_20const__2c_20float_29_2c_20b2Body__2c_20b2Shape_20const__2c_20float_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 $2 = emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_b2Fixture__2c_20void___toWireType_28b2Fixture__29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2Shape_20const__2c_20void___fromWireType_28b2Shape_20const__29(HEAP32[$4 + 4 >> 2]), emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$4 >> 2])) | 0);
 __stack_pointer = $4 + 16 | 0;
 return $0 | 0;
}

function std____2__reverse_iterator_int___20std____2____uninitialized_allocator_move_if_noexcept_5babi_v160004_5d_std____2__allocator_int__2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20int_2c_20void__28std____2__allocator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 24 >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 20 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$4 + 16 >> 2];
 wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__reverse_iterator_int___20std____2__move_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]), 
 HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function b2DistanceJoint__b2DistanceJoint_28b2DistanceJointDef_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Joint__b2Joint_28b2JointDef_20const__29($1, HEAP32[$2 + 8 >> 2]);
 HEAP32[$1 >> 2] = 18560;
 b2Vec2__b2Vec2_28_29($1 + 80 | 0);
 b2Vec2__b2Vec2_28_29($1 + 88 | 0);
 b2Vec2__b2Vec2_28_29($1 + 116 | 0);
 b2Vec2__b2Vec2_28_29($1 + 124 | 0);
 b2Vec2__b2Vec2_28_29($1 + 132 | 0);
 b2Vec2__b2Vec2_28_29($1 + 140 | 0);
 b2Vec2__b2Vec2_28_29($1 + 148 | 0);
 $3 = HEAP32[$2 + 8 >> 2];
 $4 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$1 + 80 >> 2] = $4;
 HEAP32[$1 + 84 >> 2] = $0;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 $4 = HEAP32[$3 + 32 >> 2];
 HEAP32[$1 + 88 >> 2] = $0;
 HEAP32[$1 + 92 >> 2] = $4;
 HEAPF32[$1 + 104 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 36 >> 2];
 HEAPF32[$1 + 68 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 40 >> 2];
 HEAPF32[$1 + 72 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 44 >> 2];
 HEAPF32[$1 + 100 >> 2] = 0;
 HEAPF32[$1 + 96 >> 2] = 0;
 HEAPF32[$1 + 76 >> 2] = 0;
 __stack_pointer = $2 + 16 | 0;
 return $1;
}

function emscripten__internal__MethodInvoker_void_20_28b2World____29_28float_2c_20int_2c_20int_29_2c_20void_2c_20b2World__2c_20float_2c_20int_2c_20int___invoke_28void_20_28b2World____20const__29_28float_2c_20int_2c_20int_29_2c_20b2World__2c_20float_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAPF32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $3 = emscripten__internal__BindingType_b2World__2c_20void___fromWireType_28b2World__29(HEAP32[$5 + 24 >> 2]);
 $0 = HEAP32[$5 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $3 = ($1 >> 1) + $3 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$3 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($3, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$5 + 20 >> 2]), emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$5 + 16 >> 2]), emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$5 + 12 >> 2]));
 __stack_pointer = $5 + 32 | 0;
}

function b2Simplex__GetSearchDirection_28_29_20const($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $1;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     $1 = HEAP32[$2 + 28 >> 2];
     switch (HEAP32[$1 + 108 >> 2] - 1 | 0) {
     case 1:
      break label$3;

     case 0:
      break label$4;

     default:
      break label$2;
     }
    }
    b2Vec2__operator__28_29_20const($0, $1 + 16 | 0);
    break label$1;
   }
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 20 | 0, $1 + 52 | 0, $1 + 16 | 0);
   b2Vec2__operator__28_29_20const($2 + 8 | 0, $1 + 16 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 20 | 0, $2 + 8 | 0), 
   HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
   if (HEAPF32[$2 + 16 >> 2] > Math_fround(0)) {
    b2Cross_28float_2c_20b2Vec2_20const__29($0, Math_fround(1), $2 + 20 | 0);
    break label$1;
   }
   b2Cross_28b2Vec2_20const__2c_20float_29($0, $2 + 20 | 0, Math_fround(1));
   break label$1;
  }
  __assert_fail(8975, 5927, 195, 6443);
  wasm2js_trap();
 }
 __stack_pointer = $2 + 32 | 0;
}

function b2Contact__GetWorldManifold_28b2WorldManifold__29_20const($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$0 + 48 >> 2]), 
 HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetBody_28_29(HEAP32[$0 + 52 >> 2]), 
 HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetShape_28_29(HEAP32[$0 + 48 >> 2]), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Fixture__GetShape_28_29(HEAP32[$0 + 52 >> 2]), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 b2WorldManifold__Initialize_28b2Manifold_20const__2c_20b2Transform_20const__2c_20float_2c_20b2Transform_20const__2c_20float_29(HEAP32[$2 + 24 >> 2], $0 - -64 | 0, b2Body__GetTransform_28_29_20const(HEAP32[$2 + 20 >> 2]), HEAPF32[HEAP32[$2 + 12 >> 2] + 8 >> 2], b2Body__GetTransform_28_29_20const(HEAP32[$2 + 16 >> 2]), HEAPF32[HEAP32[$2 + 8 >> 2] + 8 >> 2]);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_float_20_28b2WheelJoint____29_28float_29_20const_2c_20float_2c_20b2WheelJoint_20const__2c_20float___invoke_28float_20_28b2WheelJoint____20const__29_28float_29_20const_2c_20b2WheelJoint_20const__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = emscripten__internal__BindingType_b2WheelJoint_20const__2c_20void___fromWireType_28b2WheelJoint_20const__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0]($4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]))), 
 HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
 $2 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($3);
 __stack_pointer = $3 + 16 | 0;
 return Math_fround($2);
}

function emscripten__internal__MethodInvoker_float_20_28b2RopeJoint____29_28float_29_20const_2c_20float_2c_20b2RopeJoint_20const__2c_20float___invoke_28float_20_28b2RopeJoint____20const__29_28float_29_20const_2c_20b2RopeJoint_20const__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = emscripten__internal__BindingType_b2RopeJoint_20const__2c_20void___fromWireType_28b2RopeJoint_20const__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0]($4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]))), 
 HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
 $2 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($3);
 __stack_pointer = $3 + 16 | 0;
 return Math_fround($2);
}

function std____2____unwrap_range_impl_char_20const__2c_20char_20const______unwrap_5babi_v160004_5d_28char_20const__2c_20char_20const__29($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = decltype_28std____2____unwrap_iter_impl_char_20const__2c_20true_____unwrap_28std__declval_char_20const___28_29_29_29_20std____2____unwrap_iter_5babi_v160004_5d_char_20const__2c_20std____2____unwrap_iter_impl_char_20const__2c_20true__2c_200__28char_20const__29($1), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = decltype_28std____2____unwrap_iter_impl_char_20const__2c_20true_____unwrap_28std__declval_char_20const___28_29_29_29_20std____2____unwrap_iter_5babi_v160004_5d_char_20const__2c_20std____2____unwrap_iter_impl_char_20const__2c_20true__2c_200__28char_20const__29($2), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 std____2__pair_char_20const__2c_20char_20const____pair_5babi_v160004_5d_char_20const__2c_20char_20const__2c_20_28void__290__28char_20const____2c_20char_20const____29($0, $3 + 12 | 0, $3 + 8 | 0);
 __stack_pointer = $3 + 16 | 0;
}

function std____2__reverse_iterator_b2Vec2___20std____2__move_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 40 >> 2];
 HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 36 >> 2];
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 32 >> 2];
 std____2__pair_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____20std____2____move_5babi_v160004_5d_std____2___ClassicAlgPolicy_2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29($3 + 24 | 0, HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2]);
 HEAP32[$3 + 44 >> 2] = HEAP32[($3 + 24 | 0) + 4 >> 2];
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function b2WeldJoint__b2WeldJoint_28b2WeldJointDef_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Joint__b2Joint_28b2JointDef_20const__29($1, HEAP32[$2 + 8 >> 2]);
 HEAP32[$1 >> 2] = 19580;
 b2Vec2__b2Vec2_28_29($1 + 80 | 0);
 b2Vec2__b2Vec2_28_29($1 + 88 | 0);
 b2Vec3__b2Vec3_28_29($1 + 104 | 0);
 b2Vec2__b2Vec2_28_29($1 + 124 | 0);
 b2Vec2__b2Vec2_28_29($1 + 132 | 0);
 b2Vec2__b2Vec2_28_29($1 + 140 | 0);
 b2Vec2__b2Vec2_28_29($1 + 148 | 0);
 b2Mat33__b2Mat33_28_29($1 + 172 | 0);
 $3 = HEAP32[$2 + 8 >> 2];
 $4 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$1 + 80 >> 2] = $4;
 HEAP32[$1 + 84 >> 2] = $0;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 $4 = HEAP32[$3 + 32 >> 2];
 HEAP32[$1 + 88 >> 2] = $0;
 HEAP32[$1 + 92 >> 2] = $4;
 HEAPF32[$1 + 96 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 36 >> 2];
 HEAPF32[$1 + 68 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 40 >> 2];
 HEAPF32[$1 + 72 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 44 >> 2];
 b2Vec3__SetZero_28_29($1 + 104 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $1;
}

function void_20emscripten__internal__RegisterClassMethod_float_20_28__29_28b2Shape__29___invoke_b2Shape_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20float_20_28__29_28b2Shape__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 529;
 $0 = emscripten__internal__TypeID_b2Shape_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_float_2c_20b2Shape____getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_float_2c_20b2Shape____getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], float_20_28__emscripten__internal__getContext_float_20_28__29_28b2Shape__29__28float_20_28__20const__29_28b2Shape__29_29_29_28b2Shape__29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______annotate_new_5babi_v160004_5d_28unsigned_20long_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______annotate_contiguous_container_5babi_v160004_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____data_5babi_v160004_5d_28_29_20const($0), std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____data_5babi_v160004_5d_28_29_20const($0) + (std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____capacity_5babi_v160004_5d_28_29_20const($0) << 3) | 0, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____data_5babi_v160004_5d_28_29_20const($0) + (std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____capacity_5babi_v160004_5d_28_29_20const($0) << 3) | 0, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____data_5babi_v160004_5d_28_29_20const($0) + (HEAP32[$2 + 8 >> 2] << 3) | 0);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______annotate_shrink_5babi_v160004_5d_28unsigned_20long_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______annotate_contiguous_container_5babi_v160004_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____data_5babi_v160004_5d_28_29_20const($0), std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____data_5babi_v160004_5d_28_29_20const($0) + (std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____capacity_5babi_v160004_5d_28_29_20const($0) << 3) | 0, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____data_5babi_v160004_5d_28_29_20const($0) + (HEAP32[$2 + 8 >> 2] << 3) | 0, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____data_5babi_v160004_5d_28_29_20const($0) + (std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____size_5babi_v160004_5d_28_29_20const($0) << 3) | 0);
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2ContactListener____29_28unsigned_20int_2c_20unsigned_20int_29_2c_20void_2c_20b2ContactListener__2c_20unsigned_20int_2c_20unsigned_20int___invoke_28void_20_28b2ContactListener____20const__29_28unsigned_20int_2c_20unsigned_20int_29_2c_20b2ContactListener__2c_20unsigned_20int_2c_20unsigned_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $2 = emscripten__internal__BindingType_b2ContactListener__2c_20void___fromWireType_28b2ContactListener__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$4 + 4 >> 2]), emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$4 >> 2]));
 __stack_pointer = $4 + 16 | 0;
}

function void_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______construct_one_at_end_5babi_v160004_5d_b2Vec2_20const___28b2Vec2_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____ConstructTransaction___ConstructTransaction_5babi_v160004_5d_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_29($2 + 12 | 0, $0, 1);
 void_20std____2__allocator_traits_std____2__allocator_b2Vec2____construct_5babi_v160004_5d_b2Vec2_2c_20b2Vec2_20const__2c_20void__28std____2__allocator_b2Vec2___2c_20b2Vec2__2c_20b2Vec2_20const__29(std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______alloc_5babi_v160004_5d_28_29($0), b2Vec2__20std____2____to_address_5babi_v160004_5d_b2Vec2__28b2Vec2__29(HEAP32[$2 + 16 >> 2]), HEAP32[$2 + 24 >> 2]);
 HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] + 8;
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____ConstructTransaction____ConstructTransaction_5babi_v160004_5d_28_29($2 + 12 | 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2ContactListenerWrapper__isIndexOf_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 24 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__set_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____find_5babi_v160004_5d_28b2Fixture__20const__29($0 + 12 | 0, $2 + 20 | 0), 
 HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__set_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____end_5babi_v160004_5d_28_29($0 + 12 | 0), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 $0 = std____2__operator___5babi_v160004_5d_28std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__2c_20std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__29($2 + 16 | 0, $2 + 12 | 0);
 __stack_pointer = $2 + 32 | 0;
 return $0 & 1;
}

function emscripten__internal__MethodCaller_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const____call_28emscripten___EM_VAL__2c_20char_20const__2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 wasm2js_i32$0 = $5, wasm2js_i32$1 = emscripten__internal__Signature_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const____get_method_caller_28_29(), 
 HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
 emscripten__internal__WireTypePack_b2Vec2_20const__2c_20float__2c_20b2Color_20const____WireTypePack_28b2Vec2_20const__2c_20float__2c_20b2Color_20const__29($5, HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], HEAP32[$5 + 28 >> 2]);
 _emval_call_void_method(HEAP32[$5 + 24 >> 2], HEAP32[$5 + 44 >> 2], HEAP32[$5 + 40 >> 2], emscripten__internal__WireTypePack_b2Vec2_20const__2c_20float__2c_20b2Color_20const____operator_20void_20const__28_29_20const($5) | 0);
 __stack_pointer = $5 + 48 | 0;
}

function emscripten__internal__MethodInvoker_float_20_28b2Joint____29_28float_29_20const_2c_20float_2c_20b2Joint_20const__2c_20float___invoke_28float_20_28b2Joint____20const__29_28float_29_20const_2c_20b2Joint_20const__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = emscripten__internal__BindingType_b2Joint_20const__2c_20void___fromWireType_28b2Joint_20const__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0]($4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]))), 
 HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
 $2 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($3);
 __stack_pointer = $3 + 16 | 0;
 return Math_fround($2);
}

function b2Sweep__GetTransform_28b2Transform__2c_20float_29_20const($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAPF32[$3 + 36 >> 2] = $2;
 $4 = HEAP32[$3 + 44 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($3 + 20 | 0, Math_fround(Math_fround(1) - HEAPF32[$3 + 36 >> 2]), $4 + 8 | 0);
 operator__28float_2c_20b2Vec2_20const__29($3 + 12 | 0, HEAPF32[$3 + 36 >> 2], $4 + 16 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 28 | 0, $3 + 20 | 0, $3 + 12 | 0);
 $5 = HEAP32[$3 + 32 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 40 >> 2];
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $5;
 HEAPF32[$3 + 8 >> 2] = Math_fround(Math_fround(Math_fround(1) - HEAPF32[$3 + 36 >> 2]) * HEAPF32[$4 + 24 >> 2]) + Math_fround(HEAPF32[$3 + 36 >> 2] * HEAPF32[$4 + 28 >> 2]);
 b2Rot__Set_28float_29(HEAP32[$3 + 40 >> 2] + 8 | 0, HEAPF32[$3 + 8 >> 2]);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($3, HEAP32[$3 + 40 >> 2] + 8 | 0, $4);
 b2Vec2__operator___28b2Vec2_20const__29_1(HEAP32[$3 + 40 >> 2], $3);
 __stack_pointer = $3 + 48 | 0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______destroy_vector__operator_28_29_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______annotate_delete_5babi_v160004_5d_28_29_20const(HEAP32[$0 >> 2]);
 void_20std____2____debug_db_erase_c_5babi_v160004_5d_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29(HEAP32[$0 >> 2]);
 if (HEAP32[HEAP32[$0 >> 2] >> 2]) {
  std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______clear_5babi_v160004_5d_28_29(HEAP32[$0 >> 2]);
  std____2__allocator_traits_std____2__allocator_b2Vec2____deallocate_5babi_v160004_5d_28std____2__allocator_b2Vec2___2c_20b2Vec2__2c_20unsigned_20long_29(std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______alloc_5babi_v160004_5d_28_29(HEAP32[$0 >> 2]), HEAP32[HEAP32[$0 >> 2] >> 2], std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____capacity_5babi_v160004_5d_28_29_20const(HEAP32[$0 >> 2]));
 }
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28b2Vec2_20const__29_2c_20void_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20b2Vec2_20const____invoke_28void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______20const__29_28b2Vec2_20const__29_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20void___fromWireType_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassConstructor_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____20_28__29_28_29___invoke_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____20_28__29_28_29_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = 706;
 $0 = emscripten__internal__TypeID_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___2c_20void___get_28_29();
 $2 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______getCount_28_29_20const($1 + 7 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______getTypes_28_29_20const($1 + 7 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 _embind_register_class_constructor($0 | 0, $2 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() | 0, HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int______annotate_delete_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__vector_int_2c_20std____2__allocator_int______annotate_contiguous_container_5babi_v160004_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_int_2c_20std____2__allocator_int____data_5babi_v160004_5d_28_29_20const($0), std____2__vector_int_2c_20std____2__allocator_int____data_5babi_v160004_5d_28_29_20const($0) + (std____2__vector_int_2c_20std____2__allocator_int____capacity_5babi_v160004_5d_28_29_20const($0) << 2) | 0, std____2__vector_int_2c_20std____2__allocator_int____data_5babi_v160004_5d_28_29_20const($0) + (std____2__vector_int_2c_20std____2__allocator_int____size_5babi_v160004_5d_28_29_20const($0) << 2) | 0, std____2__vector_int_2c_20std____2__allocator_int____data_5babi_v160004_5d_28_29_20const($0) + (std____2__vector_int_2c_20std____2__allocator_int____capacity_5babi_v160004_5d_28_29_20const($0) << 2) | 0);
 __stack_pointer = $1 + 16 | 0;
}

function b2PolygonShape__SetAsBox_28float_2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 + 148 >> 2] = 4;
 b2Vec2__Set_28float_2c_20float_29($0 + 20 | 0, Math_fround(-HEAPF32[$3 + 8 >> 2]), Math_fround(-HEAPF32[$3 + 4 >> 2]));
 b2Vec2__Set_28float_2c_20float_29($0 + 28 | 0, HEAPF32[$3 + 8 >> 2], Math_fround(-HEAPF32[$3 + 4 >> 2]));
 b2Vec2__Set_28float_2c_20float_29($0 + 36 | 0, HEAPF32[$3 + 8 >> 2], HEAPF32[$3 + 4 >> 2]);
 b2Vec2__Set_28float_2c_20float_29($0 + 44 | 0, Math_fround(-HEAPF32[$3 + 8 >> 2]), HEAPF32[$3 + 4 >> 2]);
 b2Vec2__Set_28float_2c_20float_29($0 + 84 | 0, Math_fround(0), Math_fround(-1));
 b2Vec2__Set_28float_2c_20float_29($0 + 92 | 0, Math_fround(1), Math_fround(0));
 b2Vec2__Set_28float_2c_20float_29($0 + 100 | 0, Math_fround(0), Math_fround(1));
 b2Vec2__Set_28float_2c_20float_29($0 + 108 | 0, Math_fround(-1), Math_fround(0));
 b2Vec2__SetZero_28_29($0 + 12 | 0);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2World____29_28b2QueryCallback__2c_20b2AABB_20const__29_20const_2c_20void_2c_20b2World_20const__2c_20b2QueryCallback__2c_20b2AABB_20const____invoke_28void_20_28b2World____20const__29_28b2QueryCallback__2c_20b2AABB_20const__29_20const_2c_20b2World_20const__2c_20b2QueryCallback__2c_20b2AABB__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $2 = emscripten__internal__BindingType_b2World_20const__2c_20void___fromWireType_28b2World_20const__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2QueryCallback__2c_20void___fromWireType_28b2QueryCallback__29(HEAP32[$4 + 4 >> 2]), emscripten__internal__GenericBindingType_b2AABB___fromWireType_28b2AABB__29(HEAP32[$4 >> 2]));
 __stack_pointer = $4 + 16 | 0;
}

function emscripten__internal__MethodCaller_void_2c_20unsigned_20int__2c_20int__2c_20b2Color_20const____call_28emscripten___EM_VAL__2c_20char_20const__2c_20unsigned_20int__2c_20int__2c_20b2Color_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 wasm2js_i32$0 = $5, wasm2js_i32$1 = emscripten__internal__Signature_void_2c_20unsigned_20int__2c_20int__2c_20b2Color_20const____get_method_caller_28_29(), 
 HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
 emscripten__internal__WireTypePack_unsigned_20int__2c_20int__2c_20b2Color_20const____WireTypePack_28unsigned_20int__2c_20int__2c_20b2Color_20const__29($5, HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], HEAP32[$5 + 28 >> 2]);
 _emval_call_void_method(HEAP32[$5 + 24 >> 2], HEAP32[$5 + 44 >> 2], HEAP32[$5 + 40 >> 2], emscripten__internal__WireTypePack_unsigned_20int__2c_20int__2c_20b2Color_20const____operator_20void_20const__28_29_20const($5) | 0);
 __stack_pointer = $5 + 48 | 0;
}

function b2FrictionJoint__b2FrictionJoint_28b2FrictionJointDef_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Joint__b2Joint_28b2JointDef_20const__29($1, HEAP32[$2 + 8 >> 2]);
 HEAP32[$1 >> 2] = 18844;
 b2Vec2__b2Vec2_28_29($1 + 68 | 0);
 b2Vec2__b2Vec2_28_29($1 + 76 | 0);
 b2Vec2__b2Vec2_28_29($1 + 84 | 0);
 b2Vec2__b2Vec2_28_29($1 + 112 | 0);
 b2Vec2__b2Vec2_28_29($1 + 120 | 0);
 b2Vec2__b2Vec2_28_29($1 + 128 | 0);
 b2Vec2__b2Vec2_28_29($1 + 136 | 0);
 b2Mat22__b2Mat22_28_29($1 + 160 | 0);
 $3 = HEAP32[$2 + 8 >> 2];
 $4 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$1 + 68 >> 2] = $4;
 HEAP32[$1 + 72 >> 2] = $0;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 $4 = HEAP32[$3 + 32 >> 2];
 HEAP32[$1 + 76 >> 2] = $0;
 HEAP32[$1 + 80 >> 2] = $4;
 b2Vec2__SetZero_28_29($1 + 84 | 0);
 HEAPF32[$1 + 92 >> 2] = 0;
 HEAPF32[$1 + 96 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 36 >> 2];
 HEAPF32[$1 + 100 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 40 >> 2];
 __stack_pointer = $2 + 16 | 0;
 return $1;
}

function emscripten__internal__MethodInvoker_void_20_28b2PolygonShape____29_28b2MassData__2c_20float_29_20const_2c_20void_2c_20b2PolygonShape_20const__2c_20b2MassData__2c_20float___invoke_28void_20_28b2PolygonShape____20const__29_28b2MassData__2c_20float_29_20const_2c_20b2PolygonShape_20const__2c_20b2MassData__2c_20float_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 $2 = emscripten__internal__BindingType_b2PolygonShape_20const__2c_20void___fromWireType_28b2PolygonShape_20const__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2MassData__2c_20void___fromWireType_28b2MassData__29(HEAP32[$4 + 4 >> 2]), emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$4 >> 2]));
 __stack_pointer = $4 + 16 | 0;
}

function std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______operator_28_29_5babi_v160004_5d_28std____2____tree_node_b2Fixture__2c_20void____29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAP8[$0 + 4 | 0] & 1) {
  void_20std____2__allocator_traits_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______destroy_5babi_v160004_5d_b2Fixture__2c_20void_2c_20void__28std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_20b2Fixture___29(HEAP32[$0 >> 2], std____2____tree_key_value_types_b2Fixture______get_ptr_5babi_v160004_5d_28b2Fixture___29(HEAP32[$2 + 8 >> 2] + 16 | 0));
 }
 if (HEAP32[$2 + 8 >> 2]) {
  std____2__allocator_traits_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______deallocate_5babi_v160004_5d_28std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20unsigned_20long_29(HEAP32[$0 >> 2], HEAP32[$2 + 8 >> 2], 1);
 }
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2CircleShape____29_28b2MassData__2c_20float_29_20const_2c_20void_2c_20b2CircleShape_20const__2c_20b2MassData__2c_20float___invoke_28void_20_28b2CircleShape____20const__29_28b2MassData__2c_20float_29_20const_2c_20b2CircleShape_20const__2c_20b2MassData__2c_20float_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 $2 = emscripten__internal__BindingType_b2CircleShape_20const__2c_20void___fromWireType_28b2CircleShape_20const__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2MassData__2c_20void___fromWireType_28b2MassData__29(HEAP32[$4 + 4 >> 2]), emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$4 >> 2]));
 __stack_pointer = $4 + 16 | 0;
}

function std____2__reverse_iterator_int___20std____2__move_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 40 >> 2];
 HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 36 >> 2];
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 32 >> 2];
 std____2__pair_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____20std____2____move_5babi_v160004_5d_std____2___ClassicAlgPolicy_2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29($3 + 24 | 0, HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2]);
 HEAP32[$3 + 44 >> 2] = HEAP32[($3 + 24 | 0) + 4 >> 2];
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function b2Mat33__Solve22_28b2Vec2_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 $1 = HEAP32[$3 + 28 >> 2];
 HEAPF32[$3 + 20 >> 2] = HEAPF32[$1 >> 2];
 HEAPF32[$3 + 16 >> 2] = HEAPF32[$1 + 12 >> 2];
 HEAPF32[$3 + 12 >> 2] = HEAPF32[$1 + 4 >> 2];
 HEAPF32[$3 + 8 >> 2] = HEAPF32[$1 + 16 >> 2];
 HEAPF32[$3 + 4 >> 2] = Math_fround(HEAPF32[$3 + 20 >> 2] * HEAPF32[$3 + 8 >> 2]) - Math_fround(HEAPF32[$3 + 16 >> 2] * HEAPF32[$3 + 12 >> 2]);
 if (HEAPF32[$3 + 4 >> 2] != Math_fround(0)) {
  HEAPF32[$3 + 4 >> 2] = Math_fround(1) / HEAPF32[$3 + 4 >> 2];
 }
 b2Vec2__b2Vec2_28_29($0);
 HEAPF32[$0 >> 2] = HEAPF32[$3 + 4 >> 2] * Math_fround(Math_fround(HEAPF32[$3 + 8 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] >> 2]) - Math_fround(HEAPF32[$3 + 16 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] + 4 >> 2]));
 HEAPF32[$0 + 4 >> 2] = HEAPF32[$3 + 4 >> 2] * Math_fround(Math_fround(HEAPF32[$3 + 20 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] + 4 >> 2]) - Math_fround(HEAPF32[$3 + 12 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] >> 2]));
 __stack_pointer = $3 + 32 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int______annotate_new_5babi_v160004_5d_28unsigned_20long_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 std____2__vector_int_2c_20std____2__allocator_int______annotate_contiguous_container_5babi_v160004_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_int_2c_20std____2__allocator_int____data_5babi_v160004_5d_28_29_20const($0), std____2__vector_int_2c_20std____2__allocator_int____data_5babi_v160004_5d_28_29_20const($0) + (std____2__vector_int_2c_20std____2__allocator_int____capacity_5babi_v160004_5d_28_29_20const($0) << 2) | 0, std____2__vector_int_2c_20std____2__allocator_int____data_5babi_v160004_5d_28_29_20const($0) + (std____2__vector_int_2c_20std____2__allocator_int____capacity_5babi_v160004_5d_28_29_20const($0) << 2) | 0, std____2__vector_int_2c_20std____2__allocator_int____data_5babi_v160004_5d_28_29_20const($0) + (HEAP32[$2 + 8 >> 2] << 2) | 0);
 __stack_pointer = $2 + 16 | 0;
}

function b2Mat22__Solve_28b2Vec2_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 $1 = HEAP32[$3 + 28 >> 2];
 HEAPF32[$3 + 20 >> 2] = HEAPF32[$1 >> 2];
 HEAPF32[$3 + 16 >> 2] = HEAPF32[$1 + 8 >> 2];
 HEAPF32[$3 + 12 >> 2] = HEAPF32[$1 + 4 >> 2];
 HEAPF32[$3 + 8 >> 2] = HEAPF32[$1 + 12 >> 2];
 HEAPF32[$3 + 4 >> 2] = Math_fround(HEAPF32[$3 + 20 >> 2] * HEAPF32[$3 + 8 >> 2]) - Math_fround(HEAPF32[$3 + 16 >> 2] * HEAPF32[$3 + 12 >> 2]);
 if (HEAPF32[$3 + 4 >> 2] != Math_fround(0)) {
  HEAPF32[$3 + 4 >> 2] = Math_fround(1) / HEAPF32[$3 + 4 >> 2];
 }
 b2Vec2__b2Vec2_28_29($0);
 HEAPF32[$0 >> 2] = HEAPF32[$3 + 4 >> 2] * Math_fround(Math_fround(HEAPF32[$3 + 8 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] >> 2]) - Math_fround(HEAPF32[$3 + 16 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] + 4 >> 2]));
 HEAPF32[$0 + 4 >> 2] = HEAPF32[$3 + 4 >> 2] * Math_fround(Math_fround(HEAPF32[$3 + 20 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] + 4 >> 2]) - Math_fround(HEAPF32[$3 + 12 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] >> 2]));
 __stack_pointer = $3 + 32 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int______annotate_shrink_5babi_v160004_5d_28unsigned_20long_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 std____2__vector_int_2c_20std____2__allocator_int______annotate_contiguous_container_5babi_v160004_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_int_2c_20std____2__allocator_int____data_5babi_v160004_5d_28_29_20const($0), std____2__vector_int_2c_20std____2__allocator_int____data_5babi_v160004_5d_28_29_20const($0) + (std____2__vector_int_2c_20std____2__allocator_int____capacity_5babi_v160004_5d_28_29_20const($0) << 2) | 0, std____2__vector_int_2c_20std____2__allocator_int____data_5babi_v160004_5d_28_29_20const($0) + (HEAP32[$2 + 8 >> 2] << 2) | 0, std____2__vector_int_2c_20std____2__allocator_int____data_5babi_v160004_5d_28_29_20const($0) + (std____2__vector_int_2c_20std____2__allocator_int____size_5babi_v160004_5d_28_29_20const($0) << 2) | 0);
 __stack_pointer = $2 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassMethod_void_20_28__29_28b2DrawWrapper__29___invoke_b2DrawWrapper__28char_20const__2c_20void_20_28__29_28b2DrawWrapper__29_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 498;
 $0 = emscripten__internal__TypeID_b2DrawWrapper_2c_20void___get_28_29();
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2DrawWrapper____getCount_28_29_20const($2 + 19 | 0);
 $4 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2DrawWrapper____getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_class_function($0 | 0, $1 | 0, $3 | 0, $4 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], void_20_28__emscripten__internal__getContext_void_20_28__29_28b2DrawWrapper__29__28void_20_28__20const__29_28b2DrawWrapper__29_29_29_28b2DrawWrapper__29($2 + 20 | 0) | 0, 0, 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2EdgeShape____29_28b2MassData__2c_20float_29_20const_2c_20void_2c_20b2EdgeShape_20const__2c_20b2MassData__2c_20float___invoke_28void_20_28b2EdgeShape____20const__29_28b2MassData__2c_20float_29_20const_2c_20b2EdgeShape_20const__2c_20b2MassData__2c_20float_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 $2 = emscripten__internal__BindingType_b2EdgeShape_20const__2c_20void___fromWireType_28b2EdgeShape_20const__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2MassData__2c_20void___fromWireType_28b2MassData__29(HEAP32[$4 + 4 >> 2]), emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$4 >> 2]));
 __stack_pointer = $4 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassConstructor_std____2__vector_int_2c_20std____2__allocator_int____20_28__29_28_29___invoke_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int____20_28__29_28_29_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = 700;
 $0 = emscripten__internal__TypeID_std____2__vector_int_2c_20std____2__allocator_int___2c_20void___get_28_29();
 $2 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_std____2__vector_int_2c_20std____2__allocator_int______getCount_28_29_20const($1 + 7 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_std____2__vector_int_2c_20std____2__allocator_int______getTypes_28_29_20const($1 + 7 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 _embind_register_class_constructor($0 | 0, $2 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() | 0, HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function b2MotorJoint__b2MotorJoint_28b2MotorJointDef_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 b2Joint__b2Joint_28b2JointDef_20const__29($0, HEAP32[$2 + 8 >> 2]);
 HEAP32[$0 >> 2] = 18980;
 b2Vec2__b2Vec2_28_29($0 + 68 | 0);
 b2Vec2__b2Vec2_28_29($0 + 80 | 0);
 b2Vec2__b2Vec2_28_29($0 + 112 | 0);
 b2Vec2__b2Vec2_28_29($0 + 120 | 0);
 b2Vec2__b2Vec2_28_29($0 + 128 | 0);
 b2Vec2__b2Vec2_28_29($0 + 136 | 0);
 b2Vec2__b2Vec2_28_29($0 + 144 | 0);
 b2Mat22__b2Mat22_28_29($0 + 172 | 0);
 $1 = HEAP32[$2 + 8 >> 2];
 $3 = HEAP32[$1 + 24 >> 2];
 HEAP32[$0 + 68 >> 2] = HEAP32[$1 + 20 >> 2];
 HEAP32[$0 + 72 >> 2] = $3;
 HEAPF32[$0 + 76 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 28 >> 2];
 b2Vec2__SetZero_28_29($0 + 80 | 0);
 HEAPF32[$0 + 88 >> 2] = 0;
 HEAPF32[$0 + 92 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 32 >> 2];
 HEAPF32[$0 + 96 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 36 >> 2];
 HEAPF32[$0 + 100 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 40 >> 2];
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2__vector_int_2c_20std____2__allocator_int______destroy_vector__operator_28_29_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__vector_int_2c_20std____2__allocator_int______annotate_delete_5babi_v160004_5d_28_29_20const(HEAP32[$0 >> 2]);
 void_20std____2____debug_db_erase_c_5babi_v160004_5d_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int____29(HEAP32[$0 >> 2]);
 if (HEAP32[HEAP32[$0 >> 2] >> 2]) {
  std____2__vector_int_2c_20std____2__allocator_int______clear_5babi_v160004_5d_28_29(HEAP32[$0 >> 2]);
  std____2__allocator_traits_std____2__allocator_int____deallocate_5babi_v160004_5d_28std____2__allocator_int___2c_20int__2c_20unsigned_20long_29(std____2__vector_int_2c_20std____2__allocator_int______alloc_5babi_v160004_5d_28_29(HEAP32[$0 >> 2]), HEAP32[HEAP32[$0 >> 2] >> 2], std____2__vector_int_2c_20std____2__allocator_int____capacity_5babi_v160004_5d_28_29_20const(HEAP32[$0 >> 2]));
 }
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__internal__MethodInvoker_b2Shape__20_28b2PolygonShape____29_28b2BlockAllocator__29_20const_2c_20b2Shape__2c_20b2PolygonShape_20const__2c_20b2BlockAllocator____invoke_28b2Shape__20_28b2PolygonShape____20const__29_28b2BlockAllocator__29_20const_2c_20b2PolygonShape_20const__2c_20b2BlockAllocator__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2PolygonShape_20const__2c_20void___fromWireType_28b2PolygonShape_20const__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_b2Shape__2c_20void___toWireType_28b2Shape__29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2BlockAllocator__2c_20void___fromWireType_28b2BlockAllocator__29(HEAP32[$3 + 4 >> 2])) | 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function void_20std____2__vector_int_2c_20std____2__allocator_int______construct_one_at_end_5babi_v160004_5d_int_20const___28int_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 std____2__vector_int_2c_20std____2__allocator_int_____ConstructTransaction___ConstructTransaction_5babi_v160004_5d_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_29($2 + 12 | 0, $0, 1);
 void_20std____2__allocator_traits_std____2__allocator_int____construct_5babi_v160004_5d_int_2c_20int_20const__2c_20void__28std____2__allocator_int___2c_20int__2c_20int_20const__29(std____2__vector_int_2c_20std____2__allocator_int______alloc_5babi_v160004_5d_28_29($0), int__20std____2____to_address_5babi_v160004_5d_int__28int__29(HEAP32[$2 + 16 >> 2]), HEAP32[$2 + 24 >> 2]);
 HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] + 4;
 std____2__vector_int_2c_20std____2__allocator_int_____ConstructTransaction____ConstructTransaction_5babi_v160004_5d_28_29($2 + 12 | 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Shape____29_28b2MassData__2c_20float_29_20const_2c_20void_2c_20b2Shape_20const__2c_20b2MassData__2c_20float___invoke_28void_20_28b2Shape____20const__29_28b2MassData__2c_20float_29_20const_2c_20b2Shape_20const__2c_20b2MassData__2c_20float_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 $2 = emscripten__internal__BindingType_b2Shape_20const__2c_20void___fromWireType_28b2Shape_20const__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2MassData__2c_20void___fromWireType_28b2MassData__29(HEAP32[$4 + 4 >> 2]), emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$4 >> 2]));
 __stack_pointer = $4 + 16 | 0;
}

function emscripten__internal__MethodInvoker_b2Shape__20_28b2CircleShape____29_28b2BlockAllocator__29_20const_2c_20b2Shape__2c_20b2CircleShape_20const__2c_20b2BlockAllocator____invoke_28b2Shape__20_28b2CircleShape____20const__29_28b2BlockAllocator__29_20const_2c_20b2CircleShape_20const__2c_20b2BlockAllocator__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2CircleShape_20const__2c_20void___fromWireType_28b2CircleShape_20const__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_b2Shape__2c_20void___toWireType_28b2Shape__29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2BlockAllocator__2c_20void___fromWireType_28b2BlockAllocator__29(HEAP32[$3 + 4 >> 2])) | 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____basic_string_28_29($0) {
 void_20std____2____debug_db_erase_c_5babi_v160004_5d_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____29($0);
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_v160004_5d_28_29_20const($0)) {
  std____2__allocator_traits_std____2__allocator_char____deallocate_5babi_v160004_5d_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______alloc_5babi_v160004_5d_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_pointer_5babi_v160004_5d_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_v160004_5d_28_29_20const($0));
 }
 return $0;
}

function __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3);
  return;
 }
 $4 = HEAP32[$0 + 12 >> 2];
 $5 = $0 + 16 | 0;
 __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($5, $1, $2, $3);
 $0 = $0 + 24 | 0;
 $4 = ($4 << 3) + $5 | 0;
 label$2: {
  if ($0 >>> 0 >= $4 >>> 0) {
   break label$2;
  }
  while (1) {
   __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3);
   if (HEAPU8[$1 + 54 | 0]) {
    break label$2;
   }
   $0 = $0 + 8 | 0;
   if ($4 >>> 0 > $0 >>> 0) {
    continue;
   }
   break;
  }
 }
}

function b2Joint__b2Joint_28b2JointDef_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$0 >> 2] = 18928;
 if (HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2] == HEAP32[HEAP32[$2 + 4 >> 2] + 12 >> 2]) {
  __assert_fail(10765, 4590, 188, 2840);
  wasm2js_trap();
 }
 HEAP32[$0 + 4 >> 2] = HEAP32[HEAP32[$2 + 4 >> 2] >> 2];
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2];
 HEAP32[$0 + 52 >> 2] = HEAP32[HEAP32[$2 + 4 >> 2] + 12 >> 2];
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP8[$0 + 61 | 0] = HEAP8[HEAP32[$2 + 4 >> 2] + 16 | 0] & 1;
 HEAP8[$0 + 60 | 0] = 0;
 HEAP32[$0 + 64 >> 2] = HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2];
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function b2DistanceProxy__GetSupport_28b2Vec2_20const__29_20const($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 HEAP32[$2 + 20 >> 2] = 0;
 wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$0 + 16 >> 2], HEAP32[$2 + 24 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
 HEAP32[$2 + 12 >> 2] = 1;
 while (1) {
  if (HEAP32[$2 + 12 >> 2] < HEAP32[$0 + 20 >> 2]) {
   wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$0 + 16 >> 2] + (HEAP32[$2 + 12 >> 2] << 3) | 0, HEAP32[$2 + 24 >> 2]), 
   HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
   if (HEAPF32[$2 + 8 >> 2] > HEAPF32[$2 + 16 >> 2]) {
    HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 12 >> 2];
    HEAPF32[$2 + 16 >> 2] = HEAPF32[$2 + 8 >> 2];
   }
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 20 >> 2];
}

function emscripten__internal__MethodInvoker_void_20_28b2PrismaticJoint____29_28float_2c_20float_29_2c_20void_2c_20b2PrismaticJoint__2c_20float_2c_20float___invoke_28void_20_28b2PrismaticJoint____20const__29_28float_2c_20float_29_2c_20b2PrismaticJoint__2c_20float_2c_20float_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = Math_fround($3);
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 $5 = emscripten__internal__BindingType_b2PrismaticJoint__2c_20void___fromWireType_28b2PrismaticJoint__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $5 = ($1 >> 1) + $5 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$5 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($5, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$4 + 4 >> 2]), emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$4 >> 2]));
 __stack_pointer = $4 + 16 | 0;
}

function emscripten__internal__MethodInvoker_b2Shape__20_28b2EdgeShape____29_28b2BlockAllocator__29_20const_2c_20b2Shape__2c_20b2EdgeShape_20const__2c_20b2BlockAllocator____invoke_28b2Shape__20_28b2EdgeShape____20const__29_28b2BlockAllocator__29_20const_2c_20b2EdgeShape_20const__2c_20b2BlockAllocator__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2EdgeShape_20const__2c_20void___fromWireType_28b2EdgeShape_20const__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_b2Shape__2c_20void___toWireType_28b2Shape__29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2BlockAllocator__2c_20void___fromWireType_28b2BlockAllocator__29(HEAP32[$3 + 4 >> 2])) | 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function b2TestOverlap_28b2AABB_20const__2c_20b2AABB_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 b2Vec2__b2Vec2_28_29($2 + 24 | 0);
 b2Vec2__b2Vec2_28_29($2 + 16 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 8 | 0, HEAP32[$2 + 36 >> 2], HEAP32[$2 + 40 >> 2] + 8 | 0);
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 28 >> 2] = $0;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2] + 8 | 0);
 $1 = HEAP32[$2 + 4 >> 2];
 $0 = HEAP32[$2 >> 2];
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (HEAPF32[$2 + 24 >> 2] > Math_fround(0) | HEAPF32[$2 + 28 >> 2] > Math_fround(0)) {
   HEAP8[$2 + 47 | 0] = 0;
   break label$1;
  }
  if (HEAPF32[$2 + 16 >> 2] > Math_fround(0) | HEAPF32[$2 + 20 >> 2] > Math_fround(0)) {
   HEAP8[$2 + 47 | 0] = 0;
   break label$1;
  }
  HEAP8[$2 + 47 | 0] = 1;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP8[$2 + 47 | 0] & 1;
}

function emscripten__internal__MethodInvoker_void_20_28b2RevoluteJoint____29_28float_2c_20float_29_2c_20void_2c_20b2RevoluteJoint__2c_20float_2c_20float___invoke_28void_20_28b2RevoluteJoint____20const__29_28float_2c_20float_29_2c_20b2RevoluteJoint__2c_20float_2c_20float_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = Math_fround($3);
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 $5 = emscripten__internal__BindingType_b2RevoluteJoint__2c_20void___fromWireType_28b2RevoluteJoint__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $5 = ($1 >> 1) + $5 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$5 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($5, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$4 + 4 >> 2]), emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$4 >> 2]));
 __stack_pointer = $4 + 16 | 0;
}

function b2ChainAndPolygonContact__Evaluate_28b2Manifold__2c_20b2Transform_20const__2c_20b2Transform_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 80 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 76 >> 2] = $0;
 HEAP32[$4 + 72 >> 2] = $1;
 HEAP32[$4 + 68 >> 2] = $2;
 HEAP32[$4 + 64 >> 2] = $3;
 $0 = HEAP32[$4 + 76 >> 2];
 wasm2js_i32$0 = $4, wasm2js_i32$1 = b2Fixture__GetShape_28_29(HEAP32[$0 + 48 >> 2]), 
 HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
 b2EdgeShape__b2EdgeShape_28_29($4 + 12 | 0);
 b2ChainShape__GetChildEdge_28b2EdgeShape__2c_20int_29_20const(HEAP32[$4 + 60 >> 2], $4 + 12 | 0, HEAP32[$0 + 56 >> 2]);
 b2CollideEdgeAndPolygon_28b2Manifold__2c_20b2EdgeShape_20const__2c_20b2Transform_20const__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__29(HEAP32[$4 + 72 >> 2], $4 + 12 | 0, HEAP32[$4 + 68 >> 2], b2Fixture__GetShape_28_29(HEAP32[$0 + 52 >> 2]), HEAP32[$4 + 64 >> 2]);
 b2EdgeShape___b2EdgeShape_28_29($4 + 12 | 0);
 __stack_pointer = $4 + 80 | 0;
}

function b2RopeJoint__b2RopeJoint_28b2RopeJointDef_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Joint__b2Joint_28b2JointDef_20const__29($1, HEAP32[$2 + 8 >> 2]);
 HEAP32[$1 >> 2] = 19500;
 b2Vec2__b2Vec2_28_29($1 + 68 | 0);
 b2Vec2__b2Vec2_28_29($1 + 76 | 0);
 b2Vec2__b2Vec2_28_29($1 + 104 | 0);
 b2Vec2__b2Vec2_28_29($1 + 112 | 0);
 b2Vec2__b2Vec2_28_29($1 + 120 | 0);
 b2Vec2__b2Vec2_28_29($1 + 128 | 0);
 b2Vec2__b2Vec2_28_29($1 + 136 | 0);
 $3 = HEAP32[$2 + 8 >> 2];
 $4 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$1 + 68 >> 2] = $4;
 HEAP32[$1 + 72 >> 2] = $0;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 $4 = HEAP32[$3 + 32 >> 2];
 HEAP32[$1 + 76 >> 2] = $0;
 HEAP32[$1 + 80 >> 2] = $4;
 HEAPF32[$1 + 84 >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] + 36 >> 2];
 HEAPF32[$1 + 160 >> 2] = 0;
 HEAPF32[$1 + 92 >> 2] = 0;
 HEAP32[$1 + 164 >> 2] = 0;
 HEAPF32[$1 + 88 >> 2] = 0;
 __stack_pointer = $2 + 16 | 0;
 return $1;
}

function emscripten__internal__MethodInvoker_bool_20_28b2ContactListenerWrapper____29_28unsigned_20int_29_2c_20bool_2c_20b2ContactListenerWrapper__2c_20unsigned_20int___invoke_28bool_20_28b2ContactListenerWrapper____20const__29_28unsigned_20int_29_2c_20b2ContactListenerWrapper__2c_20unsigned_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2ContactListenerWrapper__2c_20void___fromWireType_28b2ContactListenerWrapper__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$3 + 4 >> 2])) & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 & 1;
}

function b2ChainAndCircleContact__Evaluate_28b2Manifold__2c_20b2Transform_20const__2c_20b2Transform_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 80 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 76 >> 2] = $0;
 HEAP32[$4 + 72 >> 2] = $1;
 HEAP32[$4 + 68 >> 2] = $2;
 HEAP32[$4 + 64 >> 2] = $3;
 $0 = HEAP32[$4 + 76 >> 2];
 wasm2js_i32$0 = $4, wasm2js_i32$1 = b2Fixture__GetShape_28_29(HEAP32[$0 + 48 >> 2]), 
 HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
 b2EdgeShape__b2EdgeShape_28_29($4 + 12 | 0);
 b2ChainShape__GetChildEdge_28b2EdgeShape__2c_20int_29_20const(HEAP32[$4 + 60 >> 2], $4 + 12 | 0, HEAP32[$0 + 56 >> 2]);
 b2CollideEdgeAndCircle_28b2Manifold__2c_20b2EdgeShape_20const__2c_20b2Transform_20const__2c_20b2CircleShape_20const__2c_20b2Transform_20const__29(HEAP32[$4 + 72 >> 2], $4 + 12 | 0, HEAP32[$4 + 68 >> 2], b2Fixture__GetShape_28_29(HEAP32[$0 + 52 >> 2]), HEAP32[$4 + 64 >> 2]);
 b2EdgeShape___b2EdgeShape_28_29($4 + 12 | 0);
 __stack_pointer = $4 + 80 | 0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____resize_28unsigned_20long_2c_20b2Vec2_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____size_5babi_v160004_5d_28_29_20const($0), 
 HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 label$1: {
  if (HEAPU32[$3 >> 2] < HEAPU32[$3 + 8 >> 2]) {
   std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______append_28unsigned_20long_2c_20b2Vec2_20const__29($0, HEAP32[$3 + 8 >> 2] - HEAP32[$3 >> 2] | 0, HEAP32[$3 + 4 >> 2]);
   break label$1;
  }
  if (HEAPU32[$3 >> 2] > HEAPU32[$3 + 8 >> 2]) {
   std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______destruct_at_end_5babi_v160004_5d_28b2Vec2__29($0, HEAP32[$0 >> 2] + (HEAP32[$3 + 8 >> 2] << 3) | 0);
  }
 }
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2PolygonShape____29_28float_2c_20float_29_2c_20void_2c_20b2PolygonShape__2c_20float_2c_20float___invoke_28void_20_28b2PolygonShape____20const__29_28float_2c_20float_29_2c_20b2PolygonShape__2c_20float_2c_20float_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = Math_fround($3);
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 $5 = emscripten__internal__BindingType_b2PolygonShape__2c_20void___fromWireType_28b2PolygonShape__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $5 = ($1 >> 1) + $5 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$5 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($5, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$4 + 4 >> 2]), emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$4 >> 2]));
 __stack_pointer = $4 + 16 | 0;
}

function void_20emscripten__function_b2Vec2_2c_20b2Transform_20const__2c_20b2Vec2_20const__2c_20emscripten__allow_raw_pointers__28char_20const__2c_20b2Vec2_20_28__29_28b2Transform_20const__2c_20b2Vec2_20const__29_2c_20emscripten__allow_raw_pointers_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 20 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = $1;
 HEAP32[$2 + 8 >> 2] = 401;
 $0 = HEAP32[$2 + 20 >> 2];
 $1 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Vec2_2c_20b2Transform_20const__2c_20b2Vec2_20const____getCount_28_29_20const($2 + 15 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Vec2_2c_20b2Transform_20const__2c_20b2Vec2_20const____getTypes_28_29_20const($2 + 15 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
 _embind_register_function($0 | 0, $1 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 8 >> 2], HEAP32[$2 + 16 >> 2], 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_float_20_28b2PrismaticJoint____29_28_29_20const_2c_20float_2c_20b2PrismaticJoint_20const____invoke_28float_20_28b2PrismaticJoint____20const__29_28_29_20const_2c_20b2PrismaticJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2PrismaticJoint_20const__2c_20void___fromWireType_28b2PrismaticJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0]($1)), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 $4 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($4);
}

function __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 label$2: {
  if (!is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   break label$2;
  }
  if (!(HEAP32[$1 + 16 >> 2] != ($2 | 0) & HEAP32[$1 + 20 >> 2] != ($2 | 0))) {
   if (($3 | 0) != 1) {
    break label$2;
   }
   HEAP32[$1 + 32 >> 2] = 1;
   return;
  }
  HEAP32[$1 + 20 >> 2] = $2;
  HEAP32[$1 + 32 >> 2] = $3;
  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
  if (!(HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2)) {
   HEAP8[$1 + 54 | 0] = 1;
  }
  HEAP32[$1 + 44 >> 2] = 4;
 }
}

function emscripten__internal__MethodInvoker_float_20_28b2RevoluteJoint____29_28_29_20const_2c_20float_2c_20b2RevoluteJoint_20const____invoke_28float_20_28b2RevoluteJoint____20const__29_28_29_20const_2c_20b2RevoluteJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2RevoluteJoint_20const__2c_20void___fromWireType_28b2RevoluteJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0]($1)), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 $4 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($4);
}

function emscripten__internal__MethodInvoker_float_20_28b2DistanceJoint____29_28_29_20const_2c_20float_2c_20b2DistanceJoint_20const____invoke_28float_20_28b2DistanceJoint____20const__29_28_29_20const_2c_20b2DistanceJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2DistanceJoint_20const__2c_20void___fromWireType_28b2DistanceJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0]($1)), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 $4 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($4);
}

function emscripten__internal__MethodInvoker_b2Vec2_20_28b2RopeJoint____29_28float_29_20const_2c_20b2Vec2_2c_20b2RopeJoint_20const__2c_20float___invoke_28b2Vec2_20_28b2RopeJoint____20const__29_28float_29_20const_2c_20b2RopeJoint_20const__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAPF32[$3 + 20 >> 2] = $2;
 $4 = emscripten__internal__BindingType_b2RopeJoint_20const__2c_20void___fromWireType_28b2RopeJoint_20const__29(HEAP32[$3 + 24 >> 2]);
 $0 = HEAP32[$3 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($3 + 12 | 0, $4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 20 >> 2]));
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2___29($3 + 12 | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0 | 0;
}

function emscripten__internal__MethodCaller_void_2c_20unsigned_20int__2c_20unsigned_20int____call_28emscripten___EM_VAL__2c_20char_20const__2c_20unsigned_20int__2c_20unsigned_20int__29($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 wasm2js_i32$0 = $4, wasm2js_i32$1 = emscripten__internal__Signature_void_2c_20unsigned_20int__2c_20unsigned_20int____get_method_caller_28_29(), 
 HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
 emscripten__internal__WireTypePack_unsigned_20int__2c_20unsigned_20int____WireTypePack_28unsigned_20int__2c_20unsigned_20int__29($4 + 8 | 0, HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2]);
 _emval_call_void_method(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2], emscripten__internal__WireTypePack_unsigned_20int__2c_20unsigned_20int____operator_20void_20const__28_29_20const($4 + 8 | 0) | 0);
 __stack_pointer = $4 + 48 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int____resize_28unsigned_20long_2c_20int_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__vector_int_2c_20std____2__allocator_int____size_5babi_v160004_5d_28_29_20const($0), 
 HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 label$1: {
  if (HEAPU32[$3 >> 2] < HEAPU32[$3 + 8 >> 2]) {
   std____2__vector_int_2c_20std____2__allocator_int______append_28unsigned_20long_2c_20int_20const__29($0, HEAP32[$3 + 8 >> 2] - HEAP32[$3 >> 2] | 0, HEAP32[$3 + 4 >> 2]);
   break label$1;
  }
  if (HEAPU32[$3 >> 2] > HEAPU32[$3 + 8 >> 2]) {
   std____2__vector_int_2c_20std____2__allocator_int______destruct_at_end_5babi_v160004_5d_28int__29($0, HEAP32[$0 >> 2] + (HEAP32[$3 + 8 >> 2] << 2) | 0);
  }
 }
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_b2Fixture__20_28b2Body____29_28b2FixtureDef_20const__29_2c_20b2Fixture__2c_20b2Body__2c_20b2FixtureDef_20const____invoke_28b2Fixture__20_28b2Body____20const__29_28b2FixtureDef_20const__29_2c_20b2Body__2c_20b2FixtureDef_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_b2Fixture__2c_20void___toWireType_28b2Fixture__29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2FixtureDef_20const__2c_20void___fromWireType_28b2FixtureDef_20const__29(HEAP32[$3 + 4 >> 2])) | 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function std____2__unique_ptr_std____2____tree_node_b2Fixture__2c_20void___2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______release_5babi_v160004_5d_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 wasm2js_i32$0 = $1, wasm2js_i32$1 = HEAP32[std____2____compressed_pair_std____2____tree_node_b2Fixture__2c_20void____2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______first_5babi_v160004_5d_28_29($0) >> 2], 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = std____2____compressed_pair_std____2____tree_node_b2Fixture__2c_20void____2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______first_5babi_v160004_5d_28_29($0), 
 wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function memchr($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = ($2 | 0) != 0;
 label$1: {
  label$2: {
   label$3: {
    if (!($0 & 3) | !$2) {
     break label$3;
    }
    $4 = $1 & 255;
    while (1) {
     if (HEAPU8[$0 | 0] == ($4 | 0)) {
      break label$2;
     }
     $2 = $2 - 1 | 0;
     $3 = ($2 | 0) != 0;
     $0 = $0 + 1 | 0;
     if (!($0 & 3)) {
      break label$3;
     }
     if ($2) {
      continue;
     }
     break;
    }
   }
   if (!$3) {
    break label$1;
   }
   if (!(HEAPU8[$0 | 0] == ($1 & 255) | $2 >>> 0 < 4)) {
    $4 = Math_imul($1 & 255, 16843009);
    while (1) {
     $3 = HEAP32[$0 >> 2] ^ $4;
     if (($3 ^ -1) & $3 - 16843009 & -2139062144) {
      break label$2;
     }
     $0 = $0 + 4 | 0;
     $2 = $2 - 4 | 0;
     if ($2 >>> 0 > 3) {
      continue;
     }
     break;
    }
   }
   if (!$2) {
    break label$1;
   }
  }
  $3 = $1 & 255;
  while (1) {
   if (HEAPU8[$0 | 0] == ($3 | 0)) {
    return $0;
   }
   $0 = $0 + 1 | 0;
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return 0;
}

function b2World__RayCast_28b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 $3 = HEAP32[$4 + 44 >> 2];
 HEAP32[$4 + 24 >> 2] = $3 + 102868;
 HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 40 >> 2];
 b2RayCastInput__b2RayCastInput_28_29($4 + 4 | 0);
 HEAPF32[$4 + 20 >> 2] = 1;
 $2 = HEAP32[$4 + 36 >> 2];
 $0 = HEAP32[$2 >> 2];
 $1 = HEAP32[$2 + 4 >> 2];
 $2 = $0;
 $0 = $4 + 4 | 0;
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $1;
 $2 = HEAP32[$4 + 32 >> 2];
 $1 = HEAP32[$2 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = $1;
 $1 = $4 + 4 | 0;
 HEAP32[$1 + 8 >> 2] = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 void_20b2BroadPhase__RayCast_b2WorldRayCastWrapper__28b2WorldRayCastWrapper__2c_20b2RayCastInput_20const__29_20const($3 + 102868 | 0, $4 + 24 | 0, $4 + 4 | 0);
 __stack_pointer = $4 + 48 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Body____29_28b2Vec2_20const__2c_20float_29_2c_20void_2c_20b2Body__2c_20b2Vec2_20const__2c_20float___invoke_28void_20_28b2Body____20const__29_28b2Vec2_20const__2c_20float_29_2c_20b2Body__2c_20b2Vec2__2c_20float_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 $2 = emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$4 + 4 >> 2]), emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$4 >> 2]));
 __stack_pointer = $4 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Body____29_28b2Vec2_20const__2c_20bool_29_2c_20void_2c_20b2Body__2c_20b2Vec2_20const__2c_20bool___invoke_28void_20_28b2Body____20const__29_28b2Vec2_20const__2c_20bool_29_2c_20b2Body__2c_20b2Vec2__2c_20bool_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3 & 1;
 $2 = emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$4 + 4 >> 2]), emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29(HEAP8[$4 + 3 | 0] & 1) & 1);
 __stack_pointer = $4 + 16 | 0;
}

function emscripten__internal__MethodInvoker_float_20_28b2WheelJoint____29_28_29_20const_2c_20float_2c_20b2WheelJoint_20const____invoke_28float_20_28b2WheelJoint____20const__29_28_29_20const_2c_20b2WheelJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2WheelJoint_20const__2c_20void___fromWireType_28b2WheelJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0]($1)), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 $4 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($4);
}

function emscripten__internal__MethodInvoker_float_20_28b2MouseJoint____29_28_29_20const_2c_20float_2c_20b2MouseJoint_20const____invoke_28float_20_28b2MouseJoint____20const__29_28_29_20const_2c_20b2MouseJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2MouseJoint_20const__2c_20void___fromWireType_28b2MouseJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0]($1)), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 $4 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($4);
}

function emscripten__internal__MethodInvoker_float_20_28b2MotorJoint____29_28_29_20const_2c_20float_2c_20b2MotorJoint_20const____invoke_28float_20_28b2MotorJoint____20const__29_28_29_20const_2c_20b2MotorJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2MotorJoint_20const__2c_20void___fromWireType_28b2MotorJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0]($1)), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 $4 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($4);
}

function emscripten__internal__MethodInvoker_b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const_2c_20b2Vec2_2c_20b2Body_20const__2c_20b2Vec2_20const____invoke_28b2Vec2_20_28b2Body____20const__29_28b2Vec2_20const__29_20const_2c_20b2Body_20const__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2Body_20const__2c_20void___fromWireType_28b2Body_20const__29(HEAP32[$3 + 24 >> 2]);
 $0 = HEAP32[$3 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($3 + 12 | 0, $2, emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 20 >> 2]));
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2___29($3 + 12 | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0 | 0;
}

function b2World___b2World_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 $0 = HEAP32[$1 + 24 >> 2];
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 102948 >> 2];
 while (1) {
  if (HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 16 >> 2] = HEAP32[HEAP32[$1 + 20 >> 2] + 96 >> 2];
   HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 20 >> 2] + 100 >> 2];
   while (1) {
    if (HEAP32[$1 + 12 >> 2]) {
     HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
     HEAP32[HEAP32[$1 + 12 >> 2] + 28 >> 2] = 0;
     b2Fixture__Destroy_28b2BlockAllocator__29(HEAP32[$1 + 12 >> 2], $0);
     HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
     continue;
    }
    break;
   }
   HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 16 >> 2];
   continue;
  }
  break;
 }
 b2ContactManager___b2ContactManager_28_29($0 + 102868 | 0);
 b2StackAllocator___b2StackAllocator_28_29($0 + 68 | 0);
 b2BlockAllocator___b2BlockAllocator_28_29($0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function wcrtomb($0, $1, $2) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = 1;
 label$1: {
  if ($0) {
   if ($1 >>> 0 <= 127) {
    break label$1;
   }
   label$3: {
    if (!HEAP32[HEAP32[__get_tp() + 96 >> 2] >> 2]) {
     if (($1 & -128) == 57216) {
      break label$1;
     }
     break label$3;
    }
    if ($1 >>> 0 <= 2047) {
     HEAP8[$0 + 1 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 6 | 192;
     return 2;
    }
    if (!(($1 & -8192) != 57344 & $1 >>> 0 >= 55296)) {
     HEAP8[$0 + 2 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 12 | 224;
     HEAP8[$0 + 1 | 0] = $1 >>> 6 & 63 | 128;
     return 3;
    }
    if ($1 - 65536 >>> 0 <= 1048575) {
     HEAP8[$0 + 3 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 18 | 240;
     HEAP8[$0 + 2 | 0] = $1 >>> 6 & 63 | 128;
     HEAP8[$0 + 1 | 0] = $1 >>> 12 & 63 | 128;
     return 4;
    }
   }
   wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 25, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $2 = -1;
  }
  return $2;
 }
 HEAP8[$0 | 0] = $1;
 return 1;
}

function emscripten__internal__MethodInvoker_float_20_28b2WeldJoint____29_28_29_20const_2c_20float_2c_20b2WeldJoint_20const____invoke_28float_20_28b2WeldJoint____20const__29_28_29_20const_2c_20b2WeldJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2WeldJoint_20const__2c_20void___fromWireType_28b2WeldJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0]($1)), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 $4 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($4);
}

function emscripten__internal__MethodInvoker_float_20_28b2RopeJoint____29_28_29_20const_2c_20float_2c_20b2RopeJoint_20const____invoke_28float_20_28b2RopeJoint____20const__29_28_29_20const_2c_20b2RopeJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2RopeJoint_20const__2c_20void___fromWireType_28b2RopeJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0]($1)), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 $4 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($4);
}

function emscripten__internal__MethodInvoker_b2Joint__20_28b2World____29_28b2JointDef_20const__29_2c_20b2Joint__2c_20b2World__2c_20b2JointDef_20const____invoke_28b2Joint__20_28b2World____20const__29_28b2JointDef_20const__29_2c_20b2World__2c_20b2JointDef_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2World__2c_20void___fromWireType_28b2World__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_b2Joint__2c_20void___toWireType_28b2Joint__29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2JointDef_20const__2c_20void___fromWireType_28b2JointDef_20const__29(HEAP32[$3 + 4 >> 2])) | 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__MethodInvoker_b2Vec2_20_28b2Joint____29_28float_29_20const_2c_20b2Vec2_2c_20b2Joint_20const__2c_20float___invoke_28b2Vec2_20_28b2Joint____20const__29_28float_29_20const_2c_20b2Joint_20const__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAPF32[$3 + 20 >> 2] = $2;
 $4 = emscripten__internal__BindingType_b2Joint_20const__2c_20void___fromWireType_28b2Joint_20const__29(HEAP32[$3 + 24 >> 2]);
 $0 = HEAP32[$3 + 28 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($3 + 12 | 0, $4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 20 >> 2]));
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2___29($3 + 12 | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0 | 0;
}

function emscripten__internal__MethodInvoker_bool_20_28b2QueryCallback____29_28unsigned_20int_29_2c_20bool_2c_20b2QueryCallback__2c_20unsigned_20int___invoke_28bool_20_28b2QueryCallback____20const__29_28unsigned_20int_29_2c_20b2QueryCallback__2c_20unsigned_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2QueryCallback__2c_20void___fromWireType_28b2QueryCallback__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$3 + 4 >> 2])) & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 & 1;
}

function std____2__set_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____find_5babi_v160004_5d_28b2Fixture__20const__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____find_b2Fixture___28b2Fixture__20const__29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]), 
 HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long_____tree_const_iterator_5babi_v160004_5d_28std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__29($2 + 12 | 0, HEAP32[$2 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function emscripten__internal__MethodInvoker_void_20_28b2Body____29_28float_2c_20bool_29_2c_20void_2c_20b2Body__2c_20float_2c_20bool___invoke_28void_20_28b2Body____20const__29_28float_2c_20bool_29_2c_20b2Body__2c_20float_2c_20bool_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3 & 1;
 $3 = emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$4 + 8 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $3 = ($1 >> 1) + $3 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$3 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($3, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$4 + 4 >> 2]), emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29(HEAP8[$4 + 3 | 0] & 1) & 1);
 __stack_pointer = $4 + 16 | 0;
}

function emscripten__internal__MethodInvoker_float_20_28b2Fixture____29_28_29_20const_2c_20float_2c_20b2Fixture_20const____invoke_28float_20_28b2Fixture____20const__29_28_29_20const_2c_20b2Fixture_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Fixture_20const__2c_20void___fromWireType_28b2Fixture_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0]($1)), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 $4 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($4);
}

function std____2__reverse_iterator_b2Vec2___20std____2____rewrap_range_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2];
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 20 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__reverse_iterator_b2Vec2___20std____2____rewrap_iter_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_b2Vec2___2c_20false___28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2]), 
 HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function emscripten__internal__MethodInvoker_b2Body__20_28b2World____29_28b2BodyDef_20const__29_2c_20b2Body__2c_20b2World__2c_20b2BodyDef_20const____invoke_28b2Body__20_28b2World____20const__29_28b2BodyDef_20const__29_2c_20b2World__2c_20b2BodyDef_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2World__2c_20void___fromWireType_28b2World__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_b2Body__2c_20void___toWireType_28b2Body__29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2BodyDef_20const__2c_20void___fromWireType_28b2BodyDef_20const__29(HEAP32[$3 + 4 >> 2])) | 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__MethodInvoker_bool_20_28b2Fixture____29_28b2Vec2_20const__29_20const_2c_20bool_2c_20b2Fixture_20const__2c_20b2Vec2_20const____invoke_28bool_20_28b2Fixture____20const__29_28b2Vec2_20const__29_20const_2c_20b2Fixture_20const__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2Fixture_20const__2c_20void___fromWireType_28b2Fixture_20const__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2])) & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 & 1;
}

function emscripten__internal__MethodInvoker_b2AABB_20const__20_28b2Fixture____29_28int_29_20const_2c_20b2AABB_20const__2c_20b2Fixture_20const__2c_20int___invoke_28b2AABB_20const__20_28b2Fixture____20const__29_28int_29_20const_2c_20b2Fixture_20const__2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2Fixture_20const__2c_20void___fromWireType_28b2Fixture_20const__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__GenericBindingType_b2AABB___toWireType_28b2AABB_20const__29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$3 + 4 >> 2])) | 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function std____2__pair_std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__2c_20bool___pair_5babi_v160004_5d_std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__2c_20bool_2c_20_28void__290__28std____2__pair_std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__2c_20bool____29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long_____tree_const_iterator_5babi_v160004_5d_28std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__29($0, HEAP32[$2 + 4 >> 2]);
 HEAP8[$0 + 4 | 0] = HEAP8[HEAP32[$2 + 8 >> 2] + 4 | 0] & 1;
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function emscripten__internal__MethodInvoker_float_20_28b2Body____29_28_29_20const_2c_20float_2c_20b2Body_20const____invoke_28float_20_28b2Body____20const__29_28_29_20const_2c_20b2Body_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Body_20const__2c_20void___fromWireType_28b2Body_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0]($1)), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 $4 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($4);
}

function emscripten__internal__MethodInvoker_float_20_28b2AABB____29_28_29_20const_2c_20float_2c_20b2AABB_20const____invoke_28float_20_28b2AABB____20const__29_28_29_20const_2c_20b2AABB_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2AABB_20const__2c_20void___fromWireType_28b2AABB_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0]($1)), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 $4 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($4);
}

function emscripten__internal__MethodInvoker_bool_20_28b2AABB____29_28b2AABB_20const__29_20const_2c_20bool_2c_20b2AABB_20const__2c_20b2AABB_20const____invoke_28bool_20_28b2AABB____20const__29_28b2AABB_20const__29_20const_2c_20b2AABB_20const__2c_20b2AABB__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2AABB_20const__2c_20void___fromWireType_28b2AABB_20const__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2AABB___fromWireType_28b2AABB__29(HEAP32[$3 + 4 >> 2])) & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 & 1;
}

function emscripten__internal__WireTypePack_unsigned_20int____WireTypePack_28unsigned_20int__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 20 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = $1;
 $0 = HEAP32[$2 + 20 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__array_emscripten__internal__GenericWireType_2c_201ul___data_5babi_v160004_5d_28_29($0), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 $1 = HEAP32[$2 + 16 >> 2];
 HEAP32[$2 + 28 >> 2] = $2 + 12;
 HEAP32[$2 + 24 >> 2] = $1;
 void_20emscripten__internal__writeGenericWireType_unsigned_20int__28emscripten__internal__GenericWireType___2c_20unsigned_20int_29(HEAP32[$2 + 28 >> 2], emscripten__internal__BindingType_unsigned_20int_2c_20void___toWireType_28unsigned_20int_20const__29(HEAP32[$2 + 24 >> 2]));
 emscripten__internal__writeGenericWireTypes_28emscripten__internal__GenericWireType___29(HEAP32[$2 + 28 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return $0;
}

function emscripten__internal__MethodInvoker_unsigned_20int_20_28b2Draw____29_28_29_20const_2c_20unsigned_20int_2c_20b2Draw_20const____invoke_28unsigned_20int_20_28b2Draw____20const__29_28_29_20const_2c_20b2Draw_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Draw_20const__2c_20void___fromWireType_28b2Draw_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[$0 | 0]($1) | 0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 $0 = emscripten__internal__BindingType_unsigned_20int_2c_20void___toWireType_28unsigned_20int_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__WireTypePack_b2Transform_20const____WireTypePack_28b2Transform_20const__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 20 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = $1;
 $0 = HEAP32[$2 + 20 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__array_emscripten__internal__GenericWireType_2c_201ul___data_5babi_v160004_5d_28_29($0), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 $1 = HEAP32[$2 + 16 >> 2];
 HEAP32[$2 + 28 >> 2] = $2 + 12;
 HEAP32[$2 + 24 >> 2] = $1;
 void_20emscripten__internal__writeGenericWireType_b2Transform__28emscripten__internal__GenericWireType___2c_20b2Transform__29(HEAP32[$2 + 28 >> 2], emscripten__internal__GenericBindingType_b2Transform___toWireType_28b2Transform_20const__29(HEAP32[$2 + 24 >> 2]));
 emscripten__internal__writeGenericWireTypes_28emscripten__internal__GenericWireType___29(HEAP32[$2 + 28 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return $0;
}

function void_20emscripten__function_unsigned_20int_2c_20unsigned_20int_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20unsigned_20int_20_28__29_28unsigned_20int_29_2c_20emscripten__allow_raw_pointers_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 20 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = $1;
 HEAP32[$2 + 8 >> 2] = 407;
 $0 = HEAP32[$2 + 20 >> 2];
 $1 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_unsigned_20int_2c_20unsigned_20int___getCount_28_29_20const($2 + 15 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_unsigned_20int_2c_20unsigned_20int___getTypes_28_29_20const($2 + 15 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
 _embind_register_function($0 | 0, $1 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 8 >> 2], HEAP32[$2 + 16 >> 2], 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_int_20_28b2PolygonShape____29_28_29_20const_2c_20int_2c_20b2PolygonShape_20const____invoke_28int_20_28b2PolygonShape____20const__29_28_29_20const_2c_20b2PolygonShape_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2PolygonShape_20const__2c_20void___fromWireType_28b2PolygonShape_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[$0 | 0]($1) | 0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 $0 = emscripten__internal__BindingType_int_2c_20void___toWireType_28int_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function std____2__reverse_iterator_int___20std____2____rewrap_range_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2];
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 20 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__reverse_iterator_int___20std____2____rewrap_iter_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_int___2c_20false___28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2]), 
 HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____max_size_28_29_20const($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = unsigned_20long_20std____2__allocator_traits_std____2__allocator_b2Vec2____max_size_5babi_v160004_5d_std____2__allocator_b2Vec2__2c_20void__28std____2__allocator_b2Vec2__20const__29(std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______alloc_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2])), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__numeric_limits_long___max_5babi_v160004_5d_28_29(), 
 HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 $0 = unsigned_20long_20const__20std____2__min_5babi_v160004_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($1 + 8 | 0, $1 + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function emscripten__internal__MethodInvoker_void_20_28b2ContactListenerWrapper____29_28unsigned_20int_29_2c_20void_2c_20b2ContactListenerWrapper__2c_20unsigned_20int___invoke_28void_20_28b2ContactListenerWrapper____20const__29_28unsigned_20int_29_2c_20b2ContactListenerWrapper__2c_20unsigned_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2ContactListenerWrapper__2c_20void___fromWireType_28b2ContactListenerWrapper__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_int_20_28b2CircleShape____29_28_29_20const_2c_20int_2c_20b2CircleShape_20const____invoke_28int_20_28b2CircleShape____20const__29_28_29_20const_2c_20b2CircleShape_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2CircleShape_20const__2c_20void___fromWireType_28b2CircleShape_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[$0 | 0]($1) | 0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 $0 = emscripten__internal__BindingType_int_2c_20void___toWireType_28int_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2Mat22__GetInverse_28_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $1;
 $1 = HEAP32[$2 + 28 >> 2];
 HEAPF32[$2 + 24 >> 2] = HEAPF32[$1 >> 2];
 HEAPF32[$2 + 20 >> 2] = HEAPF32[$1 + 8 >> 2];
 HEAPF32[$2 + 16 >> 2] = HEAPF32[$1 + 4 >> 2];
 HEAPF32[$2 + 12 >> 2] = HEAPF32[$1 + 12 >> 2];
 b2Mat22__b2Mat22_28_29($0);
 HEAPF32[$2 + 8 >> 2] = Math_fround(HEAPF32[$2 + 24 >> 2] * HEAPF32[$2 + 12 >> 2]) - Math_fround(HEAPF32[$2 + 20 >> 2] * HEAPF32[$2 + 16 >> 2]);
 if (HEAPF32[$2 + 8 >> 2] != Math_fround(0)) {
  HEAPF32[$2 + 8 >> 2] = Math_fround(1) / HEAPF32[$2 + 8 >> 2];
 }
 HEAPF32[$0 >> 2] = HEAPF32[$2 + 8 >> 2] * HEAPF32[$2 + 12 >> 2];
 HEAPF32[$0 + 8 >> 2] = Math_fround(-HEAPF32[$2 + 8 >> 2]) * HEAPF32[$2 + 20 >> 2];
 HEAPF32[$0 + 4 >> 2] = Math_fround(-HEAPF32[$2 + 8 >> 2]) * HEAPF32[$2 + 16 >> 2];
 HEAPF32[$0 + 12 >> 2] = HEAPF32[$2 + 8 >> 2] * HEAPF32[$2 + 24 >> 2];
 __stack_pointer = $2 + 32 | 0;
}

function b2ChainAndPolygonContact__b2ChainAndPolygonContact_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 24 >> 2] = $0;
 HEAP32[$5 + 20 >> 2] = $1;
 HEAP32[$5 + 16 >> 2] = $2;
 HEAP32[$5 + 12 >> 2] = $3;
 HEAP32[$5 + 8 >> 2] = $4;
 $0 = HEAP32[$5 + 24 >> 2];
 HEAP32[$5 + 28 >> 2] = $0;
 b2Contact__b2Contact_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_29($0, HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 8 >> 2]);
 HEAP32[$0 >> 2] = 18460;
 if ((b2Fixture__GetType_28_29_20const(HEAP32[$0 + 48 >> 2]) | 0) != 3) {
  __assert_fail(6751, 4651, 46, 3096);
  wasm2js_trap();
 }
 if ((b2Fixture__GetType_28_29_20const(HEAP32[$0 + 52 >> 2]) | 0) != 2) {
  __assert_fail(6634, 4651, 47, 3096);
  wasm2js_trap();
 }
 __stack_pointer = $5 + 32 | 0;
 return HEAP32[$5 + 28 >> 2];
}

function emscripten__internal__MethodInvoker_int_20_28b2EdgeShape____29_28_29_20const_2c_20int_2c_20b2EdgeShape_20const____invoke_28int_20_28b2EdgeShape____20const__29_28_29_20const_2c_20b2EdgeShape_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2EdgeShape_20const__2c_20void___fromWireType_28b2EdgeShape_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[$0 | 0]($1) | 0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 $0 = emscripten__internal__BindingType_int_2c_20void___toWireType_28int_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function std____2__reverse_iterator_b2Vec2___20std____2____rewrap_iter_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_b2Vec2___2c_20false___28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2];
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 20 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____unwrap_iter_impl_std____2__reverse_iterator_b2Vec2___2c_20false_____rewrap_5babi_v160004_5d_28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2]), 
 HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function __cxxabiv1____pointer_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 label$1: {
  while (1) {
   if (!$1) {
    return 0;
   }
   $1 = __dynamic_cast($1, 23972, 24116, 0);
   if (!$1 | HEAP32[$1 + 8 >> 2] & (HEAP32[$0 + 8 >> 2] ^ -1)) {
    break label$1;
   }
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[$0 + 12 >> 2], HEAP32[$1 + 12 >> 2], 0)) {
    return 1;
   }
   if (!(HEAP8[$0 + 8 | 0] & 1)) {
    break label$1;
   }
   $2 = HEAP32[$0 + 12 >> 2];
   if (!$2) {
    break label$1;
   }
   $0 = __dynamic_cast($2, 23972, 24116, 0);
   if ($0) {
    $1 = HEAP32[$1 + 12 >> 2];
    continue;
   }
   break;
  }
  $0 = __dynamic_cast($2, 23972, 24228, 0);
  if (!$0) {
   break label$1;
  }
  $3 = __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($0, HEAP32[$1 + 12 >> 2]);
 }
 return $3;
}

function std____2__vector_int_2c_20std____2__allocator_int____max_size_28_29_20const($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = unsigned_20long_20std____2__allocator_traits_std____2__allocator_int____max_size_5babi_v160004_5d_std____2__allocator_int__2c_20void__28std____2__allocator_int__20const__29(std____2__vector_int_2c_20std____2__allocator_int______alloc_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2])), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__numeric_limits_long___max_5babi_v160004_5d_28_29(), 
 HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 $0 = unsigned_20long_20const__20std____2__min_5babi_v160004_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($1 + 8 | 0, $1 + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function emscripten__internal__WireTypePack_b2Vec2_20const____WireTypePack_28b2Vec2_20const__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 20 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = $1;
 $0 = HEAP32[$2 + 20 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__array_emscripten__internal__GenericWireType_2c_201ul___data_5babi_v160004_5d_28_29($0), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 $1 = HEAP32[$2 + 16 >> 2];
 HEAP32[$2 + 28 >> 2] = $2 + 12;
 HEAP32[$2 + 24 >> 2] = $1;
 void_20emscripten__internal__writeGenericWireType_b2Vec2__28emscripten__internal__GenericWireType___2c_20b2Vec2__29(HEAP32[$2 + 28 >> 2], emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$2 + 24 >> 2]));
 emscripten__internal__writeGenericWireTypes_28emscripten__internal__GenericWireType___29(HEAP32[$2 + 28 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return $0;
}

function b2CircleShape__ComputeMass_28b2MassData__2c_20float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0);
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = HEAP32[$3 + 12 >> 2];
 HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] = Math_fround(Math_fround(HEAPF32[$3 + 4 >> 2] * Math_fround(3.1415927410125732)) * HEAPF32[$4 + 8 >> 2]) * HEAPF32[$4 + 8 >> 2];
 $5 = HEAP32[$4 + 16 >> 2];
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $5;
 $2 = HEAPF32[HEAP32[$3 + 8 >> 2] >> 2];
 $6 = Math_fround(Math_fround(Math_fround(HEAPF32[$4 + 8 >> 2] * Math_fround(.5)) * HEAPF32[$4 + 8 >> 2]) + b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 12 | 0, $4 + 12 | 0));
 HEAPF32[HEAP32[$3 + 8 >> 2] + 12 >> 2] = $2 * $6;
 __stack_pointer = $3 + 16 | 0;
}

function b2ChainAndCircleContact__b2ChainAndCircleContact_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 24 >> 2] = $0;
 HEAP32[$5 + 20 >> 2] = $1;
 HEAP32[$5 + 16 >> 2] = $2;
 HEAP32[$5 + 12 >> 2] = $3;
 HEAP32[$5 + 8 >> 2] = $4;
 $0 = HEAP32[$5 + 24 >> 2];
 HEAP32[$5 + 28 >> 2] = $0;
 b2Contact__b2Contact_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_29($0, HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 8 >> 2]);
 HEAP32[$0 >> 2] = 18400;
 if ((b2Fixture__GetType_28_29_20const(HEAP32[$0 + 48 >> 2]) | 0) != 3) {
  __assert_fail(6751, 4953, 46, 3201);
  wasm2js_trap();
 }
 if (b2Fixture__GetType_28_29_20const(HEAP32[$0 + 52 >> 2])) {
  __assert_fail(9339, 4953, 47, 3201);
  wasm2js_trap();
 }
 __stack_pointer = $5 + 32 | 0;
 return HEAP32[$5 + 28 >> 2];
}

function b2Body__ApplyForce_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = Math_fround(0);
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP8[$4 + 19 | 0] = $3;
 $0 = HEAP32[$4 + 28 >> 2];
 label$1: {
  if (HEAP32[$0 >> 2] != 2) {
   break label$1;
  }
  if (!(!(HEAP8[$4 + 19 | 0] & 1) | HEAPU16[$0 + 4 >> 1] & 2)) {
   b2Body__SetAwake_28bool_29($0, 1);
  }
  if (!(HEAPU16[$0 + 4 >> 1] & 2)) {
   break label$1;
  }
  b2Vec2__operator___28b2Vec2_20const__29($0 + 76 | 0, HEAP32[$4 + 24 >> 2]);
  operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 8 | 0, HEAP32[$4 + 20 >> 2], $0 + 44 | 0);
  $5 = b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($4 + 8 | 0, HEAP32[$4 + 24 >> 2]);
  HEAPF32[$0 + 84 >> 2] = HEAPF32[$0 + 84 >> 2] + $5;
 }
 __stack_pointer = $4 + 32 | 0;
}

function b2BlockAllocator__Free_28void__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 label$1: {
  if (!HEAP32[$3 + 20 >> 2]) {
   break label$1;
  }
  if (HEAP32[$3 + 20 >> 2] <= 0) {
   __assert_fail(8425, 5308, 178, 9633);
   wasm2js_trap();
  }
  if (HEAP32[$3 + 20 >> 2] > 640) {
   b2Free_28void__29(HEAP32[$3 + 24 >> 2]);
   break label$1;
  }
  HEAP32[$3 + 16 >> 2] = HEAPU8[HEAP32[$3 + 20 >> 2] + 30020 | 0];
  if (!(HEAP32[$3 + 16 >> 2] < 14 & HEAP32[$3 + 16 >> 2] >= 0)) {
   __assert_fail(2224, 5308, 187, 9633);
   wasm2js_trap();
  }
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 24 >> 2];
  HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[($0 + 12 | 0) + (HEAP32[$3 + 16 >> 2] << 2) >> 2];
  HEAP32[($0 + 12 | 0) + (HEAP32[$3 + 16 >> 2] << 2) >> 2] = HEAP32[$3 + 12 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
}

function b2WheelJoint__GetJointTranslation_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 48 >> 2];
 HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 52 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($1 + 28 | 0, HEAP32[$1 + 40 >> 2], $0 + 76 | 0);
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($1 + 20 | 0, HEAP32[$1 + 36 >> 2], $0 + 84 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 12 | 0, $1 + 20 | 0, $1 + 28 | 0);
 b2Body__GetWorldVector_28b2Vec2_20const__29_20const($1 + 4 | 0, HEAP32[$1 + 40 >> 2], $0 + 92 | 0);
 wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 12 | 0, $1 + 4 | 0), 
 HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
 __stack_pointer = $1 + 48 | 0;
 return Math_fround(HEAPF32[$1 >> 2]);
}

function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char______compressed_pair_5babi_v160004_5d_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_200_2c_20false_____compressed_pair_elem_5babi_v160004_5d_28std____2____default_init_tag_29($0);
 std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_5babi_v160004_5d_28std____2____default_init_tag_29($0);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______destruct_at_end_5babi_v160004_5d_28b2Vec2__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______invalidate_iterators_past_5babi_v160004_5d_28b2Vec2__29($0, HEAP32[$2 + 8 >> 2]);
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____size_5babi_v160004_5d_28_29_20const($0), 
 HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______base_destruct_at_end_5babi_v160004_5d_28b2Vec2__29($0, HEAP32[$2 + 8 >> 2]);
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______annotate_shrink_5babi_v160004_5d_28unsigned_20long_29_20const($0, HEAP32[$2 + 4 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function b2CircleShape__ComputeAABB_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 $1 = HEAP32[$4 + 20 >> 2];
 $0 = HEAP32[$4 + 28 >> 2];
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($4, HEAP32[$4 + 20 >> 2] + 8 | 0, $0 + 12 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($4 + 8 | 0, $1, $4);
 b2Vec2__Set_28float_2c_20float_29(HEAP32[$4 + 24 >> 2], Math_fround(HEAPF32[$4 + 8 >> 2] - HEAPF32[$0 + 8 >> 2]), Math_fround(HEAPF32[$4 + 12 >> 2] - HEAPF32[$0 + 8 >> 2]));
 b2Vec2__Set_28float_2c_20float_29(HEAP32[$4 + 24 >> 2] + 8 | 0, Math_fround(HEAPF32[$4 + 8 >> 2] + HEAPF32[$0 + 8 >> 2]), Math_fround(HEAPF32[$4 + 12 >> 2] + HEAPF32[$0 + 8 >> 2]));
 __stack_pointer = $4 + 32 | 0;
}

function b2EPCollider__ComputeEdgeSeparation_28_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $1;
 $1 = HEAP32[$2 + 28 >> 2];
 HEAP32[$0 >> 2] = 1;
 HEAP32[$0 + 4 >> 2] = !(HEAP8[$1 + 248 | 0] & 1);
 HEAPF32[$0 + 8 >> 2] = 34028234663852886e22;
 HEAP32[$2 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 24 >> 2] < HEAP32[$1 + 128 >> 2]) {
   operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 12 | 0, (HEAP32[$2 + 24 >> 2] << 3) + $1 | 0, $1 + 164 | 0);
   wasm2js_i32$0 = $2, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 212 | 0, $2 + 12 | 0), 
   HEAPF32[wasm2js_i32$0 + 20 >> 2] = wasm2js_f32$0;
   if (HEAPF32[$2 + 20 >> 2] < HEAPF32[$0 + 8 >> 2]) {
    HEAPF32[$0 + 8 >> 2] = HEAPF32[$2 + 20 >> 2];
   }
   HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 32 | 0;
}

function __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3, $4) {
 HEAP8[$1 + 53 | 0] = 1;
 label$1: {
  if (HEAP32[$1 + 4 >> 2] != ($3 | 0)) {
   break label$1;
  }
  HEAP8[$1 + 52 | 0] = 1;
  $3 = HEAP32[$1 + 16 >> 2];
  label$2: {
   if (!$3) {
    HEAP32[$1 + 36 >> 2] = 1;
    HEAP32[$1 + 24 >> 2] = $4;
    HEAP32[$1 + 16 >> 2] = $2;
    if (($4 | 0) != 1) {
     break label$1;
    }
    if (HEAP32[$1 + 48 >> 2] == 1) {
     break label$2;
    }
    break label$1;
   }
   if (($2 | 0) == ($3 | 0)) {
    $3 = HEAP32[$1 + 24 >> 2];
    if (($3 | 0) == 2) {
     HEAP32[$1 + 24 >> 2] = $4;
     $3 = $4;
    }
    if (HEAP32[$1 + 48 >> 2] != 1) {
     break label$1;
    }
    if (($3 | 0) == 1) {
     break label$2;
    }
    break label$1;
   }
   HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 1;
  }
  HEAP8[$1 + 54 | 0] = 1;
 }
}

function emscripten__internal__WireTypePack_int_20const____WireTypePack_28int_20const__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 20 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = $1;
 $0 = HEAP32[$2 + 20 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__array_emscripten__internal__GenericWireType_2c_201ul___data_5babi_v160004_5d_28_29($0), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 $1 = HEAP32[$2 + 16 >> 2];
 HEAP32[$2 + 28 >> 2] = $2 + 12;
 HEAP32[$2 + 24 >> 2] = $1;
 void_20emscripten__internal__writeGenericWireType_int__28emscripten__internal__GenericWireType___2c_20int_29(HEAP32[$2 + 28 >> 2], emscripten__internal__BindingType_int_2c_20void___toWireType_28int_20const__29(HEAP32[$2 + 24 >> 2]));
 emscripten__internal__writeGenericWireTypes_28emscripten__internal__GenericWireType___29(HEAP32[$2 + 28 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return $0;
}

function b2EdgeShape__operator__28b2EdgeShape_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 $5 = HEAP32[$3 + 12 >> 2];
 b2Shape__operator__28b2Shape_20const__29($5, HEAP32[$3 + 8 >> 2]);
 $2 = HEAP32[$3 + 8 >> 2];
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 16 >> 2];
 $4 = $0;
 $0 = $5;
 HEAP32[$0 + 12 >> 2] = $4;
 HEAP32[$0 + 16 >> 2] = $1;
 HEAP16[$0 + 44 >> 1] = HEAPU16[$2 + 44 >> 1];
 $0 = HEAP32[$2 + 40 >> 2];
 $1 = HEAP32[$2 + 36 >> 2];
 $4 = $1;
 $1 = $5;
 HEAP32[$1 + 36 >> 2] = $4;
 HEAP32[$1 + 40 >> 2] = $0;
 $1 = HEAP32[$2 + 32 >> 2];
 $0 = HEAP32[$2 + 28 >> 2];
 $4 = $0;
 $0 = $5;
 HEAP32[$0 + 28 >> 2] = $4;
 HEAP32[$0 + 32 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 $1 = HEAP32[$2 + 20 >> 2];
 $4 = $1;
 $1 = $5;
 HEAP32[$1 + 20 >> 2] = $4;
 HEAP32[$1 + 24 >> 2] = $0;
 __stack_pointer = $3 + 16 | 0;
 return $1;
}

function emscripten__internal__MethodInvoker_int_20_28b2Shape____29_28_29_20const_2c_20int_2c_20b2Shape_20const____invoke_28int_20_28b2Shape____20const__29_28_29_20const_2c_20b2Shape_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Shape_20const__2c_20void___fromWireType_28b2Shape_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[$0 | 0]($1) | 0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 $0 = emscripten__internal__BindingType_int_2c_20void___toWireType_28int_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2Fixture__RayCast_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$0 + 12 >> 2];
 $0 = (wasm2js_i32$1 = $1, wasm2js_i32$2 = HEAP32[$4 + 8 >> 2], wasm2js_i32$3 = HEAP32[$4 + 4 >> 2], 
 wasm2js_i32$4 = b2Body__GetTransform_28_29_20const(HEAP32[$0 + 8 >> 2]), wasm2js_i32$5 = HEAP32[$4 >> 2], 
 wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0) | 0);
 __stack_pointer = $4 + 16 | 0;
 return $0 & 1;
}

function std____2__set_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____insert_5babi_v160004_5d_28b2Fixture__20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______insert_unique_5babi_v160004_5d_28b2Fixture__20const__29($3, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
 std____2__pair_std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__2c_20bool___pair_5babi_v160004_5d_std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__2c_20bool_2c_20_28void__290__28std____2__pair_std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__2c_20bool____29($0, $3);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2ContactListener____29_28unsigned_20int_29_2c_20void_2c_20b2ContactListener__2c_20unsigned_20int___invoke_28void_20_28b2ContactListener____20const__29_28unsigned_20int_29_2c_20b2ContactListener__2c_20unsigned_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2ContactListener__2c_20void___fromWireType_28b2ContactListener__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__Invoker_float_2c_20unsigned_20int_2c_20int___invoke_28float_20_28__29_28unsigned_20int_2c_20int_29_2c_20unsigned_20int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$3 + 8 >> 2]), emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$3 + 4 >> 2]))), 
 HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
 $4 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($3);
 __stack_pointer = $3 + 16 | 0;
 return Math_fround($4);
}

function std____2__reverse_iterator_int___20std____2____rewrap_iter_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_int___2c_20false___28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2];
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 20 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____unwrap_iter_impl_std____2__reverse_iterator_int___2c_20false_____rewrap_5babi_v160004_5d_28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2]), 
 HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function float_20emscripten__val__call_float_2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float___28char_20const__2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = Math_fround(0);
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 $7 = emscripten__internal__MethodCaller_float_2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float____call_28emscripten___EM_VAL__2c_20char_20const__2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float__29(HEAP32[HEAP32[$6 + 28 >> 2] >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP32[$6 + 8 >> 2]);
 __stack_pointer = $6 + 32 | 0;
 return $7;
}

function b2StackAllocator__Free_28void__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAP32[$0 + 102796 >> 2] <= 0) {
  __assert_fail(11971, 5377, 67, 9633);
  wasm2js_trap();
 }
 HEAP32[$2 + 4 >> 2] = (Math_imul(HEAP32[$0 + 102796 >> 2], 12) + $0 | 0) + 102400;
 if (HEAP32[$2 + 8 >> 2] != HEAP32[HEAP32[$2 + 4 >> 2] >> 2]) {
  __assert_fail(10212, 5377, 69, 9633);
  wasm2js_trap();
 }
 label$3: {
  if (HEAP8[HEAP32[$2 + 4 >> 2] + 8 | 0] & 1) {
   b2Free_28void__29(HEAP32[$2 + 8 >> 2]);
   break label$3;
  }
  HEAP32[$0 + 102400 >> 2] = HEAP32[$0 + 102400 >> 2] - HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2];
 }
 HEAP32[$0 + 102404 >> 2] = HEAP32[$0 + 102404 >> 2] - HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2];
 HEAP32[$0 + 102796 >> 2] = HEAP32[$0 + 102796 >> 2] - 1;
 HEAP32[$2 + 8 >> 2] = 0;
 __stack_pointer = $2 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassConstructor_b2PrismaticJointDef__20_28__29_28_29___invoke_b2PrismaticJointDef__28b2PrismaticJointDef__20_28__29_28_29_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = 644;
 $0 = emscripten__internal__TypeID_b2PrismaticJointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2PrismaticJointDef____getCount_28_29_20const($1 + 7 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2PrismaticJointDef____getTypes_28_29_20const($1 + 7 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 _embind_register_class_constructor($0 | 0, $2 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() | 0, HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function b2Sweep__Advance_28float_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAPF32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 if (!(HEAPF32[$0 + 32 >> 2] < Math_fround(1))) {
  __assert_fail(7921, 7138, 696, 9783);
  wasm2js_trap();
 }
 HEAPF32[$2 + 20 >> 2] = Math_fround(HEAPF32[$2 + 24 >> 2] - HEAPF32[$0 + 32 >> 2]) / Math_fround(Math_fround(1) - HEAPF32[$0 + 32 >> 2]);
 $1 = HEAPF32[$2 + 20 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 4 | 0, $0 + 16 | 0, $0 + 8 | 0);
 operator__28float_2c_20b2Vec2_20const__29($2 + 12 | 0, $1, $2 + 4 | 0);
 b2Vec2__operator___28b2Vec2_20const__29($0 + 8 | 0, $2 + 12 | 0);
 HEAPF32[$0 + 24 >> 2] = Math_fround(HEAPF32[$2 + 20 >> 2] * Math_fround(HEAPF32[$0 + 28 >> 2] - HEAPF32[$0 + 24 >> 2])) + HEAPF32[$0 + 24 >> 2];
 HEAPF32[$0 + 32 >> 2] = HEAPF32[$2 + 24 >> 2];
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassConstructor_b2RevoluteJointDef__20_28__29_28_29___invoke_b2RevoluteJointDef__28b2RevoluteJointDef__20_28__29_28_29_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = 657;
 $0 = emscripten__internal__TypeID_b2RevoluteJointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2RevoluteJointDef____getCount_28_29_20const($1 + 7 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2RevoluteJointDef____getTypes_28_29_20const($1 + 7 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 _embind_register_class_constructor($0 | 0, $2 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() | 0, HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassConstructor_b2DistanceJointDef__20_28__29_28_29___invoke_b2DistanceJointDef__28b2DistanceJointDef__20_28__29_28_29_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = 615;
 $0 = emscripten__internal__TypeID_b2DistanceJointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2DistanceJointDef____getCount_28_29_20const($1 + 7 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2DistanceJointDef____getTypes_28_29_20const($1 + 7 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 _embind_register_class_constructor($0 | 0, $2 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() | 0, HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Fixture____29_28b2MassData__29_20const_2c_20void_2c_20b2Fixture_20const__2c_20b2MassData____invoke_28void_20_28b2Fixture____20const__29_28b2MassData__29_20const_2c_20b2Fixture_20const__2c_20b2MassData__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2Fixture_20const__2c_20void___fromWireType_28b2Fixture_20const__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2MassData__2c_20void___fromWireType_28b2MassData__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__Invoker_unsigned_20int_2c_20unsigned_20int_2c_20int___invoke_28unsigned_20int_20_28__29_28unsigned_20int_2c_20int_29_2c_20unsigned_20int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 wasm2js_i32$0 = $3, wasm2js_i32$1 = FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$3 + 8 >> 2]), emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$3 + 4 >> 2])) | 0, 
 HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = emscripten__internal__BindingType_unsigned_20int_2c_20void___toWireType_28unsigned_20int_20const__29($3);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function float_20emscripten__wrapper_b2RayCastCallback___call_float_2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float___28char_20const__2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = Math_fround(0);
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 $7 = float_20emscripten__val__call_float_2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float___28char_20const__2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float__29_20const(HEAP32[$6 + 28 >> 2] + 8 | 0, HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP32[$6 + 8 >> 2]);
 __stack_pointer = $6 + 32 | 0;
 return $7;
}

function std____2__vector_int_2c_20std____2__allocator_int______destruct_at_end_5babi_v160004_5d_28int__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 std____2__vector_int_2c_20std____2__allocator_int______invalidate_iterators_past_5babi_v160004_5d_28int__29($0, HEAP32[$2 + 8 >> 2]);
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__vector_int_2c_20std____2__allocator_int____size_5babi_v160004_5d_28_29_20const($0), 
 HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 std____2__vector_int_2c_20std____2__allocator_int______base_destruct_at_end_5babi_v160004_5d_28int__29($0, HEAP32[$2 + 8 >> 2]);
 std____2__vector_int_2c_20std____2__allocator_int______annotate_shrink_5babi_v160004_5d_28unsigned_20long_29_20const($0, HEAP32[$2 + 4 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 $4 = 1;
 label$1: {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0)) {
   break label$1;
  }
  $4 = 0;
  if (!$1) {
   break label$1;
  }
  $1 = __dynamic_cast($1, 23972, 24020, 0);
  $4 = 0;
  if (!$1) {
   break label$1;
  }
  __memset($3 + 12 | 0, 0, 52);
  HEAP32[$3 + 56 >> 2] = 1;
  HEAP32[$3 + 20 >> 2] = -1;
  HEAP32[$3 + 16 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, $3 + 8 | 0, HEAP32[$2 >> 2], 1);
  $4 = HEAP32[$3 + 32 >> 2];
  if (($4 | 0) == 1) {
   HEAP32[$2 >> 2] = HEAP32[$3 + 24 >> 2];
  }
  $4 = ($4 | 0) == 1;
 }
 __stack_pointer = $3 - -64 | 0;
 return $4 | 0;
}

function void_20emscripten__function_void_2c_20unsigned_20int_2c_20unsigned_20int__28char_20const__2c_20void_20_28__29_28unsigned_20int_2c_20unsigned_20int_29_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 408;
 $0 = HEAP32[$2 + 24 >> 2];
 $1 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int_2c_20unsigned_20int___getCount_28_29_20const($2 + 19 | 0);
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int_2c_20unsigned_20int___getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_function($0 | 0, $1 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2], 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassConstructor_b2World__20_28__29_28b2Vec2___29___invoke_b2World__28b2World__20_28__29_28b2Vec2___29_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = 507;
 $0 = emscripten__internal__TypeID_b2World_2c_20void___get_28_29();
 $2 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2World__2c_20b2Vec2_____getCount_28_29_20const($1 + 7 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2World__2c_20b2Vec2_____getTypes_28_29_20const($1 + 7 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 _embind_register_class_constructor($0 | 0, $2 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__function_unsigned_20int_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20unsigned_20int_20_28__29_28_29_2c_20emscripten__allow_raw_pointers_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 20 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = $1;
 HEAP32[$2 + 8 >> 2] = 410;
 $0 = HEAP32[$2 + 20 >> 2];
 $1 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_unsigned_20int___getCount_28_29_20const($2 + 15 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_unsigned_20int___getTypes_28_29_20const($2 + 15 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
 _embind_register_function($0 | 0, $1 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() | 0, HEAP32[$2 + 8 >> 2], HEAP32[$2 + 16 >> 2], 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__function_unsigned_20int_2c_20unsigned_20int_2c_20int__28char_20const__2c_20unsigned_20int_20_28__29_28unsigned_20int_2c_20int_29_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 409;
 $0 = HEAP32[$2 + 24 >> 2];
 $1 = emscripten__internal__WithPolicies____ArgTypeList_unsigned_20int_2c_20unsigned_20int_2c_20int___getCount_28_29_20const($2 + 19 | 0);
 $3 = emscripten__internal__WithPolicies____ArgTypeList_unsigned_20int_2c_20unsigned_20int_2c_20int___getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_function($0 | 0, $1 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2], 0);
 __stack_pointer = $2 + 32 | 0;
}

function void_20emscripten__internal__RegisterClassConstructor_b2WheelJointDef__20_28__29_28_29___invoke_b2WheelJointDef__28b2WheelJointDef__20_28__29_28_29_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = 690;
 $0 = emscripten__internal__TypeID_b2WheelJointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2WheelJointDef____getCount_28_29_20const($1 + 7 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2WheelJointDef____getTypes_28_29_20const($1 + 7 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 _embind_register_class_constructor($0 | 0, $2 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() | 0, HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassConstructor_b2MouseJointDef__20_28__29_28_29___invoke_b2MouseJointDef__28b2MouseJointDef__20_28__29_28_29_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = 634;
 $0 = emscripten__internal__TypeID_b2MouseJointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2MouseJointDef____getCount_28_29_20const($1 + 7 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2MouseJointDef____getTypes_28_29_20const($1 + 7 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 _embind_register_class_constructor($0 | 0, $2 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() | 0, HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassConstructor_b2MotorJointDef__20_28__29_28_29___invoke_b2MotorJointDef__28b2MotorJointDef__20_28__29_28_29_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = 624;
 $0 = emscripten__internal__TypeID_b2MotorJointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2MotorJointDef____getCount_28_29_20const($1 + 7 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2MotorJointDef____getTypes_28_29_20const($1 + 7 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 _embind_register_class_constructor($0 | 0, $2 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() | 0, HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2World____29_28b2ContactListener__29_2c_20void_2c_20b2World__2c_20b2ContactListener____invoke_28void_20_28b2World____20const__29_28b2ContactListener__29_2c_20b2World__2c_20b2ContactListener__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2World__2c_20void___fromWireType_28b2World__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2ContactListener__2c_20void___fromWireType_28b2ContactListener__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Body____29_28b2MassData__29_20const_2c_20void_2c_20b2Body_20const__2c_20b2MassData____invoke_28void_20_28b2Body____20const__29_28b2MassData__29_20const_2c_20b2Body_20const__2c_20b2MassData__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2Body_20const__2c_20void___fromWireType_28b2Body_20const__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2MassData__2c_20void___fromWireType_28b2MassData__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2PrismaticJoint____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2PrismaticJoint_20const____invoke_28b2Vec2_20const__20_28b2PrismaticJoint____20const__29_28_29_20const_2c_20b2PrismaticJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2PrismaticJoint_20const__2c_20void___fromWireType_28b2PrismaticJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______base_destruct_at_end_5babi_v160004_5d_28b2Vec2__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 while (1) {
  if (HEAP32[$2 + 8 >> 2] != HEAP32[$2 + 4 >> 2]) {
   $3 = std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______alloc_5babi_v160004_5d_28_29($0);
   $1 = HEAP32[$2 + 4 >> 2] - 8 | 0;
   HEAP32[$2 + 4 >> 2] = $1;
   void_20std____2__allocator_traits_std____2__allocator_b2Vec2____destroy_5babi_v160004_5d_b2Vec2_2c_20void__28std____2__allocator_b2Vec2___2c_20b2Vec2__29($3, b2Vec2__20std____2____to_address_5babi_v160004_5d_b2Vec2__28b2Vec2__29($1));
   continue;
  }
  break;
 }
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 __stack_pointer = $2 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassConstructor_b2WeldJointDef__20_28__29_28_29___invoke_b2WeldJointDef__28b2WeldJointDef__20_28__29_28_29_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = 681;
 $0 = emscripten__internal__TypeID_b2WeldJointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2WeldJointDef____getCount_28_29_20const($1 + 7 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2WeldJointDef____getTypes_28_29_20const($1 + 7 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 _embind_register_class_constructor($0 | 0, $2 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() | 0, HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassConstructor_b2RopeJointDef__20_28__29_28_29___invoke_b2RopeJointDef__28b2RopeJointDef__20_28__29_28_29_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = 670;
 $0 = emscripten__internal__TypeID_b2RopeJointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2RopeJointDef____getCount_28_29_20const($1 + 7 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2RopeJointDef____getTypes_28_29_20const($1 + 7 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 _embind_register_class_constructor($0 | 0, $2 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() | 0, HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassConstructor_b2PolygonShape__20_28__29_28_29___invoke_b2PolygonShape__28b2PolygonShape__20_28__29_28_29_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = 549;
 $0 = emscripten__internal__TypeID_b2PolygonShape_2c_20void___get_28_29();
 $2 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2PolygonShape____getCount_28_29_20const($1 + 7 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2PolygonShape____getTypes_28_29_20const($1 + 7 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 _embind_register_class_constructor($0 | 0, $2 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() | 0, HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2PrismaticJoint____29_28float_29_2c_20void_2c_20b2PrismaticJoint__2c_20float___invoke_28void_20_28b2PrismaticJoint____20const__29_28float_29_2c_20b2PrismaticJoint__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = emscripten__internal__BindingType_b2PrismaticJoint__2c_20void___fromWireType_28b2PrismaticJoint__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodCaller_void_2c_20b2Transform_20const____call_28emscripten___EM_VAL__2c_20char_20const__2c_20b2Transform_20const__29($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = emscripten__internal__Signature_void_2c_20b2Transform_20const____get_method_caller_28_29(), 
 HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 emscripten__internal__WireTypePack_b2Transform_20const____WireTypePack_28b2Transform_20const__29($3 + 8 | 0, HEAP32[$3 + 20 >> 2]);
 _emval_call_void_method(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], emscripten__internal__WireTypePack_b2Transform_20const____operator_20void_20const__28_29_20const($3 + 8 | 0) | 0);
 __stack_pointer = $3 + 32 | 0;
}

function emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2RevoluteJoint____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2RevoluteJoint_20const____invoke_28b2Vec2_20const__20_28b2RevoluteJoint____20const__29_28_29_20const_2c_20b2RevoluteJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2RevoluteJoint_20const__2c_20void___fromWireType_28b2RevoluteJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2DistanceJoint____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2DistanceJoint_20const____invoke_28b2Vec2_20const__20_28b2DistanceJoint____20const__29_28_29_20const_2c_20b2DistanceJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2DistanceJoint_20const__2c_20void___fromWireType_28b2DistanceJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function void_20emscripten__val__call_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const___28char_20const__2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 emscripten__internal__MethodCaller_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const____call_28emscripten___EM_VAL__2c_20char_20const__2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const__29(HEAP32[HEAP32[$6 + 28 >> 2] >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP32[$6 + 8 >> 2]);
 __stack_pointer = $6 + 32 | 0;
}

function b2GrowableStack_int_2c_20256___Push_28int_20const__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAP32[$0 + 1028 >> 2] == HEAP32[$0 + 1032 >> 2]) {
  HEAP32[$2 + 4 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$0 + 1032 >> 2] = HEAP32[$0 + 1032 >> 2] << 1;
  wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Alloc_28int_29(HEAP32[$0 + 1032 >> 2] << 2), 
  HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  __memcpy(HEAP32[$0 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$0 + 1028 >> 2] << 2);
  if (HEAP32[$2 + 4 >> 2] != ($0 + 4 | 0)) {
   b2Free_28void__29(HEAP32[$2 + 4 >> 2]);
  }
 }
 HEAP32[HEAP32[$0 >> 2] + (HEAP32[$0 + 1028 >> 2] << 2) >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 HEAP32[$0 + 1028 >> 2] = HEAP32[$0 + 1028 >> 2] + 1;
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__FunctionInvoker_void_20_28__29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29_2c_20void_2c_20b2AABB__2c_20b2AABB__2c_20b2AABB____invoke_28void_20_28___29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29_2c_20b2AABB__2c_20b2AABB__2c_20b2AABB__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[HEAP32[$4 + 12 >> 2] >> 2];
 FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_b2AABB__2c_20void___fromWireType_28b2AABB__29(HEAP32[$4 + 8 >> 2]), emscripten__internal__BindingType_b2AABB__2c_20void___fromWireType_28b2AABB__29(HEAP32[$4 + 4 >> 2]), emscripten__internal__BindingType_b2AABB__2c_20void___fromWireType_28b2AABB__29(HEAP32[$4 >> 2]));
 __stack_pointer = $4 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassConstructor_b2CircleShape__20_28__29_28_29___invoke_b2CircleShape__28b2CircleShape__20_28__29_28_29_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = 532;
 $0 = emscripten__internal__TypeID_b2CircleShape_2c_20void___get_28_29();
 $2 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2CircleShape____getCount_28_29_20const($1 + 7 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2CircleShape____getTypes_28_29_20const($1 + 7 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 _embind_register_class_constructor($0 | 0, $2 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() | 0, HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2RevoluteJoint____29_28float_29_2c_20void_2c_20b2RevoluteJoint__2c_20float___invoke_28void_20_28b2RevoluteJoint____20const__29_28float_29_2c_20b2RevoluteJoint__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = emscripten__internal__BindingType_b2RevoluteJoint__2c_20void___fromWireType_28b2RevoluteJoint__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2DistanceJoint____29_28float_29_2c_20void_2c_20b2DistanceJoint__2c_20float___invoke_28void_20_28b2DistanceJoint____20const__29_28float_29_2c_20b2DistanceJoint__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = emscripten__internal__BindingType_b2DistanceJoint__2c_20void___fromWireType_28b2DistanceJoint__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function __fwritex($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = HEAP32[$2 + 16 >> 2];
 label$1: {
  if (!$3) {
   if (__towrite($2)) {
    break label$1;
   }
   $3 = HEAP32[$2 + 16 >> 2];
  }
  $5 = HEAP32[$2 + 20 >> 2];
  if ($3 - $5 >>> 0 < $1 >>> 0) {
   return FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $1) | 0;
  }
  label$4: {
   if (HEAP32[$2 + 80 >> 2] < 0) {
    $3 = 0;
    break label$4;
   }
   $4 = $1;
   while (1) {
    $3 = $4;
    if (!$3) {
     $3 = 0;
     break label$4;
    }
    $4 = $3 - 1 | 0;
    if (HEAPU8[$4 + $0 | 0] != 10) {
     continue;
    }
    break;
   }
   $4 = FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $3) | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    break label$1;
   }
   $0 = $0 + $3 | 0;
   $1 = $1 - $3 | 0;
   $5 = HEAP32[$2 + 20 >> 2];
  }
  __memcpy($5, $0, $1);
  HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + $1;
  $4 = $1 + $3 | 0;
 }
 return $4;
}

function emscripten__value_object_b2RayCastOutput___value_object_28char_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 20 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = $1;
 $0 = HEAP32[$2 + 20 >> 2];
 emscripten__internal__noncopyable__noncopyable_28_29($0);
 HEAP32[$2 + 12 >> 2] = 452;
 HEAP32[$2 + 8 >> 2] = 453;
 $1 = emscripten__internal__TypeID_b2RayCastOutput_2c_20void___get_28_29();
 $3 = HEAP32[$2 + 16 >> 2];
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 12 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_int__28_29();
 $5 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
 _embind_register_value_object($1 | 0, $3 | 0, $4 | 0, $5 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return $0;
}

function emscripten__class__b2RayCastCallback_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2RayCastCallback_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2RayCastCallbackWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2RayCastCallbackWrapper__29____invoke_28b2RayCastCallbackWrapper__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 emscripten__class__b2RayCastCallback_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2RayCastCallback_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2RayCastCallbackWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2RayCastCallbackWrapper__29__operator_28_29_28b2RayCastCallbackWrapper__29_20const($1 + 11 | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__class__b2ContactListener_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2ContactListener_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2ContactListenerWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2ContactListenerWrapper__29____invoke_28b2ContactListenerWrapper__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 emscripten__class__b2ContactListener_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2ContactListener_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2ContactListenerWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2ContactListenerWrapper__29__operator_28_29_28b2ContactListenerWrapper__29_20const($1 + 11 | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__value_object_b2RayCastInput___value_object_28char_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 20 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = $1;
 $0 = HEAP32[$2 + 20 >> 2];
 emscripten__internal__noncopyable__noncopyable_28_29($0);
 HEAP32[$2 + 12 >> 2] = 446;
 HEAP32[$2 + 8 >> 2] = 447;
 $1 = emscripten__internal__TypeID_b2RayCastInput_2c_20void___get_28_29();
 $3 = HEAP32[$2 + 16 >> 2];
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 12 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_int__28_29();
 $5 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
 _embind_register_value_object($1 | 0, $3 | 0, $4 | 0, $5 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return $0;
}

function emscripten__internal__VectorAccess_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____get_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (HEAPU32[$3 + 4 >> 2] < std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____size_5babi_v160004_5d_28_29_20const(HEAP32[$3 + 8 >> 2]) >>> 0) {
   emscripten__val__val_b2Vec2_20const___28b2Vec2_20const__29($0, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____operator_5b_5d_5babi_v160004_5d_28unsigned_20long_29_20const(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]));
   break label$1;
  }
  emscripten__val__undefined_28_29($0);
 }
 __stack_pointer = $3 + 16 | 0;
}

function b2MulT_28b2Transform_20const__2c_20b2Vec2_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 HEAPF32[$3 + 20 >> 2] = HEAPF32[HEAP32[$3 + 24 >> 2] >> 2] - HEAPF32[HEAP32[$3 + 28 >> 2] >> 2];
 HEAPF32[$3 + 16 >> 2] = HEAPF32[HEAP32[$3 + 24 >> 2] + 4 >> 2] - HEAPF32[HEAP32[$3 + 28 >> 2] + 4 >> 2];
 HEAPF32[$3 + 12 >> 2] = Math_fround(HEAPF32[HEAP32[$3 + 28 >> 2] + 12 >> 2] * HEAPF32[$3 + 20 >> 2]) + Math_fround(HEAPF32[HEAP32[$3 + 28 >> 2] + 8 >> 2] * HEAPF32[$3 + 16 >> 2]);
 HEAPF32[$3 + 8 >> 2] = Math_fround(Math_fround(-HEAPF32[HEAP32[$3 + 28 >> 2] + 8 >> 2]) * HEAPF32[$3 + 20 >> 2]) + Math_fround(HEAPF32[HEAP32[$3 + 28 >> 2] + 12 >> 2] * HEAPF32[$3 + 16 >> 2]);
 b2Vec2__b2Vec2_28float_2c_20float_29($0, HEAPF32[$3 + 12 >> 2], HEAPF32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 32 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2MouseJoint____29_28b2Vec2_20const__29_2c_20void_2c_20b2MouseJoint__2c_20b2Vec2_20const____invoke_28void_20_28b2MouseJoint____20const__29_28b2Vec2_20const__29_2c_20b2MouseJoint__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2MouseJoint__2c_20void___fromWireType_28b2MouseJoint__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2MotorJoint____29_28b2Vec2_20const__29_2c_20void_2c_20b2MotorJoint__2c_20b2Vec2_20const____invoke_28void_20_28b2MotorJoint____20const__29_28b2Vec2_20const__29_2c_20b2MotorJoint__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2MotorJoint__2c_20void___fromWireType_28b2MotorJoint__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassConstructor_b2FixtureDef__20_28__29_28_29___invoke_b2FixtureDef__28b2FixtureDef__20_28__29_28_29_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = 560;
 $0 = emscripten__internal__TypeID_b2FixtureDef_2c_20void___get_28_29();
 $2 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2FixtureDef____getCount_28_29_20const($1 + 7 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2FixtureDef____getTypes_28_29_20const($1 + 7 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 _embind_register_class_constructor($0 | 0, $2 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() | 0, HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__value_object_b2Transform___value_object_28char_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 20 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = $1;
 $0 = HEAP32[$2 + 20 >> 2];
 emscripten__internal__noncopyable__noncopyable_28_29($0);
 HEAP32[$2 + 12 >> 2] = 436;
 HEAP32[$2 + 8 >> 2] = 437;
 $1 = emscripten__internal__TypeID_b2Transform_2c_20void___get_28_29();
 $3 = HEAP32[$2 + 16 >> 2];
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 12 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_int__28_29();
 $5 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
 _embind_register_value_object($1 | 0, $3 | 0, $4 | 0, $5 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return $0;
}

function std____2__pair_std____2____unwrap_ref_decay_std____2__reverse_iterator_b2Vec2_____type_2c_20std____2____unwrap_ref_decay_std____2__reverse_iterator_b2Vec2_____type__20std____2__make_pair_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2____28std____2__reverse_iterator_b2Vec2_____2c_20std____2__reverse_iterator_b2Vec2_____29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 std____2__pair_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2_____pair_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20_28void__290__28std____2__reverse_iterator_b2Vec2_____2c_20std____2__reverse_iterator_b2Vec2_____29($0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2PrismaticJoint____29_28bool_29_2c_20void_2c_20b2PrismaticJoint__2c_20bool___invoke_28void_20_28b2PrismaticJoint____20const__29_28bool_29_2c_20b2PrismaticJoint__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2 & 1;
 $2 = emscripten__internal__BindingType_b2PrismaticJoint__2c_20void___fromWireType_28b2PrismaticJoint__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29(HEAP8[$3 + 7 | 0] & 1) & 1);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Fixture____29_28b2Filter_20const__29_2c_20void_2c_20b2Fixture__2c_20b2Filter_20const____invoke_28void_20_28b2Fixture____20const__29_28b2Filter_20const__29_2c_20b2Fixture__2c_20b2Filter__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2Fixture__2c_20void___fromWireType_28b2Fixture__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Filter___fromWireType_28b2Filter__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Draw____29_28b2Transform_20const__29_2c_20void_2c_20b2Draw__2c_20b2Transform_20const____invoke_28void_20_28b2Draw____20const__29_28b2Transform_20const__29_2c_20b2Draw__2c_20b2Transform__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2Draw__2c_20void___fromWireType_28b2Draw__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Transform___fromWireType_28b2Transform__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__value_object_b2MassData___value_object_28char_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 20 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = $1;
 $0 = HEAP32[$2 + 20 >> 2];
 emscripten__internal__noncopyable__noncopyable_28_29($0);
 HEAP32[$2 + 12 >> 2] = 458;
 HEAP32[$2 + 8 >> 2] = 459;
 $1 = emscripten__internal__TypeID_b2MassData_2c_20void___get_28_29();
 $3 = HEAP32[$2 + 16 >> 2];
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 12 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_int__28_29();
 $5 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
 _embind_register_value_object($1 | 0, $3 | 0, $4 | 0, $5 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return $0;
}

function b2PrismaticJoint__GetJointTranslation_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($1 + 36 | 0, HEAP32[$0 + 48 >> 2], $0 + 68 | 0);
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($1 + 28 | 0, HEAP32[$0 + 52 >> 2], $0 + 76 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 20 | 0, $1 + 28 | 0, $1 + 36 | 0);
 b2Body__GetWorldVector_28b2Vec2_20const__29_20const($1 + 12 | 0, HEAP32[$0 + 48 >> 2], $0 + 84 | 0);
 wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 20 | 0, $1 + 12 | 0), 
 HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
 __stack_pointer = $1 + 48 | 0;
 return Math_fround(HEAPF32[$1 + 8 >> 2]);
}

function b2Simplex__WriteCache_28b2SimplexCache__29_20const($0, $1) {
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = b2Simplex__GetMetric_28_29_20const($0);
 HEAPF32[HEAP32[$2 + 8 >> 2] >> 2] = $3;
 HEAP16[HEAP32[$2 + 8 >> 2] + 4 >> 1] = HEAP32[$0 + 108 >> 2];
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 >> 2] < HEAP32[$0 + 108 >> 2]) {
   HEAP8[HEAP32[$2 >> 2] + (HEAP32[$2 + 8 >> 2] + 6 | 0) | 0] = HEAP32[(HEAP32[$2 + 4 >> 2] + Math_imul(HEAP32[$2 >> 2], 36) | 0) + 28 >> 2];
   HEAP8[HEAP32[$2 >> 2] + (HEAP32[$2 + 8 >> 2] + 9 | 0) | 0] = HEAP32[(HEAP32[$2 + 4 >> 2] + Math_imul(HEAP32[$2 >> 2], 36) | 0) + 32 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2WheelJoint____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2WheelJoint_20const____invoke_28b2Vec2_20const__20_28b2WheelJoint____20const__29_28_29_20const_2c_20b2WheelJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2WheelJoint_20const__2c_20void___fromWireType_28b2WheelJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2MouseJoint____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2MouseJoint_20const____invoke_28b2Vec2_20const__20_28b2MouseJoint____20const__29_28_29_20const_2c_20b2MouseJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2MouseJoint_20const__2c_20void___fromWireType_28b2MouseJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2MotorJoint____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2MotorJoint_20const____invoke_28b2Vec2_20const__20_28b2MotorJoint____20const__29_28_29_20const_2c_20b2MotorJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2MotorJoint_20const__2c_20void___fromWireType_28b2MotorJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function void_20emscripten__function_void_2c_20unsigned_20int_2c_20float__28char_20const__2c_20void_20_28__29_28unsigned_20int_2c_20float_29_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 404;
 $0 = HEAP32[$2 + 24 >> 2];
 $1 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int_2c_20float___getCount_28_29_20const($2 + 19 | 0);
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int_2c_20float___getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_function($0 | 0, $1 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2], 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__value_object_b2Filter___value_object_28char_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 20 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = $1;
 $0 = HEAP32[$2 + 20 >> 2];
 emscripten__internal__noncopyable__noncopyable_28_29($0);
 HEAP32[$2 + 12 >> 2] = 464;
 HEAP32[$2 + 8 >> 2] = 465;
 $1 = emscripten__internal__TypeID_b2Filter_2c_20void___get_28_29();
 $3 = HEAP32[$2 + 16 >> 2];
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 12 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_int__28_29();
 $5 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
 _embind_register_value_object($1 | 0, $3 | 0, $4 | 0, $5 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return $0;
}

function emscripten__internal__MethodInvoker_void_20_28b2RevoluteJoint____29_28bool_29_2c_20void_2c_20b2RevoluteJoint__2c_20bool___invoke_28void_20_28b2RevoluteJoint____20const__29_28bool_29_2c_20b2RevoluteJoint__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2 & 1;
 $2 = emscripten__internal__BindingType_b2RevoluteJoint__2c_20void___fromWireType_28b2RevoluteJoint__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29(HEAP8[$3 + 7 | 0] & 1) & 1);
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassConstructor_b2JointDef__20_28__29_28_29___invoke_b2JointDef__28b2JointDef__20_28__29_28_29_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = 603;
 $0 = emscripten__internal__TypeID_b2JointDef_2c_20void___get_28_29();
 $2 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2JointDef____getCount_28_29_20const($1 + 7 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2JointDef____getTypes_28_29_20const($1 + 7 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 _embind_register_class_constructor($0 | 0, $2 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() | 0, HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__value_object_b2Color___value_object_28char_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 20 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = $1;
 $0 = HEAP32[$2 + 20 >> 2];
 emscripten__internal__noncopyable__noncopyable_28_29($0);
 HEAP32[$2 + 12 >> 2] = 442;
 HEAP32[$2 + 8 >> 2] = 443;
 $1 = emscripten__internal__TypeID_b2Color_2c_20void___get_28_29();
 $3 = HEAP32[$2 + 16 >> 2];
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 12 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_int__28_29();
 $5 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
 _embind_register_value_object($1 | 0, $3 | 0, $4 | 0, $5 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return $0;
}

function emscripten__internal__MethodInvoker_void_20_28b2WheelJoint____29_28float_29_2c_20void_2c_20b2WheelJoint__2c_20float___invoke_28void_20_28b2WheelJoint____20const__29_28float_29_2c_20b2WheelJoint__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = emscripten__internal__BindingType_b2WheelJoint__2c_20void___fromWireType_28b2WheelJoint__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2MouseJoint____29_28float_29_2c_20void_2c_20b2MouseJoint__2c_20float___invoke_28void_20_28b2MouseJoint____20const__29_28float_29_2c_20b2MouseJoint__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = emscripten__internal__BindingType_b2MouseJoint__2c_20void___fromWireType_28b2MouseJoint__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2MotorJoint____29_28float_29_2c_20void_2c_20b2MotorJoint__2c_20float___invoke_28void_20_28b2MotorJoint____20const__29_28float_29_2c_20b2MotorJoint__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = emscripten__internal__BindingType_b2MotorJoint__2c_20void___fromWireType_28b2MotorJoint__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Draw____29_28unsigned_20int_29_2c_20void_2c_20b2Draw__2c_20unsigned_20int___invoke_28void_20_28b2Draw____20const__29_28unsigned_20int_29_2c_20b2Draw__2c_20unsigned_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2Draw__2c_20void___fromWireType_28b2Draw__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__wrapper_b2Draw___call_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const___28char_20const__2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 void_20emscripten__val__call_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const___28char_20const__2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const__29_20const(HEAP32[$6 + 28 >> 2] + 12 | 0, HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP32[$6 + 8 >> 2]);
 __stack_pointer = $6 + 32 | 0;
}

function std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______destruct_at_end_5babi_v160004_5d_28b2Vec2__2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 while (1) {
  if (HEAP32[$2 + 4 >> 2] != HEAP32[$0 + 8 >> 2]) {
   $3 = std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______alloc_5babi_v160004_5d_28_29($0);
   $1 = HEAP32[$0 + 8 >> 2] - 8 | 0;
   HEAP32[$0 + 8 >> 2] = $1;
   void_20std____2__allocator_traits_std____2__allocator_b2Vec2____destroy_5babi_v160004_5d_b2Vec2_2c_20void__28std____2__allocator_b2Vec2___2c_20b2Vec2__29($3, b2Vec2__20std____2____to_address_5babi_v160004_5d_b2Vec2__28b2Vec2__29($1));
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__value_object_b2Vec2___value_object_28char_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 20 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = $1;
 $0 = HEAP32[$2 + 20 >> 2];
 emscripten__internal__noncopyable__noncopyable_28_29($0);
 HEAP32[$2 + 12 >> 2] = 420;
 HEAP32[$2 + 8 >> 2] = 421;
 $1 = emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29();
 $3 = HEAP32[$2 + 16 >> 2];
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 12 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_int__28_29();
 $5 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
 _embind_register_value_object($1 | 0, $3 | 0, $4 | 0, $5 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return $0;
}

function void_20emscripten__function_float_2c_20unsigned_20int_2c_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_2c_20int_29_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 400;
 $0 = HEAP32[$2 + 24 >> 2];
 $1 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20unsigned_20int_2c_20int___getCount_28_29_20const($2 + 19 | 0);
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20unsigned_20int_2c_20int___getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_function($0 | 0, $1 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2], 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2WeldJoint____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2WeldJoint_20const____invoke_28b2Vec2_20const__20_28b2WeldJoint____20const__29_28_29_20const_2c_20b2WeldJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2WeldJoint_20const__2c_20void___fromWireType_28b2WeldJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2RopeJoint____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2RopeJoint_20const____invoke_28b2Vec2_20const__20_28b2RopeJoint____20const__29_28_29_20const_2c_20b2RopeJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2RopeJoint_20const__2c_20void___fromWireType_28b2RopeJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function void_20emscripten__function_void_2c_20unsigned_20int_2c_20bool__28char_20const__2c_20void_20_28__29_28unsigned_20int_2c_20bool_29_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 402;
 $0 = HEAP32[$2 + 24 >> 2];
 $1 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int_2c_20bool___getCount_28_29_20const($2 + 19 | 0);
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int_2c_20bool___getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_function($0 | 0, $1 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2], 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__value_object_b2Rot___value_object_28char_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 20 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = $1;
 $0 = HEAP32[$2 + 20 >> 2];
 emscripten__internal__noncopyable__noncopyable_28_29($0);
 HEAP32[$2 + 12 >> 2] = 432;
 HEAP32[$2 + 8 >> 2] = 433;
 $1 = emscripten__internal__TypeID_b2Rot_2c_20void___get_28_29();
 $3 = HEAP32[$2 + 16 >> 2];
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 12 >> 2];
 $4 = char_20const__20emscripten__internal__getGenericSignature_int__28_29();
 $5 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
 _embind_register_value_object($1 | 0, $3 | 0, $4 | 0, $5 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return $0;
}

function emscripten__class__b2QueryCallback_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2QueryCallback_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2QueryCallbackWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2QueryCallbackWrapper__29____invoke_28b2QueryCallbackWrapper__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 emscripten__class__b2QueryCallback_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2QueryCallback_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2QueryCallbackWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2QueryCallbackWrapper__29__operator_28_29_28b2QueryCallbackWrapper__29_20const($1 + 11 | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__internal__MethodInvoker_b2Filter_20const__20_28b2Fixture____29_28_29_20const_2c_20b2Filter_20const__2c_20b2Fixture_20const____invoke_28b2Filter_20const__20_28b2Fixture____20const__29_28_29_20const_2c_20b2Fixture_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Fixture_20const__2c_20void___fromWireType_28b2Fixture_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__GenericBindingType_b2Filter___toWireType_28b2Filter_20const__29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function decltype_28std____2____unwrap_iter_impl_std____2__reverse_iterator_b2Vec2___2c_20false_____unwrap_28std__declval_std____2__reverse_iterator_b2Vec2____28_29_29_29_20std____2____unwrap_iter_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_b2Vec2___2c_20false__2c_200__28std____2__reverse_iterator_b2Vec2___29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 8 >> 2];
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2____unwrap_iter_impl_std____2__reverse_iterator_b2Vec2___2c_20false_____unwrap_5babi_v160004_5d_28std____2__reverse_iterator_b2Vec2___29(HEAP32[$1 + 4 >> 2]), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function void_20emscripten__internal__RegisterClassConstructor_b2BodyDef__20_28__29_28_29___invoke_b2BodyDef__28b2BodyDef__20_28__29_28_29_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = 579;
 $0 = emscripten__internal__TypeID_b2BodyDef_2c_20void___get_28_29();
 $2 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2BodyDef____getCount_28_29_20const($1 + 7 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2BodyDef____getTypes_28_29_20const($1 + 7 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 _embind_register_class_constructor($0 | 0, $2 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() | 0, HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2WeldJoint____29_28float_29_2c_20void_2c_20b2WeldJoint__2c_20float___invoke_28void_20_28b2WeldJoint____20const__29_28float_29_2c_20b2WeldJoint__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = emscripten__internal__BindingType_b2WeldJoint__2c_20void___fromWireType_28b2WeldJoint__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2RopeJoint____29_28float_29_2c_20void_2c_20b2RopeJoint__2c_20float___invoke_28void_20_28b2RopeJoint____20const__29_28float_29_2c_20b2RopeJoint__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = emscripten__internal__BindingType_b2RopeJoint__2c_20void___fromWireType_28b2RopeJoint__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__val_20emscripten__internal__wrapped_extend_b2RayCastCallbackWrapper__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 emscripten__val__take_ownership_28emscripten___EM_VAL__29($0, _embind_create_inheriting_constructor(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____c_str_5babi_v160004_5d_28_29_20const(HEAP32[$3 + 8 >> 2]) | 0, emscripten__internal__TypeID_b2RayCastCallbackWrapper_2c_20void___get_28_29() | 0, emscripten__val__as_handle_28_29_20const(HEAP32[$3 + 4 >> 2]) | 0) | 0);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__val_20emscripten__internal__wrapped_extend_b2ContactListenerWrapper__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 emscripten__val__take_ownership_28emscripten___EM_VAL__29($0, _embind_create_inheriting_constructor(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____c_str_5babi_v160004_5d_28_29_20const(HEAP32[$3 + 8 >> 2]) | 0, emscripten__internal__TypeID_b2ContactListenerWrapper_2c_20void___get_28_29() | 0, emscripten__val__as_handle_28_29_20const(HEAP32[$3 + 4 >> 2]) | 0) | 0);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_b2Transform_20const__20_28b2Body____29_28_29_20const_2c_20b2Transform_20const__2c_20b2Body_20const____invoke_28b2Transform_20const__20_28b2Body____20const__29_28_29_20const_2c_20b2Body_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Body_20const__2c_20void___fromWireType_28b2Body_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__GenericBindingType_b2Transform___toWireType_28b2Transform_20const__29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__MethodCaller_void_2c_20unsigned_20int____call_28emscripten___EM_VAL__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = emscripten__internal__Signature_void_2c_20unsigned_20int____get_method_caller_28_29(), 
 HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 emscripten__internal__WireTypePack_unsigned_20int____WireTypePack_28unsigned_20int__29($3 + 8 | 0, HEAP32[$3 + 20 >> 2]);
 _emval_call_void_method(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], emscripten__internal__WireTypePack_unsigned_20int____operator_20void_20const__28_29_20const($3 + 8 | 0) | 0);
 __stack_pointer = $3 + 32 | 0;
}

function b2BlockAllocator__b2BlockAllocator_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = 128;
 HEAP32[$0 + 4 >> 2] = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Alloc_28int_29(HEAP32[$0 + 8 >> 2] << 3), 
 HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 __memset(HEAP32[$0 >> 2], 0, HEAP32[$0 + 8 >> 2] << 3);
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 64 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__vector_int_2c_20std____2__allocator_int______base_destruct_at_end_5babi_v160004_5d_28int__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 while (1) {
  if (HEAP32[$2 + 8 >> 2] != HEAP32[$2 + 4 >> 2]) {
   $3 = std____2__vector_int_2c_20std____2__allocator_int______alloc_5babi_v160004_5d_28_29($0);
   $1 = HEAP32[$2 + 4 >> 2] - 4 | 0;
   HEAP32[$2 + 4 >> 2] = $1;
   void_20std____2__allocator_traits_std____2__allocator_int____destroy_5babi_v160004_5d_int_2c_20void__28std____2__allocator_int___2c_20int__29($3, int__20std____2____to_address_5babi_v160004_5d_int__28int__29($1));
   continue;
  }
  break;
 }
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__val_20emscripten__internal__wrapped_extend_b2QueryCallbackWrapper__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 emscripten__val__take_ownership_28emscripten___EM_VAL__29($0, _embind_create_inheriting_constructor(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____c_str_5babi_v160004_5d_28_29_20const(HEAP32[$3 + 8 >> 2]) | 0, emscripten__internal__TypeID_b2QueryCallbackWrapper_2c_20void___get_28_29() | 0, emscripten__val__as_handle_28_29_20const(HEAP32[$3 + 4 >> 2]) | 0) | 0);
 __stack_pointer = $3 + 16 | 0;
}

function b2ChainAndPolygonContact__Create_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 wasm2js_i32$0 = $5, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$5 + 12 >> 2], 148), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 $0 = HEAP32[$5 + 8 >> 2];
 b2ChainAndPolygonContact__b2ChainAndPolygonContact_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_29($0, HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2]);
 __stack_pointer = $5 + 32 | 0;
 return $0 | 0;
}

function void_20emscripten__function_unsigned_20int_2c_20unsigned_20int__28char_20const__2c_20unsigned_20int_20_28__29_28unsigned_20int_29_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 407;
 $0 = HEAP32[$2 + 24 >> 2];
 $1 = emscripten__internal__WithPolicies____ArgTypeList_unsigned_20int_2c_20unsigned_20int___getCount_28_29_20const($2 + 19 | 0);
 $3 = emscripten__internal__WithPolicies____ArgTypeList_unsigned_20int_2c_20unsigned_20int___getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_function($0 | 0, $1 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2], 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____allocate_5babi_v160004_5d_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAPU32[$2 + 8 >> 2] > unsigned_20long_20std____2__allocator_traits_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______max_size_5babi_v160004_5d_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void____2c_20void__28std____2__allocator_std____2____tree_node_b2Fixture__2c_20void____20const__29(HEAP32[$2 + 12 >> 2]) >>> 0) {
  std____throw_bad_array_new_length_5babi_v160004_5d_28_29();
  wasm2js_trap();
 }
 $0 = std____2____libcpp_allocate_5babi_v160004_5d_28unsigned_20long_2c_20unsigned_20long_29(Math_imul(HEAP32[$2 + 8 >> 2], 20), 4);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function b2ChainAndCircleContact__Create_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 wasm2js_i32$0 = $5, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$5 + 12 >> 2], 148), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 $0 = HEAP32[$5 + 8 >> 2];
 b2ChainAndCircleContact__b2ChainAndCircleContact_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_29($0, HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2]);
 __stack_pointer = $5 + 32 | 0;
 return $0 | 0;
}

function emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____get_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (HEAPU32[$3 + 4 >> 2] < std____2__vector_int_2c_20std____2__allocator_int____size_5babi_v160004_5d_28_29_20const(HEAP32[$3 + 8 >> 2]) >>> 0) {
   emscripten__val__val_int_20const___28int_20const__29($0, std____2__vector_int_2c_20std____2__allocator_int____operator_5b_5d_5babi_v160004_5d_28unsigned_20long_29_20const(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]));
   break label$1;
  }
  emscripten__val__undefined_28_29($0);
 }
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_bool_20_28b2PrismaticJoint____29_28_29_20const_2c_20bool_2c_20b2PrismaticJoint_20const____invoke_28bool_20_28b2PrismaticJoint____20const__29_28_29_20const_2c_20b2PrismaticJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2PrismaticJoint_20const__2c_20void___fromWireType_28b2PrismaticJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($1) & 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function emscripten__internal__MethodInvoker_void_20_28b2World____29_28b2Vec2_20const__29_2c_20void_2c_20b2World__2c_20b2Vec2_20const____invoke_28void_20_28b2World____20const__29_28b2Vec2_20const__29_2c_20b2World__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2World__2c_20void___fromWireType_28b2World__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2WheelJoint____29_28bool_29_2c_20void_2c_20b2WheelJoint__2c_20bool___invoke_28void_20_28b2WheelJoint____20const__29_28bool_29_2c_20b2WheelJoint__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2 & 1;
 $2 = emscripten__internal__BindingType_b2WheelJoint__2c_20void___fromWireType_28b2WheelJoint__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29(HEAP8[$3 + 7 | 0] & 1) & 1);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Fixture____29_28float_29_2c_20void_2c_20b2Fixture__2c_20float___invoke_28void_20_28b2Fixture____20const__29_28float_29_2c_20b2Fixture__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = emscripten__internal__BindingType_b2Fixture__2c_20void___fromWireType_28b2Fixture__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_b2Shape__Type_20_28b2Fixture____29_28_29_20const_2c_20b2Shape__Type_2c_20b2Fixture_20const____invoke_28b2Shape__Type_20_28b2Fixture____20const__29_28_29_20const_2c_20b2Fixture_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Fixture_20const__2c_20void___fromWireType_28b2Fixture_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__EnumBindingType_b2Shape__Type___toWireType_28b2Shape__Type_29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2Cross_28b2Vec3_20const__2c_20b2Vec3_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Vec3__b2Vec3_28float_2c_20float_2c_20float_29($0, Math_fround(Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 8 >> 2]) - Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 8 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2])), Math_fround(Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 8 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]) - Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 8 >> 2])), Math_fround(Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2]) - Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] >> 2])));
 __stack_pointer = $3 + 16 | 0;
}

function std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2_______compressed_pair_5babi_v160004_5d_std__nullptr_t_2c_20std____2__allocator_b2Vec2____28std__nullptr_t___2c_20std____2__allocator_b2Vec2___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_b2Vec2__2c_200_2c_20false_____compressed_pair_elem_5babi_v160004_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_std____2__allocator_b2Vec2___2c_201_2c_20false_____compressed_pair_elem_5babi_v160004_5d_std____2__allocator_b2Vec2___2c_20void__28std____2__allocator_b2Vec2___29($0 + 4 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function emscripten__internal__MethodInvoker_bool_20_28b2RevoluteJoint____29_28_29_20const_2c_20bool_2c_20b2RevoluteJoint_20const____invoke_28bool_20_28b2RevoluteJoint____20const__29_28_29_20const_2c_20b2RevoluteJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2RevoluteJoint_20const__2c_20void___fromWireType_28b2RevoluteJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($1) & 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function emscripten__internal__MethodInvoker_void_20_28b2Body____29_28b2Vec2_20const__29_2c_20void_2c_20b2Body__2c_20b2Vec2_20const____invoke_28void_20_28b2Body____20const__29_28b2Vec2_20const__29_2c_20b2Body__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__RegisterClassConstructor_b2AABB__20_28__29_28_29___invoke_b2AABB__28b2AABB__20_28__29_28_29_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 >> 2] = 499;
 $0 = emscripten__internal__TypeID_b2AABB_2c_20void___get_28_29();
 $2 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2AABB____getCount_28_29_20const($1 + 7 | 0);
 $3 = emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2AABB____getTypes_28_29_20const($1 + 7 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 _embind_register_class_constructor($0 | 0, $2 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() | 0, HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Body____29_28b2Fixture__29_2c_20void_2c_20b2Body__2c_20b2Fixture____invoke_28void_20_28b2Body____20const__29_28b2Fixture__29_2c_20b2Body__2c_20b2Fixture__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2Fixture__2c_20void___fromWireType_28b2Fixture__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function decltype_28std____2____unwrap_iter_impl_std____2__reverse_iterator_int___2c_20false_____unwrap_28std__declval_std____2__reverse_iterator_int____28_29_29_29_20std____2____unwrap_iter_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_int___2c_20false__2c_200__28std____2__reverse_iterator_int___29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 8 >> 2];
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2____unwrap_iter_impl_std____2__reverse_iterator_int___2c_20false_____unwrap_5babi_v160004_5d_28std____2__reverse_iterator_int___29(HEAP32[$1 + 4 >> 2]), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__MethodInvoker_bool_20_28b2PolygonShape____29_28_29_20const_2c_20bool_2c_20b2PolygonShape_20const____invoke_28bool_20_28b2PolygonShape____20const__29_28_29_20const_2c_20b2PolygonShape_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2PolygonShape_20const__2c_20void___fromWireType_28b2PolygonShape_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($1) & 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function std____2__pair_std____2____unwrap_ref_decay_std____2__reverse_iterator_int_____type_2c_20std____2____unwrap_ref_decay_std____2__reverse_iterator_int_____type__20std____2__make_pair_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int____28std____2__reverse_iterator_int_____2c_20std____2__reverse_iterator_int_____29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 std____2__pair_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int_____pair_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20_28void__290__28std____2__reverse_iterator_int_____2c_20std____2__reverse_iterator_int_____29($0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__val_20emscripten__internal__wrapped_extend_b2DrawWrapper__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 emscripten__val__take_ownership_28emscripten___EM_VAL__29($0, _embind_create_inheriting_constructor(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____c_str_5babi_v160004_5d_28_29_20const(HEAP32[$3 + 8 >> 2]) | 0, emscripten__internal__TypeID_b2DrawWrapper_2c_20void___get_28_29() | 0, emscripten__val__as_handle_28_29_20const(HEAP32[$3 + 4 >> 2]) | 0) | 0);
 __stack_pointer = $3 + 16 | 0;
}

function b2CircleShape__TestPoint_28b2Transform_20const__2c_20b2Vec2_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = Math_fround(0);
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 $1 = HEAP32[$3 + 40 >> 2];
 $0 = HEAP32[$3 + 44 >> 2];
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($3 + 20 | 0, HEAP32[$3 + 40 >> 2] + 8 | 0, $0 + 12 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 28 | 0, $1, $3 + 20 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 12 | 0, HEAP32[$3 + 36 >> 2], $3 + 28 | 0);
 $1 = $3 + 12 | 0;
 $4 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($1, $1);
 __stack_pointer = $3 + 48 | 0;
 return Math_fround(HEAPF32[$0 + 8 >> 2] * HEAPF32[$0 + 8 >> 2]) >= $4 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2World____29_28b2Joint__29_2c_20void_2c_20b2World__2c_20b2Joint____invoke_28void_20_28b2World____20const__29_28b2Joint__29_2c_20b2World__2c_20b2Joint__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2World__2c_20void___fromWireType_28b2World__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2Joint__2c_20void___fromWireType_28b2Joint__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Body____29_28b2BodyType_29_2c_20void_2c_20b2Body__2c_20b2BodyType___invoke_28void_20_28b2Body____20const__29_28b2BodyType_29_2c_20b2Body__2c_20b2BodyType_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__EnumBindingType_b2BodyType___fromWireType_28b2BodyType_29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_b2Shape__Type_20_28b2Shape____29_28_29_20const_2c_20b2Shape__Type_2c_20b2Shape_20const____invoke_28b2Shape__Type_20_28b2Shape____20const__29_28_29_20const_2c_20b2Shape_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Shape_20const__2c_20void___fromWireType_28b2Shape_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__EnumBindingType_b2Shape__Type___toWireType_28b2Shape__Type_29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2ContactListenerWrapper__PostSolve_28unsigned_20int_2c_20unsigned_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 label$1: {
  if (!(b2ContactListenerWrapper__isIndexOf_28unsigned_20int_29($0, b2Contact__GetFixtureA_28_29(HEAP32[$3 + 8 >> 2])) & 1)) {
   if (!(b2ContactListenerWrapper__isIndexOf_28unsigned_20int_29($0, b2Contact__GetFixtureB_28_29(HEAP32[$3 + 8 >> 2])) & 1)) {
    break label$1;
   }
  }
  void_20emscripten__wrapper_b2ContactListener___call_void_2c_20unsigned_20int__2c_20unsigned_20int___28char_20const__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, 8507, $3 + 8 | 0, $3 + 4 | 0);
 }
 __stack_pointer = $3 + 16 | 0;
}

function b2ContactListenerWrapper__PreSolve_28unsigned_20int_2c_20unsigned_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 label$1: {
  if (!(b2ContactListenerWrapper__isIndexOf_28unsigned_20int_29($0, b2Contact__GetFixtureA_28_29(HEAP32[$3 + 8 >> 2])) & 1)) {
   if (!(b2ContactListenerWrapper__isIndexOf_28unsigned_20int_29($0, b2Contact__GetFixtureB_28_29(HEAP32[$3 + 8 >> 2])) & 1)) {
    break label$1;
   }
  }
  void_20emscripten__wrapper_b2ContactListener___call_void_2c_20unsigned_20int__2c_20unsigned_20int___28char_20const__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, 8517, $3 + 8 | 0, $3 + 4 | 0);
 }
 __stack_pointer = $3 + 16 | 0;
}

function std____2__set_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____end_5babi_v160004_5d_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____end_5babi_v160004_5d_28_29(HEAP32[$1 + 8 >> 2]), 
 HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long_____tree_const_iterator_5babi_v160004_5d_28std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__29($1 + 12 | 0, HEAP32[$1 + 4 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2Body____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2Body_20const____invoke_28b2Vec2_20const__20_28b2Body____20const__29_28_29_20const_2c_20b2Body_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Body_20const__2c_20void___fromWireType_28b2Body_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function std____2____compressed_pair_unsigned_20long_2c_20std____2__less_b2Fixture_______compressed_pair_5babi_v160004_5d_int_2c_20std____2__less_b2Fixture___20const___28int___2c_20std____2__less_b2Fixture___20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_unsigned_20long_2c_200_2c_20false_____compressed_pair_elem_5babi_v160004_5d_int_2c_20void__28int___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_std____2__less_b2Fixture___2c_201_2c_20true_____compressed_pair_elem_5babi_v160004_5d_std____2__less_b2Fixture___20const__2c_20void__28std____2__less_b2Fixture___20const__29($0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Fixture____29_28bool_29_2c_20void_2c_20b2Fixture__2c_20bool___invoke_28void_20_28b2Fixture____20const__29_28bool_29_2c_20b2Fixture__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2 & 1;
 $2 = emscripten__internal__BindingType_b2Fixture__2c_20void___fromWireType_28b2Fixture__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29(HEAP8[$3 + 7 | 0] & 1) & 1);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Body____29_28float_29_2c_20void_2c_20b2Body__2c_20float___invoke_28void_20_28b2Body____20const__29_28float_29_2c_20b2Body__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $4 = ($1 >> 1) + $4 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$4 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($4, emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2World____29_28b2Draw__29_2c_20void_2c_20b2World__2c_20b2Draw____invoke_28void_20_28b2World____20const__29_28b2Draw__29_2c_20b2World__2c_20b2Draw__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2World__2c_20void___fromWireType_28b2World__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2Draw__2c_20void___fromWireType_28b2Draw__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2World____29_28b2Body__29_2c_20void_2c_20b2World__2c_20b2Body____invoke_28void_20_28b2World____20const__29_28b2Body__29_2c_20b2World__2c_20b2Body__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2World__2c_20void___fromWireType_28b2World__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function std____2____split_buffer_int_2c_20std____2__allocator_int_______destruct_at_end_5babi_v160004_5d_28int__2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 while (1) {
  if (HEAP32[$2 + 4 >> 2] != HEAP32[$0 + 8 >> 2]) {
   $3 = std____2____split_buffer_int_2c_20std____2__allocator_int_______alloc_5babi_v160004_5d_28_29($0);
   $1 = HEAP32[$0 + 8 >> 2] - 4 | 0;
   HEAP32[$0 + 8 >> 2] = $1;
   void_20std____2__allocator_traits_std____2__allocator_int____destroy_5babi_v160004_5d_int_2c_20void__28std____2__allocator_int___2c_20int__29($3, int__20std____2____to_address_5babi_v160004_5d_int__28int__29($1));
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__MethodInvoker_bool_20_28b2WheelJoint____29_28_29_20const_2c_20bool_2c_20b2WheelJoint_20const____invoke_28bool_20_28b2WheelJoint____20const__29_28_29_20const_2c_20b2WheelJoint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2WheelJoint_20const__2c_20void___fromWireType_28b2WheelJoint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($1) & 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function emscripten__internal__MethodInvoker_b2JointType_20_28b2Joint____29_28_29_20const_2c_20b2JointType_2c_20b2Joint_20const____invoke_28b2JointType_20_28b2Joint____20const__29_28_29_20const_2c_20b2Joint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Joint_20const__2c_20void___fromWireType_28b2Joint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__EnumBindingType_b2JointType___toWireType_28b2JointType_29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______insert_unique_5babi_v160004_5d_28b2Fixture__20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 std____2__pair_std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__2c_20bool__20std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______emplace_unique_key_args_b2Fixture__2c_20b2Fixture__20const___28b2Fixture__20const__2c_20b2Fixture__20const__29($0, HEAP32[$3 + 12 >> 2], std____2____tree_key_value_types_b2Fixture______get_key_5babi_v160004_5d_28b2Fixture__20const__29(HEAP32[$3 + 8 >> 2]), HEAP32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____push_back_5babi_v160004_5d_28b2Vec2_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 label$1: {
  if (HEAP32[$0 + 4 >> 2] != HEAP32[std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______end_cap_5babi_v160004_5d_28_29($0) >> 2]) {
   void_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______construct_one_at_end_5babi_v160004_5d_b2Vec2_20const___28b2Vec2_20const__29($0, HEAP32[$2 + 8 >> 2]);
   break label$1;
  }
  void_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______push_back_slow_path_b2Vec2_20const___28b2Vec2_20const__29($0, HEAP32[$2 + 8 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function std____2____compressed_pair_int__2c_20std____2__allocator_int_______compressed_pair_5babi_v160004_5d_std__nullptr_t_2c_20std____2__allocator_int____28std__nullptr_t___2c_20std____2__allocator_int___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_int__2c_200_2c_20false_____compressed_pair_elem_5babi_v160004_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_std____2__allocator_int___2c_201_2c_20false_____compressed_pair_elem_5babi_v160004_5d_std____2__allocator_int___2c_20void__28std____2__allocator_int___29($0 + 4 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function emscripten__internal__MethodInvoker_void_20_28b2World____29_28bool_29_2c_20void_2c_20b2World__2c_20bool___invoke_28void_20_28b2World____20const__29_28bool_29_2c_20b2World__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2 & 1;
 $2 = emscripten__internal__BindingType_b2World__2c_20void___fromWireType_28b2World__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29(HEAP8[$3 + 7 | 0] & 1) & 1);
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__function_float_2c_20unsigned_20int__28char_20const__2c_20float_20_28__29_28unsigned_20int_29_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 405;
 $0 = HEAP32[$2 + 24 >> 2];
 $1 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20unsigned_20int___getCount_28_29_20const($2 + 19 | 0);
 $3 = emscripten__internal__WithPolicies____ArgTypeList_float_2c_20unsigned_20int___getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_function($0 | 0, $1 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2], 0);
 __stack_pointer = $2 + 32 | 0;
}

function std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2________split_buffer_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_____clear_5babi_v160004_5d_28_29($0);
 if (HEAP32[$0 >> 2]) {
  std____2__allocator_traits_std____2__allocator_b2Vec2____deallocate_5babi_v160004_5d_28std____2__allocator_b2Vec2___2c_20b2Vec2__2c_20unsigned_20long_29(std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______alloc_5babi_v160004_5d_28_29($0), HEAP32[$0 >> 2], std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_____capacity_5babi_v160004_5d_28_29_20const($0));
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__MethodInvoker_void_20_28b2Fixture____29_28int_29_2c_20void_2c_20b2Fixture__2c_20int___invoke_28void_20_28b2Fixture____20const__29_28int_29_2c_20b2Fixture__2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_b2Fixture__2c_20void___fromWireType_28b2Fixture__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_b2BodyType_20_28b2Body____29_28_29_20const_2c_20b2BodyType_2c_20b2Body_20const____invoke_28b2BodyType_20_28b2Body____20const__29_28_29_20const_2c_20b2Body_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Body_20const__2c_20void___fromWireType_28b2Body_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__EnumBindingType_b2BodyType___toWireType_28b2BodyType_29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function void_20emscripten__function_void_2c_20unsigned_20int__28char_20const__2c_20void_20_28__29_28unsigned_20int_29_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 406;
 $0 = HEAP32[$2 + 24 >> 2];
 $1 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int___getCount_28_29_20const($2 + 19 | 0);
 $3 = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int___getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_function($0 | 0, $1 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2], 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Body____29_28bool_29_2c_20void_2c_20b2Body__2c_20bool___invoke_28void_20_28b2Body____20const__29_28bool_29_2c_20b2Body__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2 & 1;
 $2 = emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $2 = ($1 >> 1) + $2 | 0;
 if ($1 & 1) {
  $0 = HEAP32[HEAP32[$2 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29(HEAP8[$3 + 7 | 0] & 1) & 1);
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__function_bool_2c_20unsigned_20int__28char_20const__2c_20bool_20_28__29_28unsigned_20int_29_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 403;
 $0 = HEAP32[$2 + 24 >> 2];
 $1 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20unsigned_20int___getCount_28_29_20const($2 + 19 | 0);
 $3 = emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20unsigned_20int___getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_function($0 | 0, $1 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2], 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2RayCastCallbackWrapper__ReportFixture_28unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = Math_fround($4);
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAPF32[$5 + 12 >> 2] = $4;
 $4 = float_20emscripten__wrapper_b2RayCastCallback___call_float_2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float___28char_20const__2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float__29_20const(HEAP32[$5 + 28 >> 2], 8996, $5 + 24 | 0, HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], $5 + 12 | 0);
 __stack_pointer = $5 + 32 | 0;
 return Math_fround($4);
}

function emscripten__internal__MethodInvoker_b2Vec2_20_28b2World____29_28_29_20const_2c_20b2Vec2_2c_20b2World_20const____invoke_28b2Vec2_20_28b2World____20const__29_28_29_20const_2c_20b2World_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2World_20const__2c_20void___fromWireType_28b2World_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, $1);
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2___29($2);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__MethodInvoker_b2Vec2_20_28b2Joint____29_28_29_20const_2c_20b2Vec2_2c_20b2Joint_20const____invoke_28b2Vec2_20_28b2Joint____20const__29_28_29_20const_2c_20b2Joint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Joint_20const__2c_20void___fromWireType_28b2Joint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, $1);
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2___29($2);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAPF32[$3 + 4 >> 2] = Math_fround(Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 12 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]) - Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 8 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2])) + HEAPF32[HEAP32[$3 + 12 >> 2] >> 2];
 HEAPF32[$3 >> 2] = Math_fround(Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 8 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]) + Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 12 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2])) + HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2];
 b2Vec2__b2Vec2_28float_2c_20float_29($0, HEAPF32[$3 + 4 >> 2], HEAPF32[$3 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__Signature_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const____get_method_caller_28_29() {
 var $0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 if (!(HEAP8[29988] & 1)) {
  wasm2js_i32$0 = 29984, wasm2js_i32$1 = _emval_get_method_caller(emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const____getCount_28_29_20const($0 + 15 | 0) | 0, emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const____getTypes_28_29_20const($0 + 15 | 0) | 0) | 0, 
  HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP8[29988] = 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[7496];
}

function emscripten__internal__Signature_float_2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float____get_method_caller_28_29() {
 var $0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 if (!(HEAP8[29948] & 1)) {
  wasm2js_i32$0 = 29944, wasm2js_i32$1 = _emval_get_method_caller(emscripten__internal__WithPolicies____ArgTypeList_float_2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float____getCount_28_29_20const($0 + 15 | 0) | 0, emscripten__internal__WithPolicies____ArgTypeList_float_2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float____getTypes_28_29_20const($0 + 15 | 0) | 0) | 0, 
  HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP8[29948] = 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[7486];
}

function void_20emscripten__function_int_2c_20unsigned_20int__28char_20const__2c_20int_20_28__29_28unsigned_20int_29_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 411;
 $0 = HEAP32[$2 + 24 >> 2];
 $1 = emscripten__internal__WithPolicies____ArgTypeList_int_2c_20unsigned_20int___getCount_28_29_20const($2 + 19 | 0);
 $3 = emscripten__internal__WithPolicies____ArgTypeList_int_2c_20unsigned_20int___getTypes_28_29_20const($2 + 19 | 0);
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 _embind_register_function($0 | 0, $1 | 0, $3 | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2], 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__MethodInvoker_bool_20_28b2Fixture____29_28_29_20const_2c_20bool_2c_20b2Fixture_20const____invoke_28bool_20_28b2Fixture____20const__29_28_29_20const_2c_20b2Fixture_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Fixture_20const__2c_20void___fromWireType_28b2Fixture_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($1) & 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function emscripten__internal__Invoker_b2Vec2_2c_20b2Transform_20const__2c_20b2Vec2_20const____invoke_28b2Vec2_20_28__29_28b2Transform_20const__2c_20b2Vec2_20const__29_2c_20b2Transform__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 FUNCTION_TABLE[$0 | 0]($3 + 12 | 0, emscripten__internal__GenericBindingType_b2Transform___fromWireType_28b2Transform__29(HEAP32[$3 + 24 >> 2]), emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 20 >> 2]));
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2___29($3 + 12 | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_v160004_5d_28_29_20const($0) & 1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_pointer_5babi_v160004_5d_28_29_20const($0);
   break label$1;
  }
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_pointer_5babi_v160004_5d_28_29_20const($0);
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2BroadPhase__BufferMove_28int_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAP32[$0 + 40 >> 2] == HEAP32[$0 + 36 >> 2]) {
  HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] << 1;
  wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Alloc_28int_29(HEAP32[$0 + 36 >> 2] << 2), 
  HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
  __memcpy(HEAP32[$0 + 32 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$0 + 40 >> 2] << 2);
  b2Free_28void__29(HEAP32[$2 + 4 >> 2]);
 }
 HEAP32[HEAP32[$0 + 32 >> 2] + (HEAP32[$0 + 40 >> 2] << 2) >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 1;
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__MethodInvoker_b2Vec2_20_28b2AABB____29_28_29_20const_2c_20b2Vec2_2c_20b2AABB_20const____invoke_28b2Vec2_20_28b2AABB____20const__29_28_29_20const_2c_20b2AABB_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2AABB_20const__2c_20void___fromWireType_28b2AABB_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($2, $1);
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2___29($2);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2Body__Advance_28float_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAPF32[$3 + 24 >> 2] = $1;
 $2 = HEAP32[$3 + 28 >> 2];
 b2Sweep__Advance_28float_29($2 + 28 | 0, HEAPF32[$3 + 24 >> 2]);
 $0 = HEAP32[$2 + 40 >> 2];
 $4 = HEAP32[$2 + 36 >> 2];
 HEAP32[$2 + 44 >> 2] = $4;
 HEAP32[$2 + 48 >> 2] = $0;
 HEAPF32[$2 + 56 >> 2] = HEAPF32[$2 + 52 >> 2];
 b2Rot__Set_28float_29($2 + 20 | 0, HEAPF32[$2 + 56 >> 2]);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($3 + 8 | 0, $2 + 20 | 0, $2 + 28 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 16 | 0, $2 + 44 | 0, $3 + 8 | 0);
 $4 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 16 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = $4;
 __stack_pointer = $3 + 32 | 0;
}

function emscripten__internal__FunctionInvoker_float_20_28__29_28b2Shape__29_2c_20float_2c_20b2Shape____invoke_28float_20_28___29_28b2Shape__29_2c_20b2Shape__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2];
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_b2Shape__2c_20void___fromWireType_28b2Shape__29(HEAP32[$2 + 8 >> 2]))), 
 HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function b2PolygonShape__b2PolygonShape_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[$2 + 12 >> 2] = $1;
 b2Shape__b2Shape_28_29($1);
 HEAP32[$1 >> 2] = 18176;
 b2Vec2__b2Vec2_28_29($1 + 12 | 0);
 $0 = $1 + 20 | 0;
 $3 = $0 - -64 | 0;
 while (1) {
  b2Vec2__b2Vec2_28_29($0);
  $0 = $0 + 8 | 0;
  if (($3 | 0) != ($0 | 0)) {
   continue;
  }
  break;
 }
 $0 = $1 + 84 | 0;
 $3 = $0 - -64 | 0;
 while (1) {
  b2Vec2__b2Vec2_28_29($0);
  $0 = $0 + 8 | 0;
  if (($3 | 0) != ($0 | 0)) {
   continue;
  }
  break;
 }
 HEAP32[$1 + 4 >> 2] = 2;
 HEAPF32[$1 + 8 >> 2] = .009999999776482582;
 HEAP32[$1 + 148 >> 2] = 0;
 b2Vec2__SetZero_28_29($1 + 12 | 0);
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function b2EdgeAndPolygonContact__b2EdgeAndPolygonContact_28b2Fixture__2c_20b2Fixture__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 b2Contact__b2Contact_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_29($0, HEAP32[$3 + 4 >> 2], 0, HEAP32[$3 >> 2], 0);
 HEAP32[$0 >> 2] = 18704;
 if ((b2Fixture__GetType_28_29_20const(HEAP32[$0 + 48 >> 2]) | 0) != 1) {
  __assert_fail(9560, 4728, 45, 3121);
  wasm2js_trap();
 }
 if ((b2Fixture__GetType_28_29_20const(HEAP32[$0 + 52 >> 2]) | 0) != 2) {
  __assert_fail(6634, 4728, 46, 3121);
  wasm2js_trap();
 }
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 + 12 >> 2];
}

function b2MulT_28b2Transform_20const__2c_20b2Transform_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 b2Transform__b2Transform_28_29($0);
 b2MulT_28b2Rot_20const__2c_20b2Rot_20const__29($3 + 16 | 0, HEAP32[$3 + 28 >> 2] + 8 | 0, HEAP32[$3 + 24 >> 2] + 8 | 0);
 $1 = HEAP32[$3 + 20 >> 2];
 $2 = HEAP32[$3 + 16 >> 2];
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $1;
 $1 = HEAP32[$3 + 28 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 28 >> 2]);
 b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($3 + 8 | 0, $1 + 8 | 0, $3);
 $2 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 __stack_pointer = $3 + 32 | 0;
}

function emscripten__internal__MethodInvoker_bool_20_28b2World____29_28_29_20const_2c_20bool_2c_20b2World_20const____invoke_28bool_20_28b2World____20const__29_28_29_20const_2c_20b2World_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2World_20const__2c_20void___fromWireType_28b2World_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($1) & 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function emscripten__internal__MethodInvoker_bool_20_28b2Joint____29_28_29_20const_2c_20bool_2c_20b2Joint_20const____invoke_28bool_20_28b2Joint____20const__29_28_29_20const_2c_20b2Joint_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Joint_20const__2c_20void___fromWireType_28b2Joint_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($1) & 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function b2PolygonAndCircleContact__b2PolygonAndCircleContact_28b2Fixture__2c_20b2Fixture__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 b2Contact__b2Contact_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_29($0, HEAP32[$3 + 4 >> 2], 0, HEAP32[$3 >> 2], 0);
 HEAP32[$0 >> 2] = 19140;
 if ((b2Fixture__GetType_28_29_20const(HEAP32[$0 + 48 >> 2]) | 0) != 2) {
  __assert_fail(6678, 4875, 45, 3175);
  wasm2js_trap();
 }
 if (b2Fixture__GetType_28_29_20const(HEAP32[$0 + 52 >> 2])) {
  __assert_fail(9339, 4875, 46, 3175);
  wasm2js_trap();
 }
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 + 12 >> 2];
}

function b2PolygonAndCircleContact__Create_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 wasm2js_i32$0 = $5, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$5 + 12 >> 2], 148), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 $0 = HEAP32[$5 + 8 >> 2];
 b2PolygonAndCircleContact__b2PolygonAndCircleContact_28b2Fixture__2c_20b2Fixture__29($0, HEAP32[$5 + 28 >> 2], HEAP32[$5 + 20 >> 2]);
 __stack_pointer = $5 + 32 | 0;
 return $0 | 0;
}

function emscripten__internal__MethodInvoker_bool_20_28b2Body____29_28_29_20const_2c_20bool_2c_20b2Body_20const____invoke_28bool_20_28b2Body____20const__29_28_29_20const_2c_20b2Body_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Body_20const__2c_20void___fromWireType_28b2Body_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($1) & 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function emscripten__internal__MethodInvoker_bool_20_28b2AABB____29_28_29_20const_2c_20bool_2c_20b2AABB_20const____invoke_28bool_20_28b2AABB____20const__29_28_29_20const_2c_20b2AABB_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2AABB_20const__2c_20void___fromWireType_28b2AABB_20const__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0]($1) & 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function emscripten__internal__MethodInvoker_b2Fixture__20_28b2Fixture____29_28_29_2c_20b2Fixture__2c_20b2Fixture____invoke_28b2Fixture__20_28b2Fixture____20const__29_28_29_2c_20b2Fixture__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Fixture__2c_20void___fromWireType_28b2Fixture__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_b2Fixture__2c_20void___toWireType_28b2Fixture__29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2PrismaticJoint__SetLimits_28float_2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 if (!(HEAPF32[$3 + 8 >> 2] <= HEAPF32[$3 + 4 >> 2])) {
  __assert_fail(3974, 4519, 574, 3417);
  wasm2js_trap();
 }
 if (!(HEAPF32[$3 + 8 >> 2] == HEAPF32[$0 + 120 >> 2] & HEAPF32[$3 + 4 >> 2] == HEAPF32[$0 + 124 >> 2])) {
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 48 >> 2], 1);
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 52 >> 2], 1);
  HEAPF32[$0 + 120 >> 2] = HEAPF32[$3 + 8 >> 2];
  HEAPF32[$0 + 124 >> 2] = HEAPF32[$3 + 4 >> 2];
  HEAPF32[$0 + 112 >> 2] = 0;
 }
 __stack_pointer = $3 + 16 | 0;
}

function b2EdgeAndCircleContact__b2EdgeAndCircleContact_28b2Fixture__2c_20b2Fixture__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 b2Contact__b2Contact_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_29($0, HEAP32[$3 + 4 >> 2], 0, HEAP32[$3 >> 2], 0);
 HEAP32[$0 >> 2] = 18644;
 if ((b2Fixture__GetType_28_29_20const(HEAP32[$0 + 48 >> 2]) | 0) != 1) {
  __assert_fail(9560, 5029, 45, 3225);
  wasm2js_trap();
 }
 if (b2Fixture__GetType_28_29_20const(HEAP32[$0 + 52 >> 2])) {
  __assert_fail(9339, 5029, 46, 3225);
  wasm2js_trap();
 }
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 + 12 >> 2];
}

function emscripten__internal__FunctionInvoker_unsigned_20int_20_28__29_28b2Body__29_2c_20unsigned_20int_2c_20b2Body____invoke_28unsigned_20int_20_28___29_28b2Body__29_2c_20b2Body__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$2 + 8 >> 2])) | 0, 
 HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 $0 = emscripten__internal__BindingType_unsigned_20int_2c_20void___toWireType_28unsigned_20int_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2PolygonContact__b2PolygonContact_28b2Fixture__2c_20b2Fixture__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 b2Contact__b2Contact_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_29($0, HEAP32[$3 + 4 >> 2], 0, HEAP32[$3 >> 2], 0);
 HEAP32[$0 >> 2] = 19200;
 if ((b2Fixture__GetType_28_29_20const(HEAP32[$0 + 48 >> 2]) | 0) != 2) {
  __assert_fail(6678, 4804, 48, 3145);
  wasm2js_trap();
 }
 if ((b2Fixture__GetType_28_29_20const(HEAP32[$0 + 52 >> 2]) | 0) != 2) {
  __assert_fail(6634, 4804, 49, 3145);
  wasm2js_trap();
 }
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 + 12 >> 2];
}

function b2EdgeAndPolygonContact__Create_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 wasm2js_i32$0 = $5, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$5 + 12 >> 2], 148), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 $0 = HEAP32[$5 + 8 >> 2];
 b2EdgeAndPolygonContact__b2EdgeAndPolygonContact_28b2Fixture__2c_20b2Fixture__29($0, HEAP32[$5 + 28 >> 2], HEAP32[$5 + 20 >> 2]);
 __stack_pointer = $5 + 32 | 0;
 return $0 | 0;
}

function b2RevoluteJoint__SetLimits_28float_2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 if (!(HEAPF32[$3 + 8 >> 2] <= HEAPF32[$3 + 4 >> 2])) {
  __assert_fail(3974, 4382, 484, 3417);
  wasm2js_trap();
 }
 if (!(HEAPF32[$3 + 8 >> 2] == HEAPF32[$0 + 120 >> 2] & HEAPF32[$3 + 4 >> 2] == HEAPF32[$0 + 124 >> 2])) {
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 48 >> 2], 1);
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 52 >> 2], 1);
  HEAPF32[$0 + 92 >> 2] = 0;
  HEAPF32[$0 + 120 >> 2] = HEAPF32[$3 + 8 >> 2];
  HEAPF32[$0 + 124 >> 2] = HEAPF32[$3 + 4 >> 2];
 }
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__val__call_void_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const___28char_20const__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 emscripten__internal__MethodCaller_void_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____call_28emscripten___EM_VAL__2c_20char_20const__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29(HEAP32[HEAP32[$5 + 28 >> 2] >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2]);
 __stack_pointer = $5 + 32 | 0;
}

function b2EdgeAndCircleContact__Create_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 wasm2js_i32$0 = $5, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$5 + 12 >> 2], 148), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 $0 = HEAP32[$5 + 8 >> 2];
 b2EdgeAndCircleContact__b2EdgeAndCircleContact_28b2Fixture__2c_20b2Fixture__29($0, HEAP32[$5 + 28 >> 2], HEAP32[$5 + 20 >> 2]);
 __stack_pointer = $5 + 32 | 0;
 return $0 | 0;
}

function std____2____split_buffer_int_2c_20std____2__allocator_int________split_buffer_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 std____2____split_buffer_int_2c_20std____2__allocator_int_____clear_5babi_v160004_5d_28_29($0);
 if (HEAP32[$0 >> 2]) {
  std____2__allocator_traits_std____2__allocator_int____deallocate_5babi_v160004_5d_28std____2__allocator_int___2c_20int__2c_20unsigned_20long_29(std____2____split_buffer_int_2c_20std____2__allocator_int_______alloc_5babi_v160004_5d_28_29($0), HEAP32[$0 >> 2], std____2____split_buffer_int_2c_20std____2__allocator_int_____capacity_5babi_v160004_5d_28_29_20const($0));
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__FunctionInvoker_void_20_28__29_28b2FixtureDef__2c_20b2Shape_20const__29_2c_20void_2c_20b2FixtureDef__2c_20b2Shape_20const____invoke_28void_20_28___29_28b2FixtureDef__2c_20b2Shape_20const__29_2c_20b2FixtureDef__2c_20b2Shape_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[HEAP32[$3 + 12 >> 2] >> 2];
 FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_b2FixtureDef__2c_20void___fromWireType_28b2FixtureDef__29(HEAP32[$3 + 8 >> 2]), emscripten__internal__BindingType_b2Shape_20const__2c_20void___fromWireType_28b2Shape_20const__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int____push_back_5babi_v160004_5d_28int_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 label$1: {
  if (HEAP32[$0 + 4 >> 2] != HEAP32[std____2__vector_int_2c_20std____2__allocator_int______end_cap_5babi_v160004_5d_28_29($0) >> 2]) {
   void_20std____2__vector_int_2c_20std____2__allocator_int______construct_one_at_end_5babi_v160004_5d_int_20const___28int_20const__29($0, HEAP32[$2 + 8 >> 2]);
   break label$1;
  }
  void_20std____2__vector_int_2c_20std____2__allocator_int______push_back_slow_path_int_20const___28int_20const__29($0, HEAP32[$2 + 8 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function bool_20_28b2PolygonShape____emscripten__internal__getContext_bool_20_28b2PolygonShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const__28bool_20_28b2PolygonShape____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_29_29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__MethodInvoker_b2Shape__20_28b2Fixture____29_28_29_2c_20b2Shape__2c_20b2Fixture____invoke_28b2Shape__20_28b2Fixture____20const__29_28_29_2c_20b2Fixture__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Fixture__2c_20void___fromWireType_28b2Fixture__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_b2Shape__2c_20void___toWireType_28b2Shape__29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function std____2__operator___5babi_v160004_5d_28std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__2c_20std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__operator___5babi_v160004_5d_28std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__2c_20std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__29_1(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]) ^ -1;
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function bool_20_28b2CircleShape____emscripten__internal__getContext_bool_20_28b2CircleShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const__28bool_20_28b2CircleShape____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_29_29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__Invoker_float_2c_20unsigned_20int___invoke_28float_20_28__29_28unsigned_20int_29_2c_20unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$2 + 8 >> 2]))), 
 HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2______compressed_pair_5babi_v160004_5d_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_b2Vec2__2c_200_2c_20false_____compressed_pair_elem_5babi_v160004_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_std____2__allocator_b2Vec2__2c_201_2c_20true_____compressed_pair_elem_5babi_v160004_5d_28std____2____default_init_tag_29($0);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function emscripten__internal__MethodInvoker_b2Body__20_28b2Fixture____29_28_29_2c_20b2Body__2c_20b2Fixture____invoke_28b2Body__20_28b2Fixture____20const__29_28_29_2c_20b2Fixture__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Fixture__2c_20void___fromWireType_28b2Fixture__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_b2Body__2c_20void___toWireType_28b2Body__29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2AABB__Contains_28b2AABB_20const__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$2 + 7 | 0] = 1;
 $3 = HEAP8[$2 + 7 | 0] & 1 ? HEAPF32[$0 >> 2] <= HEAPF32[HEAP32[$2 + 8 >> 2] >> 2] : $3;
 HEAP8[$2 + 7 | 0] = $3;
 $4 = HEAP8[$2 + 7 | 0] & 1 ? HEAPF32[$0 + 4 >> 2] <= HEAPF32[HEAP32[$2 + 8 >> 2] + 4 >> 2] : $4;
 HEAP8[$2 + 7 | 0] = $4;
 $5 = HEAP8[$2 + 7 | 0] & 1 ? HEAPF32[HEAP32[$2 + 8 >> 2] + 8 >> 2] <= HEAPF32[$0 + 8 >> 2] : $5;
 HEAP8[$2 + 7 | 0] = $5;
 $6 = HEAP8[$2 + 7 | 0] & 1 ? HEAPF32[HEAP32[$2 + 8 >> 2] + 12 >> 2] <= HEAPF32[$0 + 12 >> 2] : $6;
 HEAP8[$2 + 7 | 0] = $6;
 return HEAP8[$2 + 7 | 0] & 1;
}

function emscripten__internal__Signature_void_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____get_method_caller_28_29() {
 var $0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 if (!(HEAP8[29996] & 1)) {
  wasm2js_i32$0 = 29992, wasm2js_i32$1 = _emval_get_method_caller(emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____getCount_28_29_20const($0 + 15 | 0) | 0, emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____getTypes_28_29_20const($0 + 15 | 0) | 0) | 0, 
  HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP8[29996] = 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[7498];
}

function bool_20_28b2EdgeShape____emscripten__internal__getContext_bool_20_28b2EdgeShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const__28bool_20_28b2EdgeShape____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_29_29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2____compressed_pair_std____2____tree_end_node_std____2____tree_node_base_void_____2c_20std____2__allocator_std____2____tree_node_b2Fixture__2c_20void________compressed_pair_5babi_v160004_5d_true_2c_20void__28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2____compressed_pair_elem_std____2____tree_end_node_std____2____tree_node_base_void_____2c_200_2c_20false_____compressed_pair_elem_5babi_v160004_5d_28std____2____value_init_tag_29($0);
 std____2____compressed_pair_elem_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void____2c_201_2c_20true_____compressed_pair_elem_5babi_v160004_5d_28std____2____value_init_tag_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__MethodInvoker_b2Fixture__20_28b2Body____29_28_29_2c_20b2Fixture__2c_20b2Body____invoke_28b2Fixture__20_28b2Body____20const__29_28_29_2c_20b2Body__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_b2Fixture__2c_20void___toWireType_28b2Fixture__29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function emscripten__class__b2Draw_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2Draw_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2DrawWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2DrawWrapper__29____invoke_28b2DrawWrapper__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 emscripten__class__b2Draw_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2Draw_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2DrawWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2DrawWrapper__29__operator_28_29_28b2DrawWrapper__29_20const($1 + 11 | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function b2DrawWrapper__DrawSolidCircle_28b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAPF32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 void_20emscripten__wrapper_b2Draw___call_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const___28char_20const__2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const__29_20const(HEAP32[$5 + 28 >> 2], 9459, HEAP32[$5 + 24 >> 2], $5 + 20 | 0, HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2]);
 __stack_pointer = $5 + 32 | 0;
}

function b2PolygonContact__Create_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 wasm2js_i32$0 = $5, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$5 + 12 >> 2], 148), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 $0 = HEAP32[$5 + 8 >> 2];
 b2PolygonContact__b2PolygonContact_28b2Fixture__2c_20b2Fixture__29($0, HEAP32[$5 + 28 >> 2], HEAP32[$5 + 20 >> 2]);
 __stack_pointer = $5 + 32 | 0;
 return $0 | 0;
}

function b2CircleContact__b2CircleContact_28b2Fixture__2c_20b2Fixture__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 b2Contact__b2Contact_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_29($0, HEAP32[$3 + 4 >> 2], 0, HEAP32[$3 >> 2], 0);
 HEAP32[$0 >> 2] = 18348;
 if (b2Fixture__GetType_28_29_20const(HEAP32[$0 + 48 >> 2])) {
  __assert_fail(9382, 5104, 47, 3248);
  wasm2js_trap();
 }
 if (b2Fixture__GetType_28_29_20const(HEAP32[$0 + 52 >> 2])) {
  __assert_fail(9339, 5104, 48, 3248);
  wasm2js_trap();
 }
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 + 12 >> 2];
}

function b2CircleContact__Create_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 wasm2js_i32$0 = $5, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$5 + 12 >> 2], 148), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 $0 = HEAP32[$5 + 8 >> 2];
 b2CircleContact__b2CircleContact_28b2Fixture__2c_20b2Fixture__29($0, HEAP32[$5 + 28 >> 2], HEAP32[$5 + 20 >> 2]);
 __stack_pointer = $5 + 32 | 0;
 return $0 | 0;
}

function void_20emscripten__wrapper_b2Draw___call_void_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const___28char_20const__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 void_20emscripten__val__call_void_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const___28char_20const__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29_20const(HEAP32[$5 + 28 >> 2] + 12 | 0, HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2]);
 __stack_pointer = $5 + 32 | 0;
}

function std____2____compressed_pair_int__2c_20std____2__allocator_int______compressed_pair_5babi_v160004_5d_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_int__2c_200_2c_20false_____compressed_pair_elem_5babi_v160004_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_std____2__allocator_int__2c_201_2c_20true_____compressed_pair_elem_5babi_v160004_5d_28std____2____default_init_tag_29($0);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function emscripten__internal__MethodInvoker_b2Body__20_28b2Joint____29_28_29_2c_20b2Body__2c_20b2Joint____invoke_28b2Body__20_28b2Joint____20const__29_28_29_2c_20b2Joint__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Joint__2c_20void___fromWireType_28b2Joint__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_b2Body__2c_20void___toWireType_28b2Body__29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__MethodInvoker_b2World__20_28b2Body____29_28_29_2c_20b2World__2c_20b2Body____invoke_28b2World__20_28b2Body____20const__29_28_29_2c_20b2Body__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 $0 = emscripten__internal__BindingType_b2World__2c_20void___toWireType_28b2World__29(FUNCTION_TABLE[$0 | 0]($1) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____vector_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2______compressed_pair_5babi_v160004_5d_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0 + 8 | 0, $1 + 8 | 0, $1 + 7 | 0);
 void_20std____2____debug_db_insert_c_5babi_v160004_5d_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__enable_if_is_reference_decltype_28_std__declval_std____2__reverse_iterator_b2Vec2_____28_29_29___value_2c_20decltype_28std__move_28_std__declval_std____2__reverse_iterator_b2Vec2_____28_29_29_29___type_20std____2___IterOps_std____2___ClassicAlgPolicy_____iter_move_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2_____28std____2__reverse_iterator_b2Vec2____29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 void_20std____2___IterOps_std____2___ClassicAlgPolicy_____validate_iter_reference_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2_____28_29();
 $0 = std____2__reverse_iterator_b2Vec2____operator__5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function bool_20_28b2Shape____emscripten__internal__getContext_bool_20_28b2Shape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const__28bool_20_28b2Shape____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_29_29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Mul_28b2Mat33_20const__2c_20b2Vec3_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $1;
 HEAP32[$3 + 56 >> 2] = $2;
 operator__28float_2c_20b2Vec3_20const__29($3 + 32 | 0, HEAPF32[HEAP32[$3 + 56 >> 2] >> 2], HEAP32[$3 + 60 >> 2]);
 operator__28float_2c_20b2Vec3_20const__29($3 + 20 | 0, HEAPF32[HEAP32[$3 + 56 >> 2] + 4 >> 2], HEAP32[$3 + 60 >> 2] + 12 | 0);
 operator__28b2Vec3_20const__2c_20b2Vec3_20const__29_1($3 + 44 | 0, $3 + 32 | 0, $3 + 20 | 0);
 operator__28float_2c_20b2Vec3_20const__29($3 + 8 | 0, HEAPF32[HEAP32[$3 + 56 >> 2] + 8 >> 2], HEAP32[$3 + 60 >> 2] + 24 | 0);
 operator__28b2Vec3_20const__2c_20b2Vec3_20const__29_1($0, $3 + 44 | 0, $3 + 8 | 0);
 __stack_pointer = $3 - -64 | 0;
}

function emscripten__internal__Invoker_unsigned_20int_2c_20unsigned_20int___invoke_28unsigned_20int_20_28__29_28unsigned_20int_29_2c_20unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$2 + 8 >> 2])) | 0, 
 HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 $0 = emscripten__internal__BindingType_unsigned_20int_2c_20void___toWireType_28unsigned_20int_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______emscripten__internal__getContext_void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28unsigned_20long_2c_20b2Vec2_20const__29__28void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______20const__29_28unsigned_20long_2c_20b2Vec2_20const__29_29_29_28unsigned_20long_2c_20b2Vec2_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2__operator___5babi_v160004_5d_28std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__2c_20std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__29_1($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__operator___5babi_v160004_5d_28std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__2c_20std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]) ^ -1;
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function b2EdgeShape__ComputeMass_28b2MassData__2c_20float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAPF32[$3 + 20 >> 2] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 HEAPF32[HEAP32[$3 + 24 >> 2] >> 2] = 0;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 4 | 0, $0 + 12 | 0, $0 + 20 | 0);
 operator__28float_2c_20b2Vec2_20const__29($3 + 12 | 0, Math_fround(.5), $3 + 4 | 0);
 $4 = HEAP32[$3 + 16 >> 2];
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $4;
 HEAPF32[HEAP32[$3 + 24 >> 2] + 12 >> 2] = 0;
 __stack_pointer = $3 + 32 | 0;
}

function void_20emscripten__val__call_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const___28char_20const__2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 emscripten__internal__MethodCaller_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const____call_28emscripten___EM_VAL__2c_20char_20const__2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const__29(HEAP32[HEAP32[$5 + 28 >> 2] >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2]);
 __stack_pointer = $5 + 32 | 0;
}

function emscripten__internal__Signature_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const____get_method_caller_28_29() {
 var $0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 if (!(HEAP8[29980] & 1)) {
  wasm2js_i32$0 = 29976, wasm2js_i32$1 = _emval_get_method_caller(emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const____getCount_28_29_20const($0 + 15 | 0) | 0, emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const____getTypes_28_29_20const($0 + 15 | 0) | 0) | 0, 
  HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP8[29980] = 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[7494];
}

function emscripten__internal__Invoker_b2RayCastCallbackWrapper__2c_20emscripten__val_____invoke_28b2RayCastCallbackWrapper__20_28__29_28emscripten__val___29_2c_20emscripten___EM_VAL__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 emscripten__internal__BindingType_emscripten__val___2c_20void___fromWireType_28emscripten___EM_VAL__29($2 + 4 | 0, HEAP32[$2 + 8 >> 2]);
 $0 = emscripten__internal__BindingType_b2RayCastCallbackWrapper__2c_20void___toWireType_28b2RayCastCallbackWrapper__29(FUNCTION_TABLE[$0 | 0]($2 + 4 | 0) | 0);
 emscripten__val___val_28_29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__Invoker_b2ContactListenerWrapper__2c_20emscripten__val_____invoke_28b2ContactListenerWrapper__20_28__29_28emscripten__val___29_2c_20emscripten___EM_VAL__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 emscripten__internal__BindingType_emscripten__val___2c_20void___fromWireType_28emscripten___EM_VAL__29($2 + 4 | 0, HEAP32[$2 + 8 >> 2]);
 $0 = emscripten__internal__BindingType_b2ContactListenerWrapper__2c_20void___toWireType_28b2ContactListenerWrapper__29(FUNCTION_TABLE[$0 | 0]($2 + 4 | 0) | 0);
 emscripten__val___val_28_29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}
function b2BroadPhase__TestOverlap_28int_2c_20int_29_20const($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 wasm2js_i32$0 = $3, wasm2js_i32$1 = b2DynamicTree__GetFatAABB_28int_29_20const($0, HEAP32[$3 + 24 >> 2]), 
 HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = b2DynamicTree__GetFatAABB_28int_29_20const($0, HEAP32[$3 + 20 >> 2]), 
 HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 $0 = b2TestOverlap_28b2AABB_20const__2c_20b2AABB_20const__29(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2]);
 __stack_pointer = $3 + 32 | 0;
 return $0 & 1;
}

function std____2__enable_if_is_reference_decltype_28_std__declval_std____2__reverse_iterator_int_____28_29_29___value_2c_20decltype_28std__move_28_std__declval_std____2__reverse_iterator_int_____28_29_29_29___type_20std____2___IterOps_std____2___ClassicAlgPolicy_____iter_move_5babi_v160004_5d_std____2__reverse_iterator_int_____28std____2__reverse_iterator_int____29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 void_20std____2___IterOps_std____2___ClassicAlgPolicy_____validate_iter_reference_5babi_v160004_5d_std____2__reverse_iterator_int_____28_29();
 $0 = std____2__reverse_iterator_int____operator__5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20emscripten__val__call_void_2c_20unsigned_20int__2c_20int__2c_20b2Color_20const___28char_20const__2c_20unsigned_20int__2c_20int__2c_20b2Color_20const__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 emscripten__internal__MethodCaller_void_2c_20unsigned_20int__2c_20int__2c_20b2Color_20const____call_28emscripten___EM_VAL__2c_20char_20const__2c_20unsigned_20int__2c_20int__2c_20b2Color_20const__29(HEAP32[HEAP32[$5 + 28 >> 2] >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2]);
 __stack_pointer = $5 + 32 | 0;
}

function b2Vec2__Normalize_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 wasm2js_i32$0 = $1, wasm2js_f32$0 = b2Vec2__Length_28_29_20const($0), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 label$1: {
  if (HEAPF32[$1 + 4 >> 2] < Math_fround(1.1920928955078125e-7)) {
   HEAPF32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAPF32[$1 >> 2] = Math_fround(1) / HEAPF32[$1 + 4 >> 2];
  HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] * HEAPF32[$1 >> 2];
  HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] * HEAPF32[$1 >> 2];
  HEAPF32[$1 + 12 >> 2] = HEAPF32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAPF32[$1 + 12 >> 2];
}

function emscripten__internal__Signature_void_2c_20unsigned_20int__2c_20int__2c_20b2Color_20const____get_method_caller_28_29() {
 var $0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 if (!(HEAP8[29972] & 1)) {
  wasm2js_i32$0 = 29968, wasm2js_i32$1 = _emval_get_method_caller(emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int__2c_20int__2c_20b2Color_20const____getCount_28_29_20const($0 + 15 | 0) | 0, emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int__2c_20int__2c_20b2Color_20const____getTypes_28_29_20const($0 + 15 | 0) | 0) | 0, 
  HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP8[29972] = 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[7492];
}

function emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____set_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
 wasm2js_i32$0 = std____2__vector_int_2c_20std____2__allocator_int____operator_5b_5d_5babi_v160004_5d_28unsigned_20long_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]), 
 wasm2js_i32$1 = $0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 __stack_pointer = $3 + 16 | 0;
 return 1;
}

function unsigned_20long_20const__20std____2__min_5babi_v160004_5d_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long___28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_5babi_v160004_5d_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($2 + 15 | 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2]) & 1) {
   $0 = HEAP32[$2 + 4 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function unsigned_20long_20const__20std____2__max_5babi_v160004_5d_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long___28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_5babi_v160004_5d_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($2 + 15 | 0, HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]) & 1) {
   $0 = HEAP32[$2 + 4 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function emscripten__internal__FunctionInvoker_void_20_28__29_28b2Body__2c_20b2MassData_20const__29_2c_20void_2c_20b2Body__2c_20b2MassData_20const____invoke_28void_20_28___29_28b2Body__2c_20b2MassData_20const__29_2c_20b2Body__2c_20b2MassData__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[HEAP32[$3 + 12 >> 2] >> 2];
 FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$3 + 8 >> 2]), emscripten__internal__GenericBindingType_b2MassData___fromWireType_28b2MassData__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int____vector_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 std____2____compressed_pair_int__2c_20std____2__allocator_int______compressed_pair_5babi_v160004_5d_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0 + 8 | 0, $1 + 8 | 0, $1 + 7 | 0);
 void_20std____2____debug_db_insert_c_5babi_v160004_5d_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int____29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__Invoker_b2QueryCallbackWrapper__2c_20emscripten__val_____invoke_28b2QueryCallbackWrapper__20_28__29_28emscripten__val___29_2c_20emscripten___EM_VAL__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 emscripten__internal__BindingType_emscripten__val___2c_20void___fromWireType_28emscripten___EM_VAL__29($2 + 4 | 0, HEAP32[$2 + 8 >> 2]);
 $0 = emscripten__internal__BindingType_b2QueryCallbackWrapper__2c_20void___toWireType_28b2QueryCallbackWrapper__29(FUNCTION_TABLE[$0 | 0]($2 + 4 | 0) | 0);
 emscripten__val___val_28_29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2DynamicTree__FreeNode_28int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (!(HEAP32[$2 + 8 >> 2] < HEAP32[$0 + 12 >> 2] & HEAP32[$2 + 8 >> 2] >= 0)) {
  __assert_fail(1424, 5858, 98, 9651);
  wasm2js_trap();
 }
 if (HEAP32[$0 + 8 >> 2] <= 0) {
  __assert_fail(2415, 5858, 99, 9651);
  wasm2js_trap();
 }
 HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0) + 20 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0) + 32 >> 2] = -1;
 HEAP32[$0 + 16 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] - 1;
 __stack_pointer = $2 + 16 | 0;
}

function b2BodyDef__b2BodyDef_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Vec2__b2Vec2_28_29($0 + 4 | 0);
 b2Vec2__b2Vec2_28_29($0 + 16 | 0);
 HEAP32[$0 + 44 >> 2] = 0;
 b2Vec2__Set_28float_2c_20float_29($0 + 4 | 0, Math_fround(0), Math_fround(0));
 HEAPF32[$0 + 12 >> 2] = 0;
 b2Vec2__Set_28float_2c_20float_29($0 + 16 | 0, Math_fround(0), Math_fround(0));
 HEAPF32[$0 + 24 >> 2] = 0;
 HEAPF32[$0 + 28 >> 2] = 0;
 HEAPF32[$0 + 32 >> 2] = 0;
 HEAP8[$0 + 36 | 0] = 1;
 HEAP8[$0 + 37 | 0] = 1;
 HEAP8[$0 + 38 | 0] = 0;
 HEAP8[$0 + 39 | 0] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP8[$0 + 40 | 0] = 1;
 HEAPF32[$0 + 48 >> 2] = 1;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function float_20_28b2RayCastCallback____emscripten__internal__getContext_float_20_28b2RayCastCallback____29_28unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_29__28float_20_28b2RayCastCallback____20const__29_28unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_29_29_29_28unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20emscripten__wrapper_b2Draw___call_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const___28char_20const__2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 void_20emscripten__val__call_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const___28char_20const__2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const__29_20const(HEAP32[$5 + 28 >> 2] + 12 | 0, HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2]);
 __stack_pointer = $5 + 32 | 0;
}

function void_20_28std____2__vector_int_2c_20std____2__allocator_int______emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28unsigned_20long_2c_20int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int______20const__29_28unsigned_20long_2c_20int_20const__29_29_29_28unsigned_20long_2c_20int_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2SizeMap__b2SizeMap_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP8[$0 | 0] = 0;
 HEAP32[$1 >> 2] = 1;
 while (1) {
  if (HEAP32[$1 >> 2] <= 640) {
   if (HEAP32[$1 + 4 >> 2] >= 14) {
    __assert_fail(2264, 5308, 60, 6140);
    wasm2js_trap();
   } else {
    if (HEAP32[$1 >> 2] > HEAP32[(HEAP32[$1 + 4 >> 2] << 2) + 18240 >> 2]) {
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
    }
    HEAP8[HEAP32[$1 >> 2] + $0 | 0] = HEAP32[$1 + 4 >> 2];
    HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
    continue;
   }
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Body__ApplyLinearImpulseToCenter_28b2Vec2_20const__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP8[$3 + 23 | 0] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 label$1: {
  if (HEAP32[$0 >> 2] != 2) {
   break label$1;
  }
  if (!(!(HEAP8[$3 + 23 | 0] & 1) | HEAPU16[$0 + 4 >> 1] & 2)) {
   b2Body__SetAwake_28bool_29($0, 1);
  }
  if (!(HEAPU16[$0 + 4 >> 1] & 2)) {
   break label$1;
  }
  operator__28float_2c_20b2Vec2_20const__29($3 + 12 | 0, HEAPF32[$0 + 120 >> 2], HEAP32[$3 + 24 >> 2]);
  b2Vec2__operator___28b2Vec2_20const__29($0 - -64 | 0, $3 + 12 | 0);
 }
 __stack_pointer = $3 + 32 | 0;
}

function void_20emscripten__internal__MemberAccess_b2FixtureDef_2c_20b2Filter___setWire_b2FixtureDef__28b2Filter_20b2FixtureDef____20const__2c_20b2FixtureDef__2c_20b2Filter__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = emscripten__internal__GenericBindingType_b2Filter___fromWireType_28b2Filter__29(HEAP32[$3 + 4 >> 2]);
 $1 = HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0;
 $2 = HEAPU16[$0 >> 1] | HEAPU16[$0 + 2 >> 1] << 16;
 HEAP16[$1 >> 1] = $2;
 HEAP16[$1 + 2 >> 1] = $2 >>> 16;
 HEAP16[$1 + 4 >> 1] = HEAPU16[$0 + 4 >> 1];
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__VectorAccess_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____set_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 4 >> 2];
 $1 = std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____operator_5b_5d_5babi_v160004_5d_28unsigned_20long_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$1 + 4 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
 return 1;
}

function void_20std____2__allocator_traits_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______construct_5babi_v160004_5d_b2Fixture__2c_20b2Fixture__20const__2c_20void__28std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_20b2Fixture___2c_20b2Fixture__20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 void_20std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____construct_5babi_v160004_5d_b2Fixture__2c_20b2Fixture__20const___28b2Fixture___2c_20b2Fixture__20const__29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__wrapper_b2Draw___call_void_2c_20unsigned_20int__2c_20int__2c_20b2Color_20const___28char_20const__2c_20unsigned_20int__2c_20int__2c_20b2Color_20const__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 void_20emscripten__val__call_void_2c_20unsigned_20int__2c_20int__2c_20b2Color_20const___28char_20const__2c_20unsigned_20int__2c_20int__2c_20b2Color_20const__29_20const(HEAP32[$5 + 28 >> 2] + 12 | 0, HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2]);
 __stack_pointer = $5 + 32 | 0;
}

function b2PrismaticJointDef__b2PrismaticJointDef_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2JointDef__b2JointDef_28_29($0);
 b2Vec2__b2Vec2_28_29($0 + 20 | 0);
 b2Vec2__b2Vec2_28_29($0 + 28 | 0);
 b2Vec2__b2Vec2_28_29($0 + 36 | 0);
 HEAP32[$0 >> 2] = 2;
 b2Vec2__SetZero_28_29($0 + 20 | 0);
 b2Vec2__SetZero_28_29($0 + 28 | 0);
 b2Vec2__Set_28float_2c_20float_29($0 + 36 | 0, Math_fround(1), Math_fround(0));
 HEAPF32[$0 + 44 >> 2] = 0;
 HEAP8[$0 + 48 | 0] = 0;
 HEAPF32[$0 + 52 >> 2] = 0;
 HEAPF32[$0 + 56 >> 2] = 0;
 HEAP8[$0 + 60 | 0] = 0;
 HEAPF32[$0 + 64 >> 2] = 0;
 HEAPF32[$0 + 68 >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2ContactListenerWrapper__BeginContact_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 label$1: {
  if (!(b2ContactListenerWrapper__isIndexOf_28unsigned_20int_29($0, b2Contact__GetFixtureA_28_29(HEAP32[$2 + 8 >> 2])) & 1)) {
   if (!(b2ContactListenerWrapper__isIndexOf_28unsigned_20int_29($0, b2Contact__GetFixtureB_28_29(HEAP32[$2 + 8 >> 2])) & 1)) {
    break label$1;
   }
  }
  void_20emscripten__wrapper_b2ContactListener___call_void_2c_20unsigned_20int___28char_20const__2c_20unsigned_20int__29_20const($0, 3162, $2 + 8 | 0);
 }
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__FunctionInvoker_void_20_28__29_28b2JointDef__2c_20b2Body__29_2c_20void_2c_20b2JointDef__2c_20b2Body____invoke_28void_20_28___29_28b2JointDef__2c_20b2Body__29_2c_20b2JointDef__2c_20b2Body__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[HEAP32[$3 + 12 >> 2] >> 2];
 FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_b2JointDef__2c_20void___fromWireType_28b2JointDef__29(HEAP32[$3 + 8 >> 2]), emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function b2ContactListenerWrapper__EndContact_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 label$1: {
  if (!(b2ContactListenerWrapper__isIndexOf_28unsigned_20int_29($0, b2Contact__GetFixtureA_28_29(HEAP32[$2 + 8 >> 2])) & 1)) {
   if (!(b2ContactListenerWrapper__isIndexOf_28unsigned_20int_29($0, b2Contact__GetFixtureB_28_29(HEAP32[$2 + 8 >> 2])) & 1)) {
    break label$1;
   }
  }
  void_20emscripten__wrapper_b2ContactListener___call_void_2c_20unsigned_20int___28char_20const__2c_20unsigned_20int__29_20const($0, 3264, $2 + 8 | 0);
 }
 __stack_pointer = $2 + 16 | 0;
}

function b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 b2Min_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 12 | 0, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
 $1 = HEAP32[$3 + 16 >> 2];
 $2 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $1;
 b2Max_28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 4 | 0, HEAP32[$3 + 24 >> 2] + 8 | 0, HEAP32[$3 + 20 >> 2] + 8 | 0);
 $2 = HEAP32[$3 + 8 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $2;
 __stack_pointer = $3 + 32 | 0;
}

function emscripten__internal__Invoker_int_2c_20unsigned_20int___invoke_28int_20_28__29_28unsigned_20int_29_2c_20unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$2 + 8 >> 2])) | 0, 
 HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 $0 = emscripten__internal__BindingType_int_2c_20void___toWireType_28int_20const__29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function std____2__pair_char_20const__2c_20char___20std____2____copy_trivial_impl_5babi_v160004_5d_char_20const_2c_20char__28char_20const__2c_20char_20const__2c_20char__29($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $2;
 $2 = $2 - $1 | 0;
 wasm2js_i32$0 = $4, wasm2js_i32$1 = $2 + memmove($3, $1, $2) | 0, HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 std____2__pair_std____2____unwrap_ref_decay_char_20const_____type_2c_20std____2____unwrap_ref_decay_char____type__20std____2__make_pair_5babi_v160004_5d_char_20const___2c_20char___28char_20const___2c_20char____29($0, $4 + 12 | 0, $4 + 8 | 0);
 __stack_pointer = $4 + 16 | 0;
}

function b2Body__GetMassData_28b2MassData__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAPF32[HEAP32[$2 + 8 >> 2] >> 2] = HEAPF32[$0 + 116 >> 2];
 $3 = HEAPF32[$0 + 124 >> 2];
 $4 = Math_fround(HEAPF32[$0 + 116 >> 2] * b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($0 + 28 | 0, $0 + 28 | 0));
 HEAPF32[HEAP32[$2 + 8 >> 2] + 12 >> 2] = $4 + $3;
 $5 = HEAP32[$0 + 32 >> 2];
 $0 = HEAP32[$0 + 28 >> 2];
 $1 = $0;
 $0 = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $5;
 __stack_pointer = $2 + 16 | 0;
}

function b2PolygonAndCircleContact__Evaluate_28b2Manifold__2c_20b2Transform_20const__2c_20b2Transform_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 b2CollidePolygonAndCircle_28b2Manifold__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__2c_20b2CircleShape_20const__2c_20b2Transform_20const__29(HEAP32[$4 + 8 >> 2], b2Fixture__GetShape_28_29(HEAP32[$0 + 48 >> 2]), HEAP32[$4 + 4 >> 2], b2Fixture__GetShape_28_29(HEAP32[$0 + 52 >> 2]), HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function b2CollideEdgeAndPolygon_28b2Manifold__2c_20b2EdgeShape_20const__2c_20b2Transform_20const__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 272 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 268 >> 2] = $0;
 HEAP32[$5 + 264 >> 2] = $1;
 HEAP32[$5 + 260 >> 2] = $2;
 HEAP32[$5 + 256 >> 2] = $3;
 HEAP32[$5 + 252 >> 2] = $4;
 b2EPCollider__b2EPCollider_28_29($5);
 b2EPCollider__Collide_28b2Manifold__2c_20b2EdgeShape_20const__2c_20b2Transform_20const__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__29($5, HEAP32[$5 + 268 >> 2], HEAP32[$5 + 264 >> 2], HEAP32[$5 + 260 >> 2], HEAP32[$5 + 256 >> 2], HEAP32[$5 + 252 >> 2]);
 __stack_pointer = $5 + 272 | 0;
}

function fmt_u($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 label$1: {
  if (!$1) {
   $5 = $0;
   $4 = $1;
   $6 = $4;
   break label$1;
  }
  while (1) {
   $4 = $1;
   $3 = __wasm_i64_udiv($0, $4, 10, 0);
   $4 = i64toi32_i32$HIGH_BITS;
   $6 = $4;
   $5 = $3;
   $3 = __wasm_i64_mul($5, $4, 10, 0);
   $4 = i64toi32_i32$HIGH_BITS;
   $2 = $2 - 1 | 0;
   HEAP8[$2 | 0] = $0 - $3 | 48;
   $3 = $1 >>> 0 > 9;
   $0 = $5;
   $4 = $6;
   $1 = $4;
   if ($3) {
    continue;
   }
   break;
  }
 }
 $3 = $5;
 if ($3) {
  while (1) {
   $2 = $2 - 1 | 0;
   $0 = ($3 >>> 0) / 10 | 0;
   HEAP8[$2 | 0] = $3 - Math_imul($0, 10) | 48;
   $1 = $3 >>> 0 > 9;
   $3 = $0;
   if ($1) {
    continue;
   }
   break;
  }
 }
 return $2;
}

function emscripten__internal__Signature_void_2c_20unsigned_20int__2c_20unsigned_20int____get_method_caller_28_29() {
 var $0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 if (!(HEAP8[29964] & 1)) {
  wasm2js_i32$0 = 29960, wasm2js_i32$1 = _emval_get_method_caller(emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int__2c_20unsigned_20int____getCount_28_29_20const($0 + 15 | 0) | 0, emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int__2c_20unsigned_20int____getTypes_28_29_20const($0 + 15 | 0) | 0) | 0, 
  HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP8[29964] = 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[7490];
}

function b2EdgeAndPolygonContact__Evaluate_28b2Manifold__2c_20b2Transform_20const__2c_20b2Transform_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 b2CollideEdgeAndPolygon_28b2Manifold__2c_20b2EdgeShape_20const__2c_20b2Transform_20const__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__29(HEAP32[$4 + 8 >> 2], b2Fixture__GetShape_28_29(HEAP32[$0 + 48 >> 2]), HEAP32[$4 + 4 >> 2], b2Fixture__GetShape_28_29(HEAP32[$0 + 52 >> 2]), HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function b2World__SetAllowSleeping_28bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 label$1: {
  if ((HEAP8[$2 + 11 | 0] & 1) == (HEAP8[$0 + 102972 | 0] & 1)) {
   break label$1;
  }
  HEAP8[$0 + 102972 | 0] = HEAP8[$2 + 11 | 0] & 1;
  if (HEAP8[$0 + 102972 | 0] & 1) {
   break label$1;
  }
  HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 102948 >> 2];
  while (1) {
   if (HEAP32[$2 + 4 >> 2]) {
    b2Body__SetAwake_28bool_29(HEAP32[$2 + 4 >> 2], 1);
    HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 4 >> 2] + 96 >> 2];
    continue;
   }
   break;
  }
 }
 __stack_pointer = $2 + 16 | 0;
}

function unsigned_20long_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______emscripten__internal__getContext_unsigned_20long_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28_29_20const__28unsigned_20long_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__MethodInvoker_void_20_28b2PrismaticJoint____29_28_29_2c_20void_2c_20b2PrismaticJoint____invoke_28void_20_28b2PrismaticJoint____20const__29_28_29_2c_20b2PrismaticJoint__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2PrismaticJoint__2c_20void___fromWireType_28b2PrismaticJoint__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($1);
 __stack_pointer = $2 + 16 | 0;
}

function b2EdgeAndCircleContact__Evaluate_28b2Manifold__2c_20b2Transform_20const__2c_20b2Transform_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 b2CollideEdgeAndCircle_28b2Manifold__2c_20b2EdgeShape_20const__2c_20b2Transform_20const__2c_20b2CircleShape_20const__2c_20b2Transform_20const__29(HEAP32[$4 + 8 >> 2], b2Fixture__GetShape_28_29(HEAP32[$0 + 48 >> 2]), HEAP32[$4 + 4 >> 2], b2Fixture__GetShape_28_29(HEAP32[$0 + 52 >> 2]), HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const__29_20const__28void_20_28b2World____20const__29_28b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const__29_20const_29_29_28b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const__29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2Draw____emscripten__internal__getContext_void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const__29__28void_20_28b2Draw____20const__29_28b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const__29_29_29_28b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__Invoker_b2DrawWrapper__2c_20emscripten__val_____invoke_28b2DrawWrapper__20_28__29_28emscripten__val___29_2c_20emscripten___EM_VAL__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 emscripten__internal__BindingType_emscripten__val___2c_20void___fromWireType_28emscripten___EM_VAL__29($2 + 4 | 0, HEAP32[$2 + 8 >> 2]);
 $0 = emscripten__internal__BindingType_b2DrawWrapper__2c_20void___toWireType_28b2DrawWrapper__29(FUNCTION_TABLE[$0 | 0]($2 + 4 | 0) | 0);
 emscripten__val___val_28_29($2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______end_node_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__pointer_traits_std____2____tree_end_node_std____2____tree_node_base_void________pointer_to_5babi_v160004_5d_28std____2____tree_end_node_std____2____tree_node_base_void______29(std____2____compressed_pair_std____2____tree_end_node_std____2____tree_node_base_void_____2c_20std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______first_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2] + 4 | 0));
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__FunctionInvoker_void_20_28__29_28b2Shape__2c_20float_29_2c_20void_2c_20b2Shape__2c_20float___invoke_28void_20_28___29_28b2Shape__2c_20float_29_2c_20b2Shape__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[HEAP32[$3 + 12 >> 2] >> 2];
 FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_b2Shape__2c_20void___fromWireType_28b2Shape__29(HEAP32[$3 + 8 >> 2]), emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2PrismaticJointDef_2c_20b2Vec2___setWire_b2PrismaticJointDef__28b2Vec2_20b2PrismaticJointDef____20const__2c_20b2PrismaticJointDef__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2RevoluteJoint____29_28_29_2c_20void_2c_20b2RevoluteJoint____invoke_28void_20_28b2RevoluteJoint____20const__29_28_29_2c_20b2RevoluteJoint__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2RevoluteJoint__2c_20void___fromWireType_28b2RevoluteJoint__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($1);
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2DistanceJoint____29_28_29_2c_20void_2c_20b2DistanceJoint____invoke_28void_20_28b2DistanceJoint____20const__29_28_29_2c_20b2DistanceJoint__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2DistanceJoint__2c_20void___fromWireType_28b2DistanceJoint__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($1);
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__MethodCaller_void___call_28emscripten___EM_VAL__2c_20char_20const__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = emscripten__internal__Signature_void___get_method_caller_28_29(), 
 HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
 emscripten__internal__WireTypePack____WireTypePack_28_29($2 + 8 | 0);
 _emval_call_void_method(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2], emscripten__internal__WireTypePack____operator_20void_20const__28_29_20const($2 + 8 | 0) | 0);
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__Invoker_void_2c_20unsigned_20int_2c_20unsigned_20int___invoke_28void_20_28__29_28unsigned_20int_2c_20unsigned_20int_29_2c_20unsigned_20int_2c_20unsigned_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$3 + 8 >> 2]), emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function b2PolygonContact__Evaluate_28b2Manifold__2c_20b2Transform_20const__2c_20b2Transform_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 b2CollidePolygons_28b2Manifold__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__2c_20b2PolygonShape_20const__2c_20b2Transform_20const__29(HEAP32[$4 + 8 >> 2], b2Fixture__GetShape_28_29(HEAP32[$0 + 48 >> 2]), HEAP32[$4 + 4 >> 2], b2Fixture__GetShape_28_29(HEAP32[$0 + 52 >> 2]), HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_v160004_5d_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_5babi_v160004_5d_28_29($0);
 HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] & -2147483648 | $1 & 2147483647;
 $0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_5babi_v160004_5d_28_29($0);
 HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | -2147483648;
}

function std____2____compressed_pair_elem_std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_201_2c_20false_____compressed_pair_elem_5babi_v160004_5d_std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_20void__28std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$1 >> 2];
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $3;
 return $0;
}

function void_20emscripten__internal__MemberAccess_b2RevoluteJointDef_2c_20b2Vec2___setWire_b2RevoluteJointDef__28b2Vec2_20b2RevoluteJointDef____20const__2c_20b2RevoluteJointDef__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2DistanceJointDef_2c_20b2Vec2___setWire_b2DistanceJointDef__28b2Vec2_20b2DistanceJointDef____20const__2c_20b2DistanceJointDef__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__FunctionInvoker_void_20_28__29_28b2AABB__2c_20b2AABB__29_2c_20void_2c_20b2AABB__2c_20b2AABB____invoke_28void_20_28___29_28b2AABB__2c_20b2AABB__29_2c_20b2AABB__2c_20b2AABB__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[HEAP32[$3 + 12 >> 2] >> 2];
 FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_b2AABB__2c_20void___fromWireType_28b2AABB__29(HEAP32[$3 + 8 >> 2]), emscripten__internal__BindingType_b2AABB__2c_20void___fromWireType_28b2AABB__29(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void___fromWireType_28emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____basic_string_5babi_v160004_5d_28char_20const__2c_20unsigned_20long_29($0, HEAP32[$2 + 8 >> 2] + 4 | 0, HEAP32[HEAP32[$2 + 8 >> 2] >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function b2BroadPhase__MoveProxy_28int_2c_20b2AABB_20const__2c_20b2Vec2_20const__29($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 $0 = HEAP32[$4 + 28 >> 2];
 wasm2js_i32$0 = $4, wasm2js_i32$1 = b2DynamicTree__MoveProxy_28int_2c_20b2AABB_20const__2c_20b2Vec2_20const__29($0, HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]) & 1, 
 HEAP8[wasm2js_i32$0 + 15 | 0] = wasm2js_i32$1;
 if (HEAP8[$4 + 15 | 0] & 1) {
  b2BroadPhase__BufferMove_28int_29($0, HEAP32[$4 + 24 >> 2]);
 }
 __stack_pointer = $4 + 32 | 0;
}

function void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______emscripten__internal__getContext_void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28b2Vec2_20const__29__28void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______20const__29_28b2Vec2_20const__29_29_29_28b2Vec2_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2CircleContact__Evaluate_28b2Manifold__2c_20b2Transform_20const__2c_20b2Transform_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 b2CollideCircles_28b2Manifold__2c_20b2CircleShape_20const__2c_20b2Transform_20const__2c_20b2CircleShape_20const__2c_20b2Transform_20const__29(HEAP32[$4 + 8 >> 2], b2Fixture__GetShape_28_29(HEAP32[$0 + 48 >> 2]), HEAP32[$4 + 4 >> 2], b2Fixture__GetShape_28_29(HEAP32[$0 + 52 >> 2]), HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function b2EPCollider__b2EPCollider_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2TempPolygon__b2TempPolygon_28_29($0);
 b2Transform__b2Transform_28_29($0 + 132 | 0);
 b2Vec2__b2Vec2_28_29($0 + 148 | 0);
 b2Vec2__b2Vec2_28_29($0 + 156 | 0);
 b2Vec2__b2Vec2_28_29($0 + 164 | 0);
 b2Vec2__b2Vec2_28_29($0 + 172 | 0);
 b2Vec2__b2Vec2_28_29($0 + 180 | 0);
 b2Vec2__b2Vec2_28_29($0 + 188 | 0);
 b2Vec2__b2Vec2_28_29($0 + 196 | 0);
 b2Vec2__b2Vec2_28_29($0 + 204 | 0);
 b2Vec2__b2Vec2_28_29($0 + 212 | 0);
 b2Vec2__b2Vec2_28_29($0 + 228 | 0);
 b2Vec2__b2Vec2_28_29($0 + 236 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function bool_20_28__emscripten__internal__getContext_bool_20_28__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const__29__28bool_20_28__20const__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const__29_29_29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2PrismaticJoint__GetReactionForce_28float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAPF32[$3 + 24 >> 2] = $2;
 $2 = HEAPF32[$3 + 24 >> 2];
 $1 = HEAP32[$3 + 28 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($3 + 8 | 0, HEAPF32[$1 + 104 >> 2], $1 + 192 | 0);
 operator__28float_2c_20b2Vec2_20const__29($3, Math_fround(HEAPF32[$1 + 116 >> 2] + HEAPF32[$1 + 112 >> 2]), $1 + 184 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 16 | 0, $3 + 8 | 0, $3);
 operator__28float_2c_20b2Vec2_20const__29($0, $2, $3 + 16 | 0);
 __stack_pointer = $3 + 32 | 0;
}

function std____2__allocator_b2Vec2___allocate_5babi_v160004_5d_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAPU32[$2 + 8 >> 2] > unsigned_20long_20std____2__allocator_traits_std____2__allocator_b2Vec2____max_size_5babi_v160004_5d_std____2__allocator_b2Vec2__2c_20void__28std____2__allocator_b2Vec2__20const__29(HEAP32[$2 + 12 >> 2]) >>> 0) {
  std____throw_bad_array_new_length_5babi_v160004_5d_28_29();
  wasm2js_trap();
 }
 $0 = std____2____libcpp_allocate_5babi_v160004_5d_28unsigned_20long_2c_20unsigned_20long_29(HEAP32[$2 + 8 >> 2] << 3, 4);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long___operator___5babi_v160004_5d_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2____tree_end_node_std____2____tree_node_base_void______20std____2____tree_next_iter_5babi_v160004_5d_std____2____tree_end_node_std____2____tree_node_base_void______2c_20std____2____tree_node_base_void_____28std____2____tree_node_base_void____29(HEAP32[$0 >> 2]), 
 HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__FunctionInvoker_b2Shape_20const__20_28__29_28b2FixtureDef__29_2c_20b2Shape_20const__2c_20b2FixtureDef____invoke_28b2Shape_20const__20_28___29_28b2FixtureDef__29_2c_20b2FixtureDef__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2];
 $0 = emscripten__internal__BindingType_b2Shape_20const__2c_20void___toWireType_28b2Shape_20const__29(FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_b2FixtureDef__2c_20void___fromWireType_28b2FixtureDef__29(HEAP32[$2 + 8 >> 2])) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function bool_20_28b2Fixture____emscripten__internal__getContext_bool_20_28b2Fixture____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int_29_20const__28bool_20_28b2Fixture____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int_29_20const_29_29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2RevoluteJointDef__b2RevoluteJointDef_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2JointDef__b2JointDef_28_29($0);
 b2Vec2__b2Vec2_28_29($0 + 20 | 0);
 b2Vec2__b2Vec2_28_29($0 + 28 | 0);
 HEAP32[$0 >> 2] = 1;
 b2Vec2__Set_28float_2c_20float_29($0 + 20 | 0, Math_fround(0), Math_fround(0));
 b2Vec2__Set_28float_2c_20float_29($0 + 28 | 0, Math_fround(0), Math_fround(0));
 HEAPF32[$0 + 36 >> 2] = 0;
 HEAPF32[$0 + 44 >> 2] = 0;
 HEAPF32[$0 + 48 >> 2] = 0;
 HEAPF32[$0 + 60 >> 2] = 0;
 HEAPF32[$0 + 56 >> 2] = 0;
 HEAP8[$0 + 40 | 0] = 0;
 HEAP8[$0 + 52 | 0] = 0;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int______emscripten__internal__getContext_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28_29_20const__28unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int______20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__val__val_b2Vec2_20const___28b2Vec2_20const__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 emscripten__internal__WireTypePack_b2Vec2_20const____WireTypePack_28b2Vec2_20const__29($2, HEAP32[$2 + 8 >> 2]);
 wasm2js_i32$0 = $0, wasm2js_i32$1 = _emval_take_value(emscripten__internal__TypeID_b2Vec2_20const__2c_20void___get_28_29() | 0, emscripten__internal__WireTypePack_b2Vec2_20const____operator_20void_20const__28_29_20const($2) | 0) | 0, 
 HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2__allocator_traits_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______deallocate_5babi_v160004_5d_28std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____deallocate_5babi_v160004_5d_28std____2____tree_node_b2Fixture__2c_20void____2c_20unsigned_20long_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______end_node_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__pointer_traits_std____2____tree_end_node_std____2____tree_node_base_void________pointer_to_5babi_v160004_5d_28std____2____tree_end_node_std____2____tree_node_base_void______29(std____2____compressed_pair_std____2____tree_end_node_std____2____tree_node_base_void_____2c_20std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______first_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2] + 4 | 0));
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long_29_29_29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20emscripten__internal__MemberAccess_b2WheelJointDef_2c_20b2Vec2___setWire_b2WheelJointDef__28b2Vec2_20b2WheelJointDef____20const__2c_20b2WheelJointDef__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2RayCastOutput_2c_20b2Vec2___setWire_b2RayCastOutput__28b2Vec2_20b2RayCastOutput____20const__2c_20b2RayCastOutput__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2MouseJointDef_2c_20b2Vec2___setWire_b2MouseJointDef__28b2Vec2_20b2MouseJointDef____20const__2c_20b2MouseJointDef__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2MotorJointDef_2c_20b2Vec2___setWire_b2MotorJointDef__28b2Vec2_20b2MotorJointDef____20const__2c_20b2MotorJointDef__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function b2AABB__IsValid_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 4 | 0, $2 + 8 | 0, $2);
 $3 = HEAPF32[$1 + 4 >> 2] >= Math_fround(0) ? HEAPF32[$1 + 8 >> 2] >= Math_fround(0) : $3;
 HEAP8[$1 + 3 | 0] = $3;
 $0 = 0;
 label$2: {
  if (!(HEAP8[$1 + 3 | 0] & 1)) {
   break label$2;
  }
  $0 = 0;
  if (!(b2Vec2__IsValid_28_29_20const($2) & 1)) {
   break label$2;
  }
  $0 = b2Vec2__IsValid_28_29_20const($2 + 8 | 0);
 }
 HEAP8[$1 + 3 | 0] = $0 & 1;
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 3 | 0] & 1;
}

function emscripten__internal__MethodInvoker_void_20_28b2WheelJoint____29_28_29_2c_20void_2c_20b2WheelJoint____invoke_28void_20_28b2WheelJoint____20const__29_28_29_2c_20b2WheelJoint__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2WheelJoint__2c_20void___fromWireType_28b2WheelJoint__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($1);
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2MouseJoint____29_28_29_2c_20void_2c_20b2MouseJoint____invoke_28void_20_28b2MouseJoint____20const__29_28_29_2c_20b2MouseJoint__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2MouseJoint__2c_20void___fromWireType_28b2MouseJoint__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($1);
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2MotorJoint____29_28_29_2c_20void_2c_20b2MotorJoint____invoke_28void_20_28b2MotorJoint____20const__29_28_29_2c_20b2MotorJoint__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2MotorJoint__2c_20void___fromWireType_28b2MotorJoint__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($1);
 __stack_pointer = $2 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2WeldJointDef_2c_20b2Vec2___setWire_b2WeldJointDef__28b2Vec2_20b2WeldJointDef____20const__2c_20b2WeldJointDef__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2RopeJointDef_2c_20b2Vec2___setWire_b2RopeJointDef__28b2Vec2_20b2RopeJointDef____20const__2c_20b2RopeJointDef__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2RayCastInput_2c_20b2Vec2___setWire_b2RayCastInput__28b2Vec2_20b2RayCastInput____20const__2c_20b2RayCastInput__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function b2BroadPhase__b2BroadPhase_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2DynamicTree__b2DynamicTree_28_29($0);
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 16;
 HEAP32[$0 + 52 >> 2] = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Alloc_28int_29(HEAP32[$0 + 48 >> 2] << 3), 
 HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 36 >> 2] = 16;
 HEAP32[$0 + 40 >> 2] = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = b2Alloc_28int_29(HEAP32[$0 + 36 >> 2] << 2), 
 HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__allocator_int___allocate_5babi_v160004_5d_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAPU32[$2 + 8 >> 2] > unsigned_20long_20std____2__allocator_traits_std____2__allocator_int____max_size_5babi_v160004_5d_std____2__allocator_int__2c_20void__28std____2__allocator_int__20const__29(HEAP32[$2 + 12 >> 2]) >>> 0) {
  std____throw_bad_array_new_length_5babi_v160004_5d_28_29();
  wasm2js_trap();
 }
 $0 = std____2____libcpp_allocate_5babi_v160004_5d_28unsigned_20long_2c_20unsigned_20long_29(HEAP32[$2 + 8 >> 2] << 2, 4);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20emscripten__internal__AllowedRawPointer_b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20emscripten__internal__MemberAccess_b2CircleShape_2c_20b2Vec2___setWire_b2CircleShape__28b2Vec2_20b2CircleShape____20const__2c_20b2CircleShape__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2WeldJoint____29_28_29_2c_20void_2c_20b2WeldJoint____invoke_28void_20_28b2WeldJoint____20const__29_28_29_2c_20b2WeldJoint__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2WeldJoint__2c_20void___fromWireType_28b2WeldJoint__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($1);
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2RopeJoint____29_28_29_2c_20void_2c_20b2RopeJoint____invoke_28void_20_28b2RopeJoint____20const__29_28_29_2c_20b2RopeJoint__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2RopeJoint__2c_20void___fromWireType_28b2RopeJoint__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($1);
 __stack_pointer = $2 + 16 | 0;
}

function b2WheelJointDef__b2WheelJointDef_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2JointDef__b2JointDef_28_29($0);
 b2Vec2__b2Vec2_28_29($0 + 20 | 0);
 b2Vec2__b2Vec2_28_29($0 + 28 | 0);
 b2Vec2__b2Vec2_28_29($0 + 36 | 0);
 HEAP32[$0 >> 2] = 7;
 b2Vec2__SetZero_28_29($0 + 20 | 0);
 b2Vec2__SetZero_28_29($0 + 28 | 0);
 b2Vec2__Set_28float_2c_20float_29($0 + 36 | 0, Math_fround(1), Math_fround(0));
 HEAP8[$0 + 44 | 0] = 0;
 HEAPF32[$0 + 48 >> 2] = 0;
 HEAPF32[$0 + 52 >> 2] = 0;
 HEAPF32[$0 + 56 >> 2] = 2;
 HEAPF32[$0 + 60 >> 2] = .699999988079071;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____allocation_result_std____2__allocator_traits_std____2__allocator_b2Vec2____pointer__20std____2____allocate_at_least_5babi_v160004_5d_std____2__allocator_b2Vec2___28std____2__allocator_b2Vec2___2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__allocator_b2Vec2___allocate_5babi_v160004_5d_28unsigned_20long_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]), 
 HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 8 >> 2];
 __stack_pointer = $3 + 16 | 0;
}

function std____2__pair_std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__2c_20bool___pair_5babi_v160004_5d_std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__2c_20bool__2c_20_28void__290__28std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long____2c_20bool__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
 HEAP8[$0 + 4 | 0] = HEAP8[HEAP32[$3 + 4 >> 2]] & 1;
 return $0;
}

function void_20_28b2PolygonShape____emscripten__internal__getContext_void_20_28b2PolygonShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const__28void_20_28b2PolygonShape____20const__29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_29_29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2Draw____emscripten__internal__getContext_void_20_28b2Draw____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29__28void_20_28b2Draw____20const__29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29_29_29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__val__val_int_20const___28int_20const__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 emscripten__internal__WireTypePack_int_20const____WireTypePack_28int_20const__29($2, HEAP32[$2 + 8 >> 2]);
 wasm2js_i32$0 = $0, wasm2js_i32$1 = _emval_take_value(emscripten__internal__TypeID_int_20const__2c_20void___get_28_29() | 0, emscripten__internal__WireTypePack_int_20const____operator_20void_20const__28_29_20const($2) | 0) | 0, 
 HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function void_20emscripten__internal__MemberAccess_b2Transform_2c_20b2Vec2___setWire_b2Transform__28b2Vec2_20b2Transform____20const__2c_20b2Transform__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_v160004_5d_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_5babi_v160004_5d_28_29($0);
 HEAP8[$2 + 11 | 0] = HEAPU8[$2 + 11 | 0] & 128 | $1;
 $0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_5babi_v160004_5d_28_29($0);
 HEAP8[$0 + 11 | 0] = HEAPU8[$0 + 11 | 0] & 127;
}

function emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long_29_29_29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28std____2__vector_int_2c_20std____2__allocator_int______emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int______20const__29_28int_20const__29_29_29_28int_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2CircleShape____emscripten__internal__getContext_void_20_28b2CircleShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const__28void_20_28b2CircleShape____20const__29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_29_29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function bool_20_28b2PolygonShape____emscripten__internal__getContext_bool_20_28b2PolygonShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const__28bool_20_28b2PolygonShape____20const__29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_29_29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Fixture__TestPoint_28b2Vec2_20const__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$0 + 12 >> 2];
 $0 = (wasm2js_i32$1 = $1, wasm2js_i32$2 = b2Body__GetTransform_28_29_20const(HEAP32[$0 + 8 >> 2]), 
 wasm2js_i32$3 = HEAP32[$2 + 8 >> 2], wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2], 
 FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function bool_20_28__emscripten__internal__getContext_bool_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const__29__28bool_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const__29_29_29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20emscripten__internal__MemberAccess_b2MassData_2c_20b2Vec2___setWire_b2MassData__28b2Vec2_20b2MassData____20const__2c_20b2MassData__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function void_20_28b2PolygonShape____emscripten__internal__getContext_void_20_28b2PolygonShape____29_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29__28void_20_28b2PolygonShape____20const__29_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29_29_29_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__MethodInvoker_void_20_28b2Fixture____29_28_29_2c_20void_2c_20b2Fixture____invoke_28void_20_28b2Fixture____20const__29_28_29_2c_20b2Fixture__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Fixture__2c_20void___fromWireType_28b2Fixture__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($1);
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__Invoker_void_2c_20unsigned_20int_2c_20float___invoke_28void_20_28__29_28unsigned_20int_2c_20float_29_2c_20unsigned_20int_2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$3 + 8 >> 2]), emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function bool_20_28b2CircleShape____emscripten__internal__getContext_bool_20_28b2CircleShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const__28bool_20_28b2CircleShape____20const__29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_29_29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20emscripten__internal__MemberAccess_b2Transform_2c_20b2Rot___setWire_b2Transform__28b2Rot_20b2Transform____20const__2c_20b2Transform__2c_20b2Rot__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = emscripten__internal__GenericBindingType_b2Rot___fromWireType_28b2Rot__29(HEAP32[$3 + 4 >> 2]);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function std____2____allocation_result_std____2__allocator_traits_std____2__allocator_int____pointer__20std____2____allocate_at_least_5babi_v160004_5d_std____2__allocator_int___28std____2__allocator_int___2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__allocator_int___allocate_5babi_v160004_5d_28unsigned_20long_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]), 
 HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 8 >> 2];
 __stack_pointer = $3 + 16 | 0;
}

function __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
  return;
 }
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4, $5);
}

function void_20_28b2EdgeShape____emscripten__internal__getContext_void_20_28b2EdgeShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const__28void_20_28b2EdgeShape____20const__29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_29_29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20emscripten__internal__MemberAccess_b2BodyDef_2c_20b2Vec2___setWire_b2BodyDef__28b2Vec2_20b2BodyDef____20const__2c_20b2BodyDef__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__Signature_void_2c_20b2Transform_20const____get_method_caller_28_29() {
 var $0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 if (!(HEAP8[30004] & 1)) {
  wasm2js_i32$0 = 3e4, wasm2js_i32$1 = _emval_get_method_caller(emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2Transform_20const____getCount_28_29_20const($0 + 15 | 0) | 0, emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2Transform_20const____getTypes_28_29_20const($0 + 15 | 0) | 0) | 0, 
  HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP8[30004] = 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[7500];
}

function bool_20_28b2EdgeShape____emscripten__internal__getContext_bool_20_28b2EdgeShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const__28bool_20_28b2EdgeShape____20const__29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_29_29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2DynamicTree__DestroyProxy_28int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (!(HEAP32[$2 + 8 >> 2] < HEAP32[$0 + 12 >> 2] & HEAP32[$2 + 8 >> 2] >= 0)) {
  __assert_fail(1383, 5858, 128, 1078);
  wasm2js_trap();
 }
 if (!(b2TreeNode__IsLeaf_28_29_20const(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0) & 1)) {
  __assert_fail(12235, 5858, 129, 1078);
  wasm2js_trap();
 }
 b2DynamicTree__RemoveLeaf_28int_29($0, HEAP32[$2 + 8 >> 2]);
 b2DynamicTree__FreeNode_28int_29($0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function void_20_28__emscripten__internal__getContext_void_20_28__29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29__28void_20_28__20const__29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29_29_29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Body__ApplyAngularImpulse_28float_2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 label$1: {
  if (HEAP32[$0 >> 2] != 2) {
   break label$1;
  }
  if (!(!(HEAP8[$3 + 7 | 0] & 1) | HEAPU16[$0 + 4 >> 1] & 2)) {
   b2Body__SetAwake_28bool_29($0, 1);
  }
  if (!(HEAPU16[$0 + 4 >> 1] & 2)) {
   break label$1;
  }
  HEAPF32[$0 + 72 >> 2] = Math_fround(HEAPF32[$0 + 128 >> 2] * HEAPF32[$3 + 8 >> 2]) + HEAPF32[$0 + 72 >> 2];
 }
 __stack_pointer = $3 + 16 | 0;
}

function bool_20_28b2AABB____emscripten__internal__getContext_bool_20_28b2AABB____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__29_20const__28bool_20_28b2AABB____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__29_20const_29_29_28b2RayCastOutput__2c_20b2RayCastInput_20const__29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__MethodInvoker_void_20_28b2World____29_28_29_2c_20void_2c_20b2World____invoke_28void_20_28b2World____20const__29_28_29_2c_20b2World__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2World__2c_20void___fromWireType_28b2World__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($1);
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__MethodInvoker_void_20_28b2Joint____29_28_29_2c_20void_2c_20b2Joint____invoke_28void_20_28b2Joint____20const__29_28_29_2c_20b2Joint__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Joint__2c_20void___fromWireType_28b2Joint__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($1);
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__Invoker_void_2c_20unsigned_20int_2c_20bool___invoke_28void_20_28__29_28unsigned_20int_2c_20bool_29_2c_20unsigned_20int_2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$3 + 8 >> 2]), emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29(HEAP8[$3 + 7 | 0] & 1) & 1);
 __stack_pointer = $3 + 16 | 0;
}

function b2DrawWrapper__DrawSegment_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 void_20emscripten__wrapper_b2Draw___call_void_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const___28char_20const__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29_20const(HEAP32[$4 + 12 >> 2], 2861, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____end_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long_____tree_iterator_5babi_v160004_5d_28std____2____tree_end_node_std____2____tree_node_base_void______29($1 + 12 | 0, std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______end_node_5babi_v160004_5d_28_29(HEAP32[$1 + 8 >> 2]));
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function b2WheelJoint__GetReactionForce_28float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAPF32[$3 + 24 >> 2] = $2;
 $2 = HEAPF32[$3 + 24 >> 2];
 $1 = HEAP32[$3 + 28 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($3 + 8 | 0, HEAPF32[$1 + 108 >> 2], $1 + 180 | 0);
 operator__28float_2c_20b2Vec2_20const__29($3, HEAPF32[$1 + 116 >> 2], $1 + 172 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($3 + 16 | 0, $3 + 8 | 0, $3);
 operator__28float_2c_20b2Vec2_20const__29($0, $2, $3 + 16 | 0);
 __stack_pointer = $3 + 32 | 0;
}

function void_20_28b2Shape____emscripten__internal__getContext_void_20_28b2Shape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const__28void_20_28b2Shape____20const__29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_29_29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2PolygonShape__Clone_28b2BlockAllocator__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$2 + 8 >> 2], 152), 
 HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 $0 = HEAP32[$2 + 4 >> 2];
 b2PolygonShape__b2PolygonShape_28_29($0);
 HEAP32[$2 >> 2] = $0;
 b2PolygonShape__operator__28b2PolygonShape_20const__29(HEAP32[$2 >> 2], $1);
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 >> 2];
}

function b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Vec2__b2Vec2_28float_2c_20float_29($0, Math_fround(Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]) + Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2])), Math_fround(Math_fround(Math_fround(-HEAPF32[HEAP32[$3 + 12 >> 2] >> 2]) * HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]) + Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2])));
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2AABB_2c_20b2Vec2___setWire_b2AABB__28b2Vec2_20b2AABB____20const__2c_20b2AABB__2c_20b2Vec2__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$3 + 4 >> 2]);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__pure_virtual_2c_20emscripten__allow_raw_pointers___ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RayCastCallback__2c_20unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RayCastCallback__2c_20unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__Signature_void_2c_20unsigned_20int____get_method_caller_28_29() {
 var $0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 if (!(HEAP8[29956] & 1)) {
  wasm2js_i32$0 = 29952, wasm2js_i32$1 = _emval_get_method_caller(emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int____getCount_28_29_20const($0 + 15 | 0) | 0, emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int____getTypes_28_29_20const($0 + 15 | 0) | 0) | 0, 
  HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP8[29956] = 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[7488];
}

function emscripten__internal__Signature_bool_2c_20unsigned_20int____get_method_caller_28_29() {
 var $0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 if (!(HEAP8[29940] & 1)) {
  wasm2js_i32$0 = 29936, wasm2js_i32$1 = _emval_get_method_caller(emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20unsigned_20int____getCount_28_29_20const($0 + 15 | 0) | 0, emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20unsigned_20int____getTypes_28_29_20const($0 + 15 | 0) | 0) | 0, 
  HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP8[29940] = 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[7484];
}

function emscripten__internal__MethodInvoker_void_20_28b2Body____29_28_29_2c_20void_2c_20b2Body____invoke_28void_20_28b2Body____20const__29_28_29_2c_20b2Body__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $1 = ($3 >> 1) + $1 | 0;
 if ($3 & 1) {
  $0 = HEAP32[HEAP32[$1 >> 2] + $0 >> 2];
 }
 FUNCTION_TABLE[$0 | 0]($1);
 __stack_pointer = $2 + 16 | 0;
}

function bool_20_28b2Shape____emscripten__internal__getContext_bool_20_28b2Shape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const__28bool_20_28b2Shape____20const__29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_29_29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2MotorJoint__SetLinearOffset_28b2Vec2_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (!(HEAPF32[HEAP32[$2 + 8 >> 2] >> 2] == HEAPF32[$0 + 68 >> 2] & HEAPF32[HEAP32[$2 + 8 >> 2] + 4 >> 2] == HEAPF32[$0 + 72 >> 2])) {
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 48 >> 2], 1);
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 52 >> 2], 1);
  $1 = HEAP32[$2 + 8 >> 2];
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 68 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 72 >> 2] = $3;
 }
 __stack_pointer = $2 + 16 | 0;
}

function b2Fixture__DestroyProxies_28b2BroadPhase__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 4 >> 2] < HEAP32[$0 + 28 >> 2]) {
   HEAP32[$2 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$2 + 4 >> 2], 28);
   b2BroadPhase__DestroyProxy_28int_29(HEAP32[$2 + 8 >> 2], HEAP32[HEAP32[$2 >> 2] + 24 >> 2]);
   HEAP32[HEAP32[$2 >> 2] + 24 >> 2] = -1;
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$0 + 28 >> 2] = 0;
 __stack_pointer = $2 + 16 | 0;
}

function b2Mul22_28b2Mat33_20const__2c_20b2Vec2_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Vec2__b2Vec2_28float_2c_20float_29($0, Math_fround(Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]) + Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 12 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2])), Math_fround(Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]) + Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 16 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2])));
 __stack_pointer = $3 + 16 | 0;
}

function b2CircleShape__Clone_28b2BlockAllocator__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$2 + 8 >> 2], 20), 
 HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 $0 = HEAP32[$2 + 4 >> 2];
 b2CircleShape__b2CircleShape_28_29($0);
 HEAP32[$2 >> 2] = $0;
 b2CircleShape__operator__28b2CircleShape_20const__29(HEAP32[$2 >> 2], $1);
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 >> 2];
}

function b2Mul_28b2Mat22_20const__2c_20b2Vec2_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Vec2__b2Vec2_28float_2c_20float_29($0, Math_fround(Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]) + Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 8 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2])), Math_fround(Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]) + Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 12 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2])));
 __stack_pointer = $3 + 16 | 0;
}

function void_20_28b2Draw____emscripten__internal__getContext_void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29__28void_20_28b2Draw____20const__29_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29_29_29_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2AABB__Combine_28b2AABB_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 b2Min_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 16 | 0, $0, HEAP32[$2 + 24 >> 2]);
 $1 = HEAP32[$2 + 20 >> 2];
 $3 = HEAP32[$2 + 16 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $1;
 b2Max_28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 8 | 0, $0 + 8 | 0, HEAP32[$2 + 24 >> 2] + 8 | 0);
 $3 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $3;
 __stack_pointer = $2 + 32 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World_20const__2c_20b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World_20const__2c_20emscripten__internal__AllowedRawPointer_b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__pair_char_20const__2c_20char___20std____2____dispatch_copy_or_move_5babi_v160004_5d_std____2___ClassicAlgPolicy_2c_20std____2____copy_loop_std____2___ClassicAlgPolicy__2c_20std____2____copy_trivial_2c_20char_20const__2c_20char_20const__2c_20char___28char_20const__2c_20char_20const__2c_20char__29($0, $1, $2, $3) {
 std____2__pair_char_20const__2c_20char___20std____2____unwrap_and_dispatch_5babi_v160004_5d_std____2____overload_std____2____copy_loop_std____2___ClassicAlgPolicy__2c_20std____2____copy_trivial__2c_20char_20const__2c_20char_20const__2c_20char__2c_200__28char_20const__2c_20char_20const__2c_20char__29($0, $1, $2, $3);
}

function void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28b2QueryCallback__2c_20b2AABB_20const__29_20const__28void_20_28b2World____20const__29_28b2QueryCallback__2c_20b2AABB_20const__29_20const_29_29_28b2QueryCallback__2c_20b2AABB_20const__29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29__28void_20_28b2Body____20const__29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29_29_29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__FunctionInvoker_b2Body__20_28__29_28b2JointDef__29_2c_20b2Body__2c_20b2JointDef____invoke_28b2Body__20_28___29_28b2JointDef__29_2c_20b2JointDef__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2];
 $0 = emscripten__internal__BindingType_b2Body__2c_20void___toWireType_28b2Body__29(FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_b2JointDef__2c_20void___fromWireType_28b2JointDef__29(HEAP32[$2 + 8 >> 2])) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Vec2__b2Vec2_28float_2c_20float_29($0, Math_fround(Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]) - Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2])), Math_fround(Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]) + Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2])));
 __stack_pointer = $3 + 16 | 0;
}

function b2MulT_28b2Rot_20const__2c_20b2Rot_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Rot__b2Rot_28_29($0);
 HEAPF32[$0 >> 2] = Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]) - Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2]);
 HEAPF32[$0 + 4 >> 2] = Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2]) + Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function scalbn($0, $1) {
 label$1: {
  if (($1 | 0) >= 1024) {
   $0 = $0 * 898846567431158e293;
   if ($1 >>> 0 < 2047) {
    $1 = $1 - 1023 | 0;
    break label$1;
   }
   $0 = $0 * 898846567431158e293;
   $1 = (($1 | 0) >= 3069 ? 3069 : $1) - 2046 | 0;
   break label$1;
  }
  if (($1 | 0) > -1023) {
   break label$1;
  }
  $0 = $0 * 2004168360008973e-307;
  if ($1 >>> 0 > 4294965304) {
   $1 = $1 + 969 | 0;
   break label$1;
  }
  $0 = $0 * 2004168360008973e-307;
  $1 = (($1 | 0) <= -2960 ? -2960 : $1) + 1938 | 0;
 }
 wasm2js_scratch_store_i32(0, 0);
 wasm2js_scratch_store_i32(1, $1 + 1023 << 20);
 return $0 * +wasm2js_scratch_load_f64();
}

function b2EdgeShape__Clone_28b2BlockAllocator__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2BlockAllocator__Allocate_28int_29(HEAP32[$2 + 8 >> 2], 48), 
 HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 $0 = HEAP32[$2 + 4 >> 2];
 b2EdgeShape__b2EdgeShape_28_29($0);
 HEAP32[$2 >> 2] = $0;
 b2EdgeShape__operator__28b2EdgeShape_20const__29(HEAP32[$2 >> 2], $1);
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 >> 2];
}

function void_20emscripten__val__call_void_2c_20unsigned_20int__2c_20unsigned_20int___28char_20const__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 emscripten__internal__MethodCaller_void_2c_20unsigned_20int__2c_20unsigned_20int____call_28emscripten___EM_VAL__2c_20char_20const__2c_20unsigned_20int__2c_20unsigned_20int__29(HEAP32[HEAP32[$4 + 12 >> 2] >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function b2BroadPhase__CreateProxy_28b2AABB_20const__2c_20void__29($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 wasm2js_i32$0 = $3, wasm2js_i32$1 = b2DynamicTree__CreateProxy_28b2AABB_20const__2c_20void__29($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]), 
 HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 28 >> 2] + 1;
 b2BroadPhase__BufferMove_28int_29($0, HEAP32[$3 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 >> 2];
}

function void_20_28b2Draw____emscripten__internal__getContext_void_20_28b2Draw____29_28unsigned_20int_2c_20int_2c_20b2Color_20const__29__28void_20_28b2Draw____20const__29_28unsigned_20int_2c_20int_2c_20b2Color_20const__29_29_29_28unsigned_20int_2c_20int_2c_20b2Color_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2ContactListener____emscripten__internal__getContext_void_20_28b2ContactListener____29_28unsigned_20int_2c_20unsigned_20int_29__28void_20_28b2ContactListener____20const__29_28unsigned_20int_2c_20unsigned_20int_29_29_29_28unsigned_20int_2c_20unsigned_20int_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20emscripten__internal__AllowedRawPointer_b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_std____2____tree_node_b2Fixture__2c_20void___2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void________unique_ptr_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__unique_ptr_std____2____tree_node_b2Fixture__2c_20void___2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______reset_5babi_v160004_5d_28std____2____tree_node_b2Fixture__2c_20void____29($0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2EdgeShape__b2EdgeShape_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Shape__b2Shape_28_29($0);
 HEAP32[$0 >> 2] = 18108;
 b2Vec2__b2Vec2_28_29($0 + 12 | 0);
 b2Vec2__b2Vec2_28_29($0 + 20 | 0);
 b2Vec2__b2Vec2_28_29($0 + 28 | 0);
 b2Vec2__b2Vec2_28_29($0 + 36 | 0);
 HEAP32[$0 + 4 >> 2] = 1;
 HEAPF32[$0 + 8 >> 2] = .009999999776482582;
 HEAPF32[$0 + 28 >> 2] = 0;
 HEAPF32[$0 + 32 >> 2] = 0;
 HEAPF32[$0 + 36 >> 2] = 0;
 HEAPF32[$0 + 40 >> 2] = 0;
 HEAP8[$0 + 44 | 0] = 0;
 HEAP8[$0 + 45 | 0] = 0;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2DrawWrapper__DrawCircle_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 void_20emscripten__wrapper_b2Draw___call_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const___28char_20const__2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const__29_20const(HEAP32[$4 + 12 >> 2], 9425, HEAP32[$4 + 8 >> 2], $4 + 4 | 0, HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function b2DrawWrapper__DrawPoint_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 void_20emscripten__wrapper_b2Draw___call_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const___28char_20const__2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const__29_20const(HEAP32[$4 + 12 >> 2], 2445, HEAP32[$4 + 8 >> 2], $4 + 4 | 0, HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function b2Body__ApplyForceToCenter_28b2Vec2_20const__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 label$1: {
  if (HEAP32[$0 >> 2] != 2) {
   break label$1;
  }
  if (!(!(HEAP8[$3 + 7 | 0] & 1) | HEAPU16[$0 + 4 >> 1] & 2)) {
   b2Body__SetAwake_28bool_29($0, 1);
  }
  if (!(HEAPU16[$0 + 4 >> 1] & 2)) {
   break label$1;
  }
  b2Vec2__operator___28b2Vec2_20const__29($0 + 76 | 0, HEAP32[$3 + 8 >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__class__b2RayCastCallback_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2RayCastCallback_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2RayCastCallbackWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2RayCastCallbackWrapper__29__operator_28_29_28b2RayCastCallbackWrapper__29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 emscripten__internal__WrapperBase__setNotifyJSOnDestruction_28bool_29(HEAP32[$2 + 8 >> 2] + 4 | 0, 1);
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__class__b2ContactListener_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2ContactListener_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2ContactListenerWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2ContactListenerWrapper__29__operator_28_29_28b2ContactListenerWrapper__29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 emscripten__internal__WrapperBase__setNotifyJSOnDestruction_28bool_29(HEAP32[$2 + 8 >> 2] + 4 | 0, 1);
 __stack_pointer = $2 + 16 | 0;
}

function void_20emscripten__wrapper_b2ContactListener___call_void_2c_20unsigned_20int__2c_20unsigned_20int___28char_20const__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 void_20emscripten__val__call_void_2c_20unsigned_20int__2c_20unsigned_20int___28char_20const__2c_20unsigned_20int__2c_20unsigned_20int__29_20const(HEAP32[$4 + 12 >> 2] + 8 | 0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2AABB__2c_20b2Transform_20const__2c_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2AABB__2c_20b2Transform_20const__2c_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2BlockAllocator____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2BlockAllocator_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function strlen($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 label$1: {
  label$2: {
   $1 = $0;
   if (!($1 & 3)) {
    break label$2;
   }
   if (!HEAPU8[$0 | 0]) {
    return 0;
   }
   while (1) {
    $1 = $1 + 1 | 0;
    if (!($1 & 3)) {
     break label$2;
    }
    if (HEAPU8[$1 | 0]) {
     continue;
    }
    break;
   }
   break label$1;
  }
  while (1) {
   $2 = $1;
   $1 = $1 + 4 | 0;
   $3 = HEAP32[$2 >> 2];
   if (!(($3 ^ -1) & $3 - 16843009 & -2139062144)) {
    continue;
   }
   break;
  }
  while (1) {
   $1 = $2;
   $2 = $1 + 1 | 0;
   if (HEAPU8[$1 | 0]) {
    continue;
   }
   break;
  }
 }
 return $1 - $0 | 0;
}

function std____2__unique_ptr_std____2____tree_node_b2Fixture__2c_20void___2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______operator___5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_std____2____tree_node_b2Fixture__2c_20void____2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______first_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2BlockAllocator____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2BlockAllocator_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__class__b2QueryCallback_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2QueryCallback_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2QueryCallbackWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2QueryCallbackWrapper__29__operator_28_29_28b2QueryCallbackWrapper__29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 emscripten__internal__WrapperBase__setNotifyJSOnDestruction_28bool_29(HEAP32[$2 + 8 >> 2] + 4 | 0, 1);
 __stack_pointer = $2 + 16 | 0;
}

function b2Body__SetFixedRotation_28bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$2 + 10 | 0] = (HEAPU16[$0 + 4 >> 1] & 16) == 16;
 if ((HEAP8[$2 + 10 | 0] & 1) != (HEAP8[$2 + 11 | 0] & 1)) {
  label$2: {
   if (HEAP8[$2 + 11 | 0] & 1) {
    HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] | 16;
    break label$2;
   }
   HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] & -17;
  }
  HEAPF32[$0 + 72 >> 2] = 0;
  b2Body__ResetMassData_28_29($0);
 }
 __stack_pointer = $2 + 16 | 0;
}

function void_20_28b2PolygonShape____emscripten__internal__getContext_void_20_28b2PolygonShape____29_28b2MassData__2c_20float_29_20const__28void_20_28b2PolygonShape____20const__29_28b2MassData__2c_20float_29_20const_29_29_28b2MassData__2c_20float_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2AABB__2c_20b2Transform_20const__2c_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Body__ApplyTorque_28float_2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 label$1: {
  if (HEAP32[$0 >> 2] != 2) {
   break label$1;
  }
  if (!(!(HEAP8[$3 + 7 | 0] & 1) | HEAPU16[$0 + 4 >> 1] & 2)) {
   b2Body__SetAwake_28bool_29($0, 1);
  }
  if (!(HEAPU16[$0 + 4 >> 1] & 2)) {
   break label$1;
  }
  HEAPF32[$0 + 84 >> 2] = HEAPF32[$0 + 84 >> 2] + HEAPF32[$3 + 8 >> 2];
 }
 __stack_pointer = $3 + 16 | 0;
}

function b2Body__GetLinearVelocityFromWorldPoint_28b2Vec2_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = Math_fround(0);
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 $1 = HEAP32[$3 + 28 >> 2];
 $4 = HEAPF32[$1 + 72 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($3 + 8 | 0, HEAP32[$3 + 24 >> 2], $1 + 44 | 0);
 b2Cross_28float_2c_20b2Vec2_20const__29($3 + 16 | 0, $4, $3 + 8 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($0, $1 - -64 | 0, $3 + 16 | 0);
 __stack_pointer = $3 + 32 | 0;
}

function unsigned_20long_20const__20std____2__min_5babi_v160004_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = unsigned_20long_20const__20std____2__min_5babi_v160004_5d_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long___28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function unsigned_20long_20const__20std____2__max_5babi_v160004_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = unsigned_20long_20const__20std____2__max_5babi_v160004_5d_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long___28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2BlockAllocator____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2BlockAllocator_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Body__ShouldCollide_28b2Body_20const__29_20const($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 label$1: {
  if (!(HEAP32[$0 >> 2] | HEAP32[HEAP32[$2 + 4 >> 2] >> 2])) {
   HEAP8[$2 + 15 | 0] = 0;
   break label$1;
  }
  wasm2js_i32$0 = $2, wasm2js_i32$1 = b2Body__ShouldCollideConnected_28b2Body_20const__29_20const($0, HEAP32[$2 + 4 >> 2]) & 1, 
  HEAP8[wasm2js_i32$0 + 15 | 0] = wasm2js_i32$1;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}

function void_20emscripten__internal__MemberAccess_b2PrismaticJointDef_2c_20float___setWire_b2PrismaticJointDef__28float_20b2PrismaticJointDef____20const__2c_20b2PrismaticJointDef__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]);
 HEAPF32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2Filter_2c_20unsigned_20short___setWire_b2Filter__28unsigned_20short_20b2Filter____20const__2c_20b2Filter__2c_20unsigned_20short_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP16[$3 + 6 >> 1] = $2;
 $0 = emscripten__internal__BindingType_unsigned_20short_2c_20void___fromWireType_28unsigned_20short_29(HEAPU16[$3 + 6 >> 1]);
 HEAP16[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 1] = $0;
 __stack_pointer = $3 + 16 | 0;
}

function void_20_28b2CircleShape____emscripten__internal__getContext_void_20_28b2CircleShape____29_28b2MassData__2c_20float_29_20const__28void_20_28b2CircleShape____20const__29_28b2MassData__2c_20float_29_20const_29_29_28b2MassData__2c_20float_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Shape__20_28b2PolygonShape____emscripten__internal__getContext_b2Shape__20_28b2PolygonShape____29_28b2BlockAllocator__29_20const__28b2Shape__20_28b2PolygonShape____20const__29_28b2BlockAllocator__29_20const_29_29_28b2BlockAllocator__29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const__2c_20emscripten__internal__AllowedRawPointer_b2RayCastOutput__2c_20b2RayCastInput_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Shape_20const__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_std____2____tree_node_b2Fixture__2c_20void___2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______get_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_std____2____tree_node_b2Fixture__2c_20void____2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______first_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function b2Body__SetAwake_28bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 label$1: {
  if (HEAP8[$2 + 11 | 0] & 1) {
   HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] | 2;
   HEAPF32[$0 + 144 >> 2] = 0;
   break label$1;
  }
  HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] & -3;
  HEAPF32[$0 + 144 >> 2] = 0;
  b2Vec2__SetZero_28_29($0 - -64 | 0);
  HEAPF32[$0 + 72 >> 2] = 0;
  b2Vec2__SetZero_28_29($0 + 76 | 0);
  HEAPF32[$0 + 84 >> 2] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
}

function __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($0, $1) {
 var $2 = 0;
 label$1: {
  if (!$1) {
   break label$1;
  }
  $1 = __dynamic_cast($1, 23972, 24228, 0);
  if (!$1 | HEAP32[$1 + 8 >> 2] & (HEAP32[$0 + 8 >> 2] ^ -1)) {
   break label$1;
  }
  if (!is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[$0 + 12 >> 2], HEAP32[$1 + 12 >> 2], 0)) {
   break label$1;
  }
  $2 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[$0 + 16 >> 2], HEAP32[$1 + 16 >> 2], 0);
 }
 return $2;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Shape__20_28b2CircleShape____emscripten__internal__getContext_b2Shape__20_28b2CircleShape____29_28b2BlockAllocator__29_20const__28b2Shape__20_28b2CircleShape____20const__29_28b2BlockAllocator__29_20const_29_29_28b2BlockAllocator__29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2DrawWrapper__DrawSolidPolygon_28unsigned_20int_2c_20int_2c_20b2Color_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 void_20emscripten__wrapper_b2Draw___call_void_2c_20unsigned_20int__2c_20int__2c_20b2Color_20const___28char_20const__2c_20unsigned_20int__2c_20int__2c_20b2Color_20const__29_20const(HEAP32[$4 + 12 >> 2], 6734, $4 + 8 | 0, $4 + 4 | 0, HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2RevoluteJointDef_2c_20float___setWire_b2RevoluteJointDef__28float_20b2RevoluteJointDef____20const__2c_20b2RevoluteJointDef__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]);
 HEAPF32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2DistanceJointDef_2c_20float___setWire_b2DistanceJointDef__28float_20b2DistanceJointDef____20const__2c_20b2DistanceJointDef__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]);
 HEAPF32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function frexp($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 wasm2js_scratch_store_f64(+$0);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 $3 = wasm2js_scratch_load_i32(0) | 0;
 $4 = $2;
 $2 = $2 >>> 20 & 2047;
 if (($2 | 0) != 2047) {
  if (!$2) {
   if ($0 == 0) {
    $2 = 0;
   } else {
    $0 = frexp($0 * 0x10000000000000000, $1);
    $2 = HEAP32[$1 >> 2] + -64 | 0;
   }
   HEAP32[$1 >> 2] = $2;
   return $0;
  }
  HEAP32[$1 >> 2] = $2 - 1022;
  $2 = $3;
  wasm2js_scratch_store_i32(0, $2 | 0);
  $2 = $4 & -2146435073 | 1071644672;
  wasm2js_scratch_store_i32(1, $2 | 0);
  $0 = +wasm2js_scratch_load_f64();
 }
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20emscripten__internal__AllowedRawPointer_b2AABB__2c_20b2Transform_20const__2c_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20_28b2EdgeShape____emscripten__internal__getContext_void_20_28b2EdgeShape____29_28b2MassData__2c_20float_29_20const__28void_20_28b2EdgeShape____20const__29_28b2MassData__2c_20float_29_20const_29_29_28b2MassData__2c_20float_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__FunctionInvoker_void_20_28__29_28b2RayCastCallbackWrapper__29_2c_20void_2c_20b2RayCastCallbackWrapper____invoke_28void_20_28___29_28b2RayCastCallbackWrapper__29_2c_20b2RayCastCallbackWrapper__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2];
 FUNCTION_TABLE[$0 | 0](emscripten__internal__GenericBindingType_b2RayCastCallbackWrapper___fromWireType_28b2RayCastCallbackWrapper__29(HEAP32[$2 + 8 >> 2]));
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__FunctionInvoker_void_20_28__29_28b2ContactListenerWrapper__29_2c_20void_2c_20b2ContactListenerWrapper____invoke_28void_20_28___29_28b2ContactListenerWrapper__29_2c_20b2ContactListenerWrapper__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2];
 FUNCTION_TABLE[$0 | 0](emscripten__internal__GenericBindingType_b2ContactListenerWrapper___fromWireType_28b2ContactListenerWrapper__29(HEAP32[$2 + 8 >> 2]));
 __stack_pointer = $2 + 16 | 0;
}

function b2DrawWrapper__DrawPolygon_28unsigned_20int_2c_20int_2c_20b2Color_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 void_20emscripten__wrapper_b2Draw___call_void_2c_20unsigned_20int__2c_20int__2c_20b2Color_20const___28char_20const__2c_20unsigned_20int__2c_20int__2c_20b2Color_20const__29_20const(HEAP32[$4 + 12 >> 2], 6722, $4 + 8 | 0, $4 + 4 | 0, HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_pointer_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__pointer_traits_char_20const____pointer_to_5babi_v160004_5d_28char_20const__29(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]));
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Shape__20_28b2EdgeShape____emscripten__internal__getContext_b2Shape__20_28b2EdgeShape____29_28b2BlockAllocator__29_20const__28b2Shape__20_28b2EdgeShape____20const__29_28b2BlockAllocator__29_20const_29_29_28b2BlockAllocator__29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Body__ShouldCollideConnected_28b2Body_20const__29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] + 108 >> 2];
 label$1: {
  while (1) {
   if (HEAP32[$2 >> 2]) {
    if (!(HEAP8[HEAP32[HEAP32[$2 >> 2] + 4 >> 2] + 61 | 0] & 1) & HEAP32[HEAP32[$2 >> 2] >> 2] == HEAP32[$2 + 4 >> 2]) {
     HEAP8[$2 + 15 | 0] = 0;
     break label$1;
    }
    HEAP32[$2 >> 2] = HEAP32[HEAP32[$2 >> 2] + 12 >> 2];
    continue;
   }
   break;
  }
  HEAP8[$2 + 15 | 0] = 1;
 }
 return HEAP8[$2 + 15 | 0] & 1;
}

function b2Fixture__20_28b2Body____emscripten__internal__getContext_b2Fixture__20_28b2Body____29_28b2Shape_20const__2c_20float_29__28b2Fixture__20_28b2Body____20const__29_28b2Shape_20const__2c_20float_29_29_29_28b2Shape_20const__2c_20float_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2FixtureDef_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2FixtureDef_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20emscripten__internal__MemberAccess_b2PrismaticJointDef_2c_20bool___setWire_b2PrismaticJointDef__28bool_20b2PrismaticJointDef____20const__2c_20b2PrismaticJointDef__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29(HEAP8[$3 + 7 | 0] & 1);
 HEAP8[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0] = $0 & 1;
 __stack_pointer = $3 + 16 | 0;
}

function void_20_28b2ContactListenerWrapper____emscripten__internal__getContext_void_20_28b2ContactListenerWrapper____29_28unsigned_20int_29__28void_20_28b2ContactListenerWrapper____20const__29_28unsigned_20int_29_29_29_28unsigned_20int_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World_20const__2c_20b2QueryCallback__2c_20b2AABB_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World_20const__2c_20emscripten__internal__AllowedRawPointer_b2QueryCallback__2c_20b2AABB_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function bool_20_28b2ContactListenerWrapper____emscripten__internal__getContext_bool_20_28b2ContactListenerWrapper____29_28unsigned_20int_29__28bool_20_28b2ContactListenerWrapper____20const__29_28unsigned_20int_29_29_29_28unsigned_20int_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20emscripten__internal__MemberAccess_b2WheelJointDef_2c_20float___setWire_b2WheelJointDef__28float_20b2WheelJointDef____20const__2c_20b2WheelJointDef__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]);
 HEAPF32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2RayCastOutput_2c_20float___setWire_b2RayCastOutput__28float_20b2RayCastOutput____20const__2c_20b2RayCastOutput__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]);
 HEAPF32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2MouseJointDef_2c_20float___setWire_b2MouseJointDef__28float_20b2MouseJointDef____20const__2c_20b2MouseJointDef__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]);
 HEAPF32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2MotorJointDef_2c_20float___setWire_b2MotorJointDef__28float_20b2MotorJointDef____20const__2c_20b2MotorJointDef__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]);
 HEAPF32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____max_size_5babi_v160004_5d_28_29_20const($0) {
 $0 = unsigned_20long_20std____2__allocator_traits_std____2__allocator_char____max_size_5babi_v160004_5d_std____2__allocator_char__2c_20void_2c_20void__28std____2__allocator_char__20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______alloc_5babi_v160004_5d_28_29_20const($0));
 return ($0 >>> (std____2__numeric_limits_unsigned_20long___max_5babi_v160004_5d_28_29() >>> 1 >>> 0 < $0 >>> 0) | 0) - 16 | 0;
}

function void_20_28b2Shape____emscripten__internal__getContext_void_20_28b2Shape____29_28b2MassData__2c_20float_29_20const__28void_20_28b2Shape____20const__29_28b2MassData__2c_20float_29_20const_29_29_28b2MassData__2c_20float_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__FunctionInvoker_void_20_28__29_28b2QueryCallbackWrapper__29_2c_20void_2c_20b2QueryCallbackWrapper____invoke_28void_20_28___29_28b2QueryCallbackWrapper__29_2c_20b2QueryCallbackWrapper__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2];
 FUNCTION_TABLE[$0 | 0](emscripten__internal__GenericBindingType_b2QueryCallbackWrapper___fromWireType_28b2QueryCallbackWrapper__29(HEAP32[$2 + 8 >> 2]));
 __stack_pointer = $2 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2RevoluteJointDef_2c_20bool___setWire_b2RevoluteJointDef__28bool_20b2RevoluteJointDef____20const__2c_20b2RevoluteJointDef__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29(HEAP8[$3 + 7 | 0] & 1);
 HEAP8[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0] = $0 & 1;
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Joint__2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2JointDef_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Joint__2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20emscripten__internal__AllowedRawPointer_b2JointDef_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20emscripten__internal__MemberAccess_b2WeldJointDef_2c_20float___setWire_b2WeldJointDef__28float_20b2WeldJointDef____20const__2c_20b2WeldJointDef__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]);
 HEAPF32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2RopeJointDef_2c_20float___setWire_b2RopeJointDef__28float_20b2RopeJointDef____20const__2c_20b2RopeJointDef__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]);
 HEAPF32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2RayCastInput_2c_20float___setWire_b2RayCastInput__28float_20b2RayCastInput____20const__2c_20b2RayCastInput__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]);
 HEAPF32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__GenericBindingType_b2Transform___toWireType_28b2Transform_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 $5 = operator_20new_28unsigned_20long_29(16);
 $3 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$3 >> 2];
 $0 = HEAP32[$3 + 4 >> 2];
 $4 = $1;
 $1 = $5;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 $1 = HEAP32[$3 + 12 >> 2];
 $0 = HEAP32[$3 + 8 >> 2];
 $4 = $0;
 $0 = $5;
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$0 + 12 >> 2] = $1;
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_std____2____tree_node_b2Fixture__2c_20void___2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______get_deleter_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_std____2____tree_node_b2Fixture__2c_20void____2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______second_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2DistanceJointDef__b2DistanceJointDef_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2JointDef__b2JointDef_28_29($0);
 b2Vec2__b2Vec2_28_29($0 + 20 | 0);
 b2Vec2__b2Vec2_28_29($0 + 28 | 0);
 HEAP32[$0 >> 2] = 3;
 b2Vec2__Set_28float_2c_20float_29($0 + 20 | 0, Math_fround(0), Math_fround(0));
 b2Vec2__Set_28float_2c_20float_29($0 + 28 | 0, Math_fround(0), Math_fround(0));
 HEAPF32[$0 + 36 >> 2] = 1;
 HEAPF32[$0 + 40 >> 2] = 0;
 HEAPF32[$0 + 44 >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture________tree_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____destroy_28std____2____tree_node_b2Fixture__2c_20void____29($0, std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______root_5babi_v160004_5d_28_29_20const($0));
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2BodyDef_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20emscripten__internal__AllowedRawPointer_b2BodyDef_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20emscripten__internal__MemberAccess_b2JointDef_2c_20b2JointType___setWire_b2JointDef__28b2JointType_20b2JointDef____20const__2c_20b2JointDef__2c_20b2JointType_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = emscripten__internal__EnumBindingType_b2JointType___fromWireType_28b2JointType_29(HEAP32[$3 + 4 >> 2]);
 HEAP32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $0;
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__Signature_void___get_method_caller_28_29() {
 var $0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 if (!(HEAP8[29932] & 1)) {
  wasm2js_i32$0 = 29928, wasm2js_i32$1 = _emval_get_method_caller(emscripten__internal__WithPolicies____ArgTypeList_void___getCount_28_29_20const($0 + 15 | 0) | 0, emscripten__internal__WithPolicies____ArgTypeList_void___getTypes_28_29_20const($0 + 15 | 0) | 0) | 0, 
  HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP8[29932] = 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[7482];
}

function b2Vec2_20const__20_28b2PrismaticJoint____emscripten__internal__getContext_b2Vec2_20const__20_28b2PrismaticJoint____29_28_29_20const__28b2Vec2_20const__20_28b2PrismaticJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20emscripten__internal__MemberAccess_b2Shape_2c_20b2Shape__Type___setWire_b2Shape__28b2Shape__Type_20b2Shape____20const__2c_20b2Shape__2c_20b2Shape__Type_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = emscripten__internal__EnumBindingType_b2Shape__Type___fromWireType_28b2Shape__Type_29(HEAP32[$3 + 4 >> 2]);
 HEAP32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $0;
 __stack_pointer = $3 + 16 | 0;
}

function embind_init_b2_28_29__$_4____invoke_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 embind_init_b2_28_29__$_4__operator_28_29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29_20const($3 + 3 | 0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function b2WorldQueryWrapper__QueryCallback_28int_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 wasm2js_i32$0 = $2, wasm2js_i32$1 = b2BroadPhase__GetUserData_28int_29_20const(HEAP32[$0 >> 2], HEAP32[$2 + 8 >> 2]), 
 HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 $0 = HEAP32[$0 + 4 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[HEAP32[$2 + 4 >> 2] + 16 >> 2]) | 0;
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function std____2__pair_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2_____pair_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___2c_20_28void__290__28std____2__reverse_iterator_b2Vec2_____2c_20std____2__reverse_iterator_b2Vec2_____29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
 return $0;
}

function b2Vec2_20const__20_28b2RevoluteJoint____emscripten__internal__getContext_b2Vec2_20const__20_28b2RevoluteJoint____29_28_29_20const__28b2Vec2_20const__20_28b2RevoluteJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20const__20_28b2DistanceJoint____emscripten__internal__getContext_b2Vec2_20const__20_28b2DistanceJoint____29_28_29_20const__28b2Vec2_20const__20_28b2DistanceJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20emscripten__internal__MemberAccess_b2FixtureDef_2c_20float___setWire_b2FixtureDef__28float_20b2FixtureDef____20const__2c_20b2FixtureDef__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]);
 HEAPF32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function b2Body__SetLinearVelocity_28b2Vec2_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAP32[$0 >> 2]) {
  if (b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 8 >> 2]) > Math_fround(0)) {
   b2Body__SetAwake_28bool_29($0, 1);
  }
  $1 = HEAP32[$2 + 8 >> 2];
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 64 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 68 >> 2] = $3;
 }
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__GenericBindingType_b2Color___toWireType_28b2Color_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 $5 = operator_20new_28unsigned_20long_29(16);
 $3 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$3 >> 2];
 $0 = HEAP32[$3 + 4 >> 2];
 $4 = $1;
 $1 = $5;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 $1 = HEAP32[$3 + 12 >> 2];
 $0 = HEAP32[$3 + 8 >> 2];
 $4 = $0;
 $0 = $5;
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$0 + 12 >> 2] = $1;
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function void_20std____2__allocator_traits_std____2__allocator_b2Vec2____construct_5babi_v160004_5d_b2Vec2_2c_20b2Vec2_20const__2c_20void__28std____2__allocator_b2Vec2___2c_20b2Vec2__2c_20b2Vec2_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 void_20std____2__allocator_b2Vec2___construct_5babi_v160004_5d_b2Vec2_2c_20b2Vec2_20const___28b2Vec2__2c_20b2Vec2_20const__29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function b2WeldJointDef__b2WeldJointDef_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2JointDef__b2JointDef_28_29($0);
 b2Vec2__b2Vec2_28_29($0 + 20 | 0);
 b2Vec2__b2Vec2_28_29($0 + 28 | 0);
 HEAP32[$0 >> 2] = 8;
 b2Vec2__Set_28float_2c_20float_29($0 + 20 | 0, Math_fround(0), Math_fround(0));
 b2Vec2__Set_28float_2c_20float_29($0 + 28 | 0, Math_fround(0), Math_fround(0));
 HEAPF32[$0 + 36 >> 2] = 0;
 HEAPF32[$0 + 40 >> 2] = 0;
 HEAPF32[$0 + 44 >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Fixture__20_28b2Body____emscripten__internal__getContext_b2Fixture__20_28b2Body____29_28b2FixtureDef_20const__29__28b2Fixture__20_28b2Body____20const__29_28b2FixtureDef_20const__29_29_29_28b2FixtureDef_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20emscripten__internal__MemberAccess_b2WheelJointDef_2c_20bool___setWire_b2WheelJointDef__28bool_20b2WheelJointDef____20const__2c_20b2WheelJointDef__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29(HEAP8[$3 + 7 | 0] & 1);
 HEAP8[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0] = $0 & 1;
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2MassData__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2MassData__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__GenericBindingType_b2AABB___toWireType_28b2AABB_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 $5 = operator_20new_28unsigned_20long_29(16);
 $3 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$3 >> 2];
 $0 = HEAP32[$3 + 4 >> 2];
 $4 = $1;
 $1 = $5;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $0;
 $1 = HEAP32[$3 + 12 >> 2];
 $0 = HEAP32[$3 + 8 >> 2];
 $4 = $0;
 $0 = $5;
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$0 + 12 >> 2] = $1;
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function emscripten__internal__Invoker_bool_2c_20unsigned_20int___invoke_28bool_20_28__29_28unsigned_20int_29_2c_20unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$2 + 8 >> 2])) & 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function void_20emscripten__internal__MemberAccess_b2BodyDef_2c_20b2BodyType___setWire_b2BodyDef__28b2BodyType_20b2BodyDef____20const__2c_20b2BodyDef__2c_20b2BodyType_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = emscripten__internal__EnumBindingType_b2BodyType___fromWireType_28b2BodyType_29(HEAP32[$3 + 4 >> 2]);
 HEAP32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $0;
 __stack_pointer = $3 + 16 | 0;
}

function void_20_28b2PrismaticJoint____emscripten__internal__getContext_void_20_28b2PrismaticJoint____29_28float_2c_20float_29__28void_20_28b2PrismaticJoint____20const__29_28float_2c_20float_29_29_29_28float_2c_20float_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28b2Vec2_20const__2c_20float_29__28void_20_28b2Body____20const__29_28b2Vec2_20const__2c_20float_29_29_29_28b2Vec2_20const__2c_20float_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2MassData__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2MassData__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function bool_20_28b2Fixture____emscripten__internal__getContext_bool_20_28b2Fixture____29_28b2Vec2_20const__29_20const__28bool_20_28b2Fixture____20const__29_28b2Vec2_20const__29_20const_29_29_28b2Vec2_20const__29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20emscripten__internal__MemberAccess_b2MassData_2c_20float___setWire_b2MassData__28float_20b2MassData____20const__2c_20b2MassData__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]);
 HEAPF32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function void_20_28b2RevoluteJoint____emscripten__internal__getContext_void_20_28b2RevoluteJoint____29_28float_2c_20float_29__28void_20_28b2RevoluteJoint____20const__29_28float_2c_20float_29_29_29_28float_2c_20float_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2ContactListener____emscripten__internal__getContext_void_20_28b2ContactListener____29_28unsigned_20int_29__28void_20_28b2ContactListener____20const__29_28unsigned_20int_29_29_29_28unsigned_20int_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28b2Vec2_20const__2c_20bool_29__28void_20_28b2Body____20const__29_28b2Vec2_20const__2c_20bool_29_29_29_28b2Vec2_20const__2c_20bool_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20const__20_28b2WheelJoint____emscripten__internal__getContext_b2Vec2_20const__20_28b2WheelJoint____29_28_29_20const__28b2Vec2_20const__20_28b2WheelJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20const__20_28b2MouseJoint____emscripten__internal__getContext_b2Vec2_20const__20_28b2MouseJoint____29_28_29_20const__28b2Vec2_20const__20_28b2MouseJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20const__20_28b2MotorJoint____emscripten__internal__getContext_b2Vec2_20const__20_28b2MotorJoint____29_28_29_20const__28b2Vec2_20const__20_28b2MotorJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20_28b2Body____emscripten__internal__getContext_b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const__28b2Vec2_20_28b2Body____20const__29_28b2Vec2_20const__29_20const_29_29_28b2Vec2_20const__29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2AABB_20const__20_28b2Fixture____emscripten__internal__getContext_b2AABB_20const__20_28b2Fixture____29_28int_29_20const__28b2AABB_20const__20_28b2Fixture____20const__29_28int_29_20const_29_29_28int_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2MassData__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2MassData__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function unsigned_20long_20std____2__allocator_traits_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______max_size_5babi_v160004_5d_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void____2c_20void__28std____2__allocator_std____2____tree_node_b2Fixture__2c_20void____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____max_size_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____ConstructTransaction___ConstructTransaction_5babi_v160004_5d_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 4 >> 2] + (HEAP32[$3 + 4 >> 2] << 3);
 return $0;
}

function b2World__QueryAABB_28b2QueryCallback__2c_20b2AABB_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP32[$3 + 12 >> 2] = $0 + 102868;
 HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 24 >> 2];
 void_20b2BroadPhase__Query_b2WorldQueryWrapper__28b2WorldQueryWrapper__2c_20b2AABB_20const__29_20const($0 + 102868 | 0, $3 + 12 | 0, HEAP32[$3 + 20 >> 2]);
 __stack_pointer = $3 + 32 | 0;
}

function void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28float_2c_20int_2c_20int_29__28void_20_28b2World____20const__29_28float_2c_20int_2c_20int_29_29_29_28float_2c_20int_2c_20int_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2PolygonShape____emscripten__internal__getContext_void_20_28b2PolygonShape____29_28float_2c_20float_29__28void_20_28b2PolygonShape____20const__29_28float_2c_20float_29_29_29_28float_2c_20float_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20_28b2PrismaticJoint____emscripten__internal__getContext_float_20_28b2PrismaticJoint____29_28float_29_20const__28float_20_28b2PrismaticJoint____20const__29_28float_29_20const_29_29_28float_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__Invoker_b2World__2c_20b2Vec2_____invoke_28b2World__20_28__29_28b2Vec2___29_2c_20b2Vec2__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 emscripten__internal__BindingType_b2Vec2___2c_20void___fromWireType_28b2Vec2__29($2, HEAP32[$2 + 8 >> 2]);
 $0 = emscripten__internal__BindingType_b2World__2c_20void___toWireType_28b2World__29(FUNCTION_TABLE[$0 | 0]($2) | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2Vec2_20const__20_28b2WeldJoint____emscripten__internal__getContext_b2Vec2_20const__20_28b2WeldJoint____29_28_29_20const__28b2Vec2_20const__20_28b2WeldJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20const__20_28b2RopeJoint____emscripten__internal__getContext_b2Vec2_20const__20_28b2RopeJoint____29_28_29_20const__28b2Vec2_20const__20_28b2RopeJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Transform_20const__20_28b2Body____emscripten__internal__getContext_b2Transform_20const__20_28b2Body____29_28_29_20const__28b2Transform_20const__20_28b2Body____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2TempPolygon__b2TempPolygon_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = $0 - -64 | 0;
 $2 = $0;
 while (1) {
  b2Vec2__b2Vec2_28_29($2);
  $2 = $2 + 8 | 0;
  if (($3 | 0) != ($2 | 0)) {
   continue;
  }
  break;
 }
 $0 = $0 - -64 | 0;
 $2 = $0 - -64 | 0;
 while (1) {
  b2Vec2__b2Vec2_28_29($0);
  $0 = $0 + 8 | 0;
  if (($2 | 0) != ($0 | 0)) {
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Joint__20_28b2World____emscripten__internal__getContext_b2Joint__20_28b2World____29_28b2JointDef_20const__29__28b2Joint__20_28b2World____20const__29_28b2JointDef_20const__29_29_29_28b2JointDef_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Filter_20const__20_28b2Fixture____emscripten__internal__getContext_b2Filter_20const__20_28b2Fixture____29_28_29_20const__28b2Filter_20const__20_28b2Fixture____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20emscripten__internal__MemberAccess_b2BodyDef_2c_20float___setWire_b2BodyDef__28float_20b2BodyDef____20const__2c_20b2BodyDef__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]);
 HEAPF32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function std____2____compressed_pair_std____2____tree_node_b2Fixture__2c_20void____2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______second_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_201_2c_20false_____get_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2] + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function float_20emscripten__internal__fromGenericWireType_float__28double_29($0) {
 var $1 = 0, $2 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 wasm2js_i32$0 = $1, wasm2js_f32$0 = emscripten__internal__GenericWireTypeConverter_float___from_28double_29(HEAPF64[$1 + 8 >> 3]), 
 HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$1 + 4 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $2;
}

function emscripten__class__b2Draw_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2Draw_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2DrawWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2DrawWrapper__29__operator_28_29_28b2DrawWrapper__29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 emscripten__internal__WrapperBase__setNotifyJSOnDestruction_28bool_29(HEAP32[$2 + 8 >> 2] + 8 | 0, 1);
 __stack_pointer = $2 + 16 | 0;
}

function b2World__ClearForces_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 102948 >> 2];
 while (1) {
  if (HEAP32[$1 + 8 >> 2]) {
   b2Vec2__SetZero_28_29(HEAP32[$1 + 8 >> 2] + 76 | 0);
   HEAPF32[HEAP32[$1 + 8 >> 2] + 84 >> 2] = 0;
   wasm2js_i32$0 = $1, wasm2js_i32$1 = b2Body__GetNext_28_29(HEAP32[$1 + 8 >> 2]), 
   HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
}

function float_20emscripten__internal__MemberAccess_b2PrismaticJointDef_2c_20float___getWire_b2PrismaticJointDef__28float_20b2PrismaticJointDef____20const__2c_20b2PrismaticJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function float_20_28b2RevoluteJoint____emscripten__internal__getContext_float_20_28b2RevoluteJoint____29_28float_29_20const__28float_20_28b2RevoluteJoint____20const__29_28float_29_20const_29_29_28float_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function bool_20_28b2QueryCallback____emscripten__internal__getContext_bool_20_28b2QueryCallback____29_28unsigned_20int_29__28bool_20_28b2QueryCallback____20const__29_28unsigned_20int_29_29_29_28unsigned_20int_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function bool_20_28b2AABB____emscripten__internal__getContext_bool_20_28b2AABB____29_28b2AABB_20const__29_20const__28bool_20_28b2AABB____20const__29_28b2AABB_20const__29_20const_29_29_28b2AABB_20const__29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Island___b2Island_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2StackAllocator__Free_28void__29(HEAP32[$0 >> 2], HEAP32[$0 + 20 >> 2]);
 b2StackAllocator__Free_28void__29(HEAP32[$0 >> 2], HEAP32[$0 + 24 >> 2]);
 b2StackAllocator__Free_28void__29(HEAP32[$0 >> 2], HEAP32[$0 + 16 >> 2]);
 b2StackAllocator__Free_28void__29(HEAP32[$0 >> 2], HEAP32[$0 + 12 >> 2]);
 b2StackAllocator__Free_28void__29(HEAP32[$0 >> 2], HEAP32[$0 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20emscripten__internal__MemberAccess_b2FixtureDef_2c_20bool___setWire_b2FixtureDef__28bool_20b2FixtureDef____20const__2c_20b2FixtureDef__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29(HEAP8[$3 + 7 | 0] & 1);
 HEAP8[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0] = $0 & 1;
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2Filter_2c_20short___setWire_b2Filter__28short_20b2Filter____20const__2c_20b2Filter__2c_20short_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP16[$3 + 6 >> 1] = $2;
 $0 = emscripten__internal__BindingType_short_2c_20void___fromWireType_28short_29(HEAPU16[$3 + 6 >> 1] << 16 >> 16);
 HEAP16[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 1] = $0;
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__Invoker_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______invoke_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__BindingType_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20void___toWireType_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]() | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20_28b2Fixture____emscripten__internal__getContext_void_20_28b2Fixture____29_28b2MassData__29_20const__28void_20_28b2Fixture____20const__29_28b2MassData__29_20const_29_29_28b2MassData__29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2__pair_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int_____pair_5babi_v160004_5d_std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___2c_20_28void__290__28std____2__reverse_iterator_int_____2c_20std____2__reverse_iterator_int_____29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2MassData__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20emscripten__internal__AllowedRawPointer_b2MassData__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20b2Vec2_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20b2Vec2_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Body__20_28b2World____emscripten__internal__getContext_b2Body__20_28b2World____29_28b2BodyDef_20const__29__28b2Body__20_28b2World____20const__29_28b2BodyDef_20const__29_29_29_28b2BodyDef_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20emscripten__internal__MemberAccess_b2RevoluteJointDef_2c_20float___getWire_b2RevoluteJointDef__28float_20b2RevoluteJointDef____20const__2c_20b2RevoluteJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function float_20emscripten__internal__MemberAccess_b2DistanceJointDef_2c_20float___getWire_b2DistanceJointDef__28float_20b2DistanceJointDef____20const__2c_20b2DistanceJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____vector_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______destroy_vector____destroy_vector_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29($1 + 8 | 0, $0);
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______destroy_vector__operator_28_29_5babi_v160004_5d_28_29($1 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20emscripten__internal__MemberAccess_b2Shape_2c_20float___setWire_b2Shape__28float_20b2Shape____20const__2c_20b2Shape__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]);
 HEAPF32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2Color_2c_20float___setWire_b2Color__28float_20b2Color____20const__2c_20b2Color__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]);
 HEAPF32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function void_20_28b2MouseJoint____emscripten__internal__getContext_void_20_28b2MouseJoint____29_28b2Vec2_20const__29__28void_20_28b2MouseJoint____20const__29_28b2Vec2_20const__29_29_29_28b2Vec2_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2MotorJoint____emscripten__internal__getContext_void_20_28b2MotorJoint____29_28b2Vec2_20const__29__28void_20_28b2MotorJoint____20const__29_28b2Vec2_20const__29_29_29_28b2Vec2_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_unsigned_20long_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_unsigned_20long_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__vector_int_2c_20std____2__allocator_int_____ConstructTransaction___ConstructTransaction_5babi_v160004_5d_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 4 >> 2] + (HEAP32[$3 + 4 >> 2] << 2);
 return $0;
}

function embind_init_b2_28_29__$_4__operator_28_29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29_20const($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 b2PolygonShape__Set_28b2Vec2_20const__2c_20int_29(HEAP32[$4 + 8 >> 2], std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____data_5babi_v160004_5d_28_29(HEAP32[$4 + 4 >> 2]), HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function void_20emscripten__internal__MemberAccess_b2JointDef_2c_20bool___setWire_b2JointDef__28bool_20b2JointDef____20const__2c_20b2JointDef__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29(HEAP8[$3 + 7 | 0] & 1);
 HEAP8[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0] = $0 & 1;
 __stack_pointer = $3 + 16 | 0;
}

function void_20_28b2Fixture____emscripten__internal__getContext_void_20_28b2Fixture____29_28b2Filter_20const__29__28void_20_28b2Fixture____20const__29_28b2Filter_20const__29_29_29_28b2Filter_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2Draw____emscripten__internal__getContext_void_20_28b2Draw____29_28b2Transform_20const__29__28void_20_28b2Draw____20const__29_28b2Transform_20const__29_29_29_28b2Transform_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20_28b2WheelJoint____emscripten__internal__getContext_float_20_28b2WheelJoint____29_28float_29_20const__28float_20_28b2WheelJoint____20const__29_28float_29_20const_29_29_28float_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20float_2c_20b2Color_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20float_2c_20b2Color_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function bool_20std____2__operator___5babi_v160004_5d_b2Vec2__2c_20b2Vec2___28std____2__reverse_iterator_b2Vec2___20const__2c_20std____2__reverse_iterator_b2Vec2___20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__reverse_iterator_b2Vec2____base_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 12 >> 2]);
 $1 = std____2__reverse_iterator_b2Vec2____base_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return ($0 | 0) != ($1 | 0);
}

function b2Vec2_20_28b2RopeJoint____emscripten__internal__getContext_b2Vec2_20_28b2RopeJoint____29_28float_29_20const__28b2Vec2_20_28b2RopeJoint____20const__29_28float_29_20const_29_29_28float_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Shape__Type_20_28b2Fixture____emscripten__internal__getContext_b2Shape__Type_20_28b2Fixture____29_28_29_20const__28b2Shape__Type_20_28b2Fixture____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20emscripten__internal__MemberAccess_b2Vec2_2c_20float___setWire_b2Vec2__28float_20b2Vec2____20const__2c_20b2Vec2__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]);
 HEAPF32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1, $2, $3);
}

function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_200_2c_20false_____get_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function decltype_28fp_29_20emscripten__select_overload_void_20_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29_2c_20b2PolygonShape__28void_20_28b2PolygonShape____29_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29_29($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = HEAP32[$1 >> 2];
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $3;
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = $1;
 $1 = HEAP32[$0 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$0 >> 2] = $1;
}

function void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28b2ContactListener__29__28void_20_28b2World____20const__29_28b2ContactListener__29_29_29_28b2ContactListener__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28b2MassData__29_20const__28void_20_28b2Body____20const__29_28b2MassData__29_20const_29_29_28b2MassData__29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20_28b2RopeJoint____emscripten__internal__getContext_float_20_28b2RopeJoint____29_28float_29_20const__28float_20_28b2RopeJoint____20const__29_28float_29_20const_29_29_28float_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20_28b2PrismaticJoint____emscripten__internal__getContext_float_20_28b2PrismaticJoint____29_28_29_20const__28float_20_28b2PrismaticJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20const__20_28b2Body____emscripten__internal__getContext_b2Vec2_20const__20_28b2Body____29_28_29_20const__28b2Vec2_20const__20_28b2Body____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20emscripten__internal__MemberAccess_b2BodyDef_2c_20bool___setWire_b2BodyDef__28bool_20b2BodyDef____20const__2c_20b2BodyDef__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29(HEAP8[$3 + 7 | 0] & 1);
 HEAP8[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] | 0] = $0 & 1;
 __stack_pointer = $3 + 16 | 0;
}

function b2Body__CreateFixture_28b2Shape_20const__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAPF32[$3 + 36 >> 2] = $2;
 $0 = HEAP32[$3 + 44 >> 2];
 b2FixtureDef__b2FixtureDef_28_29($3 + 8 | 0);
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 40 >> 2];
 HEAPF32[$3 + 24 >> 2] = HEAPF32[$3 + 36 >> 2];
 $0 = b2Body__CreateFixture_28b2FixtureDef_20const__29($0, $3 + 8 | 0);
 __stack_pointer = $3 + 48 | 0;
 return $0 | 0;
}

function void_20emscripten__internal__MemberAccess_b2Rot_2c_20float___setWire_b2Rot__28float_20b2Rot____20const__2c_20b2Rot__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $2 = emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29(HEAPF32[$3 + 4 >> 2]);
 HEAPF32[HEAP32[$3 + 8 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}

function unsigned_20short_20emscripten__internal__MemberAccess_b2Filter_2c_20unsigned_20short___getWire_b2Filter__28unsigned_20short_20b2Filter____20const__2c_20b2Filter_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__BindingType_unsigned_20short_2c_20void___toWireType_28unsigned_20short_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 65535;
}

function unsigned_20int_20_28b2Draw____emscripten__internal__getContext_unsigned_20int_20_28b2Draw____29_28_29_20const__28unsigned_20int_20_28b2Draw____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20_28b2RevoluteJoint____emscripten__internal__getContext_float_20_28b2RevoluteJoint____29_28_29_20const__28float_20_28b2RevoluteJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20_28b2DistanceJoint____emscripten__internal__getContext_float_20_28b2DistanceJoint____29_28_29_20const__28float_20_28b2DistanceJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20unsigned_20int_2c_20int_2c_20b2Color_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20unsigned_20int_2c_20int_2c_20b2Color_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListener__2c_20unsigned_20int_2c_20unsigned_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListener__2c_20unsigned_20int_2c_20unsigned_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function bool_20_28b2PrismaticJoint____emscripten__internal__getContext_bool_20_28b2PrismaticJoint____29_28_29_20const__28bool_20_28b2PrismaticJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Shape__Type_20_28b2Shape____emscripten__internal__getContext_b2Shape__Type_20_28b2Shape____29_28_29_20const__28b2Shape__Type_20_28b2Shape____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20emscripten__internal__MemberAccess_b2WheelJointDef_2c_20float___getWire_b2WheelJointDef__28float_20b2WheelJointDef____20const__2c_20b2WheelJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function float_20emscripten__internal__MemberAccess_b2RayCastOutput_2c_20float___getWire_b2RayCastOutput__28float_20b2RayCastOutput____20const__2c_20b2RayCastOutput_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function float_20emscripten__internal__MemberAccess_b2MouseJointDef_2c_20float___getWire_b2MouseJointDef__28float_20b2MouseJointDef____20const__2c_20b2MouseJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function float_20emscripten__internal__MemberAccess_b2MotorJointDef_2c_20float___getWire_b2MotorJointDef__28float_20b2MotorJointDef____20const__2c_20b2MotorJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function b2MouseJoint__SetTarget_28b2Vec2_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (operator___28b2Vec2_20const__2c_20b2Vec2_20const__29(HEAP32[$2 + 8 >> 2], $0 + 76 | 0) & 1) {
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 52 >> 2], 1);
  $1 = HEAP32[$2 + 8 >> 2];
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 76 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 80 >> 2] = $3;
 }
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__WireTypePack____WireTypePack_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__array_emscripten__internal__GenericWireType_2c_200ul___data_5babi_v160004_5d_28_29($0), 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 emscripten__internal__writeGenericWireTypes_28emscripten__internal__GenericWireType___29($1 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2BlockAllocator___b2BlockAllocator_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 4 >> 2] < HEAP32[$0 + 4 >> 2]) {
   b2Free_28void__29(HEAP32[(HEAP32[$0 >> 2] + (HEAP32[$1 + 4 >> 2] << 3) | 0) + 4 >> 2]);
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 b2Free_28void__29(HEAP32[$0 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function bool_20_28b2RevoluteJoint____emscripten__internal__getContext_bool_20_28b2RevoluteJoint____29_28_29_20const__28bool_20_28b2RevoluteJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2__allocator_traits_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______allocate_5babi_v160004_5d_28std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_20unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____allocate_5babi_v160004_5d_28unsigned_20long_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_unsigned_20long_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int___20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_unsigned_20long_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int___20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
 }
}

function float_20emscripten__internal__MemberAccess_b2WeldJointDef_2c_20float___getWire_b2WeldJointDef__28float_20b2WeldJointDef____20const__2c_20b2WeldJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function float_20emscripten__internal__MemberAccess_b2RopeJointDef_2c_20float___getWire_b2RopeJointDef__28float_20b2RopeJointDef____20const__2c_20b2RopeJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function float_20emscripten__internal__MemberAccess_b2RayCastInput_2c_20float___getWire_b2RayCastInput__28float_20b2RayCastInput____20const__2c_20b2RayCastInput_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function void_20std____2__allocator_traits_std____2__allocator_int____construct_5babi_v160004_5d_int_2c_20int_20const__2c_20void__28std____2__allocator_int___2c_20int__2c_20int_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 void_20std____2__allocator_int___construct_5babi_v160004_5d_int_2c_20int_20const___28int__2c_20int_20const__29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28b2Vec2_20const__29__28void_20_28b2World____20const__29_28b2Vec2_20const__29_29_29_28b2Vec2_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20b2MassData____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20emscripten__internal__AllowedRawPointer_b2MassData_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int____2c_20int_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int____2c_20int_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function bool_20_28b2PolygonShape____emscripten__internal__getContext_bool_20_28b2PolygonShape____29_28_29_20const__28bool_20_28b2PolygonShape____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20_28b2Joint____emscripten__internal__getContext_b2Vec2_20_28b2Joint____29_28float_29_20const__28b2Vec2_20_28b2Joint____20const__29_28float_29_20const_29_29_28float_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2JointType_20_28b2Joint____emscripten__internal__getContext_b2JointType_20_28b2Joint____29_28_29_20const__28b2JointType_20_28b2Joint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20const__20emscripten__internal__getActualType_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape__2c_20float_2c_20float_2c_20b2Vec2_20const__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape__2c_20float_2c_20float_2c_20b2Vec2_20const__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20_28b2PrismaticJoint____emscripten__internal__getContext_void_20_28b2PrismaticJoint____29_28float_29__28void_20_28b2PrismaticJoint____20const__29_28float_29_29_29_28float_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28float_2c_20bool_29__28void_20_28b2Body____20const__29_28float_2c_20bool_29_29_29_28float_2c_20bool_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28b2Vec2_20const__29__28void_20_28b2Body____20const__29_28b2Vec2_20const__29_29_29_28b2Vec2_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function int_20_28b2PolygonShape____emscripten__internal__getContext_int_20_28b2PolygonShape____29_28_29_20const__28int_20_28b2PolygonShape____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20_28b2WheelJoint____emscripten__internal__getContext_float_20_28b2WheelJoint____29_28_29_20const__28float_20_28b2WheelJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20_28b2MouseJoint____emscripten__internal__getContext_float_20_28b2MouseJoint____29_28_29_20const__28float_20_28b2MouseJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20_28b2MotorJoint____emscripten__internal__getContext_float_20_28b2MotorJoint____29_28_29_20const__28float_20_28b2MotorJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20_28b2Joint____emscripten__internal__getContext_float_20_28b2Joint____29_28float_29_20const__28float_20_28b2Joint____20const__29_28float_29_20const_29_29_28float_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}
function bool_20emscripten__internal__fromGenericWireType_bool__28double_29($0) {
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = emscripten__internal__GenericWireTypeConverter_bool___from_28double_29(HEAPF64[$1 + 8 >> 3]) & 1, 
 HEAP8[wasm2js_i32$0 + 7 | 0] = wasm2js_i32$1;
 $2 = emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29(HEAP8[$1 + 7 | 0] & 1);
 __stack_pointer = $1 + 16 | 0;
 return $2 & 1;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2AABB__2c_20b2AABB__2c_20b2AABB____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2AABB__2c_20emscripten__internal__AllowedRawPointer_b2AABB__2c_20emscripten__internal__AllowedRawPointer_b2AABB_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__Invoker_std____2__vector_int_2c_20std____2__allocator_int______invoke_28std____2__vector_int_2c_20std____2__allocator_int____20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__BindingType_std____2__vector_int_2c_20std____2__allocator_int____2c_20void___toWireType_28std____2__vector_int_2c_20std____2__allocator_int____29(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]() | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function operator__28b2Vec3_20const__2c_20b2Vec3_20const__29_1($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Vec3__b2Vec3_28float_2c_20float_2c_20float_29($0, Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] >> 2] + HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]), Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2] + HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2]), Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 8 >> 2] + HEAPF32[HEAP32[$3 + 8 >> 2] + 8 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function b2Body__SynchronizeTransform_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 $0 = HEAP32[$1 + 28 >> 2];
 b2Rot__Set_28float_29($0 + 20 | 0, HEAPF32[$0 + 56 >> 2]);
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($1 + 12 | 0, $0 + 20 | 0, $0 + 28 | 0);
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($1 + 20 | 0, $0 + 44 | 0, $1 + 12 | 0);
 $2 = HEAP32[$1 + 24 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 20 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 __stack_pointer = $1 + 32 | 0;
}

function void_20_28b2RevoluteJoint____emscripten__internal__getContext_void_20_28b2RevoluteJoint____29_28float_29__28void_20_28b2RevoluteJoint____20const__29_28float_29_29_29_28float_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2PrismaticJoint____emscripten__internal__getContext_void_20_28b2PrismaticJoint____29_28bool_29__28void_20_28b2PrismaticJoint____20const__29_28bool_29_29_29_28bool_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2Draw____emscripten__internal__getContext_void_20_28b2Draw____29_28unsigned_20int_29__28void_20_28b2Draw____20const__29_28unsigned_20int_29_29_29_28unsigned_20int_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2DistanceJoint____emscripten__internal__getContext_void_20_28b2DistanceJoint____29_28float_29__28void_20_28b2DistanceJoint____20const__29_28float_29_29_29_28float_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2__pair_char_20const__2c_20char___20std____2____copy_5babi_v160004_5d_std____2___ClassicAlgPolicy_2c_20char_20const__2c_20char_20const__2c_20char___28char_20const__2c_20char_20const__2c_20char__29($0, $1, $2, $3) {
 std____2__pair_char_20const__2c_20char___20std____2____dispatch_copy_or_move_5babi_v160004_5d_std____2___ClassicAlgPolicy_2c_20std____2____copy_loop_std____2___ClassicAlgPolicy__2c_20std____2____copy_trivial_2c_20char_20const__2c_20char_20const__2c_20char___28char_20const__2c_20char_20const__2c_20char__29($0, $1, $2, $3);
}

function int_20_28b2CircleShape____emscripten__internal__getContext_int_20_28b2CircleShape____29_28_29_20const__28int_20_28b2CircleShape____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20_28b2WeldJoint____emscripten__internal__getContext_float_20_28b2WeldJoint____29_28_29_20const__28float_20_28b2WeldJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20_28b2RopeJoint____emscripten__internal__getContext_float_20_28b2RopeJoint____29_28_29_20const__28float_20_28b2RopeJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2ContactListener____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20emscripten__internal__AllowedRawPointer_b2ContactListener_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const__2c_20b2MassData____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const__2c_20emscripten__internal__AllowedRawPointer_b2MassData_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function bool_20std____2__operator___5babi_v160004_5d_int__2c_20int___28std____2__reverse_iterator_int___20const__2c_20std____2__reverse_iterator_int___20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__reverse_iterator_int____base_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 12 >> 2]);
 $1 = std____2__reverse_iterator_int____base_5babi_v160004_5d_28_29_20const(HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return ($0 | 0) != ($1 | 0);
}

function bool_20_28b2WheelJoint____emscripten__internal__getContext_bool_20_28b2WheelJoint____29_28_29_20const__28bool_20_28b2WheelJoint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2__20emscripten__internal__MemberAccess_b2PrismaticJointDef_2c_20b2Vec2___getWire_b2PrismaticJointDef__28b2Vec2_20b2PrismaticJointDef____20const__2c_20b2PrismaticJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2BodyType_20_28b2Body____emscripten__internal__getContext_b2BodyType_20_28b2Body____29_28_29_20const__28b2BodyType_20_28b2Body____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function operator__28b2Vec3_20const__2c_20b2Vec3_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Vec3__b2Vec3_28float_2c_20float_2c_20float_29($0, Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] >> 2] - HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]), Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2] - HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2]), Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 8 >> 2] - HEAPF32[HEAP32[$3 + 8 >> 2] + 8 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function float_20emscripten__internal__MemberAccess_b2FixtureDef_2c_20float___getWire_b2FixtureDef__28float_20b2FixtureDef____20const__2c_20b2FixtureDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function std____2__vector_int_2c_20std____2__allocator_int_____vector_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__vector_int_2c_20std____2__allocator_int______destroy_vector____destroy_vector_28std____2__vector_int_2c_20std____2__allocator_int____29($1 + 8 | 0, $0);
 std____2__vector_int_2c_20std____2__allocator_int______destroy_vector__operator_28_29_5babi_v160004_5d_28_29($1 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2ContactListenerWrapper__b2ContactListenerWrapper___28emscripten__val___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 emscripten__wrapper_b2ContactListener___wrapper___28emscripten__val___29($0, HEAP32[$2 + 8 >> 2]);
 HEAP32[$0 >> 2] = 25996;
 std____2__set_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____set_5babi_v160004_5d_28_29($0 + 12 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function void_20_28b2RevoluteJoint____emscripten__internal__getContext_void_20_28b2RevoluteJoint____29_28bool_29__28void_20_28b2RevoluteJoint____20const__29_28bool_29_29_29_28bool_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__FunctionInvoker_void_20_28__29_28b2DrawWrapper__29_2c_20void_2c_20b2DrawWrapper____invoke_28void_20_28___29_28b2DrawWrapper__29_2c_20b2DrawWrapper__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2];
 FUNCTION_TABLE[$0 | 0](emscripten__internal__GenericBindingType_b2DrawWrapper___fromWireType_28b2DrawWrapper__29(HEAP32[$2 + 8 >> 2]));
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__Invoker_unsigned_20int___invoke_28unsigned_20int_20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]() | 0, 
 HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 $0 = emscripten__internal__BindingType_unsigned_20int_2c_20void___toWireType_28unsigned_20int_20const__29($1 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2Vec2__20emscripten__internal__MemberAccess_b2RevoluteJointDef_2c_20b2Vec2___getWire_b2RevoluteJointDef__28b2Vec2_20b2RevoluteJointDef____20const__2c_20b2RevoluteJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2Vec2__20emscripten__internal__MemberAccess_b2DistanceJointDef_2c_20b2Vec2___getWire_b2DistanceJointDef__28b2Vec2_20b2DistanceJointDef____20const__2c_20b2DistanceJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function int_20_28b2EdgeShape____emscripten__internal__getContext_int_20_28b2EdgeShape____29_28_29_20const__28int_20_28b2EdgeShape____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20_28b2Fixture____emscripten__internal__getContext_float_20_28b2Fixture____29_28_29_20const__28float_20_28b2Fixture____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function bool_20emscripten__internal__MemberAccess_b2PrismaticJointDef_2c_20bool___getWire_b2PrismaticJointDef__28bool_20b2PrismaticJointDef____20const__2c_20b2PrismaticJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(HEAP8[HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] & 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function std____2__set_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____erase_5babi_v160004_5d_28b2Fixture__20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = unsigned_20long_20std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______erase_unique_b2Fixture___28b2Fixture__20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20_28b2WheelJoint____emscripten__internal__getContext_void_20_28b2WheelJoint____29_28float_29__28void_20_28b2WheelJoint____20const__29_28float_29_29_29_28float_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2MouseJoint____emscripten__internal__getContext_void_20_28b2MouseJoint____29_28float_29__28void_20_28b2MouseJoint____20const__29_28float_29_29_29_28float_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2MotorJoint____emscripten__internal__getContext_void_20_28b2MotorJoint____29_28float_29__28void_20_28b2MotorJoint____20const__29_28float_29_29_29_28float_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20emscripten__internal__MemberAccess_b2MassData_2c_20float___getWire_b2MassData__28float_20b2MassData____20const__2c_20b2MassData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function bool_20_28b2Fixture____emscripten__internal__getContext_bool_20_28b2Fixture____29_28_29_20const__28bool_20_28b2Fixture____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20_28b2World____emscripten__internal__getContext_b2Vec2_20_28b2World____29_28_29_20const__28b2Vec2_20_28b2World____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20_28b2Joint____emscripten__internal__getContext_b2Vec2_20_28b2Joint____29_28_29_20const__28b2Vec2_20_28b2Joint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function bool_20emscripten__internal__MemberAccess_b2RevoluteJointDef_2c_20bool___getWire_b2RevoluteJointDef__28bool_20b2RevoluteJointDef____20const__2c_20b2RevoluteJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(HEAP8[HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] & 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function emscripten__wrapper_b2RayCastCallback____wrapper_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$0 >> 2] = 25744;
 if (HEAP8[$0 + 4 | 0] & 1) {
  void_20emscripten__wrapper_b2RayCastCallback___call_void__28char_20const__29_20const($0, 3085);
 }
 emscripten__val___val_28_29($0 + 8 | 0);
 b2RayCastCallback___b2RayCastCallback_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__wrapper_b2ContactListener____wrapper_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$0 >> 2] = 26028;
 if (HEAP8[$0 + 4 | 0] & 1) {
  void_20emscripten__wrapper_b2ContactListener___call_void__28char_20const__29_20const($0, 3085);
 }
 emscripten__val___val_28_29($0 + 8 | 0);
 b2ContactListener___b2ContactListener_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function void_20_28b2WheelJoint____emscripten__internal__getContext_void_20_28b2WheelJoint____29_28bool_29__28void_20_28b2WheelJoint____20const__29_28bool_29_29_29_28bool_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2WeldJoint____emscripten__internal__getContext_void_20_28b2WeldJoint____29_28float_29__28void_20_28b2WeldJoint____20const__29_28float_29_29_29_28float_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2RopeJoint____emscripten__internal__getContext_void_20_28b2RopeJoint____29_28float_29__28void_20_28b2RopeJoint____20const__29_28float_29_29_29_28float_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2PrismaticJoint____emscripten__internal__getContext_void_20_28b2PrismaticJoint____29_28_29__28void_20_28b2PrismaticJoint____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28b2Fixture__29__28void_20_28b2Body____20const__29_28b2Fixture__29_29_29_28b2Fixture__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28b2BodyType_29__28void_20_28b2Body____20const__29_28b2BodyType_29_29_29_28b2BodyType_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAPU8[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]) + 11 | 0];
 __stack_pointer = $1 + 16 | 0;
 return $0 >>> 7 | 0;
}

function emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_4__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_4__28embind_init_b2_28_29__$_4_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = embind_init_b2_28_29__$_4__operator_20void_20_28__29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Vec2_20_28b2AABB____emscripten__internal__getContext_b2Vec2_20_28b2AABB____29_28_29_20const__28b2Vec2_20_28b2AABB____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____data_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = char_20const__20std____2____to_address_5babi_v160004_5d_char_20const__28char_20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]));
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function float_20emscripten__internal__MemberAccess_b2BodyDef_2c_20float___getWire_b2BodyDef__28float_20b2BodyDef____20const__2c_20b2BodyDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function bool_20emscripten__val__call_bool_2c_20unsigned_20int___28char_20const__2c_20unsigned_20int__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = emscripten__internal__MethodCaller_bool_2c_20unsigned_20int____call_28emscripten___EM_VAL__2c_20char_20const__2c_20unsigned_20int__29(HEAP32[HEAP32[$3 + 12 >> 2] >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 & 1;
}

function b2MotorJoint__SetCorrectionFactor_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (!(!(!(b2IsValid_28float_29(HEAPF32[$2 + 8 >> 2]) & 1) | !(HEAPF32[$2 + 8 >> 2] >= Math_fround(0))) & HEAPF32[$2 + 8 >> 2] <= Math_fround(1))) {
  __assert_fail(7867, 4249, 257, 3744);
  wasm2js_trap();
 }
 HEAPF32[$0 + 100 >> 2] = HEAPF32[$2 + 8 >> 2];
 __stack_pointer = $2 + 16 | 0;
}

function __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = HEAP32[$1 + 16 >> 2];
 if (!$0) {
  HEAP32[$1 + 36 >> 2] = 1;
  HEAP32[$1 + 24 >> 2] = $3;
  HEAP32[$1 + 16 >> 2] = $2;
  return;
 }
 label$2: {
  if (($2 | 0) == ($0 | 0)) {
   if (HEAP32[$1 + 24 >> 2] != 2) {
    break label$2;
   }
   HEAP32[$1 + 24 >> 2] = $3;
   return;
  }
  HEAP8[$1 + 54 | 0] = 1;
  HEAP32[$1 + 24 >> 2] = 2;
  HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 1;
 }
}

function void_20emscripten__val__call_void_2c_20b2Transform_20const___28char_20const__2c_20b2Transform_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 emscripten__internal__MethodCaller_void_2c_20b2Transform_20const____call_28emscripten___EM_VAL__2c_20char_20const__2c_20b2Transform_20const__29(HEAP32[HEAP32[$3 + 12 >> 2] >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Island__Add_28b2Body__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAP32[$0 + 28 >> 2] >= HEAP32[$0 + 40 >> 2]) {
  __assert_fail(1258, 7410, 58, 10196);
  wasm2js_trap();
 }
 HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2] = HEAP32[$0 + 28 >> 2];
 HEAP32[HEAP32[$0 + 8 >> 2] + (HEAP32[$0 + 28 >> 2] << 2) >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 28 >> 2] + 1;
 __stack_pointer = $2 + 16 | 0;
}

function void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28b2Joint__29__28void_20_28b2World____20const__29_28b2Joint__29_29_29_28b2Joint__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2RevoluteJoint____emscripten__internal__getContext_void_20_28b2RevoluteJoint____29_28_29__28void_20_28b2RevoluteJoint____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2DistanceJoint____emscripten__internal__getContext_void_20_28b2DistanceJoint____29_28_29__28void_20_28b2DistanceJoint____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20_28b2Body____emscripten__internal__getContext_float_20_28b2Body____29_28_29_20const__28float_20_28b2Body____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20_28b2AABB____emscripten__internal__getContext_float_20_28b2AABB____29_28_29_20const__28float_20_28b2AABB____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function bool_20_28b2World____emscripten__internal__getContext_bool_20_28b2World____29_28_29_20const__28bool_20_28b2World____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function bool_20_28b2Joint____emscripten__internal__getContext_bool_20_28b2Joint____29_28_29_20const__28bool_20_28b2Joint____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2RopeJointDef__b2RopeJointDef_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2JointDef__b2JointDef_28_29($0);
 b2Vec2__b2Vec2_28_29($0 + 20 | 0);
 b2Vec2__b2Vec2_28_29($0 + 28 | 0);
 HEAP32[$0 >> 2] = 10;
 b2Vec2__Set_28float_2c_20float_29($0 + 20 | 0, Math_fround(-1), Math_fround(0));
 b2Vec2__Set_28float_2c_20float_29($0 + 28 | 0, Math_fround(1), Math_fround(0));
 HEAPF32[$0 + 36 >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2JointType_20emscripten__internal__MemberAccess_b2JointDef_2c_20b2JointType___getWire_b2JointDef__28b2JointType_20b2JointDef____20const__2c_20b2JointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__EnumBindingType_b2JointType___toWireType_28b2JointType_29(HEAP32[HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2Fixture__20_28b2Fixture____emscripten__internal__getContext_b2Fixture__20_28b2Fixture____29_28_29__28b2Fixture__20_28b2Fixture____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Vec2__20emscripten__internal__MemberAccess_b2WheelJointDef_2c_20b2Vec2___getWire_b2WheelJointDef__28b2Vec2_20b2WheelJointDef____20const__2c_20b2WheelJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2Vec2__20emscripten__internal__MemberAccess_b2RayCastOutput_2c_20b2Vec2___getWire_b2RayCastOutput__28b2Vec2_20b2RayCastOutput____20const__2c_20b2RayCastOutput_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2Vec2__20emscripten__internal__MemberAccess_b2MouseJointDef_2c_20b2Vec2___getWire_b2MouseJointDef__28b2Vec2_20b2MouseJointDef____20const__2c_20b2MouseJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2Vec2__20emscripten__internal__MemberAccess_b2MotorJointDef_2c_20b2Vec2___getWire_b2MotorJointDef__28b2Vec2_20b2MotorJointDef____20const__2c_20b2MotorJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_pointer_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function b2Shape__Type_20emscripten__internal__MemberAccess_b2Shape_2c_20b2Shape__Type___getWire_b2Shape__28b2Shape__Type_20b2Shape____20const__2c_20b2Shape_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__EnumBindingType_b2Shape__Type___toWireType_28b2Shape__Type_29(HEAP32[HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28b2Draw__29__28void_20_28b2World____20const__29_28b2Draw__29_29_29_28b2Draw__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28b2Body__29__28void_20_28b2World____20const__29_28b2Body__29_29_29_28b2Body__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2Fixture____emscripten__internal__getContext_void_20_28b2Fixture____29_28float_29__28void_20_28b2Fixture____20const__29_28float_29_29_29_28float_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2______ConstructTransaction___ConstructTransaction_5babi_v160004_5d_28b2Vec2___2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2] + (HEAP32[$3 + 4 >> 2] << 3);
 HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 return $0;
}

function std____2____compressed_pair_std____2____tree_node_b2Fixture__2c_20void____2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______first_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_std____2____tree_node_b2Fixture__2c_20void____2c_200_2c_20false_____get_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function int_20_28b2Shape____emscripten__internal__getContext_int_20_28b2Shape____29_28_29_20const__28int_20_28b2Shape____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Fixture____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__val_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function bool_20_28b2Body____emscripten__internal__getContext_bool_20_28b2Body____29_28_29_20const__28bool_20_28b2Body____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function bool_20_28b2AABB____emscripten__internal__getContext_bool_20_28b2AABB____29_28_29_20const__28bool_20_28b2AABB____20const__29_28_29_20const_29_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Filter__20emscripten__internal__MemberAccess_b2FixtureDef_2c_20b2Filter___getWire_b2FixtureDef__28b2Filter_20b2FixtureDef____20const__2c_20b2FixtureDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__GenericBindingType_b2Filter___toWireType_28b2Filter_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int____29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int___20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function emscripten__wrapper_b2QueryCallback____wrapper_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$0 >> 2] = 25492;
 if (HEAP8[$0 + 4 | 0] & 1) {
  void_20emscripten__wrapper_b2QueryCallback___call_void__28char_20const__29_20const($0, 3085);
 }
 emscripten__val___val_28_29($0 + 8 | 0);
 b2QueryCallback___b2QueryCallback_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_std____2____tree_end_node_std____2____tree_node_base_void_____2c_20std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______first_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_std____2____tree_end_node_std____2____tree_node_base_void_____2c_200_2c_20false_____get_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Joint____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20emscripten__internal__AllowedRawPointer_b2Joint_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Vec2__20emscripten__internal__MemberAccess_b2WeldJointDef_2c_20b2Vec2___getWire_b2WeldJointDef__28b2Vec2_20b2WeldJointDef____20const__2c_20b2WeldJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2Vec2__20emscripten__internal__MemberAccess_b2RopeJointDef_2c_20b2Vec2___getWire_b2RopeJointDef__28b2Vec2_20b2RopeJointDef____20const__2c_20b2RopeJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2Vec2__20emscripten__internal__MemberAccess_b2RayCastInput_2c_20b2Vec2___getWire_b2RayCastInput__28b2Vec2_20b2RayCastInput____20const__2c_20b2RayCastInput_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function void_20_28b2Fixture____emscripten__internal__getContext_void_20_28b2Fixture____29_28bool_29__28void_20_28b2Fixture____20const__29_28bool_29_29_29_28bool_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20emscripten__internal__MemberAccess_b2Shape_2c_20float___getWire_b2Shape__28float_20b2Shape____20const__2c_20b2Shape_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function float_20emscripten__internal__MemberAccess_b2Color_2c_20float___getWire_b2Color__28float_20b2Color____20const__2c_20b2Color_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function b2Shape__20_28b2Fixture____emscripten__internal__getContext_b2Shape__20_28b2Fixture____29_28_29__28b2Shape__20_28b2Fixture____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____deallocate_5babi_v160004_5d_28std____2____tree_node_b2Fixture__2c_20void____2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 std____2____libcpp_deallocate_5babi_v160004_5d_28void__2c_20unsigned_20long_2c_20unsigned_20long_29(HEAP32[$3 + 8 >> 2], Math_imul(HEAP32[$3 + 4 >> 2], 20), 4);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Draw____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20emscripten__internal__AllowedRawPointer_b2Draw_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Body____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20emscripten__internal__AllowedRawPointer_b2Body_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function bool_20emscripten__internal__MemberAccess_b2WheelJointDef_2c_20bool___getWire_b2WheelJointDef__28bool_20b2WheelJointDef____20const__2c_20b2WheelJointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(HEAP8[HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] & 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function void_20_28b2WheelJoint____emscripten__internal__getContext_void_20_28b2WheelJoint____29_28_29__28void_20_28b2WheelJoint____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2MouseJoint____emscripten__internal__getContext_void_20_28b2MouseJoint____29_28_29__28void_20_28b2MouseJoint____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2MotorJoint____emscripten__internal__getContext_void_20_28b2MotorJoint____29_28_29__28void_20_28b2MotorJoint____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2Fixture____emscripten__internal__getContext_void_20_28b2Fixture____29_28int_29__28void_20_28b2Fixture____20const__29_28int_29_29_29_28int_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2__20emscripten__internal__MemberAccess_b2CircleShape_2c_20b2Vec2___getWire_b2CircleShape__28b2Vec2_20b2CircleShape____20const__2c_20b2CircleShape_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2Fixture__20_28b2Body____emscripten__internal__getContext_b2Fixture__20_28b2Body____29_28_29__28b2Fixture__20_28b2Body____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2ContactListenerWrapper__registerContactFixture_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 24 >> 2];
 std____2__set_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____insert_5babi_v160004_5d_28b2Fixture__20const__29($2 + 12 | 0, $0 + 12 | 0, $2 + 20 | 0);
 __stack_pointer = $2 + 32 | 0;
}

function b2Body__20_28b2Fixture____emscripten__internal__getContext_b2Body__20_28b2Fixture____29_28_29__28b2Body__20_28b2Fixture____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2BodyType_20emscripten__internal__MemberAccess_b2BodyDef_2c_20b2BodyType___getWire_b2BodyDef__28b2BodyType_20b2BodyDef____20const__2c_20b2BodyDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__EnumBindingType_b2BodyType___toWireType_28b2BodyType_29(HEAP32[HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function float_20emscripten__internal__MemberAccess_b2Vec2_2c_20float___getWire_b2Vec2__28float_20b2Vec2____20const__2c_20b2Vec2_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function emscripten__wrapper_b2RayCastCallback___wrapper___28emscripten__val___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 b2RayCastCallback__b2RayCastCallback_28_29($0);
 emscripten__internal__WrapperBase__WrapperBase_28_29($0 + 4 | 0);
 HEAP32[$0 >> 2] = 25744;
 emscripten__val__val_28emscripten__val___29($0 + 8 | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function emscripten__wrapper_b2ContactListener___wrapper___28emscripten__val___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 b2ContactListener__b2ContactListener_28_29($0);
 emscripten__internal__WrapperBase__WrapperBase_28_29($0 + 4 | 0);
 HEAP32[$0 >> 2] = 26028;
 emscripten__val__val_28emscripten__val___29($0 + 8 | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28bool_29__28void_20_28b2World____20const__29_28bool_29_29_29_28bool_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2WeldJoint____emscripten__internal__getContext_void_20_28b2WeldJoint____29_28_29__28void_20_28b2WeldJoint____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2RopeJoint____emscripten__internal__getContext_void_20_28b2RopeJoint____29_28_29__28void_20_28b2RopeJoint____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28float_29__28void_20_28b2Body____20const__29_28float_29_29_29_28float_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2____split_buffer_int_2c_20std____2__allocator_int______ConstructTransaction___ConstructTransaction_5babi_v160004_5d_28int___2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2] + (HEAP32[$3 + 4 >> 2] << 2);
 HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 return $0;
}

function bool_20emscripten__wrapper_b2QueryCallback___call_bool_2c_20unsigned_20int___28char_20const__2c_20unsigned_20int__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = bool_20emscripten__val__call_bool_2c_20unsigned_20int___28char_20const__2c_20unsigned_20int__29_20const(HEAP32[$3 + 12 >> 2] + 8 | 0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 & 1;
}

function void_20emscripten__constant_int__28char_20const__2c_20int_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _embind_register_constant(HEAP32[$2 + 12 >> 2], emscripten__internal__TypeID_int_20const__2c_20void___get_28_29() | 0, +double_20emscripten__internal__asGenericValue_int__28int_29(emscripten__internal__BindingType_int_2c_20void___toWireType_28int_20const__29(HEAP32[$2 + 8 >> 2])));
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListener__2c_20unsigned_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListener__2c_20unsigned_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function float_20emscripten__internal__MemberAccess_b2Rot_2c_20float___getWire_b2Rot__28float_20b2Rot____20const__2c_20b2Rot_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return Math_fround($3);
}

function b2BroadPhase__UnBufferMove_28int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 4 >> 2] < HEAP32[$0 + 40 >> 2]) {
   if (HEAP32[HEAP32[$0 + 32 >> 2] + (HEAP32[$2 + 4 >> 2] << 2) >> 2] == HEAP32[$2 + 8 >> 2]) {
    HEAP32[HEAP32[$0 + 32 >> 2] + (HEAP32[$2 + 4 >> 2] << 2) >> 2] = -1;
   }
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
}

function void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28bool_29__28void_20_28b2Body____20const__29_28bool_29_29_29_28bool_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__val_2c_20std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function decltype_28fp_29_20emscripten__select_overload_b2Fixture__20_28b2Shape_20const__2c_20float_29_2c_20b2Body__28b2Fixture__20_28b2Body____29_28b2Shape_20const__2c_20float_29_29($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = HEAP32[$1 >> 2];
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $3;
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = $1;
 $1 = HEAP32[$0 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$0 >> 2] = $1;
}

function b2World__20_28b2Body____emscripten__internal__getContext_b2World__20_28b2Body____29_28_29__28b2World__20_28b2Body____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Body__20_28b2Joint____emscripten__internal__getContext_b2Body__20_28b2Joint____29_28_29__28b2Body__20_28b2Joint____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2____compressed_pair_std____2____tree_end_node_std____2____tree_node_base_void_____2c_20std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______second_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void____2c_201_2c_20true_____get_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__wrapper_b2QueryCallback___wrapper___28emscripten__val___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 b2QueryCallback__b2QueryCallback_28_29($0);
 emscripten__internal__WrapperBase__WrapperBase_28_29($0 + 4 | 0);
 HEAP32[$0 >> 2] = 25492;
 emscripten__val__val_28emscripten__val___29($0 + 8 | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2QueryCallback__2c_20unsigned_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2QueryCallback__2c_20unsigned_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Fixture____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Vec2__20emscripten__internal__MemberAccess_b2Transform_2c_20b2Vec2___getWire_b2Transform__28b2Vec2_20b2Transform____20const__2c_20b2Transform_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function void_20_28b2Fixture____emscripten__internal__getContext_void_20_28b2Fixture____29_28_29__28void_20_28b2Fixture____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20emscripten__val__call_void_2c_20unsigned_20int___28char_20const__2c_20unsigned_20int__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 emscripten__internal__MethodCaller_void_2c_20unsigned_20int____call_28emscripten___EM_VAL__2c_20char_20const__2c_20unsigned_20int__29(HEAP32[HEAP32[$3 + 12 >> 2] >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function std____2____compressed_pair_std____2____tree_node_b2Fixture__2c_20void____2c_20std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_______first_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_std____2____tree_node_b2Fixture__2c_20void____2c_200_2c_20false_____get_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2FixtureDef__2c_20b2Shape_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2FixtureDef__2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function bool_20emscripten__internal__MemberAccess_b2FixtureDef_2c_20bool___getWire_b2FixtureDef__28bool_20b2FixtureDef____20const__2c_20b2FixtureDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(HEAP8[HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] & 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function b2PrismaticJoint__EnableLimit_28bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if ((HEAP8[$2 + 11 | 0] & 1) != (HEAP8[$0 + 136 | 0] & 1)) {
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 48 >> 2], 1);
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 52 >> 2], 1);
  HEAP8[$0 + 136 | 0] = HEAP8[$2 + 11 | 0] & 1;
  HEAPF32[$0 + 112 >> 2] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
}

function void_20emscripten__wrapper_b2Draw___call_void_2c_20b2Transform_20const___28char_20const__2c_20b2Transform_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 void_20emscripten__val__call_void_2c_20b2Transform_20const___28char_20const__2c_20b2Transform_20const__29_20const(HEAP32[$3 + 12 >> 2] + 12 | 0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______node_alloc_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_std____2____tree_end_node_std____2____tree_node_base_void_____2c_20std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______second_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2] + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_std____2____tree_end_node_std____2____tree_node_base_void_____2c_20std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______first_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_std____2____tree_end_node_std____2____tree_node_base_void_____2c_200_2c_20false_____get_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2Fixture____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Vec2__20emscripten__internal__MemberAccess_b2MassData_2c_20b2Vec2___getWire_b2MassData__28b2Vec2_20b2MassData____20const__2c_20b2MassData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2RevoluteJoint__EnableLimit_28bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if ((HEAP8[$2 + 11 | 0] & 1) != (HEAP8[$0 + 112 | 0] & 1)) {
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 48 >> 2], 1);
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 52 >> 2], 1);
  HEAP8[$0 + 112 | 0] = HEAP8[$2 + 11 | 0] & 1;
  HEAPF32[$0 + 92 >> 2] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
}

function b2Rot__20emscripten__internal__MemberAccess_b2Transform_2c_20b2Rot___getWire_b2Transform__28b2Rot_20b2Transform____20const__2c_20b2Transform_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__GenericBindingType_b2Rot___toWireType_28b2Rot_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Transform_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Transform_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2Fixture____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20_28b2World____emscripten__internal__getContext_void_20_28b2World____29_28_29__28void_20_28b2World____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28b2Joint____emscripten__internal__getContext_void_20_28b2Joint____29_28_29__28void_20_28b2Joint____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function short_20emscripten__internal__MemberAccess_b2Filter_2c_20short___getWire_b2Filter__28short_20b2Filter____20const__2c_20b2Filter_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__BindingType_short_2c_20void___toWireType_28short_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 << 16 >> 16;
}

function b2Vec2__20emscripten__internal__MemberAccess_b2BodyDef_2c_20b2Vec2___getWire_b2BodyDef__28b2Vec2_20b2BodyDef____20const__2c_20b2BodyDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2ContactListenerWrapper__unregisterContactFixture_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 std____2__set_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____erase_5babi_v160004_5d_28b2Fixture__20const__29($0 + 12 | 0, $2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function void_20_28__emscripten__internal__getContext_void_20_28__29_28b2FixtureDef__2c_20b2Shape_20const__29__28void_20_28__20const__29_28b2FixtureDef__2c_20b2Shape_20const__29_29_29_28b2FixtureDef__2c_20b2Shape_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2__allocator_traits_std____2__allocator_b2Vec2____deallocate_5babi_v160004_5d_28std____2__allocator_b2Vec2___2c_20b2Vec2__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 std____2__allocator_b2Vec2___deallocate_5babi_v160004_5d_28b2Vec2__2c_20unsigned_20long_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function void_20_28b2Body____emscripten__internal__getContext_void_20_28b2Body____29_28_29__28void_20_28b2Body____20const__29_28_29_29_29_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2World__2c_20emscripten__internal__AllowedRawPointer_b2Body____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2World__2c_20emscripten__internal__AllowedRawPointer_b2Body_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2Joint____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2Joint_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function decltype_28fp_29_20emscripten__select_overload_b2Fixture__20_28b2FixtureDef_20const__29_2c_20b2Body__28b2Fixture__20_28b2Body____29_28b2FixtureDef_20const__29_29($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = HEAP32[$1 >> 2];
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $3;
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = $1;
 $1 = HEAP32[$0 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$0 >> 2] = $1;
}

function bool_20emscripten__internal__MemberAccess_b2JointDef_2c_20bool___getWire_b2JointDef__28bool_20b2JointDef____20const__2c_20b2JointDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(HEAP8[HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] & 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function b2Rot__b2Rot_28float_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 wasm2js_i32$0 = $0, wasm2js_f32$0 = sinf(HEAPF32[$2 + 8 >> 2]), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $0, wasm2js_f32$0 = cosf(HEAPF32[$2 + 8 >> 2]), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $5 = HEAP32[$0 + 4 >> 2];
 $4 = 0;
 label$1: {
  if (!$2) {
   break label$1;
  }
  $4 = $5 >> 8;
  if (!($5 & 1)) {
   break label$1;
  }
  $4 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$2 >> 2], $4);
 }
 $0 = HEAP32[$0 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1, $2 + $4 | 0, $5 & 2 ? $3 : 2);
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper__2c_20unsigned_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper__2c_20unsigned_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper__2c_20unsigned_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper__2c_20unsigned_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Island__Add_28b2Contact__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAP32[$0 + 36 >> 2] >= HEAP32[$0 + 44 >> 2]) {
  __assert_fail(1318, 7410, 66, 10196);
  wasm2js_trap();
 }
 $3 = HEAP32[$2 + 8 >> 2];
 $4 = HEAP32[$0 + 12 >> 2];
 $1 = HEAP32[$0 + 36 >> 2];
 HEAP32[$0 + 36 >> 2] = $1 + 1;
 HEAP32[($1 << 2) + $4 >> 2] = $3;
 __stack_pointer = $2 + 16 | 0;
}

function b2DistanceProxy__b2DistanceProxy_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = $0 + 16 | 0;
 $2 = $0;
 while (1) {
  b2Vec2__b2Vec2_28_29($2);
  $2 = $2 + 8 | 0;
  if (($3 | 0) != ($2 | 0)) {
   continue;
  }
  break;
 }
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAPF32[$0 + 24 >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Manifold__b2Manifold_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = $0 + 40 | 0;
 $2 = $0;
 while (1) {
  b2ManifoldPoint__b2ManifoldPoint_28_29($2);
  $2 = $2 + 20 | 0;
  if (($3 | 0) != ($2 | 0)) {
   continue;
  }
  break;
 }
 b2Vec2__b2Vec2_28_29($0 + 40 | 0);
 b2Vec2__b2Vec2_28_29($0 + 48 | 0);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function void_20emscripten__wrapper_b2ContactListener___call_void_2c_20unsigned_20int___28char_20const__2c_20unsigned_20int__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 void_20emscripten__val__call_void_2c_20unsigned_20int___28char_20const__2c_20unsigned_20int__29_20const(HEAP32[$3 + 12 >> 2] + 8 | 0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function bool_20emscripten__internal__MemberAccess_b2BodyDef_2c_20bool___getWire_b2BodyDef__28bool_20b2BodyDef____20const__2c_20b2BodyDef_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29(HEAP8[HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] & 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function b2Island__Add_28b2Joint__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAP32[$0 + 32 >> 2] >= HEAP32[$0 + 48 >> 2]) {
  __assert_fail(1287, 7410, 72, 10196);
  wasm2js_trap();
 }
 $3 = HEAP32[$2 + 8 >> 2];
 $4 = HEAP32[$0 + 16 >> 2];
 $1 = HEAP32[$0 + 32 >> 2];
 HEAP32[$0 + 32 >> 2] = $1 + 1;
 HEAP32[($1 << 2) + $4 >> 2] = $3;
 __stack_pointer = $2 + 16 | 0;
}

function void_20_28__emscripten__internal__getContext_void_20_28__29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29__28void_20_28__20const__29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29_29_29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_______get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointer_emscripten__ret_val____ArgTypeList_b2RayCastCallbackWrapper__2c_20emscripten__val_____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2RayCastCallbackWrapper__2c_20emscripten__val______get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointer_emscripten__ret_val____ArgTypeList_b2ContactListenerWrapper__2c_20emscripten__val_____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper__2c_20emscripten__val______get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function decltype_28fp_29_20emscripten__select_overload_void_20_28float_2c_20float_29_2c_20b2PolygonShape__28void_20_28b2PolygonShape____29_28float_2c_20float_29_29($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = HEAP32[$1 >> 2];
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $3;
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = $1;
 $1 = HEAP32[$0 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$0 >> 2] = $1;
}

function char__20std____2__copy_5babi_v160004_5d_char_20const__2c_20char___28char_20const__2c_20char_20const__2c_20char__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 std____2__pair_char_20const__2c_20char___20std____2____copy_5babi_v160004_5d_std____2___ClassicAlgPolicy_2c_20char_20const__2c_20char_20const__2c_20char___28char_20const__2c_20char_20const__2c_20char__29($3 + 8 | 0, $0, $1, $2);
 __stack_pointer = $3 + 16 | 0;
 $2 = HEAP32[$3 + 12 >> 2];
 return $2;
}

function b2Min_28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Vec2__b2Vec2_28float_2c_20float_29($0, float_20b2Min_float__28float_2c_20float_29(HEAPF32[HEAP32[$3 + 12 >> 2] >> 2], HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]), float_20b2Min_float__28float_2c_20float_29(HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2], HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function b2Max_28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Vec2__b2Vec2_28float_2c_20float_29($0, float_20b2Max_float__28float_2c_20float_29(HEAPF32[HEAP32[$3 + 12 >> 2] >> 2], HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]), float_20b2Max_float__28float_2c_20float_29(HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2], HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function b2Fixture__SetFilterData_28b2Filter_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 $3 = HEAPU16[$1 >> 1] | HEAPU16[$1 + 2 >> 1] << 16;
 HEAP16[$0 + 32 >> 1] = $3;
 HEAP16[$0 + 34 >> 1] = $3 >>> 16;
 HEAP16[$0 + 36 >> 1] = HEAPU16[$1 + 4 >> 1];
 b2Fixture__Refilter_28_29($0);
 __stack_pointer = $2 + 16 | 0;
}

function void_20b2BroadPhase__RayCast_b2WorldRayCastWrapper__28b2WorldRayCastWrapper__2c_20b2RayCastInput_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 void_20b2DynamicTree__RayCast_b2WorldRayCastWrapper__28b2WorldRayCastWrapper__2c_20b2RayCastInput_20const__29_20const(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function void_20_28__emscripten__internal__getContext_void_20_28__29_28b2Body__2c_20b2MassData_20const__29__28void_20_28__20const__29_28b2Body__2c_20b2MassData_20const__29_29_29_28b2Body__2c_20b2MassData_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Color__b2Color_28float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAPF32[$5 + 24 >> 2] = $1;
 HEAPF32[$5 + 20 >> 2] = $2;
 HEAPF32[$5 + 16 >> 2] = $3;
 HEAPF32[$5 + 12 >> 2] = $4;
 $0 = HEAP32[$5 + 28 >> 2];
 HEAPF32[$0 >> 2] = HEAPF32[$5 + 24 >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[$5 + 20 >> 2];
 HEAPF32[$0 + 8 >> 2] = HEAPF32[$5 + 16 >> 2];
 HEAPF32[$0 + 12 >> 2] = HEAPF32[$5 + 12 >> 2];
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointer_emscripten__ret_val____ArgTypeList_b2QueryCallbackWrapper__2c_20emscripten__val_____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2QueryCallbackWrapper__2c_20emscripten__val______get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Vec2__20emscripten__internal__MemberAccess_b2AABB_2c_20b2Vec2___getWire_b2AABB__28b2Vec2_20b2AABB____20const__2c_20b2AABB_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29(HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function b2RevoluteJoint__SetMaxMotorTorque_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAPF32[$2 + 8 >> 2] != HEAPF32[$0 + 104 >> 2]) {
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 48 >> 2], 1);
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 52 >> 2], 1);
  HEAPF32[$0 + 104 >> 2] = HEAPF32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
}

function b2PrismaticJoint__SetMaxMotorForce_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAPF32[$2 + 8 >> 2] != HEAPF32[$0 + 128 >> 2]) {
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 48 >> 2], 1);
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 52 >> 2], 1);
  HEAPF32[$0 + 128 >> 2] = HEAPF32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__wrapper_b2Draw____wrapper_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$0 >> 2] = 26448;
 if (HEAP8[$0 + 8 | 0] & 1) {
  void_20emscripten__wrapper_b2Draw___call_void__28char_20const__29_20const($0, 3085);
 }
 emscripten__val___val_28_29($0 + 12 | 0);
 b2Draw___b2Draw_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape_20const__2c_20b2FixtureDef____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20emscripten__internal__AllowedRawPointer_b2FixtureDef_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______destruct_at_end_5babi_v160004_5d_28b2Vec2__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______destruct_at_end_5babi_v160004_5d_28b2Vec2__2c_20std____2__integral_constant_bool_2c_20false__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__allocator_traits_std____2__allocator_int____deallocate_5babi_v160004_5d_28std____2__allocator_int___2c_20int__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 std____2__allocator_int___deallocate_5babi_v160004_5d_28int__2c_20unsigned_20long_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2JointDef__2c_20b2Body____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2JointDef__2c_20emscripten__internal__AllowedRawPointer_b2Body_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20float_2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20float_2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20b2Vec2_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20b2Vec2_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2WheelJoint__SetMaxMotorTorque_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAPF32[$2 + 8 >> 2] != HEAPF32[$0 + 120 >> 2]) {
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 48 >> 2], 1);
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 52 >> 2], 1);
  HEAPF32[$0 + 120 >> 2] = HEAPF32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
}

function b2Rot__Set_28float_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 wasm2js_i32$0 = $0, wasm2js_f32$0 = sinf(HEAPF32[$2 + 8 >> 2]), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
 wasm2js_i32$0 = $0, wasm2js_f32$0 = cosf(HEAPF32[$2 + 8 >> 2]), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
 __stack_pointer = $2 + 16 | 0;
}

function b2PrismaticJoint__SetMotorSpeed_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAPF32[$2 + 8 >> 2] != HEAPF32[$0 + 132 >> 2]) {
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 48 >> 2], 1);
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 52 >> 2], 1);
  HEAPF32[$0 + 132 >> 2] = HEAPF32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
}

function void_20emscripten__internal__raw_destructor_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____vector_5babi_v160004_5d_28_29($0);
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function operator__28float_2c_20b2Vec3_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAPF32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Vec3__b2Vec3_28float_2c_20float_2c_20float_29($0, Math_fround(HEAPF32[$3 + 12 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]), Math_fround(HEAPF32[$3 + 12 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2]), Math_fround(HEAPF32[$3 + 12 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 8 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function b2RevoluteJoint__SetMotorSpeed_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAPF32[$2 + 8 >> 2] != HEAPF32[$0 + 108 >> 2]) {
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 48 >> 2], 1);
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 52 >> 2], 1);
  HEAPF32[$0 + 108 >> 2] = HEAPF32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20float_2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20float_2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20bool___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20bool____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const__2c_20b2Vec2_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const__2c_20b2Vec2_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2AABB_20const__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2AABB_20const__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2MotorJoint__SetAngularOffset_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAPF32[$2 + 8 >> 2] != HEAPF32[$0 + 76 >> 2]) {
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 48 >> 2], 1);
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 52 >> 2], 1);
  HEAPF32[$0 + 76 >> 2] = HEAPF32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_std____2__vector_int_2c_20std____2__allocator_int______getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int_______get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20float_2c_20int_2c_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20float_2c_20int_2c_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape__2c_20float_2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape__2c_20float_2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2WheelJoint__SetMotorSpeed_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAPF32[$2 + 8 >> 2] != HEAPF32[$0 + 124 >> 2]) {
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 48 >> 2], 1);
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 52 >> 2], 1);
  HEAPF32[$0 + 124 >> 2] = HEAPF32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
}

function std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void________tree_node_destructor_5babi_v160004_5d_28std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_20bool_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP8[$0 + 4 | 0] = HEAP8[$3 + 7 | 0] & 1;
 return $0;
}

function emscripten__internal__Invoker_void_2c_20unsigned_20int___invoke_28void_20_28__29_28unsigned_20int_29_2c_20unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29(HEAP32[$2 + 8 >> 2]));
 __stack_pointer = $2 + 16 | 0;
}

function b2MouseJointDef__b2MouseJointDef_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2JointDef__b2JointDef_28_29($0);
 b2Vec2__b2Vec2_28_29($0 + 20 | 0);
 HEAP32[$0 >> 2] = 5;
 b2Vec2__Set_28float_2c_20float_29($0 + 20 | 0, Math_fround(0), Math_fround(0));
 HEAPF32[$0 + 28 >> 2] = 0;
 HEAPF32[$0 + 32 >> 2] = 5;
 HEAPF32[$0 + 36 >> 2] = .699999988079071;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__allocator_char___allocate_5babi_v160004_5d_28unsigned_20long_29($0, $1) {
 if (unsigned_20long_20std____2__allocator_traits_std____2__allocator_char____max_size_5babi_v160004_5d_std____2__allocator_char__2c_20void_2c_20void__28std____2__allocator_char__20const__29($0) >>> 0 < $1 >>> 0) {
  std____throw_bad_array_new_length_5babi_v160004_5d_28_29();
  wasm2js_trap();
 }
 return std____2____libcpp_allocate_5babi_v160004_5d_28unsigned_20long_2c_20unsigned_20long_29($1, 1);
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const__2c_20b2AABB_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const__2c_20b2AABB_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__enable_if_is_move_constructible_b2Vec2____value_20___20is_move_assignable_b2Vec2____value_2c_20void___type_20std____2__swap_5babi_v160004_5d_b2Vec2___28b2Vec2___2c_20b2Vec2___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] >> 2];
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 HEAP32[HEAP32[$2 + 8 >> 2] >> 2] = HEAP32[$2 + 4 >> 2];
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_v160004_5d_28unsigned_20long_29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_5babi_v160004_5d_28_29($0), 
 wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2AABB__2c_20b2AABB____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2AABB__2c_20emscripten__internal__AllowedRawPointer_b2AABB_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2PrismaticJoint__EnableMotor_28bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if ((HEAP8[$2 + 11 | 0] & 1) != (HEAP8[$0 + 137 | 0] & 1)) {
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 48 >> 2], 1);
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 52 >> 2], 1);
  HEAP8[$0 + 137 | 0] = HEAP8[$2 + 11 | 0] & 1;
 }
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_5__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_5__28embind_init_b2_28_29__$_5_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = embind_init_b2_28_29__$_5__operator_20void_20_28__29_28b2FixtureDef__2c_20b2Shape_20const__29_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2RevoluteJoint__EnableMotor_28bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if ((HEAP8[$2 + 11 | 0] & 1) != (HEAP8[$0 + 100 | 0] & 1)) {
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 48 >> 2], 1);
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 52 >> 2], 1);
  HEAP8[$0 + 100 | 0] = HEAP8[$2 + 11 | 0] & 1;
 }
 __stack_pointer = $2 + 16 | 0;
}

function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = $2 >>> 16 | 0;
 $5 = $0 >>> 16 | 0;
 $3 = (Math_imul($4, $5) + Math_imul($1, $2) | 0) + Math_imul($3, $0) | 0;
 $2 = $2 & 65535;
 $0 = $0 & 65535;
 $1 = Math_imul($2, $0);
 $2 = ($1 >>> 16 | 0) + Math_imul($2, $5) | 0;
 $3 = $3 + ($2 >>> 16 | 0) | 0;
 $2 = Math_imul($0, $4) + ($2 & 65535) | 0;
 i64toi32_i32$HIGH_BITS = $3 + ($2 >>> 16 | 0) | 0;
 return $1 & 65535 | $2 << 16;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint__2c_20b2Vec2_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint__2c_20b2Vec2_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint__2c_20b2Vec2_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint__2c_20b2Vec2_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Color__Set_28float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAPF32[$5 + 24 >> 2] = $1;
 HEAPF32[$5 + 20 >> 2] = $2;
 HEAPF32[$5 + 16 >> 2] = $3;
 HEAPF32[$5 + 12 >> 2] = $4;
 $0 = HEAP32[$5 + 28 >> 2];
 HEAPF32[$0 >> 2] = HEAPF32[$5 + 24 >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[$5 + 20 >> 2];
 HEAPF32[$0 + 8 >> 2] = HEAPF32[$5 + 16 >> 2];
 HEAPF32[$0 + 12 >> 2] = HEAPF32[$5 + 12 >> 2];
}

function sbrk($0) {
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = HEAP32[7476];
 $2 = $0 + 7 & -8;
 $0 = $1 + $2 | 0;
 label$1: {
  if ($0 >>> 0 <= $1 >>> 0 ? $2 : 0) {
   break label$1;
  }
  if (emscripten_get_heap_size() >>> 0 < $0 >>> 0) {
   if (!(emscripten_resize_heap($0 | 0) | 0)) {
    break label$1;
   }
  }
  HEAP32[7476] = $0;
  return $1;
 }
 wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 48, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return -1;
}

function emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_1__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_1__28embind_init_b2_28_29__$_1_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = embind_init_b2_28_29__$_1__operator_20void_20_28__29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function embind_init_b2_28_29__$_1____invoke_28b2AABB__2c_20b2AABB__2c_20b2AABB__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 embind_init_b2_28_29__$_1__operator_28_29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29_20const($3 + 3 | 0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_7__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_7__28embind_init_b2_28_29__$_7_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = embind_init_b2_28_29__$_7__operator_20void_20_28__29_28b2Body__2c_20b2MassData_20const__29_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20b2Filter_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20b2Filter_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2WheelJoint__EnableMotor_28bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if ((HEAP8[$2 + 11 | 0] & 1) != (HEAP8[$0 + 128 | 0] & 1)) {
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 48 >> 2], 1);
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 52 >> 2], 1);
  HEAP8[$0 + 128 | 0] = HEAP8[$2 + 11 | 0] & 1;
 }
 __stack_pointer = $2 + 16 | 0;
}

function b2RayCastCallbackWrapper__20emscripten__internal__wrapped_new_b2RayCastCallbackWrapper__2c_20b2RayCastCallbackWrapper_2c_20emscripten__val__28emscripten__val___29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(12);
 b2RayCastCallbackWrapper__b2RayCastCallbackWrapper___28emscripten__val___29($0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2ContactListenerWrapper__20emscripten__internal__wrapped_new_b2ContactListenerWrapper__2c_20b2ContactListenerWrapper_2c_20emscripten__val__28emscripten__val___29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(24);
 b2ContactListenerWrapper__b2ContactListenerWrapper___28emscripten__val___29($0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long___operator__5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long_____get_np_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointer_emscripten__ret_val____ArgTypeList_b2DrawWrapper__2c_20emscripten__val_____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2DrawWrapper__2c_20emscripten__val______get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__GenericBindingType_b2Filter___toWireType_28b2Filter_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(6);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAPU16[$2 >> 1] | HEAPU16[$2 + 2 >> 1] << 16;
 HEAP16[$0 >> 1] = $3;
 HEAP16[$0 + 2 >> 1] = $3 >>> 16;
 HEAP16[$0 + 4 >> 1] = HEAPU16[$2 + 4 >> 1];
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20_28__emscripten__internal__getContext_void_20_28__29_28b2RayCastCallbackWrapper__29__28void_20_28__20const__29_28b2RayCastCallbackWrapper__29_29_29_28b2RayCastCallbackWrapper__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20_28__emscripten__internal__getContext_void_20_28__29_28b2ContactListenerWrapper__29__28void_20_28__20const__29_28b2ContactListenerWrapper__29_29_29_28b2ContactListenerWrapper__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Shape_20const__20_28__emscripten__internal__getContext_b2Shape_20const__20_28__29_28b2FixtureDef__29__28b2Shape_20const__20_28__20const__29_28b2FixtureDef__29_29_29_28b2FixtureDef__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2MotorJoint__SetMaxTorque_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (!(b2IsValid_28float_29(HEAPF32[$2 + 8 >> 2]) & 1 & HEAPF32[$2 + 8 >> 2] >= Math_fround(0))) {
  __assert_fail(8279, 4249, 246, 8593);
  wasm2js_trap();
 }
 HEAPF32[$0 + 96 >> 2] = HEAPF32[$2 + 8 >> 2];
 __stack_pointer = $2 + 16 | 0;
}

function b2ContactListenerWrapper___b2ContactListenerWrapper_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 25996;
 std____2__set_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture______set_5babi_v160004_5d_28_29($0 + 12 | 0);
 emscripten__wrapper_b2ContactListener____wrapper_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function __cxxabiv1____pbase_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 var $3 = 0;
 $2 = 1;
 label$1: {
  if (!(HEAPU8[$0 + 8 | 0] & 24)) {
   $2 = 0;
   if (!$1) {
    break label$1;
   }
   $3 = __dynamic_cast($1, 23972, 24068, 0);
   if (!$3) {
    break label$1;
   }
   $2 = (HEAPU8[$3 + 8 | 0] & 24) != 0;
  }
  $2 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2);
 }
 return $2;
}

function emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_11__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_11__28embind_init_b2_28_29__$_11_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = embind_init_b2_28_29__$_11__operator_20void_20_28__29_28b2JointDef__2c_20b2Body__29_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Transform_20const__2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Transform_20const__2c_20emscripten__internal__AllowedRawPointer_b2Body_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Filter_20const__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Filter_20const__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2MotorJoint__SetMaxForce_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (!(b2IsValid_28float_29(HEAPF32[$2 + 8 >> 2]) & 1 & HEAPF32[$2 + 8 >> 2] >= Math_fround(0))) {
  __assert_fail(8315, 4249, 235, 9680);
  wasm2js_trap();
 }
 HEAPF32[$0 + 92 >> 2] = HEAPF32[$2 + 8 >> 2];
 __stack_pointer = $2 + 16 | 0;
}

function void_20emscripten__internal__writeGenericWireType_b2Transform__28emscripten__internal__GenericWireType___2c_20b2Transform__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[HEAP32[HEAP32[$2 + 12 >> 2] >> 2] >> 2] = HEAP32[$2 + 4 >> 2];
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 8;
 __stack_pointer = $2 + 16 | 0;
}

function std____2____split_buffer_int_2c_20std____2__allocator_int_______destruct_at_end_5babi_v160004_5d_28int__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 std____2____split_buffer_int_2c_20std____2__allocator_int_______destruct_at_end_5babi_v160004_5d_28int__2c_20std____2__integral_constant_bool_2c_20false__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function void_20_28__emscripten__internal__getContext_void_20_28__29_28b2JointDef__2c_20b2Body__29__28void_20_28__20const__29_28b2JointDef__2c_20b2Body__29_29_29_28b2JointDef__2c_20b2Body__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2MotorJointDef__b2MotorJointDef_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2JointDef__b2JointDef_28_29($0);
 b2Vec2__b2Vec2_28_29($0 + 20 | 0);
 HEAP32[$0 >> 2] = 11;
 b2Vec2__SetZero_28_29($0 + 20 | 0);
 HEAPF32[$0 + 28 >> 2] = 0;
 HEAPF32[$0 + 32 >> 2] = 1;
 HEAPF32[$0 + 36 >> 2] = 1;
 HEAPF32[$0 + 40 >> 2] = .30000001192092896;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Body__GetLinearVelocityFromLocalPoint_28b2Vec2_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($3, $1, HEAP32[$3 + 8 >> 2]);
 b2Body__GetLinearVelocityFromWorldPoint_28b2Vec2_20const__29_20const($0, $1, $3);
 __stack_pointer = $3 + 16 | 0;
}

function void_20emscripten__internal__raw_destructor_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int____29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  std____2__vector_int_2c_20std____2__allocator_int_____vector_5babi_v160004_5d_28_29($0);
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_v160004_5d_28char__29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_5babi_v160004_5d_28_29($0), 
 wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}

function emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_6__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_6__28embind_init_b2_28_29__$_6_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = embind_init_b2_28_29__$_6__operator_20b2Shape_20const__20_28__29_28b2FixtureDef__29_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_9__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_9__28embind_init_b2_28_29__$_9_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = embind_init_b2_28_29__$_9__operator_20void_20_28__29_28b2JointDef__2c_20b2Body__29_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Body__2c_20b2JointDef____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2JointDef_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Vec2_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Vec2_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Fixture__GetAABB_28int_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (!(HEAP32[$2 + 8 >> 2] < HEAP32[$0 + 28 >> 2] & HEAP32[$2 + 8 >> 2] >= 0)) {
  __assert_fail(2086, 7204, 346, 10877);
  wasm2js_trap();
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 28) | 0;
}

function void_20_28__emscripten__internal__getContext_void_20_28__29_28b2QueryCallbackWrapper__29__28void_20_28__20const__29_28b2QueryCallbackWrapper__29_29_29_28b2QueryCallbackWrapper__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2DynamicTree__GetUserData_28int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (!(HEAP32[$2 + 8 >> 2] < HEAP32[$0 + 12 >> 2] & HEAP32[$2 + 8 >> 2] >= 0)) {
  __assert_fail(1383, 7266, 167, 10295);
  wasm2js_trap();
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0) + 16 >> 2];
}

function void_20b2BroadPhase__Query_b2WorldQueryWrapper__28b2WorldQueryWrapper__2c_20b2AABB_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 void_20b2DynamicTree__Query_b2WorldQueryWrapper__28b2WorldQueryWrapper__2c_20b2AABB_20const__29_20const(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20float_2c_20bool___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20float_2c_20bool____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Body__SetAngularVelocity_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAP32[$0 >> 2]) {
  if (Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[$2 + 8 >> 2]) > Math_fround(0)) {
   b2Body__SetAwake_28bool_29($0, 1);
  }
  HEAPF32[$0 + 72 >> 2] = HEAPF32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
}

function std____2__enable_if_is_move_constructible_int____value_20___20is_move_assignable_int____value_2c_20void___type_20std____2__swap_5babi_v160004_5d_int___28int___2c_20int___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] >> 2];
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 HEAP32[HEAP32[$2 + 8 >> 2] >> 2] = HEAP32[$2 + 4 >> 2];
}
function std____2____compressed_pair_elem_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void____2c_201_2c_20true_____compressed_pair_elem_5babi_v160004_5d_28std____2____value_init_tag_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____allocator_5babi_v160004_5d_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2QueryCallbackWrapper__20emscripten__internal__wrapped_new_b2QueryCallbackWrapper__2c_20b2QueryCallbackWrapper_2c_20emscripten__val__28emscripten__val___29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(12);
 b2QueryCallbackWrapper__b2QueryCallbackWrapper___28emscripten__val___29($0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2DynamicTree__WasMoved_28int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (!(HEAP32[$2 + 8 >> 2] < HEAP32[$0 + 12 >> 2] & HEAP32[$2 + 8 >> 2] >= 0)) {
  __assert_fail(1383, 7266, 173, 9982);
  wasm2js_trap();
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0) + 36 | 0] & 1;
}

function std____2__operator___5babi_v160004_5d_28std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__2c_20std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__29_1($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 12 >> 2] >> 2] == HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
}

function std____2____compressed_pair_elem_std____2____tree_end_node_std____2____tree_node_base_void_____2c_200_2c_20false_____compressed_pair_elem_5babi_v160004_5d_28std____2____value_init_tag_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 std____2____tree_end_node_std____2____tree_node_base_void________tree_end_node_5babi_v160004_5d_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__wrapper_b2Draw___wrapper___28emscripten__val___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 b2Draw__b2Draw_28_29($0);
 emscripten__internal__WrapperBase__WrapperBase_28_29($0 + 8 | 0);
 HEAP32[$0 >> 2] = 26448;
 emscripten__val__val_28emscripten__val___29($0 + 12 | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_0__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_0__28embind_init_b2_28_29__$_0_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = embind_init_b2_28_29__$_0__operator_20void_20_28__29_28b2AABB__2c_20b2AABB__29_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2Body__2c_20b2MassData_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2MassData_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20bool___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20bool____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20unsigned_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20unsigned_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Shape__Type_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Shape__Type_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20emscripten__internal__writeGenericWireType_b2Color__28emscripten__internal__GenericWireType___2c_20b2Color__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[HEAP32[HEAP32[$2 + 12 >> 2] >> 2] >> 2] = HEAP32[$2 + 4 >> 2];
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 8;
 __stack_pointer = $2 + 16 | 0;
}

function std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______root_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______end_node_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_2__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_2__28embind_init_b2_28_29__$_2_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = embind_init_b2_28_29__$_2__operator_20void_20_28__29_28b2Shape__2c_20float_29_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Fixture__SetDensity_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (!(b2IsValid_28float_29(HEAPF32[$2 + 8 >> 2]) & 1 & HEAPF32[$2 + 8 >> 2] >= Math_fround(0))) {
  __assert_fail(8038, 7204, 300, 1131);
  wasm2js_trap();
 }
 HEAPF32[$0 >> 2] = HEAPF32[$2 + 8 >> 2];
 __stack_pointer = $2 + 16 | 0;
}

function std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long___operator__5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long_____get_np_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 + 16 | 0;
}

function emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_12__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_12__28embind_init_b2_28_29__$_12_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = embind_init_b2_28_29__$_12__operator_20b2Body__20_28__29_28b2JointDef__29_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_10__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_10__28embind_init_b2_28_29__$_10_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = embind_init_b2_28_29__$_10__operator_20b2Body__20_28__29_28b2JointDef__29_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20bool___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20bool____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2Body_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2RevoluteJoint__GetReactionForce_28float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAPF32[$3 + 8 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 b2Vec2__b2Vec2_28float_2c_20float_29($3, HEAPF32[$1 + 84 >> 2], HEAPF32[$1 + 88 >> 2]);
 operator__28float_2c_20b2Vec2_20const__29($0, HEAPF32[$3 + 8 >> 2], $3);
 __stack_pointer = $3 + 16 | 0;
}

function b2Dot_28b2Vec3_20const__2c_20b2Vec3_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return Math_fround(Math_fround(HEAPF32[HEAP32[$2 + 12 >> 2] + 8 >> 2] * HEAPF32[HEAP32[$2 + 8 >> 2] + 8 >> 2]) + Math_fround(Math_fround(HEAPF32[HEAP32[$2 + 12 >> 2] >> 2] * HEAPF32[HEAP32[$2 + 8 >> 2] >> 2]) + Math_fround(HEAPF32[HEAP32[$2 + 12 >> 2] + 4 >> 2] * HEAPF32[HEAP32[$2 + 8 >> 2] + 4 >> 2])));
}

function b2Body__SetSleepingAllowed_28bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 label$1: {
  if (HEAP8[$2 + 11 | 0] & 1) {
   HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] | 4;
   break label$1;
  }
  HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] & -5;
  b2Body__SetAwake_28bool_29($0, 1);
 }
 __stack_pointer = $2 + 16 | 0;
}

function void_20emscripten__internal__writeGenericWireType_b2Vec2__28emscripten__internal__GenericWireType___2c_20b2Vec2__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[HEAP32[HEAP32[$2 + 12 >> 2] >> 2] >> 2] = HEAP32[$2 + 4 >> 2];
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 8;
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_8__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_8__28embind_init_b2_28_29__$_8_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = embind_init_b2_28_29__$_8__operator_20unsigned_20int_20_28__29_28b2Body__29_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = HEAP32[$0 + 4 >> 2];
 $7 = $6 >> 8;
 if ($6 & 1) {
  $7 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$3 >> 2], $7);
 }
 $0 = HEAP32[$0 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3 + $7 | 0, $6 & 2 ? $4 : 2, $5);
}

function std____2__set_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____set_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______tree_28std____2__less_b2Fixture___20const__29($0, $1 + 11 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_unsigned_20int_2c_20emscripten__internal__AllowedRawPointer_b2Draw_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_unsigned_20int_2c_20emscripten__internal__AllowedRawPointer_b2Draw_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Shape__Type_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Shape__Type_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2WeldJoint__GetReactionForce_28float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAPF32[$3 + 8 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 b2Vec2__b2Vec2_28float_2c_20float_29($3, HEAPF32[$1 + 104 >> 2], HEAPF32[$1 + 108 >> 2]);
 operator__28float_2c_20b2Vec2_20const__29($0, HEAPF32[$3 + 8 >> 2], $3);
 __stack_pointer = $3 + 16 | 0;
}

function b2CircleShape__operator__28b2CircleShape_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 b2Shape__operator__28b2Shape_20const__29($0, HEAP32[$2 + 8 >> 2]);
 $1 = HEAP32[$2 + 8 >> 2];
 $3 = HEAP32[$1 + 16 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 16 >> 2] = $3;
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function void_20_28__emscripten__internal__getContext_void_20_28__29_28b2AABB__2c_20b2AABB__29__28void_20_28__20const__29_28b2AABB__2c_20b2AABB__29_29_29_28b2AABB__2c_20b2AABB__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_v160004_5d_28unsigned_20long_29($0) {
 var $1 = 0;
 $1 = 10;
 if ($0 >>> 0 >= 11) {
  $0 = unsigned_20long_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______align_it_5babi_v160004_5d_16ul__28unsigned_20long_29($0 + 1 | 0);
  $1 = $0;
  $0 = $0 - 1 | 0;
  $1 = ($0 | 0) == 11 ? $1 : $0;
 }
 return $1;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__BindingType_b2Vec2___2c_20void___fromWireType_28b2Vec2__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $3 = emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29(HEAP32[$2 + 12 >> 2]);
 $1 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 $3 = $1;
 $1 = $0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$1 + 4 >> 2] = $4;
 __stack_pointer = $2 + 16 | 0;
}

function b2PulleyJoint__GetReactionForce_28float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAPF32[$3 + 8 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($3, HEAPF32[$1 + 116 >> 2], $1 + 136 | 0);
 operator__28float_2c_20b2Vec2_20const__29($0, HEAPF32[$3 + 8 >> 2], $3);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint__2c_20bool___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint__2c_20bool____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2BodyType___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2BodyType____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2JointType_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2JointType_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Contact__ResetRestitution_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 wasm2js_i32$0 = $0, wasm2js_f32$0 = b2MixRestitution_28float_2c_20float_29(HEAPF32[HEAP32[$0 + 48 >> 2] + 20 >> 2], HEAPF32[HEAP32[$0 + 52 >> 2] + 20 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 140 >> 2] = wasm2js_f32$0;
 __stack_pointer = $1 + 16 | 0;
}

function void_20_28__emscripten__internal__getContext_void_20_28__29_28b2Shape__2c_20float_29__28void_20_28__20const__29_28b2Shape__2c_20float_29_29_29_28b2Shape__2c_20float_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__enum__b2Shape__Type___value_28char_20const__2c_20b2Shape__Type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 _embind_register_enum_value(emscripten__internal__TypeID_b2Shape__Type_2c_20void___get_28_29() | 0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function b2GearJoint__GetReactionForce_28float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAPF32[$3 + 8 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($3, HEAPF32[$1 + 156 >> 2], $1 + 240 | 0);
 operator__28float_2c_20b2Vec2_20const__29($0, HEAPF32[$3 + 8 >> 2], $3);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__WithPolicies____ArgTypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__remove_class_decltype_28_embind_init_b2_28_29__$_3__operator_28_29_29___type__20emscripten__optional_override_embind_init_b2_28_29__$_3__28embind_init_b2_28_29__$_3_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = embind_init_b2_28_29__$_3__operator_20float_20_28__29_28b2Shape__29_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $1, $2, $3);
 }
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2BodyType_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2BodyType_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2DynamicTree__ClearMoved_28int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (!(HEAP32[$2 + 8 >> 2] < HEAP32[$0 + 12 >> 2] & HEAP32[$2 + 8 >> 2] >= 0)) {
  __assert_fail(1383, 7266, 179, 9991);
  wasm2js_trap();
 }
 HEAP8[(HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0) + 36 | 0] = 0;
 __stack_pointer = $2 + 16 | 0;
}

function std____2__operator___5babi_v160004_5d_28std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__2c_20std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 12 >> 2] >> 2] == HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20bool___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20bool____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Contact__ResetFriction_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 wasm2js_i32$0 = $0, wasm2js_f32$0 = b2MixFriction_28float_2c_20float_29(HEAPF32[HEAP32[$0 + 48 >> 2] + 16 >> 2], HEAPF32[HEAP32[$0 + 52 >> 2] + 16 >> 2]), 
 HEAPF32[wasm2js_i32$0 + 136 >> 2] = wasm2js_f32$0;
 __stack_pointer = $1 + 16 | 0;
}

function unsigned_20int_20_28__emscripten__internal__getContext_unsigned_20int_20_28__29_28b2Body__29__28unsigned_20int_20_28__20const__29_28b2Body__29_29_29_28b2Body__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2____compressed_pair_elem_std____2____tree_node_b2Fixture__2c_20void____2c_200_2c_20false_____compressed_pair_elem_5babi_v160004_5d_std____2____tree_node_b2Fixture__2c_20void_____2c_20void__28std____2____tree_node_b2Fixture__2c_20void_____29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Vec2_2c_20b2Transform_20const__2c_20b2Vec2_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_2c_20b2Transform_20const__2c_20b2Vec2_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20bool___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20bool____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2World_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2World_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__enum__b2BodyType___value_28char_20const__2c_20b2BodyType_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 _embind_register_enum_value(emscripten__internal__TypeID_b2BodyType_2c_20void___get_28_29() | 0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function emscripten__class__b2RayCastCallback_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2RayCastCallback_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2RayCastCallbackWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2RayCastCallbackWrapper__29__operator_20void_20_28__29_28b2RayCastCallbackWrapper__29_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 478;
}

function emscripten__class__b2ContactListener_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2ContactListener_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2ContactListenerWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2ContactListenerWrapper__29__operator_20void_20_28__29_28b2ContactListenerWrapper__29_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 486;
}

function b2Sweep__Normalize_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAPF32[$1 + 8 >> 2] = 6.2831854820251465;
 HEAPF32[$1 + 4 >> 2] = HEAPF32[$1 + 8 >> 2] * Math_fround(Math_floor(Math_fround(HEAPF32[$0 + 24 >> 2] / HEAPF32[$1 + 8 >> 2])));
 HEAPF32[$0 + 24 >> 2] = HEAPF32[$0 + 24 >> 2] - HEAPF32[$1 + 4 >> 2];
 HEAPF32[$0 + 28 >> 2] = HEAPF32[$0 + 28 >> 2] - HEAPF32[$1 + 4 >> 2];
}

function b2DynamicTree__GetFatAABB_28int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (!(HEAP32[$2 + 8 >> 2] < HEAP32[$0 + 12 >> 2] & HEAP32[$2 + 8 >> 2] >= 0)) {
  __assert_fail(1383, 7266, 185, 10885);
  wasm2js_trap();
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$0 + 4 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 40) | 0;
}

function b2WorldManifold__b2WorldManifold_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 b2Vec2__b2Vec2_28_29($0);
 $0 = $0 + 8 | 0;
 $2 = $0 + 16 | 0;
 while (1) {
  b2Vec2__b2Vec2_28_29($0);
  $0 = $0 + 8 | 0;
  if (($2 | 0) != ($0 | 0)) {
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function b2StackAllocator___b2StackAllocator_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$0 + 102400 >> 2]) {
  __assert_fail(12084, 5377, 36, 3784);
  wasm2js_trap();
 }
 if (HEAP32[$0 + 102796 >> 2]) {
  __assert_fail(12115, 5377, 37, 3784);
  wasm2js_trap();
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20bool___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20bool____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2PolygonAndCircleContact__Destroy_28b2Contact__2c_20b2BlockAllocator__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0) | 0;
 b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 148);
 __stack_pointer = $2 + 16 | 0;
}

function std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_____capacity_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = HEAP32[std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______end_cap_5babi_v160004_5d_28_29_20const($0) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return $2 - HEAP32[$0 >> 2] >> 3;
}

function emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $0 = HEAP32[$2 >> 2];
 $4 = HEAP32[$2 + 4 >> 2];
 $2 = $0;
 $0 = $3;
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $4;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2ChainAndPolygonContact__Destroy_28b2Contact__2c_20b2BlockAllocator__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0) | 0;
 b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 148);
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2World_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2World_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2EdgeAndPolygonContact__Destroy_28b2Contact__2c_20b2BlockAllocator__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0) | 0;
 b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 148);
 __stack_pointer = $2 + 16 | 0;
}

function b2ChainAndCircleContact__Destroy_28b2Contact__2c_20b2BlockAllocator__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0) | 0;
 b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 148);
 __stack_pointer = $2 + 16 | 0;
}

function operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Vec2__b2Vec2_28float_2c_20float_29($0, Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] >> 2] + HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]), Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2] + HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__GenericBindingType_b2Rot___toWireType_28b2Rot_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $0 = HEAP32[$2 >> 2];
 $4 = HEAP32[$2 + 4 >> 2];
 $2 = $0;
 $0 = $3;
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $4;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2EdgeAndCircleContact__Destroy_28b2Contact__2c_20b2BlockAllocator__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0) | 0;
 b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 148);
 __stack_pointer = $2 + 16 | 0;
}

function void_20_28__emscripten__internal__getContext_void_20_28__29_28b2DrawWrapper__29__28void_20_28__20const__29_28b2DrawWrapper__29_29_29_28b2DrawWrapper__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Body__GetInertia_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0);
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = HEAPF32[$0 + 124 >> 2];
 $3 = Math_fround(HEAPF32[$0 + 116 >> 2] * b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($0 + 28 | 0, $0 + 28 | 0));
 __stack_pointer = $1 + 16 | 0;
 return Math_fround(Math_fround($3 + $2));
}

function b2Body__20_28__emscripten__internal__getContext_b2Body__20_28__29_28b2JointDef__29__28b2Body__20_28__20const__29_28b2JointDef__29_29_29_28b2JointDef__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Vec2__b2Vec2_28float_2c_20float_29($0, Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] >> 2] - HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]), Math_fround(HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2] - HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function b2DistanceProxy__GetVertex_28int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (!(HEAP32[$2 + 8 >> 2] < HEAP32[$0 + 20 >> 2] & HEAP32[$2 + 8 >> 2] >= 0)) {
  __assert_fail(2056, 7340, 131, 1786);
  wasm2js_trap();
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$0 + 16 >> 2] + (HEAP32[$2 + 8 >> 2] << 3) | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2Shape__2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Shape__2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______root_ptr_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______end_node_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__allocator_b2Vec2___deallocate_5babi_v160004_5d_28b2Vec2__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 std____2____libcpp_deallocate_5babi_v160004_5d_28void__2c_20unsigned_20long_2c_20unsigned_20long_29(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2] << 3, 4);
 __stack_pointer = $3 + 16 | 0;
}

function std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long_____tree_const_iterator_5babi_v160004_5d_28std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $1;
 HEAP32[$2 + 8 >> 2] = $0;
 $0 = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 12 >> 2];
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__GenericBindingType_b2Vec2___toWireType_28b2Vec2___29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = operator_20new_28unsigned_20long_29(8);
 $2 = HEAP32[$1 + 12 >> 2];
 $0 = HEAP32[$2 >> 2];
 $4 = HEAP32[$2 + 4 >> 2];
 $2 = $0;
 $0 = $3;
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $4;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__class__b2QueryCallback_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2QueryCallback_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2QueryCallbackWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2QueryCallbackWrapper__29__operator_20void_20_28__29_28b2QueryCallbackWrapper__29_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 473;
}

function b2QueryCallbackWrapper__ReportFixture_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = bool_20emscripten__wrapper_b2QueryCallback___call_bool_2c_20unsigned_20int___28char_20const__2c_20unsigned_20int__29_20const(HEAP32[$2 + 12 >> 2], 8996, $2 + 8 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function b2PolygonContact__Destroy_28b2Contact__2c_20b2BlockAllocator__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0) | 0;
 b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 148);
 __stack_pointer = $2 + 16 | 0;
}

function std____2____libcpp_deallocate_5babi_v160004_5d_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 void_20std____2____do_deallocate_handle_size_5babi_v160004_5d___28void__2c_20unsigned_20long_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_unsigned_20int_2c_20b2Body____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_unsigned_20int_2c_20emscripten__internal__AllowedRawPointer_b2Body_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Vec2_20b2PrismaticJointDef_____20emscripten__internal__getContext_b2Vec2_20b2PrismaticJointDef_____28b2Vec2_20b2PrismaticJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2CircleContact__Destroy_28b2Contact__2c_20b2BlockAllocator__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0) | 0;
 b2BlockAllocator__Free_28void__2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 148);
 __stack_pointer = $2 + 16 | 0;
}

function __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = HEAP32[$0 + 4 >> 2];
 $6 = $5 >> 8;
 if ($5 & 1) {
  $6 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$2 >> 2], $6);
 }
 $0 = HEAP32[$0 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2 + $6 | 0, $5 & 2 ? $3 : 2, $4);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____c_str_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____data_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function unsigned_20short_20b2Filter_____20emscripten__internal__getContext_unsigned_20short_20b2Filter_____28unsigned_20short_20b2Filter____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2____split_buffer_int_2c_20std____2__allocator_int_____capacity_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = HEAP32[std____2____split_buffer_int_2c_20std____2__allocator_int_______end_cap_5babi_v160004_5d_28_29_20const($0) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return $2 - HEAP32[$0 >> 2] >> 2;
}

function float_20b2PrismaticJointDef_____20emscripten__internal__getContext_float_20b2PrismaticJointDef_____28float_20b2PrismaticJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20b2RevoluteJointDef_____20emscripten__internal__getContext_b2Vec2_20b2RevoluteJointDef_____28b2Vec2_20b2RevoluteJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20b2DistanceJointDef_____20emscripten__internal__getContext_b2Vec2_20b2DistanceJointDef_____28b2Vec2_20b2DistanceJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2__allocator_int___deallocate_5babi_v160004_5d_28int__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 std____2____libcpp_deallocate_5babi_v160004_5d_28void__2c_20unsigned_20long_2c_20unsigned_20long_29(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2] << 2, 4);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20std____2__allocator_traits_std____2__allocator_b2Vec2____destroy_5babi_v160004_5d_b2Vec2_2c_20void__28std____2__allocator_b2Vec2___2c_20b2Vec2__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 std____2__allocator_b2Vec2___destroy_5babi_v160004_5d_28b2Vec2__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function void_20std____2__allocator_b2Vec2___construct_5babi_v160004_5d_b2Vec2_2c_20b2Vec2_20const___28b2Vec2__2c_20b2Vec2_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = HEAP32[$3 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
}

function float_20b2RevoluteJointDef_____20emscripten__internal__getContext_float_20b2RevoluteJointDef_____28float_20b2RevoluteJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20b2DistanceJointDef_____20emscripten__internal__getContext_float_20b2DistanceJointDef_____28float_20b2DistanceJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function embind_init_b2_28_29__$_1__operator_28_29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29_20const($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 b2AABB__Combine_28b2AABB_20const__2c_20b2AABB_20const__29(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function bool_20b2PrismaticJointDef_____20emscripten__internal__getContext_bool_20b2PrismaticJointDef_____28bool_20b2PrismaticJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Joint____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Joint_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____capacity_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = HEAP32[std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______end_cap_5babi_v160004_5d_28_29_20const($0) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return $2 - HEAP32[$0 >> 2] >> 3;
}

function float_20b2Clamp_float__28float_2c_20float_2c_20float_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAPF32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $0 = float_20b2Max_float__28float_2c_20float_29(HEAPF32[$3 + 8 >> 2], float_20b2Min_float__28float_2c_20float_29(HEAPF32[$3 + 12 >> 2], HEAPF32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function float_20_28__emscripten__internal__getContext_float_20_28__29_28b2Shape__29__28float_20_28__20const__29_28b2Shape__29_29_29_28b2Shape__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function bool_20b2RevoluteJointDef_____20emscripten__internal__getContext_bool_20b2RevoluteJointDef_____28bool_20b2RevoluteJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2World__2c_20b2Vec2_____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2World__2c_20b2Vec2______get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int__2c_20int__2c_20b2Color_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20unsigned_20int__2c_20int__2c_20b2Color_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function unsigned_20long_20std____2__allocator_traits_std____2__allocator_b2Vec2____max_size_5babi_v160004_5d_std____2__allocator_b2Vec2__2c_20void__28std____2__allocator_b2Vec2__20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__allocator_b2Vec2___max_size_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____allocator_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2____non_trivial_if_true_2c_20std____2__allocator_std____2____tree_node_b2Fixture__2c_20void________non_trivial_if_5babi_v160004_5d_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Vec2_20b2WheelJointDef_____20emscripten__internal__getContext_b2Vec2_20b2WheelJointDef_____28b2Vec2_20b2WheelJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20b2RayCastOutput_____20emscripten__internal__getContext_b2Vec2_20b2RayCastOutput_____28b2Vec2_20b2RayCastOutput____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20b2MouseJointDef_____20emscripten__internal__getContext_b2Vec2_20b2MouseJointDef_____28b2Vec2_20b2MouseJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20b2MotorJointDef_____20emscripten__internal__getContext_b2Vec2_20b2MotorJointDef_____28b2Vec2_20b2MotorJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2PulleyJoint__ShiftOrigin_28b2Vec2_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 b2Vec2__operator___28b2Vec2_20const__29_1($0 + 68 | 0, HEAP32[$2 + 8 >> 2]);
 b2Vec2__operator___28b2Vec2_20const__29_1($0 + 76 | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function b2JointType_20b2JointDef_____20emscripten__internal__getContext_b2JointType_20b2JointDef_____28b2JointType_20b2JointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2DrawWrapper__DrawTransform_28b2Transform_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 void_20emscripten__wrapper_b2Draw___call_void_2c_20b2Transform_20const___28char_20const__2c_20b2Transform_20const__29_20const(HEAP32[$2 + 12 >> 2], 6797, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____value_comp_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_unsigned_20long_2c_20std____2__less_b2Fixture_____second_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2] + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Vec3__operator___28b2Vec3_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + HEAPF32[HEAP32[$2 + 8 >> 2] >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] + HEAPF32[HEAP32[$2 + 8 >> 2] + 4 >> 2];
 HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] + HEAPF32[HEAP32[$2 + 8 >> 2] + 8 >> 2];
}

function b2GrowableStack_int_2c_20256___Pop_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if (HEAP32[$0 + 1028 >> 2] <= 0) {
  __assert_fail(11959, 7062, 72, 6115);
  wasm2js_trap();
 }
 HEAP32[$0 + 1028 >> 2] = HEAP32[$0 + 1028 >> 2] - 1;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[HEAP32[$0 >> 2] + (HEAP32[$0 + 1028 >> 2] << 2) >> 2];
}

function b2Fixture__b2Fixture_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Filter__b2Filter_28_29($0 + 32 | 0);
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAPF32[$0 >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2DistanceJoint__GetReactionForce_28float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAPF32[$3 + 8 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($0, Math_fround(HEAPF32[$3 + 8 >> 2] * HEAPF32[$1 + 100 >> 2]), $1 + 116 | 0);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2PrismaticJointDef____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2PrismaticJointDef_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WireTypePack_b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const____operator_20void_20const__28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__array_emscripten__internal__GenericWireType_2c_204ul___data_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2DrawWrapper__20emscripten__internal__wrapped_new_b2DrawWrapper__2c_20b2DrawWrapper_2c_20emscripten__val__28emscripten__val___29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(16);
 b2DrawWrapper__b2DrawWrapper___28emscripten__val___29($0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function float_20b2WheelJointDef_____20emscripten__internal__getContext_float_20b2WheelJointDef_____28float_20b2WheelJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20b2RayCastOutput_____20emscripten__internal__getContext_float_20b2RayCastOutput_____28float_20b2RayCastOutput____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20b2MouseJointDef_____20emscripten__internal__getContext_float_20b2MouseJointDef_____28float_20b2MouseJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20b2MotorJointDef_____20emscripten__internal__getContext_float_20b2MotorJointDef_____28float_20b2MotorJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WireTypePack_unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float____operator_20void_20const__28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__array_emscripten__internal__GenericWireType_2c_204ul___data_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Vec2_20b2WeldJointDef_____20emscripten__internal__getContext_b2Vec2_20b2WeldJointDef_____28b2Vec2_20b2WeldJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20b2RopeJointDef_____20emscripten__internal__getContext_b2Vec2_20b2RopeJointDef_____28b2Vec2_20b2RopeJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20b2RayCastInput_____20emscripten__internal__getContext_b2Vec2_20b2RayCastInput_____28b2Vec2_20b2RayCastInput____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Shape__Type_20b2Shape_____20emscripten__internal__getContext_b2Shape__Type_20b2Shape_____28b2Shape__Type_20b2Shape____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2MotorJoint__GetAnchorB_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $3 = b2Body__GetPosition_28_29_20const(HEAP32[HEAP32[$2 + 12 >> 2] + 52 >> 2]);
 $1 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 $3 = $1;
 $1 = $0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$1 + 4 >> 2] = $4;
 __stack_pointer = $2 + 16 | 0;
}

function b2MotorJoint__GetAnchorA_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $3 = b2Body__GetPosition_28_29_20const(HEAP32[HEAP32[$2 + 12 >> 2] + 48 >> 2]);
 $1 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 $3 = $1;
 $1 = $0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$1 + 4 >> 2] = $4;
 __stack_pointer = $2 + 16 | 0;
}

function b2Filter_20b2FixtureDef_____20emscripten__internal__getContext_b2Filter_20b2FixtureDef_____28b2Filter_20b2FixtureDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2DistanceSquared_28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $1) {
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $3 = b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($2, $2);
 __stack_pointer = $2 + 16 | 0;
 return $3;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_float_2c_20b2Shape____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Shape_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2RevoluteJointDef____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2RevoluteJointDef_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2DistanceJointDef____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2DistanceJointDef_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__Invoker_b2PrismaticJointDef____invoke_28b2PrismaticJointDef__20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__BindingType_b2PrismaticJointDef__2c_20void___toWireType_28b2PrismaticJointDef__29(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]() | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2RayCastCallbackWrapper__28b2RayCastCallbackWrapper__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2RayCastCallbackWrapper__28b2RayCastCallbackWrapper_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2ContactListenerWrapper__28b2ContactListenerWrapper__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2ContactListenerWrapper__28b2ContactListenerWrapper_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2FixtureDef__b2FixtureDef_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Filter__b2Filter_28_29($0 + 22 | 0);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAPF32[$0 + 8 >> 2] = .20000000298023224;
 HEAPF32[$0 + 12 >> 2] = 0;
 HEAPF32[$0 + 16 >> 2] = 0;
 HEAP8[$0 + 20 | 0] = 0;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_short_pointer_5babi_v160004_5d_28_29($0) {
 return std____2__pointer_traits_char____pointer_to_5babi_v160004_5d_28char__29(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_5babi_v160004_5d_28_29($0));
}

function pad($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 256 | 0;
 __stack_pointer = $5;
 if (!($4 & 73728 | ($2 | 0) <= ($3 | 0))) {
  $3 = $2 - $3 | 0;
  $2 = $3 >>> 0 < 256;
  __memset($5, $1 & 255, $2 ? $3 : 256);
  if (!$2) {
   while (1) {
    out($0, $5, 256);
    $3 = $3 - 256 | 0;
    if ($3 >>> 0 > 255) {
     continue;
    }
    break;
   }
  }
  out($0, $5, $3);
 }
 __stack_pointer = $5 + 256 | 0;
}

function float_20b2WeldJointDef_____20emscripten__internal__getContext_float_20b2WeldJointDef_____28float_20b2WeldJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20b2RopeJointDef_____20emscripten__internal__getContext_float_20b2RopeJointDef_____28float_20b2RopeJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20b2RayCastInput_____20emscripten__internal__getContext_float_20b2RayCastInput_____28float_20b2RayCastInput____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function bool_20b2WheelJointDef_____20emscripten__internal__getContext_bool_20b2WheelJointDef_____28bool_20b2WheelJointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20b2CircleShape_____20emscripten__internal__getContext_b2Vec2_20b2CircleShape_____28b2Vec2_20b2CircleShape____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2RopeJoint__GetReactionForce_28float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAPF32[$3 + 8 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 operator__28float_2c_20b2Vec2_20const__29($0, Math_fround(HEAPF32[$3 + 8 >> 2] * HEAPF32[$1 + 92 >> 2]), $1 + 104 | 0);
 __stack_pointer = $3 + 16 | 0;
}

function b2BodyType_20b2BodyDef_____20emscripten__internal__getContext_b2BodyType_20b2BodyDef_____28b2BodyType_20b2BodyDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2AABB__GetPerimeter_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAPF32[$1 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] - HEAPF32[$0 >> 2];
 HEAPF32[$1 + 4 >> 2] = HEAPF32[$0 + 12 >> 2] - HEAPF32[$0 + 4 >> 2];
 $2 = Math_fround(HEAPF32[$1 + 8 >> 2] + HEAPF32[$1 + 4 >> 2]);
 return Math_fround(Math_fround($2 + $2));
}

function embind_init_b2_28_29__$_5____invoke_28b2FixtureDef__2c_20b2Shape_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 embind_init_b2_28_29__$_5__operator_28_29_28b2FixtureDef__2c_20b2Shape_20const__29_20const($2 + 7 | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__set_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture______set_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture________tree_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_____size_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_unsigned_20long_2c_20std____2__less_b2Fixture_____first_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2] + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__Invoker_b2RevoluteJointDef____invoke_28b2RevoluteJointDef__20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__BindingType_b2RevoluteJointDef__2c_20void___toWireType_28b2RevoluteJointDef__29(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]() | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__Invoker_b2DistanceJointDef____invoke_28b2DistanceJointDef__20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__BindingType_b2DistanceJointDef__2c_20void___toWireType_28b2DistanceJointDef__29(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]() | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int____capacity_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = HEAP32[std____2__vector_int_2c_20std____2__allocator_int______end_cap_5babi_v160004_5d_28_29_20const($0) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return $2 - HEAP32[$0 >> 2] >> 2;
}

function b2Fixture__SetSensor_28bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if ((HEAP8[$2 + 11 | 0] & 1) != (HEAP8[$0 + 38 | 0] & 1)) {
  b2Body__SetAwake_28bool_29(HEAP32[$0 + 8 >> 2], 1);
  HEAP8[$0 + 38 | 0] = HEAP8[$2 + 11 | 0] & 1;
 }
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2WheelJointDef____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2WheelJointDef_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2MouseJointDef____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2MouseJointDef_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2MotorJointDef____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2MotorJointDef_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Cross_28float_2c_20b2Vec2_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAPF32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Vec2__b2Vec2_28float_2c_20float_29($0, Math_fround(Math_fround(-HEAPF32[$3 + 12 >> 2]) * HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2]), Math_fround(HEAPF32[$3 + 12 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function b2Cross_28b2Vec2_20const__2c_20float_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAPF32[$3 + 8 >> 2] = $2;
 b2Vec2__b2Vec2_28float_2c_20float_29($0, Math_fround(HEAPF32[$3 + 8 >> 2] * HEAPF32[HEAP32[$3 + 12 >> 2] + 4 >> 2]), Math_fround(Math_fround(-HEAPF32[$3 + 8 >> 2]) * HEAPF32[HEAP32[$3 + 12 >> 2] >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function unsigned_20long_20std____2__allocator_traits_std____2__allocator_int____max_size_5babi_v160004_5d_std____2__allocator_int__2c_20void__28std____2__allocator_int__20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__allocator_int___max_size_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20std____2__allocator_traits_std____2__allocator_int____destroy_5babi_v160004_5d_int_2c_20void__28std____2__allocator_int___2c_20int__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 std____2__allocator_int___destroy_5babi_v160004_5d_28int__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function getint($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 if (!isdigit(HEAP8[HEAP32[$0 >> 2]])) {
  return 0;
 }
 while (1) {
  $3 = HEAP32[$0 >> 2];
  $1 = -1;
  if ($2 >>> 0 <= 214748364) {
   $1 = HEAP8[$3 | 0] - 48 | 0;
   $2 = Math_imul($2, 10);
   $1 = ($2 ^ 2147483647) < ($1 | 0) ? -1 : $1 + $2 | 0;
  }
  HEAP32[$0 >> 2] = $3 + 1;
  $2 = $1;
  if (isdigit(HEAP8[$3 + 1 | 0])) {
   continue;
  }
  break;
 }
 return $1;
}

function float_20b2FixtureDef_____20emscripten__internal__getContext_float_20b2FixtureDef_____28float_20b2FixtureDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2WeldJointDef____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2WeldJointDef_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2RopeJointDef____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2RopeJointDef_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2PolygonShape____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2PolygonShape_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Vec2_20b2Transform_____20emscripten__internal__getContext_b2Vec2_20b2Transform_____28b2Vec2_20b2Transform____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20const__20emscripten__internal__getActualType_b2QueryCallbackWrapper__28b2QueryCallbackWrapper__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2QueryCallbackWrapper__28b2QueryCallbackWrapper_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function embind_init_b2_28_29__$_7____invoke_28b2Body__2c_20b2MassData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 embind_init_b2_28_29__$_7__operator_28_29_28b2Body__2c_20b2MassData_20const__29_20const($2 + 7 | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_unsigned_20int_2c_20unsigned_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_unsigned_20int_2c_20unsigned_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2CircleShape____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2CircleShape_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WireTypePack_b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____operator_20void_20const__28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__array_emscripten__internal__GenericWireType_2c_203ul___data_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__InitFunc__InitFunc_28void_20_28__29_28_29_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = 0;
 FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]]();
 _embind_register_bindings($0);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function bool_20b2FixtureDef_____20emscripten__internal__getContext_bool_20b2FixtureDef_____28bool_20b2FixtureDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20b2MassData_____20emscripten__internal__getContext_b2Vec2_20b2MassData_____28b2Vec2_20b2MassData____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Rot_20b2Transform_____20emscripten__internal__getContext_b2Rot_20b2Transform_____28b2Rot_20b2Transform____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2FixtureDef____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2FixtureDef_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2RevoluteJoint__GetJointAngle_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 48 >> 2];
 HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 52 >> 2];
 return Math_fround(Math_fround(Math_fround(HEAPF32[HEAP32[$1 + 4 >> 2] + 56 >> 2] - HEAPF32[HEAP32[$1 + 8 >> 2] + 56 >> 2]) - HEAPF32[$0 + 116 >> 2]));
}

function float_20b2MassData_____20emscripten__internal__getContext_float_20b2MassData_____28float_20b2MassData____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2Vec2_20b2BodyDef_____20emscripten__internal__getContext_b2Vec2_20b2BodyDef_____28b2Vec2_20b2BodyDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2RayCastCallbackWrapper__b2RayCastCallbackWrapper___28emscripten__val___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 emscripten__wrapper_b2RayCastCallback___wrapper___28emscripten__val___29($0, HEAP32[$2 + 8 >> 2]);
 HEAP32[$0 >> 2] = 25724;
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2____tree_node_base_void____20std____2____tree_min_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 while (1) {
  if (HEAP32[HEAP32[$1 + 12 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
   continue;
  }
  break;
 }
 return HEAP32[$1 + 12 >> 2];
}

function b2BroadPhase__DestroyProxy_28int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 b2BroadPhase__UnBufferMove_28int_29($0, HEAP32[$2 + 8 >> 2]);
 HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 28 >> 2] - 1;
 b2DynamicTree__DestroyProxy_28int_29($0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2JointDef____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2JointDef_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int__2c_20unsigned_20int____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20unsigned_20int__2c_20unsigned_20int_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__Invoker_b2WheelJointDef____invoke_28b2WheelJointDef__20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__BindingType_b2WheelJointDef__2c_20void___toWireType_28b2WheelJointDef__29(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]() | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__Invoker_b2MouseJointDef____invoke_28b2MouseJointDef__20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__BindingType_b2MouseJointDef__2c_20void___toWireType_28b2MouseJointDef__29(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]() | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__Invoker_b2MotorJointDef____invoke_28b2MotorJointDef__20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__BindingType_b2MotorJointDef__2c_20void___toWireType_28b2MotorJointDef__29(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]() | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function float_20b2BodyDef_____20emscripten__internal__getContext_float_20b2BodyDef_____28float_20b2BodyDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function bool_20b2JointDef_____20emscripten__internal__getContext_bool_20b2JointDef_____28bool_20b2JointDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2DistanceInput__b2DistanceInput_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2DistanceProxy__b2DistanceProxy_28_29($0);
 b2DistanceProxy__b2DistanceProxy_28_29($0 + 28 | 0);
 b2Transform__b2Transform_28_29($0 + 56 | 0);
 b2Transform__b2Transform_28_29($0 + 72 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function operator__28float_2c_20b2Vec2_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAPF32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Vec2__b2Vec2_28float_2c_20float_29($0, Math_fround(HEAPF32[$3 + 12 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] >> 2]), Math_fround(HEAPF32[$3 + 12 >> 2] * HEAPF32[HEAP32[$3 + 8 >> 2] + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__value_object_b2RayCastOutput____value_object_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 _embind_finalize_value_object(emscripten__internal__TypeID_b2RayCastOutput_2c_20void___get_28_29() | 0);
 emscripten__internal__noncopyable___noncopyable_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2BodyDef____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2BodyDef_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_____clear_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______destruct_at_end_5babi_v160004_5d_28b2Vec2__29($0, HEAP32[$0 + 4 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______end_cap_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2_____first_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2] + 12 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WireTypePack_b2Vec2_20const__2c_20float__2c_20b2Color_20const____operator_20void_20const__28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__array_emscripten__internal__GenericWireType_2c_203ul___data_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2____second_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_std____2__allocator_b2Vec2__2c_201_2c_20true_____get_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function short_20b2Filter_____20emscripten__internal__getContext_short_20b2Filter_____28short_20b2Filter____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__value_object_b2RayCastInput____value_object_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 _embind_finalize_value_object(emscripten__internal__TypeID_b2RayCastInput_2c_20void___get_28_29() | 0);
 emscripten__internal__noncopyable___noncopyable_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int_2c_20unsigned_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20unsigned_20int_2c_20unsigned_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__Invoker_b2WeldJointDef____invoke_28b2WeldJointDef__20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__BindingType_b2WeldJointDef__2c_20void___toWireType_28b2WeldJointDef__29(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]() | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__Invoker_b2RopeJointDef____invoke_28b2RopeJointDef__20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__BindingType_b2RopeJointDef__2c_20void___toWireType_28b2RopeJointDef__29(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]() | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__Invoker_b2PolygonShape____invoke_28b2PolygonShape__20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__BindingType_b2PolygonShape__2c_20void___toWireType_28b2PolygonShape__29(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]() | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function bool_20b2BodyDef_____20emscripten__internal__getContext_bool_20b2BodyDef_____28bool_20b2BodyDef____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2QueryCallbackWrapper__b2QueryCallbackWrapper___28emscripten__val___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 emscripten__wrapper_b2QueryCallback___wrapper___28emscripten__val___29($0, HEAP32[$2 + 8 >> 2]);
 HEAP32[$0 >> 2] = 25472;
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function void_20const__20emscripten__internal__getActualType_b2PrismaticJointDef__28b2PrismaticJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2PrismaticJointDef__28b2PrismaticJointDef_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__WireTypePack_unsigned_20int__2c_20int__2c_20b2Color_20const____operator_20void_20const__28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__array_emscripten__internal__GenericWireType_2c_203ul___data_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______annotate_contiguous_container_5babi_v160004_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
}

function emscripten__internal__WithPolicies____ArgTypeList_unsigned_20int_2c_20unsigned_20int_2c_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_unsigned_20int_2c_20unsigned_20int_2c_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function float_20b2Shape_____20emscripten__internal__getContext_float_20b2Shape_____28float_20b2Shape____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function float_20b2Color_____20emscripten__internal__getContext_float_20b2Color_____28float_20b2Color____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function embind_init_b2_28_29__$_11____invoke_28b2JointDef__2c_20b2Body__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 embind_init_b2_28_29__$_11__operator_28_29_28b2JointDef__2c_20b2Body__29_20const($2 + 7 | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function b2Vec2_20b2AABB_____20emscripten__internal__getContext_b2Vec2_20b2AABB_____28b2Vec2_20b2AABB____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2AABB____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2AABB_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__Invoker_b2CircleShape____invoke_28b2CircleShape__20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__BindingType_b2CircleShape__2c_20void___toWireType_28b2CircleShape__29(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]() | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function embind_init_b2_28_29__$_2____invoke_28b2Shape__2c_20float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 embind_init_b2_28_29__$_2__operator_28_29_28b2Shape__2c_20float_29_20const($2 + 7 | 0, HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function b2ContactManager__b2ContactManager_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2BroadPhase__b2BroadPhase_28_29($0);
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 64 >> 2] = 0;
 HEAP32[$0 + 68 >> 2] = 29744;
 HEAP32[$0 + 72 >> 2] = 29748;
 HEAP32[$0 + 76 >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20const__20emscripten__internal__getActualType_b2RevoluteJointDef__28b2RevoluteJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2RevoluteJointDef__28b2RevoluteJointDef_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2DistanceJointDef__28b2DistanceJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2DistanceJointDef__28b2DistanceJointDef_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2_____second_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_std____2__allocator_b2Vec2___2c_201_2c_20false_____get_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2] + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__BindingType_emscripten__val___2c_20void___fromWireType_28emscripten___EM_VAL__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 emscripten__internal__BindingType_emscripten__val_2c_20void___fromWireType_28emscripten___EM_VAL__29($0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function embind_init_b2_28_29__$_9____invoke_28b2JointDef__2c_20b2Body__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 embind_init_b2_28_29__$_9__operator_28_29_28b2JointDef__2c_20b2Body__29_20const($2 + 7 | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function float_20b2Vec2_____20emscripten__internal__getContext_float_20b2Vec2_____28float_20b2Vec2____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function emscripten__value_object_b2Transform____value_object_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 _embind_finalize_value_object(emscripten__internal__TypeID_b2Transform_2c_20void___get_28_29() | 0);
 emscripten__internal__noncopyable___noncopyable_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_elem_std____2__allocator_b2Vec2__2c_201_2c_20true_____compressed_pair_elem_5babi_v160004_5d_28std____2____default_init_tag_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 std____2__allocator_b2Vec2___allocator_5babi_v160004_5d_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__class__b2Draw_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2Draw_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2DrawWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2DrawWrapper__29__operator_20void_20_28__29_28b2DrawWrapper__29_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 497;
}

function std____2__vector_int_2c_20std____2__allocator_int______annotate_contiguous_container_5babi_v160004_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
}

function emscripten__value_object_b2MassData____value_object_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 _embind_finalize_value_object(emscripten__internal__TypeID_b2MassData_2c_20void___get_28_29() | 0);
 emscripten__internal__noncopyable___noncopyable_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__Invoker_b2FixtureDef____invoke_28b2FixtureDef__20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__BindingType_b2FixtureDef__2c_20void___toWireType_28b2FixtureDef__29(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]() | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2RayCastCallback__28b2RayCastCallback__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2RayCastCallback__28b2RayCastCallback_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2ContactListener__28b2ContactListener__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2ContactListener__28b2ContactListener_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function std____2__pair_char_20const__2c_20char___20std____2____copy_trivial__operator_28_29_5babi_v160004_5d_char_20const_2c_20char_2c_200__28char_20const__2c_20char_20const__2c_20char__29_20const($0, $1, $2, $3, $4) {
 std____2__pair_char_20const__2c_20char___20std____2____copy_trivial_impl_5babi_v160004_5d_char_20const_2c_20char__28char_20const__2c_20char_20const__2c_20char__29($0, $2, $3, $4);
}

function std____2____compressed_pair_int__2c_20std____2__allocator_int____second_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_std____2__allocator_int__2c_201_2c_20true_____get_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function float_20b2Rot_____20emscripten__internal__getContext_float_20b2Rot_____28float_20b2Rot____20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function b2ReferenceFace__b2ReferenceFace_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Vec2__b2Vec2_28_29($0 + 8 | 0);
 b2Vec2__b2Vec2_28_29($0 + 16 | 0);
 b2Vec2__b2Vec2_28_29($0 + 24 | 0);
 b2Vec2__b2Vec2_28_29($0 + 32 | 0);
 b2Vec2__b2Vec2_28_29($0 + 44 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Fixture__GetMassData_28b2MassData__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, HEAP32[$2 + 8 >> 2], HEAPF32[$0 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function b2Distance_28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $1) {
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $3 = b2Vec2__Length_28_29_20const($2);
 __stack_pointer = $2 + 16 | 0;
 return $3;
}

function void_20std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____construct_5babi_v160004_5d_b2Fixture__2c_20b2Fixture__20const___28b2Fixture___2c_20b2Fixture__20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______end_cap_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2____first_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2] + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long_____tree_iterator_5babi_v160004_5d_28std____2____tree_end_node_std____2____tree_node_base_void______29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 return $0;
}

function std____2____compressed_pair_unsigned_20long_2c_20std____2__less_b2Fixture_____second_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_std____2__less_b2Fixture___2c_201_2c_20true_____get_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_5babi_v160004_5d_28_29($0) {
 return std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_200_2c_20false_____get_5babi_v160004_5d_28_29($0);
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______alloc_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2____second_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2] + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____split_buffer_int_2c_20std____2__allocator_int_______end_cap_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_int__2c_20std____2__allocator_int_____first_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2] + 12 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_5babi_v160004_5d_28std____2____default_init_tag_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 std____2__allocator_char___allocator_5babi_v160004_5d_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2CircleShape__b2CircleShape_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Shape__b2Shape_28_29($0);
 HEAP32[$0 >> 2] = 18040;
 b2Vec2__b2Vec2_28_29($0 + 12 | 0);
 HEAP32[$0 + 4 >> 2] = 0;
 HEAPF32[$0 + 8 >> 2] = 0;
 b2Vec2__SetZero_28_29($0 + 12 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__value_object_b2Filter____value_object_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 _embind_finalize_value_object(emscripten__internal__TypeID_b2Filter_2c_20void___get_28_29() | 0);
 emscripten__internal__noncopyable___noncopyable_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WireTypePack_unsigned_20int__2c_20unsigned_20int____operator_20void_20const__28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__array_emscripten__internal__GenericWireType_2c_202ul___data_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Vec3__b2Vec3_28float_2c_20float_2c_20float_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAPF32[$4 + 8 >> 2] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAPF32[$0 >> 2] = HEAPF32[$4 + 8 >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[$4 + 4 >> 2];
 HEAPF32[$0 + 8 >> 2] = HEAPF32[$4 >> 2];
 return $0;
}

function void_20const__20emscripten__internal__getActualType_b2PrismaticJoint__28b2PrismaticJoint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2PrismaticJoint__28b2PrismaticJoint_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function strcmp($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = HEAPU8[$0 | 0];
 $3 = HEAPU8[$1 | 0];
 label$1: {
  if (!$2 | ($2 | 0) != ($3 | 0)) {
   break label$1;
  }
  while (1) {
   $3 = HEAPU8[$1 + 1 | 0];
   $2 = HEAPU8[$0 + 1 | 0];
   if (!$2) {
    break label$1;
   }
   $1 = $1 + 1 | 0;
   $0 = $0 + 1 | 0;
   if (($2 | 0) == ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 return $2 - $3 | 0;
}

function std____2____libcpp_allocate_5babi_v160004_5d_28unsigned_20long_2c_20unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = void__20std____2____libcpp_operator_new_5babi_v160004_5d_unsigned_20long__28unsigned_20long_29(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_elem_std____2__allocator_int__2c_201_2c_20true_____compressed_pair_elem_5babi_v160004_5d_28std____2____default_init_tag_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 std____2__allocator_int___allocator_5babi_v160004_5d_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function embind_init_b2_28_29__$_0____invoke_28b2AABB__2c_20b2AABB__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 embind_init_b2_28_29__$_0__operator_28_29_28b2AABB__2c_20b2AABB__29_20const($2 + 7 | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______clear_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______base_destruct_at_end_5babi_v160004_5d_28b2Vec2__29($0, HEAP32[$0 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__enable_if___is_cpp17_random_access_iterator_char_20const____value_2c_20char____type_20std____2__copy_n_5babi_v160004_5d_char_20const__2c_20unsigned_20long_2c_20char___28char_20const__2c_20unsigned_20long_2c_20char__29($0, $1, $2) {
 return char__20std____2__copy_5babi_v160004_5d_char_20const__2c_20char___28char_20const__2c_20char_20const__2c_20char__29($0, $0 + $1 | 0, $2);
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_cap_5babi_v160004_5d_28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_5babi_v160004_5d_28_29_20const($0) + 8 >> 2] & 2147483647;
}

function std____2____split_buffer_int_2c_20std____2__allocator_int_____clear_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2____split_buffer_int_2c_20std____2__allocator_int_______destruct_at_end_5babi_v160004_5d_28int__29($0, HEAP32[$0 + 4 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function std____2____compressed_pair_int__2c_20std____2__allocator_int_____second_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_std____2__allocator_int___2c_201_2c_20false_____get_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2] + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__value_object_b2Color____value_object_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 _embind_finalize_value_object(emscripten__internal__TypeID_b2Color_2c_20void___get_28_29() | 0);
 emscripten__internal__noncopyable___noncopyable_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__enum__b2Shape__Type___enum__28char_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 _embind_register_enum(emscripten__internal__TypeID_b2Shape__Type_2c_20void___get_28_29() | 0, HEAP32[$2 + 8 >> 2], 4, 0);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function b2PolygonShape__operator__28b2PolygonShape_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 b2Shape__operator__28b2Shape_20const__29($0, HEAP32[$2 + 8 >> 2]);
 __memcpy($0 + 12 | 0, HEAP32[$2 + 8 >> 2] + 12 | 0, 140);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function b2AABB__GetCenter_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29_1($2 + 4 | 0, $1, $1 + 8 | 0);
 operator__28float_2c_20b2Vec2_20const__29($0, Math_fround(.5), $2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______end_cap_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2_____first_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2] + 12 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_elem_std____2__allocator_b2Vec2___2c_201_2c_20false_____compressed_pair_elem_5babi_v160004_5d_std____2__allocator_b2Vec2___2c_20void__28std____2__allocator_b2Vec2___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 return $0;
}

function b2AABB__GetExtents_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 operator__28b2Vec2_20const__2c_20b2Vec2_20const__29($2 + 4 | 0, $1 + 8 | 0, $1);
 operator__28float_2c_20b2Vec2_20const__29($0, Math_fround(.5), $2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2_______alloc_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2_____second_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2] + 12 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2____second_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_std____2__allocator_b2Vec2__2c_201_2c_20true_____get_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__value_object_b2Vec2____value_object_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 _embind_finalize_value_object(emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29() | 0);
 emscripten__internal__noncopyable___noncopyable_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__Invoker_b2JointDef____invoke_28b2JointDef__20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__BindingType_b2JointDef__2c_20void___toWireType_28b2JointDef__29(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]() | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2WheelJointDef__28b2WheelJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2WheelJointDef__28b2WheelJointDef_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2RevoluteJoint__28b2RevoluteJoint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2RevoluteJoint__28b2RevoluteJoint_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2QueryCallback__28b2QueryCallback__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2QueryCallback__28b2QueryCallback_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2MouseJointDef__28b2MouseJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2MouseJointDef__28b2MouseJointDef_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2MotorJointDef__28b2MotorJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2MotorJointDef__28b2MotorJointDef_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2DistanceJoint__28b2DistanceJoint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2DistanceJoint__28b2DistanceJoint_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function std____2__pair_std____2____unwrap_ref_decay_char_20const_____type_2c_20std____2____unwrap_ref_decay_char____type__20std____2__make_pair_5babi_v160004_5d_char_20const___2c_20char___28char_20const___2c_20char____29($0, $1, $2) {
 std____2__pair_char_20const__2c_20char____pair_5babi_v160004_5d_char_20const___2c_20char__2c_20_28void__290__28char_20const___2c_20char____29($0, $1, $2);
}

function emscripten__value_object_b2Rot____value_object_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 _embind_finalize_value_object(emscripten__internal__TypeID_b2Rot_2c_20void___get_28_29() | 0);
 emscripten__internal__noncopyable___noncopyable_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int_2c_20float___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20unsigned_20int_2c_20float____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2RayCastCallbackWrapper____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20b2RayCastCallbackWrapper_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2ContactListenerWrapper____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20b2ContactListenerWrapper_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__pair_std____2____unwrap_ref_decay_char_20const____type_2c_20std____2____unwrap_ref_decay_char____type__20std____2__make_pair_5babi_v160004_5d_char_20const__2c_20char___28char_20const____2c_20char____29($0, $1, $2) {
 std____2__pair_char_20const__2c_20char____pair_5babi_v160004_5d_char_20const__2c_20char__2c_20_28void__290__28char_20const____2c_20char____29($0, $1, $2);
}

function std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2_____first_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_b2Vec2__2c_200_2c_20false_____get_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2____first_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_b2Vec2__2c_200_2c_20false_____get_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int_2c_20bool___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20unsigned_20int_2c_20bool____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_unsigned_20int_2c_20unsigned_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_unsigned_20int_2c_20unsigned_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20unsigned_20int_2c_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20unsigned_20int_2c_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__Invoker_b2BodyDef____invoke_28b2BodyDef__20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__BindingType_b2BodyDef__2c_20void___toWireType_28b2BodyDef__29(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]() | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function emscripten__enum__b2BodyType___enum__28char_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 _embind_register_enum(emscripten__internal__TypeID_b2BodyType_2c_20void___get_28_29() | 0, HEAP32[$2 + 8 >> 2], 4, 0);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function void_20emscripten__internal__writeGenericWireType_unsigned_20int__28emscripten__internal__GenericWireType___2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[HEAP32[$2 + 12 >> 2] >> 2] >> 2] = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 8;
}

function void_20const__20emscripten__internal__getActualType_b2WeldJointDef__28b2WeldJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2WeldJointDef__28b2WeldJointDef_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2RopeJointDef__28b2RopeJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2RopeJointDef__28b2RopeJointDef_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2PolygonShape__28b2PolygonShape__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2PolygonShape__28b2PolygonShape_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function std____2____compressed_pair_unsigned_20long_2c_20std____2__less_b2Fixture_____first_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_unsigned_20long_2c_200_2c_20false_____get_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Vec3__operator__28_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Vec3__b2Vec3_28_29($0);
 b2Vec3__Set_28float_2c_20float_2c_20float_29($0, Math_fround(-HEAPF32[$1 >> 2]), Math_fround(-HEAPF32[$1 + 4 >> 2]), Math_fround(-HEAPF32[$1 + 8 >> 2]));
 __stack_pointer = $2 + 16 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int______end_cap_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_int__2c_20std____2__allocator_int____first_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2] + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2QueryCallbackWrapper____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20b2QueryCallbackWrapper_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function decltype_28std____2____unwrap_iter_impl_char_20const__2c_20true_____unwrap_28std__declval_char_20const___28_29_29_29_20std____2____unwrap_iter_5babi_v160004_5d_char_20const__2c_20std____2____unwrap_iter_impl_char_20const__2c_20true__2c_200__28char_20const__29($0) {
 return std____2____unwrap_iter_impl_char_20const__2c_20true_____unwrap_5babi_v160004_5d_28char_20const__29($0);
}

function std____2__vector_int_2c_20std____2__allocator_int______alloc_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_int__2c_20std____2__allocator_int____second_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2] + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2TOIInput__b2TOIInput_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2DistanceProxy__b2DistanceProxy_28_29($0);
 b2DistanceProxy__b2DistanceProxy_28_29($0 + 28 | 0);
 b2Sweep__b2Sweep_28_29($0 + 56 | 0);
 b2Sweep__b2Sweep_28_29($0 + 92 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2GearJoint__GetReactionTorque_28float_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAPF32[$2 + 4 >> 2] = HEAPF32[$0 + 156 >> 2] * HEAPF32[$0 + 256 >> 2];
 return Math_fround(Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[$2 + 4 >> 2]));
}

function void_20emscripten__val__call_void__28char_20const__29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 emscripten__internal__MethodCaller_void___call_28emscripten___EM_VAL__2c_20char_20const__29(HEAP32[HEAP32[$2 + 12 >> 2] >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function std____2____compressed_pair_elem_std____2__allocator_int___2c_201_2c_20false_____compressed_pair_elem_5babi_v160004_5d_std____2__allocator_int___2c_20void__28std____2__allocator_int___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 return $0;
}

function TransformVector2_28b2Transform_20const__2c_20b2Vec2_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2DrawWrapper__28b2DrawWrapper__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2DrawWrapper__28b2DrawWrapper_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2CircleShape__28b2CircleShape__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2CircleShape__28b2CircleShape_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_5babi_v160004_5d_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAPU32[HEAP32[$3 + 8 >> 2] >> 2] < HEAPU32[HEAP32[$3 + 4 >> 2] >> 2];
}

function std____2____compressed_pair_int__2c_20std____2__allocator_int____second_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_std____2__allocator_int__2c_201_2c_20true_____get_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____allocation_result_std____2__allocator_traits_std____2__allocator_char____pointer__20std____2____allocate_at_least_5babi_v160004_5d_std____2__allocator_char___28std____2__allocator_char___2c_20unsigned_20long_29($0, $1, $2) {
 $1 = std____2__allocator_char___allocate_5babi_v160004_5d_28unsigned_20long_29($1, $2);
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 >> 2] = $1;
}

function b2GrowableStack_int_2c_20256____b2GrowableStack_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$0 >> 2] != ($0 + 4 | 0)) {
  b2Free_28void__29(HEAP32[$0 >> 2]);
  HEAP32[$0 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______end_cap_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2____first_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2] + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2FrictionJoint__GetReactionForce_28float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAPF32[$3 + 8 >> 2] = $2;
 operator__28float_2c_20b2Vec2_20const__29($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 12 >> 2] + 84 | 0);
 __stack_pointer = $3 + 16 | 0;
}

function __towrite($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 72 >> 2];
 HEAP32[$0 + 72 >> 2] = $1 | $1 - 1;
 $1 = HEAP32[$0 >> 2];
 if ($1 & 8) {
  HEAP32[$0 >> 2] = $1 | 32;
  return -1;
 }
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $1 = HEAP32[$0 + 44 >> 2];
 HEAP32[$0 + 28 >> 2] = $1;
 HEAP32[$0 + 20 >> 2] = $1;
 HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 48 >> 2] + $1;
 return 0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______alloc_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2____second_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2] + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long_____tree_iterator_5babi_v160004_5d_28std____2____tree_node_b2Fixture__2c_20void____29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 return $0;
}

function std____2____split_buffer_int_2c_20std____2__allocator_int_______end_cap_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_int__2c_20std____2__allocator_int_____first_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2] + 12 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Vec3__Set_28float_2c_20float_2c_20float_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAPF32[$4 + 8 >> 2] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAPF32[$0 >> 2] = HEAPF32[$4 + 8 >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[$4 + 4 >> 2];
 HEAPF32[$0 + 8 >> 2] = HEAPF32[$4 >> 2];
}

function b2DrawWrapper__b2DrawWrapper___28emscripten__val___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 emscripten__wrapper_b2Draw___wrapper___28emscripten__val___29($0, HEAP32[$2 + 8 >> 2]);
 HEAP32[$0 >> 2] = 26404;
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function b2ContactSolver___b2ContactSolver_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2StackAllocator__Free_28void__29(HEAP32[$0 + 32 >> 2], HEAP32[$0 + 40 >> 2]);
 b2StackAllocator__Free_28void__29(HEAP32[$0 + 32 >> 2], HEAP32[$0 + 36 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Body__GetLocalPoint_28b2Vec2_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2MulT_28b2Transform_20const__2c_20b2Vec2_20const__29($0, HEAP32[$3 + 12 >> 2] + 12 | 0, HEAP32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function std____2____split_buffer_int_2c_20std____2__allocator_int_______alloc_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_int__2c_20std____2__allocator_int_____second_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2] + 12 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_int__2c_20std____2__allocator_int_____first_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_int__2c_200_2c_20false_____get_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2Transform_20const____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20b2Transform_20const_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WireTypePack_b2Transform_20const____operator_20void_20const__28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__array_emscripten__internal__GenericWireType_2c_201ul___data_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function embind_init_b2_28_29__$_7__operator_28_29_28b2Body__2c_20b2MassData_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 b2Body__SetMassData_28b2MassData_20const__29(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Mul_28b2Transform_20const__2c_20b2Vec2_20const__29($0, HEAP32[$3 + 12 >> 2] + 12 | 0, HEAP32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2WheelJoint__28b2WheelJoint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2WheelJoint__28b2WheelJoint_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2MouseJoint__28b2MouseJoint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2MouseJoint__28b2MouseJoint_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2MotorJoint__28b2MotorJoint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2MotorJoint__28b2MotorJoint_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2FixtureDef__28b2FixtureDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2FixtureDef__28b2FixtureDef_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int______clear_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__vector_int_2c_20std____2__allocator_int______base_destruct_at_end_5babi_v160004_5d_28int__29($0, HEAP32[$0 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function std____2____compressed_pair_int__2c_20std____2__allocator_int____first_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_int__2c_200_2c_20false_____get_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2MouseJoint__GetReactionForce_28float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAPF32[$3 + 8 >> 2] = $2;
 operator__28float_2c_20b2Vec2_20const__29($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 12 >> 2] + 96 | 0);
 __stack_pointer = $3 + 16 | 0;
}

function b2MotorJoint__GetReactionForce_28float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAPF32[$3 + 8 >> 2] = $2;
 operator__28float_2c_20b2Vec2_20const__29($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 12 >> 2] + 80 | 0);
 __stack_pointer = $3 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_unsigned_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_unsigned_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2RevoluteJoint__GetJointSpeed_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 48 >> 2];
 HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 52 >> 2];
 return Math_fround(Math_fround(HEAPF32[HEAP32[$1 + 4 >> 2] + 72 >> 2] - HEAPF32[HEAP32[$1 + 8 >> 2] + 72 >> 2]));
}

function std____2____unwrap_iter_impl_std____2__reverse_iterator_b2Vec2___2c_20false_____rewrap_5babi_v160004_5d_28std____2__reverse_iterator_b2Vec2___2c_20std____2__reverse_iterator_b2Vec2___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 4 >> 2];
 return HEAP32[$2 + 12 >> 2];
}

function b2SeparationFunction__b2SeparationFunction_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Sweep__b2Sweep_28_29($0 + 8 | 0);
 b2Sweep__b2Sweep_28_29($0 + 44 | 0);
 b2Vec2__b2Vec2_28_29($0 + 84 | 0);
 b2Vec2__b2Vec2_28_29($0 + 92 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__Invoker_b2AABB____invoke_28b2AABB__20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__BindingType_b2AABB__2c_20void___toWireType_28b2AABB__29(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]() | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2Body__GetLocalVector_28b2Vec2_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2MulT_28b2Rot_20const__2c_20b2Vec2_20const__29($0, HEAP32[$3 + 12 >> 2] + 20 | 0, HEAP32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2WeldJoint__28b2WeldJoint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2WeldJoint__28b2WeldJoint_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2RopeJoint__28b2RopeJoint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2RopeJoint__28b2RopeJoint_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2EdgeShape__28b2EdgeShape__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2EdgeShape__28b2EdgeShape_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__WireTypePack_unsigned_20int____operator_20void_20const__28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__array_emscripten__internal__GenericWireType_2c_201ul___data_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WireTypePack_b2Vec2_20const____operator_20void_20const__28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__array_emscripten__internal__GenericWireType_2c_201ul___data_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Vec3__operator___28float_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] * HEAPF32[$2 + 8 >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] * HEAPF32[$2 + 8 >> 2];
 HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] * HEAPF32[$2 + 8 >> 2];
}

function b2Body__GetWorldVector_28b2Vec2_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 b2Mul_28b2Rot_20const__2c_20b2Vec2_20const__29($0, HEAP32[$3 + 12 >> 2] + 20 | 0, HEAP32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2_____first_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_b2Vec2__2c_200_2c_20false_____get_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20emscripten__wrapper_b2RayCastCallback___call_void__28char_20const__29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 void_20emscripten__val__call_void__28char_20const__29_20const(HEAP32[$2 + 12 >> 2] + 8 | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function void_20emscripten__wrapper_b2ContactListener___call_void__28char_20const__29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 void_20emscripten__val__call_void__28char_20const__29_20const(HEAP32[$2 + 12 >> 2] + 8 | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function std____2____compressed_pair_b2Vec2__2c_20std____2__allocator_b2Vec2____first_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_b2Vec2__2c_200_2c_20false_____get_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WireTypePack_int_20const____operator_20void_20const__28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__array_emscripten__internal__GenericWireType_2c_201ul___data_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2World__SetGravity_28b2Vec2_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$1 >> 2];
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$2 + 12 >> 2] + 102964 | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $3;
}

function void_20const__20emscripten__internal__getActualType_b2JointDef__28b2JointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2JointDef__28b2JointDef_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2Body__SetBullet_28bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 label$1: {
  if (HEAP8[$2 + 11 | 0] & 1) {
   HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] | 8;
   break label$1;
  }
  HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] & -9;
 }
}

function void_20emscripten__wrapper_b2QueryCallback___call_void__28char_20const__29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 void_20emscripten__val__call_void__28char_20const__29_20const(HEAP32[$2 + 12 >> 2] + 8 | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int______end_cap_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_int__2c_20std____2__allocator_int____first_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2] + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20unsigned_20int_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20unsigned_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20unsigned_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20unsigned_20int____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20unsigned_20int_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20std____2____do_deallocate_handle_size_5babi_v160004_5d___28void__2c_20unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 void_20std____2____libcpp_operator_delete_5babi_v160004_5d_void___28void__29(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int______alloc_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_int__2c_20std____2__allocator_int____second_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2] + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2World__20emscripten__internal__operator_new_b2World_2c_20b2Vec2__28b2Vec2___29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(103028);
 b2World__b2World_28b2Vec2_20const__29($0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function std____2____unwrap_iter_impl_std____2__reverse_iterator_int___2c_20false_____rewrap_5babi_v160004_5d_28std____2__reverse_iterator_int___2c_20std____2__reverse_iterator_int___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 4 >> 2];
 return HEAP32[$2 + 12 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20unsigned_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2DrawWrapper____getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20b2DrawWrapper_____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20unsigned_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20unsigned_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20const__20emscripten__internal__getActualType_b2Fixture__28b2Fixture__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2Fixture__28b2Fixture_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2BodyDef__28b2BodyDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2BodyDef__28b2BodyDef_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2Cross_28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return Math_fround(Math_fround(HEAPF32[HEAP32[$2 + 12 >> 2] >> 2] * HEAPF32[HEAP32[$2 + 8 >> 2] + 4 >> 2]) - Math_fround(HEAPF32[HEAP32[$2 + 12 >> 2] + 4 >> 2] * HEAPF32[HEAP32[$2 + 8 >> 2] >> 2]));
}

function ContactGetWorldManifold_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 b2Contact__GetWorldManifold_28b2WorldManifold__29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__WithPolicies____ArgTypeList_int_2c_20unsigned_20int___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_int_2c_20unsigned_20int____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20std____2__allocator_traits_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void______destroy_5babi_v160004_5d_b2Fixture__2c_20void_2c_20void__28std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_20b2Fixture___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function void_20emscripten__internal__writeGenericWireType_int__28emscripten__internal__GenericWireType___2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[HEAP32[$2 + 12 >> 2] >> 2] >> 2] = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 8;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_pointer_5babi_v160004_5d_28_29($0) {
 return HEAP32[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____first_5babi_v160004_5d_28_29($0) >> 2];
}

function b2Dot_28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return Math_fround(Math_fround(HEAPF32[HEAP32[$2 + 12 >> 2] >> 2] * HEAPF32[HEAP32[$2 + 8 >> 2] >> 2]) + Math_fround(HEAPF32[HEAP32[$2 + 12 >> 2] + 4 >> 2] * HEAPF32[HEAP32[$2 + 8 >> 2] + 4 >> 2]));
}

function std____2____compressed_pair_int__2c_20std____2__allocator_int_____first_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_int__2c_200_2c_20false_____get_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function WorldManifoldNew_28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(32);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 b2WorldManifold__b2WorldManifold_28_29($0);
 return $0 | 0;
}

function std____2____compressed_pair_int__2c_20std____2__allocator_int____first_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_int__2c_200_2c_20false_____get_5babi_v160004_5d_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20emscripten__wrapper_b2Draw___call_void__28char_20const__29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 void_20emscripten__val__call_void__28char_20const__29_20const(HEAP32[$2 + 12 >> 2] + 12 | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____data_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = b2Vec2__20std____2____to_address_5babi_v160004_5d_b2Vec2__28b2Vec2__29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Simplex__b2Simplex_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2SimplexVertex__b2SimplexVertex_28_29($0);
 b2SimplexVertex__b2SimplexVertex_28_29($0 + 36 | 0);
 b2SimplexVertex__b2SimplexVertex_28_29($0 + 72 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 std____2__enable_if___is_cpp17_random_access_iterator_char_20const____value_2c_20char____type_20std____2__copy_n_5babi_v160004_5d_char_20const__2c_20unsigned_20long_2c_20char___28char_20const__2c_20unsigned_20long_2c_20char__29($1, $2, $0);
 return $0;
}

function emscripten__internal__WireTypePack____operator_20void_20const__28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2__array_emscripten__internal__GenericWireType_2c_200ul___data_5babi_v160004_5d_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function embind_init_b2_28_29__$_0__operator_28_29_28b2AABB__2c_20b2AABB__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 b2AABB__Combine_28b2AABB_20const__29(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2World__28b2World__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2World__28b2World_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2Shape__28b2Shape__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2Shape__28b2Shape_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2Joint__28b2Joint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2Joint__28b2Joint_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______alloc_5babi_v160004_5d_28_29_20const($0) {
 return std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____second_5babi_v160004_5d_28_29_20const($0);
}

function emscripten__internal__writeGenericWireType_28emscripten__internal__GenericWireType___2c_20float_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[HEAP32[$2 + 12 >> 2] >> 2] >> 2] = HEAPF32[$2 + 8 >> 2];
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 8;
}

function emscripten__internal__BindingType_emscripten__val_2c_20void___fromWireType_28emscripten___EM_VAL__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 emscripten__val__take_ownership_28emscripten___EM_VAL__29($0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function operator___28b2Vec2_20const__2c_20b2Vec2_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = 1;
 $0 = HEAPF32[HEAP32[$2 + 12 >> 2] >> 2] == HEAPF32[HEAP32[$2 + 8 >> 2] >> 2] ? HEAPF32[HEAP32[$2 + 12 >> 2] + 4 >> 2] != HEAPF32[HEAP32[$2 + 8 >> 2] + 4 >> 2] : $0;
 return $0;
}

function embind_init_b2_28_29__$_3____invoke_28b2Shape__29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = embind_init_b2_28_29__$_3__operator_28_29_28b2Shape__29_20const($1 + 11 | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return Math_fround($2);
}

function b2Abs_28b2Vec2_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 b2Vec2__b2Vec2_28float_2c_20float_29($0, float_20b2Abs_float__28float_29(HEAPF32[HEAP32[$2 + 12 >> 2] >> 2]), float_20b2Abs_float__28float_29(HEAPF32[HEAP32[$2 + 12 >> 2] + 4 >> 2]));
 __stack_pointer = $2 + 16 | 0;
}

function std____2__allocator_b2Vec2___allocator_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2____non_trivial_if_true_2c_20std____2__allocator_b2Vec2______non_trivial_if_5babi_v160004_5d_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20const__20emscripten__internal__getActualType_b2Draw__28b2Draw__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2Draw__28b2Draw_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2Body__28b2Body__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2Body__28b2Body_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getActualType_b2AABB__28b2AABB__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20emscripten__internal__getLightTypeID_b2AABB__28b2AABB_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______destroy_vector____destroy_vector_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 return $0;
}

function pop_arg_long_double($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0;
 $2 = HEAP32[$1 >> 2] + 7 & -8;
 HEAP32[$1 >> 2] = $2 + 16;
 wasm2js_i32$0 = $0, wasm2js_f64$0 = __trunctfdf2(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]), 
 HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
}

function void_20emscripten__internal__raw_destructor_b2RayCastCallbackWrapper__28b2RayCastCallbackWrapper__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__raw_destructor_b2ContactListenerWrapper__28b2ContactListenerWrapper__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function void_20b2Swap_float__28float__2c_20float__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAPF32[$2 + 4 >> 2] = HEAPF32[HEAP32[$2 + 12 >> 2] >> 2];
 HEAPF32[HEAP32[$2 + 12 >> 2] >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] >> 2];
 HEAPF32[HEAP32[$2 + 8 >> 2] >> 2] = HEAPF32[$2 + 4 >> 2];
}

function std____2____compressed_pair_elem_std____2__less_b2Fixture___2c_201_2c_20true_____compressed_pair_elem_5babi_v160004_5d_std____2__less_b2Fixture___20const__2c_20void__28std____2__less_b2Fixture___20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__pure_virtual_2c_20emscripten__allow_raw_pointers___ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RayCastCallback__2c_20unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 6;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____data_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = b2Vec2__20std____2____to_address_5babi_v160004_5d_b2Vec2__28b2Vec2__29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__allocator_char___allocator_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2____non_trivial_if_true_2c_20std____2__allocator_char______non_trivial_if_5babi_v160004_5d_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____unwrap_range_impl_char_20const__2c_20char_20const______rewrap_5babi_v160004_5d_28char_20const__2c_20char_20const__29($0, $1) {
 return char_20const__20std____2____rewrap_iter_5babi_v160004_5d_char_20const__2c_20char_20const__2c_20std____2____unwrap_iter_impl_char_20const__2c_20true___28char_20const__2c_20char_20const__29($0, $1);
}

function b2Shape__operator__28b2Shape_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$1 + 4 >> 2];
 $3 = HEAP32[$1 + 8 >> 2];
 $1 = $0;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $3;
 return $0;
}

function void_20emscripten__internal__raw_destructor_b2QueryCallbackWrapper__28b2QueryCallbackWrapper__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function std____2__allocator_int___allocator_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2____non_trivial_if_true_2c_20std____2__allocator_int______non_trivial_if_5babi_v160004_5d_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function ContactSetTangentSpeed_28unsigned_20int_2c_20float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 b2Contact__SetTangentSpeed_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function b2Vec2__operator___28b2Vec2_20const__29_1($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] - HEAPF32[HEAP32[$2 + 8 >> 2] >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] - HEAPF32[HEAP32[$2 + 8 >> 2] + 4 >> 2];
}

function std____2__vector_int_2c_20std____2__allocator_int____data_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int__20std____2____to_address_5babi_v160004_5d_int__28int__29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2PolygonAndCircleContact___b2PolygonAndCircleContact_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2PolygonAndCircleContact___b2PolygonAndCircleContact_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function ContactSetRestitution_28unsigned_20int_2c_20float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 b2Contact__SetRestitution_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__less_b2Fixture____operator_28_29_5babi_v160004_5d_28b2Fixture__20const__2c_20b2Fixture__20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAPU32[HEAP32[$3 + 8 >> 2] >> 2] < HEAPU32[HEAP32[$3 + 4 >> 2] >> 2];
}

function std____2____compressed_pair_elem_unsigned_20long_2c_200_2c_20false_____compressed_pair_elem_5babi_v160004_5d_int_2c_20void__28int___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 return $0;
}

function b2Vec2__operator___28b2Vec2_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + HEAPF32[HEAP32[$2 + 8 >> 2] >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] + HEAPF32[HEAP32[$2 + 8 >> 2] + 4 >> 2];
}

function b2Contact__SetEnabled_28bool_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 label$1: {
  if (HEAP8[$2 + 11 | 0] & 1) {
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 4;
   break label$1;
  }
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] & -5;
 }
}

function std____2__vector_int_2c_20std____2__allocator_int______destroy_vector____destroy_vector_28std____2__vector_int_2c_20std____2__allocator_int____29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 return $0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____20emscripten__internal__operator_new_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(12);
 std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____vector_5babi_v160004_5d_28_29($0);
 return $0 | 0;
}

function b2MouseJoint__ShiftOrigin_28b2Vec2_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 b2Vec2__operator___28b2Vec2_20const__29_1(HEAP32[$2 + 12 >> 2] + 76 | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______alloc_5babi_v160004_5d_28_29($0) {
 return std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____second_5babi_v160004_5d_28_29($0);
}

function b2RayCastCallbackWrapper___b2RayCastCallbackWrapper_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2RayCastCallbackWrapper___b2RayCastCallbackWrapper_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2ContactListenerWrapper___b2ContactListenerWrapper_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2ContactListenerWrapper___b2ContactListenerWrapper_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2ChainAndPolygonContact___b2ChainAndPolygonContact_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2ChainAndPolygonContact___b2ChainAndPolygonContact_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_200_2c_20false_____compressed_pair_elem_5babi_v160004_5d_28std____2____default_init_tag_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 return HEAP32[$1 + 8 >> 2];
}

function is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2) {
 if (!$2) {
  return HEAP32[$0 + 4 >> 2] == HEAP32[$1 + 4 >> 2];
 }
 if (($0 | 0) == ($1 | 0)) {
  return 1;
 }
 return !strcmp(std__type_info__name_5babi_v160004_5d_28_29_20const($0), std__type_info__name_5babi_v160004_5d_28_29_20const($1));
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 6;
}

function char_20const__20std____2____rewrap_iter_5babi_v160004_5d_char_20const__2c_20char_20const__2c_20std____2____unwrap_iter_impl_char_20const__2c_20true___28char_20const__2c_20char_20const__29($0, $1) {
 return std____2____unwrap_iter_impl_char_20const__2c_20true_____rewrap_5babi_v160004_5d_28char_20const__2c_20char_20const__29($0, $1);
}

function b2BroadPhase___b2BroadPhase_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Free_28void__29(HEAP32[$0 + 32 >> 2]);
 b2Free_28void__29(HEAP32[$0 + 44 >> 2]);
 b2DynamicTree___b2DynamicTree_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20emscripten__internal__raw_destructor_b2RayCastCallback__28b2RayCastCallback__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__raw_destructor_b2ContactListener__28b2ContactListener__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____second_5babi_v160004_5d_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_5babi_v160004_5d_28_29_20const($0);
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 6;
}

function b2Vec2__operator__28_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Vec2__b2Vec2_28_29($0);
 b2Vec2__Set_28float_2c_20float_29($0, Math_fround(-HEAPF32[$1 >> 2]), Math_fround(-HEAPF32[$1 + 4 >> 2]));
 __stack_pointer = $2 + 16 | 0;
}

function ContactSetFriction_28unsigned_20int_2c_20float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 b2Contact__SetFriction_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 6;
}

function emscripten__internal__BindingType_emscripten__val_2c_20void___toWireType_28emscripten__val_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _emval_incref(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function b2EdgeAndPolygonContact___b2EdgeAndPolygonContact_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2EdgeAndPolygonContact___b2EdgeAndPolygonContact_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2ChainAndCircleContact___b2ChainAndCircleContact_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2ChainAndCircleContact___b2ChainAndCircleContact_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function embind_init_b2_28_29__$_6____invoke_28b2FixtureDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = embind_init_b2_28_29__$_6__operator_28_29_28b2FixtureDef__29_20const($1 + 11 | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20emscripten__internal__raw_destructor_b2QueryCallback__28b2QueryCallback__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__wrapper_b2ContactListener____wrapper_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 emscripten__wrapper_b2ContactListener____wrapper_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2RayCastInput__20emscripten__internal__raw_constructor_b2RayCastInput__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(20);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 b2RayCastInput__b2RayCastInput_28_29($0);
 return $0 | 0;
}

function b2PrismaticJoint__GetAnchorB_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 52 >> 2], $1 + 76 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function b2PrismaticJoint__GetAnchorA_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 48 >> 2], $1 + 68 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function operator_20new_28unsigned_20long_29($0) {
 var $1 = 0;
 $1 = $0 >>> 0 <= 1 ? 1 : $0;
 label$1: {
  while (1) {
   $0 = dlmalloc($1);
   if ($0) {
    break label$1;
   }
   $0 = std__get_new_handler_28_29();
   if ($0) {
    FUNCTION_TABLE[$0 | 0]();
    continue;
   }
   break;
  }
  abort();
  wasm2js_trap();
 }
 return $0;
}

function embind_init_b2_28_29__$_12____invoke_28b2JointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = embind_init_b2_28_29__$_12__operator_28_29_28b2JointDef__29_20const($1 + 11 | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function embind_init_b2_28_29__$_10____invoke_28b2JointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = embind_init_b2_28_29__$_10__operator_28_29_28b2JointDef__29_20const($1 + 11 | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2RevoluteJoint__GetAnchorB_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 52 >> 2], $1 + 76 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function b2RevoluteJoint__GetAnchorA_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 48 >> 2], $1 + 68 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function b2FrictionJoint__GetAnchorB_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 52 >> 2], $1 + 76 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function b2FrictionJoint__GetAnchorA_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 48 >> 2], $1 + 68 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function b2DistanceJoint__GetAnchorB_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 52 >> 2], $1 + 88 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function b2DistanceJoint__GetAnchorA_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 48 >> 2], $1 + 80 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 6;
}

function b2QueryCallbackWrapper___b2QueryCallbackWrapper_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2QueryCallbackWrapper___b2QueryCallbackWrapper_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2PulleyJoint__GetAnchorB_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 52 >> 2], $1 + 100 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function b2EdgeAndCircleContact___b2EdgeAndCircleContact_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2EdgeAndCircleContact___b2EdgeAndCircleContact_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2PulleyJoint__GetAnchorA_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 48 >> 2], $1 + 92 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function void_20emscripten__internal__raw_destructor_b2DrawWrapper__28b2DrawWrapper__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function b2WheelJoint__GetAnchorB_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 52 >> 2], $1 + 84 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function b2WheelJoint__GetAnchorA_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 48 >> 2], $1 + 76 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function b2MouseJoint__GetAnchorB_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 52 >> 2], $1 + 68 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function b2GearJoint__GetAnchorB_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 52 >> 2], $1 + 100 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function void_20emscripten__internal__raw_destructor_b2World__28b2World__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  b2World___b2World_28_29($0);
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function b2WeldJoint__GetAnchorB_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 52 >> 2], $1 + 88 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function b2WeldJoint__GetAnchorA_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 48 >> 2], $1 + 80 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function b2RopeJoint__GetAnchorB_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 52 >> 2], $1 + 76 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function b2RopeJoint__GetAnchorA_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 48 >> 2], $1 + 68 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function b2GearJoint__GetAnchorA_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 b2Body__GetWorldPoint_28b2Vec2_20const__29_20const($0, HEAP32[$1 + 48 >> 2], $1 + 92 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function decltype_28std____2____unwrap_iter_impl_char__2c_20true_____unwrap_28std__declval_char___28_29_29_29_20std____2____unwrap_iter_5babi_v160004_5d_char__2c_20std____2____unwrap_iter_impl_char__2c_20true__2c_200__28char__29($0) {
 return std____2____unwrap_iter_impl_char__2c_20true_____unwrap_5babi_v160004_5d_28char__29($0);
}

function void_20std____2__allocator_int___construct_5babi_v160004_5d_int_2c_20int_20const___28int__2c_20int_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
}

function void_20emscripten__internal__raw_destructor_b2RopeJoint__28b2RopeJoint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function std____2____compressed_pair_elem_b2Vec2__2c_200_2c_20false_____compressed_pair_elem_5babi_v160004_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 return $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void___getTypes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void____get_28_29();
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2Vec2__IsValid_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if (b2IsValid_28float_29(HEAPF32[$0 >> 2]) & 1) {
  $2 = b2IsValid_28float_29(HEAPF32[$0 + 4 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return $2 & 1;
}

function ContactSetEnabled_28unsigned_20int_2c_20bool_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 b2Contact__SetEnabled_28bool_29(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int____20emscripten__internal__operator_new_std____2__vector_int_2c_20std____2__allocator_int____28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(12);
 std____2__vector_int_2c_20std____2__allocator_int____vector_5babi_v160004_5d_28_29($0);
 return $0 | 0;
}

function std____2____compressed_pair_elem_int__2c_200_2c_20false_____compressed_pair_elem_5babi_v160004_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 return $0;
}

function embind_init_b2_28_29__$_8____invoke_28b2Body__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = embind_init_b2_28_29__$_8__operator_28_29_28b2Body__29_20const($1 + 11 | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20emscripten__internal__raw_destructor_b2PrismaticJointDef__28b2PrismaticJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_20std____2__allocator_char____second_5babi_v160004_5d_28_29($0) {
 return std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_5babi_v160004_5d_28_29($0);
}

function void_20emscripten__internal__raw_destructor_b2RevoluteJointDef__28b2RevoluteJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__raw_destructor_b2DistanceJointDef__28b2DistanceJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function b2World__GetGravity_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $1;
 $2 = HEAP32[$2 + 12 >> 2] + 102964 | 0;
 $1 = HEAP32[$2 >> 2];
 $3 = HEAP32[$2 + 4 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $3;
}

function b2BroadPhase__GetUserData_28int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = b2DynamicTree__GetUserData_28int_29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function b2MouseJoint__GetAnchorA_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $1;
 $2 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 76 >> 2];
 $3 = HEAP32[$2 + 80 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $3;
}

function b2BroadPhase__GetFatAABB_28int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = b2DynamicTree__GetFatAABB_28int_29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function void_20emscripten__internal__raw_destructor_b2Draw__28b2Draw__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function b2SimplexVertex__b2SimplexVertex_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Vec2__b2Vec2_28_29($0);
 b2Vec2__b2Vec2_28_29($0 + 8 | 0);
 b2Vec2__b2Vec2_28_29($0 + 16 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2RayCastCallbackWrapper___b2RayCastCallbackWrapper_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 emscripten__wrapper_b2RayCastCallback____wrapper_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20emscripten__internal__raw_destructor_b2WheelJointDef__28b2WheelJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__raw_destructor_b2RayCastOutput__28b2RayCastOutput__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__raw_destructor_b2MouseJointDef__28b2MouseJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__raw_destructor_b2MotorJointDef__28b2MotorJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function std____2____split_buffer_b2Vec2_2c_20std____2__allocator_b2Vec2______ConstructTransaction____ConstructTransaction_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$0 >> 2];
 return $0;
}

function b2Vec2__b2Vec2_28float_2c_20float_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAPF32[$0 >> 2] = HEAPF32[$3 + 8 >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[$3 + 4 >> 2];
 return $0;
}

function void_20emscripten__internal__raw_destructor_b2WeldJointDef__28b2WeldJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__raw_destructor_b2RopeJointDef__28b2RopeJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__raw_destructor_b2RayCastInput__28b2RayCastInput__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World_20const__2c_20b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 5;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 6;
}

function emscripten__internal__BindingType_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20void___fromWireType_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2ContactListener___b2ContactListener_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2ContactListener___b2ContactListener_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function ContactGetTangentSpeed_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = b2Contact__GetTangentSpeed_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return Math_fround($2);
}

function void__20std____2____libcpp_operator_new_5babi_v160004_5d_unsigned_20long__28unsigned_20long_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = operator_20new_28unsigned_20long_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____operator_5b_5d_5babi_v160004_5d_28unsigned_20long_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + (HEAP32[$2 + 8 >> 2] << 3) | 0;
}

function fmt_x($0, $1, $2, $3) {
 var $4 = 0;
 if ($0 | $1) {
  while (1) {
   $2 = $2 - 1 | 0;
   HEAP8[$2 | 0] = HEAPU8[($0 & 15) + 23920 | 0] | $3;
   $4 = !$1 & $0 >>> 0 > 15 | ($1 | 0) != 0;
   $0 = ($1 & 15) << 28 | $0 >>> 4;
   $1 = $1 >>> 4 | 0;
   if ($4) {
    continue;
   }
   break;
  }
 }
 return $2;
}

function void_20std____2____debug_db_insert_c_5babi_v160004_5d_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______throw_length_error_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 std____2____throw_length_error_5babi_v160004_5d_28char_20const__29(3667);
 wasm2js_trap();
}

function char_20const__20std____2____rewrap_range_5babi_v160004_5d_char_20const__2c_20char_20const__2c_20char_20const___28char_20const__2c_20char_20const__29($0, $1) {
 return std____2____unwrap_range_impl_char_20const__2c_20char_20const______rewrap_5babi_v160004_5d_28char_20const__2c_20char_20const__29($0, $1);
}

function b2QueryCallbackWrapper___b2QueryCallbackWrapper_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 emscripten__wrapper_b2QueryCallback____wrapper_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function ContactGetRestitution_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = b2Contact__GetRestitution_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return Math_fround($2);
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____ConstructTransaction____ConstructTransaction_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[HEAP32[$0 >> 2] + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 return $0;
}

function std____2____split_buffer_int_2c_20std____2__allocator_int______ConstructTransaction____ConstructTransaction_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$0 >> 2];
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 5;
}

function b2PrismaticJoint___b2PrismaticJoint_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2PrismaticJoint___b2PrismaticJoint_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2PolygonContact___b2PolygonContact_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2PolygonContact___b2PolygonContact_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2PrismaticJoint__GetReactionTorque_28float_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 return Math_fround(Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[HEAP32[$2 + 12 >> 2] + 108 >> 2]));
}

function WorldManifoldDelete_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  if ($0) {
   operator_20delete_28void__29($0);
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__raw_destructor_b2Transform__28b2Transform__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function WorldManifoldGetPointValueY_28unsigned_20int_2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return Math_fround(HEAPF32[((HEAP32[$2 + 12 >> 2] + 8 | 0) + (HEAP32[$2 + 8 >> 2] << 3) | 0) + 4 >> 2]);
}

function std____2__vector_int_2c_20std____2__allocator_int____operator_5b_5d_5babi_v160004_5d_28unsigned_20long_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + (HEAP32[$2 + 8 >> 2] << 2) | 0;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int____get_28_29() {
 return 27744;
}

function b2RevoluteJoint__GetReactionTorque_28float_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 return Math_fround(Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[HEAP32[$2 + 12 >> 2] + 92 >> 2]));
}

function b2FrictionJoint__GetReactionTorque_28float_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 return Math_fround(Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[HEAP32[$2 + 12 >> 2] + 92 >> 2]));
}

function void_20emscripten__internal__raw_destructor_b2MassData__28b2MassData__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__raw_destructor_b2JointDef__28b2JointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int______throw_length_error_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 std____2____throw_length_error_5babi_v160004_5d_28char_20const__29(3667);
 wasm2js_trap();
}

function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_200_2c_20false_____get_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int____get_28_29() {
 return 27408;
}

function b2Vec2__operator___28float_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] * HEAPF32[$2 + 8 >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] * HEAPF32[$2 + 8 >> 2];
}

function b2RevoluteJoint___b2RevoluteJoint_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2RevoluteJoint___b2RevoluteJoint_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2FrictionJoint___b2FrictionJoint_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2FrictionJoint___b2FrictionJoint_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2DistanceJoint___b2DistanceJoint_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2DistanceJoint___b2DistanceJoint_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2ContactFilter___b2ContactFilter_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2ContactFilter___b2ContactFilter_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2CircleContact___b2CircleContact_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2CircleContact___b2CircleContact_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function ContactGetFriction_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = b2Contact__GetFriction_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return Math_fround($2);
}

function std____2__vector_int_2c_20std____2__allocator_int_____ConstructTransaction____ConstructTransaction_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[HEAP32[$0 >> 2] + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 return $0;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____operator_5b_5d_5babi_v160004_5d_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + (HEAP32[$2 + 8 >> 2] << 3) | 0;
}

function std____2____unwrap_iter_impl_std____2__reverse_iterator_b2Vec2___2c_20false_____unwrap_5babi_v160004_5d_28std____2__reverse_iterator_b2Vec2___29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
 return HEAP32[$1 + 12 >> 2];
}

function b2WheelJoint__GetReactionTorque_28float_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 return Math_fround(Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[HEAP32[$2 + 12 >> 2] + 112 >> 2]));
}

function b2PrismaticJoint__GetMotorForce_28float_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 return Math_fround(Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[HEAP32[$2 + 12 >> 2] + 116 >> 2]));
}

function void_20emscripten__internal__raw_destructor_b2Fixture__28b2Fixture__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__val__take_ownership_28emscripten___EM_VAL__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 emscripten__val__val_28emscripten___EM_VAL__29($0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int____get_28_29() {
 return 27568;
}

function b2WeldJoint__GetReactionTorque_28float_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 return Math_fround(Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[HEAP32[$2 + 12 >> 2] + 112 >> 2]));
}

function b2RevoluteJoint__GetMotorTorque_28float_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 return Math_fround(Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[HEAP32[$2 + 12 >> 2] + 96 >> 2]));
}

function b2MotorJoint__GetReactionTorque_28float_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 return Math_fround(Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[HEAP32[$2 + 12 >> 2] + 88 >> 2]));
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 5;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 5;
}

function b2Mat33__b2Mat33_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Vec3__b2Vec3_28_29($0);
 b2Vec3__b2Vec3_28_29($0 + 12 | 0);
 b2Vec3__b2Vec3_28_29($0 + 24 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function WorldManifoldGetSeparationValue_28unsigned_20int_2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return Math_fround(HEAPF32[(HEAP32[$2 + 12 >> 2] + 24 | 0) + (HEAP32[$2 + 8 >> 2] << 2) >> 2]);
}

function void_20emscripten__internal__raw_destructor_b2Filter__28b2Filter__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function std____2__pointer_traits_std____2____tree_end_node_std____2____tree_node_base_void________pointer_to_5babi_v160004_5d_28std____2____tree_end_node_std____2____tree_node_base_void______29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 5;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__BindingType_std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20void___fromWireType_28std____2__vector_int_2c_20std____2__allocator_int___20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function embind_init_b2_28_29__$_8__operator_28_29_28b2Body__29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = b2Body__GetJointList_28_29(HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function b2WheelJoint__GetMotorTorque_28float_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 return Math_fround(Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[HEAP32[$2 + 12 >> 2] + 112 >> 2]));
}

function b2Sweep__b2Sweep_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Vec2__b2Vec2_28_29($0);
 b2Vec2__b2Vec2_28_29($0 + 8 | 0);
 b2Vec2__b2Vec2_28_29($0 + 16 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2PolygonShape___b2PolygonShape_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2PolygonShape___b2PolygonShape_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function ContactImpulseGetTangentImpulse_28unsigned_20int_2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return Math_fround(HEAPF32[(HEAP32[$2 + 12 >> 2] + 8 | 0) + (HEAP32[$2 + 8 >> 2] << 2) >> 2]);
}

function bool_20std____2____tree_is_left_child_5babi_v160004_5d_std____2____tree_node_base_void_____28std____2____tree_node_base_void____29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] == HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] >> 2];
}

function void_20emscripten__internal__raw_destructor_b2Color__28b2Color__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 5;
}

function emscripten__internal__DestructorsRunner__DestructorsRunner_28emscripten__internal___EM_DESTRUCTORS__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 return $0;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20emscripten__internal__AllowedRawPointer_b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int____get_28_29() {
 return 27152;
}

function b2Vec2__Set_28float_2c_20float_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAPF32[$0 >> 2] = HEAPF32[$3 + 8 >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[$3 + 4 >> 2];
}

function b2PositionSolverManifold__b2PositionSolverManifold_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Vec2__b2Vec2_28_29($0);
 b2Vec2__b2Vec2_28_29($0 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__vector_int_2c_20std____2__allocator_int____operator_5b_5d_5babi_v160004_5d_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + (HEAP32[$2 + 8 >> 2] << 2) | 0;
}

function std____2____unwrap_iter_impl_std____2__reverse_iterator_int___2c_20false_____unwrap_5babi_v160004_5d_28std____2__reverse_iterator_int___29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
 return HEAP32[$1 + 12 >> 2];
}

function float_20b2Min_float__28float_2c_20float_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAPF32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 if (HEAPF32[$2 + 12 >> 2] < HEAPF32[$2 + 8 >> 2]) {
  $0 = HEAPF32[$2 + 12 >> 2];
 } else {
  $0 = HEAPF32[$2 + 8 >> 2];
 }
 return $0;
}

function float_20b2Max_float__28float_2c_20float_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAPF32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 if (HEAPF32[$2 + 12 >> 2] > HEAPF32[$2 + 8 >> 2]) {
  $0 = HEAPF32[$2 + 12 >> 2];
 } else {
  $0 = HEAPF32[$2 + 8 >> 2];
 }
 return $0;
}

function void_20emscripten__internal__raw_destructor_b2Vec2__28b2Vec2__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function void_20emscripten__internal__raw_destructor_b2AABB__28b2AABB__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function std____2____compressed_pair_elem_std____2____tree_node_destructor_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____2c_201_2c_20false_____get_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__BindingType_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20void___fromWireType_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2PulleyJoint___b2PulleyJoint_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2PulleyJoint___b2PulleyJoint_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2PulleyJoint__GetGroundAnchorB_28_29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $1;
 $2 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 76 >> 2];
 $3 = HEAP32[$2 + 80 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $3;
}

function b2PulleyJoint__GetGroundAnchorA_28_29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $1;
 $2 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 68 >> 2];
 $3 = HEAP32[$2 + 72 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $3;
}

function b2DrawWrapper___b2DrawWrapper_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2DrawWrapper___b2DrawWrapper_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2CircleShape___b2CircleShape_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2CircleShape___b2CircleShape_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function WorldManifoldGetPointValueX_28unsigned_20int_2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return Math_fround(HEAPF32[(HEAP32[$2 + 12 >> 2] + 8 | 0) + (HEAP32[$2 + 8 >> 2] << 3) >> 2]);
}

function b2Vec2__Length_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return Math_fround(Math_sqrt(Math_fround(Math_fround(HEAPF32[$0 >> 2] * HEAPF32[$0 >> 2]) + Math_fround(HEAPF32[$0 + 4 >> 2] * HEAPF32[$0 + 4 >> 2]))));
}

function void_20emscripten__internal__raw_destructor_b2Rot__28b2Rot__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function std____2__reverse_iterator_b2Vec2____operator__5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 $0 = HEAP32[$1 + 8 >> 2] - 8 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 5;
}

function emscripten__internal__BindingType_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20void___toWireType_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function embind_init_b2_28_29__$_5__operator_28_29_28b2FixtureDef__2c_20b2Shape_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[$3 + 4 >> 2];
}

function b2MixRestitution_28float_2c_20float_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAPF32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 if (HEAPF32[$2 + 12 >> 2] > HEAPF32[$2 + 8 >> 2]) {
  $0 = HEAPF32[$2 + 12 >> 2];
 } else {
  $0 = HEAPF32[$2 + 8 >> 2];
 }
 return $0;
}

function emscripten__internal__GenericBindingType_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____fromWireType_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2WheelJoint___b2WheelJoint_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2WheelJoint___b2WheelJoint_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2MouseJoint___b2MouseJoint_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2MouseJoint___b2MouseJoint_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2MotorJoint___b2MotorJoint_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2MotorJoint___b2MotorJoint_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__reverse_iterator_int____operator__5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 $0 = HEAP32[$1 + 8 >> 2] - 4 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 return $0;
}

function emscripten__val__val_28emscripten__val___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 HEAP32[HEAP32[$2 + 8 >> 2] >> 2] = 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20float_2c_20b2Color_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 5;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const____get_28_29();
}

function b2PolygonAndCircleContact___b2PolygonAndCircleContact_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Contact___b2Contact_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2MassData__20emscripten__internal__raw_constructor_b2MassData__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(16);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 b2MassData__b2MassData_28_29($0);
 return $0 | 0;
}

function b2ContactManager__FindNewContacts_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 void_20b2BroadPhase__UpdatePairs_b2ContactManager__28b2ContactManager__29($0, $0);
 __stack_pointer = $1 + 16 | 0;
}

function EmBindInit_b2__EmBindInit_b2_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 emscripten__internal__InitFunc__InitFunc_28void_20_28__29_28_29_29($0, 1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World_20const__2c_20b2QueryCallback__2c_20b2AABB_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function embind_init_b2_28_29__$_11__operator_28_29_28b2JointDef__2c_20b2Body__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[HEAP32[$3 + 8 >> 2] + 12 >> 2] = HEAP32[$3 + 4 >> 2];
}

function b2StackAllocator__b2StackAllocator_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 102400 >> 2] = 0;
 HEAP32[$0 + 102404 >> 2] = 0;
 HEAP32[$0 + 102408 >> 2] = 0;
 HEAP32[$0 + 102796 >> 2] = 0;
 return $0;
}

function b2ChainAndPolygonContact___b2ChainAndPolygonContact_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Contact___b2Contact_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function ContactImpulseGetNormalImpulse_28unsigned_20int_2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return Math_fround(HEAPF32[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) >> 2]);
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20unsigned_20int_2c_20int_2c_20b2Color_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 5;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListener__2c_20unsigned_20int_2c_20unsigned_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function b2WeldJoint___b2WeldJoint_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2WeldJoint___b2WeldJoint_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2RopeJoint___b2RopeJoint_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2RopeJoint___b2RopeJoint_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2GearJoint___b2GearJoint_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2GearJoint___b2GearJoint_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function b2EdgeShape___b2EdgeShape_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2EdgeShape___b2EdgeShape_28_29($0);
 operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__internal__DestructorsRunner___DestructorsRunner_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 _emval_run_destructors(HEAP32[$0 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function embind_init_b2_28_29__$_9__operator_28_29_28b2JointDef__2c_20b2Body__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[HEAP32[$3 + 8 >> 2] + 8 >> 2] = HEAP32[$3 + 4 >> 2];
}

function b2EdgeAndPolygonContact___b2EdgeAndPolygonContact_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Contact___b2Contact_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2ChainAndCircleContact___b2ChainAndCircleContact_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Contact___b2Contact_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2BlockAllocator_____get_28_29() {
 return 27684;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2BlockAllocator_____get_28_29() {
 return 27344;
}

function embind_init_b2_28_29__$_2__operator_28_29_28b2Shape__2c_20float_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 HEAPF32[HEAP32[$3 + 8 >> 2] + 8 >> 2] = HEAPF32[$3 + 4 >> 2];
}

function b2EdgeAndCircleContact___b2EdgeAndCircleContact_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Contact___b2Contact_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__BindingType_std____2__vector_int_2c_20std____2__allocator_int____2c_20void___fromWireType_28std____2__vector_int_2c_20std____2__allocator_int____29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2RayCastOutput__20emscripten__internal__raw_constructor_b2RayCastOutput__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(12);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 b2RayCastOutput__b2RayCastOutput_28_29($0);
 return $0 | 0;
}

function int_20b2Min_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 8 >> 2]) {
  $0 = HEAP32[$2 + 12 >> 2];
 } else {
  $0 = HEAP32[$2 + 8 >> 2];
 }
 return $0;
}

function int_20b2Max_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[$2 + 12 >> 2] > HEAP32[$2 + 8 >> 2]) {
  $0 = HEAP32[$2 + 12 >> 2];
 } else {
  $0 = HEAP32[$2 + 8 >> 2];
 }
 return $0;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2BlockAllocator_____get_28_29() {
 return 27520;
}

function b2Draw__ClearFlags_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] & (HEAP32[$2 + 8 >> 2] ^ -1);
}

function b2DrawWrapper___b2DrawWrapper_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 emscripten__wrapper_b2Draw____wrapper_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2BroadPhase__TouchProxy_28int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 b2BroadPhase__BufferMove_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function auto_20std____2____unwrap_range_5babi_v160004_5d_char_20const__2c_20char_20const___28char_20const__2c_20char_20const__29($0, $1, $2) {
 std____2____unwrap_range_impl_char_20const__2c_20char_20const______unwrap_5babi_v160004_5d_28char_20const__2c_20char_20const__29($0, $1, $2);
}

function std____2____tree_node_base_void______set_parent_5babi_v160004_5d_28std____2____tree_node_base_void____29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = HEAP32[$2 + 8 >> 2];
}

function fmt_o($0, $1, $2) {
 var $3 = 0;
 if ($0 | $1) {
  while (1) {
   $2 = $2 - 1 | 0;
   HEAP8[$2 | 0] = $0 & 7 | 48;
   $3 = !$1 & $0 >>> 0 > 7 | ($1 | 0) != 0;
   $0 = ($1 & 7) << 29 | $0 >>> 3;
   $1 = $1 >>> 3 | 0;
   if ($3) {
    continue;
   }
   break;
  }
 }
 return $2;
}

function emscripten__internal__BindingType_std____2__vector_int_2c_20std____2__allocator_int____2c_20void___toWireType_28std____2__vector_int_2c_20std____2__allocator_int____29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20float____get_28_29() {
 return 28208;
}

function b2DistanceOutput__b2DistanceOutput_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Vec2__b2Vec2_28_29($0);
 b2Vec2__b2Vec2_28_29($0 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2MassData__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function b2RayCastCallback__20emscripten__base_b2RayCastCallback___convertPointer_b2RayCastCallbackWrapper_2c_20b2RayCastCallback__28b2RayCastCallbackWrapper__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2RayCastCallbackWrapper__20emscripten__base_b2RayCastCallback___convertPointer_b2RayCastCallback_2c_20b2RayCastCallbackWrapper__28b2RayCastCallback__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2ContactListener__20emscripten__base_b2ContactListener___convertPointer_b2ContactListenerWrapper_2c_20b2ContactListener__28b2ContactListenerWrapper__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2ContactListenerWrapper__20emscripten__base_b2ContactListener___convertPointer_b2ContactListener_2c_20b2ContactListenerWrapper__28b2ContactListener__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2MassData__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2BlockAllocator____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__GenericBindingType_std____2__vector_int_2c_20std____2__allocator_int_____fromWireType_28std____2__vector_int_2c_20std____2__allocator_int____29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Fixture__GetType_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = b2Shape__GetType_28_29_20const(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function std____2__reverse_iterator_b2Vec2____reverse_iterator_5babi_v160004_5d_28b2Vec2__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2BlockAllocator____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20b2Vec2_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__vector_int_2c_20std____2__allocator_int___20const____get_28_29();
}

function b2JointDef__b2JointDef_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP8[$0 + 16 | 0] = 0;
 return $0;
}

function void_20_28_emscripten__select_overload_void_20_28b2RayCastCallbackWrapper__29__28void_20_28__29_28b2RayCastCallbackWrapper__29_29_29_28b2RayCastCallbackWrapper__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function void_20_28_emscripten__select_overload_void_20_28b2ContactListenerWrapper__29__28void_20_28__29_28b2ContactListenerWrapper__29_29_29_28b2ContactListenerWrapper__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function unsigned_20long_20std____2__allocator_traits_std____2__allocator_char____max_size_5babi_v160004_5d_std____2__allocator_char__2c_20void_2c_20void__28std____2__allocator_char__20const__29($0) {
 return std____2__numeric_limits_unsigned_20long___max_5babi_v160004_5d_28_29();
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2MassData__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World_20const__2c_20emscripten__internal__AllowedRawPointer_b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const_____get_28_29() {
 return 27008;
}

function b2Vec2__LengthSquared_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return Math_fround(Math_fround(HEAPF32[$0 >> 2] * HEAPF32[$0 >> 2]) + Math_fround(HEAPF32[$0 + 4 >> 2] * HEAPF32[$0 + 4 >> 2]));
}

function b2RayCastInput__b2RayCastInput_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Vec2__b2Vec2_28_29($0);
 b2Vec2__b2Vec2_28_29($0 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2BlockAllocator____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_unsigned_20long_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function b2MouseJoint__GetReactionTorque_28float_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 return Math_fround(Math_fround(HEAPF32[$2 + 8 >> 2] * Math_fround(0)));
}

function b2EdgeShape__TestPoint_28b2Transform_20const__2c_20b2Vec2_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return 0;
}

function b2Draw__AppendFlags_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 8 >> 2] | HEAP32[$0 + 4 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Shape_20const__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2FixtureDef_20const_____get_28_29() {
 return 28192;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______get_28_29();
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2MassData__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20emscripten__internal__AllowedRawPointer_b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int____get_28_29() {
 return 28080;
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____size_5babi_v160004_5d_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 3;
}

function std____2__reverse_iterator_int____reverse_iterator_5babi_v160004_5d_28int__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 return $0;
}

function std____2__pair_char_20const__2c_20char_20const____pair_5babi_v160004_5d_char_20const__2c_20char_20const__2c_20_28void__290__28char_20const____2c_20char_20const____29($0, $1, $2) {
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 >> 2];
 return $0;
}

function std____2____tree_const_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long_____get_np_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Joint__2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20emscripten__internal__AllowedRawPointer_b2JointDef_20const_____get_28_29() {
 return 26888;
}

function b2PolygonContact___b2PolygonContact_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Contact___b2Contact_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2IsValid_28float_29($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF32[$1 + 12 >> 2] = $0;
 $2 = bool_20isfinite_5babi_v160004_5d_float_2c_200__28float_29(HEAPF32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $2 & 1;
}

function void_20_28_emscripten__select_overload_void_20_28b2QueryCallbackWrapper__29__28void_20_28__29_28b2QueryCallbackWrapper__29_29_29_28b2QueryCallbackWrapper__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2AABB__20emscripten__internal__operator_new_b2AABB__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(16);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 b2AABB__b2AABB_28_29($0);
 return $0 | 0;
}

function __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0) | 0;
}

function ContactIsTouching_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = b2Contact__IsTouching_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function emscripten__internal__WithPolicies____ArgTypeList_unsigned_20long_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int___20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20emscripten__internal__AllowedRawPointer_b2BodyDef_20const_____get_28_29() {
 return 26816;
}

function b2QueryCallback__20emscripten__base_b2QueryCallback___convertPointer_b2QueryCallbackWrapper_2c_20b2QueryCallback__28b2QueryCallbackWrapper__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2QueryCallbackWrapper__20emscripten__base_b2QueryCallback___convertPointer_b2QueryCallback_2c_20b2QueryCallbackWrapper__28b2QueryCallback__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2CircleContact___b2CircleContact_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Contact___b2Contact_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function ManifoldGetManifoldPointPtr_28unsigned_20int_2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 20) | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2FixtureDef_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int____2c_20int_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function b2Transform__b2Transform_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Vec2__b2Vec2_28_29($0);
 b2Rot__b2Rot_28_29($0 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20std____2____libcpp_operator_delete_5babi_v160004_5d_void___28void__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 operator_20delete_28void__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape__2c_20float_2c_20float_2c_20b2Vec2_20const__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 6;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2AABB__2c_20emscripten__internal__AllowedRawPointer_b2AABB__2c_20emscripten__internal__AllowedRawPointer_b2AABB_____get_28_29() {
 return 26672;
}

function b2PrismaticJoint___b2PrismaticJoint_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Joint___b2Joint_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function GetFloat32_28unsigned_20int_2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return Math_fround(HEAPF32[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) >> 2]);
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListener__2c_20unsigned_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function std____2__vector_int_2c_20std____2__allocator_int____size_5babi_v160004_5d_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
}

function std____2__allocator_traits_std____2__allocator_char____deallocate_5babi_v160004_5d_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($0, $1, $2) {
 std____2__allocator_char___deallocate_5babi_v160004_5d_28char__2c_20unsigned_20long_29($0, $1, $2);
}

function std____2____tree_iterator_b2Fixture__2c_20std____2____tree_node_b2Fixture__2c_20void____2c_20long_____get_np_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Joint__2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2JointDef_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2AABB__2c_20b2Transform_20const__2c_20int____get_28_29() {
 return 27776;
}

function char__20std____2____rewrap_iter_5babi_v160004_5d_char__2c_20char__2c_20std____2____unwrap_iter_impl_char__2c_20true___28char__2c_20char__29($0, $1) {
 return std____2____unwrap_iter_impl_char__2c_20true_____rewrap_5babi_v160004_5d_28char__2c_20char__29($0, $1);
}

function b2RevoluteJoint___b2RevoluteJoint_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Joint___b2Joint_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2FrictionJoint___b2FrictionJoint_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Joint___b2Joint_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2DistanceJoint___b2DistanceJoint_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Joint___b2Joint_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function std____2____compressed_pair_elem_std____2____tree_end_node_std____2____tree_node_base_void_____2c_200_2c_20false_____get_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2QueryCallback__2c_20unsigned_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2AABB__2c_20b2Transform_20const__2c_20int____get_28_29() {
 return 27440;
}

function ContactGetManifold_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = b2Contact__GetManifold_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function ContactGetFixtureB_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = b2Contact__GetFixtureB_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function ContactGetFixtureA_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = b2Contact__GetFixtureA_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20b2MassData____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2BodyDef_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function b2WheelJoint__SetSpringDampingRatio_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 72 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function b2PolygonShape___b2PolygonShape_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Shape___b2Shape_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function __cxxabiv1____enum_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0) | 0;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2AABB__2c_20b2Transform_20const__2c_20int____get_28_29() {
 return 27600;
}

function b2WheelJoint__SetSpringFrequencyHz_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 68 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function b2Mat22__b2Mat22_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Vec2__b2Vec2_28_29($0);
 b2Vec2__b2Vec2_28_29($0 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2GrowableStack_int_2c_20256___b2GrowableStack_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = $0 + 4;
 HEAP32[$0 + 1028 >> 2] = 0;
 HEAP32[$0 + 1032 >> 2] = 256;
 return $0;
}

function float_20b2Abs_float__28float_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF32[$1 + 12 >> 2] = $0;
 if (HEAPF32[$1 + 12 >> 2] > Math_fround(0)) {
  $0 = HEAPF32[$1 + 12 >> 2];
 } else {
  $0 = Math_fround(-HEAPF32[$1 + 12 >> 2]);
 }
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Transform_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int____2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__vector_int_2c_20std____2__allocator_int______get_28_29();
}

function b2PulleyJoint___b2PulleyJoint_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Joint___b2Joint_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2CircleShape___b2CircleShape_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Shape___b2Shape_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function void_20const__20emscripten__internal__getLightTypeID_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 25136;
}

function void_20const__20emscripten__internal__getLightTypeID_b2RayCastCallbackWrapper__28b2RayCastCallbackWrapper_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function void_20const__20emscripten__internal__getLightTypeID_b2ContactListenerWrapper__28b2ContactListenerWrapper_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2ContactListener____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const__2c_20b2MassData____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const__2c_20emscripten__internal__AllowedRawPointer_b2RayCastOutput__2c_20b2RayCastInput_20const_____get_28_29() {
 return 26704;
}

function b2World__SetContactListener_28b2ContactListener__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 102940 >> 2] = HEAP32[$2 + 8 >> 2];
}

function b2DistanceJoint__SetDampingRatio_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 72 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function b2AABB__b2AABB_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Vec2__b2Vec2_28_29($0);
 b2Vec2__b2Vec2_28_29($0 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_elem_std____2__allocator_std____2____tree_node_b2Fixture__2c_20void____2c_201_2c_20true_____get_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2WheelJoint___b2WheelJoint_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Joint___b2Joint_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2MouseJoint___b2MouseJoint_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Joint___b2Joint_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2MotorJoint___b2MotorJoint_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Joint___b2Joint_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2ContactManager___b2ContactManager_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2BroadPhase___b2BroadPhase_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3) {
 if (!(HEAP32[$1 + 28 >> 2] == 1 | HEAP32[$1 + 4 >> 2] != ($2 | 0))) {
  HEAP32[$1 + 28 >> 2] = $3;
 }
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20emscripten__internal__AllowedRawPointer_b2AABB__2c_20b2Transform_20const__2c_20int____get_28_29() {
 return 27184;
}

function std____2____non_trivial_if_true_2c_20std____2__allocator_std____2____tree_node_b2Fixture__2c_20void________non_trivial_if_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 5;
}

function b2WeldJoint___b2WeldJoint_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Joint___b2Joint_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2RopeJoint___b2RopeJoint_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Joint___b2Joint_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2MouseJoint__SetDampingRatio_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 88 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function b2GearJoint___b2GearJoint_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Joint___b2Joint_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2EdgeShape___b2EdgeShape_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Shape___b2Shape_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function b2DistanceJoint__SetFrequency_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 68 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function void_20const__20emscripten__internal__getLightTypeID_b2QueryCallbackWrapper__28b2QueryCallbackWrapper_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function std____2____compressed_pair_elem_std____2____tree_end_node_std____2____tree_node_base_void_____2c_200_2c_20false_____get_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const_____get_28_29() {
 return 25536;
}

function b2WeldJoint__SetDampingRatio_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 72 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function b2Log_28char_20const__2c_20____29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 vprintf(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function b2DistanceJoint__SetLength_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 104 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function b2ContactListener__PostSolve_28unsigned_20int_2c_20unsigned_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
}

function void_20std____2____debug_db_erase_c_5babi_v160004_5d_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____29($0) {}

function std____2____unwrap_iter_impl_char_20const__2c_20true_____rewrap_5babi_v160004_5d_28char_20const__2c_20char_20const__29($0, $1) {
 return ($1 - char_20const__20std____2____to_address_5babi_v160004_5d_char_20const__28char_20const__29($0) | 0) + $0 | 0;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const_____get_28_29() {
 return 25200;
}

function b2MouseJoint__SetMaxForce_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 104 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function b2MouseJoint__SetFrequency_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 84 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function b2DynamicTree___b2DynamicTree_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Free_28void__29(HEAP32[$0 + 4 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2ContactListener__PreSolve_28unsigned_20int_2c_20unsigned_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
}

function b2Body__SetAngularDamping_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 136 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World_20const__2c_20emscripten__internal__AllowedRawPointer_b2QueryCallback__2c_20b2AABB_20const_____get_28_29() {
 return 26992;
}

function b2WeldJoint__SetFrequency_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 68 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function b2RopeJoint__SetMaxLength_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 84 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function b2Fixture__SetRestitution_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 20 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function b2Body__SetLinearDamping_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 132 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function ContactResetRestitution_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 b2Contact__ResetRestitution_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function b2Body__SetGravityScale_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 140 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Fixture____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Joint____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function b2Fixture__SetFriction_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Draw____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Body____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function void_20const__20emscripten__internal__getLightTypeID_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int___20const__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 25012;
}

function std____2____compressed_pair_elem_std____2____tree_node_b2Fixture__2c_20void____2c_200_2c_20false_____get_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2PrismaticJointDef__20emscripten__base_b2JointDef___convertPointer_b2JointDef_2c_20b2PrismaticJointDef__28b2JointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2JointDef__20emscripten__base_b2JointDef___convertPointer_b2PrismaticJointDef_2c_20b2JointDef__28b2PrismaticJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2__pair_char_20const__2c_20char____pair_5babi_v160004_5d_char_20const___2c_20char__2c_20_28void__290__28char_20const___2c_20char____29($0, $1, $2) {
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 >> 2];
 return $0;
}

function std____2__pair_char_20const__2c_20char____pair_5babi_v160004_5d_char_20const__2c_20char__2c_20_28void__290__28char_20const____2c_20char____29($0, $1, $2) {
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 >> 2];
 return $0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v160004_5d_28_29_20const($0) {
 std____2____throw_length_error_5babi_v160004_5d_28char_20const__29(7497);
 wasm2js_trap();
}

function std____2____tree_b2Fixture__2c_20std____2__less_b2Fixture___2c_20std____2__allocator_b2Fixture_______begin_node_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function ContactResetFriction_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 b2Contact__ResetFriction_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function void_20const__20emscripten__internal__getLightTypeID_b2RayCastCallback__28b2RayCastCallback_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function void_20const__20emscripten__internal__getLightTypeID_b2ContactListener__28b2ContactListener_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function std____2____tree_end_node_std____2____tree_node_base_void________tree_end_node_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointer_emscripten__ret_val____ArgTypeList_b2RayCastCallbackWrapper__2c_20emscripten__val_____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointer_emscripten__ret_val____ArgTypeList_b2ContactListenerWrapper__2c_20emscripten__val_____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RayCastCallback__2c_20unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float____get_28_29() {
 return 25600;
}

function b2RevoluteJointDef__20emscripten__base_b2JointDef___convertPointer_b2JointDef_2c_20b2RevoluteJointDef__28b2JointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2JointDef__20emscripten__base_b2JointDef___convertPointer_b2RevoluteJointDef_2c_20b2JointDef__28b2RevoluteJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2JointDef__20emscripten__base_b2JointDef___convertPointer_b2DistanceJointDef_2c_20b2JointDef__28b2DistanceJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2DistanceJointDef__20emscripten__base_b2JointDef___convertPointer_b2JointDef_2c_20b2DistanceJointDef__28b2JointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const_____get_28_29() {
 return 25072;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2MassData__2c_20float____get_28_29() {
 return 27808;
}

function void_20std____2____debug_db_invalidate_all_5babi_v160004_5d_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function void_20const__20emscripten__internal__getLightTypeID_b2PrismaticJoint__28b2PrismaticJoint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Fixture____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointer_emscripten__ret_val____ArgTypeList_b2QueryCallbackWrapper__2c_20emscripten__val_____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2MassData__2c_20float____get_28_29() {
 return 27472;
}

function void_20_28_emscripten__select_overload_void_20_28b2DrawWrapper__29__28void_20_28__29_28b2DrawWrapper__29_29_29_28b2DrawWrapper__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper__2c_20unsigned_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper__2c_20unsigned_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function b2World__SetDebugDraw_28b2Draw__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 102980 >> 2] = HEAP32[$2 + 8 >> 2];
}

function b2RayCastOutput__b2RayCastOutput_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Vec2__b2Vec2_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function b2ManifoldPoint__b2ManifoldPoint_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Vec2__b2Vec2_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20const__20emscripten__internal__getLightTypeID_b2RevoluteJoint__28b2RevoluteJoint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function void_20const__20emscripten__internal__getLightTypeID_b2QueryCallback__28b2QueryCallback_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function void_20const__20emscripten__internal__getLightTypeID_b2DistanceJoint__28b2DistanceJoint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2Fixture____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int____get_28_29() {
 return 27712;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20emscripten__internal__AllowedRawPointer_b2MassData__2c_20float____get_28_29() {
 return 27632;
}

function b2MixFriction_28float_2c_20float_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAPF32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 return Math_fround(Math_sqrt(Math_fround(HEAPF32[$2 + 12 >> 2] * HEAPF32[$2 + 8 >> 2])));
}

function b2DistanceJoint__GetReactionTorque_28float_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 return Math_fround(Math_fround(0));
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2Fixture____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function b2MassData__b2MassData_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Vec2__b2Vec2_28_29($0 + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20const__20emscripten__internal__getLightTypeID_b2PolygonShape__28b2PolygonShape_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function std____2____compressed_pair_elem_std____2____tree_node_b2Fixture__2c_20void____2c_200_2c_20false_____get_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__val__val_28emscripten___EM_VAL__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 return $0;
}

function b2WheelJointDef__20emscripten__base_b2JointDef___convertPointer_b2JointDef_2c_20b2WheelJointDef__28b2JointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2PulleyJoint__GetReactionTorque_28float_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 return Math_fround(Math_fround(0));
}

function b2MouseJointDef__20emscripten__base_b2JointDef___convertPointer_b2JointDef_2c_20b2MouseJointDef__28b2JointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2MotorJointDef__20emscripten__base_b2JointDef___convertPointer_b2JointDef_2c_20b2MotorJointDef__28b2JointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2JointDef__20emscripten__base_b2JointDef___convertPointer_b2WheelJointDef_2c_20b2JointDef__28b2WheelJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2JointDef__20emscripten__base_b2JointDef___convertPointer_b2MouseJointDef_2c_20b2JointDef__28b2MouseJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2JointDef__20emscripten__base_b2JointDef___convertPointer_b2MotorJointDef_2c_20b2JointDef__28b2MotorJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Draw__SetFlags_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = HEAP32[$2 + 8 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2World__2c_20emscripten__internal__AllowedRawPointer_b2Body____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2Joint____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function void_20std____2____debug_db_insert_c_5babi_v160004_5d_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function void_20const__20emscripten__internal__getLightTypeID_b2DrawWrapper__28b2DrawWrapper_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function void_20const__20emscripten__internal__getLightTypeID_b2CircleShape__28b2CircleShape_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function emscripten__val___val_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 _emval_decref(HEAP32[$0 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20emscripten__internal__AllowedRawPointer_b2MassData__2c_20float____get_28_29() {
 return 27216;
}

function b2WeldJointDef__20emscripten__base_b2JointDef___convertPointer_b2JointDef_2c_20b2WeldJointDef__28b2JointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2RopeJoint__GetReactionTorque_28float_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 return Math_fround(Math_fround(0));
}

function b2RopeJointDef__20emscripten__base_b2JointDef___convertPointer_b2JointDef_2c_20b2RopeJointDef__28b2JointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Mat22__SetZero_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAPF32[$0 >> 2] = 0;
 HEAPF32[$0 + 8 >> 2] = 0;
 HEAPF32[$0 + 4 >> 2] = 0;
 HEAPF32[$0 + 12 >> 2] = 0;
}

function b2JointDef__20emscripten__base_b2JointDef___convertPointer_b2WeldJointDef_2c_20b2JointDef__28b2WeldJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2JointDef__20emscripten__base_b2JointDef___convertPointer_b2RopeJointDef_2c_20b2JointDef__28b2RopeJointDef__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function void_20std____2____debug_db_erase_c_5babi_v160004_5d_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function emscripten__internal__WrapperBase__setNotifyJSOnDestruction_28bool_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP8[HEAP32[$2 + 12 >> 2]] = HEAP8[$2 + 11 | 0] & 1;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20float_2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20b2Vec2_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function b2ClipVertex__b2ClipVertex_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 b2Vec2__b2Vec2_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function void_20const__20emscripten__internal__getLightTypeID_b2WheelJoint__28b2WheelJoint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function void_20const__20emscripten__internal__getLightTypeID_b2MouseJoint__28b2MouseJoint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function void_20const__20emscripten__internal__getLightTypeID_b2MotorJoint__28b2MotorJoint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function std____2____compressed_pair_elem_std____2__allocator_b2Vec2___2c_201_2c_20false_____get_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20float_2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20bool___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const__2c_20b2Vec2_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2AABB_20const__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const_____get_28_29() {
 return 26240;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointer_emscripten__ret_val____ArgTypeList_b2DrawWrapper__2c_20emscripten__val_____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20float_2c_20int_2c_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 5;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape__2c_20float_2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function embind_init_b2_28_29__$_4__operator_20void_20_28__29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 716;
}

function void_20const__20emscripten__internal__getLightTypeID_b2WeldJoint__28b2WeldJoint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function void_20const__20emscripten__internal__getLightTypeID_b2RopeJoint__28b2RopeJoint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function void_20const__20emscripten__internal__getLightTypeID_b2EdgeShape__28b2EdgeShape_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const__2c_20b2AABB_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function std____2__reverse_iterator_b2Vec2____operator___5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - 8;
 return $0;
}

function std____2____compressed_pair_elem_std____2__allocator_int___2c_201_2c_20false_____get_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20b2Vec2_20const_____get_28_29() {
 return 25180;
}

function b2PrismaticJoint__20emscripten__base_b2Joint___convertPointer_b2Joint_2c_20b2PrismaticJoint__28b2Joint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Joint__20emscripten__base_b2Joint___convertPointer_b2PrismaticJoint_2c_20b2Joint__28b2PrismaticJoint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function void_20std____2____debug_db_invalidate_all_5babi_v160004_5d_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int____29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint__2c_20b2Vec2_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint__2c_20b2Vec2_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Vec2_2c_20b2Transform_20const__2c_20b2Vec2_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20b2Filter_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__TypeID_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____get_28_29();
}

function emscripten__internal__BindingType_unsigned_20short_2c_20void___toWireType_28unsigned_20short_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU16[HEAP32[$1 + 12 >> 2] >> 1];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_unsigned_20long_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const_____get_28_29() {
 return 25216;
}

function b2RevoluteJoint__20emscripten__base_b2Joint___convertPointer_b2Joint_2c_20b2RevoluteJoint__28b2Joint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Joint__20emscripten__base_b2Joint___convertPointer_b2RevoluteJoint_2c_20b2Joint__28b2RevoluteJoint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Joint__20emscripten__base_b2Joint___convertPointer_b2DistanceJoint_2c_20b2Joint__28b2DistanceJoint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2DistanceJoint__20emscripten__base_b2Joint___convertPointer_b2Joint_2c_20b2DistanceJoint__28b2Joint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______invalidate_iterators_past_5babi_v160004_5d_28b2Vec2__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function std____2__reverse_iterator_int____operator___5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - 4;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_std____2__vector_int_2c_20std____2__allocator_int______getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function __wasm_call_ctors() {
 _GLOBAL__sub_I_Box2DWebBindings_cpp();
 _GLOBAL__sub_I_b2_block_allocator_cpp();
 _GLOBAL__sub_I_b2_math_cpp();
 _GLOBAL__sub_I_b2_contact_manager_cpp();
 _GLOBAL__sub_I_bind_cpp();
 init_pthread_self();
}

function __cxx_global_array_dtor_2($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 b2ContactListener___b2ContactListener_28_29(29748);
 __stack_pointer = $1 + 16 | 0;
}

function std____2____compressed_pair_elem_std____2__allocator_b2Vec2__2c_201_2c_20true_____get_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Transform_20const__2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Filter_20const__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20emscripten__internal__AllowedRawPointer_b2MassData_____get_28_29() {
 return 28100;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2FixtureDef__2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const_____get_28_29() {
 return 27924;
}

function b2Shape__20emscripten__base_b2Shape___convertPointer_b2PolygonShape_2c_20b2Shape__28b2PolygonShape__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2PolygonShape__20emscripten__base_b2Shape___convertPointer_b2Shape_2c_20b2PolygonShape__28b2Shape__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 5;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 5;
}

function emscripten__internal__BindingType_unsigned_20long_2c_20void___toWireType_28unsigned_20long_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function emscripten__internal__BindingType_b2PrismaticJoint_20const__2c_20void___fromWireType_28b2PrismaticJoint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2ContactListenerWrapper__2c_20void___fromWireType_28b2ContactListenerWrapper__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function embind_init_b2_28_29__$_12__operator_28_29_28b2JointDef__29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Vec2_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function embind_init_b2_28_29__$_10__operator_28_29_28b2JointDef__29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2];
}

function b2Shape__20emscripten__base_b2Shape___convertPointer_b2CircleShape_2c_20b2Shape__28b2CircleShape__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2CircleShape__20emscripten__base_b2Shape___convertPointer_b2Shape_2c_20b2CircleShape__28b2Shape__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function void_20std____2____debug_db_insert_c_5babi_v160004_5d_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int____29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function void_20const__20emscripten__internal__getLightTypeID_b2Shape__28b2Shape_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function void_20const__20emscripten__internal__getLightTypeID_b2Joint__28b2Joint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function std____2____compressed_pair_elem_std____2__allocator_int__2c_201_2c_20true_____get_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__val__undefined_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 emscripten__val__val_28emscripten___EM_VAL__29($0, 1);
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20float_2c_20bool___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__BindingType_unsigned_20int_2c_20void___toWireType_28unsigned_20int_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function emscripten__internal__BindingType_b2RevoluteJoint_20const__2c_20void___fromWireType_28b2RevoluteJoint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2RayCastCallbackWrapper__2c_20void___toWireType_28b2RayCastCallbackWrapper__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2DistanceJoint_20const__2c_20void___fromWireType_28b2DistanceJoint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2ContactListenerWrapper__2c_20void___toWireType_28b2ContactListenerWrapper__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20emscripten__internal__AllowedRawPointer_b2ContactListener_____get_28_29() {
 return 26784;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const__2c_20emscripten__internal__AllowedRawPointer_b2MassData_____get_28_29() {
 return 28368;
}

function b2Vec2__operator_28_29_28int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAPF32[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) >> 2];
}

function void_20std____2____debug_db_erase_c_5babi_v160004_5d_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int____29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20bool___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20unsigned_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Shape__Type_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const_____get_28_29() {
 return 26272;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_unsigned_20long_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int___20const_____get_28_29() {
 return 25088;
}

function b2WheelJoint__20emscripten__base_b2Joint___convertPointer_b2Joint_2c_20b2WheelJoint__28b2Joint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2MouseJoint__20emscripten__base_b2Joint___convertPointer_b2Joint_2c_20b2MouseJoint__28b2Joint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2MotorJoint__20emscripten__base_b2Joint___convertPointer_b2Joint_2c_20b2MotorJoint__28b2Joint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Joint__20emscripten__base_b2Joint___convertPointer_b2WheelJoint_2c_20b2Joint__28b2WheelJoint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Joint__20emscripten__base_b2Joint___convertPointer_b2MouseJoint_2c_20b2Joint__28b2MouseJoint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Joint__20emscripten__base_b2Joint___convertPointer_b2MotorJoint_2c_20b2Joint__28b2MotorJoint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Filter__b2Filter_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP16[$0 >> 1] = 1;
 HEAP16[$0 + 2 >> 1] = 65535;
 HEAP16[$0 + 4 >> 1] = 0;
 return $0;
}

function void_20const__20emscripten__internal__getLightTypeID_b2Draw__28b2Draw_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 4 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20bool___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__GenericBindingType_b2RayCastCallbackWrapper___fromWireType_28b2RayCastCallbackWrapper__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__GenericBindingType_b2ContactListenerWrapper___fromWireType_28b2ContactListenerWrapper__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2PolygonShape_20const__2c_20void___fromWireType_28b2PolygonShape_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int____2c_20int_20const_____get_28_29() {
 return 25056;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const_____get_28_29() {
 return 27728;
}

function embind_init_b2_28_29__$_6__operator_28_29_28b2FixtureDef__29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
}

function embind_init_b2_28_29__$_3__operator_28_29_28b2Shape__29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAPF32[HEAP32[$2 + 8 >> 2] + 8 >> 2];
}

function b2Draw__20emscripten__base_b2Draw___convertPointer_b2DrawWrapper_2c_20b2Draw__28b2DrawWrapper__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2DrawWrapper__20emscripten__base_b2Draw___convertPointer_b2Draw_2c_20b2DrawWrapper__28b2Draw__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function __cxx_global_array_dtor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 b2ContactFilter___b2ContactFilter_28_29(29744);
 __stack_pointer = $1 + 16 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2FixtureDef__2c_20b2Shape_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_unsigned_20int_2c_20emscripten__internal__AllowedRawPointer_b2Draw_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Shape__Type_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RayCastCallbackWrapper_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RayCastCallbackWrapper_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2ContactListenerWrapper_20const____get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape__2c_20float_2c_20float_2c_20b2Vec2_20const__2c_20float____get_28_29() {
 return 27856;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const_____get_28_29() {
 return 27392;
}

function b2WeldJoint__20emscripten__base_b2Joint___convertPointer_b2Joint_2c_20b2WeldJoint__28b2Joint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Shape__20emscripten__base_b2Shape___convertPointer_b2EdgeShape_2c_20b2Shape__28b2EdgeShape__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2RopeJoint__20emscripten__base_b2Joint___convertPointer_b2Joint_2c_20b2RopeJoint__28b2Joint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Joint__20emscripten__base_b2Joint___convertPointer_b2WeldJoint_2c_20b2Joint__28b2WeldJoint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Joint__20emscripten__base_b2Joint___convertPointer_b2RopeJoint_2c_20b2Joint__28b2RopeJoint__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2EdgeShape__20emscripten__base_b2Shape___convertPointer_b2Shape_2c_20b2EdgeShape__28b2Shape__29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function __sindf($0) {
 var $1 = 0, $2 = 0;
 $1 = $0 * $0;
 $2 = $1 * $0;
 return Math_fround($2 * ($1 * $1) * ($1 * 2718311493989822e-21 + -.00019839334836096632) + ($2 * ($1 * .008333329385889463 + -.16666666641626524) + $0));
}

function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $3 = dynCall_jiji($0, $1, $2, $3, $4);
 $2 = i64toi32_i32$HIGH_BITS;
 setTempRet0($2);
 return $3 | 0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__BindingType_b2QueryCallbackWrapper__2c_20void___toWireType_28b2QueryCallbackWrapper__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2CircleShape_20const__2c_20void___fromWireType_28b2CircleShape_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2MouseJoint__Dump_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 b2Log_28char_20const__2c_20____29(15430, 0);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__vector_int_2c_20std____2__allocator_int______invalidate_iterators_past_5babi_v160004_5d_28int__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function std____2____compressed_pair_elem_std____2__allocator_b2Vec2__2c_201_2c_20true_____get_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2AABB__2c_20b2AABB__2c_20b2AABB____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint__2c_20bool___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2BodyType___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2JointType_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__BindingType_short_2c_20void___toWireType_28short_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU16[HEAP32[$1 + 12 >> 2] >> 1] << 16 >> 16;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const_____get_28_29() {
 return 27552;
}

function b2PrismaticJointDef__20emscripten__internal__operator_new_b2PrismaticJointDef__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(72);
 b2PrismaticJointDef__b2PrismaticJointDef_28_29($0);
 return $0 | 0;
}

function b2FrictionJoint__SolvePositionConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 1;
}

function std____2____compressed_pair_elem_std____2__less_b2Fixture___2c_201_2c_20true_____get_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2Body__2c_20b2MassData_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__GenericBindingType_b2QueryCallbackWrapper___fromWireType_28b2QueryCallbackWrapper__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2WheelJoint_20const__2c_20void___fromWireType_28b2WheelJoint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2MouseJoint_20const__2c_20void___fromWireType_28b2MouseJoint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2MotorJoint_20const__2c_20void___fromWireType_28b2MotorJoint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2FixtureDef_20const__2c_20void___fromWireType_28b2FixtureDef_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____non_trivial_if_true_2c_20std____2__allocator_b2Vec2______non_trivial_if_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2BodyType_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__TypeID_std____2__vector_int_2c_20std____2__allocator_int___2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__vector_int_2c_20std____2__allocator_int_____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2QueryCallbackWrapper_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2QueryCallbackWrapper_20const____get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20emscripten__internal__AllowedRawPointer_b2FixtureDef_____get_28_29() {
 return 27936;
}

function bool_20isfinite_5babi_v160004_5d_float_2c_200__28float_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF32[$1 + 12 >> 2] = $0;
 return Math_fround(Math_abs(HEAPF32[$1 + 12 >> 2])) < Math_fround(Infinity);
}

function std____2____compressed_pair_elem_std____2__allocator_int__2c_201_2c_20true_____get_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20bool___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__BindingType_b2WeldJoint_20const__2c_20void___fromWireType_28b2WeldJoint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2RopeJoint_20const__2c_20void___fromWireType_28b2RopeJoint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2EdgeShape_20const__2c_20void___fromWireType_28b2EdgeShape_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2JointDef__2c_20emscripten__internal__AllowedRawPointer_b2Body_____get_28_29() {
 return 28504;
}

function b2MouseJoint__SolvePositionConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 1;
}

function b2MotorJoint__SolvePositionConstraints_28b2SolverData_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 1;
}

function b2Contact__SetTangentSpeed_28float_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 144 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function std____2__allocator_char___deallocate_5babi_v160004_5d_28char__2c_20unsigned_20long_29($0, $1, $2) {
 std____2____libcpp_deallocate_5babi_v160004_5d_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($1, $2, 1);
}

function std____2____non_trivial_if_true_2c_20std____2__allocator_char______non_trivial_if_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_____get_28_29() {
 return 28224;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const_____get_28_29() {
 return 27136;
}

function b2RevoluteJointDef__20emscripten__internal__operator_new_b2RevoluteJointDef__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(64);
 b2RevoluteJointDef__b2RevoluteJointDef_28_29($0);
 return $0 | 0;
}

function b2Joint__Dump_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 b2Log_28char_20const__2c_20____29(15383, 0);
 __stack_pointer = $1 + 16 | 0;
}

function b2DistanceJointDef__20emscripten__internal__operator_new_b2DistanceJointDef__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(48);
 b2DistanceJointDef__b2DistanceJointDef_28_29($0);
 return $0 | 0;
}

function b2Contact__SetRestitution_28float_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 140 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function std____2____non_trivial_if_true_2c_20std____2__allocator_int______non_trivial_if_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20bool___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2World_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__BindingType_b2PrismaticJointDef__2c_20void___toWireType_28b2PrismaticJointDef__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2JointDef_20const__2c_20void___fromWireType_28b2JointDef_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20emscripten__internal__AllowedRawPointer_b2Joint_____get_28_29() {
 return 26948;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20bool___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20emscripten__internal__AllowedRawPointer_b2Draw_____get_28_29() {
 return 26796;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20emscripten__internal__AllowedRawPointer_b2Body_____get_28_29() {
 return 26876;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Vec2_20const__2c_20float_2c_20b2Color_20const_____get_28_29() {
 return 26208;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2World_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__BindingType_b2RevoluteJointDef__2c_20void___toWireType_28b2RevoluteJointDef__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2RayCastCallback__2c_20void___fromWireType_28b2RayCastCallback__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2Fixture_20const__2c_20void___fromWireType_28b2Fixture_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2DistanceJointDef__2c_20void___toWireType_28b2DistanceJointDef__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2ContactListener__2c_20void___fromWireType_28b2ContactListener__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2BodyDef_20const__2c_20void___fromWireType_28b2BodyDef_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2AABB__2c_20emscripten__internal__AllowedRawPointer_b2AABB_____get_28_29() {
 return 26652;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const_____get_28_29() {
 return 25248;
}

function b2Contact__SetFriction_28float_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 136 >> 2] = HEAPF32[$2 + 8 >> 2];
}

function std__get_new_handler_28_29() {
 return void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_5babi_v160004_5d_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29(32632);
}

function std____2__array_emscripten__internal__GenericWireType_2c_204ul___data_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2__array_emscripten__internal__GenericWireType_2c_203ul___data_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2__array_emscripten__internal__GenericWireType_2c_202ul___data_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2__array_emscripten__internal__GenericWireType_2c_201ul___data_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Shape_20const__2c_20b2FixtureDef____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2PrismaticJointDef_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2PrismaticJointDef_20const____get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool____get_28_29() {
 return 28304;
}

function b2Island__Clear_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2JointDef__2c_20b2Body____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_unsigned_20int_2c_20unsigned_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__BindingType_b2PrismaticJoint__2c_20void___fromWireType_28b2PrismaticJoint__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2BlockAllocator__2c_20void___fromWireType_28b2BlockAllocator__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20unsigned_20int_2c_20int_2c_20b2Color_20const_____get_28_29() {
 return 26176;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListener__2c_20unsigned_20int_2c_20unsigned_20int____get_28_29() {
 return 25856;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__val_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long____get_28_29() {
 return 25224;
}

function std____2____unwrap_iter_impl_char_20const__2c_20true_____unwrap_5babi_v160004_5d_28char_20const__29($0) {
 return char_20const__20std____2____to_address_5babi_v160004_5d_char_20const__28char_20const__29($0);
}

function std____2____tree_node_base_void______parent_unsafe_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RevoluteJointDef_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RevoluteJointDef_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2DistanceJointDef_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2DistanceJointDef_20const____get_28_29();
}

function emscripten__internal__BindingType_unsigned_20short_2c_20void___fromWireType_28unsigned_20short_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP16[$1 + 14 >> 1] = $0;
 return HEAPU16[$1 + 14 >> 1];
}

function __wasi_syscall_ret($0) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 if (!$0) {
  return 0;
 }
 wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = $0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return -1;
}

function std____2____tree_key_value_types_b2Fixture______get_key_5babi_v160004_5d_28b2Fixture__20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_elem_unsigned_20long_2c_200_2c_20false_____get_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_elem_b2Vec2__2c_200_2c_20false_____get_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__BindingType_b2World_20const__2c_20void___fromWireType_28b2World_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2Shape_20const__2c_20void___fromWireType_28b2Shape_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2RevoluteJoint__2c_20void___fromWireType_28b2RevoluteJoint__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2RayCastOutput__2c_20void___fromWireType_28b2RayCastOutput__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2QueryCallback__2c_20void___fromWireType_28b2QueryCallback__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2Joint_20const__2c_20void___fromWireType_28b2Joint_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2DistanceJoint__2c_20void___fromWireType_28b2DistanceJoint__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_____get_28_29() {
 return 28056;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RayCastCallback_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RayCastCallback_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2ContactListener_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2ContactListener_20const____get_28_29();
}

function emscripten__internal__BindingType_float_2c_20void___toWireType_28float_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPF32[HEAP32[$1 + 12 >> 2] >> 2];
}

function b2Vec3__SetZero_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAPF32[$0 >> 2] = 0;
 HEAPF32[$0 + 4 >> 2] = 0;
 HEAPF32[$0 + 8 >> 2] = 0;
}

function b2PrismaticJoint__GetReferenceAngle_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 100 >> 2]);
}

function _embind_initialize_bindings() {
 var $0 = 0;
 $0 = HEAP32[7724];
 if ($0) {
  while (1) {
   FUNCTION_TABLE[HEAP32[$0 >> 2]]();
   $0 = HEAP32[$0 + 4 >> 2];
   if ($0) {
    continue;
   }
   break;
  }
 }
}

function ManifoldPointGetTangentImpulse_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2AABB__2c_20b2AABB____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__BindingType_unsigned_20long_2c_20void___fromWireType_28unsigned_20long_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2WheelJointDef__2c_20void___toWireType_28b2WheelJointDef__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2Shape_20const__2c_20void___toWireType_28b2Shape_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2PolygonShape__2c_20void___fromWireType_28b2PolygonShape__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2MouseJointDef__2c_20void___toWireType_28b2MouseJointDef__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2MotorJointDef__2c_20void___toWireType_28b2MotorJointDef__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2Draw_20const__2c_20void___fromWireType_28b2Draw_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2Body_20const__2c_20void___fromWireType_28b2Body_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2AABB_20const__2c_20void___fromWireType_28b2AABB_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Shape__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_____get_28_29() {
 return 27992;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2JointDef_____get_28_29() {
 return 28516;
}

function b2WheelJoint__GetSpringDampingRatio_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 72 >> 2]);
}

function b2Vec2__operator_28_29_28int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) | 0;
}

function b2RevoluteJoint__GetReferenceAngle_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 116 >> 2]);
}

function b2RevoluteJoint__GetMaxMotorTorque_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 104 >> 2]);
}

function b2PrismaticJoint__GetMaxMotorForce_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 128 >> 2]);
}

function std____2____compressed_pair_elem_int__2c_200_2c_20false_____get_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_void_2c_20b2Shape__2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RayCastCallbackWrapper__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RayCastCallbackWrapper____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2PrismaticJoint_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2ContactListenerWrapper____get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Fixture__2c_20emscripten__internal__AllowedRawPointer_b2Body_____get_28_29() {
 return 28452;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_____get_28_29() {
 return 28048;
}

function b2WheelJoint__GetSpringFrequencyHz_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 68 >> 2]);
}

function b2MotorJoint__GetCorrectionFactor_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 100 >> 2]);
}

function ManifoldPointGetNormalImpulse_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 8 >> 2]);
}

function ManifoldGetLocalNormalValueY_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 44 >> 2]);
}

function ManifoldGetLocalNormalValueX_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 40 >> 2]);
}

function std____2____unwrap_iter_impl_char__2c_20true_____rewrap_5babi_v160004_5d_28char__2c_20char__29($0, $1) {
 return ($1 - char__20std____2____to_address_5babi_v160004_5d_char__28char__29($0) | 0) + $0 | 0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Joint____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__BindingType_unsigned_20int_2c_20void___fromWireType_28unsigned_20int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2WeldJointDef__2c_20void___toWireType_28b2WeldJointDef__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2RopeJointDef__2c_20void___toWireType_28b2RopeJointDef__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2PolygonShape__2c_20void___toWireType_28b2PolygonShape__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__val_2c_20std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long____get_28_29() {
 return 25096;
}

function WorldManifoldGetNormalValueY_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
}

function ManifoldGetLocalPointValueY_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 52 >> 2]);
}

function ManifoldGetLocalPointValueX_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 48 >> 2]);
}

function std____2__array_emscripten__internal__GenericWireType_2c_204ul___data_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2__array_emscripten__internal__GenericWireType_2c_203ul___data_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2__array_emscripten__internal__GenericWireType_2c_202ul___data_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2__array_emscripten__internal__GenericWireType_2c_201ul___data_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_unsigned_20int_2c_20b2Body____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int__2c_20int__2c_20b2Color_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 4;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2WheelJointDef_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2WheelJointDef_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RevoluteJoint_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2QueryCallback_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2QueryCallback_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2MouseJointDef_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2MouseJointDef_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2MotorJointDef_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2MotorJointDef_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2DistanceJoint_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2DistanceJoint_20const____get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2World__2c_20emscripten__internal__AllowedRawPointer_b2Body_____get_28_29() {
 return 28468;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2Body__2c_20emscripten__internal__AllowedRawPointer_b2Joint_____get_28_29() {
 return 28548;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const_____get_28_29() {
 return 25120;
}

function b2WheelJoint__GetMaxMotorTorque_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 120 >> 2]);
}

function b2WheelJointDef__20emscripten__internal__operator_new_b2WheelJointDef__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(64);
 b2WheelJointDef__b2WheelJointDef_28_29($0);
 return $0 | 0;
}

function b2PrismaticJoint__GetUpperLimit_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 124 >> 2]);
}

function b2PrismaticJoint__GetMotorSpeed_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 132 >> 2]);
}

function b2PrismaticJoint__GetLowerLimit_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 120 >> 2]);
}

function b2MouseJointDef__20emscripten__internal__operator_new_b2MouseJointDef__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(40);
 b2MouseJointDef__b2MouseJointDef_28_29($0);
 return $0 | 0;
}

function b2MotorJointDef__20emscripten__internal__operator_new_b2MotorJointDef__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(44);
 b2MotorJointDef__b2MotorJointDef_28_29($0);
 return $0 | 0;
}

function b2DistanceJoint__GetDampingRatio_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 72 >> 2]);
}

function ManifoldPointGetLocalPointY_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
}

function emscripten__internal__GenericBindingType_b2RayCastInput___fromWireType_28b2RayCastInput__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_int_2c_20void___toWireType_28int_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function emscripten__internal__BindingType_b2WheelJoint__2c_20void___fromWireType_28b2WheelJoint__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2MouseJoint__2c_20void___fromWireType_28b2MouseJoint__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2MotorJoint__2c_20void___fromWireType_28b2MotorJoint__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2FixtureDef__2c_20void___fromWireType_28b2FixtureDef__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2DrawWrapper__2c_20void___toWireType_28b2DrawWrapper__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2CircleShape__2c_20void___toWireType_28b2CircleShape__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2RevoluteJoint__GetUpperLimit_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 124 >> 2]);
}

function b2RevoluteJoint__GetMotorSpeed_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 108 >> 2]);
}

function b2RevoluteJoint__GetLowerLimit_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 120 >> 2]);
}

function b2Alloc_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = dlmalloc(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______rep_2c_200_2c_20false_____get_5babi_v160004_5d_28_29($0) {
 return $0;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2WeldJointDef_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2WeldJointDef_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RopeJointDef_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RopeJointDef_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2QueryCallbackWrapper__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2QueryCallbackWrapper____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2PolygonShape_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2PolygonShape_20const____get_28_29();
}

function b2WeldJoint__GetReferenceAngle_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 96 >> 2]);
}

function b2MotorJoint__GetAngularOffset_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 76 >> 2]);
}

function std____2____tree_key_value_types_b2Fixture______get_ptr_5babi_v160004_5d_28b2Fixture___29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_elem_b2Vec2__2c_200_2c_20false_____get_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2Body__2c_20b2JointDef____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__GenericBindingType_b2DrawWrapper___fromWireType_28b2DrawWrapper__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2WeldJoint__2c_20void___fromWireType_28b2WeldJoint__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2RopeJoint__2c_20void___fromWireType_28b2RopeJoint__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2FixtureDef__2c_20void___toWireType_28b2FixtureDef__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_______get_28_29() {
 return 25176;
}

function b2PolygonShape__20emscripten__internal__operator_new_b2PolygonShape__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(152);
 b2PolygonShape__b2PolygonShape_28_29($0);
 return $0 | 0;
}

function b2MouseJoint__GetDampingRatio_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 88 >> 2]);
}

function b2DistanceJoint__GetFrequency_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 68 >> 2]);
}

function __cosdf($0) {
 var $1 = 0;
 $0 = $0 * $0;
 $1 = $0 * $0;
 return Math_fround($0 * $1 * ($0 * 2439044879627741e-20 + -.001388676377460993) + ($1 * .04166662332373906 + ($0 * -.499999997251031 + 1)));
}

function WorldManifoldGetNormalValueX_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] >> 2]);
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2DrawWrapper_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2DrawWrapper_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2CircleShape_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2CircleShape_20const____get_28_29();
}

function emscripten__internal__BindingType_short_2c_20void___fromWireType_28short_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP16[$1 + 14 >> 1] = $0;
 return HEAPU16[$1 + 14 >> 1] << 16 >> 16;
}

function char_20const__20std____2____to_address_5babi_v160004_5d_char_20const__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2WheelJoint__GetMotorSpeed_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 124 >> 2]);
}

function b2WeldJoint__GetDampingRatio_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 72 >> 2]);
}

function b2WeldJointDef__20emscripten__internal__operator_new_b2WeldJointDef__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(48);
 b2WeldJointDef__b2WeldJointDef_28_29($0);
 return $0 | 0;
}

function b2RopeJointDef__20emscripten__internal__operator_new_b2RopeJointDef__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(40);
 b2RopeJointDef__b2RopeJointDef_28_29($0);
 return $0 | 0;
}

function ManifoldPointGetLocalPointX_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] >> 2]);
}

function std____2__pointer_traits_char_20const____pointer_to_5babi_v160004_5d_28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2World__2c_20b2Vec2_____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__BindingType_b2MassData__2c_20void___fromWireType_28b2MassData__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2JointDef__2c_20void___fromWireType_28b2JointDef__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2DistanceJoint__GetLength_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 104 >> 2]);
}

function unsigned_20long_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______align_it_5babi_v160004_5d_16ul__28unsigned_20long_29($0) {
 return $0 + 15 & -16;
}

function std____2____throw_length_error_5babi_v160004_5d_28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 abort();
 wasm2js_trap();
}

function std____2____compressed_pair_elem_int__2c_200_2c_20false_____get_5babi_v160004_5d_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2WheelJoint_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2WheelJoint_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2MouseJoint_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2MouseJoint_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2MotorJoint_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2MotorJoint_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2FixtureDef_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2FixtureDef_20const____get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper__2c_20unsigned_20int____get_28_29() {
 return 25916;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper__2c_20unsigned_20int____get_28_29() {
 return 25944;
}

function b2MouseJoint__GetMaxForce_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 104 >> 2]);
}

function b2MouseJoint__GetFrequency_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 84 >> 2]);
}

function b2MotorJoint__GetMaxTorque_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 96 >> 2]);
}

function b2Body__IsSleepingAllowed_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return (HEAPU16[HEAP32[$1 + 12 >> 2] + 4 >> 1] & 4) == 4 | 0;
}

function b2Body__IsFixedRotation_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return (HEAPU16[HEAP32[$1 + 12 >> 2] + 4 >> 1] & 16) == 16 | 0;
}

function b2Body__GetAngularVelocity_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 72 >> 2]);
}

function b2Body__GetAngularDamping_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 136 >> 2]);
}

function std____2__reverse_iterator_b2Vec2____base_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2PrismaticJointDef____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function emscripten__internal__GenericBindingType_b2Transform___fromWireType_28b2Transform__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__EnumBindingType_b2Shape__Type___fromWireType_28b2Shape__Type_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2JointDef__2c_20void___toWireType_28b2JointDef__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2Fixture__2c_20void___fromWireType_28b2Fixture__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2WeldJoint__GetFrequency_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 68 >> 2]);
}

function b2RopeJoint__GetMaxLength_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 84 >> 2]);
}

function b2MotorJoint__GetMaxForce_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 92 >> 2]);
}

function b2Fixture__GetRestitution_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 20 >> 2]);
}

function b2Body__GetLinearDamping_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 132 >> 2]);
}

function void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_5babi_v160004_5d_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29($0) {
 return HEAP32[$0 >> 2];
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_float_2c_20b2Shape____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2RevoluteJointDef____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2DistanceJointDef____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2WeldJoint_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2WeldJoint_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RopeJoint_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RopeJoint_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2PrismaticJointDef__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2PrismaticJointDef____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2EdgeShape_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2EdgeShape_20const____get_28_29();
}

function emscripten__internal__GenericWireTypeConverter_float___from_28double_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 return Math_fround(HEAPF64[$1 + 8 >> 3]);
}

function b2CircleShape__20emscripten__internal__operator_new_b2CircleShape__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(20);
 b2CircleShape__b2CircleShape_28_29($0);
 return $0 | 0;
}

function b2Body__GetGravityScale_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 140 >> 2]);
}

function __DOUBLE_BITS($0) {
 var $1 = 0, $2 = 0;
 wasm2js_scratch_store_f64(+$0);
 $1 = wasm2js_scratch_load_i32(1) | 0;
 $2 = wasm2js_scratch_load_i32(0) | 0;
 i64toi32_i32$HIGH_BITS = $1;
 return $2;
}

function emscripten__internal__GenericBindingType_b2MassData___fromWireType_28b2MassData__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__EnumBindingType_b2Shape__Type___toWireType_28b2Shape__Type_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2Fixture__2c_20void___toWireType_28b2Fixture__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2BodyDef__2c_20void___toWireType_28b2BodyDef__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_std____2__vector_int_2c_20std____2__allocator_int_______get_28_29() {
 return 25052;
}

function std____2__reverse_iterator_int____base_5babi_v160004_5d_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function emscripten__internal__WrapperBase__WrapperBase_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 | 0] = 0;
 return $0;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RevoluteJointDef__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RevoluteJointDef____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2JointDef_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2JointDef_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2DistanceJointDef__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2DistanceJointDef____get_28_29();
}

function b2Fixture__GetFriction_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 16 >> 2]);
}

function b2Draw__b2Draw_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 18304;
 HEAP32[$0 + 4 >> 2] = 0;
 return $0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2WheelJointDef____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2MouseJointDef____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2MotorJointDef____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int__2c_20unsigned_20int____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__EnumBindingType_b2JointType___fromWireType_28b2JointType_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2World__2c_20void___fromWireType_28b2World__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2Shape__2c_20void___fromWireType_28b2Shape__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2Joint__2c_20void___fromWireType_28b2Joint__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2PrismaticJoint__IsMotorEnabled_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP8[HEAP32[$1 + 12 >> 2] + 137 | 0] & 1;
}

function b2PrismaticJoint__IsLimitEnabled_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP8[HEAP32[$1 + 12 >> 2] + 136 | 0] & 1;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2WeldJointDef____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2RopeJointDef____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2PolygonShape____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RayCastCallback__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RayCastCallback____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Fixture_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2ContactListener__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2ContactListener____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2BodyDef_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2BodyDef_20const____get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20float_2c_20float____get_28_29() {
 return 29104;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20float____get_28_29() {
 return 28240;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20b2Vec2_20const_____get_28_29() {
 return 28064;
}

function b2RevoluteJoint__IsMotorEnabled_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP8[HEAP32[$1 + 12 >> 2] + 100 | 0] & 1;
}

function b2RevoluteJoint__IsLimitEnabled_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP8[HEAP32[$1 + 12 >> 2] + 112 | 0] & 1;
}

function b2FixtureDef__20emscripten__internal__operator_new_b2FixtureDef__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(28);
 b2FixtureDef__b2FixtureDef_28_29($0);
 return $0 | 0;
}

function b2ContactListener__BeginContact_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function b2Body__IsEnabled_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return (HEAPU16[HEAP32[$1 + 12 >> 2] + 4 >> 1] & 32) == 32 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_unsigned_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2CircleShape____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int_2c_20unsigned_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__GenericBindingType_b2Filter___fromWireType_28b2Filter__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__EnumBindingType_b2JointType___toWireType_28b2JointType_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__EnumBindingType_b2BodyType___fromWireType_28b2BodyType_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2World__2c_20void___toWireType_28b2World__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2Shape__2c_20void___toWireType_28b2Shape__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2Joint__2c_20void___toWireType_28b2Joint__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2Draw__2c_20void___fromWireType_28b2Draw__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2Body__2c_20void___fromWireType_28b2Body__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2AABB__2c_20void___fromWireType_28b2AABB__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20float_2c_20float____get_28_29() {
 return 29280;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2ContactListener__2c_20unsigned_20int____get_28_29() {
 return 25836;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const__2c_20bool____get_28_29() {
 return 28336;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2RayCastCallbackWrapper__2c_20emscripten__val______get_28_29() {
 return 25708;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2ContactListenerWrapper__2c_20emscripten__val______get_28_29() {
 return 25980;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const__2c_20b2Vec2_20const_____get_28_29() {
 return 28400;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2AABB_20const__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const__2c_20int____get_28_29() {
 return 28132;
}

function b2Transform__20emscripten__internal__raw_constructor_b2Transform__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(16);
 b2Transform__b2Transform_28_29($0);
 return $0 | 0;
}

function b2Contact__FlagForFiltering_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 8;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2FixtureDef____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function emscripten__internal__WithPolicies____ArgTypeList_unsigned_20int_2c_20unsigned_20int_2c_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2PrismaticJoint____get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20float_2c_20int_2c_20int____get_28_29() {
 return 26960;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape__2c_20float_2c_20float____get_28_29() {
 return 27840;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const__2c_20float____get_28_29() {
 return 29132;
}

function b2RayCastCallback__b2RayCastCallback_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 25764;
 return $0;
}

function b2ContactListener__b2ContactListener_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 26060;
 return $0;
}

function b2ContactListener__EndContact_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function emscripten__internal__GenericBindingType_b2Color___fromWireType_28b2Color__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__EnumBindingType_b2BodyType___toWireType_28b2BodyType_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_float_2c_20void___fromWireType_28float_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF32[$1 + 12 >> 2] = $0;
 return HEAPF32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2Body__2c_20void___toWireType_28b2Body__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_b2AABB__2c_20void___toWireType_28b2AABB__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const__2c_20float____get_28_29() {
 return 29308;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2QueryCallbackWrapper__2c_20emscripten__val______get_28_29() {
 return 25456;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2QueryCallback__2c_20unsigned_20int____get_28_29() {
 return 25352;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const__2c_20b2AABB_20const_____get_28_29() {
 return 26688;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const_____get_28_29() {
 return 29056;
}

function b2World__GetAllowSleeping_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP8[HEAP32[$1 + 12 >> 2] + 102972 | 0] & 1;
}

function b2WheelJoint__IsMotorEnabled_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP8[HEAP32[$1 + 12 >> 2] + 128 | 0] & 1;
}

function b2Body__IsBullet_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return (HEAPU16[HEAP32[$1 + 12 >> 2] + 4 >> 1] & 8) == 8 | 0;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2JointDef____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2World_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2World_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2WheelJointDef__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2WheelJointDef____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Shape_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Shape_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RevoluteJoint____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2QueryCallback__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2QueryCallback____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2MouseJointDef__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2MouseJointDef____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2MotorJointDef__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2MotorJointDef____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Joint_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Joint_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2DistanceJoint__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2DistanceJoint____get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const_____get_28_29() {
 return 29232;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint_20const_____get_28_29() {
 return 28684;
}

function b2Joint__GetCollideConnected_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP8[HEAP32[$1 + 12 >> 2] + 61 | 0] & 1;
}

function b2Fixture__GetDensity_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] >> 2]);
}

function b2Body__IsAwake_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return (HEAPU16[HEAP32[$1 + 12 >> 2] + 4 >> 1] & 2) == 2 | 0;
}

function b2Body__GetMass_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 116 >> 2]);
}

function b2Body__GetAngle_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 56 >> 2]);
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2BodyDef____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function emscripten__internal__GenericWireTypeConverter_bool___from_28double_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 return HEAPF64[$1 + 8 >> 3] != 0;
}

function emscripten__internal__GenericBindingType_b2Vec2___fromWireType_28b2Vec2__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__GenericBindingType_b2AABB___fromWireType_28b2AABB__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint__2c_20b2Vec2_20const_____get_28_29() {
 return 28928;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint__2c_20b2Vec2_20const_____get_28_29() {
 return 28800;
}

function std____2__allocator_std____2____tree_node_b2Fixture__2c_20void_____max_size_5babi_v160004_5d_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 214748364;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2WeldJointDef__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2WeldJointDef____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RopeJointDef__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RopeJointDef____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2PolygonShape__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2PolygonShape____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Draw_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Draw_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Body_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Body_20const____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2AABB_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2AABB_20const____get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20b2Filter_20const_____get_28_29() {
 return 28020;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20b2Transform_20const_____get_28_29() {
 return 26292;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const__2c_20float____get_28_29() {
 return 29712;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const__2c_20float____get_28_29() {
 return 29416;
}

function b2QueryCallback__b2QueryCallback_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 25512;
 return $0;
}

function ContactImpulseGetCount_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2];
}

function emscripten__internal__GenericBindingType_b2Rot___fromWireType_28b2Rot__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2MassData_20const_____get_28_29() {
 return 28380;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const__2c_20float____get_28_29() {
 return 29428;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const_____get_28_29() {
 return 29664;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint_20const_____get_28_29() {
 return 28940;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint_20const_____get_28_29() {
 return 28812;
}

function b2Free_28void__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 dlfree(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function ManifoldGetPointCount_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 60 >> 2];
}

function init_pthread_self() {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 HEAP32[8025] = 31980;
 wasm2js_i32$0 = 32028, wasm2js_i32$1 = getpid(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}

function emscripten__internal__WithPolicies_emscripten__allow_raw_pointers___ArgTypeList_b2AABB____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2DrawWrapper__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2DrawWrapper____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2CircleShape__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2CircleShape____get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint_20const_____get_28_29() {
 return 29548;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const_____get_28_29() {
 return 29408;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Transform_20const__2c_20emscripten__internal__AllowedRawPointer_b2Body_20const_____get_28_29() {
 return 28256;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Filter_20const__2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const_____get_28_29() {
 return 28032;
}

function b2JointDef__20emscripten__internal__operator_new_b2JointDef__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(20);
 b2JointDef__b2JointDef_28_29($0);
 return $0 | 0;
}

function void_20const__20emscripten__internal__getLightTypeID_b2PrismaticJointDef__28b2PrismaticJointDef_20const__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 28976;
}

function emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Vec2_20const__2c_20b2Color_20const_____get_28_29() {
 return 26528;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20unsigned_20int__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_____get_28_29() {
 return 25776;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int_2c_20float___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2RayCastCallbackWrapper____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2ContactListenerWrapper____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2WheelJoint__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2WheelJoint____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2MouseJoint__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2MouseJoint____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2MotorJoint__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2MotorJoint____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2FixtureDef__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2FixtureDef____get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20b2Vec2_20const_____get_28_29() {
 return 27048;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const__2c_20float____get_28_29() {
 return 28564;
}

function b2Vec2__20std____2____to_address_5babi_v160004_5d_b2Vec2__28b2Vec2__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2PrismaticJoint__GetLocalAnchorB_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 76 | 0;
}

function b2PrismaticJoint__GetLocalAnchorA_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 68 | 0;
}

function b2Joint__ShiftOrigin_28b2Vec2_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function void_20const__20emscripten__internal__getLightTypeID_b2RevoluteJointDef__28b2RevoluteJointDef_20const__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 29152;
}

function void_20const__20emscripten__internal__getLightTypeID_b2DistanceJointDef__28b2DistanceJointDef_20const__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 28604;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int_2c_20bool___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__WithPolicies____ArgTypeList_unsigned_20int_2c_20unsigned_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20unsigned_20int_2c_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 3;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20float____get_28_29() {
 return 29120;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20float_2c_20bool____get_28_29() {
 return 28352;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2Vec2_20const_____get_28_29() {
 return 28280;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const__2c_20float____get_28_29() {
 return 28576;
}

function embind_init_b2_28_29__$_5__operator_20void_20_28__29_28b2FixtureDef__2c_20b2Shape_20const__29_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 717;
}

function b2Vec2__SetZero_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAPF32[$0 >> 2] = 0;
 HEAPF32[$0 + 4 >> 2] = 0;
}

function b2RevoluteJoint__GetLocalAnchorB_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 76 | 0;
}

function b2RevoluteJoint__GetLocalAnchorA_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 68 | 0;
}

function b2DistanceJoint__GetLocalAnchorB_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 88 | 0;
}

function b2DistanceJoint__GetLocalAnchorA_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 80 | 0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2QueryCallbackWrapper____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2WeldJoint__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2WeldJoint____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2RopeJoint__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RopeJoint____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2EdgeShape__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2EdgeShape____get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20float____get_28_29() {
 return 29296;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint__2c_20bool____get_28_29() {
 return 29080;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Draw__2c_20unsigned_20int____get_28_29() {
 return 26144;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint__2c_20float____get_28_29() {
 return 28692;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2DrawWrapper__2c_20emscripten__val______get_28_29() {
 return 26388;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Shape__Type_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const_____get_28_29() {
 return 27984;
}

function b2PrismaticJoint__GetLocalAxisA_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 84 | 0;
}

function b2BodyDef__20emscripten__internal__operator_new_b2BodyDef__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(52);
 b2BodyDef__b2BodyDef_28_29($0);
 return $0 | 0;
}

function __cxxabiv1____fundamental_type_info_____fundamental_type_info_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(__cxxabiv1____shim_type_info_____shim_type_info_28_29($0));
}

function JointEdgeGetNext_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
}

function JointEdgeGetJoint_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function std____2__allocator_b2Vec2___destroy_5babi_v160004_5d_28b2Vec2__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint__2c_20bool____get_28_29() {
 return 29256;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const_____get_28_29() {
 return 29064;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_20const__2c_20emscripten__internal__AllowedRawPointer_b2Body_20const_____get_28_29() {
 return 28264;
}

function embind_init_b2_28_29__$_1__operator_20void_20_28__29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 713;
}

function b2Fixture__IsSensor_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP8[HEAP32[$1 + 12 >> 2] + 38 | 0] & 1;
}

function ManifoldGetType_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 56 >> 2];
}

function JointEdgeGetPrev_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2JointDef__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2JointDef____get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_unsigned_20int_2c_20emscripten__internal__AllowedRawPointer_b2Draw_20const_____get_28_29() {
 return 26156;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const_____get_28_29() {
 return 29240;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint_20const_____get_28_29() {
 return 28704;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_20const_____get_28_29() {
 return 29072;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Shape__Type_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const_____get_28_29() {
 return 27108;
}

function embind_init_b2_28_29__$_7__operator_20void_20_28__29_28b2Body__2c_20b2MassData_20const__29_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 719;
}

function b2WheelJoint__GetLocalAnchorB_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 84 | 0;
}

function b2WheelJoint__GetLocalAnchorA_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 76 | 0;
}

function b2MotorJoint__GetLinearOffset_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 68 | 0;
}

function b2Filter__20emscripten__internal__raw_constructor_b2Filter__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(6);
 b2Filter__b2Filter_28_29($0);
 return $0 | 0;
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______fits_in_sso_5babi_v160004_5d_28unsigned_20long_29($0) {
 return $0 >>> 0 < 11;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2Transform_20const____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint__2c_20float____get_28_29() {
 return 29700;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint__2c_20float____get_28_29() {
 return 28948;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint__2c_20float____get_28_29() {
 return 28820;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_20const_____get_28_29() {
 return 29248;
}

function b2WeldJoint__GetLocalAnchorB_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 88 | 0;
}

function b2WeldJoint__GetLocalAnchorA_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 80 | 0;
}

function b2RopeJoint__GetLocalAnchorB_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 76 | 0;
}

function b2RopeJoint__GetLocalAnchorA_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 68 | 0;
}

function b2GrowableStack_int_2c_20256___GetCount_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 1028 >> 2];
}

function std____2__numeric_limits_unsigned_20long___max_5babi_v160004_5d_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20long_2c_20true___max_5babi_v160004_5d_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Fixture__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Fixture____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2BodyDef__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2BodyDef____get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint__2c_20bool____get_28_29() {
 return 29688;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint__2c_20float____get_28_29() {
 return 29564;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint__2c_20float____get_28_29() {
 return 29440;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20b2BodyType____get_28_29() {
 return 28412;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const_____get_28_29() {
 return 27824;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2JointType_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const_____get_28_29() {
 return 28540;
}

function b2WheelJoint__GetLocalAxisA_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 92 | 0;
}

function __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(__cxxabiv1____shim_type_info_____shim_type_info_28_29($0));
}

function JointEdgeGetOther_28unsigned_20int_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function void_20const__20emscripten__internal__getLightTypeID_b2WheelJointDef__28b2WheelJointDef_20const__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 29584;
}

function void_20const__20emscripten__internal__getLightTypeID_b2MouseJointDef__28b2MouseJointDef_20const__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 28848;
}

function void_20const__20emscripten__internal__getLightTypeID_b2MotorJointDef__28b2MotorJointDef_20const__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 28720;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2PolygonShape_20const_____get_28_29() {
 return 27696;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const_____get_28_29() {
 return 29672;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint_20const_____get_28_29() {
 return 28960;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint_20const_____get_28_29() {
 return 28832;
}

function b2Contact__IsTouching_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return (HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] & 2) == 2;
}

function b2Color__20emscripten__internal__raw_constructor_b2Color__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(16);
 b2Color__b2Color_28_29($0);
 return $0 | 0;
}

function b2Body__GetLinearVelocity_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] - -64 | 0;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20float____get_28_29() {
 return 28112;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2CircleShape_20const_____get_28_29() {
 return 27380;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint_20const_____get_28_29() {
 return 29556;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_20const_____get_28_29() {
 return 29452;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_20const_____get_28_29() {
 return 29680;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2BodyType_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const_____get_28_29() {
 return 28424;
}

function b2Contact__IsEnabled_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return (HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] & 4) == 4;
}

function __cxxabiv1____si_class_type_info_____si_class_type_info_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(__cxxabiv1____shim_type_info_____shim_type_info_28_29($0));
}

function void_20const__20emscripten__internal__getLightTypeID_b2WeldJointDef__28b2WeldJointDef_20const__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 29468;
}

function void_20const__20emscripten__internal__getLightTypeID_b2RopeJointDef__28b2RopeJointDef_20const__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 29328;
}

function std____2__allocator_int___destroy_5babi_v160004_5d_28int__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function int__20std____2____to_address_5babi_v160004_5d_int__28int__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Shape__GetType_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function b2Joint__GetType_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function b2Fixture__GetFilterData_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 32 | 0;
}

function b2Draw__GetFlags_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function b2Body__GetFixtureList_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 100 >> 2];
}

function std____2__array_emscripten__internal__GenericWireType_2c_200ul___data_5babi_v160004_5d_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_float_2c_20unsigned_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20unsigned_20int____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2World__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2World____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Shape__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Shape____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Joint__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Joint____get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Shape__2c_20float____get_28_29() {
 return 27248;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20int____get_28_29() {
 return 28144;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture__2c_20bool____get_28_29() {
 return 28e3;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2EdgeShape_20const_____get_28_29() {
 return 27532;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const_____get_28_29() {
 return 28124;
}

function double_20emscripten__internal__asGenericValue_int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return +HEAP32[$1 + 12 >> 2];
}

function b2MouseJoint__GetTarget_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 76 | 0;
}

function b2Contact__GetTangentSpeed_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPF32[HEAP32[$1 + 12 >> 2] + 144 >> 2];
}

function __cxxabiv1____pointer_type_info_____pointer_type_info_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(__cxxabiv1____shim_type_info_____shim_type_info_28_29($0));
}

function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______begin_lifetime_5babi_v160004_5d_28char__2c_20unsigned_20long_29($0, $1) {}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20unsigned_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20b2DrawWrapper____getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__WithPolicies____ArgTypeList_bool_2c_20unsigned_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World__2c_20bool____get_28_29() {
 return 27028;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20float____get_28_29() {
 return 28292;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const_____get_28_29() {
 return 26560;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_20const_____get_28_29() {
 return 28012;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2World_20const_____get_28_29() {
 return 27060;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const_____get_28_29() {
 return 28556;
}

function embind_init_b2_28_29__$_6__operator_20b2Shape_20const__20_28__29_28b2FixtureDef__29_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 718;
}

function embind_init_b2_28_29__$_11__operator_20void_20_28__29_28b2JointDef__2c_20b2Body__29_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 723;
}

function b2Contact__GetRestitution_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPF32[HEAP32[$1 + 12 >> 2] + 140 >> 2];
}

function b2Body__GetWorldCenter_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 44 | 0;
}

function b2Body__GetLocalCenter_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 28 | 0;
}

function std____2____unwrap_iter_impl_char__2c_20true_____unwrap_5babi_v160004_5d_28char__29($0) {
 return char__20std____2____to_address_5babi_v160004_5d_char__28char__29($0);
}

function emscripten__internal__WithPolicies____ArgTypeList_int_2c_20unsigned_20int___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 2;
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Draw__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Draw____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2Body__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Body____get_28_29();
}

function emscripten__internal__TypeID_emscripten__internal__AllowedRawPointer_b2AABB__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2AABB____get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2PrismaticJoint_____get_28_29() {
 return 29144;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body__2c_20bool____get_28_29() {
 return 28432;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_unsigned_20int_2c_20emscripten__internal__AllowedRawPointer_b2Body_____get_28_29() {
 return 28460;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const_____get_28_29() {
 return 26636;
}

function embind_init_b2_28_29__$_9__operator_20void_20_28__29_28b2JointDef__2c_20b2Body__29_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 721;
}

function b2Vec2__20emscripten__internal__raw_constructor_b2Vec2__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(8);
 b2Vec2__b2Vec2_28_29($0);
 return $0 | 0;
}

function b2Shape__b2Shape_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 27312;
 return $0;
}

function void_20const__20emscripten__internal__getLightTypeID_b2FixtureDef__28b2FixtureDef_20const__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 27880;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RevoluteJoint_____get_28_29() {
 return 29320;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2DistanceJoint_____get_28_29() {
 return 28712;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const_____get_28_29() {
 return 28272;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const_____get_28_29() {
 return 26644;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2World_20const_____get_28_29() {
 return 27040;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Joint_20const_____get_28_29() {
 return 28588;
}

function b2RayCastCallback___b2RayCastCallback_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Fixture__GetShape_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
}

function b2Contact__GetChildIndexB_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 60 >> 2];
}

function b2Contact__GetChildIndexA_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 56 >> 2];
}

function b2ContactListener___b2ContactListener_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Body__GetTransform_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 12 | 0;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_int_2c_20emscripten__internal__AllowedRawPointer_b2Shape_20const_____get_28_29() {
 return 27116;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2Body_20const_____get_28_29() {
 return 28444;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20emscripten__internal__AllowedRawPointer_b2AABB_20const_____get_28_29() {
 return 26628;
}

function b2TreeNode__IsLeaf_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 24 >> 2] == -1;
}

function b2Contact__GetFriction_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPF32[HEAP32[$1 + 12 >> 2] + 136 >> 2];
}

function b2Body__GetType_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function b2Body__GetPosition_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 12 | 0;
}

function __cxxabiv1____class_type_info_____class_type_info_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(__cxxabiv1____shim_type_info_____shim_type_info_28_29($0));
}

function b2World__IsLocked_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP8[HEAP32[$1 + 12 >> 2] + 102989 | 0] & 1;
}

function b2Joint__GetBodyB_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 52 >> 2];
}

function b2Joint__GetBodyA_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 48 >> 2];
}

function b2Fixture__GetNext_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function b2Fixture__GetBody_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WheelJoint_____get_28_29() {
 return 29724;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MouseJoint_____get_28_29() {
 return 28968;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2MotorJoint_____get_28_29() {
 return 28840;
}

function embind_init_b2_28_29__$_0__operator_20void_20_28__29_28b2AABB__2c_20b2AABB__29_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 712;
}

function b2Rot__20emscripten__internal__raw_constructor_b2Rot__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(8);
 b2Rot__b2Rot_28_29($0);
 return $0 | 0;
}

function b2Body__GetWorld_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 88 >> 2];
}

function __cxxabiv1____enum_type_info_____enum_type_info_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(__cxxabiv1____shim_type_info_____shim_type_info_28_29($0));
}

function void_20const__20emscripten__internal__getLightTypeID_b2JointDef__28b2JointDef_20const__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 26924;
}

function emscripten__val__as_handle_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function emscripten__internal__noncopyable___noncopyable_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2WeldJoint_____get_28_29() {
 return 29576;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2RopeJoint_____get_28_29() {
 return 29460;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2World__2c_20b2Vec2______get_28_29() {
 return 26776;
}

function embind_init_b2_28_29__$_2__operator_20void_20_28__29_28b2Shape__2c_20float_29_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 714;
}

function b2QueryCallback___b2QueryCallback_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2ContactFilter___b2ContactFilter_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2__array_emscripten__internal__GenericWireType_2c_200ul___data_5babi_v160004_5d_28_29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 0;
}

function emscripten__internal__noncopyable__noncopyable_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__TypeID_b2RayCastCallbackWrapper_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RayCastCallbackWrapper___get_28_29();
}

function emscripten__internal__TypeID_b2ContactListenerWrapper_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2ContactListenerWrapper___get_28_29();
}

function void_20const__20emscripten__internal__getLightTypeID_b2Fixture__28b2Fixture_20const__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 27944;
}

function void_20const__20emscripten__internal__getLightTypeID_b2BodyDef__28b2BodyDef_20const__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 26852;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Fixture_____get_28_29() {
 return 28040;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2PrismaticJointDef_____get_28_29() {
 return 29020;
}

function embind_init_b2_28_29__$_8__operator_20unsigned_20int_20_28__29_28b2Body__29_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 720;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20b2Vec2_20const__2c_20float__2c_20b2Color_20const_____get_28_29() {
 return 26512;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20emscripten__internal__AllowedRawPointer_b2Shape_____get_28_29() {
 return 27260;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2RevoluteJointDef_____get_28_29() {
 return 29196;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2DistanceJointDef_____get_28_29() {
 return 28648;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2World_____get_28_29() {
 return 26808;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Joint_____get_28_29() {
 return 28596;
}

function embind_init_b2_28_29__$_12__operator_20b2Body__20_28__29_28b2JointDef__29_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 724;
}

function embind_init_b2_28_29__$_10__operator_20b2Body__20_28__29_28b2JointDef__29_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 722;
}

function b2RayCastCallbackWrapper__20_28_emscripten__base_b2RayCastCallback___getDowncaster_b2RayCastCallbackWrapper__28_29_29_28b2RayCastCallback__29() {
 return 477;
}

function b2ContactListenerWrapper__20_28_emscripten__base_b2ContactListener___getDowncaster_b2ContactListenerWrapper__28_29_29_28b2ContactListener__29() {
 return 485;
}

function legalfunc$_embind_register_bigint($0, $1, $2, $3, $4, $5, $6) {
 legalimport$_embind_register_bigint($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0);
}

function emscripten__internal__TypeID_b2QueryCallbackWrapper_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2QueryCallbackWrapper___get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20unsigned_20int__2c_20int__2c_20b2Color_20const_____get_28_29() {
 return 26496;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20emscripten__internal__AllowedRawPointer_b2Body_____get_28_29() {
 return 28392;
}

function void_20emscripten__internal__raw_destructor_b2PrismaticJoint__28b2PrismaticJoint__29($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function void_20const__20emscripten__internal__getLightTypeID_b2World__28b2World_20const__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 26736;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2WheelJointDef_____get_28_29() {
 return 29628;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2MouseJointDef_____get_28_29() {
 return 28892;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2MotorJointDef_____get_28_29() {
 return 28764;
}

function b2RayCastCallback__20_28_emscripten__base_b2RayCastCallback___getUpcaster_b2RayCastCallbackWrapper__28_29_29_28b2RayCastCallbackWrapper__29() {
 return 476;
}

function b2ContactListener__20_28_emscripten__base_b2ContactListener___getUpcaster_b2ContactListenerWrapper__28_29_29_28b2ContactListenerWrapper__29() {
 return 484;
}

function b2Body__GetContactList_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 112 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2WeldJointDef_____get_28_29() {
 return 29512;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2RopeJointDef_____get_28_29() {
 return 29372;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2PolygonShape_____get_28_29() {
 return 27680;
}

function b2Contact__GetFixtureB_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 52 >> 2];
}

function b2Contact__GetFixtureA_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 48 >> 2];
}

function void_20emscripten__internal__raw_destructor_b2RevoluteJoint__28b2RevoluteJoint__29($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function void_20emscripten__internal__raw_destructor_b2DistanceJoint__28b2DistanceJoint__29($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function void_20const__20emscripten__internal__getLightTypeID_b2Body__28b2Body_20const__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 26828;
}

function void_20const__20emscripten__internal__getLightTypeID_b2AABB__28b2AABB_20const__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 26584;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2CircleShape_____get_28_29() {
 return 27300;
}

function b2Body__GetJointList_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 108 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2FixtureDef_____get_28_29() {
 return 27920;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_b2Vec2_2c_20b2Transform_20const__2c_20b2Vec2_20const_____get_28_29() {
 return 24876;
}

function void_20emscripten__internal__raw_destructor_b2PolygonShape__28b2PolygonShape__29($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function embind_init_b2_28_29__$_3__operator_20float_20_28__29_28b2Shape__29_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 715;
}

function std____2__numeric_limits_long___max_5babi_v160004_5d_28_29() {
 return std____2____libcpp_numeric_limits_long_2c_20true___max_5babi_v160004_5d_28_29();
}

function emscripten__internal__TypeID_b2PrismaticJointDef_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2PrismaticJointDef___get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2JointDef_____get_28_29() {
 return 28492;
}

function b2Contact__GetNext_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
}

function void_20emscripten__internal__raw_destructor_b2CircleShape__28b2CircleShape__29($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2BodyDef_____get_28_29() {
 return 28172;
}

function b2QueryCallbackWrapper__20_28_emscripten__base_b2QueryCallback___getDowncaster_b2QueryCallbackWrapper__28_29_29_28b2QueryCallback__29() {
 return 472;
}

function b2Contact___b2Contact_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function _GLOBAL__sub_I_bind_cpp() {
 HEAP32[7725] = 958;
 HEAP32[7726] = 0;
 embind_init_builtin_28_29();
 HEAP32[7726] = HEAP32[7724];
 HEAP32[7724] = 30900;
}

function emscripten__internal__TypeID_b2RevoluteJointDef_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RevoluteJointDef___get_28_29();
}

function emscripten__internal__TypeID_b2DistanceJointDef_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2DistanceJointDef___get_28_29();
}

function b2Joint__GetNext_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
}

function void_20emscripten__internal__raw_destructor_b2WheelJoint__28b2WheelJoint__29($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function void_20emscripten__internal__raw_destructor_b2MouseJoint__28b2MouseJoint__29($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function void_20emscripten__internal__raw_destructor_b2MotorJoint__28b2MotorJoint__29($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function void_20emscripten__internal__raw_destructor_b2FixtureDef__28b2FixtureDef__29($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function void_20_28_emscripten__internal__NoBaseClass__getDowncaster_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28_29_29_28_29() {
 return 0;
}

function emscripten__internal__WithPolicies____ArgTypeList_void___getCount_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float_2c_20float_2c_20int_2c_20float__28_29() {
 return 17089;
}

function b2QueryCallback__20_28_emscripten__base_b2QueryCallback___getUpcaster_b2QueryCallbackWrapper__28_29_29_28b2QueryCallbackWrapper__29() {
 return 471;
}

function b2Body__GetNext_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 96 >> 2];
}

function emscripten__internal__TypeID_b2RayCastCallback_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RayCastCallback___get_28_29();
}

function emscripten__internal__TypeID_b2ContactListener_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2ContactListener___get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__internal__AllowedRawPointer_b2AABB_____get_28_29() {
 return 26624;
}

function b2Contact__GetManifold_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] - -64 | 0;
}

function void_20emscripten__internal__raw_destructor_b2WeldJoint__28b2WeldJoint__29($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function void_20emscripten__internal__raw_destructor_b2EdgeShape__28b2EdgeShape__29($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function void_20_28_emscripten__internal__NoBaseClass__getUpcaster_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28_29_29_28_29() {
 return 0;
}

function emscripten__internal__writeGenericWireTypes_28emscripten__internal__GenericWireType___29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20unsigned_20int__2c_20unsigned_20int_____get_28_29() {
 return 26092;
}

function b2Shape___b2Shape_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Joint___b2Joint_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function void_20std____2___IterOps_std____2___ClassicAlgPolicy_____validate_iter_reference_5babi_v160004_5d_std____2__reverse_iterator_b2Vec2_____28_29() {}

function std____2__allocator_b2Vec2___max_size_5babi_v160004_5d_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 536870911;
}

function emscripten__wrapper_b2RayCastCallback____wrapper_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 wasm2js_trap();
}

function emscripten__internal__TypeID_unsigned_20short_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_unsigned_20short___get_28_29();
}

function emscripten__internal__TypeID_b2PrismaticJoint_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2PrismaticJoint___get_28_29();
}

function char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20float__28_29() {
 return 16253;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20unsigned_20int_2c_20unsigned_20int____get_28_29() {
 return 24960;
}

function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20float_2c_20int_2c_20int__28_29() {
 return 16621;
}

function b2Draw___b2Draw_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2__allocator_int___max_size_5babi_v160004_5d_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1073741823;
}

function emscripten__wrapper_b2QueryCallback____wrapper_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 wasm2js_trap();
}

function emscripten__internal__TypeID_b2WheelJointDef_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2WheelJointDef___get_28_29();
}

function emscripten__internal__TypeID_b2Vec2_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Vec2_20const____get_28_29();
}

function emscripten__internal__TypeID_b2RevoluteJoint_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RevoluteJoint___get_28_29();
}

function emscripten__internal__TypeID_b2RayCastOutput_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RayCastOutput___get_28_29();
}

function emscripten__internal__TypeID_b2QueryCallback_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2QueryCallback___get_28_29();
}

function emscripten__internal__TypeID_b2MouseJointDef_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2MouseJointDef___get_28_29();
}

function emscripten__internal__TypeID_b2MotorJointDef_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2MotorJointDef___get_28_29();
}

function emscripten__internal__TypeID_b2DistanceJoint_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2DistanceJoint___get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_unsigned_20int_2c_20unsigned_20int_2c_20int____get_28_29() {
 return 24972;
}

function void_20std____2___IterOps_std____2___ClassicAlgPolicy_____validate_iter_reference_5babi_v160004_5d_std____2__reverse_iterator_int_____28_29() {}

function void_20emscripten__internal__raw_destructor_b2BodyDef__28b2BodyDef__29($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function void_20_28_emscripten__internal__NoBaseClass__getDowncaster_std____2__vector_int_2c_20std____2__allocator_int____28_29_29_28_29() {
 return 0;
}

function emscripten__internal__TypeID_b2WeldJointDef_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2WeldJointDef___get_28_29();
}

function emscripten__internal__TypeID_b2RopeJointDef_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RopeJointDef___get_28_29();
}

function emscripten__internal__TypeID_b2RayCastInput_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RayCastInput___get_28_29();
}

function emscripten__internal__TypeID_b2PolygonShape_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2PolygonShape___get_28_29();
}

function char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() {
 return 16913;
}

function void_20_28_emscripten__internal__NoBaseClass__getUpcaster_std____2__vector_int_2c_20std____2__allocator_int____28_29_29_28_29() {
 return 0;
}

function emscripten__internal__TypeID_b2Shape__Type_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Shape__Type___get_28_29();
}

function emscripten__internal__TypeID_b2DrawWrapper_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2DrawWrapper___get_28_29();
}

function emscripten__internal__TypeID_b2CircleShape_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2CircleShape___get_28_29();
}

function void_20emscripten__internal__raw_destructor_b2Shape__28b2Shape__29($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function void_20emscripten__internal__raw_destructor_b2Joint__28b2Joint__29($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function __emscripten_stdout_seek($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 i64toi32_i32$HIGH_BITS = 0;
 return 0;
}

function emscripten__internal__TypeID_int_20const__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_int_20const____get_28_29();
}

function emscripten__internal__TypeID_b2WheelJoint_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2WheelJoint___get_28_29();
}

function emscripten__internal__TypeID_b2MouseJoint_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2MouseJoint___get_28_29();
}

function emscripten__internal__TypeID_b2MotorJoint_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2MotorJoint___get_28_29();
}

function emscripten__internal__TypeID_b2FixtureDef_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2FixtureDef___get_28_29();
}

function void_20emscripten__internal__raw_destructor_b2Body__28b2Body__29($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function strdup($0) {
 var $1 = 0, $2 = 0;
 $1 = strlen($0) + 1 | 0;
 $2 = dlmalloc($1);
 if (!$2) {
  return 0;
 }
 return __memcpy($2, $0, $1);
}

function emscripten__internal__TypeID_b2WeldJoint_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2WeldJoint___get_28_29();
}

function emscripten__internal__TypeID_b2Transform_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Transform___get_28_29();
}

function emscripten__internal__TypeID_b2RopeJoint_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2RopeJoint___get_28_29();
}

function emscripten__internal__TypeID_b2JointType_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2JointType___get_28_29();
}

function emscripten__internal__TypeID_b2EdgeShape_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2EdgeShape___get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20unsigned_20int_2c_20float____get_28_29() {
 return 24924;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20b2RayCastCallbackWrapper_____get_28_29() {
 return 25700;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20b2ContactListenerWrapper_____get_28_29() {
 return 25972;
}

function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20float_2c_20int__28_29() {
 return 16614;
}

function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float_2c_20int_2c_20int__28_29() {
 return 16876;
}

function emscripten__wrapper_b2Draw____wrapper_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 wasm2js_trap();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20unsigned_20int_2c_20bool____get_28_29() {
 return 24904;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_unsigned_20int_2c_20unsigned_20int____get_28_29() {
 return 24952;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20unsigned_20int_2c_20int____get_28_29() {
 return 24864;
}

function b2RayCastCallback___b2RayCastCallback_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 wasm2js_trap();
}

function b2PrismaticJointDef__20_28_emscripten__base_b2JointDef___getDowncaster_b2PrismaticJointDef__28_29_29_28b2JointDef__29() {
 return 643;
}

function emscripten__internal__TypeID_b2MassData_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2MassData___get_28_29();
}

function emscripten__internal__TypeID_b2JointDef_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2JointDef___get_28_29();
}

function emscripten__internal__TypeID_b2BodyType_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2BodyType___get_28_29();
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20b2QueryCallbackWrapper_____get_28_29() {
 return 25448;
}

function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() {
 return 16607;
}

function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_5babi_v160004_5d_28_29_20const($0) {
 return $0;
}

function char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() {
 return 17181;
}

function b2RevoluteJointDef__20_28_emscripten__base_b2JointDef___getDowncaster_b2RevoluteJointDef__28_29_29_28b2JointDef__29() {
 return 656;
}

function b2JointDef__20_28_emscripten__base_b2JointDef___getUpcaster_b2PrismaticJointDef__28_29_29_28b2PrismaticJointDef__29() {
 return 642;
}

function b2DistanceJointDef__20_28_emscripten__base_b2JointDef___getDowncaster_b2DistanceJointDef__28_29_29_28b2JointDef__29() {
 return 614;
}

function __wasm_i64_udiv($0, $1, $2, $3) {
 $3 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3);
 return $3;
}

function emscripten__internal__TypeID_b2Fixture_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Fixture___get_28_29();
}

function emscripten__internal__TypeID_b2BodyDef_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2BodyDef___get_28_29();
}

function emscripten__internal__LightTypeID_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const____get_28_29() {
 return 25160;
}

function b2Timer__b2Timer_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Color__b2Color_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20b2Transform_20const_____get_28_29() {
 return 26576;
}

function emscripten__base_b2RayCastCallback___get_28_29() {
 return emscripten__internal__TypeID_b2RayCastCallback_2c_20void___get_28_29();
}

function emscripten__base_b2ContactListener___get_28_29() {
 return emscripten__internal__TypeID_b2ContactListener_2c_20void___get_28_29();
}

function b2QueryCallback___b2QueryCallback_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 wasm2js_trap();
}

function b2JointDef__20_28_emscripten__base_b2JointDef___getUpcaster_b2RevoluteJointDef__28_29_29_28b2RevoluteJointDef__29() {
 return 655;
}

function b2JointDef__20_28_emscripten__base_b2JointDef___getUpcaster_b2DistanceJointDef__28_29_29_28b2DistanceJointDef__29() {
 return 613;
}

function emscripten__internal__TypeID_b2Filter_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Filter___get_28_29();
}

function b2Vec3__b2Vec3_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Vec2__b2Vec2_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function b2Body___b2Body_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float_2c_20float__28_29() {
 return 17083;
}

function __wasm_rotl_i32($0, $1) {
 var $2 = 0;
 $2 = $1 & 31;
 $1 = 0 - $1 & 31;
 return (-1 >>> $2 & $0) << $2 | (-1 << $1 & $0) >>> $1;
}
function emscripten__internal__TypeID_b2World_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2World___get_28_29();
}

function emscripten__internal__TypeID_b2Shape_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Shape___get_28_29();
}

function emscripten__internal__TypeID_b2Joint_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Joint___get_28_29();
}

function emscripten__internal__TypeID_b2Color_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Color___get_28_29();
}

function b2Rot__b2Rot_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function emscripten__base_b2QueryCallback___get_28_29() {
 return emscripten__internal__TypeID_b2QueryCallback_2c_20void___get_28_29();
}

function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20float__28_29() {
 return 16935;
}

function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float_2c_20int__28_29() {
 return 17216;
}

function b2WheelJointDef__20_28_emscripten__base_b2JointDef___getDowncaster_b2WheelJointDef__28_29_29_28b2JointDef__29() {
 return 689;
}

function b2PolygonShape__GetChildCount_28_29_20const($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function b2MouseJointDef__20_28_emscripten__base_b2JointDef___getDowncaster_b2MouseJointDef__28_29_29_28b2JointDef__29() {
 return 633;
}

function b2MotorJointDef__20_28_emscripten__base_b2JointDef___getDowncaster_b2MotorJointDef__28_29_29_28b2JointDef__29() {
 return 623;
}

function __wasm_i64_mul($0, $1, $2, $3) {
 $3 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3);
 return $3;
}

function emscripten__internal__TypeID_b2Vec2_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Vec2___get_28_29();
}

function emscripten__internal__TypeID_b2Draw_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Draw___get_28_29();
}

function emscripten__internal__TypeID_b2Body_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Body___get_28_29();
}

function emscripten__internal__TypeID_b2AABB_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2AABB___get_28_29();
}

function emscripten__internal__LightTypeID_std____2__vector_int_2c_20std____2__allocator_int___20const____get_28_29() {
 return 25036;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20unsigned_20int_____get_28_29() {
 return 26084;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_float_2c_20unsigned_20int____get_28_29() {
 return 24936;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20unsigned_20int_____get_28_29() {
 return 25528;
}

function char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20float__28_29() {
 return 17210;
}

function b2CircleShape__GetChildCount_28_29_20const($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_5babi_v160004_5d_28_29($0) {
 return $0;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20unsigned_20int____get_28_29() {
 return 24944;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20b2DrawWrapper_____get_28_29() {
 return 26380;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_bool_2c_20unsigned_20int____get_28_29() {
 return 24916;
}

function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int_2c_20int__28_29() {
 return 15671;
}

function b2WeldJointDef__20_28_emscripten__base_b2JointDef___getDowncaster_b2WeldJointDef__28_29_29_28b2JointDef__29() {
 return 680;
}

function b2RopeJointDef__20_28_emscripten__base_b2JointDef___getDowncaster_b2RopeJointDef__28_29_29_28b2JointDef__29() {
 return 669;
}

function b2JointDef__20_28_emscripten__base_b2JointDef___getUpcaster_b2WheelJointDef__28_29_29_28b2WheelJointDef__29() {
 return 688;
}

function b2JointDef__20_28_emscripten__base_b2JointDef___getUpcaster_b2MouseJointDef__28_29_29_28b2MouseJointDef__29() {
 return 632;
}

function b2JointDef__20_28_emscripten__base_b2JointDef___getUpcaster_b2MotorJointDef__28_29_29_28b2MotorJointDef__29() {
 return 622;
}

function emscripten__internal__TypeID_short_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_short___get_28_29();
}

function emscripten__internal__TypeID_float_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_float___get_28_29();
}

function emscripten__internal__TypeID_b2Rot_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_b2Rot___get_28_29();
}

function emscripten__internal__LightTypeID_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______get_28_29() {
 return 25144;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_int_2c_20unsigned_20int____get_28_29() {
 return 24988;
}

function char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() {
 return 15696;
}

function b2EdgeShape__GetChildCount_28_29_20const($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 1;
}

function __cxxabiv1____shim_type_info_____shim_type_info_28_29($0) {
 $0 = $0 | 0;
 return std__type_info___type_info_28_29($0) | 0;
}

function emscripten__internal__LightTypeID_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____get_28_29() {
 return 25136;
}

function b2PrismaticJoint__20_28_emscripten__base_b2Joint___getDowncaster_b2PrismaticJoint__28_29_29_28b2Joint__29() {
 return 646;
}

function b2JointDef__20_28_emscripten__base_b2JointDef___getUpcaster_b2WeldJointDef__28_29_29_28b2WeldJointDef__29() {
 return 679;
}

function b2JointDef__20_28_emscripten__base_b2JointDef___getUpcaster_b2RopeJointDef__28_29_29_28b2RopeJointDef__29() {
 return 668;
}

function emscripten__internal__TypeID_bool_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_bool___get_28_29();
}

function b2Timer__GetMilliseconds_28_29_20const($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return Math_fround(0);
}

function b2RevoluteJoint__20_28_emscripten__base_b2Joint___getDowncaster_b2RevoluteJoint__28_29_29_28b2Joint__29() {
 return 659;
}

function b2Joint__20_28_emscripten__base_b2Joint___getUpcaster_b2PrismaticJoint__28_29_29_28b2PrismaticJoint__29() {
 return 645;
}

function b2DistanceJoint__20_28_emscripten__base_b2Joint___getDowncaster_b2DistanceJoint__28_29_29_28b2Joint__29() {
 return 617;
}

function char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int_2c_20float__28_29() {
 return 17266;
}

function b2PolygonShape__20_28_emscripten__base_b2Shape___getDowncaster_b2PolygonShape__28_29_29_28b2Shape__29() {
 return 548;
}

function b2Joint__20_28_emscripten__base_b2Joint___getUpcaster_b2RevoluteJoint__28_29_29_28b2RevoluteJoint__29() {
 return 658;
}

function b2Joint__20_28_emscripten__base_b2Joint___getUpcaster_b2DistanceJoint__28_29_29_28b2DistanceJoint__29() {
 return 616;
}

function b2Contact___b2Contact_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 wasm2js_trap();
}

function emscripten__internal__LightTypeID_std____2__vector_int_2c_20std____2__allocator_int______get_28_29() {
 return 25020;
}

function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20float__28_29() {
 return 15510;
}

function void_20emscripten__internal__NoBaseClass__verify_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28_29() {}

function emscripten__internal__LightTypeID_std____2__vector_int_2c_20std____2__allocator_int_____get_28_29() {
 return 25012;
}

function emscripten__base_b2JointDef___get_28_29() {
 return emscripten__internal__TypeID_b2JointDef_2c_20void___get_28_29();
}

function char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20float__28_29() {
 return 17261;
}

function char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int_2c_20int__28_29() {
 return 15469;
}

function b2Shape__20_28_emscripten__base_b2Shape___getUpcaster_b2PolygonShape__28_29_29_28b2PolygonShape__29() {
 return 547;
}

function b2CircleShape__20_28_emscripten__base_b2Shape___getDowncaster_b2CircleShape__28_29_29_28b2Shape__29() {
 return 531;
}

function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() {
 return 15501;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_unsigned_20int____get_28_29() {
 return 24984;
}

function char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() {
 return 15496;
}

function b2WheelJoint__20_28_emscripten__base_b2Joint___getDowncaster_b2WheelJoint__28_29_29_28b2Joint__29() {
 return 692;
}

function b2Shape___b2Shape_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 wasm2js_trap();
}

function b2Shape__20_28_emscripten__base_b2Shape___getUpcaster_b2CircleShape__28_29_29_28b2CircleShape__29() {
 return 530;
}

function b2MouseJoint__20_28_emscripten__base_b2Joint___getDowncaster_b2MouseJoint__28_29_29_28b2Joint__29() {
 return 636;
}

function b2MotorJoint__20_28_emscripten__base_b2Joint___getDowncaster_b2MotorJoint__28_29_29_28b2Joint__29() {
 return 626;
}

function b2Joint___b2Joint_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 wasm2js_trap();
}

function b2DrawWrapper__20_28_emscripten__base_b2Draw___getDowncaster_b2DrawWrapper__28_29_29_28b2Draw__29() {
 return 496;
}

function b2WeldJoint__20_28_emscripten__base_b2Joint___getDowncaster_b2WeldJoint__28_29_29_28b2Joint__29() {
 return 683;
}

function b2RopeJoint__20_28_emscripten__base_b2Joint___getDowncaster_b2RopeJoint__28_29_29_28b2Joint__29() {
 return 672;
}

function b2Joint__20_28_emscripten__base_b2Joint___getUpcaster_b2WheelJoint__28_29_29_28b2WheelJoint__29() {
 return 691;
}

function b2Joint__20_28_emscripten__base_b2Joint___getUpcaster_b2MouseJoint__28_29_29_28b2MouseJoint__29() {
 return 635;
}

function b2Joint__20_28_emscripten__base_b2Joint___getUpcaster_b2MotorJoint__28_29_29_28b2MotorJoint__29() {
 return 625;
}

function b2EdgeShape__20_28_emscripten__base_b2Shape___getDowncaster_b2EdgeShape__28_29_29_28b2Shape__29() {
 return 540;
}

function b2Draw___b2Draw_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 wasm2js_trap();
}

function b2Draw__20_28_emscripten__base_b2Draw___getUpcaster_b2DrawWrapper__28_29_29_28b2DrawWrapper__29() {
 return 495;
}

function void_20emscripten__internal__NoBaseClass__verify_std____2__vector_int_2c_20std____2__allocator_int____28_29() {}

function emscripten__base_b2Shape___get_28_29() {
 return emscripten__internal__TypeID_b2Shape_2c_20void___get_28_29();
}

function emscripten__base_b2Joint___get_28_29() {
 return emscripten__internal__TypeID_b2Joint_2c_20void___get_28_29();
}

function b2Shape__20_28_emscripten__base_b2Shape___getUpcaster_b2EdgeShape__28_29_29_28b2EdgeShape__29() {
 return 539;
}

function b2Joint__20_28_emscripten__base_b2Joint___getUpcaster_b2WeldJoint__28_29_29_28b2WeldJoint__29() {
 return 682;
}

function b2Joint__20_28_emscripten__base_b2Joint___getUpcaster_b2RopeJoint__28_29_29_28b2RopeJoint__29() {
 return 671;
}

function void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2RayCastCallback__28_29_29_28_29() {
 return 0;
}

function void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2ContactListener__28_29_29_28_29() {
 return 0;
}

function std____2__char_traits_char___assign_28char__2c_20char_20const__29($0, $1) {
 HEAP8[$0 | 0] = HEAPU8[$1 | 0];
}

function emscripten__base_b2Draw___get_28_29() {
 return emscripten__internal__TypeID_b2Draw_2c_20void___get_28_29();
}

function char_20const__20emscripten__internal__getGenericSignature_float_2c_20int_2c_20int__28_29() {
 return 15515;
}

function void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2RayCastCallback__28_29_29_28_29() {
 return 0;
}

function void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2ContactListener__28_29_29_28_29() {
 return 0;
}

function void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2QueryCallback__28_29_29_28_29() {
 return 0;
}

function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() {
 return 15519;
}

function char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() {
 return 15506;
}

function __cxx_global_var_init_2() {
 b2Vec2__b2Vec2_28float_2c_20float_29(30664, Math_fround(0), Math_fround(0));
}

function void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2QueryCallback__28_29_29_28_29() {
 return 0;
}

function std____2____libcpp_numeric_limits_unsigned_20long_2c_20true___max_5babi_v160004_5d_28_29() {
 return -1;
}

function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void____get_28_29() {
 return 25524;
}

function void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2FixtureDef__28_29_29_28_29() {
 return 0;
}

function stackAlloc($0) {
 $0 = $0 | 0;
 $0 = __stack_pointer - $0 & -16;
 __stack_pointer = $0;
 return $0 | 0;
}

function void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2FixtureDef__28_29_29_28_29() {
 return 0;
}

function void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2JointDef__28_29_29_28_29() {
 return 0;
}

function std____2____libcpp_numeric_limits_long_2c_20true___max_5babi_v160004_5d_28_29() {
 return 2147483647;
}

function void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2Fixture__28_29_29_28_29() {
 return 0;
}

function void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2BodyDef__28_29_29_28_29() {
 return 0;
}

function void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2JointDef__28_29_29_28_29() {
 return 0;
}

function _GLOBAL__sub_I_b2_contact_manager_cpp() {
 __cxx_global_var_init_3();
 __cxx_global_var_init_1_1();
}

function void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2Fixture__28_29_29_28_29() {
 return 0;
}

function void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2BodyDef__28_29_29_28_29() {
 return 0;
}

function void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2World__28_29_29_28_29() {
 return 0;
}

function void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2Shape__28_29_29_28_29() {
 return 0;
}

function void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2Joint__28_29_29_28_29() {
 return 0;
}

function emscripten__internal__LightTypeID_b2RayCastCallbackWrapper_20const____get_28_29() {
 return 25684;
}

function emscripten__internal__LightTypeID_b2ContactListenerWrapper_20const____get_28_29() {
 return 25956;
}

function void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2Draw__28_29_29_28_29() {
 return 0;
}

function void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2Body__28_29_29_28_29() {
 return 0;
}

function void_20_28_emscripten__internal__NoBaseClass__getDowncaster_b2AABB__28_29_29_28_29() {
 return 0;
}

function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() {
 return 15668;
}

function void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2World__28_29_29_28_29() {
 return 0;
}

function void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2Shape__28_29_29_28_29() {
 return 0;
}

function void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2Joint__28_29_29_28_29() {
 return 0;
}

function emscripten__internal__LightTypeID_b2QueryCallbackWrapper_20const____get_28_29() {
 return 25432;
}

function dynCall_jiji($0, $1, $2, $3, $4) {
 $3 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4) | 0;
 return $3;
}

function char_20const__20emscripten__internal__getGenericSignature_int_2c_20int__28_29() {
 return 15523;
}

function void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2Draw__28_29_29_28_29() {
 return 0;
}

function void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2Body__28_29_29_28_29() {
 return 0;
}

function void_20_28_emscripten__internal__NoBaseClass__getUpcaster_b2AABB__28_29_29_28_29() {
 return 0;
}

function emscripten__internal__LightTypeID_b2PrismaticJointDef_20const____get_28_29() {
 return 29004;
}

function emscripten__internal__LightTypeID_b2RevoluteJointDef_20const____get_28_29() {
 return 29180;
}

function emscripten__internal__LightTypeID_b2DistanceJointDef_20const____get_28_29() {
 return 28632;
}

function emscripten__internal__LightTypeID_b2RayCastCallback_20const____get_28_29() {
 return 25580;
}

function emscripten__internal__LightTypeID_b2ContactListener_20const____get_28_29() {
 return 25820;
}

function update_offset_to_base_28char_20const__2c_20long_29($0, $1) {
 return HEAP32[$0 + $1 >> 2];
}

function emscripten__internal__LightTypeID_b2RayCastCallbackWrapper____get_28_29() {
 return 25668;
}

function emscripten__internal__LightTypeID_b2PrismaticJoint_20const____get_28_29() {
 return 29040;
}

function emscripten__internal__LightTypeID_b2ContactListenerWrapper____get_28_29() {
 return 25928;
}

function std____2__pointer_traits_char____pointer_to_5babi_v160004_5d_28char__29($0) {
 return $0;
}

function emscripten__internal__LightTypeID_b2WheelJointDef_20const____get_28_29() {
 return 29612;
}

function emscripten__internal__LightTypeID_b2RevoluteJoint_20const____get_28_29() {
 return 29216;
}

function emscripten__internal__LightTypeID_b2RayCastCallbackWrapper___get_28_29() {
 return 25656;
}

function emscripten__internal__LightTypeID_b2QueryCallback_20const____get_28_29() {
 return 25336;
}

function emscripten__internal__LightTypeID_b2MouseJointDef_20const____get_28_29() {
 return 28876;
}

function emscripten__internal__LightTypeID_b2MotorJointDef_20const____get_28_29() {
 return 28748;
}

function emscripten__internal__LightTypeID_b2DistanceJoint_20const____get_28_29() {
 return 28668;
}

function emscripten__internal__LightTypeID_b2ContactListenerWrapper___get_28_29() {
 return 25904;
}

function __wasm_ctz_i32($0) {
 if ($0) {
  return 31 - Math_clz32($0 - 1 ^ $0) | 0;
 }
 return 32;
}

function emscripten__internal__LightTypeID_b2WeldJointDef_20const____get_28_29() {
 return 29496;
}

function emscripten__internal__LightTypeID_b2RopeJointDef_20const____get_28_29() {
 return 29356;
}

function emscripten__internal__LightTypeID_b2QueryCallbackWrapper____get_28_29() {
 return 25416;
}

function emscripten__internal__LightTypeID_b2PolygonShape_20const____get_28_29() {
 return 27664;
}

function char_20const__20emscripten__internal__getGenericSignature_void__28_29() {
 return 15666;
}

function _embind_register_bindings($0) {
 HEAP32[$0 + 4 >> 2] = HEAP32[7724];
 HEAP32[7724] = $0;
}

function std____throw_bad_array_new_length_5babi_v160004_5d_28_29() {
 abort();
 wasm2js_trap();
}

function emscripten__internal__LightTypeID_b2QueryCallbackWrapper___get_28_29() {
 return 25404;
}

function emscripten__internal__LightTypeID_b2DrawWrapper_20const____get_28_29() {
 return 26364;
}

function emscripten__internal__LightTypeID_b2CircleShape_20const____get_28_29() {
 return 27284;
}

function char_20const__20emscripten__internal__getGenericSignature_int__28_29() {
 return 15702;
}

function strnlen($0, $1) {
 var $2 = 0;
 $2 = memchr($0, 0, $1);
 return $2 ? $2 - $0 | 0 : $1;
}

function std__type_info__name_5babi_v160004_5d_28_29_20const($0) {
 return HEAP32[$0 + 4 >> 2];
}

function emscripten__internal__LightTypeID_b2WheelJoint_20const____get_28_29() {
 return 29648;
}

function emscripten__internal__LightTypeID_b2MouseJoint_20const____get_28_29() {
 return 28912;
}

function emscripten__internal__LightTypeID_b2MotorJoint_20const____get_28_29() {
 return 28784;
}

function emscripten__internal__LightTypeID_b2FixtureDef_20const____get_28_29() {
 return 27904;
}

function void_20emscripten__base_b2RayCastCallback___verify_b2RayCastCallbackWrapper__28_29() {}

function void_20emscripten__base_b2ContactListener___verify_b2ContactListenerWrapper__28_29() {}

function emscripten__internal__LightTypeID_b2WeldJoint_20const____get_28_29() {
 return 29532;
}

function emscripten__internal__LightTypeID_b2RopeJoint_20const____get_28_29() {
 return 29392;
}

function emscripten__internal__LightTypeID_b2PrismaticJointDef____get_28_29() {
 return 28988;
}

function emscripten__internal__LightTypeID_b2EdgeShape_20const____get_28_29() {
 return 27504;
}

function emscripten__internal__LightTypeID_b2RevoluteJointDef____get_28_29() {
 return 29164;
}

function emscripten__internal__LightTypeID_b2PrismaticJointDef___get_28_29() {
 return 28976;
}

function emscripten__internal__LightTypeID_b2JointDef_20const____get_28_29() {
 return 26932;
}

function emscripten__internal__LightTypeID_b2DistanceJointDef____get_28_29() {
 return 28616;
}

function emscripten__internal__LightTypeID_b2RevoluteJointDef___get_28_29() {
 return 29152;
}

function emscripten__internal__LightTypeID_b2RayCastCallback____get_28_29() {
 return 25564;
}

function emscripten__internal__LightTypeID_b2Fixture_20const____get_28_29() {
 return 27968;
}

function emscripten__internal__LightTypeID_b2DistanceJointDef___get_28_29() {
 return 28604;
}

function emscripten__internal__LightTypeID_b2ContactListener____get_28_29() {
 return 25804;
}

function emscripten__internal__LightTypeID_b2BodyDef_20const____get_28_29() {
 return 26860;
}

function emscripten__internal__LightTypeID_b2RayCastCallback___get_28_29() {
 return 25556;
}

function emscripten__internal__LightTypeID_b2PrismaticJoint____get_28_29() {
 return 29024;
}

function emscripten__internal__LightTypeID_b2ContactListener___get_28_29() {
 return 25796;
}

function char__20std____2____to_address_5babi_v160004_5d_char__28char__29($0) {
 return $0;
}

function void_20emscripten__base_b2QueryCallback___verify_b2QueryCallbackWrapper__28_29() {}

function emscripten__internal__LightTypeID_unsigned_20short___get_28_29() {
 return 24408;
}

function emscripten__internal__LightTypeID_b2World_20const____get_28_29() {
 return 26760;
}

function emscripten__internal__LightTypeID_b2WheelJointDef____get_28_29() {
 return 29596;
}

function emscripten__internal__LightTypeID_b2Shape_20const____get_28_29() {
 return 27092;
}

function emscripten__internal__LightTypeID_b2RevoluteJoint____get_28_29() {
 return 29200;
}

function emscripten__internal__LightTypeID_b2QueryCallback____get_28_29() {
 return 25320;
}

function emscripten__internal__LightTypeID_b2PrismaticJoint___get_28_29() {
 return 19316;
}

function emscripten__internal__LightTypeID_b2MouseJointDef____get_28_29() {
 return 28860;
}

function emscripten__internal__LightTypeID_b2MotorJointDef____get_28_29() {
 return 28732;
}

function emscripten__internal__LightTypeID_b2Joint_20const____get_28_29() {
 return 28524;
}

function emscripten__internal__LightTypeID_b2DistanceJoint____get_28_29() {
 return 28652;
}

function emscripten__internal__LightTypeID_b2WheelJointDef___get_28_29() {
 return 29584;
}

function emscripten__internal__LightTypeID_b2WeldJointDef____get_28_29() {
 return 29480;
}

function emscripten__internal__LightTypeID_b2Vec2_20const____get_28_29() {
 return 24888;
}

function emscripten__internal__LightTypeID_b2RopeJointDef____get_28_29() {
 return 29340;
}

function emscripten__internal__LightTypeID_b2RevoluteJoint___get_28_29() {
 return 19480;
}

function emscripten__internal__LightTypeID_b2RayCastOutput___get_28_29() {
 return 25288;
}

function emscripten__internal__LightTypeID_b2QueryCallback___get_28_29() {
 return 25312;
}

function emscripten__internal__LightTypeID_b2PolygonShape____get_28_29() {
 return 27648;
}

function emscripten__internal__LightTypeID_b2MouseJointDef___get_28_29() {
 return 28848;
}

function emscripten__internal__LightTypeID_b2MotorJointDef___get_28_29() {
 return 28720;
}

function emscripten__internal__LightTypeID_b2Draw_20const____get_28_29() {
 return 26128;
}

function emscripten__internal__LightTypeID_b2DistanceJoint___get_28_29() {
 return 18624;
}

function emscripten__internal__LightTypeID_b2Body_20const____get_28_29() {
 return 28176;
}

function emscripten__internal__LightTypeID_b2AABB_20const____get_28_29() {
 return 26608;
}

function emscripten__internal__LightTypeID_b2WeldJointDef___get_28_29() {
 return 29468;
}

function emscripten__internal__LightTypeID_b2RopeJointDef___get_28_29() {
 return 29328;
}

function emscripten__internal__LightTypeID_b2RayCastInput___get_28_29() {
 return 25280;
}

function emscripten__internal__LightTypeID_b2PolygonShape___get_28_29() {
 return 18228;
}

function emscripten__internal__LightTypeID_b2DrawWrapper____get_28_29() {
 return 26348;
}

function emscripten__internal__LightTypeID_b2CircleShape____get_28_29() {
 return 27268;
}

function emscripten__internal__LightTypeID_b2WheelJoint____get_28_29() {
 return 29632;
}

function emscripten__internal__LightTypeID_b2Shape__Type___get_28_29() {
 return 24996;
}

function emscripten__internal__LightTypeID_b2MouseJoint____get_28_29() {
 return 28896;
}

function emscripten__internal__LightTypeID_b2MotorJoint____get_28_29() {
 return 28768;
}

function emscripten__internal__LightTypeID_b2FixtureDef____get_28_29() {
 return 27888;
}

function emscripten__internal__LightTypeID_b2DrawWrapper___get_28_29() {
 return 26336;
}

function emscripten__internal__LightTypeID_b2CircleShape___get_28_29() {
 return 18088;
}

function b2Timer__Reset_28_29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function emscripten__internal__LightTypeID_int_20const____get_28_29() {
 return 24420;
}

function emscripten__internal__LightTypeID_b2WheelJoint___get_28_29() {
 return 19720;
}

function emscripten__internal__LightTypeID_b2WeldJoint____get_28_29() {
 return 29516;
}

function emscripten__internal__LightTypeID_b2RopeJoint____get_28_29() {
 return 29376;
}

function emscripten__internal__LightTypeID_b2MouseJoint___get_28_29() {
 return 19120;
}

function emscripten__internal__LightTypeID_b2MotorJoint___get_28_29() {
 return 19040;
}

function emscripten__internal__LightTypeID_b2FixtureDef___get_28_29() {
 return 27880;
}

function emscripten__internal__LightTypeID_b2EdgeShape____get_28_29() {
 return 27488;
}

function void_20emscripten__internal__NoBaseClass__verify_b2RayCastCallback__28_29() {}

function void_20emscripten__internal__NoBaseClass__verify_b2ContactListener__28_29() {}

function out($0, $1, $2) {
 if (!(HEAPU8[$0 | 0] & 32)) {
  __fwritex($1, $2, $0);
 }
}

function emscripten__internal__LightTypeID_b2WeldJoint___get_28_29() {
 return 19640;
}

function emscripten__internal__LightTypeID_b2Transform___get_28_29() {
 return 24896;
}

function emscripten__internal__LightTypeID_b2RopeJoint___get_28_29() {
 return 19560;
}

function emscripten__internal__LightTypeID_b2JointType___get_28_29() {
 return 28496;
}

function emscripten__internal__LightTypeID_b2JointDef____get_28_29() {
 return 28476;
}

function emscripten__internal__LightTypeID_b2EdgeShape___get_28_29() {
 return 18156;
}

function emscripten__internal__LightTypeID_b2MassData___get_28_29() {
 return 25296;
}

function emscripten__internal__LightTypeID_b2JointDef___get_28_29() {
 return 26924;
}

function emscripten__internal__LightTypeID_b2Fixture____get_28_29() {
 return 27952;
}

function emscripten__internal__LightTypeID_b2BodyType___get_28_29() {
 return 25004;
}

function emscripten__internal__LightTypeID_b2BodyDef____get_28_29() {
 return 28156;
}

function void_20emscripten__internal__NoBaseClass__verify_b2QueryCallback__28_29() {}

function emscripten__internal__LightTypeID_b2Fixture___get_28_29() {
 return 27944;
}

function emscripten__internal__LightTypeID_b2BodyDef___get_28_29() {
 return 26852;
}

function __getTypeName($0) {
 $0 = $0 | 0;
 return strdup(HEAP32[$0 + 4 >> 2]) | 0;
}

function void_20emscripten__base_b2JointDef___verify_b2PrismaticJointDef__28_29() {}

function vfprintf($0, $1, $2) {
 return __vfprintf_internal($0, $1, $2, 962, 963);
}

function emscripten__internal__LightTypeID_b2World____get_28_29() {
 return 26744;
}

function emscripten__internal__LightTypeID_b2Shape____get_28_29() {
 return 27076;
}

function emscripten__internal__LightTypeID_b2Joint____get_28_29() {
 return 26908;
}

function emscripten__internal__LightTypeID_b2Filter___get_28_29() {
 return 25304;
}

function void_20emscripten__base_b2JointDef___verify_b2RevoluteJointDef__28_29() {}

function void_20emscripten__base_b2JointDef___verify_b2DistanceJointDef__28_29() {}

function emscripten__internal__LightTypeID_b2World___get_28_29() {
 return 26736;
}

function emscripten__internal__LightTypeID_b2Shape___get_28_29() {
 return 27068;
}

function emscripten__internal__LightTypeID_b2Joint___get_28_29() {
 return 26900;
}

function emscripten__internal__LightTypeID_b2Draw____get_28_29() {
 return 26112;
}

function emscripten__internal__LightTypeID_b2Color___get_28_29() {
 return 25272;
}

function emscripten__internal__LightTypeID_b2Body____get_28_29() {
 return 26836;
}

function emscripten__internal__LightTypeID_b2AABB____get_28_29() {
 return 26592;
}

function wctomb($0, $1) {
 if (!$0) {
  return 0;
 }
 return wcrtomb($0, $1, 0);
}

function void_20emscripten__internal__NoBaseClass__verify_b2FixtureDef__28_29() {}

function emscripten__internal__LightTypeID_b2Vec2___get_28_29() {
 return 24888;
}

function emscripten__internal__LightTypeID_b2Draw___get_28_29() {
 return 26104;
}

function emscripten__internal__LightTypeID_b2Body___get_28_29() {
 return 26828;
}

function emscripten__internal__LightTypeID_b2AABB___get_28_29() {
 return 26584;
}

function emscripten__internal__LightTypeID_short___get_28_29() {
 return 24396;
}

function emscripten__internal__LightTypeID_float___get_28_29() {
 return 24492;
}

function emscripten__internal__LightTypeID_b2Rot___get_28_29() {
 return 25264;
}

function void_20emscripten__internal__NoBaseClass__verify_b2JointDef__28_29() {}

function void_20emscripten__base_b2JointDef___verify_b2WheelJointDef__28_29() {}

function void_20emscripten__base_b2JointDef___verify_b2MouseJointDef__28_29() {}

function void_20emscripten__base_b2JointDef___verify_b2MotorJointDef__28_29() {}

function emscripten__internal__LightTypeID_bool___get_28_29() {
 return 24348;
}

function __cxxabiv1____shim_type_info__noop2_28_29_20const($0) {
 $0 = $0 | 0;
}

function __cxxabiv1____shim_type_info__noop1_28_29_20const($0) {
 $0 = $0 | 0;
}

function __cxx_global_var_init() {
 EmBindInit_b2__EmBindInit_b2_28_29(29920);
}

function _GLOBAL__sub_I_b2_block_allocator_cpp() {
 __cxx_global_var_init_1();
}

function void_20emscripten__internal__NoBaseClass__verify_b2Fixture__28_29() {}

function void_20emscripten__internal__NoBaseClass__verify_b2BodyDef__28_29() {}

function void_20emscripten__base_b2JointDef___verify_b2WeldJointDef__28_29() {}

function void_20emscripten__base_b2JointDef___verify_b2RopeJointDef__28_29() {}

function void_20emscripten__base_b2Joint___verify_b2PrismaticJoint__28_29() {}

function void_20emscripten__internal__NoBaseClass__verify_b2World__28_29() {}

function void_20emscripten__internal__NoBaseClass__verify_b2Shape__28_29() {}

function void_20emscripten__internal__NoBaseClass__verify_b2Joint__28_29() {}

function void_20emscripten__base_b2Joint___verify_b2RevoluteJoint__28_29() {}

function void_20emscripten__base_b2Joint___verify_b2DistanceJoint__28_29() {}

function void_20emscripten__internal__NoBaseClass__verify_b2Draw__28_29() {}

function void_20emscripten__internal__NoBaseClass__verify_b2Body__28_29() {}

function void_20emscripten__internal__NoBaseClass__verify_b2AABB__28_29() {}

function void_20emscripten__base_b2Shape___verify_b2PolygonShape__28_29() {}

function __cxa_pure_virtual() {
 abort_message(12335, 0);
 wasm2js_trap();
}

function _GLOBAL__sub_I_Box2DWebBindings_cpp() {
 __cxx_global_var_init();
}

function void_20emscripten__base_b2Shape___verify_b2CircleShape__28_29() {}

function emscripten_get_heap_size() {
 return __wasm_memory_size() << 16;
}

function void_20emscripten__base_b2Joint___verify_b2WheelJoint__28_29() {}

function void_20emscripten__base_b2Joint___verify_b2MouseJoint__28_29() {}

function void_20emscripten__base_b2Joint___verify_b2MotorJoint__28_29() {}

function void_20emscripten__base_b2Draw___verify_b2DrawWrapper__28_29() {}

function __cxx_global_var_init_1() {
 b2SizeMap__b2SizeMap_28_29(30020);
}

function void_20emscripten__base_b2Shape___verify_b2EdgeShape__28_29() {}

function void_20emscripten__base_b2Joint___verify_b2WeldJoint__28_29() {}

function void_20emscripten__base_b2Joint___verify_b2RopeJoint__28_29() {}

function emscripten__internal__NoBaseClass__get_28_29() {
 return 0;
}

function __cxx_global_var_init_1_1() {
 __cxa_atexit(822, 0, 1024);
}

function _GLOBAL__sub_I_b2_math_cpp() {
 __cxx_global_var_init_2();
}

function __emscripten_stdout_close($0) {
 $0 = $0 | 0;
 return 0;
}

function __cxx_global_var_init_3() {
 __cxa_atexit(821, 0, 1024);
}

function stackRestore($0) {
 $0 = $0 | 0;
 __stack_pointer = $0;
}

function vprintf($0, $1) {
 return vfprintf(29760, $0, $1);
}

function std__type_info___type_info_28_29($0) {
 return $0;
}

function abort_message($0, $1) {
 abort();
 wasm2js_trap();
}

function operator_20delete_28void__29($0) {
 dlfree($0);
}

function stackSave() {
 return __stack_pointer | 0;
}

function isdigit($0) {
 return $0 - 48 >>> 0 < 10;
}

function getpid() {
 return __syscall_getpid();
}

function __cxa_atexit($0, $1, $2) {
 return 0;
}

function floor($0) {
 return Math_floor($0);
}

function __errno_location() {
 return 31944;
}

function __syscall_getpid() {
 return 42;
}

function __lockfile($0) {
 return 1;
}

function __get_tp() {
 return 32004;
}

function __unlockfile($0) {}

function setTempRet0($0) {}


// EMSCRIPTEN_END_FUNCS

;
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = Table([null, embind_init_b2_28_29, GetFloat32_28unsigned_20int_2c_20int_29, TransformVector2_28b2Transform_20const__2c_20b2Vec2_20const__29, ContactSetEnabled_28unsigned_20int_2c_20bool_29, ContactIsTouching_28unsigned_20int_29, ContactSetTangentSpeed_28unsigned_20int_2c_20float_29, ContactGetTangentSpeed_28unsigned_20int_29, ContactSetFriction_28unsigned_20int_2c_20float_29, ContactGetFriction_28unsigned_20int_29, ContactResetFriction_28unsigned_20int_29, ContactSetRestitution_28unsigned_20int_2c_20float_29, ContactGetRestitution_28unsigned_20int_29, ContactResetRestitution_28unsigned_20int_29, ContactGetFixtureA_28unsigned_20int_29, ContactGetFixtureB_28unsigned_20int_29, ContactGetWorldManifold_28unsigned_20int_2c_20unsigned_20int_29, ContactGetManifold_28unsigned_20int_29, ManifoldGetType_28unsigned_20int_29, ManifoldGetPointCount_28unsigned_20int_29, ManifoldGetManifoldPointPtr_28unsigned_20int_2c_20int_29, ManifoldGetLocalPointValueX_28unsigned_20int_29, ManifoldGetLocalPointValueY_28unsigned_20int_29, ManifoldGetLocalNormalValueX_28unsigned_20int_29, ManifoldGetLocalNormalValueY_28unsigned_20int_29, ManifoldPointGetLocalPointX_28unsigned_20int_29, ManifoldPointGetLocalPointY_28unsigned_20int_29, ManifoldPointGetNormalImpulse_28unsigned_20int_29, ManifoldPointGetTangentImpulse_28unsigned_20int_29, WorldManifoldNew_28_29, WorldManifoldGetPointValueX_28unsigned_20int_2c_20int_29, WorldManifoldGetPointValueY_28unsigned_20int_2c_20int_29, WorldManifoldGetSeparationValue_28unsigned_20int_2c_20int_29, WorldManifoldGetNormalValueX_28unsigned_20int_29, WorldManifoldGetNormalValueY_28unsigned_20int_29, WorldManifoldDelete_28unsigned_20int_29, ContactImpulseGetNormalImpulse_28unsigned_20int_2c_20int_29, ContactImpulseGetTangentImpulse_28unsigned_20int_2c_20int_29, ContactImpulseGetCount_28unsigned_20int_29, JointEdgeGetOther_28unsigned_20int_29, JointEdgeGetJoint_28unsigned_20int_29, JointEdgeGetPrev_28unsigned_20int_29, JointEdgeGetNext_28unsigned_20int_29, void_20const__20emscripten__internal__getActualType_b2QueryCallback__28b2QueryCallback__29, void_20emscripten__internal__raw_destructor_b2QueryCallback__28b2QueryCallback__29, void_20const__20emscripten__internal__getActualType_b2QueryCallbackWrapper__28b2QueryCallbackWrapper__29, void_20emscripten__internal__raw_destructor_b2QueryCallbackWrapper__28b2QueryCallbackWrapper__29, b2QueryCallbackWrapper__20emscripten__internal__wrapped_new_b2QueryCallbackWrapper__2c_20b2QueryCallbackWrapper_2c_20emscripten__val__28emscripten__val___29, emscripten__internal__Invoker_b2QueryCallbackWrapper__2c_20emscripten__val_____invoke_28b2QueryCallbackWrapper__20_28__29_28emscripten__val___29_2c_20emscripten___EM_VAL__29, emscripten__val_20emscripten__internal__wrapped_extend_b2QueryCallbackWrapper__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const__29, emscripten__internal__Invoker_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const____invoke_28emscripten__val_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const__29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__29, void_20const__20emscripten__internal__getActualType_b2RayCastCallback__28b2RayCastCallback__29, void_20emscripten__internal__raw_destructor_b2RayCastCallback__28b2RayCastCallback__29, void_20const__20emscripten__internal__getActualType_b2RayCastCallbackWrapper__28b2RayCastCallbackWrapper__29, void_20emscripten__internal__raw_destructor_b2RayCastCallbackWrapper__28b2RayCastCallbackWrapper__29, b2RayCastCallbackWrapper__20emscripten__internal__wrapped_new_b2RayCastCallbackWrapper__2c_20b2RayCastCallbackWrapper_2c_20emscripten__val__28emscripten__val___29, emscripten__internal__Invoker_b2RayCastCallbackWrapper__2c_20emscripten__val_____invoke_28b2RayCastCallbackWrapper__20_28__29_28emscripten__val___29_2c_20emscripten___EM_VAL__29, emscripten__val_20emscripten__internal__wrapped_extend_b2RayCastCallbackWrapper__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const__29, void_20const__20emscripten__internal__getActualType_b2ContactListener__28b2ContactListener__29, void_20emscripten__internal__raw_destructor_b2ContactListener__28b2ContactListener__29, b2ContactListenerWrapper__registerContactFixture_28unsigned_20int_29, b2ContactListenerWrapper__unregisterContactFixture_28unsigned_20int_29, b2ContactListenerWrapper__isIndexOf_28unsigned_20int_29, void_20const__20emscripten__internal__getActualType_b2ContactListenerWrapper__28b2ContactListenerWrapper__29, void_20emscripten__internal__raw_destructor_b2ContactListenerWrapper__28b2ContactListenerWrapper__29, b2ContactListenerWrapper__20emscripten__internal__wrapped_new_b2ContactListenerWrapper__2c_20b2ContactListenerWrapper_2c_20emscripten__val__28emscripten__val___29, emscripten__internal__Invoker_b2ContactListenerWrapper__2c_20emscripten__val_____invoke_28b2ContactListenerWrapper__20_28__29_28emscripten__val___29_2c_20emscripten___EM_VAL__29, emscripten__val_20emscripten__internal__wrapped_extend_b2ContactListenerWrapper__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const__29, void_20const__20emscripten__internal__getActualType_b2Draw__28b2Draw__29, void_20emscripten__internal__raw_destructor_b2Draw__28b2Draw__29, b2Draw__SetFlags_28unsigned_20int_29, b2Draw__GetFlags_28_29_20const, b2Draw__AppendFlags_28unsigned_20int_29, b2Draw__ClearFlags_28unsigned_20int_29, void_20const__20emscripten__internal__getActualType_b2DrawWrapper__28b2DrawWrapper__29, void_20emscripten__internal__raw_destructor_b2DrawWrapper__28b2DrawWrapper__29, b2DrawWrapper__20emscripten__internal__wrapped_new_b2DrawWrapper__2c_20b2DrawWrapper_2c_20emscripten__val__28emscripten__val___29, emscripten__internal__Invoker_b2DrawWrapper__2c_20emscripten__val_____invoke_28b2DrawWrapper__20_28__29_28emscripten__val___29_2c_20emscripten___EM_VAL__29, emscripten__val_20emscripten__internal__wrapped_extend_b2DrawWrapper__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20const__2c_20emscripten__val_20const__29, void_20const__20emscripten__internal__getActualType_b2AABB__28b2AABB__29, void_20emscripten__internal__raw_destructor_b2AABB__28b2AABB__29, b2AABB__20emscripten__internal__operator_new_b2AABB__28_29, b2AABB__IsValid_28_29_20const, b2AABB__GetCenter_28_29_20const, b2AABB__GetExtents_28_29_20const, b2AABB__GetPerimeter_28_29_20const, b2AABB__Contains_28b2AABB_20const__29_20const, b2AABB__RayCast_28b2RayCastOutput__2c_20b2RayCastInput_20const__29_20const, b2Vec2__20emscripten__internal__MemberAccess_b2AABB_2c_20b2Vec2___getWire_b2AABB__28b2Vec2_20b2AABB____20const__2c_20b2AABB_20const__29, void_20emscripten__internal__MemberAccess_b2AABB_2c_20b2Vec2___setWire_b2AABB__28b2Vec2_20b2AABB____20const__2c_20b2AABB__2c_20b2Vec2__29, void_20const__20emscripten__internal__getActualType_b2World__28b2World__29, void_20emscripten__internal__raw_destructor_b2World__28b2World__29, b2World__20emscripten__internal__operator_new_b2World_2c_20b2Vec2__28b2Vec2___29, b2World__SetContactListener_28b2ContactListener__29, b2World__SetDebugDraw_28b2Draw__29, b2World__DebugDraw_28_29, b2World__CreateBody_28b2BodyDef_20const__29, b2World__DestroyBody_28b2Body__29, b2World__CreateJoint_28b2JointDef_20const__29, b2World__DestroyJoint_28b2Joint__29, b2World__Step_28float_2c_20int_2c_20int_29, b2World__QueryAABB_28b2QueryCallback__2c_20b2AABB_20const__29_20const, b2World__RayCast_28b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const__29_20const, b2World__SetAllowSleeping_28bool_29, b2World__GetAllowSleeping_28_29_20const, b2World__SetGravity_28b2Vec2_20const__29, b2World__GetGravity_28_29_20const, b2World__Dump_28_29, void_20const__20emscripten__internal__getActualType_b2Shape__28b2Shape__29, void_20emscripten__internal__raw_destructor_b2Shape__28b2Shape__29, b2Shape__Type_20emscripten__internal__MemberAccess_b2Shape_2c_20b2Shape__Type___getWire_b2Shape__28b2Shape__Type_20b2Shape____20const__2c_20b2Shape_20const__29, void_20emscripten__internal__MemberAccess_b2Shape_2c_20b2Shape__Type___setWire_b2Shape__28b2Shape__Type_20b2Shape____20const__2c_20b2Shape__2c_20b2Shape__Type_29, float_20emscripten__internal__MemberAccess_b2Shape_2c_20float___getWire_b2Shape__28float_20b2Shape____20const__2c_20b2Shape_20const__29, void_20emscripten__internal__MemberAccess_b2Shape_2c_20float___setWire_b2Shape__28float_20b2Shape____20const__2c_20b2Shape__2c_20float_29, b2Shape__GetType_28_29_20const, void_20const__20emscripten__internal__getActualType_b2CircleShape__28b2CircleShape__29, void_20emscripten__internal__raw_destructor_b2CircleShape__28b2CircleShape__29, b2CircleShape__20emscripten__internal__operator_new_b2CircleShape__28_29, b2Vec2__20emscripten__internal__MemberAccess_b2CircleShape_2c_20b2Vec2___getWire_b2CircleShape__28b2Vec2_20b2CircleShape____20const__2c_20b2CircleShape_20const__29, void_20emscripten__internal__MemberAccess_b2CircleShape_2c_20b2Vec2___setWire_b2CircleShape__28b2Vec2_20b2CircleShape____20const__2c_20b2CircleShape__2c_20b2Vec2__29, void_20const__20emscripten__internal__getActualType_b2EdgeShape__28b2EdgeShape__29, void_20emscripten__internal__raw_destructor_b2EdgeShape__28b2EdgeShape__29, void_20const__20emscripten__internal__getActualType_b2PolygonShape__28b2PolygonShape__29, void_20emscripten__internal__raw_destructor_b2PolygonShape__28b2PolygonShape__29, b2PolygonShape__20emscripten__internal__operator_new_b2PolygonShape__28_29, b2PolygonShape__Validate_28_29_20const, b2PolygonShape__SetAsBox_28float_2c_20float_29, b2PolygonShape__SetAsBox_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29, void_20const__20emscripten__internal__getActualType_b2FixtureDef__28b2FixtureDef__29, void_20emscripten__internal__raw_destructor_b2FixtureDef__28b2FixtureDef__29, b2FixtureDef__20emscripten__internal__operator_new_b2FixtureDef__28_29, float_20emscripten__internal__MemberAccess_b2FixtureDef_2c_20float___getWire_b2FixtureDef__28float_20b2FixtureDef____20const__2c_20b2FixtureDef_20const__29, void_20emscripten__internal__MemberAccess_b2FixtureDef_2c_20float___setWire_b2FixtureDef__28float_20b2FixtureDef____20const__2c_20b2FixtureDef__2c_20float_29, bool_20emscripten__internal__MemberAccess_b2FixtureDef_2c_20bool___getWire_b2FixtureDef__28bool_20b2FixtureDef____20const__2c_20b2FixtureDef_20const__29, void_20emscripten__internal__MemberAccess_b2FixtureDef_2c_20bool___setWire_b2FixtureDef__28bool_20b2FixtureDef____20const__2c_20b2FixtureDef__2c_20bool_29, b2Filter__20emscripten__internal__MemberAccess_b2FixtureDef_2c_20b2Filter___getWire_b2FixtureDef__28b2Filter_20b2FixtureDef____20const__2c_20b2FixtureDef_20const__29, void_20emscripten__internal__MemberAccess_b2FixtureDef_2c_20b2Filter___setWire_b2FixtureDef__28b2Filter_20b2FixtureDef____20const__2c_20b2FixtureDef__2c_20b2Filter__29, void_20const__20emscripten__internal__getActualType_b2Fixture__28b2Fixture__29, void_20emscripten__internal__raw_destructor_b2Fixture__28b2Fixture__29, b2Fixture__GetType_28_29_20const, b2Fixture__GetShape_28_29, b2Fixture__SetSensor_28bool_29, b2Fixture__IsSensor_28_29_20const, b2Fixture__SetFilterData_28b2Filter_20const__29, b2Fixture__GetFilterData_28_29_20const, b2Fixture__Refilter_28_29, b2Fixture__GetBody_28_29, b2Fixture__GetNext_28_29, b2Fixture__TestPoint_28b2Vec2_20const__29_20const, b2Fixture__RayCast_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int_29_20const, b2Fixture__GetMassData_28b2MassData__29_20const, b2Fixture__SetDensity_28float_29, b2Fixture__GetDensity_28_29_20const, b2Fixture__GetFriction_28_29_20const, b2Fixture__SetFriction_28float_29, b2Fixture__GetRestitution_28_29_20const, b2Fixture__SetRestitution_28float_29, b2Fixture__GetAABB_28int_29_20const, b2Fixture__Dump_28int_29, void_20const__20emscripten__internal__getActualType_b2BodyDef__28b2BodyDef__29, void_20emscripten__internal__raw_destructor_b2BodyDef__28b2BodyDef__29, b2BodyDef__20emscripten__internal__operator_new_b2BodyDef__28_29, b2BodyType_20emscripten__internal__MemberAccess_b2BodyDef_2c_20b2BodyType___getWire_b2BodyDef__28b2BodyType_20b2BodyDef____20const__2c_20b2BodyDef_20const__29, void_20emscripten__internal__MemberAccess_b2BodyDef_2c_20b2BodyType___setWire_b2BodyDef__28b2BodyType_20b2BodyDef____20const__2c_20b2BodyDef__2c_20b2BodyType_29, b2Vec2__20emscripten__internal__MemberAccess_b2BodyDef_2c_20b2Vec2___getWire_b2BodyDef__28b2Vec2_20b2BodyDef____20const__2c_20b2BodyDef_20const__29, void_20emscripten__internal__MemberAccess_b2BodyDef_2c_20b2Vec2___setWire_b2BodyDef__28b2Vec2_20b2BodyDef____20const__2c_20b2BodyDef__2c_20b2Vec2__29, float_20emscripten__internal__MemberAccess_b2BodyDef_2c_20float___getWire_b2BodyDef__28float_20b2BodyDef____20const__2c_20b2BodyDef_20const__29, void_20emscripten__internal__MemberAccess_b2BodyDef_2c_20float___setWire_b2BodyDef__28float_20b2BodyDef____20const__2c_20b2BodyDef__2c_20float_29, bool_20emscripten__internal__MemberAccess_b2BodyDef_2c_20bool___getWire_b2BodyDef__28bool_20b2BodyDef____20const__2c_20b2BodyDef_20const__29, void_20emscripten__internal__MemberAccess_b2BodyDef_2c_20bool___setWire_b2BodyDef__28bool_20b2BodyDef____20const__2c_20b2BodyDef__2c_20bool_29, void_20const__20emscripten__internal__getActualType_b2Body__28b2Body__29, void_20emscripten__internal__raw_destructor_b2Body__28b2Body__29, b2Body__CreateFixture_28b2FixtureDef_20const__29, b2Body__CreateFixture_28b2Shape_20const__2c_20float_29, b2Body__DestroyFixture_28b2Fixture__29, b2Body__SetTransform_28b2Vec2_20const__2c_20float_29, b2Body__GetTransform_28_29_20const, b2Body__GetPosition_28_29_20const, b2Body__GetAngle_28_29_20const, b2Body__GetWorldCenter_28_29_20const, b2Body__GetLocalCenter_28_29_20const, b2Body__SetLinearVelocity_28b2Vec2_20const__29, b2Body__GetLinearVelocity_28_29_20const, b2Body__SetAngularVelocity_28float_29, b2Body__GetAngularVelocity_28_29_20const, b2Body__ApplyForce_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29, b2Body__ApplyForceToCenter_28b2Vec2_20const__2c_20bool_29, b2Body__ApplyTorque_28float_2c_20bool_29, b2Body__ApplyLinearImpulse_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29, b2Body__ApplyLinearImpulseToCenter_28b2Vec2_20const__2c_20bool_29, b2Body__ApplyAngularImpulse_28float_2c_20bool_29, b2Body__GetMass_28_29_20const, b2Body__GetInertia_28_29_20const, b2Body__GetMassData_28b2MassData__29_20const, b2Body__ResetMassData_28_29, b2Body__GetWorldPoint_28b2Vec2_20const__29_20const, b2Body__GetWorldVector_28b2Vec2_20const__29_20const, b2Body__GetLocalPoint_28b2Vec2_20const__29_20const, b2Body__GetLocalVector_28b2Vec2_20const__29_20const, b2Body__GetLinearVelocityFromWorldPoint_28b2Vec2_20const__29_20const, b2Body__GetLinearVelocityFromLocalPoint_28b2Vec2_20const__29_20const, b2Body__GetLinearDamping_28_29_20const, b2Body__SetLinearDamping_28float_29, b2Body__GetAngularDamping_28_29_20const, b2Body__SetAngularDamping_28float_29, b2Body__GetGravityScale_28_29_20const, b2Body__SetGravityScale_28float_29, b2Body__SetType_28b2BodyType_29, b2Body__GetType_28_29_20const, b2Body__SetBullet_28bool_29, b2Body__IsBullet_28_29_20const, b2Body__SetSleepingAllowed_28bool_29, b2Body__IsSleepingAllowed_28_29_20const, b2Body__SetAwake_28bool_29, b2Body__IsAwake_28_29_20const, b2Body__SetEnabled_28bool_29, b2Body__IsEnabled_28_29_20const, b2Body__SetFixedRotation_28bool_29, b2Body__IsFixedRotation_28_29_20const, b2Body__GetFixtureList_28_29, b2Body__GetWorld_28_29, b2Body__Dump_28_29, void_20const__20emscripten__internal__getActualType_b2JointDef__28b2JointDef__29, void_20emscripten__internal__raw_destructor_b2JointDef__28b2JointDef__29, b2JointDef__20emscripten__internal__operator_new_b2JointDef__28_29, b2JointType_20emscripten__internal__MemberAccess_b2JointDef_2c_20b2JointType___getWire_b2JointDef__28b2JointType_20b2JointDef____20const__2c_20b2JointDef_20const__29, void_20emscripten__internal__MemberAccess_b2JointDef_2c_20b2JointType___setWire_b2JointDef__28b2JointType_20b2JointDef____20const__2c_20b2JointDef__2c_20b2JointType_29, bool_20emscripten__internal__MemberAccess_b2JointDef_2c_20bool___getWire_b2JointDef__28bool_20b2JointDef____20const__2c_20b2JointDef_20const__29, void_20emscripten__internal__MemberAccess_b2JointDef_2c_20bool___setWire_b2JointDef__28bool_20b2JointDef____20const__2c_20b2JointDef__2c_20bool_29, void_20const__20emscripten__internal__getActualType_b2Joint__28b2Joint__29, void_20emscripten__internal__raw_destructor_b2Joint__28b2Joint__29, b2Joint__GetType_28_29_20const, b2Joint__GetBodyA_28_29, b2Joint__GetBodyB_28_29, b2Joint__GetCollideConnected_28_29_20const, void_20const__20emscripten__internal__getActualType_b2DistanceJointDef__28b2DistanceJointDef__29, void_20emscripten__internal__raw_destructor_b2DistanceJointDef__28b2DistanceJointDef__29, b2DistanceJointDef__20emscripten__internal__operator_new_b2DistanceJointDef__28_29, b2Vec2__20emscripten__internal__MemberAccess_b2DistanceJointDef_2c_20b2Vec2___getWire_b2DistanceJointDef__28b2Vec2_20b2DistanceJointDef____20const__2c_20b2DistanceJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2DistanceJointDef_2c_20b2Vec2___setWire_b2DistanceJointDef__28b2Vec2_20b2DistanceJointDef____20const__2c_20b2DistanceJointDef__2c_20b2Vec2__29, float_20emscripten__internal__MemberAccess_b2DistanceJointDef_2c_20float___getWire_b2DistanceJointDef__28float_20b2DistanceJointDef____20const__2c_20b2DistanceJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2DistanceJointDef_2c_20float___setWire_b2DistanceJointDef__28float_20b2DistanceJointDef____20const__2c_20b2DistanceJointDef__2c_20float_29, void_20const__20emscripten__internal__getActualType_b2DistanceJoint__28b2DistanceJoint__29, void_20emscripten__internal__raw_destructor_b2DistanceJoint__28b2DistanceJoint__29, b2DistanceJoint__GetLocalAnchorA_28_29_20const, b2DistanceJoint__GetLocalAnchorB_28_29_20const, b2DistanceJoint__SetLength_28float_29, b2DistanceJoint__GetLength_28_29_20const, b2DistanceJoint__SetFrequency_28float_29, b2DistanceJoint__GetFrequency_28_29_20const, b2DistanceJoint__SetDampingRatio_28float_29, b2DistanceJoint__GetDampingRatio_28_29_20const, void_20const__20emscripten__internal__getActualType_b2MotorJointDef__28b2MotorJointDef__29, void_20emscripten__internal__raw_destructor_b2MotorJointDef__28b2MotorJointDef__29, b2MotorJointDef__20emscripten__internal__operator_new_b2MotorJointDef__28_29, b2Vec2__20emscripten__internal__MemberAccess_b2MotorJointDef_2c_20b2Vec2___getWire_b2MotorJointDef__28b2Vec2_20b2MotorJointDef____20const__2c_20b2MotorJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2MotorJointDef_2c_20b2Vec2___setWire_b2MotorJointDef__28b2Vec2_20b2MotorJointDef____20const__2c_20b2MotorJointDef__2c_20b2Vec2__29, float_20emscripten__internal__MemberAccess_b2MotorJointDef_2c_20float___getWire_b2MotorJointDef__28float_20b2MotorJointDef____20const__2c_20b2MotorJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2MotorJointDef_2c_20float___setWire_b2MotorJointDef__28float_20b2MotorJointDef____20const__2c_20b2MotorJointDef__2c_20float_29, void_20const__20emscripten__internal__getActualType_b2MotorJoint__28b2MotorJoint__29, void_20emscripten__internal__raw_destructor_b2MotorJoint__28b2MotorJoint__29, b2MotorJoint__SetLinearOffset_28b2Vec2_20const__29, b2MotorJoint__GetLinearOffset_28_29_20const, b2MotorJoint__SetAngularOffset_28float_29, b2MotorJoint__GetAngularOffset_28_29_20const, b2MotorJoint__SetMaxForce_28float_29, b2MotorJoint__GetMaxForce_28_29_20const, b2MotorJoint__SetMaxTorque_28float_29, b2MotorJoint__GetMaxTorque_28_29_20const, b2MotorJoint__SetCorrectionFactor_28float_29, b2MotorJoint__GetCorrectionFactor_28_29_20const, void_20const__20emscripten__internal__getActualType_b2MouseJointDef__28b2MouseJointDef__29, void_20emscripten__internal__raw_destructor_b2MouseJointDef__28b2MouseJointDef__29, b2MouseJointDef__20emscripten__internal__operator_new_b2MouseJointDef__28_29, b2Vec2__20emscripten__internal__MemberAccess_b2MouseJointDef_2c_20b2Vec2___getWire_b2MouseJointDef__28b2Vec2_20b2MouseJointDef____20const__2c_20b2MouseJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2MouseJointDef_2c_20b2Vec2___setWire_b2MouseJointDef__28b2Vec2_20b2MouseJointDef____20const__2c_20b2MouseJointDef__2c_20b2Vec2__29, float_20emscripten__internal__MemberAccess_b2MouseJointDef_2c_20float___getWire_b2MouseJointDef__28float_20b2MouseJointDef____20const__2c_20b2MouseJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2MouseJointDef_2c_20float___setWire_b2MouseJointDef__28float_20b2MouseJointDef____20const__2c_20b2MouseJointDef__2c_20float_29, void_20const__20emscripten__internal__getActualType_b2MouseJoint__28b2MouseJoint__29, void_20emscripten__internal__raw_destructor_b2MouseJoint__28b2MouseJoint__29, b2MouseJoint__SetTarget_28b2Vec2_20const__29, b2MouseJoint__GetTarget_28_29_20const, b2MouseJoint__SetMaxForce_28float_29, b2MouseJoint__GetMaxForce_28_29_20const, b2MouseJoint__SetFrequency_28float_29, b2MouseJoint__GetFrequency_28_29_20const, b2MouseJoint__SetDampingRatio_28float_29, b2MouseJoint__GetDampingRatio_28_29_20const, void_20const__20emscripten__internal__getActualType_b2PrismaticJointDef__28b2PrismaticJointDef__29, void_20emscripten__internal__raw_destructor_b2PrismaticJointDef__28b2PrismaticJointDef__29, b2PrismaticJointDef__20emscripten__internal__operator_new_b2PrismaticJointDef__28_29, b2Vec2__20emscripten__internal__MemberAccess_b2PrismaticJointDef_2c_20b2Vec2___getWire_b2PrismaticJointDef__28b2Vec2_20b2PrismaticJointDef____20const__2c_20b2PrismaticJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2PrismaticJointDef_2c_20b2Vec2___setWire_b2PrismaticJointDef__28b2Vec2_20b2PrismaticJointDef____20const__2c_20b2PrismaticJointDef__2c_20b2Vec2__29, float_20emscripten__internal__MemberAccess_b2PrismaticJointDef_2c_20float___getWire_b2PrismaticJointDef__28float_20b2PrismaticJointDef____20const__2c_20b2PrismaticJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2PrismaticJointDef_2c_20float___setWire_b2PrismaticJointDef__28float_20b2PrismaticJointDef____20const__2c_20b2PrismaticJointDef__2c_20float_29, bool_20emscripten__internal__MemberAccess_b2PrismaticJointDef_2c_20bool___getWire_b2PrismaticJointDef__28bool_20b2PrismaticJointDef____20const__2c_20b2PrismaticJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2PrismaticJointDef_2c_20bool___setWire_b2PrismaticJointDef__28bool_20b2PrismaticJointDef____20const__2c_20b2PrismaticJointDef__2c_20bool_29, void_20const__20emscripten__internal__getActualType_b2PrismaticJoint__28b2PrismaticJoint__29, void_20emscripten__internal__raw_destructor_b2PrismaticJoint__28b2PrismaticJoint__29, b2PrismaticJoint__GetLocalAnchorA_28_29_20const, b2PrismaticJoint__GetLocalAnchorB_28_29_20const, b2PrismaticJoint__GetLocalAxisA_28_29_20const, b2PrismaticJoint__GetReferenceAngle_28_29_20const, b2PrismaticJoint__GetJointTranslation_28_29_20const, b2PrismaticJoint__GetJointSpeed_28_29_20const, b2PrismaticJoint__IsLimitEnabled_28_29_20const, b2PrismaticJoint__EnableLimit_28bool_29, b2PrismaticJoint__GetLowerLimit_28_29_20const, b2PrismaticJoint__GetUpperLimit_28_29_20const, b2PrismaticJoint__SetLimits_28float_2c_20float_29, b2PrismaticJoint__IsMotorEnabled_28_29_20const, b2PrismaticJoint__EnableMotor_28bool_29, b2PrismaticJoint__SetMotorSpeed_28float_29, b2PrismaticJoint__GetMotorSpeed_28_29_20const, b2PrismaticJoint__SetMaxMotorForce_28float_29, b2PrismaticJoint__GetMaxMotorForce_28_29_20const, b2PrismaticJoint__GetMotorForce_28float_29_20const, void_20const__20emscripten__internal__getActualType_b2RevoluteJointDef__28b2RevoluteJointDef__29, void_20emscripten__internal__raw_destructor_b2RevoluteJointDef__28b2RevoluteJointDef__29, b2RevoluteJointDef__20emscripten__internal__operator_new_b2RevoluteJointDef__28_29, b2Vec2__20emscripten__internal__MemberAccess_b2RevoluteJointDef_2c_20b2Vec2___getWire_b2RevoluteJointDef__28b2Vec2_20b2RevoluteJointDef____20const__2c_20b2RevoluteJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2RevoluteJointDef_2c_20b2Vec2___setWire_b2RevoluteJointDef__28b2Vec2_20b2RevoluteJointDef____20const__2c_20b2RevoluteJointDef__2c_20b2Vec2__29, float_20emscripten__internal__MemberAccess_b2RevoluteJointDef_2c_20float___getWire_b2RevoluteJointDef__28float_20b2RevoluteJointDef____20const__2c_20b2RevoluteJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2RevoluteJointDef_2c_20float___setWire_b2RevoluteJointDef__28float_20b2RevoluteJointDef____20const__2c_20b2RevoluteJointDef__2c_20float_29, bool_20emscripten__internal__MemberAccess_b2RevoluteJointDef_2c_20bool___getWire_b2RevoluteJointDef__28bool_20b2RevoluteJointDef____20const__2c_20b2RevoluteJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2RevoluteJointDef_2c_20bool___setWire_b2RevoluteJointDef__28bool_20b2RevoluteJointDef____20const__2c_20b2RevoluteJointDef__2c_20bool_29, void_20const__20emscripten__internal__getActualType_b2RevoluteJoint__28b2RevoluteJoint__29, void_20emscripten__internal__raw_destructor_b2RevoluteJoint__28b2RevoluteJoint__29, b2RevoluteJoint__GetLocalAnchorA_28_29_20const, b2RevoluteJoint__GetLocalAnchorB_28_29_20const, b2RevoluteJoint__GetReferenceAngle_28_29_20const, b2RevoluteJoint__GetJointAngle_28_29_20const, b2RevoluteJoint__GetJointSpeed_28_29_20const, b2RevoluteJoint__IsLimitEnabled_28_29_20const, b2RevoluteJoint__EnableLimit_28bool_29, b2RevoluteJoint__GetLowerLimit_28_29_20const, b2RevoluteJoint__GetUpperLimit_28_29_20const, b2RevoluteJoint__SetLimits_28float_2c_20float_29, b2RevoluteJoint__IsMotorEnabled_28_29_20const, b2RevoluteJoint__EnableMotor_28bool_29, b2RevoluteJoint__SetMotorSpeed_28float_29, b2RevoluteJoint__GetMotorSpeed_28_29_20const, b2RevoluteJoint__SetMaxMotorTorque_28float_29, b2RevoluteJoint__GetMaxMotorTorque_28_29_20const, b2RevoluteJoint__GetMotorTorque_28float_29_20const, void_20const__20emscripten__internal__getActualType_b2RopeJointDef__28b2RopeJointDef__29, void_20emscripten__internal__raw_destructor_b2RopeJointDef__28b2RopeJointDef__29, b2RopeJointDef__20emscripten__internal__operator_new_b2RopeJointDef__28_29, b2Vec2__20emscripten__internal__MemberAccess_b2RopeJointDef_2c_20b2Vec2___getWire_b2RopeJointDef__28b2Vec2_20b2RopeJointDef____20const__2c_20b2RopeJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2RopeJointDef_2c_20b2Vec2___setWire_b2RopeJointDef__28b2Vec2_20b2RopeJointDef____20const__2c_20b2RopeJointDef__2c_20b2Vec2__29, float_20emscripten__internal__MemberAccess_b2RopeJointDef_2c_20float___getWire_b2RopeJointDef__28float_20b2RopeJointDef____20const__2c_20b2RopeJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2RopeJointDef_2c_20float___setWire_b2RopeJointDef__28float_20b2RopeJointDef____20const__2c_20b2RopeJointDef__2c_20float_29, void_20const__20emscripten__internal__getActualType_b2RopeJoint__28b2RopeJoint__29, void_20emscripten__internal__raw_destructor_b2RopeJoint__28b2RopeJoint__29, b2RopeJoint__GetLocalAnchorA_28_29_20const, b2RopeJoint__GetLocalAnchorB_28_29_20const, b2RopeJoint__SetMaxLength_28float_29, b2RopeJoint__GetMaxLength_28_29_20const, void_20const__20emscripten__internal__getActualType_b2WeldJointDef__28b2WeldJointDef__29, void_20emscripten__internal__raw_destructor_b2WeldJointDef__28b2WeldJointDef__29, b2WeldJointDef__20emscripten__internal__operator_new_b2WeldJointDef__28_29, b2Vec2__20emscripten__internal__MemberAccess_b2WeldJointDef_2c_20b2Vec2___getWire_b2WeldJointDef__28b2Vec2_20b2WeldJointDef____20const__2c_20b2WeldJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2WeldJointDef_2c_20b2Vec2___setWire_b2WeldJointDef__28b2Vec2_20b2WeldJointDef____20const__2c_20b2WeldJointDef__2c_20b2Vec2__29, float_20emscripten__internal__MemberAccess_b2WeldJointDef_2c_20float___getWire_b2WeldJointDef__28float_20b2WeldJointDef____20const__2c_20b2WeldJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2WeldJointDef_2c_20float___setWire_b2WeldJointDef__28float_20b2WeldJointDef____20const__2c_20b2WeldJointDef__2c_20float_29, void_20const__20emscripten__internal__getActualType_b2WeldJoint__28b2WeldJoint__29, void_20emscripten__internal__raw_destructor_b2WeldJoint__28b2WeldJoint__29, b2WeldJoint__GetLocalAnchorA_28_29_20const, b2WeldJoint__GetLocalAnchorB_28_29_20const, b2WeldJoint__GetReferenceAngle_28_29_20const, b2WeldJoint__SetFrequency_28float_29, b2WeldJoint__GetFrequency_28_29_20const, b2WeldJoint__SetDampingRatio_28float_29, b2WeldJoint__GetDampingRatio_28_29_20const, void_20const__20emscripten__internal__getActualType_b2WheelJointDef__28b2WheelJointDef__29, void_20emscripten__internal__raw_destructor_b2WheelJointDef__28b2WheelJointDef__29, b2WheelJointDef__20emscripten__internal__operator_new_b2WheelJointDef__28_29, b2Vec2__20emscripten__internal__MemberAccess_b2WheelJointDef_2c_20b2Vec2___getWire_b2WheelJointDef__28b2Vec2_20b2WheelJointDef____20const__2c_20b2WheelJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2WheelJointDef_2c_20b2Vec2___setWire_b2WheelJointDef__28b2Vec2_20b2WheelJointDef____20const__2c_20b2WheelJointDef__2c_20b2Vec2__29, bool_20emscripten__internal__MemberAccess_b2WheelJointDef_2c_20bool___getWire_b2WheelJointDef__28bool_20b2WheelJointDef____20const__2c_20b2WheelJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2WheelJointDef_2c_20bool___setWire_b2WheelJointDef__28bool_20b2WheelJointDef____20const__2c_20b2WheelJointDef__2c_20bool_29, float_20emscripten__internal__MemberAccess_b2WheelJointDef_2c_20float___getWire_b2WheelJointDef__28float_20b2WheelJointDef____20const__2c_20b2WheelJointDef_20const__29, void_20emscripten__internal__MemberAccess_b2WheelJointDef_2c_20float___setWire_b2WheelJointDef__28float_20b2WheelJointDef____20const__2c_20b2WheelJointDef__2c_20float_29, void_20const__20emscripten__internal__getActualType_b2WheelJoint__28b2WheelJoint__29, void_20emscripten__internal__raw_destructor_b2WheelJoint__28b2WheelJoint__29, b2WheelJoint__GetLocalAnchorA_28_29_20const, b2WheelJoint__GetLocalAnchorB_28_29_20const, b2WheelJoint__GetLocalAxisA_28_29_20const, b2WheelJoint__GetJointTranslation_28_29_20const, b2WheelJoint__IsMotorEnabled_28_29_20const, b2WheelJoint__EnableMotor_28bool_29, b2WheelJoint__SetMotorSpeed_28float_29, b2WheelJoint__GetMotorSpeed_28_29_20const, b2WheelJoint__SetMaxMotorTorque_28float_29, b2WheelJoint__GetMaxMotorTorque_28_29_20const, b2WheelJoint__GetMotorTorque_28float_29_20const, b2WheelJoint__SetSpringFrequencyHz_28float_29, b2WheelJoint__GetSpringFrequencyHz_28_29_20const, b2WheelJoint__SetSpringDampingRatio_28float_29, b2WheelJoint__GetSpringDampingRatio_28_29_20const, emscripten__internal__Invoker_float_2c_20unsigned_20int_2c_20int___invoke_28float_20_28__29_28unsigned_20int_2c_20int_29_2c_20unsigned_20int_2c_20int_29, emscripten__internal__Invoker_b2Vec2_2c_20b2Transform_20const__2c_20b2Vec2_20const____invoke_28b2Vec2_20_28__29_28b2Transform_20const__2c_20b2Vec2_20const__29_2c_20b2Transform__2c_20b2Vec2__29, emscripten__internal__Invoker_void_2c_20unsigned_20int_2c_20bool___invoke_28void_20_28__29_28unsigned_20int_2c_20bool_29_2c_20unsigned_20int_2c_20bool_29, emscripten__internal__Invoker_bool_2c_20unsigned_20int___invoke_28bool_20_28__29_28unsigned_20int_29_2c_20unsigned_20int_29, emscripten__internal__Invoker_void_2c_20unsigned_20int_2c_20float___invoke_28void_20_28__29_28unsigned_20int_2c_20float_29_2c_20unsigned_20int_2c_20float_29, emscripten__internal__Invoker_float_2c_20unsigned_20int___invoke_28float_20_28__29_28unsigned_20int_29_2c_20unsigned_20int_29, emscripten__internal__Invoker_void_2c_20unsigned_20int___invoke_28void_20_28__29_28unsigned_20int_29_2c_20unsigned_20int_29, emscripten__internal__Invoker_unsigned_20int_2c_20unsigned_20int___invoke_28unsigned_20int_20_28__29_28unsigned_20int_29_2c_20unsigned_20int_29, emscripten__internal__Invoker_void_2c_20unsigned_20int_2c_20unsigned_20int___invoke_28void_20_28__29_28unsigned_20int_2c_20unsigned_20int_29_2c_20unsigned_20int_2c_20unsigned_20int_29, emscripten__internal__Invoker_unsigned_20int_2c_20unsigned_20int_2c_20int___invoke_28unsigned_20int_20_28__29_28unsigned_20int_2c_20int_29_2c_20unsigned_20int_2c_20int_29, emscripten__internal__Invoker_unsigned_20int___invoke_28unsigned_20int_20_28__29_28_29_29, emscripten__internal__Invoker_int_2c_20unsigned_20int___invoke_28int_20_28__29_28unsigned_20int_29_2c_20unsigned_20int_29, std____2__vector_int_2c_20std____2__allocator_int____push_back_5babi_v160004_5d_28int_20const__29, std____2__vector_int_2c_20std____2__allocator_int____resize_28unsigned_20long_2c_20int_20const__29, std____2__vector_int_2c_20std____2__allocator_int____size_5babi_v160004_5d_28_29_20const, void_20const__20emscripten__internal__getActualType_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int____29, void_20emscripten__internal__raw_destructor_std____2__vector_int_2c_20std____2__allocator_int____28std____2__vector_int_2c_20std____2__allocator_int____29, std____2__vector_int_2c_20std____2__allocator_int____20emscripten__internal__operator_new_std____2__vector_int_2c_20std____2__allocator_int____28_29, emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____get_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long_29, emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int_____set_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const__29, b2Vec2__20emscripten__internal__raw_constructor_b2Vec2__28_29, void_20emscripten__internal__raw_destructor_b2Vec2__28b2Vec2__29, float_20emscripten__internal__MemberAccess_b2Vec2_2c_20float___getWire_b2Vec2__28float_20b2Vec2____20const__2c_20b2Vec2_20const__29, void_20emscripten__internal__MemberAccess_b2Vec2_2c_20float___setWire_b2Vec2__28float_20b2Vec2____20const__2c_20b2Vec2__2c_20float_29, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____push_back_5babi_v160004_5d_28b2Vec2_20const__29, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____resize_28unsigned_20long_2c_20b2Vec2_20const__29, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____size_5babi_v160004_5d_28_29_20const, void_20const__20emscripten__internal__getActualType_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29, void_20emscripten__internal__raw_destructor_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____29, std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____20emscripten__internal__operator_new_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____28_29, emscripten__internal__VectorAccess_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____get_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long_29, emscripten__internal__VectorAccess_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2_____set_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const__29, b2Rot__20emscripten__internal__raw_constructor_b2Rot__28_29, void_20emscripten__internal__raw_destructor_b2Rot__28b2Rot__29, float_20emscripten__internal__MemberAccess_b2Rot_2c_20float___getWire_b2Rot__28float_20b2Rot____20const__2c_20b2Rot_20const__29, void_20emscripten__internal__MemberAccess_b2Rot_2c_20float___setWire_b2Rot__28float_20b2Rot____20const__2c_20b2Rot__2c_20float_29, b2Transform__20emscripten__internal__raw_constructor_b2Transform__28_29, void_20emscripten__internal__raw_destructor_b2Transform__28b2Transform__29, b2Vec2__20emscripten__internal__MemberAccess_b2Transform_2c_20b2Vec2___getWire_b2Transform__28b2Vec2_20b2Transform____20const__2c_20b2Transform_20const__29, void_20emscripten__internal__MemberAccess_b2Transform_2c_20b2Vec2___setWire_b2Transform__28b2Vec2_20b2Transform____20const__2c_20b2Transform__2c_20b2Vec2__29, b2Rot__20emscripten__internal__MemberAccess_b2Transform_2c_20b2Rot___getWire_b2Transform__28b2Rot_20b2Transform____20const__2c_20b2Transform_20const__29, void_20emscripten__internal__MemberAccess_b2Transform_2c_20b2Rot___setWire_b2Transform__28b2Rot_20b2Transform____20const__2c_20b2Transform__2c_20b2Rot__29, b2Color__20emscripten__internal__raw_constructor_b2Color__28_29, void_20emscripten__internal__raw_destructor_b2Color__28b2Color__29, float_20emscripten__internal__MemberAccess_b2Color_2c_20float___getWire_b2Color__28float_20b2Color____20const__2c_20b2Color_20const__29, void_20emscripten__internal__MemberAccess_b2Color_2c_20float___setWire_b2Color__28float_20b2Color____20const__2c_20b2Color__2c_20float_29, b2RayCastInput__20emscripten__internal__raw_constructor_b2RayCastInput__28_29, void_20emscripten__internal__raw_destructor_b2RayCastInput__28b2RayCastInput__29, b2Vec2__20emscripten__internal__MemberAccess_b2RayCastInput_2c_20b2Vec2___getWire_b2RayCastInput__28b2Vec2_20b2RayCastInput____20const__2c_20b2RayCastInput_20const__29, void_20emscripten__internal__MemberAccess_b2RayCastInput_2c_20b2Vec2___setWire_b2RayCastInput__28b2Vec2_20b2RayCastInput____20const__2c_20b2RayCastInput__2c_20b2Vec2__29, float_20emscripten__internal__MemberAccess_b2RayCastInput_2c_20float___getWire_b2RayCastInput__28float_20b2RayCastInput____20const__2c_20b2RayCastInput_20const__29, void_20emscripten__internal__MemberAccess_b2RayCastInput_2c_20float___setWire_b2RayCastInput__28float_20b2RayCastInput____20const__2c_20b2RayCastInput__2c_20float_29, b2RayCastOutput__20emscripten__internal__raw_constructor_b2RayCastOutput__28_29, void_20emscripten__internal__raw_destructor_b2RayCastOutput__28b2RayCastOutput__29, b2Vec2__20emscripten__internal__MemberAccess_b2RayCastOutput_2c_20b2Vec2___getWire_b2RayCastOutput__28b2Vec2_20b2RayCastOutput____20const__2c_20b2RayCastOutput_20const__29, void_20emscripten__internal__MemberAccess_b2RayCastOutput_2c_20b2Vec2___setWire_b2RayCastOutput__28b2Vec2_20b2RayCastOutput____20const__2c_20b2RayCastOutput__2c_20b2Vec2__29, float_20emscripten__internal__MemberAccess_b2RayCastOutput_2c_20float___getWire_b2RayCastOutput__28float_20b2RayCastOutput____20const__2c_20b2RayCastOutput_20const__29, void_20emscripten__internal__MemberAccess_b2RayCastOutput_2c_20float___setWire_b2RayCastOutput__28float_20b2RayCastOutput____20const__2c_20b2RayCastOutput__2c_20float_29, b2MassData__20emscripten__internal__raw_constructor_b2MassData__28_29, void_20emscripten__internal__raw_destructor_b2MassData__28b2MassData__29, float_20emscripten__internal__MemberAccess_b2MassData_2c_20float___getWire_b2MassData__28float_20b2MassData____20const__2c_20b2MassData_20const__29, void_20emscripten__internal__MemberAccess_b2MassData_2c_20float___setWire_b2MassData__28float_20b2MassData____20const__2c_20b2MassData__2c_20float_29, b2Vec2__20emscripten__internal__MemberAccess_b2MassData_2c_20b2Vec2___getWire_b2MassData__28b2Vec2_20b2MassData____20const__2c_20b2MassData_20const__29, void_20emscripten__internal__MemberAccess_b2MassData_2c_20b2Vec2___setWire_b2MassData__28b2Vec2_20b2MassData____20const__2c_20b2MassData__2c_20b2Vec2__29, b2Filter__20emscripten__internal__raw_constructor_b2Filter__28_29, void_20emscripten__internal__raw_destructor_b2Filter__28b2Filter__29, unsigned_20short_20emscripten__internal__MemberAccess_b2Filter_2c_20unsigned_20short___getWire_b2Filter__28unsigned_20short_20b2Filter____20const__2c_20b2Filter_20const__29, void_20emscripten__internal__MemberAccess_b2Filter_2c_20unsigned_20short___setWire_b2Filter__28unsigned_20short_20b2Filter____20const__2c_20b2Filter__2c_20unsigned_20short_29, short_20emscripten__internal__MemberAccess_b2Filter_2c_20short___getWire_b2Filter__28short_20b2Filter____20const__2c_20b2Filter_20const__29, void_20emscripten__internal__MemberAccess_b2Filter_2c_20short___setWire_b2Filter__28short_20b2Filter____20const__2c_20b2Filter__2c_20short_29, emscripten__internal__MethodInvoker_bool_20_28b2QueryCallback____29_28unsigned_20int_29_2c_20bool_2c_20b2QueryCallback__2c_20unsigned_20int___invoke_28bool_20_28b2QueryCallback____20const__29_28unsigned_20int_29_2c_20b2QueryCallback__2c_20unsigned_20int_29, b2QueryCallback__20emscripten__base_b2QueryCallback___convertPointer_b2QueryCallbackWrapper_2c_20b2QueryCallback__28b2QueryCallbackWrapper__29, b2QueryCallbackWrapper__20emscripten__base_b2QueryCallback___convertPointer_b2QueryCallback_2c_20b2QueryCallbackWrapper__28b2QueryCallback__29, emscripten__class__b2QueryCallback_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2QueryCallback_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2QueryCallbackWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2QueryCallbackWrapper__29____invoke_28b2QueryCallbackWrapper__29, emscripten__internal__FunctionInvoker_void_20_28__29_28b2QueryCallbackWrapper__29_2c_20void_2c_20b2QueryCallbackWrapper____invoke_28void_20_28___29_28b2QueryCallbackWrapper__29_2c_20b2QueryCallbackWrapper__29, emscripten__internal__MethodInvoker_float_20_28b2RayCastCallback____29_28unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_29_2c_20float_2c_20b2RayCastCallback__2c_20unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float___invoke_28float_20_28b2RayCastCallback____20const__29_28unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_29_2c_20b2RayCastCallback__2c_20unsigned_20int_2c_20b2Vec2__2c_20b2Vec2__2c_20float_29, b2RayCastCallback__20emscripten__base_b2RayCastCallback___convertPointer_b2RayCastCallbackWrapper_2c_20b2RayCastCallback__28b2RayCastCallbackWrapper__29, b2RayCastCallbackWrapper__20emscripten__base_b2RayCastCallback___convertPointer_b2RayCastCallback_2c_20b2RayCastCallbackWrapper__28b2RayCastCallback__29, emscripten__class__b2RayCastCallback_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2RayCastCallback_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2RayCastCallbackWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2RayCastCallbackWrapper__29____invoke_28b2RayCastCallbackWrapper__29, emscripten__internal__FunctionInvoker_void_20_28__29_28b2RayCastCallbackWrapper__29_2c_20void_2c_20b2RayCastCallbackWrapper____invoke_28void_20_28___29_28b2RayCastCallbackWrapper__29_2c_20b2RayCastCallbackWrapper__29, emscripten__internal__MethodInvoker_void_20_28b2ContactListener____29_28unsigned_20int_29_2c_20void_2c_20b2ContactListener__2c_20unsigned_20int___invoke_28void_20_28b2ContactListener____20const__29_28unsigned_20int_29_2c_20b2ContactListener__2c_20unsigned_20int_29, emscripten__internal__MethodInvoker_void_20_28b2ContactListener____29_28unsigned_20int_2c_20unsigned_20int_29_2c_20void_2c_20b2ContactListener__2c_20unsigned_20int_2c_20unsigned_20int___invoke_28void_20_28b2ContactListener____20const__29_28unsigned_20int_2c_20unsigned_20int_29_2c_20b2ContactListener__2c_20unsigned_20int_2c_20unsigned_20int_29, emscripten__internal__MethodInvoker_void_20_28b2ContactListenerWrapper____29_28unsigned_20int_29_2c_20void_2c_20b2ContactListenerWrapper__2c_20unsigned_20int___invoke_28void_20_28b2ContactListenerWrapper____20const__29_28unsigned_20int_29_2c_20b2ContactListenerWrapper__2c_20unsigned_20int_29, emscripten__internal__MethodInvoker_bool_20_28b2ContactListenerWrapper____29_28unsigned_20int_29_2c_20bool_2c_20b2ContactListenerWrapper__2c_20unsigned_20int___invoke_28bool_20_28b2ContactListenerWrapper____20const__29_28unsigned_20int_29_2c_20b2ContactListenerWrapper__2c_20unsigned_20int_29, b2ContactListener__20emscripten__base_b2ContactListener___convertPointer_b2ContactListenerWrapper_2c_20b2ContactListener__28b2ContactListenerWrapper__29, b2ContactListenerWrapper__20emscripten__base_b2ContactListener___convertPointer_b2ContactListener_2c_20b2ContactListenerWrapper__28b2ContactListener__29, emscripten__class__b2ContactListener_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2ContactListener_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2ContactListenerWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2ContactListenerWrapper__29____invoke_28b2ContactListenerWrapper__29, emscripten__internal__FunctionInvoker_void_20_28__29_28b2ContactListenerWrapper__29_2c_20void_2c_20b2ContactListenerWrapper____invoke_28void_20_28___29_28b2ContactListenerWrapper__29_2c_20b2ContactListenerWrapper__29, emscripten__internal__MethodInvoker_void_20_28b2Draw____29_28unsigned_20int_29_2c_20void_2c_20b2Draw__2c_20unsigned_20int___invoke_28void_20_28b2Draw____20const__29_28unsigned_20int_29_2c_20b2Draw__2c_20unsigned_20int_29, emscripten__internal__MethodInvoker_unsigned_20int_20_28b2Draw____29_28_29_20const_2c_20unsigned_20int_2c_20b2Draw_20const____invoke_28unsigned_20int_20_28b2Draw____20const__29_28_29_20const_2c_20b2Draw_20const__29, emscripten__internal__MethodInvoker_void_20_28b2Draw____29_28unsigned_20int_2c_20int_2c_20b2Color_20const__29_2c_20void_2c_20b2Draw__2c_20unsigned_20int_2c_20int_2c_20b2Color_20const____invoke_28void_20_28b2Draw____20const__29_28unsigned_20int_2c_20int_2c_20b2Color_20const__29_2c_20b2Draw__2c_20unsigned_20int_2c_20int_2c_20b2Color__29, emscripten__internal__MethodInvoker_void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29_2c_20void_2c_20b2Draw__2c_20b2Vec2_20const__2c_20float_2c_20b2Color_20const____invoke_28void_20_28b2Draw____20const__29_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29_2c_20b2Draw__2c_20b2Vec2__2c_20float_2c_20b2Color__29, emscripten__internal__MethodInvoker_void_20_28b2Draw____29_28b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const__29_2c_20void_2c_20b2Draw__2c_20b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const____invoke_28void_20_28b2Draw____20const__29_28b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const__29_2c_20b2Draw__2c_20b2Vec2__2c_20float_2c_20b2Vec2__2c_20b2Color__29, emscripten__internal__MethodInvoker_void_20_28b2Draw____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29_2c_20void_2c_20b2Draw__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const____invoke_28void_20_28b2Draw____20const__29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29_2c_20b2Draw__2c_20b2Vec2__2c_20b2Vec2__2c_20b2Color__29, emscripten__internal__MethodInvoker_void_20_28b2Draw____29_28b2Transform_20const__29_2c_20void_2c_20b2Draw__2c_20b2Transform_20const____invoke_28void_20_28b2Draw____20const__29_28b2Transform_20const__29_2c_20b2Draw__2c_20b2Transform__29, b2Draw__20emscripten__base_b2Draw___convertPointer_b2DrawWrapper_2c_20b2Draw__28b2DrawWrapper__29, b2DrawWrapper__20emscripten__base_b2Draw___convertPointer_b2Draw_2c_20b2DrawWrapper__28b2Draw__29, emscripten__class__b2Draw_2c_20emscripten__internal__NoBaseClass__20const__20emscripten__class__b2Draw_2c_20emscripten__internal__NoBaseClass___allow_subclass_b2DrawWrapper__28char_20const__2c_20emscripten__constructor___29_20const___lambda__28b2DrawWrapper__29____invoke_28b2DrawWrapper__29, emscripten__internal__FunctionInvoker_void_20_28__29_28b2DrawWrapper__29_2c_20void_2c_20b2DrawWrapper____invoke_28void_20_28___29_28b2DrawWrapper__29_2c_20b2DrawWrapper__29, emscripten__internal__Invoker_b2AABB____invoke_28b2AABB__20_28__29_28_29_29, emscripten__internal__MethodInvoker_bool_20_28b2AABB____29_28_29_20const_2c_20bool_2c_20b2AABB_20const____invoke_28bool_20_28b2AABB____20const__29_28_29_20const_2c_20b2AABB_20const__29, emscripten__internal__MethodInvoker_b2Vec2_20_28b2AABB____29_28_29_20const_2c_20b2Vec2_2c_20b2AABB_20const____invoke_28b2Vec2_20_28b2AABB____20const__29_28_29_20const_2c_20b2AABB_20const__29, emscripten__internal__MethodInvoker_float_20_28b2AABB____29_28_29_20const_2c_20float_2c_20b2AABB_20const____invoke_28float_20_28b2AABB____20const__29_28_29_20const_2c_20b2AABB_20const__29, emscripten__internal__FunctionInvoker_void_20_28__29_28b2AABB__2c_20b2AABB__29_2c_20void_2c_20b2AABB__2c_20b2AABB____invoke_28void_20_28___29_28b2AABB__2c_20b2AABB__29_2c_20b2AABB__2c_20b2AABB__29, emscripten__internal__FunctionInvoker_void_20_28__29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29_2c_20void_2c_20b2AABB__2c_20b2AABB__2c_20b2AABB____invoke_28void_20_28___29_28b2AABB__2c_20b2AABB__2c_20b2AABB__29_2c_20b2AABB__2c_20b2AABB__2c_20b2AABB__29, emscripten__internal__MethodInvoker_bool_20_28b2AABB____29_28b2AABB_20const__29_20const_2c_20bool_2c_20b2AABB_20const__2c_20b2AABB_20const____invoke_28bool_20_28b2AABB____20const__29_28b2AABB_20const__29_20const_2c_20b2AABB_20const__2c_20b2AABB__29, emscripten__internal__MethodInvoker_bool_20_28b2AABB____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__29_20const_2c_20bool_2c_20b2AABB_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const____invoke_28bool_20_28b2AABB____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__29_20const_2c_20b2AABB_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput__29, emscripten__internal__Invoker_b2World__2c_20b2Vec2_____invoke_28b2World__20_28__29_28b2Vec2___29_2c_20b2Vec2__29, emscripten__internal__MethodInvoker_void_20_28b2World____29_28b2ContactListener__29_2c_20void_2c_20b2World__2c_20b2ContactListener____invoke_28void_20_28b2World____20const__29_28b2ContactListener__29_2c_20b2World__2c_20b2ContactListener__29, emscripten__internal__MethodInvoker_void_20_28b2World____29_28b2Draw__29_2c_20void_2c_20b2World__2c_20b2Draw____invoke_28void_20_28b2World____20const__29_28b2Draw__29_2c_20b2World__2c_20b2Draw__29, emscripten__internal__MethodInvoker_void_20_28b2World____29_28_29_2c_20void_2c_20b2World____invoke_28void_20_28b2World____20const__29_28_29_2c_20b2World__29, emscripten__internal__MethodInvoker_b2Body__20_28b2World____29_28b2BodyDef_20const__29_2c_20b2Body__2c_20b2World__2c_20b2BodyDef_20const____invoke_28b2Body__20_28b2World____20const__29_28b2BodyDef_20const__29_2c_20b2World__2c_20b2BodyDef_20const__29, emscripten__internal__MethodInvoker_void_20_28b2World____29_28b2Body__29_2c_20void_2c_20b2World__2c_20b2Body____invoke_28void_20_28b2World____20const__29_28b2Body__29_2c_20b2World__2c_20b2Body__29, emscripten__internal__MethodInvoker_b2Joint__20_28b2World____29_28b2JointDef_20const__29_2c_20b2Joint__2c_20b2World__2c_20b2JointDef_20const____invoke_28b2Joint__20_28b2World____20const__29_28b2JointDef_20const__29_2c_20b2World__2c_20b2JointDef_20const__29, emscripten__internal__MethodInvoker_void_20_28b2World____29_28b2Joint__29_2c_20void_2c_20b2World__2c_20b2Joint____invoke_28void_20_28b2World____20const__29_28b2Joint__29_2c_20b2World__2c_20b2Joint__29, emscripten__internal__MethodInvoker_void_20_28b2World____29_28float_2c_20int_2c_20int_29_2c_20void_2c_20b2World__2c_20float_2c_20int_2c_20int___invoke_28void_20_28b2World____20const__29_28float_2c_20int_2c_20int_29_2c_20b2World__2c_20float_2c_20int_2c_20int_29, emscripten__internal__MethodInvoker_void_20_28b2World____29_28b2QueryCallback__2c_20b2AABB_20const__29_20const_2c_20void_2c_20b2World_20const__2c_20b2QueryCallback__2c_20b2AABB_20const____invoke_28void_20_28b2World____20const__29_28b2QueryCallback__2c_20b2AABB_20const__29_20const_2c_20b2World_20const__2c_20b2QueryCallback__2c_20b2AABB__29, emscripten__internal__MethodInvoker_void_20_28b2World____29_28b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const__29_20const_2c_20void_2c_20b2World_20const__2c_20b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const____invoke_28void_20_28b2World____20const__29_28b2RayCastCallback__2c_20b2Vec2_20const__2c_20b2Vec2_20const__29_20const_2c_20b2World_20const__2c_20b2RayCastCallback__2c_20b2Vec2__2c_20b2Vec2__29, emscripten__internal__MethodInvoker_void_20_28b2World____29_28bool_29_2c_20void_2c_20b2World__2c_20bool___invoke_28void_20_28b2World____20const__29_28bool_29_2c_20b2World__2c_20bool_29, emscripten__internal__MethodInvoker_bool_20_28b2World____29_28_29_20const_2c_20bool_2c_20b2World_20const____invoke_28bool_20_28b2World____20const__29_28_29_20const_2c_20b2World_20const__29, emscripten__internal__MethodInvoker_void_20_28b2World____29_28b2Vec2_20const__29_2c_20void_2c_20b2World__2c_20b2Vec2_20const____invoke_28void_20_28b2World____20const__29_28b2Vec2_20const__29_2c_20b2World__2c_20b2Vec2__29, emscripten__internal__MethodInvoker_b2Vec2_20_28b2World____29_28_29_20const_2c_20b2Vec2_2c_20b2World_20const____invoke_28b2Vec2_20_28b2World____20const__29_28_29_20const_2c_20b2World_20const__29, emscripten__internal__MethodInvoker_b2Shape__Type_20_28b2Shape____29_28_29_20const_2c_20b2Shape__Type_2c_20b2Shape_20const____invoke_28b2Shape__Type_20_28b2Shape____20const__29_28_29_20const_2c_20b2Shape_20const__29, emscripten__internal__MethodInvoker_int_20_28b2Shape____29_28_29_20const_2c_20int_2c_20b2Shape_20const____invoke_28int_20_28b2Shape____20const__29_28_29_20const_2c_20b2Shape_20const__29, emscripten__internal__MethodInvoker_bool_20_28b2Shape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_2c_20bool_2c_20b2Shape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____invoke_28bool_20_28b2Shape____20const__29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_2c_20b2Shape_20const__2c_20b2Transform__2c_20b2Vec2__29, emscripten__internal__MethodInvoker_bool_20_28b2Shape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_2c_20bool_2c_20b2Shape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___invoke_28bool_20_28b2Shape____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_2c_20b2Shape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput__2c_20b2Transform__2c_20int_29, emscripten__internal__MethodInvoker_void_20_28b2Shape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_2c_20void_2c_20b2Shape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___invoke_28void_20_28b2Shape____20const__29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_2c_20b2Shape_20const__2c_20b2AABB__2c_20b2Transform__2c_20int_29, emscripten__internal__MethodInvoker_void_20_28b2Shape____29_28b2MassData__2c_20float_29_20const_2c_20void_2c_20b2Shape_20const__2c_20b2MassData__2c_20float___invoke_28void_20_28b2Shape____20const__29_28b2MassData__2c_20float_29_20const_2c_20b2Shape_20const__2c_20b2MassData__2c_20float_29, emscripten__internal__FunctionInvoker_void_20_28__29_28b2Shape__2c_20float_29_2c_20void_2c_20b2Shape__2c_20float___invoke_28void_20_28___29_28b2Shape__2c_20float_29_2c_20b2Shape__2c_20float_29, emscripten__internal__FunctionInvoker_float_20_28__29_28b2Shape__29_2c_20float_2c_20b2Shape____invoke_28float_20_28___29_28b2Shape__29_2c_20b2Shape__29, b2Shape__20emscripten__base_b2Shape___convertPointer_b2CircleShape_2c_20b2Shape__28b2CircleShape__29, b2CircleShape__20emscripten__base_b2Shape___convertPointer_b2Shape_2c_20b2CircleShape__28b2Shape__29, emscripten__internal__Invoker_b2CircleShape____invoke_28b2CircleShape__20_28__29_28_29_29, emscripten__internal__MethodInvoker_b2Shape__20_28b2CircleShape____29_28b2BlockAllocator__29_20const_2c_20b2Shape__2c_20b2CircleShape_20const__2c_20b2BlockAllocator____invoke_28b2Shape__20_28b2CircleShape____20const__29_28b2BlockAllocator__29_20const_2c_20b2CircleShape_20const__2c_20b2BlockAllocator__29, emscripten__internal__MethodInvoker_int_20_28b2CircleShape____29_28_29_20const_2c_20int_2c_20b2CircleShape_20const____invoke_28int_20_28b2CircleShape____20const__29_28_29_20const_2c_20b2CircleShape_20const__29, emscripten__internal__MethodInvoker_bool_20_28b2CircleShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_2c_20bool_2c_20b2CircleShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____invoke_28bool_20_28b2CircleShape____20const__29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_2c_20b2CircleShape_20const__2c_20b2Transform__2c_20b2Vec2__29, emscripten__internal__MethodInvoker_bool_20_28b2CircleShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_2c_20bool_2c_20b2CircleShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___invoke_28bool_20_28b2CircleShape____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_2c_20b2CircleShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput__2c_20b2Transform__2c_20int_29, emscripten__internal__MethodInvoker_void_20_28b2CircleShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_2c_20void_2c_20b2CircleShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___invoke_28void_20_28b2CircleShape____20const__29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_2c_20b2CircleShape_20const__2c_20b2AABB__2c_20b2Transform__2c_20int_29, emscripten__internal__MethodInvoker_void_20_28b2CircleShape____29_28b2MassData__2c_20float_29_20const_2c_20void_2c_20b2CircleShape_20const__2c_20b2MassData__2c_20float___invoke_28void_20_28b2CircleShape____20const__29_28b2MassData__2c_20float_29_20const_2c_20b2CircleShape_20const__2c_20b2MassData__2c_20float_29, b2Shape__20emscripten__base_b2Shape___convertPointer_b2EdgeShape_2c_20b2Shape__28b2EdgeShape__29, b2EdgeShape__20emscripten__base_b2Shape___convertPointer_b2Shape_2c_20b2EdgeShape__28b2Shape__29, emscripten__internal__MethodInvoker_b2Shape__20_28b2EdgeShape____29_28b2BlockAllocator__29_20const_2c_20b2Shape__2c_20b2EdgeShape_20const__2c_20b2BlockAllocator____invoke_28b2Shape__20_28b2EdgeShape____20const__29_28b2BlockAllocator__29_20const_2c_20b2EdgeShape_20const__2c_20b2BlockAllocator__29, emscripten__internal__MethodInvoker_int_20_28b2EdgeShape____29_28_29_20const_2c_20int_2c_20b2EdgeShape_20const____invoke_28int_20_28b2EdgeShape____20const__29_28_29_20const_2c_20b2EdgeShape_20const__29, emscripten__internal__MethodInvoker_bool_20_28b2EdgeShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_2c_20bool_2c_20b2EdgeShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____invoke_28bool_20_28b2EdgeShape____20const__29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_2c_20b2EdgeShape_20const__2c_20b2Transform__2c_20b2Vec2__29, emscripten__internal__MethodInvoker_bool_20_28b2EdgeShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_2c_20bool_2c_20b2EdgeShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___invoke_28bool_20_28b2EdgeShape____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_2c_20b2EdgeShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput__2c_20b2Transform__2c_20int_29, emscripten__internal__MethodInvoker_void_20_28b2EdgeShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_2c_20void_2c_20b2EdgeShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___invoke_28void_20_28b2EdgeShape____20const__29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_2c_20b2EdgeShape_20const__2c_20b2AABB__2c_20b2Transform__2c_20int_29, emscripten__internal__MethodInvoker_void_20_28b2EdgeShape____29_28b2MassData__2c_20float_29_20const_2c_20void_2c_20b2EdgeShape_20const__2c_20b2MassData__2c_20float___invoke_28void_20_28b2EdgeShape____20const__29_28b2MassData__2c_20float_29_20const_2c_20b2EdgeShape_20const__2c_20b2MassData__2c_20float_29, b2Shape__20emscripten__base_b2Shape___convertPointer_b2PolygonShape_2c_20b2Shape__28b2PolygonShape__29, b2PolygonShape__20emscripten__base_b2Shape___convertPointer_b2Shape_2c_20b2PolygonShape__28b2Shape__29, emscripten__internal__Invoker_b2PolygonShape____invoke_28b2PolygonShape__20_28__29_28_29_29, emscripten__internal__MethodInvoker_b2Shape__20_28b2PolygonShape____29_28b2BlockAllocator__29_20const_2c_20b2Shape__2c_20b2PolygonShape_20const__2c_20b2BlockAllocator____invoke_28b2Shape__20_28b2PolygonShape____20const__29_28b2BlockAllocator__29_20const_2c_20b2PolygonShape_20const__2c_20b2BlockAllocator__29, emscripten__internal__MethodInvoker_int_20_28b2PolygonShape____29_28_29_20const_2c_20int_2c_20b2PolygonShape_20const____invoke_28int_20_28b2PolygonShape____20const__29_28_29_20const_2c_20b2PolygonShape_20const__29, emscripten__internal__FunctionInvoker_void_20_28__29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29_2c_20void_2c_20b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int___invoke_28void_20_28___29_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29_2c_20b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29, emscripten__internal__MethodInvoker_bool_20_28b2PolygonShape____29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_2c_20bool_2c_20b2PolygonShape_20const__2c_20b2Transform_20const__2c_20b2Vec2_20const____invoke_28bool_20_28b2PolygonShape____20const__29_28b2Transform_20const__2c_20b2Vec2_20const__29_20const_2c_20b2PolygonShape_20const__2c_20b2Transform__2c_20b2Vec2__29, emscripten__internal__MethodInvoker_bool_20_28b2PolygonShape____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_2c_20bool_2c_20b2PolygonShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int___invoke_28bool_20_28b2PolygonShape____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const_2c_20b2PolygonShape_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput__2c_20b2Transform__2c_20int_29, emscripten__internal__MethodInvoker_void_20_28b2PolygonShape____29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_2c_20void_2c_20b2PolygonShape_20const__2c_20b2AABB__2c_20b2Transform_20const__2c_20int___invoke_28void_20_28b2PolygonShape____20const__29_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const_2c_20b2PolygonShape_20const__2c_20b2AABB__2c_20b2Transform__2c_20int_29, emscripten__internal__MethodInvoker_void_20_28b2PolygonShape____29_28b2MassData__2c_20float_29_20const_2c_20void_2c_20b2PolygonShape_20const__2c_20b2MassData__2c_20float___invoke_28void_20_28b2PolygonShape____20const__29_28b2MassData__2c_20float_29_20const_2c_20b2PolygonShape_20const__2c_20b2MassData__2c_20float_29, emscripten__internal__MethodInvoker_bool_20_28b2PolygonShape____29_28_29_20const_2c_20bool_2c_20b2PolygonShape_20const____invoke_28bool_20_28b2PolygonShape____20const__29_28_29_20const_2c_20b2PolygonShape_20const__29, emscripten__internal__MethodInvoker_void_20_28b2PolygonShape____29_28float_2c_20float_29_2c_20void_2c_20b2PolygonShape__2c_20float_2c_20float___invoke_28void_20_28b2PolygonShape____20const__29_28float_2c_20float_29_2c_20b2PolygonShape__2c_20float_2c_20float_29, emscripten__internal__MethodInvoker_void_20_28b2PolygonShape____29_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29_2c_20void_2c_20b2PolygonShape__2c_20float_2c_20float_2c_20b2Vec2_20const__2c_20float___invoke_28void_20_28b2PolygonShape____20const__29_28float_2c_20float_2c_20b2Vec2_20const__2c_20float_29_2c_20b2PolygonShape__2c_20float_2c_20float_2c_20b2Vec2__2c_20float_29, emscripten__internal__Invoker_b2FixtureDef____invoke_28b2FixtureDef__20_28__29_28_29_29, emscripten__internal__FunctionInvoker_void_20_28__29_28b2FixtureDef__2c_20b2Shape_20const__29_2c_20void_2c_20b2FixtureDef__2c_20b2Shape_20const____invoke_28void_20_28___29_28b2FixtureDef__2c_20b2Shape_20const__29_2c_20b2FixtureDef__2c_20b2Shape_20const__29, emscripten__internal__FunctionInvoker_b2Shape_20const__20_28__29_28b2FixtureDef__29_2c_20b2Shape_20const__2c_20b2FixtureDef____invoke_28b2Shape_20const__20_28___29_28b2FixtureDef__29_2c_20b2FixtureDef__29, emscripten__internal__MethodInvoker_b2Shape__Type_20_28b2Fixture____29_28_29_20const_2c_20b2Shape__Type_2c_20b2Fixture_20const____invoke_28b2Shape__Type_20_28b2Fixture____20const__29_28_29_20const_2c_20b2Fixture_20const__29, emscripten__internal__MethodInvoker_b2Shape__20_28b2Fixture____29_28_29_2c_20b2Shape__2c_20b2Fixture____invoke_28b2Shape__20_28b2Fixture____20const__29_28_29_2c_20b2Fixture__29, emscripten__internal__MethodInvoker_void_20_28b2Fixture____29_28bool_29_2c_20void_2c_20b2Fixture__2c_20bool___invoke_28void_20_28b2Fixture____20const__29_28bool_29_2c_20b2Fixture__2c_20bool_29, emscripten__internal__MethodInvoker_bool_20_28b2Fixture____29_28_29_20const_2c_20bool_2c_20b2Fixture_20const____invoke_28bool_20_28b2Fixture____20const__29_28_29_20const_2c_20b2Fixture_20const__29, emscripten__internal__MethodInvoker_void_20_28b2Fixture____29_28b2Filter_20const__29_2c_20void_2c_20b2Fixture__2c_20b2Filter_20const____invoke_28void_20_28b2Fixture____20const__29_28b2Filter_20const__29_2c_20b2Fixture__2c_20b2Filter__29, emscripten__internal__MethodInvoker_b2Filter_20const__20_28b2Fixture____29_28_29_20const_2c_20b2Filter_20const__2c_20b2Fixture_20const____invoke_28b2Filter_20const__20_28b2Fixture____20const__29_28_29_20const_2c_20b2Fixture_20const__29, emscripten__internal__MethodInvoker_void_20_28b2Fixture____29_28_29_2c_20void_2c_20b2Fixture____invoke_28void_20_28b2Fixture____20const__29_28_29_2c_20b2Fixture__29, emscripten__internal__MethodInvoker_b2Body__20_28b2Fixture____29_28_29_2c_20b2Body__2c_20b2Fixture____invoke_28b2Body__20_28b2Fixture____20const__29_28_29_2c_20b2Fixture__29, emscripten__internal__MethodInvoker_b2Fixture__20_28b2Fixture____29_28_29_2c_20b2Fixture__2c_20b2Fixture____invoke_28b2Fixture__20_28b2Fixture____20const__29_28_29_2c_20b2Fixture__29, emscripten__internal__MethodInvoker_bool_20_28b2Fixture____29_28b2Vec2_20const__29_20const_2c_20bool_2c_20b2Fixture_20const__2c_20b2Vec2_20const____invoke_28bool_20_28b2Fixture____20const__29_28b2Vec2_20const__29_20const_2c_20b2Fixture_20const__2c_20b2Vec2__29, emscripten__internal__MethodInvoker_bool_20_28b2Fixture____29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int_29_20const_2c_20bool_2c_20b2Fixture_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int___invoke_28bool_20_28b2Fixture____20const__29_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20int_29_20const_2c_20b2Fixture_20const__2c_20b2RayCastOutput__2c_20b2RayCastInput__2c_20int_29, emscripten__internal__MethodInvoker_void_20_28b2Fixture____29_28b2MassData__29_20const_2c_20void_2c_20b2Fixture_20const__2c_20b2MassData____invoke_28void_20_28b2Fixture____20const__29_28b2MassData__29_20const_2c_20b2Fixture_20const__2c_20b2MassData__29, emscripten__internal__MethodInvoker_void_20_28b2Fixture____29_28float_29_2c_20void_2c_20b2Fixture__2c_20float___invoke_28void_20_28b2Fixture____20const__29_28float_29_2c_20b2Fixture__2c_20float_29, emscripten__internal__MethodInvoker_float_20_28b2Fixture____29_28_29_20const_2c_20float_2c_20b2Fixture_20const____invoke_28float_20_28b2Fixture____20const__29_28_29_20const_2c_20b2Fixture_20const__29, emscripten__internal__MethodInvoker_b2AABB_20const__20_28b2Fixture____29_28int_29_20const_2c_20b2AABB_20const__2c_20b2Fixture_20const__2c_20int___invoke_28b2AABB_20const__20_28b2Fixture____20const__29_28int_29_20const_2c_20b2Fixture_20const__2c_20int_29, emscripten__internal__MethodInvoker_void_20_28b2Fixture____29_28int_29_2c_20void_2c_20b2Fixture__2c_20int___invoke_28void_20_28b2Fixture____20const__29_28int_29_2c_20b2Fixture__2c_20int_29, emscripten__internal__Invoker_b2BodyDef____invoke_28b2BodyDef__20_28__29_28_29_29, emscripten__internal__MethodInvoker_b2Fixture__20_28b2Body____29_28b2FixtureDef_20const__29_2c_20b2Fixture__2c_20b2Body__2c_20b2FixtureDef_20const____invoke_28b2Fixture__20_28b2Body____20const__29_28b2FixtureDef_20const__29_2c_20b2Body__2c_20b2FixtureDef_20const__29, emscripten__internal__MethodInvoker_b2Fixture__20_28b2Body____29_28b2Shape_20const__2c_20float_29_2c_20b2Fixture__2c_20b2Body__2c_20b2Shape_20const__2c_20float___invoke_28b2Fixture__20_28b2Body____20const__29_28b2Shape_20const__2c_20float_29_2c_20b2Body__2c_20b2Shape_20const__2c_20float_29, emscripten__internal__MethodInvoker_void_20_28b2Body____29_28b2Fixture__29_2c_20void_2c_20b2Body__2c_20b2Fixture____invoke_28void_20_28b2Body____20const__29_28b2Fixture__29_2c_20b2Body__2c_20b2Fixture__29, emscripten__internal__MethodInvoker_void_20_28b2Body____29_28b2Vec2_20const__2c_20float_29_2c_20void_2c_20b2Body__2c_20b2Vec2_20const__2c_20float___invoke_28void_20_28b2Body____20const__29_28b2Vec2_20const__2c_20float_29_2c_20b2Body__2c_20b2Vec2__2c_20float_29, emscripten__internal__MethodInvoker_b2Transform_20const__20_28b2Body____29_28_29_20const_2c_20b2Transform_20const__2c_20b2Body_20const____invoke_28b2Transform_20const__20_28b2Body____20const__29_28_29_20const_2c_20b2Body_20const__29, emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2Body____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2Body_20const____invoke_28b2Vec2_20const__20_28b2Body____20const__29_28_29_20const_2c_20b2Body_20const__29, emscripten__internal__MethodInvoker_float_20_28b2Body____29_28_29_20const_2c_20float_2c_20b2Body_20const____invoke_28float_20_28b2Body____20const__29_28_29_20const_2c_20b2Body_20const__29, emscripten__internal__MethodInvoker_void_20_28b2Body____29_28b2Vec2_20const__29_2c_20void_2c_20b2Body__2c_20b2Vec2_20const____invoke_28void_20_28b2Body____20const__29_28b2Vec2_20const__29_2c_20b2Body__2c_20b2Vec2__29, emscripten__internal__MethodInvoker_void_20_28b2Body____29_28float_29_2c_20void_2c_20b2Body__2c_20float___invoke_28void_20_28b2Body____20const__29_28float_29_2c_20b2Body__2c_20float_29, emscripten__internal__MethodInvoker_void_20_28b2Body____29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29_2c_20void_2c_20b2Body__2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool___invoke_28void_20_28b2Body____20const__29_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20bool_29_2c_20b2Body__2c_20b2Vec2__2c_20b2Vec2__2c_20bool_29, emscripten__internal__MethodInvoker_void_20_28b2Body____29_28b2Vec2_20const__2c_20bool_29_2c_20void_2c_20b2Body__2c_20b2Vec2_20const__2c_20bool___invoke_28void_20_28b2Body____20const__29_28b2Vec2_20const__2c_20bool_29_2c_20b2Body__2c_20b2Vec2__2c_20bool_29, emscripten__internal__MethodInvoker_void_20_28b2Body____29_28float_2c_20bool_29_2c_20void_2c_20b2Body__2c_20float_2c_20bool___invoke_28void_20_28b2Body____20const__29_28float_2c_20bool_29_2c_20b2Body__2c_20float_2c_20bool_29, emscripten__internal__MethodInvoker_void_20_28b2Body____29_28b2MassData__29_20const_2c_20void_2c_20b2Body_20const__2c_20b2MassData____invoke_28void_20_28b2Body____20const__29_28b2MassData__29_20const_2c_20b2Body_20const__2c_20b2MassData__29, emscripten__internal__FunctionInvoker_void_20_28__29_28b2Body__2c_20b2MassData_20const__29_2c_20void_2c_20b2Body__2c_20b2MassData_20const____invoke_28void_20_28___29_28b2Body__2c_20b2MassData_20const__29_2c_20b2Body__2c_20b2MassData__29, emscripten__internal__MethodInvoker_void_20_28b2Body____29_28_29_2c_20void_2c_20b2Body____invoke_28void_20_28b2Body____20const__29_28_29_2c_20b2Body__29, emscripten__internal__MethodInvoker_b2Vec2_20_28b2Body____29_28b2Vec2_20const__29_20const_2c_20b2Vec2_2c_20b2Body_20const__2c_20b2Vec2_20const____invoke_28b2Vec2_20_28b2Body____20const__29_28b2Vec2_20const__29_20const_2c_20b2Body_20const__2c_20b2Vec2__29, emscripten__internal__MethodInvoker_void_20_28b2Body____29_28b2BodyType_29_2c_20void_2c_20b2Body__2c_20b2BodyType___invoke_28void_20_28b2Body____20const__29_28b2BodyType_29_2c_20b2Body__2c_20b2BodyType_29, emscripten__internal__MethodInvoker_b2BodyType_20_28b2Body____29_28_29_20const_2c_20b2BodyType_2c_20b2Body_20const____invoke_28b2BodyType_20_28b2Body____20const__29_28_29_20const_2c_20b2Body_20const__29, emscripten__internal__MethodInvoker_void_20_28b2Body____29_28bool_29_2c_20void_2c_20b2Body__2c_20bool___invoke_28void_20_28b2Body____20const__29_28bool_29_2c_20b2Body__2c_20bool_29, emscripten__internal__MethodInvoker_bool_20_28b2Body____29_28_29_20const_2c_20bool_2c_20b2Body_20const____invoke_28bool_20_28b2Body____20const__29_28_29_20const_2c_20b2Body_20const__29, emscripten__internal__MethodInvoker_b2Fixture__20_28b2Body____29_28_29_2c_20b2Fixture__2c_20b2Body____invoke_28b2Fixture__20_28b2Body____20const__29_28_29_2c_20b2Body__29, emscripten__internal__FunctionInvoker_unsigned_20int_20_28__29_28b2Body__29_2c_20unsigned_20int_2c_20b2Body____invoke_28unsigned_20int_20_28___29_28b2Body__29_2c_20b2Body__29, emscripten__internal__MethodInvoker_b2World__20_28b2Body____29_28_29_2c_20b2World__2c_20b2Body____invoke_28b2World__20_28b2Body____20const__29_28_29_2c_20b2Body__29, emscripten__internal__Invoker_b2JointDef____invoke_28b2JointDef__20_28__29_28_29_29, emscripten__internal__FunctionInvoker_void_20_28__29_28b2JointDef__2c_20b2Body__29_2c_20void_2c_20b2JointDef__2c_20b2Body____invoke_28void_20_28___29_28b2JointDef__2c_20b2Body__29_2c_20b2JointDef__2c_20b2Body__29, emscripten__internal__FunctionInvoker_b2Body__20_28__29_28b2JointDef__29_2c_20b2Body__2c_20b2JointDef____invoke_28b2Body__20_28___29_28b2JointDef__29_2c_20b2JointDef__29, emscripten__internal__MethodInvoker_b2JointType_20_28b2Joint____29_28_29_20const_2c_20b2JointType_2c_20b2Joint_20const____invoke_28b2JointType_20_28b2Joint____20const__29_28_29_20const_2c_20b2Joint_20const__29, emscripten__internal__MethodInvoker_b2Body__20_28b2Joint____29_28_29_2c_20b2Body__2c_20b2Joint____invoke_28b2Body__20_28b2Joint____20const__29_28_29_2c_20b2Joint__29, emscripten__internal__MethodInvoker_b2Vec2_20_28b2Joint____29_28_29_20const_2c_20b2Vec2_2c_20b2Joint_20const____invoke_28b2Vec2_20_28b2Joint____20const__29_28_29_20const_2c_20b2Joint_20const__29, emscripten__internal__MethodInvoker_b2Vec2_20_28b2Joint____29_28float_29_20const_2c_20b2Vec2_2c_20b2Joint_20const__2c_20float___invoke_28b2Vec2_20_28b2Joint____20const__29_28float_29_20const_2c_20b2Joint_20const__2c_20float_29, emscripten__internal__MethodInvoker_float_20_28b2Joint____29_28float_29_20const_2c_20float_2c_20b2Joint_20const__2c_20float___invoke_28float_20_28b2Joint____20const__29_28float_29_20const_2c_20b2Joint_20const__2c_20float_29, emscripten__internal__MethodInvoker_bool_20_28b2Joint____29_28_29_20const_2c_20bool_2c_20b2Joint_20const____invoke_28bool_20_28b2Joint____20const__29_28_29_20const_2c_20b2Joint_20const__29, emscripten__internal__MethodInvoker_void_20_28b2Joint____29_28_29_2c_20void_2c_20b2Joint____invoke_28void_20_28b2Joint____20const__29_28_29_2c_20b2Joint__29, b2JointDef__20emscripten__base_b2JointDef___convertPointer_b2DistanceJointDef_2c_20b2JointDef__28b2DistanceJointDef__29, b2DistanceJointDef__20emscripten__base_b2JointDef___convertPointer_b2JointDef_2c_20b2DistanceJointDef__28b2JointDef__29, emscripten__internal__Invoker_b2DistanceJointDef____invoke_28b2DistanceJointDef__20_28__29_28_29_29, b2Joint__20emscripten__base_b2Joint___convertPointer_b2DistanceJoint_2c_20b2Joint__28b2DistanceJoint__29, b2DistanceJoint__20emscripten__base_b2Joint___convertPointer_b2Joint_2c_20b2DistanceJoint__28b2Joint__29, emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2DistanceJoint____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2DistanceJoint_20const____invoke_28b2Vec2_20const__20_28b2DistanceJoint____20const__29_28_29_20const_2c_20b2DistanceJoint_20const__29, emscripten__internal__MethodInvoker_void_20_28b2DistanceJoint____29_28float_29_2c_20void_2c_20b2DistanceJoint__2c_20float___invoke_28void_20_28b2DistanceJoint____20const__29_28float_29_2c_20b2DistanceJoint__2c_20float_29, emscripten__internal__MethodInvoker_float_20_28b2DistanceJoint____29_28_29_20const_2c_20float_2c_20b2DistanceJoint_20const____invoke_28float_20_28b2DistanceJoint____20const__29_28_29_20const_2c_20b2DistanceJoint_20const__29, emscripten__internal__MethodInvoker_void_20_28b2DistanceJoint____29_28_29_2c_20void_2c_20b2DistanceJoint____invoke_28void_20_28b2DistanceJoint____20const__29_28_29_2c_20b2DistanceJoint__29, b2JointDef__20emscripten__base_b2JointDef___convertPointer_b2MotorJointDef_2c_20b2JointDef__28b2MotorJointDef__29, b2MotorJointDef__20emscripten__base_b2JointDef___convertPointer_b2JointDef_2c_20b2MotorJointDef__28b2JointDef__29, emscripten__internal__Invoker_b2MotorJointDef____invoke_28b2MotorJointDef__20_28__29_28_29_29, b2Joint__20emscripten__base_b2Joint___convertPointer_b2MotorJoint_2c_20b2Joint__28b2MotorJoint__29, b2MotorJoint__20emscripten__base_b2Joint___convertPointer_b2Joint_2c_20b2MotorJoint__28b2Joint__29, emscripten__internal__MethodInvoker_void_20_28b2MotorJoint____29_28b2Vec2_20const__29_2c_20void_2c_20b2MotorJoint__2c_20b2Vec2_20const____invoke_28void_20_28b2MotorJoint____20const__29_28b2Vec2_20const__29_2c_20b2MotorJoint__2c_20b2Vec2__29, emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2MotorJoint____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2MotorJoint_20const____invoke_28b2Vec2_20const__20_28b2MotorJoint____20const__29_28_29_20const_2c_20b2MotorJoint_20const__29, emscripten__internal__MethodInvoker_void_20_28b2MotorJoint____29_28float_29_2c_20void_2c_20b2MotorJoint__2c_20float___invoke_28void_20_28b2MotorJoint____20const__29_28float_29_2c_20b2MotorJoint__2c_20float_29, emscripten__internal__MethodInvoker_float_20_28b2MotorJoint____29_28_29_20const_2c_20float_2c_20b2MotorJoint_20const____invoke_28float_20_28b2MotorJoint____20const__29_28_29_20const_2c_20b2MotorJoint_20const__29, emscripten__internal__MethodInvoker_void_20_28b2MotorJoint____29_28_29_2c_20void_2c_20b2MotorJoint____invoke_28void_20_28b2MotorJoint____20const__29_28_29_2c_20b2MotorJoint__29, b2JointDef__20emscripten__base_b2JointDef___convertPointer_b2MouseJointDef_2c_20b2JointDef__28b2MouseJointDef__29, b2MouseJointDef__20emscripten__base_b2JointDef___convertPointer_b2JointDef_2c_20b2MouseJointDef__28b2JointDef__29, emscripten__internal__Invoker_b2MouseJointDef____invoke_28b2MouseJointDef__20_28__29_28_29_29, b2Joint__20emscripten__base_b2Joint___convertPointer_b2MouseJoint_2c_20b2Joint__28b2MouseJoint__29, b2MouseJoint__20emscripten__base_b2Joint___convertPointer_b2Joint_2c_20b2MouseJoint__28b2Joint__29, emscripten__internal__MethodInvoker_void_20_28b2MouseJoint____29_28b2Vec2_20const__29_2c_20void_2c_20b2MouseJoint__2c_20b2Vec2_20const____invoke_28void_20_28b2MouseJoint____20const__29_28b2Vec2_20const__29_2c_20b2MouseJoint__2c_20b2Vec2__29, emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2MouseJoint____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2MouseJoint_20const____invoke_28b2Vec2_20const__20_28b2MouseJoint____20const__29_28_29_20const_2c_20b2MouseJoint_20const__29, emscripten__internal__MethodInvoker_void_20_28b2MouseJoint____29_28float_29_2c_20void_2c_20b2MouseJoint__2c_20float___invoke_28void_20_28b2MouseJoint____20const__29_28float_29_2c_20b2MouseJoint__2c_20float_29, emscripten__internal__MethodInvoker_float_20_28b2MouseJoint____29_28_29_20const_2c_20float_2c_20b2MouseJoint_20const____invoke_28float_20_28b2MouseJoint____20const__29_28_29_20const_2c_20b2MouseJoint_20const__29, emscripten__internal__MethodInvoker_void_20_28b2MouseJoint____29_28_29_2c_20void_2c_20b2MouseJoint____invoke_28void_20_28b2MouseJoint____20const__29_28_29_2c_20b2MouseJoint__29, b2JointDef__20emscripten__base_b2JointDef___convertPointer_b2PrismaticJointDef_2c_20b2JointDef__28b2PrismaticJointDef__29, b2PrismaticJointDef__20emscripten__base_b2JointDef___convertPointer_b2JointDef_2c_20b2PrismaticJointDef__28b2JointDef__29, emscripten__internal__Invoker_b2PrismaticJointDef____invoke_28b2PrismaticJointDef__20_28__29_28_29_29, b2Joint__20emscripten__base_b2Joint___convertPointer_b2PrismaticJoint_2c_20b2Joint__28b2PrismaticJoint__29, b2PrismaticJoint__20emscripten__base_b2Joint___convertPointer_b2Joint_2c_20b2PrismaticJoint__28b2Joint__29, emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2PrismaticJoint____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2PrismaticJoint_20const____invoke_28b2Vec2_20const__20_28b2PrismaticJoint____20const__29_28_29_20const_2c_20b2PrismaticJoint_20const__29, emscripten__internal__MethodInvoker_float_20_28b2PrismaticJoint____29_28_29_20const_2c_20float_2c_20b2PrismaticJoint_20const____invoke_28float_20_28b2PrismaticJoint____20const__29_28_29_20const_2c_20b2PrismaticJoint_20const__29, emscripten__internal__MethodInvoker_bool_20_28b2PrismaticJoint____29_28_29_20const_2c_20bool_2c_20b2PrismaticJoint_20const____invoke_28bool_20_28b2PrismaticJoint____20const__29_28_29_20const_2c_20b2PrismaticJoint_20const__29, emscripten__internal__MethodInvoker_void_20_28b2PrismaticJoint____29_28bool_29_2c_20void_2c_20b2PrismaticJoint__2c_20bool___invoke_28void_20_28b2PrismaticJoint____20const__29_28bool_29_2c_20b2PrismaticJoint__2c_20bool_29, emscripten__internal__MethodInvoker_void_20_28b2PrismaticJoint____29_28float_2c_20float_29_2c_20void_2c_20b2PrismaticJoint__2c_20float_2c_20float___invoke_28void_20_28b2PrismaticJoint____20const__29_28float_2c_20float_29_2c_20b2PrismaticJoint__2c_20float_2c_20float_29, emscripten__internal__MethodInvoker_void_20_28b2PrismaticJoint____29_28float_29_2c_20void_2c_20b2PrismaticJoint__2c_20float___invoke_28void_20_28b2PrismaticJoint____20const__29_28float_29_2c_20b2PrismaticJoint__2c_20float_29, emscripten__internal__MethodInvoker_float_20_28b2PrismaticJoint____29_28float_29_20const_2c_20float_2c_20b2PrismaticJoint_20const__2c_20float___invoke_28float_20_28b2PrismaticJoint____20const__29_28float_29_20const_2c_20b2PrismaticJoint_20const__2c_20float_29, emscripten__internal__MethodInvoker_void_20_28b2PrismaticJoint____29_28_29_2c_20void_2c_20b2PrismaticJoint____invoke_28void_20_28b2PrismaticJoint____20const__29_28_29_2c_20b2PrismaticJoint__29, b2JointDef__20emscripten__base_b2JointDef___convertPointer_b2RevoluteJointDef_2c_20b2JointDef__28b2RevoluteJointDef__29, b2RevoluteJointDef__20emscripten__base_b2JointDef___convertPointer_b2JointDef_2c_20b2RevoluteJointDef__28b2JointDef__29, emscripten__internal__Invoker_b2RevoluteJointDef____invoke_28b2RevoluteJointDef__20_28__29_28_29_29, b2Joint__20emscripten__base_b2Joint___convertPointer_b2RevoluteJoint_2c_20b2Joint__28b2RevoluteJoint__29, b2RevoluteJoint__20emscripten__base_b2Joint___convertPointer_b2Joint_2c_20b2RevoluteJoint__28b2Joint__29, emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2RevoluteJoint____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2RevoluteJoint_20const____invoke_28b2Vec2_20const__20_28b2RevoluteJoint____20const__29_28_29_20const_2c_20b2RevoluteJoint_20const__29, emscripten__internal__MethodInvoker_float_20_28b2RevoluteJoint____29_28_29_20const_2c_20float_2c_20b2RevoluteJoint_20const____invoke_28float_20_28b2RevoluteJoint____20const__29_28_29_20const_2c_20b2RevoluteJoint_20const__29, emscripten__internal__MethodInvoker_bool_20_28b2RevoluteJoint____29_28_29_20const_2c_20bool_2c_20b2RevoluteJoint_20const____invoke_28bool_20_28b2RevoluteJoint____20const__29_28_29_20const_2c_20b2RevoluteJoint_20const__29, emscripten__internal__MethodInvoker_void_20_28b2RevoluteJoint____29_28bool_29_2c_20void_2c_20b2RevoluteJoint__2c_20bool___invoke_28void_20_28b2RevoluteJoint____20const__29_28bool_29_2c_20b2RevoluteJoint__2c_20bool_29, emscripten__internal__MethodInvoker_void_20_28b2RevoluteJoint____29_28float_2c_20float_29_2c_20void_2c_20b2RevoluteJoint__2c_20float_2c_20float___invoke_28void_20_28b2RevoluteJoint____20const__29_28float_2c_20float_29_2c_20b2RevoluteJoint__2c_20float_2c_20float_29, emscripten__internal__MethodInvoker_void_20_28b2RevoluteJoint____29_28float_29_2c_20void_2c_20b2RevoluteJoint__2c_20float___invoke_28void_20_28b2RevoluteJoint____20const__29_28float_29_2c_20b2RevoluteJoint__2c_20float_29, emscripten__internal__MethodInvoker_float_20_28b2RevoluteJoint____29_28float_29_20const_2c_20float_2c_20b2RevoluteJoint_20const__2c_20float___invoke_28float_20_28b2RevoluteJoint____20const__29_28float_29_20const_2c_20b2RevoluteJoint_20const__2c_20float_29, emscripten__internal__MethodInvoker_void_20_28b2RevoluteJoint____29_28_29_2c_20void_2c_20b2RevoluteJoint____invoke_28void_20_28b2RevoluteJoint____20const__29_28_29_2c_20b2RevoluteJoint__29, b2JointDef__20emscripten__base_b2JointDef___convertPointer_b2RopeJointDef_2c_20b2JointDef__28b2RopeJointDef__29, b2RopeJointDef__20emscripten__base_b2JointDef___convertPointer_b2JointDef_2c_20b2RopeJointDef__28b2JointDef__29, emscripten__internal__Invoker_b2RopeJointDef____invoke_28b2RopeJointDef__20_28__29_28_29_29, b2Joint__20emscripten__base_b2Joint___convertPointer_b2RopeJoint_2c_20b2Joint__28b2RopeJoint__29, b2RopeJoint__20emscripten__base_b2Joint___convertPointer_b2Joint_2c_20b2RopeJoint__28b2Joint__29, emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2RopeJoint____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2RopeJoint_20const____invoke_28b2Vec2_20const__20_28b2RopeJoint____20const__29_28_29_20const_2c_20b2RopeJoint_20const__29, emscripten__internal__MethodInvoker_b2Vec2_20_28b2RopeJoint____29_28float_29_20const_2c_20b2Vec2_2c_20b2RopeJoint_20const__2c_20float___invoke_28b2Vec2_20_28b2RopeJoint____20const__29_28float_29_20const_2c_20b2RopeJoint_20const__2c_20float_29, emscripten__internal__MethodInvoker_float_20_28b2RopeJoint____29_28float_29_20const_2c_20float_2c_20b2RopeJoint_20const__2c_20float___invoke_28float_20_28b2RopeJoint____20const__29_28float_29_20const_2c_20b2RopeJoint_20const__2c_20float_29, emscripten__internal__MethodInvoker_void_20_28b2RopeJoint____29_28float_29_2c_20void_2c_20b2RopeJoint__2c_20float___invoke_28void_20_28b2RopeJoint____20const__29_28float_29_2c_20b2RopeJoint__2c_20float_29, emscripten__internal__MethodInvoker_float_20_28b2RopeJoint____29_28_29_20const_2c_20float_2c_20b2RopeJoint_20const____invoke_28float_20_28b2RopeJoint____20const__29_28_29_20const_2c_20b2RopeJoint_20const__29, emscripten__internal__MethodInvoker_void_20_28b2RopeJoint____29_28_29_2c_20void_2c_20b2RopeJoint____invoke_28void_20_28b2RopeJoint____20const__29_28_29_2c_20b2RopeJoint__29, b2JointDef__20emscripten__base_b2JointDef___convertPointer_b2WeldJointDef_2c_20b2JointDef__28b2WeldJointDef__29, b2WeldJointDef__20emscripten__base_b2JointDef___convertPointer_b2JointDef_2c_20b2WeldJointDef__28b2JointDef__29, emscripten__internal__Invoker_b2WeldJointDef____invoke_28b2WeldJointDef__20_28__29_28_29_29, b2Joint__20emscripten__base_b2Joint___convertPointer_b2WeldJoint_2c_20b2Joint__28b2WeldJoint__29, b2WeldJoint__20emscripten__base_b2Joint___convertPointer_b2Joint_2c_20b2WeldJoint__28b2Joint__29, emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2WeldJoint____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2WeldJoint_20const____invoke_28b2Vec2_20const__20_28b2WeldJoint____20const__29_28_29_20const_2c_20b2WeldJoint_20const__29, emscripten__internal__MethodInvoker_float_20_28b2WeldJoint____29_28_29_20const_2c_20float_2c_20b2WeldJoint_20const____invoke_28float_20_28b2WeldJoint____20const__29_28_29_20const_2c_20b2WeldJoint_20const__29, emscripten__internal__MethodInvoker_void_20_28b2WeldJoint____29_28float_29_2c_20void_2c_20b2WeldJoint__2c_20float___invoke_28void_20_28b2WeldJoint____20const__29_28float_29_2c_20b2WeldJoint__2c_20float_29, emscripten__internal__MethodInvoker_void_20_28b2WeldJoint____29_28_29_2c_20void_2c_20b2WeldJoint____invoke_28void_20_28b2WeldJoint____20const__29_28_29_2c_20b2WeldJoint__29, b2JointDef__20emscripten__base_b2JointDef___convertPointer_b2WheelJointDef_2c_20b2JointDef__28b2WheelJointDef__29, b2WheelJointDef__20emscripten__base_b2JointDef___convertPointer_b2JointDef_2c_20b2WheelJointDef__28b2JointDef__29, emscripten__internal__Invoker_b2WheelJointDef____invoke_28b2WheelJointDef__20_28__29_28_29_29, b2Joint__20emscripten__base_b2Joint___convertPointer_b2WheelJoint_2c_20b2Joint__28b2WheelJoint__29, b2WheelJoint__20emscripten__base_b2Joint___convertPointer_b2Joint_2c_20b2WheelJoint__28b2Joint__29, emscripten__internal__MethodInvoker_b2Vec2_20const__20_28b2WheelJoint____29_28_29_20const_2c_20b2Vec2_20const__2c_20b2WheelJoint_20const____invoke_28b2Vec2_20const__20_28b2WheelJoint____20const__29_28_29_20const_2c_20b2WheelJoint_20const__29, emscripten__internal__MethodInvoker_float_20_28b2WheelJoint____29_28_29_20const_2c_20float_2c_20b2WheelJoint_20const____invoke_28float_20_28b2WheelJoint____20const__29_28_29_20const_2c_20b2WheelJoint_20const__29, emscripten__internal__MethodInvoker_bool_20_28b2WheelJoint____29_28_29_20const_2c_20bool_2c_20b2WheelJoint_20const____invoke_28bool_20_28b2WheelJoint____20const__29_28_29_20const_2c_20b2WheelJoint_20const__29, emscripten__internal__MethodInvoker_void_20_28b2WheelJoint____29_28bool_29_2c_20void_2c_20b2WheelJoint__2c_20bool___invoke_28void_20_28b2WheelJoint____20const__29_28bool_29_2c_20b2WheelJoint__2c_20bool_29, emscripten__internal__MethodInvoker_void_20_28b2WheelJoint____29_28float_29_2c_20void_2c_20b2WheelJoint__2c_20float___invoke_28void_20_28b2WheelJoint____20const__29_28float_29_2c_20b2WheelJoint__2c_20float_29, emscripten__internal__MethodInvoker_float_20_28b2WheelJoint____29_28float_29_20const_2c_20float_2c_20b2WheelJoint_20const__2c_20float___invoke_28float_20_28b2WheelJoint____20const__29_28float_29_20const_2c_20b2WheelJoint_20const__2c_20float_29, emscripten__internal__MethodInvoker_void_20_28b2WheelJoint____29_28_29_2c_20void_2c_20b2WheelJoint____invoke_28void_20_28b2WheelJoint____20const__29_28_29_2c_20b2WheelJoint__29, emscripten__internal__Invoker_std____2__vector_int_2c_20std____2__allocator_int______invoke_28std____2__vector_int_2c_20std____2__allocator_int____20_28__29_28_29_29, emscripten__internal__MethodInvoker_void_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28int_20const__29_2c_20void_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20int_20const____invoke_28void_20_28std____2__vector_int_2c_20std____2__allocator_int______20const__29_28int_20const__29_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20int_29, emscripten__internal__MethodInvoker_void_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28unsigned_20long_2c_20int_20const__29_2c_20void_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const____invoke_28void_20_28std____2__vector_int_2c_20std____2__allocator_int______20const__29_28unsigned_20long_2c_20int_20const__29_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_29, emscripten__internal__MethodInvoker_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int______29_28_29_20const_2c_20unsigned_20long_2c_20std____2__vector_int_2c_20std____2__allocator_int___20const____invoke_28unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int______20const__29_28_29_20const_2c_20std____2__vector_int_2c_20std____2__allocator_int___20const__29, emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long_29_2c_20emscripten__val_2c_20std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long___invoke_28emscripten__val_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int___20const__2c_20unsigned_20long_29_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_29, emscripten__internal__FunctionInvoker_bool_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const__29_2c_20bool_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const____invoke_28bool_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_20const__29_2c_20std____2__vector_int_2c_20std____2__allocator_int____2c_20unsigned_20long_2c_20int_29, emscripten__internal__Invoker_std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______invoke_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____20_28__29_28_29_29, emscripten__internal__MethodInvoker_void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28b2Vec2_20const__29_2c_20void_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20b2Vec2_20const____invoke_28void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______20const__29_28b2Vec2_20const__29_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20b2Vec2__29, emscripten__internal__MethodInvoker_void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28unsigned_20long_2c_20b2Vec2_20const__29_2c_20void_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const____invoke_28void_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______20const__29_28unsigned_20long_2c_20b2Vec2_20const__29_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2__29, emscripten__internal__MethodInvoker_unsigned_20long_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______29_28_29_20const_2c_20unsigned_20long_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const____invoke_28unsigned_20long_20_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2______20const__29_28_29_20const_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__29, emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long_29_2c_20emscripten__val_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long___invoke_28emscripten__val_20_28___29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2___20const__2c_20unsigned_20long_29_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_29, emscripten__internal__FunctionInvoker_bool_20_28__29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const__29_2c_20bool_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const____invoke_28bool_20_28___29_28std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2_20const__29_2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20unsigned_20long_2c_20b2Vec2__29, embind_init_b2_28_29__$_0____invoke_28b2AABB__2c_20b2AABB__29, embind_init_b2_28_29__$_1____invoke_28b2AABB__2c_20b2AABB__2c_20b2AABB__29, embind_init_b2_28_29__$_2____invoke_28b2Shape__2c_20float_29, embind_init_b2_28_29__$_3____invoke_28b2Shape__29, embind_init_b2_28_29__$_4____invoke_28b2PolygonShape__2c_20std____2__vector_b2Vec2_2c_20std____2__allocator_b2Vec2____2c_20int_29, embind_init_b2_28_29__$_5____invoke_28b2FixtureDef__2c_20b2Shape_20const__29, embind_init_b2_28_29__$_6____invoke_28b2FixtureDef__29, embind_init_b2_28_29__$_7____invoke_28b2Body__2c_20b2MassData_20const__29, embind_init_b2_28_29__$_8____invoke_28b2Body__29, embind_init_b2_28_29__$_9____invoke_28b2JointDef__2c_20b2Body__29, embind_init_b2_28_29__$_10____invoke_28b2JointDef__29, embind_init_b2_28_29__$_11____invoke_28b2JointDef__2c_20b2Body__29, embind_init_b2_28_29__$_12____invoke_28b2JointDef__29, b2QueryCallbackWrapper___b2QueryCallbackWrapper_28_29, b2QueryCallbackWrapper___b2QueryCallbackWrapper_28_29_1, b2QueryCallbackWrapper__ReportFixture_28unsigned_20int_29, emscripten__wrapper_b2QueryCallback____wrapper_28_29, emscripten__wrapper_b2QueryCallback____wrapper_28_29_1, __cxa_pure_virtual, b2QueryCallback___b2QueryCallback_28_29, b2QueryCallback___b2QueryCallback_28_29_1, b2RayCastCallbackWrapper___b2RayCastCallbackWrapper_28_29, b2RayCastCallbackWrapper___b2RayCastCallbackWrapper_28_29_1, b2RayCastCallbackWrapper__ReportFixture_28unsigned_20int_2c_20b2Vec2_20const__2c_20b2Vec2_20const__2c_20float_29, emscripten__wrapper_b2RayCastCallback____wrapper_28_29, emscripten__wrapper_b2RayCastCallback____wrapper_28_29_1, b2RayCastCallback___b2RayCastCallback_28_29, b2RayCastCallback___b2RayCastCallback_28_29_1, b2ContactListenerWrapper___b2ContactListenerWrapper_28_29, b2ContactListenerWrapper___b2ContactListenerWrapper_28_29_1, b2ContactListenerWrapper__BeginContact_28unsigned_20int_29, b2ContactListenerWrapper__EndContact_28unsigned_20int_29, b2ContactListenerWrapper__PreSolve_28unsigned_20int_2c_20unsigned_20int_29, b2ContactListenerWrapper__PostSolve_28unsigned_20int_2c_20unsigned_20int_29, emscripten__wrapper_b2ContactListener____wrapper_28_29, emscripten__wrapper_b2ContactListener____wrapper_28_29_1, b2ContactListener__BeginContact_28unsigned_20int_29, b2ContactListener__EndContact_28unsigned_20int_29, b2ContactListener__PreSolve_28unsigned_20int_2c_20unsigned_20int_29, b2ContactListener__PostSolve_28unsigned_20int_2c_20unsigned_20int_29, b2ContactListener___b2ContactListener_28_29, b2ContactListener___b2ContactListener_28_29_1, b2DrawWrapper___b2DrawWrapper_28_29, b2DrawWrapper___b2DrawWrapper_28_29_1, b2DrawWrapper__DrawPolygon_28unsigned_20int_2c_20int_2c_20b2Color_20const__29, b2DrawWrapper__DrawSolidPolygon_28unsigned_20int_2c_20int_2c_20b2Color_20const__29, b2DrawWrapper__DrawCircle_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29, b2DrawWrapper__DrawSolidCircle_28b2Vec2_20const__2c_20float_2c_20b2Vec2_20const__2c_20b2Color_20const__29, b2DrawWrapper__DrawSegment_28b2Vec2_20const__2c_20b2Vec2_20const__2c_20b2Color_20const__29, b2DrawWrapper__DrawTransform_28b2Transform_20const__29, b2DrawWrapper__DrawPoint_28b2Vec2_20const__2c_20float_2c_20b2Color_20const__29, emscripten__wrapper_b2Draw____wrapper_28_29, emscripten__wrapper_b2Draw____wrapper_28_29_1, b2Shape___b2Shape_28_29, b2Shape___b2Shape_28_29_1, b2CircleShape___b2CircleShape_28_29, b2CircleShape___b2CircleShape_28_29_1, b2CircleShape__Clone_28b2BlockAllocator__29_20const, b2CircleShape__GetChildCount_28_29_20const, b2CircleShape__TestPoint_28b2Transform_20const__2c_20b2Vec2_20const__29_20const, b2CircleShape__RayCast_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const, b2CircleShape__ComputeAABB_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const, b2CircleShape__ComputeMass_28b2MassData__2c_20float_29_20const, b2EdgeShape___b2EdgeShape_28_29, b2EdgeShape___b2EdgeShape_28_29_1, b2EdgeShape__Clone_28b2BlockAllocator__29_20const, b2EdgeShape__GetChildCount_28_29_20const, b2EdgeShape__TestPoint_28b2Transform_20const__2c_20b2Vec2_20const__29_20const, b2EdgeShape__RayCast_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const, b2EdgeShape__ComputeAABB_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const, b2EdgeShape__ComputeMass_28b2MassData__2c_20float_29_20const, b2PolygonShape___b2PolygonShape_28_29, b2PolygonShape___b2PolygonShape_28_29_1, b2PolygonShape__Clone_28b2BlockAllocator__29_20const, b2PolygonShape__GetChildCount_28_29_20const, b2PolygonShape__TestPoint_28b2Transform_20const__2c_20b2Vec2_20const__29_20const, b2PolygonShape__RayCast_28b2RayCastOutput__2c_20b2RayCastInput_20const__2c_20b2Transform_20const__2c_20int_29_20const, b2PolygonShape__ComputeAABB_28b2AABB__2c_20b2Transform_20const__2c_20int_29_20const, b2PolygonShape__ComputeMass_28b2MassData__2c_20float_29_20const, b2Draw___b2Draw_28_29, b2Draw___b2Draw_28_29_1, b2CircleContact__b2CircleContact_28b2Fixture__2c_20b2Fixture__29, b2CircleContact__Evaluate_28b2Manifold__2c_20b2Transform_20const__2c_20b2Transform_20const__29, b2CircleContact___b2CircleContact_28_29, b2CircleContact___b2CircleContact_28_29_1, b2ChainAndCircleContact__b2ChainAndCircleContact_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_29, b2ChainAndCircleContact__Evaluate_28b2Manifold__2c_20b2Transform_20const__2c_20b2Transform_20const__29, b2ChainAndCircleContact___b2ChainAndCircleContact_28_29, b2ChainAndCircleContact___b2ChainAndCircleContact_28_29_1, b2ChainAndPolygonContact__b2ChainAndPolygonContact_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_29, b2ChainAndPolygonContact__Evaluate_28b2Manifold__2c_20b2Transform_20const__2c_20b2Transform_20const__29, b2ChainAndPolygonContact___b2ChainAndPolygonContact_28_29, b2ChainAndPolygonContact___b2ChainAndPolygonContact_28_29_1, b2CircleContact__Create_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29, b2CircleContact__Destroy_28b2Contact__2c_20b2BlockAllocator__29, b2PolygonAndCircleContact__Create_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29, b2PolygonAndCircleContact__Destroy_28b2Contact__2c_20b2BlockAllocator__29, b2PolygonContact__Create_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29, b2PolygonContact__Destroy_28b2Contact__2c_20b2BlockAllocator__29, b2EdgeAndCircleContact__Create_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29, b2EdgeAndCircleContact__Destroy_28b2Contact__2c_20b2BlockAllocator__29, b2EdgeAndPolygonContact__Create_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29, b2EdgeAndPolygonContact__Destroy_28b2Contact__2c_20b2BlockAllocator__29, b2ChainAndCircleContact__Create_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29, b2ChainAndCircleContact__Destroy_28b2Contact__2c_20b2BlockAllocator__29, b2ChainAndPolygonContact__Create_28b2Fixture__2c_20int_2c_20b2Fixture__2c_20int_2c_20b2BlockAllocator__29, b2ChainAndPolygonContact__Destroy_28b2Contact__2c_20b2BlockAllocator__29, b2Contact___b2Contact_28_29, b2Contact___b2Contact_28_29_1, __cxx_global_array_dtor, __cxx_global_array_dtor_2, b2DistanceJoint__GetAnchorA_28_29_20const, b2DistanceJoint__GetAnchorB_28_29_20const, b2DistanceJoint__GetReactionForce_28float_29_20const, b2DistanceJoint__GetReactionTorque_28float_29_20const, b2DistanceJoint__Dump_28_29, b2Joint__ShiftOrigin_28b2Vec2_20const__29, b2DistanceJoint___b2DistanceJoint_28_29, b2DistanceJoint___b2DistanceJoint_28_29_1, b2DistanceJoint__InitVelocityConstraints_28b2SolverData_20const__29, b2DistanceJoint__SolveVelocityConstraints_28b2SolverData_20const__29, b2DistanceJoint__SolvePositionConstraints_28b2SolverData_20const__29, b2EdgeAndCircleContact__b2EdgeAndCircleContact_28b2Fixture__2c_20b2Fixture__29, b2EdgeAndCircleContact__Evaluate_28b2Manifold__2c_20b2Transform_20const__2c_20b2Transform_20const__29, b2EdgeAndCircleContact___b2EdgeAndCircleContact_28_29, b2EdgeAndCircleContact___b2EdgeAndCircleContact_28_29_1, b2EdgeAndPolygonContact__b2EdgeAndPolygonContact_28b2Fixture__2c_20b2Fixture__29, b2EdgeAndPolygonContact__Evaluate_28b2Manifold__2c_20b2Transform_20const__2c_20b2Transform_20const__29, b2EdgeAndPolygonContact___b2EdgeAndPolygonContact_28_29, b2EdgeAndPolygonContact___b2EdgeAndPolygonContact_28_29_1, b2GearJoint__GetAnchorA_28_29_20const, b2GearJoint__GetAnchorB_28_29_20const, b2GearJoint__GetReactionForce_28float_29_20const, b2GearJoint__GetReactionTorque_28float_29_20const, b2GearJoint__Dump_28_29, b2GearJoint___b2GearJoint_28_29, b2GearJoint___b2GearJoint_28_29_1, b2GearJoint__InitVelocityConstraints_28b2SolverData_20const__29, b2GearJoint__SolveVelocityConstraints_28b2SolverData_20const__29, b2GearJoint__SolvePositionConstraints_28b2SolverData_20const__29, b2FrictionJoint__GetAnchorA_28_29_20const, b2FrictionJoint__GetAnchorB_28_29_20const, b2FrictionJoint__GetReactionForce_28float_29_20const, b2FrictionJoint__GetReactionTorque_28float_29_20const, b2FrictionJoint__Dump_28_29, b2FrictionJoint___b2FrictionJoint_28_29, b2FrictionJoint___b2FrictionJoint_28_29_1, b2FrictionJoint__InitVelocityConstraints_28b2SolverData_20const__29, b2FrictionJoint__SolveVelocityConstraints_28b2SolverData_20const__29, b2FrictionJoint__SolvePositionConstraints_28b2SolverData_20const__29, b2Joint__Dump_28_29, b2Joint___b2Joint_28_29, b2Joint___b2Joint_28_29_1, b2MotorJoint__GetAnchorA_28_29_20const, b2MotorJoint__GetAnchorB_28_29_20const, b2MotorJoint__GetReactionForce_28float_29_20const, b2MotorJoint__GetReactionTorque_28float_29_20const, b2MotorJoint__Dump_28_29, b2MotorJoint___b2MotorJoint_28_29, b2MotorJoint___b2MotorJoint_28_29_1, b2MotorJoint__InitVelocityConstraints_28b2SolverData_20const__29, b2MotorJoint__SolveVelocityConstraints_28b2SolverData_20const__29, b2MotorJoint__SolvePositionConstraints_28b2SolverData_20const__29, b2MouseJoint__GetAnchorA_28_29_20const, b2MouseJoint__GetAnchorB_28_29_20const, b2MouseJoint__GetReactionForce_28float_29_20const, b2MouseJoint__GetReactionTorque_28float_29_20const, b2MouseJoint__Dump_28_29, b2MouseJoint__ShiftOrigin_28b2Vec2_20const__29, b2MouseJoint___b2MouseJoint_28_29, b2MouseJoint___b2MouseJoint_28_29_1, b2MouseJoint__InitVelocityConstraints_28b2SolverData_20const__29, b2MouseJoint__SolveVelocityConstraints_28b2SolverData_20const__29, b2MouseJoint__SolvePositionConstraints_28b2SolverData_20const__29, b2PolygonAndCircleContact__b2PolygonAndCircleContact_28b2Fixture__2c_20b2Fixture__29, b2PolygonAndCircleContact__Evaluate_28b2Manifold__2c_20b2Transform_20const__2c_20b2Transform_20const__29, b2PolygonAndCircleContact___b2PolygonAndCircleContact_28_29, b2PolygonAndCircleContact___b2PolygonAndCircleContact_28_29_1, b2PolygonContact__b2PolygonContact_28b2Fixture__2c_20b2Fixture__29, b2PolygonContact__Evaluate_28b2Manifold__2c_20b2Transform_20const__2c_20b2Transform_20const__29, b2PolygonContact___b2PolygonContact_28_29, b2PolygonContact___b2PolygonContact_28_29_1, b2PrismaticJoint__GetAnchorA_28_29_20const, b2PrismaticJoint__GetAnchorB_28_29_20const, b2PrismaticJoint__GetReactionForce_28float_29_20const, b2PrismaticJoint__GetReactionTorque_28float_29_20const, b2PrismaticJoint__Dump_28_29, b2PrismaticJoint___b2PrismaticJoint_28_29, b2PrismaticJoint___b2PrismaticJoint_28_29_1, b2PrismaticJoint__InitVelocityConstraints_28b2SolverData_20const__29, b2PrismaticJoint__SolveVelocityConstraints_28b2SolverData_20const__29, b2PrismaticJoint__SolvePositionConstraints_28b2SolverData_20const__29, b2PulleyJoint__GetAnchorA_28_29_20const, b2PulleyJoint__GetAnchorB_28_29_20const, b2PulleyJoint__GetReactionForce_28float_29_20const, b2PulleyJoint__GetReactionTorque_28float_29_20const, b2PulleyJoint__Dump_28_29, b2PulleyJoint__ShiftOrigin_28b2Vec2_20const__29, b2PulleyJoint___b2PulleyJoint_28_29, b2PulleyJoint___b2PulleyJoint_28_29_1, b2PulleyJoint__InitVelocityConstraints_28b2SolverData_20const__29, b2PulleyJoint__SolveVelocityConstraints_28b2SolverData_20const__29, b2PulleyJoint__SolvePositionConstraints_28b2SolverData_20const__29, b2RevoluteJoint__GetAnchorA_28_29_20const, b2RevoluteJoint__GetAnchorB_28_29_20const, b2RevoluteJoint__GetReactionForce_28float_29_20const, b2RevoluteJoint__GetReactionTorque_28float_29_20const, b2RevoluteJoint__Dump_28_29, b2RevoluteJoint___b2RevoluteJoint_28_29, b2RevoluteJoint___b2RevoluteJoint_28_29_1, b2RevoluteJoint__InitVelocityConstraints_28b2SolverData_20const__29, b2RevoluteJoint__SolveVelocityConstraints_28b2SolverData_20const__29, b2RevoluteJoint__SolvePositionConstraints_28b2SolverData_20const__29, b2RopeJoint__GetAnchorA_28_29_20const, b2RopeJoint__GetAnchorB_28_29_20const, b2RopeJoint__GetReactionForce_28float_29_20const, b2RopeJoint__GetReactionTorque_28float_29_20const, b2RopeJoint__Dump_28_29, b2RopeJoint___b2RopeJoint_28_29, b2RopeJoint___b2RopeJoint_28_29_1, b2RopeJoint__InitVelocityConstraints_28b2SolverData_20const__29, b2RopeJoint__SolveVelocityConstraints_28b2SolverData_20const__29, b2RopeJoint__SolvePositionConstraints_28b2SolverData_20const__29, b2WeldJoint__GetAnchorA_28_29_20const, b2WeldJoint__GetAnchorB_28_29_20const, b2WeldJoint__GetReactionForce_28float_29_20const, b2WeldJoint__GetReactionTorque_28float_29_20const, b2WeldJoint__Dump_28_29, b2WeldJoint___b2WeldJoint_28_29, b2WeldJoint___b2WeldJoint_28_29_1, b2WeldJoint__InitVelocityConstraints_28b2SolverData_20const__29, b2WeldJoint__SolveVelocityConstraints_28b2SolverData_20const__29, b2WeldJoint__SolvePositionConstraints_28b2SolverData_20const__29, b2WheelJoint__GetAnchorA_28_29_20const, b2WheelJoint__GetAnchorB_28_29_20const, b2WheelJoint__GetReactionForce_28float_29_20const, b2WheelJoint__GetReactionTorque_28float_29_20const, b2WheelJoint__Dump_28_29, b2WheelJoint___b2WheelJoint_28_29, b2WheelJoint___b2WheelJoint_28_29_1, b2WheelJoint__InitVelocityConstraints_28b2SolverData_20const__29, b2WheelJoint__SolveVelocityConstraints_28b2SolverData_20const__29, b2WheelJoint__SolvePositionConstraints_28b2SolverData_20const__29, b2ContactFilter___b2ContactFilter_28_29, b2ContactFilter___b2ContactFilter_28_29_1, b2ContactFilter__ShouldCollide_28b2Fixture__2c_20b2Fixture__29, embind_init_builtin_28_29, __emscripten_stdout_close, __stdio_write, __emscripten_stdout_seek, fmt_fp, pop_arg_long_double, __cxxabiv1____shim_type_info_____shim_type_info_28_29, __cxxabiv1____fundamental_type_info_____fundamental_type_info_28_29, __cxxabiv1____shim_type_info__noop1_28_29_20const, __cxxabiv1____shim_type_info__noop2_28_29_20const, __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____enum_type_info_____enum_type_info_28_29, __cxxabiv1____enum_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____class_type_info_____class_type_info_28_29, __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____si_class_type_info_____si_class_type_info_28_29, __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29, __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____pointer_type_info_____pointer_type_info_28_29, __cxxabiv1____pointer_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
}
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = buffer;
   bufferView = HEAPU8;
  }
  return oldPages;
}
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "malloc": dlmalloc, 
  "free": dlfree, 
  "__getTypeName": __getTypeName, 
  "_embind_initialize_bindings": _embind_initialize_bindings, 
  "__errno_location": __errno_location, 
  "stackSave": stackSave, 
  "stackRestore": stackRestore, 
  "stackAlloc": stackAlloc, 
  "dynCall_jiji": legalstub$dynCall_jiji
};
}

  return asmFunc(info);
}
// EMSCRIPTEN_END_ASM


)(info);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module, info)
        });
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly != 'object') {
  abort('no native wasm support detected');
}

// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    // This build was created without ASSERTIONS defined.  `assert()` should not
    // ever be called in this configuration but in case there are callers in
    // the wild leave this simple abort() implemenation here for now.
    abort(text);
  }
}

// Memory management

var HEAP,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/** @type {!Float64Array} */
  HEAPF64;

function updateMemoryViews() {
  var b = wasmMemory.buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(b);
  Module['HEAP16'] = HEAP16 = new Int16Array(b);
  Module['HEAP32'] = HEAP32 = new Int32Array(b);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(b);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(b);
}

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js
// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;

assert(INITIAL_MEMORY >= 65536, 'INITIAL_MEMORY should be larger than STACK_SIZE, was ' + INITIAL_MEMORY + '! (STACK_SIZE=' + 65536 + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536,
      // In theory we should not need to emit the maximum if we want "unlimited"
      // or 4GB of memory, but VMs error on that atm, see
      // https://github.com/emscripten-core/emscripten/issues/14130
      // And in the pthreads case we definitely need to emit a maximum. So
      // always emit one.
      'maximum': 2147483648 / 65536
    });
  }

updateMemoryViews();

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = wasmMemory.buffer.byteLength;

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js
// end include: runtime_stack_check.js
// include: runtime_assertions.js
// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;

var runtimeKeepaliveCounter = 0;

function keepRuntimeAlive() {
  return noExitRuntime || runtimeKeepaliveCounter > 0;
}

function preRun() {
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  runtimeInitialized = true;

  
  callRuntimeCallbacks(__ATINIT__);
}

function postRun() {

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  what += '. Build with -sASSERTIONS for more info.';

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // defintion for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  readyPromiseReject(e);
  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// include: memoryprofiler.js
// end include: memoryprofiler.js
// include: URIUtils.js
// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
// include: runtime_exceptions.js
// end include: runtime_exceptions.js
var wasmBinaryFile;
  wasmBinaryFile = '<<< WASM_BINARY_FILE >>>';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    }
    throw "both async and sync fetching of the wasm failed";
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise(binaryFile) {
  // If we don't have the binary yet, try to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch == 'function'
    ) {
      return fetch(binaryFile, { credentials: 'same-origin' }).then((response) => {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + binaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(() => getBinary(binaryFile));
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(() => getBinary(binaryFile));
}

function instantiateArrayBuffer(binaryFile, imports, receiver) {
  return getBinaryPromise(binaryFile).then((binary) => {
    return WebAssembly.instantiate(binary, imports);
  }).then((instance) => {
    return instance;
  }).then(receiver, (reason) => {
    err('failed to asynchronously prepare wasm: ' + reason);

    abort(reason);
  });
}

function instantiateAsync(binary, binaryFile, imports, callback) {
  if (!binary &&
      typeof WebAssembly.instantiateStreaming == 'function' &&
      !isDataURI(binaryFile) &&
      typeof fetch == 'function') {
    return fetch(binaryFile, { credentials: 'same-origin' }).then((response) => {
      // Suppress closure warning here since the upstream definition for
      // instantiateStreaming only allows Promise<Repsponse> rather than
      // an actual Response.
      // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.
      /** @suppress {checkTypes} */
      var result = WebAssembly.instantiateStreaming(response, imports);

      return result.then(
        callback,
        function(reason) {
          // We expect the most common failure cause to be a bad MIME type for the binary,
          // in which case falling back to ArrayBuffer instantiation should work.
          err('wasm streaming compile failed: ' + reason);
          err('falling back to ArrayBuffer instantiation');
          return instantiateArrayBuffer(binaryFile, imports, callback);
        });
    });
  } else {
    return instantiateArrayBuffer(binaryFile, imports, callback);
  }
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': wasmImports,
    'wasi_snapshot_preview1': wasmImports,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');
    return exports;
  }
  // wait for the pthread pool (if any)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to
  // run the instantiation parallel to any other async startup actions they are
  // performing.
  // Also pthreads and wasm workers initialize the wasm instance through this
  // path.
  if (Module['instantiateWasm']) {

    try {
      return Module['instantiateWasm'](info, receiveInstance);
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
        // If instantiation fails, reject the module ready promise.
        readyPromiseReject(e);
    }
  }

  // If instantiation fails, reject the module ready promise.
  instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult).catch(readyPromiseReject);
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// include: runtime_debug.js
// end include: runtime_debug.js
// === Body ===


// end include: preamble.js

  /** @constructor */
  function ExitStatus(status) {
      this.name = 'ExitStatus';
      this.message = `Program terminated with exit(${status})`;
      this.status = status;
    }

  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        // Pass the module as the first argument.
        callbacks.shift()(Module);
      }
    }

  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': abort('to do getValue(i64) use WASM_BIGINT');
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      case '*': return HEAPU32[((ptr)>>2)];
      default: abort(`invalid type for getValue: ${type}`);
    }
  }

  function intArrayToString(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      var chr = array[i];
      if (chr > 0xFF) {
        chr &= 0xFF;
      }
      ret.push(String.fromCharCode(chr));
    }
    return ret.join('');
  }

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': HEAP8[((ptr)>>0)] = value; break;
      case 'i8': HEAP8[((ptr)>>0)] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': abort('to do setValue(i64) use WASM_BIGINT');
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      case '*': HEAPU32[((ptr)>>2)] = value; break;
      default: abort(`invalid type for setValue: ${type}`);
    }
  }

  var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;
  
    /**
     * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
     * array that contains uint8 values, returns a copy of that string as a
     * Javascript String object.
     * heapOrArray is either a regular array, or a JavaScript typed array view.
     * @param {number} idx
     * @param {number=} maxBytesToRead
     * @return {string}
     */
  function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on
      // null terminator by itself.  Also, use the length info to avoid running tiny
      // strings through TextDecoder, since .subarray() allocates garbage.
      // (As a tiny code save trick, compare endPtr against endIdx using a negation,
      // so that undefined means Infinity)
      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
  
      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
      }
      var str = '';
      // If building with TextDecoder, we have already computed the string length
      // above, so test loop end condition against that
      while (idx < endPtr) {
        // For UTF8 byte structure, see:
        // http://en.wikipedia.org/wiki/UTF-8#Description
        // https://www.ietf.org/rfc/rfc2279.txt
        // https://tools.ietf.org/html/rfc3629
        var u0 = heapOrArray[idx++];
        if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
        var u1 = heapOrArray[idx++] & 63;
        if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
        var u2 = heapOrArray[idx++] & 63;
        if ((u0 & 0xF0) == 0xE0) {
          u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
        } else {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
        }
  
        if (u0 < 0x10000) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        }
      }
      return str;
    }
  
  
    /**
     * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
     * emscripten HEAP, returns a copy of that string as a Javascript String object.
     *
     * @param {number} ptr
     * @param {number=} maxBytesToRead - An optional length that specifies the
     *   maximum number of bytes to read. You can omit this parameter to scan the
     *   string until the first 0 byte. If maxBytesToRead is passed, and the string
     *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
     *   string will cut short at that byte index (i.e. maxBytesToRead will not
     *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing
     *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw
     *   JS JIT optimizations off, so it is worth to consider consistently using one
     * @return {string}
     */
  function UTF8ToString(ptr, maxBytesToRead) {
      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
    }
  function ___assert_fail(condition, filename, line, func) {
      abort(`Assertion failed: ${UTF8ToString(condition)}, at: ` + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  var char_0 = 48;
  
  var char_9 = 57;
  function makeLegalFunctionName(name) {
      if (undefined === name) {
        return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
        return `_${name}`;
      }
      return name;
    }
  function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      // Use an abject with a computed property name to create a new function with
      // a name specified at runtime, but without using `new Function` or `eval`.
      return {
        [name]: function() {
          return body.apply(this, arguments);
        }
      }[name];
    }
  
  /** @constructor */
  function HandleAllocator() {
      // Reserve slot 0 so that 0 is always an invalid handle
      this.allocated = [undefined];
      this.freelist = [];
      this.get = function(id) {
        return this.allocated[id];
      };
      this.has = function(id) {
        return this.allocated[id] !== undefined;
      };
      this.allocate = function(handle) {
        var id = this.freelist.pop() || this.allocated.length;
        this.allocated[id] = handle;
        return id;
      };
      this.free = function(id) {
        // Set the slot to `undefined` rather than using `delete` here since
        // apparently arrays with holes in them can be less efficient.
        this.allocated[id] = undefined;
        this.freelist.push(id);
      };
    }
  var emval_handles = new HandleAllocator();;
  
  function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
        this.name = errorName;
        this.message = message;
  
        var stack = (new Error(message)).stack;
        if (stack !== undefined) {
          this.stack = this.toString() + '\n' +
              stack.replace(/^Error(:[^\n]*)?\n/, '');
        }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
        if (this.message === undefined) {
          return this.name;
        } else {
          return `${this.name}: ${this.message}`;
        }
      };
  
      return errorClass;
    }
  var BindingError = undefined;
  function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  function count_emval_handles() {
      var count = 0;
      for (var i = emval_handles.reserved; i < emval_handles.allocated.length; ++i) {
        if (emval_handles.allocated[i] !== undefined) {
          ++count;
        }
      }
      return count;
    }
  
  function init_emval() {
      // reserve some special values. These never get de-allocated.
      // The HandleAllocator takes care of reserving zero.
      emval_handles.allocated.push(
        {value: undefined},
        {value: null},
        {value: true},
        {value: false},
      );
      emval_handles.reserved = emval_handles.allocated.length
      Module['count_emval_handles'] = count_emval_handles;
    }
  var Emval = {toValue:(handle) => {
        if (!handle) {
            throwBindingError('Cannot use deleted val. handle = ' + handle);
        }
        return emval_handles.get(handle).value;
      },toHandle:(value) => {
        switch (value) {
          case undefined: return 1;
          case null: return 2;
          case true: return 3;
          case false: return 4;
          default:{
            return emval_handles.allocate({refcount: 1, value: value});
          }
        }
      }};
  
  var PureVirtualError = undefined;
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
  var embind_charCodes = undefined;
  function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
        if (registeredInstances.hasOwnProperty(k)) {
          rv.push(registeredInstances[k]);
        }
      }
      return rv;
    }
  
  var deletionQueue = [];
  function flushPendingDeletes() {
      while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj['delete']();
      }
    }
  
  var delayFunction = undefined;
  
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
        delayFunction(flushPendingDeletes);
      }
    }
  function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }
  var registeredInstances = {};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }
  
  function registerInheritedInstance(class_, ptr, instance) {
      ptr = getBasestPointer(class_, ptr);
      if (registeredInstances.hasOwnProperty(ptr)) {
          throwBindingError(`Tried to register registered instance: ${ptr}`);
      } else {
          registeredInstances[ptr] = instance;
      }
    }
  
  var registeredTypes = {};
  
  
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
  
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }
  
  
  
  
  function unregisterInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      if (registeredInstances.hasOwnProperty(ptr)) {
          delete registeredInstances[ptr];
      } else {
          throwBindingError(`Tried to unregister unregistered instance: ${ptr}`);
      }
    }
  
  function detachFinalizer(handle) {}
  
  var finalizationRegistry = false;
  
  
  function runDestructor($$) {
      if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }
  function releaseClassHandle($$) {
      $$.count.value -= 1;
      var toDelete = 0 === $$.count.value;
      if (toDelete) {
        runDestructor($$);
      }
    }
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
        return ptr;
      }
      if (undefined === desiredClass.baseClass) {
        return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
        return null;
      }
      return desiredClass.downcast(rv);
    }
  
  var registeredPointers = {};
  
  
  function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  var InternalError = undefined;
  function throwInternalError(message) {
      throw new InternalError(message);
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
        throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return attachFinalizer(Object.create(prototype, {
        $$: {
            value: record,
        },
      }));
    }
  function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
        this.destructor(ptr);
        return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
        // JS object has been neutered, time to repopulate it
        if (0 === registeredInstance.$$.count.value) {
          registeredInstance.$$.ptr = rawPointer;
          registeredInstance.$$.smartPtr = ptr;
          return registeredInstance['clone']();
        } else {
          // else, just increment reference count on existing object
          // it already has a reference to the smart pointer
          var rv = registeredInstance['clone']();
          this.destructor(ptr);
          return rv;
        }
      }
  
      function makeDefaultHandle() {
        if (this.isSmartPointer) {
          return makeClassHandle(this.registeredClass.instancePrototype, {
            ptrType: this.pointeeType,
            ptr: rawPointer,
            smartPtrType: this,
            smartPtr: ptr,
          });
        } else {
          return makeClassHandle(this.registeredClass.instancePrototype, {
            ptrType: this,
            ptr: ptr,
          });
        }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
      } else {
        toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
        return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
          ptrType: toType,
          ptr: dp,
          smartPtrType: this,
          smartPtr: ptr,
        });
      } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
          ptrType: toType,
          ptr: dp,
        });
      }
    }
  function attachFinalizer(handle) {
      if ('undefined' === typeof FinalizationRegistry) {
        attachFinalizer = (handle) => handle;
        return handle;
      }
      // If the running environment has a FinalizationRegistry (see
      // https://github.com/tc39/proposal-weakrefs), then attach finalizers
      // for class handles.  We check for the presence of FinalizationRegistry
      // at run-time, not build-time.
      finalizationRegistry = new FinalizationRegistry((info) => {
        releaseClassHandle(info.$$);
      });
      attachFinalizer = (handle) => {
        var $$ = handle.$$;
        var hasSmartPtr = !!$$.smartPtr;
        if (hasSmartPtr) {
          // We should not call the destructor on raw pointers in case other code expects the pointee to live
          var info = { $$: $$ };
          finalizationRegistry.register(handle, info, handle);
        }
        return handle;
      };
      detachFinalizer = (handle) => finalizationRegistry.unregister(handle);
      return attachFinalizer(handle);
    }
  function __embind_create_inheriting_constructor(constructorName, wrapperType, properties) {
      constructorName = readLatin1String(constructorName);
      wrapperType = requireRegisteredType(wrapperType, 'wrapper');
      properties = Emval.toValue(properties);
  
      var arraySlice = [].slice;
  
      var registeredClass = wrapperType.registeredClass;
      var wrapperPrototype = registeredClass.instancePrototype;
      var baseClass = registeredClass.baseClass;
      var baseClassPrototype = baseClass.instancePrototype;
      var baseConstructor = registeredClass.baseClass.constructor;
      var ctor = createNamedFunction(constructorName, function() {
        registeredClass.baseClass.pureVirtualFunctions.forEach(function(name) {
            if (this[name] === baseClassPrototype[name]) {
                throw new PureVirtualError(`Pure virtual function ${name} must be implemented in JavaScript`);
            }
        }.bind(this));
  
        Object.defineProperty(this, '__parent', {
            value: wrapperPrototype
        });
        this["__construct"].apply(this, arraySlice.call(arguments));
      });
  
      // It's a little nasty that we're modifying the wrapper prototype here.
  
      wrapperPrototype["__construct"] = function __construct() {
        if (this === wrapperPrototype) {
          throwBindingError("Pass correct 'this' to __construct");
        }
  
        var inner = baseConstructor["implement"].apply(
          undefined,
          [this].concat(arraySlice.call(arguments)));
        detachFinalizer(inner);
        var $$ = inner.$$;
        inner["notifyOnDestruction"]();
        $$.preservePointerOnDelete = true;
        Object.defineProperties(this, { $$: {
            value: $$
        }});
        attachFinalizer(this);
        registerInheritedInstance(registeredClass, $$.ptr, this);
      };
  
      wrapperPrototype["__destruct"] = function __destruct() {
        if (this === wrapperPrototype) {
          throwBindingError("Pass correct 'this' to __destruct");
        }
  
        detachFinalizer(this);
        unregisterInheritedInstance(registeredClass, this.$$.ptr);
      };
  
      ctor.prototype = Object.create(wrapperPrototype);
      for (var p in properties) {
        ctor.prototype[p] = properties[p];
      }
      return Emval.toHandle(ctor);
    }

  var structRegistrations = {};
  
  function runDestructors(destructors) {
      while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
      }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAP32[((pointer)>>2)]);
    }
  
  var awaitingDependencies = {};
  
  
  var typeDependencies = {};
  
  function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach((dt, i) => {
        if (registeredTypes.hasOwnProperty(dt)) {
          typeConverters[i] = registeredTypes[dt];
        } else {
          unregisteredTypes.push(dt);
          if (!awaitingDependencies.hasOwnProperty(dt)) {
            awaitingDependencies[dt] = [];
          }
          awaitingDependencies[dt].push(() => {
            typeConverters[i] = registeredTypes[dt];
            ++registered;
            if (registered === unregisteredTypes.length) {
              onComplete(typeConverters);
            }
          });
        }
      });
      if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
      }
    }
  function __embind_finalize_value_object(structType) {
      var reg = structRegistrations[structType];
      delete structRegistrations[structType];
  
      var rawConstructor = reg.rawConstructor;
      var rawDestructor = reg.rawDestructor;
      var fieldRecords = reg.fields;
      var fieldTypes = fieldRecords.map((field) => field.getterReturnType).
                concat(fieldRecords.map((field) => field.setterArgumentType));
      whenDependentTypesAreResolved([structType], fieldTypes, (fieldTypes) => {
        var fields = {};
        fieldRecords.forEach((field, i) => {
          var fieldName = field.fieldName;
          var getterReturnType = fieldTypes[i];
          var getter = field.getter;
          var getterContext = field.getterContext;
          var setterArgumentType = fieldTypes[i + fieldRecords.length];
          var setter = field.setter;
          var setterContext = field.setterContext;
          fields[fieldName] = {
            read: (ptr) => {
              return getterReturnType['fromWireType'](
                  getter(getterContext, ptr));
            },
            write: (ptr, o) => {
              var destructors = [];
              setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
              runDestructors(destructors);
            }
          };
        });
  
        return [{
          name: reg.name,
          'fromWireType': function(ptr) {
            var rv = {};
            for (var i in fields) {
              rv[i] = fields[i].read(ptr);
            }
            rawDestructor(ptr);
            return rv;
          },
          'toWireType': function(destructors, o) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
            // assume all fields are present without checking.
            for (var fieldName in fields) {
              if (!(fieldName in o)) {
                throw new TypeError(`Missing field: "${fieldName}"`);
              }
            }
            var ptr = rawConstructor();
            for (fieldName in fields) {
              fields[fieldName].write(ptr, o[fieldName]);
            }
            if (destructors !== null) {
              destructors.push(rawDestructor, ptr);
            }
            return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: rawDestructor,
        }];
      });
    }

  function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) {}

  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError(`Unknown type size: ${size}`);
      }
    }
  
  
  
  
  
  
  /** @param {Object=} options */
  function registerType(rawType, registeredInstance, options = {}) {
      if (!('argPackAdvance' in registeredInstance)) {
        throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
        throwBindingError(`type "${name}" must have a positive integer typeid pointer`);
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
        if (options.ignoreDuplicateRegistrations) {
          return;
        } else {
          throwBindingError(`Cannot register type '${name}' twice`);
        }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach((cb) => cb());
      }
    }
  function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
        return false;
      }
      if (!(other instanceof ClassHandle)) {
        return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  function shallowCopyInternalPointer(o) {
      return {
        count: o.count,
        deleteScheduled: o.deleteScheduled,
        preservePointerOnDelete: o.preservePointerOnDelete,
        ptr: o.ptr,
        ptrType: o.ptrType,
        smartPtr: o.smartPtr,
        smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }
  
  function ClassHandle_clone() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
        this.$$.count.value += 1;
        return this;
      } else {
        var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
          $$: {
            value: shallowCopyInternalPointer(this.$$),
          }
        }));
  
        clone.$$.count.value += 1;
        clone.$$.deleteScheduled = false;
        return clone;
      }
    }
  
  
  
  
  function ClassHandle_delete() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError('Object already scheduled for deletion');
      }
  
      detachFinalizer(this);
      releaseClassHandle(this.$$);
  
      if (!this.$$.preservePointerOnDelete) {
        this.$$.smartPtr = undefined;
        this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  
  function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }
  function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }
  function ClassHandle() {
    }
  
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];
        // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
        proto[methodName] = function() {
          // TODO This check can be removed in -O3 level "unsafe" optimizations.
          if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
              throwBindingError(`Function '${humanName}' called with an invalid number of arguments (${arguments.length}) - expects one of (${proto[methodName].overloadTable})!`);
          }
          return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
        };
        // Move the previous function into the overload table.
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
  
  /** @param {number=} numArguments */
  function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
        if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
          throwBindingError(`Cannot register public name '${name}' twice`);
        }
  
        // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
        // that routes between the two.
        ensureOverloadTable(Module, name, name);
        if (Module.hasOwnProperty(numArguments)) {
          throwBindingError(`Cannot register multiple overloads of a function with the same number of arguments (${numArguments})!`);
        }
        // Add the new function into the overload table.
        Module[name].overloadTable[numArguments] = value;
      }
      else {
        Module[name] = value;
        if (undefined !== numArguments) {
          Module[name].numArguments = numArguments;
        }
      }
    }
  
  
  
  /** @constructor */
  function RegisteredClass(name,
                               constructor,
                               instancePrototype,
                               rawDestructor,
                               baseClass,
                               getActualType,
                               upcast,
                               downcast) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
          throwBindingError(`Expected null or instance of ${desiredClass.name}, got an instance of ${ptrClass.name}`);
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError(`null is not a valid ${this.name}`);
        }
        return 0;
      }
  
      if (!handle.$$) {
        throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
      }
      if (!handle.$$.ptr) {
        throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
        if (this.isReference) {
          throwBindingError(`null is not a valid ${this.name}`);
        }
  
        if (this.isSmartPointer) {
          ptr = this.rawConstructor();
          if (destructors !== null) {
            destructors.push(this.rawDestructor, ptr);
          }
          return ptr;
        } else {
          return 0;
        }
      }
  
      if (!handle.$$) {
        throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
      }
      if (!handle.$$.ptr) {
        throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name)} to parameter type ${this.name}`);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
        // TODO: this is not strictly true
        // We could support BY_EMVAL conversions from raw pointers to smart pointers
        // because the smart pointer can hold a reference to the handle
        if (undefined === handle.$$.smartPtr) {
          throwBindingError('Passing raw pointer to smart pointer is illegal');
        }
  
        switch (this.sharingPolicy) {
          case 0: // NONE
            // no upcasting
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              throwBindingError(`Cannot convert argument of type ${(handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name)} to parameter type ${this.name}`);
            }
            break;
  
          case 1: // INTRUSIVE
            ptr = handle.$$.smartPtr;
            break;
  
          case 2: // BY_EMVAL
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              var clonedHandle = handle['clone']();
              ptr = this.rawShare(
                ptr,
                Emval.toHandle(function() {
                  clonedHandle['delete']();
                })
              );
              if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
              }
            }
            break;
  
          default:
            throwBindingError('Unsupporting sharing policy');
        }
      }
      return ptr;
    }
  
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError(`null is not a valid ${this.name}`);
        }
        return 0;
      }
  
      if (!handle.$$) {
        throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
      }
      if (!handle.$$.ptr) {
        throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError(`Cannot convert argument of type ${handle.$$.ptrType.name} to parameter type ${this.name}`);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
        this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
        handle['delete']();
      }
    }
  
  function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }
  /** @constructor
      @param {*=} pointeeType,
      @param {*=} sharingPolicy,
      @param {*=} rawGetPointee,
      @param {*=} rawConstructor,
      @param {*=} rawShare,
      @param {*=} rawDestructor,
       */
  function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
        if (isConst) {
          this['toWireType'] = constNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        } else {
          this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        }
      } else {
        this['toWireType'] = genericPointerToWireType;
        // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
        // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
        // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
        //       craftInvokerFunction altogether.
      }
    }
  
  /** @param {number=} numArguments */
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
        throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
      }
      else {
        Module[name] = value;
        Module[name].argCount = numArguments;
      }
    }
  
  
  
  function dynCallLegacy(sig, ptr, args) {
      var f = Module['dynCall_' + sig];
      return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);
    }
  
  var wasmTableMirror = [];
  
  function getWasmTableEntry(funcPtr) {
      var func = wasmTableMirror[funcPtr];
      if (!func) {
        if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;
        wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
      }
      return func;
    }
  
  /** @param {Object=} args */
  function dynCall(sig, ptr, args) {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of thier signature, so we rely the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.includes('j')) {
        return dynCallLegacy(sig, ptr, args);
      }
      var rtn = getWasmTableEntry(ptr).apply(null, args);
      return rtn;
  
    }
  
  function getDynCaller(sig, ptr) {
      var argCache = [];
      return function() {
        argCache.length = 0;
        Object.assign(argCache, arguments);
        return dynCall(sig, ptr, argCache);
      };
    }
  
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller() {
        if (signature.includes('j')) {
          return getDynCaller(signature, rawFunction);
        }
        return getWasmTableEntry(rawFunction);
      }
  
      var fp = makeDynCaller();
      if (typeof fp != "function") {
          throwBindingError(`unknown function pointer with signature ${signature}: ${rawFunction}`);
      }
      return fp;
    }
  
  
  
  var UnboundTypeError = undefined;
  
  function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
        if (seen[type]) {
          return;
        }
        if (registeredTypes[type]) {
          return;
        }
        if (typeDependencies[type]) {
          typeDependencies[type].forEach(visit);
          return;
        }
        unboundTypes.push(type);
        seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(`${message}: ` + unboundTypes.map(getTypeName).join([', ']));
    }
  
  function __embind_register_class(rawType,
                                     rawPointerType,
                                     rawConstPointerType,
                                     baseClassRawType,
                                     getActualTypeSignature,
                                     getActualType,
                                     upcastSignature,
                                     upcast,
                                     downcastSignature,
                                     downcast,
                                     name,
                                     destructorSignature,
                                     rawDestructor) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
        upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
        downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
        // this code cannot run if baseClassRawType is zero
        throwUnboundTypeError(`Cannot construct ${name} due to unbound types`, [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
        [rawType, rawPointerType, rawConstPointerType],
        baseClassRawType ? [baseClassRawType] : [],
        function(base) {
          base = base[0];
  
          var baseClass;
          var basePrototype;
          if (baseClassRawType) {
            baseClass = base.registeredClass;
            basePrototype = baseClass.instancePrototype;
          } else {
            basePrototype = ClassHandle.prototype;
          }
  
          var constructor = createNamedFunction(legalFunctionName, function() {
            if (Object.getPrototypeOf(this) !== instancePrototype) {
              throw new BindingError("Use 'new' to construct " + name);
            }
            if (undefined === registeredClass.constructor_body) {
              throw new BindingError(name + " has no accessible constructor");
            }
            var body = registeredClass.constructor_body[arguments.length];
            if (undefined === body) {
              throw new BindingError(`Tried to invoke ctor of ${name} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(registeredClass.constructor_body).toString()}) parameters instead!`);
            }
            return body.apply(this, arguments);
          });
  
          var instancePrototype = Object.create(basePrototype, {
            constructor: { value: constructor },
          });
  
          constructor.prototype = instancePrototype;
  
          var registeredClass = new RegisteredClass(name,
                                                    constructor,
                                                    instancePrototype,
                                                    rawDestructor,
                                                    baseClass,
                                                    getActualType,
                                                    upcast,
                                                    downcast);
  
          if (registeredClass.baseClass) {
            // Keep track of class hierarchy. Used to allow sub-classes to inherit class functions.
            if (registeredClass.baseClass.__derivedClasses === undefined) {
              registeredClass.baseClass.__derivedClasses = [];
            }
  
            registeredClass.baseClass.__derivedClasses.push(registeredClass);
          }
  
          var referenceConverter = new RegisteredPointer(name,
                                                         registeredClass,
                                                         true,
                                                         false,
                                                         false);
  
          var pointerConverter = new RegisteredPointer(name + '*',
                                                       registeredClass,
                                                       false,
                                                       false,
                                                       false);
  
          var constPointerConverter = new RegisteredPointer(name + ' const*',
                                                            registeredClass,
                                                            false,
                                                            true,
                                                            false);
  
          registeredPointers[rawType] = {
            pointerType: pointerConverter,
            constPointerType: constPointerConverter
          };
  
          replacePublicSymbol(legalFunctionName, constructor);
  
          return [referenceConverter, pointerConverter, constPointerConverter];
        }
      );
    }

  
  
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc, /** boolean= */ isAsync) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      // isAsync: Optional. If true, returns an async function. Async bindings are only supported with JSPI.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for (var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
          needsDestructorStack = true;
          break;
        }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var expectedArgCount = argCount - 2;
      var argsWired = new Array(expectedArgCount);
      var invokerFuncArgs = [];
      var destructors = [];
      return function() {
        if (arguments.length !== expectedArgCount) {
          throwBindingError(`function ${humanName} called with ${arguments.length} arguments, expected ${expectedArgCount} args!`);
        }
        destructors.length = 0;
        var thisWired;
        invokerFuncArgs.length = isClassMethodFunc ? 2 : 1;
        invokerFuncArgs[0] = cppTargetFunc;
        if (isClassMethodFunc) {
          thisWired = argTypes[1]['toWireType'](destructors, this);
          invokerFuncArgs[1] = thisWired;
        }
        for (var i = 0; i < expectedArgCount; ++i) {
          argsWired[i] = argTypes[i + 2]['toWireType'](destructors, arguments[i]);
          invokerFuncArgs.push(argsWired[i]);
        }
  
        var rv = cppInvokerFunc.apply(null, invokerFuncArgs);
  
        function onDone(rv) {
          if (needsDestructorStack) {
            runDestructors(destructors);
          } else {
            for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; i++) {
              var param = i === 1 ? thisWired : argsWired[i - 2];
              if (argTypes[i].destructorFunction !== null) {
                argTypes[i].destructorFunction(param);
              }
            }
          }
  
          if (returns) {
            return argTypes[0]['fromWireType'](rv);
          }
        }
  
        return onDone(rv);
      };
    }
  
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          // TODO(https://github.com/emscripten-core/emscripten/issues/17310):
          // Find a way to hoist the `>> 2` or `>> 3` out of this loop.
          array.push(HEAPU32[(((firstElement)+(i * 4))>>2)]);
      }
      return array;
    }
  
  
  
  
  function __embind_register_class_class_function(rawClassType,
                                                    methodName,
                                                    argCount,
                                                    rawArgTypesAddr,
                                                    invokerSignature,
                                                    rawInvoker,
                                                    fn,
                                                    isAsync) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = `${classType.name}.${methodName}`;
  
        function unboundTypesHandler() {
          throwUnboundTypeError(`Cannot call ${humanName} due to unbound types`, rawArgTypes);
        }
  
        if (methodName.startsWith("@@")) {
          methodName = Symbol[methodName.substring(2)];
        }
  
        var proto = classType.registeredClass.constructor;
        if (undefined === proto[methodName]) {
          // This is the first function to be registered with this name.
          unboundTypesHandler.argCount = argCount-1;
          proto[methodName] = unboundTypesHandler;
        } else {
          // There was an existing function with the same name registered. Set up
          // a function overload routing table.
          ensureOverloadTable(proto, methodName, humanName);
          proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
        }
  
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
          // Replace the initial unbound-types-handler stub with the proper
          // function. If multiple overloads are registered, the function handlers
          // go into an overload table.
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn, isAsync);
          if (undefined === proto[methodName].overloadTable) {
            func.argCount = argCount-1;
            proto[methodName] = func;
          } else {
            proto[methodName].overloadTable[argCount-1] = func;
          }
  
          if (classType.registeredClass.__derivedClasses) {
            for (const derivedClass of classType.registeredClass.__derivedClasses) {
              if (!derivedClass.constructor.hasOwnProperty(methodName)) {
                // TODO: Add support for overloads
                derivedClass.constructor[methodName] = func;
              }
            }
          }
  
          return [];
        });
        return [];
      });
    }

  
  
  
  
  
  
  function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = `constructor ${classType.name}`;
  
        if (undefined === classType.registeredClass.constructor_body) {
          classType.registeredClass.constructor_body = [];
        }
        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
          throw new BindingError(`Cannot register multiple constructors with identical number of parameters (${argCount-1}) for class '${classType.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);
        }
        classType.registeredClass.constructor_body[argCount - 1] = () => {
          throwUnboundTypeError(`Cannot construct ${classType.name} due to unbound types`, rawArgTypes);
        };
  
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
          // Insert empty slot for context type (argTypes[1]).
          argTypes.splice(1, 0, null);
          classType.registeredClass.constructor_body[argCount - 1] = craftInvokerFunction(humanName, argTypes, null, invoker, rawConstructor);
          return [];
        });
        return [];
      });
    }

  
  
  
  
  
  function __embind_register_class_function(rawClassType,
                                              methodName,
                                              argCount,
                                              rawArgTypesAddr, // [ReturnType, ThisType, Args...]
                                              invokerSignature,
                                              rawInvoker,
                                              context,
                                              isPureVirtual,
                                              isAsync) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = `${classType.name}.${methodName}`;
  
        if (methodName.startsWith("@@")) {
          methodName = Symbol[methodName.substring(2)];
        }
  
        if (isPureVirtual) {
          classType.registeredClass.pureVirtualFunctions.push(methodName);
        }
  
        function unboundTypesHandler() {
          throwUnboundTypeError(`Cannot call ${humanName} due to unbound types`, rawArgTypes);
        }
  
        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
          // This is the first overload to be registered, OR we are replacing a
          // function in the base class with a function in the derived class.
          unboundTypesHandler.argCount = argCount - 2;
          unboundTypesHandler.className = classType.name;
          proto[methodName] = unboundTypesHandler;
        } else {
          // There was an existing function with the same name registered. Set up
          // a function overload routing table.
          ensureOverloadTable(proto, methodName, humanName);
          proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
        }
  
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
          var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context, isAsync);
  
          // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
          // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
          if (undefined === proto[methodName].overloadTable) {
            // Set argCount in case an overload is registered later
            memberFunction.argCount = argCount - 2;
            proto[methodName] = memberFunction;
          } else {
            proto[methodName].overloadTable[argCount - 2] = memberFunction;
          }
  
          return [];
        });
        return [];
      });
    }

  
  
  
  
  
  
  
  function validateThis(this_, classType, humanName) {
      if (!(this_ instanceof Object)) {
        throwBindingError(`${humanName} with invalid "this": ${this_}`);
      }
      if (!(this_ instanceof classType.registeredClass.constructor)) {
        throwBindingError(`${humanName} incompatible with "this" of type ${this_.constructor.name}`);
      }
      if (!this_.$$.ptr) {
        throwBindingError(`cannot call emscripten binding method ${humanName} on deleted object`);
      }
  
      // todo: kill this
      return upcastPointer(this_.$$.ptr,
                           this_.$$.ptrType.registeredClass,
                           classType.registeredClass);
    }
  function __embind_register_class_property(classType,
                                              fieldName,
                                              getterReturnType,
                                              getterSignature,
                                              getter,
                                              getterContext,
                                              setterArgumentType,
                                              setterSignature,
                                              setter,
                                              setterContext) {
      fieldName = readLatin1String(fieldName);
      getter = embind__requireFunction(getterSignature, getter);
  
      whenDependentTypesAreResolved([], [classType], function(classType) {
        classType = classType[0];
        var humanName = `${classType.name}.${fieldName}`;
        var desc = {
          get: function() {
            throwUnboundTypeError(`Cannot access ${humanName} due to unbound types`, [getterReturnType, setterArgumentType]);
          },
          enumerable: true,
          configurable: true
        };
        if (setter) {
          desc.set = () => {
            throwUnboundTypeError(`Cannot access ${humanName} due to unbound types`, [getterReturnType, setterArgumentType]);
          };
        } else {
          desc.set = (v) => {
            throwBindingError(humanName + ' is a read-only property');
          };
        }
  
        Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
  
        whenDependentTypesAreResolved(
          [],
          (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
      function(types) {
          var getterReturnType = types[0];
          var desc = {
            get: function() {
              var ptr = validateThis(this, classType, humanName + ' getter');
              return getterReturnType['fromWireType'](getter(getterContext, ptr));
            },
            enumerable: true
          };
  
          if (setter) {
            setter = embind__requireFunction(setterSignature, setter);
            var setterArgumentType = types[1];
            desc.set = function(v) {
              var ptr = validateThis(this, classType, humanName + ' setter');
              var destructors = [];
              setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
              runDestructors(destructors);
            };
          }
  
          Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
          return [];
        });
  
        return [];
      });
    }

  
  function __embind_register_constant(name, type, value) {
      name = readLatin1String(name);
      whenDependentTypesAreResolved([], [type], function(type) {
        type = type[0];
        Module[name] = type['fromWireType'](value);
        return [];
      });
    }

  function __emval_decref(handle) {
      if (handle >= emval_handles.reserved && 0 === --emval_handles.get(handle).refcount) {
        emval_handles.free(handle);
      }
    }
  
  
  
  
  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
          var rv = Emval.toValue(handle);
          __emval_decref(handle);
          return rv;
        },
        'toWireType': function(destructors, value) {
          return Emval.toHandle(value);
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: null, // This type does not need a destructor
  
        // TODO: do we need a deleteObject here?  write a test where
        // emval is passed into JS via an interface
      });
    }

  
  
  function enumReadValueFromPointer(name, shift, signed) {
      switch (shift) {
          case 0: return function(pointer) {
              var heap = signed ? HEAP8 : HEAPU8;
              return this['fromWireType'](heap[pointer]);
          };
          case 1: return function(pointer) {
              var heap = signed ? HEAP16 : HEAPU16;
              return this['fromWireType'](heap[pointer >> 1]);
          };
          case 2: return function(pointer) {
              var heap = signed ? HEAP32 : HEAPU32;
              return this['fromWireType'](heap[pointer >> 2]);
          };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }
  
  
  function __embind_register_enum(rawType, name, size, isSigned) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
  
      function ctor() {}
      ctor.values = {};
  
      registerType(rawType, {
        name: name,
        constructor: ctor,
        'fromWireType': function(c) {
          return this.constructor.values[c];
        },
        'toWireType': function(destructors, c) {
          return c.value;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': enumReadValueFromPointer(name, shift, isSigned),
        destructorFunction: null,
      });
      exposePublicSymbol(name, ctor);
    }

  
  
  function __embind_register_enum_value(rawEnumType, name, enumValue) {
      var enumType = requireRegisteredType(rawEnumType, 'enum');
      name = readLatin1String(name);
  
      var Enum = enumType.constructor;
  
      var Value = Object.create(enumType.constructor.prototype, {
        value: {value: enumValue},
        constructor: {value: createNamedFunction(`${enumType.name}_${name}`, function() {})},
      });
      Enum.values[enumValue] = Value;
      Enum[name] = Value;
    }

  function embindRepr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }
  
  
  
  function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
           return value;
        },
        'toWireType': function(destructors, value) {
          // The VM will perform JS to Wasm value conversion, according to the spec:
          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
          return value;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': floatReadValueFromPointer(name, shift),
        destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  
  
  
  
  
  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn, isAsync) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
        throwUnboundTypeError(`Cannot call ${name} due to unbound types`, argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
        var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
        replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn, isAsync), argCount - 1);
        return [];
      });
    }

  
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }
  
  
  function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come
      // out as 'i32 -1'. Always treat those as max u32.
      if (maxRange === -1) {
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = (value) => value;
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = (value) => (value << bitshift) >>> bitshift;
      }
  
      var isUnsignedType = (name.includes('unsigned'));
      var checkAssertions = (value, toTypeName) => {
      }
      var toWireType;
      if (isUnsignedType) {
        toWireType = function(destructors, value) {
          checkAssertions(value, this.name);
          return value >>> 0;
        }
      } else {
        toWireType = function(destructors, value) {
          checkAssertions(value, this.name);
          // The VM will perform JS to Wasm value conversion, according to the spec:
          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
          return value;
        }
      }
      registerType(primitiveType, {
        name: name,
        'fromWireType': fromWireType,
        'toWireType': toWireType,
        'argPackAdvance': 8,
        'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
        destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
        handle = handle >> 2;
        var heap = HEAPU32;
        var size = heap[handle]; // in elements
        var data = heap[handle + 1]; // byte offset into emscripten heap
        return new TA(heap.buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        'fromWireType': decodeMemoryView,
        'argPackAdvance': 8,
        'readValueFromPointer': decodeMemoryView,
      }, {
        ignoreDuplicateRegistrations: true,
      });
    }

  
  
  
  
  function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
      // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
      // undefined and false each don't write out any bytes.
      if (!(maxBytesToWrite > 0))
        return 0;
  
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
        // and https://www.ietf.org/rfc/rfc2279.txt
        // and https://tools.ietf.org/html/rfc3629
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) {
          var u1 = str.charCodeAt(++i);
          u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
        }
        if (u <= 0x7F) {
          if (outIdx >= endIdx) break;
          heap[outIdx++] = u;
        } else if (u <= 0x7FF) {
          if (outIdx + 1 >= endIdx) break;
          heap[outIdx++] = 0xC0 | (u >> 6);
          heap[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0xFFFF) {
          if (outIdx + 2 >= endIdx) break;
          heap[outIdx++] = 0xE0 | (u >> 12);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        } else {
          if (outIdx + 3 >= endIdx) break;
          heap[outIdx++] = 0xF0 | (u >> 18);
          heap[outIdx++] = 0x80 | ((u >> 12) & 63);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        }
      }
      // Null-terminate the pointer to the buffer.
      heap[outIdx] = 0;
      return outIdx - startIdx;
    }
  function stringToUTF8(str, outPtr, maxBytesToWrite) {
      return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
    }
  
  function lengthBytesUTF8(str) {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var c = str.charCodeAt(i); // possibly a lead surrogate
        if (c <= 0x7F) {
          len++;
        } else if (c <= 0x7FF) {
          len += 2;
        } else if (c >= 0xD800 && c <= 0xDFFF) {
          len += 4; ++i;
        } else {
          len += 3;
        }
      }
      return len;
    }
  
  
  
  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
          var length = HEAPU32[((value)>>2)];
          var payload = value + 4;
  
          var str;
          if (stdStringIsUTF8) {
            var decodeStartPtr = payload;
            // Looping here to support possible embedded '0' bytes
            for (var i = 0; i <= length; ++i) {
              var currentBytePtr = payload + i;
              if (i == length || HEAPU8[currentBytePtr] == 0) {
                var maxRead = currentBytePtr - decodeStartPtr;
                var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                if (str === undefined) {
                  str = stringSegment;
                } else {
                  str += String.fromCharCode(0);
                  str += stringSegment;
                }
                decodeStartPtr = currentBytePtr + 1;
              }
            }
          } else {
            var a = new Array(length);
            for (var i = 0; i < length; ++i) {
              a[i] = String.fromCharCode(HEAPU8[payload + i]);
            }
            str = a.join('');
          }
  
          _free(value);
  
          return str;
        },
        'toWireType': function(destructors, value) {
          if (value instanceof ArrayBuffer) {
            value = new Uint8Array(value);
          }
  
          var length;
          var valueIsOfTypeString = (typeof value == 'string');
  
          if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
            throwBindingError('Cannot pass non-string to std::string');
          }
          if (stdStringIsUTF8 && valueIsOfTypeString) {
            length = lengthBytesUTF8(value);
          } else {
            length = value.length;
          }
  
          // assumes 4-byte alignment
          var base = _malloc(4 + length + 1);
          var ptr = base + 4;
          HEAPU32[((base)>>2)] = length;
          if (stdStringIsUTF8 && valueIsOfTypeString) {
            stringToUTF8(value, ptr, length + 1);
          } else {
            if (valueIsOfTypeString) {
              for (var i = 0; i < length; ++i) {
                var charCode = value.charCodeAt(i);
                if (charCode > 255) {
                  _free(ptr);
                  throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                }
                HEAPU8[ptr + i] = charCode;
              }
            } else {
              for (var i = 0; i < length; ++i) {
                HEAPU8[ptr + i] = value[i];
              }
            }
          }
  
          if (destructors !== null) {
            destructors.push(_free, base);
          }
          return base;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  
  
  
  var UTF16Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf-16le') : undefined;;
  function UTF16ToString(ptr, maxBytesToRead) {
      var endPtr = ptr;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on
      // null terminator by itself.
      // Also, use the length info to avoid running tiny strings through
      // TextDecoder, since .subarray() allocates garbage.
      var idx = endPtr >> 1;
      var maxIdx = idx + maxBytesToRead / 2;
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
      endPtr = idx << 1;
  
      if (endPtr - ptr > 32 && UTF16Decoder)
        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  
      // Fallback: decode without UTF16Decoder
      var str = '';
  
      // If maxBytesToRead is not passed explicitly, it will be undefined, and the
      // for-loop's condition will always evaluate to true. The loop is then
      // terminated on the first null char.
      for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
        var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
        if (codeUnit == 0) break;
        // fromCharCode constructs a character from a UTF-16 code unit, so we can
        // pass the UTF16 string right through.
        str += String.fromCharCode(codeUnit);
      }
  
      return str;
    }
  
  function stringToUTF16(str, outPtr, maxBytesToWrite) {
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
      }
      if (maxBytesToWrite < 2) return 0;
      maxBytesToWrite -= 2; // Null terminator.
      var startPtr = outPtr;
      var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
      for (var i = 0; i < numCharsToWrite; ++i) {
        // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        HEAP16[((outPtr)>>1)] = codeUnit;
        outPtr += 2;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP16[((outPtr)>>1)] = 0;
      return outPtr - startPtr;
    }
  
  function lengthBytesUTF16(str) {
      return str.length*2;
    }
  
  function UTF32ToString(ptr, maxBytesToRead) {
      var i = 0;
  
      var str = '';
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(i >= maxBytesToRead / 4)) {
        var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
        if (utf32 == 0) break;
        ++i;
        // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        if (utf32 >= 0x10000) {
          var ch = utf32 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        } else {
          str += String.fromCharCode(utf32);
        }
      }
      return str;
    }
  
  function stringToUTF32(str, outPtr, maxBytesToWrite) {
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
      }
      if (maxBytesToWrite < 4) return 0;
      var startPtr = outPtr;
      var endPtr = startPtr + maxBytesToWrite - 4;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
          var trailSurrogate = str.charCodeAt(++i);
          codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
        }
        HEAP32[((outPtr)>>2)] = codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr) break;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP32[((outPtr)>>2)] = 0;
      return outPtr - startPtr;
    }
  
  function lengthBytesUTF32(str) {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
        len += 4;
      }
  
      return len;
    }
  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
        decodeString = UTF16ToString;
        encodeString = stringToUTF16;
        lengthBytesUTF = lengthBytesUTF16;
        getHeap = () => HEAPU16;
        shift = 1;
      } else if (charSize === 4) {
        decodeString = UTF32ToString;
        encodeString = stringToUTF32;
        lengthBytesUTF = lengthBytesUTF32;
        getHeap = () => HEAPU32;
        shift = 2;
      }
      registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
          // Code mostly taken from _embind_register_std_string fromWireType
          var length = HEAPU32[value >> 2];
          var HEAP = getHeap();
          var str;
  
          var decodeStartPtr = value + 4;
          // Looping here to support possible embedded '0' bytes
          for (var i = 0; i <= length; ++i) {
            var currentBytePtr = value + 4 + i * charSize;
            if (i == length || HEAP[currentBytePtr >> shift] == 0) {
              var maxReadBytes = currentBytePtr - decodeStartPtr;
              var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
              if (str === undefined) {
                str = stringSegment;
              } else {
                str += String.fromCharCode(0);
                str += stringSegment;
              }
              decodeStartPtr = currentBytePtr + charSize;
            }
          }
  
          _free(value);
  
          return str;
        },
        'toWireType': function(destructors, value) {
          if (!(typeof value == 'string')) {
            throwBindingError(`Cannot pass non-string to C++ string type ${name}`);
          }
  
          // assumes 4-byte alignment
          var length = lengthBytesUTF(value);
          var ptr = _malloc(4 + length + charSize);
          HEAPU32[ptr >> 2] = length >> shift;
  
          encodeString(value, ptr + 4, length + charSize);
  
          if (destructors !== null) {
            destructors.push(_free, ptr);
          }
          return ptr;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  
  
  function __embind_register_value_object(
      rawType,
      name,
      constructorSignature,
      rawConstructor,
      destructorSignature,
      rawDestructor
    ) {
      structRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
        rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
        fields: [],
      };
    }

  
  
  function __embind_register_value_object_field(
      structType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      structRegistrations[structType].fields.push({
        fieldName: readLatin1String(fieldName),
        getterReturnType: getterReturnType,
        getter: embind__requireFunction(getterSignature, getter),
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: embind__requireFunction(setterSignature, setter),
        setterContext: setterContext,
      });
    }

  
  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function emval_allocateDestructors(destructorsRef) {
      var destructors = [];
      HEAPU32[((destructorsRef)>>2)] = Emval.toHandle(destructors);
      return destructors;
    }
  
  var emval_symbols = {};
  
  function getStringOrSymbol(address) {
      var symbol = emval_symbols[address];
      if (symbol === undefined) {
        return readLatin1String(address);
      }
      return symbol;
    }
  
  var emval_methodCallers = [];
  
  function __emval_call_method(caller, handle, methodName, destructorsRef, args) {
      caller = emval_methodCallers[caller];
      handle = Emval.toValue(handle);
      methodName = getStringOrSymbol(methodName);
      return caller(handle, methodName, emval_allocateDestructors(destructorsRef), args);
    }

  
  
  
  function __emval_call_void_method(caller, handle, methodName, args) {
      caller = emval_methodCallers[caller];
      handle = Emval.toValue(handle);
      methodName = getStringOrSymbol(methodName);
      caller(handle, methodName, null, args);
    }


  function emval_addMethodCaller(caller) {
      var id = emval_methodCallers.length;
      emval_methodCallers.push(caller);
      return id;
    }
  
  function emval_lookupTypes(argCount, argTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
        a[i] = requireRegisteredType(HEAPU32[(((argTypes)+(i * 4))>>2)],
                                     "parameter " + i);
      }
      return a;
    }
  
  
  var emval_registeredMethods = [];
  function __emval_get_method_caller(argCount, argTypes) {
      var types = emval_lookupTypes(argCount, argTypes);
      var retType = types[0];
      var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";
      var returnId = emval_registeredMethods[signatureName];
      if (returnId !== undefined) {
        return returnId;
      }
  
      var argN = new Array(argCount - 1);
      var invokerFunction = (handle, name, destructors, args) => {
        var offset = 0;
        for (var i = 0; i < argCount - 1; ++i) {
          argN[i] = types[i + 1]['readValueFromPointer'](args + offset);
          offset += types[i + 1]['argPackAdvance'];
        }
        var rv = handle[name].apply(handle, argN);
        for (var i = 0; i < argCount - 1; ++i) {
          if (types[i + 1].deleteObject) {
            types[i + 1].deleteObject(argN[i]);
          }
        }
        if (!retType.isVoid) {
          return retType['toWireType'](destructors, rv);
        }
      };
      returnId = emval_addMethodCaller(invokerFunction);
      emval_registeredMethods[signatureName] = returnId;
      return returnId;
    }

  function __emval_incref(handle) {
      if (handle > 4) {
        emval_handles.get(handle).refcount += 1;
      }
    }

  
  
  function __emval_run_destructors(handle) {
      var destructors = Emval.toValue(handle);
      runDestructors(destructors);
      __emval_decref(handle);
    }

  
  function __emval_take_value(type, arg) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](arg);
      return Emval.toHandle(v);
    }

  function _abort() {
      abort('');
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function getHeapMax() {
      // Stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate
      // full 4GB Wasm memories, the size will wrap back to 0 bytes in Wasm side
      // for any code that deals with heap sizes, which would require special
      // casing all heap size related code to treat 0 specially.
      return 2147483648;
    }
  
  function emscripten_realloc_buffer(size) {
      var b = wasmMemory.buffer;
      var pages = (size - b.byteLength + 65535) >>> 16;
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow(pages); // .grow() takes a delta compared to the previous size
        updateMemoryViews();
        return 1 /*success*/;
      } catch(e) {
      }
      // implicit 0 return to save code size (caller will cast "undefined" into 0
      // anyhow)
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      // With multithreaded builds, races can happen (another thread might increase the size
      // in between), so return a failure, and let the caller retry.
  
      // Memory resize rules:
      // 1.  Always increase heap size to at least the requested size, rounded up
      //     to next page multiple.
      // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap
      //     geometrically: increase the heap size according to
      //     MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%), At most
      //     overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap
      //     linearly: increase the heap size by at least
      //     MEMORY_GROWTH_LINEAR_STEP bytes.
      // 3.  Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by
      //     MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 4.  If we were unable to allocate as much memory, it may be due to
      //     over-eager decision to excessively reserve due to (3) above.
      //     Hence if an allocation fails, cut down on the amount of excess
      //     growth, in an attempt to succeed to perform a smaller allocation.
  
      // A limit is set for how much we can grow. We should not exceed that
      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
      var maxHeapSize = getHeapMax();
      if (requestedSize > maxHeapSize) {
        return false;
      }
  
      var alignUp = (x, multiple) => x + (multiple - x % multiple) % multiple;
  
      // Loop through potential heap size increases. If we attempt a too eager
      // reservation that fails, cut down on the attempted size and reserve a
      // smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
  
        var replacement = emscripten_realloc_buffer(newSize);
        if (replacement) {
  
          return true;
        }
      }
      return false;
    }

  var printCharBuffers = [null,[],[]];
  
  function printChar(stream, curr) {
      var buffer = printCharBuffers[stream];
      if (curr === 0 || curr === 10) {
        (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
        buffer.length = 0;
      } else {
        buffer.push(curr);
      }
    }
  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      if (printCharBuffers[1].length) printChar(1, 10);
      if (printCharBuffers[2].length) printChar(2, 10);
    }
  
  
  var SYSCALLS = {varargs:undefined,get:function() {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      }};
  function _fd_write(fd, iov, iovcnt, pnum) {
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var num = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        for (var j = 0; j < len; j++) {
          printChar(fd, HEAPU8[ptr+j]);
        }
        num += len;
      }
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    }
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
init_emval();;
PureVirtualError = Module['PureVirtualError'] = extendError(Error, 'PureVirtualError');;
embind_init_charCodes();
init_embind();;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_ClassHandle();
init_RegisteredPointer();
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
// include: base64Utils.js
// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob == 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// end include: base64Utils.js
var wasmImports = {
  "__assert_fail": ___assert_fail,
  "_embind_create_inheriting_constructor": __embind_create_inheriting_constructor,
  "_embind_finalize_value_object": __embind_finalize_value_object,
  "_embind_register_bigint": __embind_register_bigint,
  "_embind_register_bool": __embind_register_bool,
  "_embind_register_class": __embind_register_class,
  "_embind_register_class_class_function": __embind_register_class_class_function,
  "_embind_register_class_constructor": __embind_register_class_constructor,
  "_embind_register_class_function": __embind_register_class_function,
  "_embind_register_class_property": __embind_register_class_property,
  "_embind_register_constant": __embind_register_constant,
  "_embind_register_emval": __embind_register_emval,
  "_embind_register_enum": __embind_register_enum,
  "_embind_register_enum_value": __embind_register_enum_value,
  "_embind_register_float": __embind_register_float,
  "_embind_register_function": __embind_register_function,
  "_embind_register_integer": __embind_register_integer,
  "_embind_register_memory_view": __embind_register_memory_view,
  "_embind_register_std_string": __embind_register_std_string,
  "_embind_register_std_wstring": __embind_register_std_wstring,
  "_embind_register_value_object": __embind_register_value_object,
  "_embind_register_value_object_field": __embind_register_value_object_field,
  "_embind_register_void": __embind_register_void,
  "_emval_call_method": __emval_call_method,
  "_emval_call_void_method": __emval_call_void_method,
  "_emval_decref": __emval_decref,
  "_emval_get_method_caller": __emval_get_method_caller,
  "_emval_incref": __emval_incref,
  "_emval_run_destructors": __emval_run_destructors,
  "_emval_take_value": __emval_take_value,
  "abort": _abort,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "fd_write": _fd_write,
  "memory": wasmMemory
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = function() {
  return (___wasm_call_ctors = Module["asm"]["__wasm_call_ctors"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _malloc = function() {
  return (_malloc = Module["asm"]["malloc"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _free = function() {
  return (_free = Module["asm"]["free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var ___getTypeName = function() {
  return (___getTypeName = Module["asm"]["__getTypeName"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var __embind_initialize_bindings = Module["__embind_initialize_bindings"] = function() {
  return (__embind_initialize_bindings = Module["__embind_initialize_bindings"] = Module["asm"]["_embind_initialize_bindings"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var ___errno_location = function() {
  return (___errno_location = Module["asm"]["__errno_location"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackSave = function() {
  return (stackSave = Module["asm"]["stackSave"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackRestore = function() {
  return (stackRestore = Module["asm"]["stackRestore"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackAlloc = function() {
  return (stackAlloc = Module["asm"]["stackAlloc"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = function() {
  return (dynCall_jiji = Module["dynCall_jiji"] = Module["asm"]["dynCall_jiji"]).apply(null, arguments);
};



// include: postamble.js
// === Auto-generated postamble setup entry stuff ===




var calledRun;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function run() {

  if (runDependencies > 0) {
    return;
  }

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    readyPromiseResolve(Module);
    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();


// end include: postamble.js


  return BOX2D.ready
}

);
})();
if (typeof exports === 'object' && typeof module === 'object')
  module.exports = BOX2D;
else if (typeof define === 'function' && define['amd'])
  define([], function() { return BOX2D; });
else if (typeof exports === 'object')
  exports["BOX2D"] = BOX2D;
