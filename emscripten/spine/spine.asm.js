
var spineWasm = (() => {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  
  return (
function(spineWasm) {
  spineWasm = spineWasm || {};



// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof spineWasm != 'undefined' ? spineWasm : {};

// See https://caniuse.com/mdn-javascript_builtins_object_assign

// See https://caniuse.com/mdn-javascript_builtins_bigint64array

// Set up the promise that indicates the Module is initialized
var readyPromiseResolve, readyPromiseReject;
Module['ready'] = new Promise(function(resolve, reject) {
  readyPromiseResolve = resolve;
  readyPromiseReject = reject;
});
["_spineWasmInstanceInit","_spineWasmInstanceDestroy","_queryStoreMemory","_createSkeletonObject","_setSkeletonData","_setAnimation","_clearTrack","_clearTracks","_setToSetupPose","_setSlotsToSetupPose","_setBonesToSetupPose","_setTimeScale","_setSkin","_updateAnimation","_updateRenderData","_getDrawOrderSize","_getSlotNameByOrder","_getBoneMatrix","_setDefaultScale","_setVertexEffect","_createJitterVertexEffect","_updateJitterParameters","_createSwirlVertexEffect","_updateSwirlParameters","_setMix","_setPremultipliedAlpha","_setColor","_setAttachment","_destroyInstance","_initSkeletonData","_retainSkeletonDataByUUID","_recordSkeletonDataUUID","_queryMemory","_freeMemory","_fflush","onRuntimeInitialized"].forEach((prop) => {
  if (!Object.getOwnPropertyDescriptor(Module['ready'], prop)) {
    Object.defineProperty(Module['ready'], prop, {
      get: () => abort('You are getting ' + prop + ' on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'),
      set: () => abort('You are setting ' + prop + ' on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'),
    });
  }
});

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = Object.assign({}, Module);

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = true;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

// Normally we don't log exceptions but instead let them bubble out the top
// level where the embedding environment (e.g. the browser) can handle
// them.
// However under v8 and node we sometimes exit the process direcly in which case
// its up to use us to log the exception before exiting.
// If we fix https://github.com/emscripten-core/emscripten/issues/15080
// this may no longer be needed under node.
function logExceptionOnExit(e) {
  if (e instanceof ExitStatus) return;
  let toLog = e;
  if (e && typeof e == 'object' && e.stack) {
    toLog = [e, e.stack];
  }
  err('exiting due to exception: ' + toLog);
}

if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process == 'object' && typeof require === 'function') || typeof window == 'object' || typeof importScripts == 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      const data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    let data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer == 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data == 'object');
    return data;
  };

  readAsync = function readAsync(f, onload, onerror) {
    setTimeout(() => onload(readBinary(f)), 0);
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit == 'function') {
    quit_ = (status, toThrow) => {
      logExceptionOnExit(toThrow);
      quit(status);
    };
  }

  if (typeof print != 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console == 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr != 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE, this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window == 'object' || typeof importScripts == 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {
// include: web_or_worker_shell_read.js


  read_ = (url) => {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  }

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = (url) => {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = (url, onload, onerror) => {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = () => {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  }

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = (title) => document.title = title;
} else
{
  throw new Error('environment detection error');
}

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;
checkIncomingModuleAPI();

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];legacyModuleProp('arguments', 'arguments_');

if (Module['thisProgram']) thisProgram = Module['thisProgram'];legacyModuleProp('thisProgram', 'thisProgram');

if (Module['quit']) quit_ = Module['quit'];legacyModuleProp('quit', 'quit_');

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] == 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] == 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] == 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] == 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] == 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] == 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] == 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] == 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] == 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
legacyModuleProp('read', 'read_');
legacyModuleProp('readAsync', 'readAsync');
legacyModuleProp('readBinary', 'readBinary');
legacyModuleProp('setWindowTitle', 'setWindowTitle');
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';

assert(!ENVIRONMENT_IS_WORKER, "worker environment detected but not enabled at build time.  Add 'worker' to `-sENVIRONMENT` to enable.");

assert(!ENVIRONMENT_IS_NODE, "node environment detected but not enabled at build time.  Add 'node' to `-sENVIRONMENT` to enable.");

assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");




var STACK_ALIGN = 16;
var POINTER_SIZE = 4;

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': case 'u8': return 1;
    case 'i16': case 'u16': return 2;
    case 'i32': case 'u32': return 4;
    case 'i64': case 'u64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length - 1] === '*') {
        return POINTER_SIZE;
      }
      if (type[0] === 'i') {
        const bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      }
      return 0;
    }
  }
}

// include: runtime_debug.js


function legacyModuleProp(prop, newName) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      get: function() {
        abort('Module.' + prop + ' has been replaced with plain ' + newName + ' (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)');
      }
    });
  }
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort('`Module.' + prop + '` was supplied but `' + prop + '` not included in INCOMING_MODULE_JS_API');
  }
}

// forcing the filesystem exports a few things by default
function isExportedByForceFilesystem(name) {
  return name === 'FS_createPath' ||
         name === 'FS_createDataFile' ||
         name === 'FS_createPreloadedFile' ||
         name === 'FS_unlink' ||
         name === 'addRunDependency' ||
         // The old FS has some functionality that WasmFS lacks.
         name === 'FS_createLazyFile' ||
         name === 'FS_createDevice' ||
         name === 'removeRunDependency';
}

function missingLibrarySymbol(sym) {
  if (typeof globalThis !== 'undefined' && !Object.getOwnPropertyDescriptor(globalThis, sym)) {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get: function() {
        // Can't `abort()` here because it would break code that does runtime
        // checks.  e.g. `if (typeof SDL === 'undefined')`.
        var msg = '`' + sym + '` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line';
        // DEFAULT_LIBRARY_FUNCS_TO_INCLUDE requires the name as it appears in
        // library.js, which means $name for a JS name with no prefix, or name
        // for a JS name like _name.
        var librarySymbol = sym;
        if (!librarySymbol.startsWith('_')) {
          librarySymbol = '$' + sym;
        }
        msg += " (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE=" + librarySymbol + ")";
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        warnOnce(msg);
        return undefined;
      }
    });
  }
}

function unexportedRuntimeSymbol(sym) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get: function() {
        var msg = "'" + sym + "' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        abort(msg);
      }
    });
  }
}

// end include: runtime_debug.js


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];legacyModuleProp('wasmBinary', 'wasmBinary');
var noExitRuntime = Module['noExitRuntime'] || true;legacyModuleProp('noExitRuntime', 'noExitRuntime');

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  /** @constructor */
  Instance: function(module, info) {
    // TODO: use the module somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(info) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
  base64DecodeToExistingUint8Array(bufferView, 25664, "AAABAAIAAgADAAAAAAAAAF4ZAAD2FAAAkwQAAO0UAACsFQAAthUAAJUVAACcFQAAXhkAAE0FAACJBwAABw8AACwFAABBBQAAaQcAAH0HAABgblAAAAAAAAUAAAAAAAAAAAAAAKcBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKEBAACoAQAAGGoAAAAEAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAD/////CgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJhkAAAAAAAAAAAAAAAAAAAAAAAAKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOG4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAKMBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKEBAACgAQAAXG4AAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKBlAAA=");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      function wasm2js_trap() { throw new Error('abort'); }

  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(imports) {
 var env = imports.env;
 var memory = env.memory;
 var buffer = memory.buffer;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var nan = NaN;
 var infinity = Infinity;
 var fimport$0 = env.__assert_fail;
 var fimport$1 = env.consoleInfo;
 var fimport$2 = env.__cxa_allocate_exception;
 var fimport$3 = env.__cxa_throw;
 var fimport$4 = env.jsReadFile;
 var fimport$5 = env.emscripten_memcpy_big;
 var fimport$6 = env.__syscall_openat;
 var fimport$7 = env.__syscall_fcntl64;
 var fimport$8 = env.__syscall_ioctl;
 var wasi_snapshot_preview1 = imports.wasi_snapshot_preview1;
 var fimport$9 = wasi_snapshot_preview1.fd_read;
 var fimport$10 = wasi_snapshot_preview1.fd_write;
 var fimport$11 = wasi_snapshot_preview1.fd_close;
 var fimport$12 = env.emscripten_resize_heap;
 var fimport$13 = env.abort;
 var fimport$14 = wasi_snapshot_preview1.fd_seek;
 var global$0 = 5271136;
 var global$1 = 0;
 var global$2 = 0;
 var global$3 = 0;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  $1852();
  $400();
  $705();
  $716();
  $723();
  $747();
  $774();
  $798();
  $806();
  $823();
  $826();
  $844();
  $873();
  $905();
  $929();
  $965();
  $993();
  $1080();
  $1091();
  $1109();
  $1131();
  $1141();
  $1150();
  $1158();
  $1178();
  $1188();
  $1197();
  $1206();
  $1667();
  $1685();
  $1706();
  $1716();
  $1753();
  $1760();
  $1775();
 }
 
 function $1($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$4 = 0, $13_1 = 0, $16_1 = 0, $51$hi = 0, $25_1 = 0, $48_1 = 0, $49$hi = 0, $50$hi = 0, $52$hi = 0, i64toi32_i32$3 = 0, $26_1 = 0, $29_1 = 0, $30_1 = 0, $32_1 = 0, $51_1 = 0, i64toi32_i32$2 = 0, $28_1 = 0, $45_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[$7_1 >> 2] = 1024 + 8 | 0;
  HEAP32[($7_1 + 4 | 0) >> 2] = 0;
  $13_1 = $1975(16 | 0) | 0;
  i64toi32_i32$0 = 0;
  $48_1 = 0;
  i64toi32_i32$1 = $13_1;
  HEAP32[i64toi32_i32$1 >> 2] = $48_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $48_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $2($13_1 | 0) | 0;
  HEAP32[($7_1 + 4 | 0) >> 2] = $13_1;
  $16_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  i64toi32_i32$0 = 0;
  $49$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $50$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $49$hi;
  i64toi32_i32$0 = $50$hi;
  i64toi32_i32$0 = $49$hi;
  i64toi32_i32$1 = $50$hi;
  i64toi32_i32$1 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, 24 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $51_1 = i64toi32_i32$1;
  $51$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $52$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $51$hi;
  i64toi32_i32$0 = $52$hi;
  i64toi32_i32$0 = $51$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $52$hi;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $26_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $26_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$1 = $51$hi;
  $25_1 = $1977((($26_1 | 0) != (0 | 0) & 1 | 0 ? -1 : $51_1) | 0) | 0;
  label$1 : {
   if (!$16_1) {
    break label$1
   }
   $28_1 = $25_1 + Math_imul($16_1, 24) | 0;
   $29_1 = $25_1;
   label$2 : while (1) {
    $30_1 = $29_1;
    $3($30_1 | 0) | 0;
    $32_1 = $30_1 + 24 | 0;
    $29_1 = $32_1;
    if (!(($32_1 | 0) == ($28_1 | 0) & 1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP32[(HEAP32[($7_1 + 4 | 0) >> 2] | 0) >> 2] = $25_1;
  HEAP32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $45_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $45_1 | 0;
 }
 
 function $2($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $3($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $4($4_1 + 20 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $4($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP8[$4_1 >> 0] = 0;
  HEAP8[($4_1 + 1 | 0) >> 0] = 0;
  HEAP8[($4_1 + 2 | 0) >> 0] = 0;
  HEAP8[($4_1 + 3 | 0) >> 0] = 0;
  return $4_1 | 0;
 }
 
 function $5($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $16_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[$4_1 >> 2] = 1024 + 8 | 0;
  $9_1 = HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  label$1 : {
   if (($9_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $1979($9_1 | 0);
  }
  $16_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$2 : {
   if (($16_1 | 0) == (0 | 0) & 1 | 0) {
    break label$2
   }
   $1978($16_1 | 0);
  }
  $23_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $23_1 | 0;
 }
 
 function $6($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[1 | 0]($4_1) | 0;
  $1978($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $7($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $695($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 1040 + 8 | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $8($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $9($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $9($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $721($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $10($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[2 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $11($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $13_1 = 0, $24_1 = 0, $27_1 = 0, $35_1 = 0, $46_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($1161(FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($5_1) | 0 | 0, 26472 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $13_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      if (($13_1 | 0) == (0 | 0) & 1 | 0) {
       break label$4
      }
      $24_1 = $2022($13_1 | 0, 8584 | 0, 10980 | 0, 0 | 0) | 0;
      break label$3;
     }
     $24_1 = 0;
    }
    $12($24_1 | 0);
    break label$1;
   }
   $27_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$5 : {
    if (!(($1161(FUNCTION_TABLE[HEAP32[((HEAP32[$27_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($27_1) | 0 | 0, 26388 | 0) | 0) & 1 | 0)) {
     break label$5
    }
    $35_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    label$6 : {
     label$7 : {
      if (($35_1 | 0) == (0 | 0) & 1 | 0) {
       break label$7
      }
      $46_1 = $2022($35_1 | 0, 8584 | 0, 10264 | 0, 0 | 0) | 0;
      break label$6;
     }
     $46_1 = 0;
    }
    $13($46_1 | 0);
   }
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $12($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $59_1 = Math_fround(0), $60_1 = Math_fround(0);
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $14((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 20 | 0 | 0) | 0;
  $9_1 = $1975(8 | 0) | 0;
  FUNCTION_TABLE[3 | 0]($9_1, 4, 25664, 6) | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $9_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
     break label$1
    }
    $59_1 = Math_fround(HEAPF32[($15($1171(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[(((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 12 | 0) >> 2] | 0, 24) | 0) + 12 | 0) >> 2] = $59_1;
    $60_1 = Math_fround(HEAPF32[($15($1171(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0, (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
    HEAPF32[(((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 12 | 0) >> 2] | 0, 24) | 0) + 16 | 0) >> 2] = $60_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 2 | 0;
    continue label$2;
   };
  }
  $17((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 20 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, 4 | 0);
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $13($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $68_1 = Math_fround(0), $69_1 = Math_fround(0);
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $14((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 64 | 0 | 0) | 0;
  $9_1 = $1975(8 | 0) | 0;
  FUNCTION_TABLE[3 | 0]($9_1, ($1772(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0) >>> 1 | 0, $18($1054(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0) | 0, $19($1054(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $9_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $1772(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $68_1 = Math_fround(HEAPF32[($15($1053(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[(((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 12 | 0) >> 2] | 0, 24) | 0) + 12 | 0) >> 2] = $68_1;
    $69_1 = Math_fround(HEAPF32[($15($1053(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0, (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
    HEAPF32[(((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 12 | 0) >> 2] | 0, 24) | 0) + 16 | 0) >> 2] = $69_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 2 | 0;
    continue label$2;
   };
  }
  $17((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 64 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, 4 | 0);
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $14($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $15($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $16($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($4_1);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $17($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!((HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!((HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0](HEAP32[($6_1 + 4 | 0) >> 2] | 0);
  }
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $18($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $19($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $20() {
  HEAP32[(0 + 26176 | 0) >> 2] = $1977(1024 | 0) | 0;
  return;
 }
 
 function $21($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $23(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $22($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $24(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $23($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($31($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $32($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $33($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $24($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $37($36(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $25($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $26($3_1 + 16 | 0 | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $21($3_1 + 16 | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) >= (1024 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 1023;
  }
  $1798(HEAP32[(0 + 26176 | 0) >> 2] | 0 | 0, $22($3_1 + 16 | 0 | 0) | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP8[((HEAP32[(0 + 26176 | 0) >> 2] | 0) + (HEAP32[($3_1 + 12 | 0) >> 2] | 0) | 0) >> 0] = 0;
  fimport$1(HEAP32[(0 + 26176 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  $2006($3_1 + 16 | 0 | 0) | 0;
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $26($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $27($5_1 | 0, $4_1 + 16 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
  $2008($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $28(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  $29($5_1 | 0);
  global$0 = $4_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $27($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $41($6_1 | 0) | 0;
  $42($6_1 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $28($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1821(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $29($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $30() {
  var $1_1 = 0;
  $1_1 = HEAP32[(0 + 26176 | 0) >> 2] | 0;
  label$1 : {
   if (($1_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $1979($1_1 | 0);
  }
  return;
 }
 
 function $31($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $16_1 = (((HEAPU8[(($34(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) & 255 | 0) & 128 | 0 | 0) != (0 | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $32($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[(($34(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $33($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = (HEAPU8[(($34(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) & 255 | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $34($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $35(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $35($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $36($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($31($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $38($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $39($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $37($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $38($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($34(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $39($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $40($34(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $40($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $41($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $42($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $43($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $43($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $44($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $44($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $45($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $46(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0) >>> 0 < 3 >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $46($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $47(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $47($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $48($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $15_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  HEAP32[($7_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
  HEAP32[$7_1 >> 2] = $1977(Math_imul(HEAP32[($6_1 + 8 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0) | 0;
  $15_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $16_1 = $15_1 + $15_1 | 0;
  HEAP32[($7_1 + 4 | 0) >> 2] = $1977(($16_1 >>> 0 < $15_1 >>> 0 & 1 | 0 ? -1 : $16_1) | 0) | 0;
  HEAP32[($7_1 + 20 | 0) >> 2] = 0;
  HEAP32[($7_1 + 24 | 0) >> 2] = 0;
  global$0 = $6_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $49($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0;
  $10_1 = global$0 - 32 | 0;
  HEAP32[($10_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($10_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($10_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($10_1 + 8 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 4 | 0) >> 2] = $6_1;
  HEAP32[$10_1 >> 2] = $7_1;
  $11_1 = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
  HEAP32[($11_1 + 20 | 0) >> 2] = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
  HEAP32[$11_1 >> 2] = HEAP32[($10_1 + 20 | 0) >> 2] | 0;
  HEAP32[($11_1 + 4 | 0) >> 2] = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
  HEAP32[($11_1 + 8 | 0) >> 2] = HEAP32[($10_1 + 12 | 0) >> 2] | 0;
  HEAP32[($11_1 + 12 | 0) >> 2] = HEAP32[($10_1 + 8 | 0) >> 2] | 0;
  HEAP32[($11_1 + 16 | 0) >> 2] = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
  HEAP32[($11_1 + 24 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
  return $11_1 | 0;
 }
 
 function $50($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $12_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $12_1 = HEAP32[$4_1 >> 2] | 0;
   label$2 : {
    if (($12_1 | 0) == (0 | 0) & 1 | 0) {
     break label$2
    }
    $1979($12_1 | 0);
   }
   HEAP32[$4_1 >> 2] = 0;
  }
  label$3 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $27_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   label$4 : {
    if (($27_1 | 0) == (0 | 0) & 1 | 0) {
     break label$4
    }
    $1979($27_1 | 0);
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  }
  global$0 = $3_1 + 16 | 0;
  return 0 | 0;
 }
 
 function $51($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $52() {
  $53(26180 | 0) | 0;
  $1797(15 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $53($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $55($3_1 + 8 | 0 | 0) | 0;
  $56($4_1 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $54($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $57(26180 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $55($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $56($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $171($5_1 + 4 | 0 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $172($5_1 + 8 | 0 | 0, $4_1 + 4 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $15_1 = $173($5_1 | 0) | 0;
  HEAP32[($174($5_1 | 0) | 0) >> 2] = $15_1;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $57($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $58($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $58($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $186($4_1 | 0, $185($4_1 | 0) | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $59($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  $60($4_1 + 32 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $60($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $13_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP8[$4_1 >> 0] = 0;
  HEAP8[($4_1 + 1 | 0) >> 0] = 1;
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(1.0);
  HEAP8[($4_1 + 8 | 0) >> 0] = 1;
  $13_1 = Math_fround(1.0);
  $61($4_1 + 12 | 0 | 0, Math_fround($13_1), Math_fround($13_1), Math_fround($13_1), Math_fround($13_1)) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $61($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  HEAPF32[$8_1 >> 2] = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
  HEAPF32[($8_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
  HEAPF32[($8_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
  HEAPF32[($8_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
  return $8_1 | 0;
 }
 
 function $62($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $63($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $63($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $50(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
   $13_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
   label$2 : {
    if (($13_1 | 0) == (0 | 0) & 1 | 0) {
     break label$2
    }
    $51($13_1 | 0) | 0;
    $1978($13_1 | 0);
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $64($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $8_1 = 0, $11_1 = 0, $14_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $8_1 = $1654(180 | 0) | 0;
  $1207($8_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $8_1;
  $11_1 = $1654(24 | 0) | 0;
  $613($11_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $11_1;
  $14_1 = $1654(104 | 0) | 0;
  $551($14_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = $14_1;
  $17_1 = $1654(232 | 0) | 0;
  $1403($17_1 | 0) | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = $17_1;
  $1278(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  $1277(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $65($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $33_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
  $63($4_1 | 0);
  $66($3_1 + 32 | 0 | 0) | 0;
  $67($3_1 + 16 | 0 | 0) | 0;
  $68($4_1 | 0, $3_1 + 32 | 0 | 0);
  $69($4_1 | 0, $3_1 + 32 | 0 | 0);
  $70($4_1 | 0, $3_1 + 32 | 0 | 0, $3_1 + 16 | 0 | 0);
  HEAP32[($3_1 + 12 | 0) >> 2] = $71($4_1 | 0, $3_1 + 16 | 0 | 0) | 0;
  $72($3_1 + 32 | 0 | 0);
  $73($3_1 + 16 | 0 | 0);
  $33_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $74($3_1 + 16 | 0 | 0) | 0;
  $75($3_1 + 32 | 0 | 0) | 0;
  global$0 = $3_1 + 48 | 0;
  return $33_1 | 0;
 }
 
 function $66($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $76($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $77($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $67($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $78($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $79($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $68($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $491_1 = Math_fround(0), $500_1 = Math_fround(0), $509_1 = Math_fround(0), $518_1 = Math_fround(0), $22_1 = 0, $43_1 = 0, $99_1 = 0, $108_1 = 0, $119_1 = 0, $182_1 = 0, $191_1 = 0, $202_1 = 0, $245_1 = 0, $265_1 = 0, $274_1 = 0, $285_1 = 0, $302_1 = 0, $309_1 = 0, $322_1 = 0, $335_1 = 0, $348_1 = 0, $390_1 = 0, $452_1 = 0, $461_1 = Math_fround(0), $464_1 = Math_fround(0), $467_1 = Math_fround(0), $470_1 = Math_fround(0), $473_1 = Math_fround(0), $476_1 = Math_fround(0), $479_1 = Math_fround(0), $482_1 = Math_fround(0);
  $4_1 = global$0 - 240 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 236 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 232 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 236 | 0) >> 2] | 0;
  HEAP32[($4_1 + 228 | 0) >> 2] = 0;
  HEAP32[($4_1 + 224 | 0) >> 2] = 24;
  HEAP32[($4_1 + 220 | 0) >> 2] = -1;
  HEAP32[($4_1 + 216 | 0) >> 2] = -1;
  HEAP8[($4_1 + 215 | 0) >> 0] = 1;
  HEAP32[($4_1 + 208 | 0) >> 2] = $1293(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 204 | 0) >> 2] = $80(HEAP32[($4_1 + 208 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $22_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$22_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($22_1, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  }
  $81($4_1 + 184 | 0 | 0) | 0;
  HEAP32[($4_1 + 180 | 0) >> 2] = 0;
  HEAP32[($4_1 + 176 | 0) >> 2] = HEAP32[($4_1 + 204 | 0) >> 2] | 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($4_1 + 180 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 176 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAPF32[($4_1 + 184 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 44 | 0) >> 2]);
    HEAPF32[($4_1 + 188 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2]);
    HEAPF32[($4_1 + 192 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 52 | 0) >> 2]);
    HEAPF32[($4_1 + 196 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]);
    HEAP32[($4_1 + 172 | 0) >> 2] = HEAP32[($82(HEAP32[($4_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 180 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $43_1 = $1634(HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0) | 0;
    label$4 : {
     label$5 : {
      if ((FUNCTION_TABLE[HEAP32[((HEAP32[$43_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($43_1) | 0) & 1 | 0) {
       break label$5
      }
      break label$4;
     }
     label$6 : {
      if (!((HEAP32[($4_1 + 220 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
       break label$6
      }
      if (!((HEAP32[($4_1 + 220 | 0) >> 2] | 0 | 0) == ($1642($1633(HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP8[($4_1 + 215 | 0) >> 0] = 1;
     }
     label$7 : {
      if ((HEAPU8[($4_1 + 215 | 0) >> 0] | 0) & 1 | 0) {
       break label$7
      }
      $1414(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0);
      break label$4;
     }
     label$8 : {
      if (!((HEAP32[($4_1 + 216 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
       break label$8
      }
      if (!((HEAP32[($4_1 + 216 | 0) >> 2] | 0 | 0) == ($1642($1633(HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) & 1 | 0)) {
       break label$8
      }
      HEAP8[($4_1 + 215 | 0) >> 0] = 0;
     }
     label$9 : {
      if (($1637(HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$9
      }
      $1414(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0);
      break label$4;
     }
     $99_1 = $1637(HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0) | 0;
     label$10 : {
      label$11 : {
       if (!(($1161(FUNCTION_TABLE[HEAP32[((HEAP32[$99_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($99_1) | 0 | 0, 26472 | 0) | 0) & 1 | 0)) {
        break label$11
       }
       $108_1 = $1637(HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0) | 0;
       label$12 : {
        label$13 : {
         if (($108_1 | 0) == (0 | 0) & 1 | 0) {
          break label$13
         }
         $119_1 = $2022($108_1 | 0, 8584 | 0, 10980 | 0, 0 | 0) | 0;
         break label$12;
        }
        $119_1 = 0;
       }
       HEAP32[($4_1 + 168 | 0) >> 2] = $119_1;
       HEAP32[($4_1 + 164 | 0) >> 2] = $14((HEAP32[($4_1 + 168 | 0) >> 2] | 0) + 20 | 0 | 0) | 0;
       HEAP32[($4_1 + 160 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 164 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       HEAP32[($4_1 + 156 | 0) >> 2] = 24;
       HEAP32[($4_1 + 152 | 0) >> 2] = Math_imul(HEAP32[($4_1 + 160 | 0) >> 2] | 0, HEAP32[($4_1 + 156 | 0) >> 2] | 0);
       HEAP32[($4_1 + 148 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 164 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
       HEAP32[($4_1 + 144 | 0) >> 2] = (HEAP32[($4_1 + 148 | 0) >> 2] | 0) << 1 | 0;
       $49($4_1 + 112 | 0 | 0, HEAP32[($4_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[((HEAP32[($4_1 + 164 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[((HEAP32[($4_1 + 164 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 224 | 0) >> 2] | 0 | 0, $1651($1633(HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0;
       $1170(HEAP32[($4_1 + 168 | 0) >> 2] | 0 | 0, $1634(HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[($4_1 + 156 | 0) >> 2] | 0) >>> 2 | 0 | 0);
       $83(HEAP32[($4_1 + 232 | 0) >> 2] | 0 | 0, $4_1 + 112 | 0 | 0);
       HEAP32[($4_1 + 228 | 0) >> 2] = $4_1 + 112 | 0;
       $461_1 = Math_fround(HEAPF32[(($1172(HEAP32[($4_1 + 168 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2]);
       HEAPF32[($4_1 + 184 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 184 | 0) >> 2]) * $461_1);
       $464_1 = Math_fround(HEAPF32[(($1172(HEAP32[($4_1 + 168 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2]);
       HEAPF32[($4_1 + 188 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 188 | 0) >> 2]) * $464_1);
       $467_1 = Math_fround(HEAPF32[(($1172(HEAP32[($4_1 + 168 | 0) >> 2] | 0 | 0) | 0) + 12 | 0) >> 2]);
       HEAPF32[($4_1 + 192 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 192 | 0) >> 2]) * $467_1);
       $470_1 = Math_fround(HEAPF32[(($1172(HEAP32[($4_1 + 168 | 0) >> 2] | 0 | 0) | 0) + 16 | 0) >> 2]);
       HEAPF32[($4_1 + 196 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 196 | 0) >> 2]) * $470_1);
       $51($4_1 + 112 | 0 | 0) | 0;
       break label$10;
      }
      $182_1 = $1637(HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0) | 0;
      label$14 : {
       label$15 : {
        if (!(($1161(FUNCTION_TABLE[HEAP32[((HEAP32[$182_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($182_1) | 0 | 0, 26388 | 0) | 0) & 1 | 0)) {
         break label$15
        }
        $191_1 = $1637(HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0) | 0;
        label$16 : {
         label$17 : {
          if (($191_1 | 0) == (0 | 0) & 1 | 0) {
           break label$17
          }
          $202_1 = $2022($191_1 | 0, 8584 | 0, 10264 | 0, 0 | 0) | 0;
          break label$16;
         }
         $202_1 = 0;
        }
        HEAP32[($4_1 + 108 | 0) >> 2] = $202_1;
        HEAP32[($4_1 + 104 | 0) >> 2] = $14((HEAP32[($4_1 + 108 | 0) >> 2] | 0) + 64 | 0 | 0) | 0;
        HEAP32[($4_1 + 100 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 104 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
        HEAP32[($4_1 + 96 | 0) >> 2] = Math_imul(HEAP32[($4_1 + 100 | 0) >> 2] | 0, HEAP32[($4_1 + 224 | 0) >> 2] | 0);
        HEAP32[($4_1 + 92 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 104 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
        HEAP32[($4_1 + 88 | 0) >> 2] = (HEAP32[($4_1 + 92 | 0) >> 2] | 0) << 1 | 0;
        $49($4_1 + 56 | 0 | 0, HEAP32[($4_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[((HEAP32[($4_1 + 104 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[((HEAP32[($4_1 + 104 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 224 | 0) >> 2] | 0 | 0, $1651($1633(HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0;
        $245_1 = 0;
        $1769(HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0, $245_1 | 0, $1772(HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, $245_1 | 0, (HEAP32[($4_1 + 224 | 0) >> 2] | 0) >>> 2 | 0 | 0);
        $83(HEAP32[($4_1 + 232 | 0) >> 2] | 0 | 0, $4_1 + 56 | 0 | 0);
        HEAP32[($4_1 + 228 | 0) >> 2] = $4_1 + 56 | 0;
        $473_1 = Math_fround(HEAPF32[(($1063(HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2]);
        HEAPF32[($4_1 + 184 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 184 | 0) >> 2]) * $473_1);
        $476_1 = Math_fround(HEAPF32[(($1063(HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2]);
        HEAPF32[($4_1 + 188 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 188 | 0) >> 2]) * $476_1);
        $479_1 = Math_fround(HEAPF32[(($1063(HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0) | 0) + 12 | 0) >> 2]);
        HEAPF32[($4_1 + 192 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 192 | 0) >> 2]) * $479_1);
        $482_1 = Math_fround(HEAPF32[(($1063(HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0) | 0) + 16 | 0) >> 2]);
        HEAPF32[($4_1 + 196 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 196 | 0) >> 2]) * $482_1);
        $51($4_1 + 56 | 0 | 0) | 0;
        break label$14;
       }
       $265_1 = $1637(HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0) | 0;
       label$18 : {
        if (!(($1161(FUNCTION_TABLE[HEAP32[((HEAP32[$265_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($265_1) | 0 | 0, 26272 | 0) | 0) & 1 | 0)) {
         break label$18
        }
        $274_1 = $1637(HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0) | 0;
        label$19 : {
         label$20 : {
          if (($274_1 | 0) == (0 | 0) & 1 | 0) {
           break label$20
          }
          $285_1 = $2022($274_1 | 0, 8584 | 0, 9048 | 0, 0 | 0) | 0;
          break label$19;
         }
         $285_1 = 0;
        }
        HEAP32[($4_1 + 52 | 0) >> 2] = $285_1;
        $1410(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) | 0;
        break label$4;
       }
       $1414(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0);
       break label$4;
      }
     }
     $491_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(($1294(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) + 16 | 0) >> 2]) * Math_fround(255.0)) * Math_fround(HEAPF32[(($1635(HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0) | 0) + 16 | 0) >> 2])) * Math_fround(HEAPF32[($4_1 + 196 | 0) >> 2]));
     label$21 : {
      label$22 : {
       if (!($491_1 < Math_fround(4294967296.0) & $491_1 >= Math_fround(0.0) | 0)) {
        break label$22
       }
       $302_1 = ~~$491_1 >>> 0;
       break label$21;
      }
      $302_1 = 0;
     }
     HEAP32[($4_1 + 48 | 0) >> 2] = $302_1;
     label$23 : {
      label$24 : {
       if (!((HEAPU8[($5_1 + 40 | 0) >> 0] | 0) & 1 | 0)) {
        break label$24
       }
       $309_1 = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
       break label$23;
      }
      $309_1 = 255;
     }
     HEAP32[($4_1 + 44 | 0) >> 2] = $309_1;
     $500_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(($1294(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[(($1635(HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2])) * Math_fround(HEAPF32[($4_1 + 184 | 0) >> 2])) * Math_fround((HEAP32[($4_1 + 44 | 0) >> 2] | 0) >>> 0));
     label$25 : {
      label$26 : {
       if (!($500_1 < Math_fround(4294967296.0) & $500_1 >= Math_fround(0.0) | 0)) {
        break label$26
       }
       $322_1 = ~~$500_1 >>> 0;
       break label$25;
      }
      $322_1 = 0;
     }
     HEAP32[($4_1 + 40 | 0) >> 2] = $322_1;
     $509_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(($1294(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2]) * Math_fround(HEAPF32[(($1635(HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2])) * Math_fround(HEAPF32[($4_1 + 188 | 0) >> 2])) * Math_fround((HEAP32[($4_1 + 44 | 0) >> 2] | 0) >>> 0));
     label$27 : {
      label$28 : {
       if (!($509_1 < Math_fround(4294967296.0) & $509_1 >= Math_fround(0.0) | 0)) {
        break label$28
       }
       $335_1 = ~~$509_1 >>> 0;
       break label$27;
      }
      $335_1 = 0;
     }
     HEAP32[($4_1 + 36 | 0) >> 2] = $335_1;
     $518_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(($1294(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) + 12 | 0) >> 2]) * Math_fround(HEAPF32[(($1635(HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0) | 0) + 12 | 0) >> 2])) * Math_fround(HEAPF32[($4_1 + 192 | 0) >> 2])) * Math_fround((HEAP32[($4_1 + 44 | 0) >> 2] | 0) >>> 0));
     label$29 : {
      label$30 : {
       if (!($518_1 < Math_fround(4294967296.0) & $518_1 >= Math_fround(0.0) | 0)) {
        break label$30
       }
       $348_1 = ~~$518_1 >>> 0;
       break label$29;
      }
      $348_1 = 0;
     }
     HEAP32[($4_1 + 32 | 0) >> 2] = $348_1;
     HEAP32[($4_1 + 28 | 0) >> 2] = ((((HEAP32[($4_1 + 48 | 0) >> 2] | 0) << 24 | 0) + ((HEAP32[($4_1 + 32 | 0) >> 2] | 0) << 16 | 0) | 0) + ((HEAP32[($4_1 + 36 | 0) >> 2] | 0) << 8 | 0) | 0) + (HEAP32[($4_1 + 40 | 0) >> 2] | 0) | 0;
     label$31 : {
      label$32 : {
       if (!(($1416(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
        break label$32
       }
       break label$31;
      }
      HEAP32[($4_1 + 24 | 0) >> 2] = 24;
      HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 228 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
      HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 228 | 0) >> 2] | 0) >> 2] | 0;
      HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 228 | 0) >> 2] | 0) >> 2] | 0;
      label$33 : {
       label$34 : {
        if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$34
        }
        HEAP32[($4_1 + 8 | 0) >> 2] = 0;
        label$35 : {
         label$36 : while (1) {
          if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$35
          }
          $390_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
          FUNCTION_TABLE[HEAP32[((HEAP32[$390_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($390_1, (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 24) | 0, ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 24) | 0) + 4 | 0);
          HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 6) + 5 | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
          HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0;
          continue label$36;
         };
        }
        break label$33;
       }
       HEAP32[($4_1 + 4 | 0) >> 2] = 0;
       label$37 : {
        label$38 : while (1) {
         if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$37
         }
         HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 6) + 5 | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
         HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
         continue label$38;
        };
       }
      }
     }
     $1414(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($4_1 + 180 | 0) >> 2] = (HEAP32[($4_1 + 180 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  $1415(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  label$39 : {
   if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$39
   }
   $452_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$452_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($452_1);
  }
  global$0 = $4_1 + 240 | 0;
  return;
 }
 
 function $69($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $26_1 = 0, $90_1 = 0, $154_1 = 0, $27_1 = 0, $33_1 = 0, $38_1 = 0, $61_1 = 0, $62_1 = 0, $91_1 = 0, $97_1 = 0, $102_1 = 0, $125_1 = 0, $126_1 = 0, $155_1 = 0, $161_1 = 0, $166_1 = 0, $324_1 = 0, $337_1 = 0, $341_1 = 0, $506_1 = 0, $519_1 = 0, $523_1 = 0, $677_1 = 0, $690_1 = 0, $694_1 = 0;
  $4_1 = global$0 - 176 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 172 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 168 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 172 | 0) >> 2] | 0;
  HEAP32[($4_1 + 164 | 0) >> 2] = 24;
  HEAP32[($4_1 + 160 | 0) >> 2] = $84(HEAP32[($4_1 + 168 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAPU8[($5_1 + 32 | 0) >> 0] | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAPU8[($5_1 + 33 | 0) >> 0] | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF32[($4_1 + 156 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
    HEAPF32[($4_1 + 152 | 0) >> 2] = Math_fround(0 | 0);
    HEAP32[($4_1 + 148 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($4_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      $26_1 = $85(HEAP32[($4_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 148 | 0) >> 2] | 0 | 0) | 0;
      $27_1 = 24;
      HEAP32[(($4_1 + 120 | 0) + $27_1 | 0) >> 2] = HEAP32[($26_1 + $27_1 | 0) >> 2] | 0;
      $33_1 = 16;
      i64toi32_i32$2 = $26_1 + $33_1 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $324_1 = i64toi32_i32$0;
      i64toi32_i32$0 = ($4_1 + 120 | 0) + $33_1 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $324_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $38_1 = 8;
      i64toi32_i32$2 = $26_1 + $38_1 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $337_1 = i64toi32_i32$1;
      i64toi32_i32$1 = ($4_1 + 120 | 0) + $38_1 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $337_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $26_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $341_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $4_1;
      HEAP32[($4_1 + 120 | 0) >> 2] = $341_1;
      HEAP32[($4_1 + 124 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($4_1 + 116 | 0) >> 2] = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
      HEAP32[($4_1 + 112 | 0) >> 2] = 0;
      label$5 : {
       label$6 : while (1) {
        if (!((HEAP32[($4_1 + 112 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 128 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
         break label$5
        }
        HEAP32[($4_1 + 108 | 0) >> 2] = (HEAP32[($4_1 + 116 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($4_1 + 112 | 0) >> 2] | 0, HEAP32[($4_1 + 164 | 0) >> 2] | 0) >>> 2 | 0) << 2 | 0) | 0;
        $61_1 = HEAP32[($4_1 + 108 | 0) >> 2] | 0;
        HEAPF32[$61_1 >> 2] = Math_fround(Math_fround(HEAPF32[$61_1 >> 2]) * Math_fround(HEAPF32[($4_1 + 156 | 0) >> 2]));
        $62_1 = HEAP32[($4_1 + 108 | 0) >> 2] | 0;
        HEAPF32[($62_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($62_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 156 | 0) >> 2]));
        HEAPF32[((HEAP32[($4_1 + 108 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 152 | 0) >> 2]);
        HEAP32[($4_1 + 112 | 0) >> 2] = (HEAP32[($4_1 + 112 | 0) >> 2] | 0) + 1 | 0;
        continue label$6;
       };
      }
      HEAPF32[($4_1 + 152 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 152 | 0) >> 2]) + Math_fround(.009999999776482582));
      $51($4_1 + 120 | 0 | 0) | 0;
      HEAP32[($4_1 + 148 | 0) >> 2] = (HEAP32[($4_1 + 148 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    break label$1;
   }
   label$7 : {
    label$8 : {
     if (!((HEAPU8[($5_1 + 32 | 0) >> 0] | 0) & 1 | 0)) {
      break label$8
     }
     if ((HEAPU8[($5_1 + 33 | 0) >> 0] | 0) & 1 | 0) {
      break label$8
     }
     HEAPF32[($4_1 + 104 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
     HEAPF32[($4_1 + 100 | 0) >> 2] = Math_fround(0 | 0);
     HEAP32[($4_1 + 96 | 0) >> 2] = 0;
     label$9 : {
      label$10 : while (1) {
       if (!((HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
       }
       $90_1 = $85(HEAP32[($4_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0) | 0;
       $91_1 = 24;
       HEAP32[(($4_1 + 64 | 0) + $91_1 | 0) >> 2] = HEAP32[($90_1 + $91_1 | 0) >> 2] | 0;
       $97_1 = 16;
       i64toi32_i32$2 = $90_1 + $97_1 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $506_1 = i64toi32_i32$1;
       i64toi32_i32$1 = ($4_1 + 64 | 0) + $97_1 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $506_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $102_1 = 8;
       i64toi32_i32$2 = $90_1 + $102_1 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $519_1 = i64toi32_i32$0;
       i64toi32_i32$0 = ($4_1 + 64 | 0) + $102_1 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $519_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $90_1;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $523_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $4_1;
       HEAP32[($4_1 + 64 | 0) >> 2] = $523_1;
       HEAP32[($4_1 + 68 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
       HEAP32[($4_1 + 56 | 0) >> 2] = 0;
       label$11 : {
        label$12 : while (1) {
         if (!((HEAP32[($4_1 + 56 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 72 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
          break label$11
         }
         HEAP32[($4_1 + 52 | 0) >> 2] = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($4_1 + 56 | 0) >> 2] | 0, HEAP32[($4_1 + 164 | 0) >> 2] | 0) >>> 2 | 0) << 2 | 0) | 0;
         $125_1 = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
         HEAPF32[$125_1 >> 2] = Math_fround(Math_fround(HEAPF32[$125_1 >> 2]) * Math_fround(HEAPF32[($4_1 + 104 | 0) >> 2]));
         $126_1 = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
         HEAPF32[($126_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($126_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 104 | 0) >> 2]));
         HEAPF32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 100 | 0) >> 2]);
         HEAP32[($4_1 + 56 | 0) >> 2] = (HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 1 | 0;
         continue label$12;
        };
       }
       $51($4_1 + 64 | 0 | 0) | 0;
       HEAP32[($4_1 + 96 | 0) >> 2] = (HEAP32[($4_1 + 96 | 0) >> 2] | 0) + 1 | 0;
       continue label$10;
      };
     }
     break label$7;
    }
    label$13 : {
     if ((HEAPU8[($5_1 + 32 | 0) >> 0] | 0) & 1 | 0) {
      break label$13
     }
     if (!((HEAPU8[($5_1 + 33 | 0) >> 0] | 0) & 1 | 0)) {
      break label$13
     }
     HEAPF32[($4_1 + 48 | 0) >> 2] = Math_fround(0 | 0);
     HEAP32[($4_1 + 44 | 0) >> 2] = 0;
     label$14 : {
      label$15 : while (1) {
       if (!((HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$14
       }
       $154_1 = $85(HEAP32[($4_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) | 0;
       $155_1 = 24;
       HEAP32[(($4_1 + 16 | 0) + $155_1 | 0) >> 2] = HEAP32[($154_1 + $155_1 | 0) >> 2] | 0;
       $161_1 = 16;
       i64toi32_i32$2 = $154_1 + $161_1 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $677_1 = i64toi32_i32$0;
       i64toi32_i32$0 = ($4_1 + 16 | 0) + $161_1 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $677_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $166_1 = 8;
       i64toi32_i32$2 = $154_1 + $166_1 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $690_1 = i64toi32_i32$1;
       i64toi32_i32$1 = ($4_1 + 16 | 0) + $166_1 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $690_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $154_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $694_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $4_1;
       HEAP32[($4_1 + 16 | 0) >> 2] = $694_1;
       HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
       HEAP32[($4_1 + 8 | 0) >> 2] = 0;
       label$16 : {
        label$17 : while (1) {
         if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
          break label$16
         }
         HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, HEAP32[($4_1 + 164 | 0) >> 2] | 0) >>> 2 | 0) << 2 | 0) | 0;
         HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2]);
         HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0;
         continue label$17;
        };
       }
       HEAPF32[($4_1 + 48 | 0) >> 2] = Math_fround(0 | 0);
       $51($4_1 + 16 | 0 | 0) | 0;
       HEAP32[($4_1 + 44 | 0) >> 2] = (HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 1 | 0;
       continue label$15;
      };
     }
    }
   }
  }
  global$0 = $4_1 + 176 | 0;
  return;
 }
 
 function $70($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $43_1 = 0, $6_1 = 0, $29_1 = 0, $35_1 = 0, $86_1 = 0, $120_1 = 0, $159_1 = 0, $165_1 = 0, $180_1 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 84 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 92 | 0) >> 2] | 0;
  HEAP32[($5_1 + 80 | 0) >> 2] = $84(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 76 | 0) >> 2] = 0;
   HEAP32[($5_1 + 72 | 0) >> 2] = 0;
   HEAP32[($5_1 + 68 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     $29_1 = HEAP32[(($85(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2] | 0;
     HEAP32[($5_1 + 76 | 0) >> 2] = (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + $29_1 | 0;
     $35_1 = HEAP32[(($85(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) | 0) + 12 | 0) >> 2] | 0;
     HEAP32[($5_1 + 72 | 0) >> 2] = (HEAP32[($5_1 + 72 | 0) >> 2] | 0) + $35_1 | 0;
     HEAP32[($5_1 + 68 | 0) >> 2] = (HEAP32[($5_1 + 68 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($5_1 + 64 | 0) >> 2] = 24;
   $43_1 = $1975(28 | 0) | 0;
   $48($43_1 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($5_1 + 60 | 0) >> 2] = $43_1;
   HEAP32[($5_1 + 76 | 0) >> 2] = 0;
   HEAP32[($5_1 + 72 | 0) >> 2] = 0;
   HEAP32[($5_1 + 56 | 0) >> 2] = HEAP32[(($85(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0, 0 | 0) | 0) + 24 | 0) >> 2] | 0;
   HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
   HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 72 | 0) >> 2] | 0;
   $86(HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0, $5_1 + 40 | 0 | 0);
   HEAP32[($5_1 + 36 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     label$7 : {
      if (!((HEAP32[(($85(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) | 0) + 24 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[($5_1 + 32 | 0) >> 2] = ($87(HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
      $86_1 = (HEAP32[($5_1 + 72 | 0) >> 2] | 0) - (HEAP32[(($88(HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] | 0) | 0;
      HEAP32[(($88(HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2] = $86_1;
      HEAP32[($5_1 + 56 | 0) >> 2] = HEAP32[(($85(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) | 0) + 24 | 0) >> 2] | 0;
      HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
      HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 72 | 0) >> 2] | 0;
      $86(HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0, $5_1 + 40 | 0 | 0);
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 72 | 0) >> 2] | 0) << 1 | 0) | 0;
     HEAP32[($5_1 + 24 | 0) >> 2] = 0;
     label$8 : {
      label$9 : while (1) {
       if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 < (HEAP32[(($85(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) | 0) + 12 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$8
       }
       $120_1 = HEAP32[(($85(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] | 0;
       HEAP16[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = ((HEAPU16[($120_1 + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & 65535 | 0) + (HEAP32[($5_1 + 76 | 0) >> 2] | 0) | 0;
       HEAP32[($5_1 + 24 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 1 | 0;
       continue label$9;
      };
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 60 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 76 | 0) >> 2] | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0) | 0;
     HEAP32[($5_1 + 16 | 0) >> 2] = Math_imul(HEAP32[(($85(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0);
     $1798(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($85(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
     $159_1 = HEAP32[(($85(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2] | 0;
     HEAP32[($5_1 + 76 | 0) >> 2] = (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + $159_1 | 0;
     $165_1 = HEAP32[(($85(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) | 0) + 12 | 0) >> 2] | 0;
     HEAP32[($5_1 + 72 | 0) >> 2] = (HEAP32[($5_1 + 72 | 0) >> 2] | 0) + $165_1 | 0;
     HEAP32[($5_1 + 36 | 0) >> 2] = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = ($87(HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
   $180_1 = (HEAP32[($5_1 + 72 | 0) >> 2] | 0) - (HEAP32[(($88(HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] | 0) | 0;
   HEAP32[(($88(HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2] = $180_1;
   HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 96 | 0;
  return;
 }
 
 function $71($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $10_1 = 0, $15_1 = 0, $20_1 = 0, $25_1 = 0, $31_1 = 0, $46_1 = 0, $53_1 = 0, $60_1 = 0, $9_1 = 0, $14_1 = 0, $19_1 = 0, $24_1 = 0, $30_1 = 0, $45_1 = 0, $52_1 = 0, $59_1 = 0, $66_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $403() | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  $9_1 = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  $10_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $10_1 + 4 | 0;
  HEAP32[$10_1 >> 2] = $9_1;
  $14_1 = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
  $15_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $15_1 + 4 | 0;
  HEAP32[$15_1 >> 2] = $14_1;
  $19_1 = HEAP32[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
  $20_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $20_1 + 4 | 0;
  HEAP32[$20_1 >> 2] = $19_1;
  $24_1 = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $25_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $25_1 + 4 | 0;
  HEAP32[$25_1 >> 2] = $24_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $87(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $30_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $31_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $31_1 + 4 | 0;
  HEAP32[$31_1 >> 2] = $30_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $45_1 = HEAP32[($88(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $46_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    HEAP32[($4_1 + 16 | 0) >> 2] = $46_1 + 4 | 0;
    HEAP32[$46_1 >> 2] = $45_1;
    $52_1 = HEAP32[(($88(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] | 0;
    $53_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    HEAP32[($4_1 + 16 | 0) >> 2] = $53_1 + 4 | 0;
    HEAP32[$53_1 >> 2] = $52_1;
    $59_1 = HEAP32[(($88(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2] | 0;
    $60_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    HEAP32[($4_1 + 16 | 0) >> 2] = $60_1 + 4 | 0;
    HEAP32[$60_1 >> 2] = $59_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $66_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $66_1 | 0;
 }
 
 function $72($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $84($4_1 | 0) | 0;
  $89($4_1 | 0);
  $90($4_1 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  $91($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $73($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $87($4_1 | 0) | 0;
  $92($4_1 | 0);
  $93($4_1 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  $94($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $74($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $95($4_1 | 0);
  label$1 : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $92($4_1 | 0);
   $98($96($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $97($4_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $75($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $99($4_1 | 0);
  label$1 : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $89($4_1 | 0);
   $102($100($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $101($4_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $76($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $201($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $202($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $77($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $78($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $217($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $218($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $79($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $80($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $81($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAPF32[$4_1 >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(0 | 0);
  return $4_1 | 0;
 }
 
 function $82($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $83($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($103($5_1 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $104($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   $105($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $84($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (28 | 0) | 0 | 0;
 }
 
 function $85($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 28) | 0 | 0;
 }
 
 function $86($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($106($5_1 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $107($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   $108($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $87($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $88($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 12) | 0 | 0;
 }
 
 function $89($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $207($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $90($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $206($5_1 | 0, $205($5_1 | 0) | 0 | 0, ($205($5_1 | 0) | 0) + Math_imul($101($5_1 | 0) | 0, 28) | 0 | 0, ($205($5_1 | 0) | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 28) | 0 | 0, ($205($5_1 | 0) | 0) + Math_imul($84($5_1 | 0) | 0, 28) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $91($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $92($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $223($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $93($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $222($5_1 | 0, $221($5_1 | 0) | 0 | 0, ($221($5_1 | 0) | 0) + Math_imul($97($5_1 | 0) | 0, 12) | 0 | 0, ($221($5_1 | 0) | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 12) | 0 | 0, ($221($5_1 | 0) | 0) + Math_imul($87($5_1 | 0) | 0, 12) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $94($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $95($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $222($4_1 | 0, $221($4_1 | 0) | 0 | 0, ($221($4_1 | 0) | 0) + Math_imul($97($4_1 | 0) | 0, 12) | 0 | 0, ($221($4_1 | 0) | 0) + Math_imul($87($4_1 | 0) | 0, 12) | 0 | 0, ($221($4_1 | 0) | 0) + Math_imul($97($4_1 | 0) | 0, 12) | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $96($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $225((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $97($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($226($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (12 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $98($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $224(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $99($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $206($4_1 | 0, $205($4_1 | 0) | 0 | 0, ($205($4_1 | 0) | 0) + Math_imul($101($4_1 | 0) | 0, 28) | 0 | 0, ($205($4_1 | 0) | 0) + Math_imul($84($4_1 | 0) | 0, 28) | 0 | 0, ($205($4_1 | 0) | 0) + Math_imul($101($4_1 | 0) | 0, 28) | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $100($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $209((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $101($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($210($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (28 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $102($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $208(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $103($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $233((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $104($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $234($4_1 + 8 | 0 | 0, $5_1 | 0, 1 | 0) | 0;
  $235($100($5_1 | 0) | 0 | 0, $211(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 28 | 0;
  $236($4_1 + 8 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $105($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $100($5_1 | 0) | 0;
  $238($4_1 | 0, $237($5_1 | 0, ($84($5_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $84($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $235(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, $211(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 28 | 0;
  $239($5_1 | 0, $4_1 | 0);
  $240($4_1 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $106($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $282((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $107($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $283($4_1 + 8 | 0 | 0, $5_1 | 0, 1 | 0) | 0;
  $284($96($5_1 | 0) | 0 | 0, $227(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0;
  $285($4_1 + 8 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $108($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $96($5_1 | 0) | 0;
  $287($4_1 | 0, $286($5_1 | 0, ($87($5_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $87($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $284(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, $227(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0;
  $288($5_1 | 0, $4_1 | 0);
  $289($4_1 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $109($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $20_1 = 0, $14_1 = 0, $38_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   $14_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   label$3 : {
    label$4 : {
     if (!(($110(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
      break label$4
     }
     $20_1 = 0;
     break label$3;
    }
    $20_1 = $22(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   }
   $111($4_1 + 8 | 0 | 0, $20_1 | 0, 0 & 1 | 0 | 0) | 0;
   $1285($14_1 | 0, $4_1 + 8 | 0 | 0);
   $112($4_1 + 8 | 0 | 0) | 0;
   $1280(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
   HEAP32[($4_1 + 28 | 0) >> 2] = 1;
  }
  $38_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $38_1 | 0;
 }
 
 function $110($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $11_1 = ($23(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == (0 | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $111($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $37_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 3 | 0) >> 0] = $2_1;
  $7_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $7_1;
  $113($7_1 | 0) | 0;
  HEAP32[$7_1 >> 2] = 6496 + 8 | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($7_1 + 4 | 0) >> 2] = 0;
    HEAP32[($7_1 + 8 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($7_1 + 4 | 0) >> 2] = $1821(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if ((HEAPU8[($5_1 + 3 | 0) >> 0] | 0) & 1 | 0) {
      break label$4
     }
     HEAP32[($7_1 + 8 | 0) >> 2] = $114((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0 | 0, 4464 | 0, 57 | 0) | 0;
     $1798(HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
     break label$3;
    }
    HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   }
  }
  $37_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $37_1 | 0;
 }
 
 function $112($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $18_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[$4_1 >> 2] = 6496 + 8 | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $115(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4464 | 0, 201 | 0);
  }
  $1659($4_1 | 0) | 0;
  $18_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $18_1 | 0;
 }
 
 function $113($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 13184 + 8 | 0;
  return $4_1 | 0;
 }
 
 function $114($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $14_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  $14_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($6_1, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $115($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $116($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $20_1 = 0, $32_1 = 0, $61_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $2_1;
  HEAP8[($6_1 + 31 | 0) >> 0] = $3_1;
  $8_1 = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP8[($6_1 + 47 | 0) >> 0] = 0 & 1 | 0;
    break label$1;
   }
   $20_1 = $1290(HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   $111($6_1 + 8 | 0 | 0, $22(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
   $32_1 = $1513($20_1 | 0, $6_1 + 8 | 0 | 0) | 0;
   $112($6_1 + 8 | 0 | 0) | 0;
   HEAP32[($6_1 + 24 | 0) >> 2] = $32_1;
   label$3 : {
    if ((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$3
    }
    $25(5870 | 0);
    HEAP8[($6_1 + 47 | 0) >> 0] = 0 & 1 | 0;
    break label$1;
   }
   HEAP32[($6_1 + 4 | 0) >> 2] = $587(HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, (HEAPU8[($6_1 + 31 | 0) >> 0] | 0) & 1 | 0 | 0) | 0;
   $570(HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP8[($6_1 + 47 | 0) >> 0] = 1 & 1 | 0;
  }
  $61_1 = (HEAPU8[($6_1 + 47 | 0) >> 0] | 0) & 1 | 0;
  global$0 = $6_1 + 48 | 0;
  return $61_1 | 0;
 }
 
 function $117($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $586(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $118($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $585(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $119($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $1278(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $120($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $1280(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
  $25(4688 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $121($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $1279(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
  $25(4708 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $122($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $591(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  }
  global$0 = $4_1 + 16 | 0;
  return 1 | 0;
 }
 
 function $123($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  $124($6_1 + 16 | 0 | 0, $402(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $124($6_1 | 0, $402((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + (HEAP32[($6_1 + 36 | 0) >> 2] | 0) | 0 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $1288(HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 | 0);
  $25($125($6_1 + 16 | 0 | 0) | 0 | 0);
  $25($125($6_1 | 0) | 0 | 0);
  $112($6_1 | 0) | 0;
  $112($6_1 + 16 | 0 | 0) | 0;
  global$0 = $6_1 + 48 | 0;
  return;
 }
 
 function $124($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $35_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  $113($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 6496 + 8 | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($5_1 + 4 | 0) >> 2] = 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 8 | 0) >> 2] = $114((HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0, 4464 | 0, 71 | 0) | 0;
   $1798(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, (HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
  }
  $35_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $35_1 | 0;
 }
 
 function $125($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $126($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1289(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  $565(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
  $570(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $1277(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return 1 | 0;
 }
 
 function $127($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = Math_fround($4_1);
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAPF32[($7_1 + 28 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   $124($7_1 + 16 | 0 | 0, $402(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
   $124($7_1 | 0, $402((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
   $25($125($7_1 + 16 | 0 | 0) | 0 | 0);
   $615(HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 | 0, Math_fround(Math_fround(HEAPF32[($7_1 + 28 | 0) >> 2])));
   $112($7_1 | 0) | 0;
   $112($7_1 + 16 | 0 | 0) | 0;
  }
  global$0 = $7_1 + 48 | 0;
  return;
 }
 
 function $128($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = $80($1293(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  }
  $17_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $17_1 | 0;
 }
 
 function $129($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $38_1 = 0, $51_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 52 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
  HEAP32[($4_1 + 48 | 0) >> 2] = $403() | 0;
  HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
  HEAP32[($4_1 + 40 | 0) >> 2] = (HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 4 | 0;
  $130($4_1 + 24 | 0 | 0, $1293(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1637(HEAP32[($82($4_1 + 24 | 0 | 0, HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[(HEAP32[($4_1 + 44 | 0) >> 2] | 0) >> 2] = 0;
    HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
    HEAP32[($4_1 + 16 | 0) >> 2] = 1;
    break label$1;
   }
   $124($4_1 | 0, $712(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
   $38_1 = $131($4_1 | 0) | 0;
   HEAP32[(HEAP32[($4_1 + 44 | 0) >> 2] | 0) >> 2] = $38_1;
   $1798(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0, $125($4_1 | 0) | 0 | 0, $131($4_1 | 0) | 0 | 0) | 0;
   HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = 1;
   $112($4_1 | 0) | 0;
  }
  $132($4_1 + 24 | 0 | 0) | 0;
  $51_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
  global$0 = $4_1 + 64 | 0;
  return $51_1 | 0;
 }
 
 function $130($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  $113($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 6540 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $133($5_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[$4_1 >> 2] = 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4_1 >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$2
     }
     $134($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0 | 0, (HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0 | 0);
     HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
  }
  $45_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $45_1 | 0;
 }
 
 function $131($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $132($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 6540 + 8 | 0;
  $135($4_1 | 0);
  $136($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $133($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5602 | 0, 4142 | 0, 195 | 0, 4679 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $317(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 197 | 0) | 0;
  label$2 : {
   if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$2
   }
   fimport$0(1829 | 0, 4142 | 0, 199 | 0, 4679 | 0);
   wasm2js_trap();
  }
  $31_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $31_1 | 0;
 }
 
 function $134($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $135($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $319($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $136($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $320(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $137($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $31_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  HEAP32[($4_1 + 36 | 0) >> 2] = $403() | 0;
  HEAP32[($4_1 + 32 | 0) >> 2] = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
  $138($4_1 + 16 | 0 | 0, $1291(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($139($4_1 + 16 | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  $37_1 = Math_fround($763(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0));
  HEAPF32[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 2] = $37_1;
  $38_1 = Math_fround($765(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0));
  HEAPF32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 4 | 0) >> 2] = $38_1;
  $39_1 = Math_fround($764(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0));
  HEAPF32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 8 | 0) >> 2] = $39_1;
  $40_1 = Math_fround($766(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0));
  HEAPF32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 12 | 0) >> 2] = $40_1;
  $41_1 = Math_fround($767(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0));
  HEAPF32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 16 | 0) >> 2] = $41_1;
  $42_1 = Math_fround($768(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0));
  HEAPF32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 20 | 0) >> 2] = $42_1;
  $31_1 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
  $140($4_1 + 16 | 0 | 0) | 0;
  global$0 = $4_1 + 48 | 0;
  return $31_1 | 0;
 }
 
 function $138($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  $113($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 6596 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $141($5_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[$4_1 >> 2] = 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4_1 >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$2
     }
     $142($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0 | 0, (HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0 | 0);
     HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
  }
  $45_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $45_1 | 0;
 }
 
 function $139($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $140($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 6596 + 8 | 0;
  $143($4_1 | 0);
  $144($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $141($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5602 | 0, 4142 | 0, 195 | 0, 4679 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $321(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 197 | 0) | 0;
  label$2 : {
   if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$2
   }
   fimport$0(1829 | 0, 4142 | 0, 199 | 0, 4679 | 0);
   wasm2js_trap();
  }
  $31_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $31_1 | 0;
 }
 
 function $142($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $143($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $323($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $144($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $324(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $145($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  label$1 : {
   label$2 : {
    if (+Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) - 1.0 > .10000000149011612 & 1 | 0) {
     break label$2
    }
    if (!(+Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) - 1.0 < -.10000000149011612 & 1 | 0)) {
     break label$1
    }
   }
   HEAP8[($5_1 + 32 | 0) >> 0] = 1;
  }
  return 1 & 1 | 0 | 0;
 }
 
 function $146($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function $147($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  HEAP8[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 0] = (HEAPU8[($4_1 + 11 | 0) >> 0] | 0) & 1 | 0;
  return;
 }
 
 function $148($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  HEAPF32[($8_1 + 44 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
  HEAPF32[($8_1 + 48 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
  HEAPF32[($8_1 + 52 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
  HEAPF32[($8_1 + 56 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
  return;
 }
 
 function $149($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $70_1 = 0, $105_1 = 0, $23_1 = 0, $42_1 = 0, $63_1 = 0, $86_1 = 0, $126_1 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 120 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 119 | 0) >> 0] = $1_1;
  HEAP32[($4_1 + 112 | 0) >> 2] = 0;
  $150($4_1 + 96 | 0 | 0, HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, 1803 | 0);
  $111($4_1 + 80 | 0 | 0, $22($4_1 + 96 | 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
  $23_1 = $1654(40 | 0) | 0;
  $636($23_1 | 0, $4_1 + 80 | 0 | 0, 0 | 0, 1 & 1 | 0 | 0) | 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = $23_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    $25(5847 | 0);
    HEAP32[($4_1 + 124 | 0) >> 2] = HEAP32[($4_1 + 112 | 0) >> 2] | 0;
    HEAP32[($4_1 + 72 | 0) >> 2] = 1;
    break label$1;
   }
   $42_1 = $1654(8 | 0) | 0;
   $7($42_1 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($4_1 + 68 | 0) >> 2] = $42_1;
   label$3 : {
    label$4 : {
     if (!((HEAPU8[($4_1 + 119 | 0) >> 0] | 0) & 1 | 0)) {
      break label$4
     }
     $150($4_1 + 56 | 0 | 0, HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, 3869 | 0);
     $111($4_1 + 40 | 0 | 0, $22($4_1 + 56 | 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
     $63_1 = $1654(44 | 0) | 0;
     $1551($63_1 | 0, HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($4_1 + 36 | 0) >> 2] = $63_1;
     HEAP32[($4_1 + 112 | 0) >> 2] = $1554(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, $4_1 + 40 | 0 | 0) | 0;
     $70_1 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
     label$5 : {
      if (($70_1 | 0) == (0 | 0) & 1 | 0) {
       break label$5
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[$70_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($70_1);
     }
     $112($4_1 + 40 | 0 | 0) | 0;
     $2006($4_1 + 56 | 0 | 0) | 0;
     break label$3;
    }
    $86_1 = $1654(44 | 0) | 0;
    $1322($86_1 | 0, HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 32 | 0) >> 2] = $86_1;
    $150($4_1 + 16 | 0 | 0, HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, 4013 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    $111($4_1 | 0, $22($4_1 + 16 | 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
    HEAP32[($4_1 + 112 | 0) >> 2] = $1385(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0;
    $105_1 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
    label$6 : {
     if (($105_1 | 0) == (0 | 0) & 1 | 0) {
      break label$6
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$105_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($105_1);
    }
    $112($4_1 | 0) | 0;
    $2006($4_1 + 16 | 0 | 0) | 0;
   }
   HEAP32[($4_1 + 124 | 0) >> 2] = HEAP32[($4_1 + 112 | 0) >> 2] | 0;
   HEAP32[($4_1 + 72 | 0) >> 2] = 1;
  }
  $112($4_1 + 80 | 0 | 0) | 0;
  $2006($4_1 + 96 | 0 | 0) | 0;
  $126_1 = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
  global$0 = $4_1 + 128 | 0;
  return $126_1 | 0;
 }
 
 function $150($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP8[($5_1 + 19 | 0) >> 0] = 0 & 1 | 0;
  $151(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0);
  $152($0_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $23(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = $28(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $2003($0_1 | 0, $24(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + (HEAP32[$5_1 >> 2] | 0) | 0 | 0);
  $2010($0_1 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
  HEAP8[($5_1 + 19 | 0) >> 0] = 1 & 1 | 0;
  label$1 : {
   if ((HEAPU8[($5_1 + 19 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $2006($0_1 | 0) | 0;
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $151($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $325(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $152($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $326($5_1 | 0, $4_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $29($5_1 | 0);
  $45($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $153($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $154(26180 | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $155(26180 | 0) | 0;
  label$1 : {
   if (!(($156($3_1 + 16 | 0 | 0, $3_1 + 8 | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[($157(26180 | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  }
  $23_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $23_1 | 0;
 }
 
 function $154($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $159(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  $160($4_1 + 24 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $12_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $12_1 | 0;
 }
 
 function $155($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$3_1 >> 2] = $161(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $160($3_1 + 8 | 0 | 0, HEAP32[$3_1 >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $156($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = ($158(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $157($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $25_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $162(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0;
  $163();
  $164($4_1 + 32 | 0 | 0, $5_1 | 0, $6_1 | 0, 6652 | 0, $4_1 + 24 | 0 | 0, $4_1 + 16 | 0 | 0);
  $25_1 = ($166($165($4_1 + 32 | 0 | 0) | 0 | 0) | 0) + 12 | 0;
  global$0 = $4_1 + 48 | 0;
  return $25_1 | 0;
 }
 
 function $158($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = (($169(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $159($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $19_1 = 0, $34_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $330($5_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, $185($5_1 | 0) | 0 | 0, $173($5_1 | 0) | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = $161($5_1 | 0) | 0;
  $19_1 = 0;
  label$1 : {
   if (!(($158($4_1 + 8 | 0 | 0, $4_1 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $19_1 = ($333($331($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, $332($4_1 + 8 | 0 | 0) | 0 | 0) | 0) ^ -1 | 0;
  }
  label$2 : {
   label$3 : {
    if (!($19_1 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4_1 + 24 | 0) >> 2] = $161($5_1 | 0) | 0;
  }
  $34_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $34_1 | 0;
 }
 
 function $160($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $161($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $335($3_1 + 8 | 0 | 0, $173(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $162($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $357($3_1 + 8 | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $163() {
  
 }
 
 function $164($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $9_1 = 0;
  $8_1 = global$0 - 64 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $5_1;
  $9_1 = HEAP32[($8_1 + 60 | 0) >> 2] | 0;
  HEAP32[($8_1 + 36 | 0) >> 2] = $349($9_1 | 0, $8_1 + 40 | 0 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($8_1 + 32 | 0) >> 2] = HEAP32[(HEAP32[($8_1 + 36 | 0) >> 2] | 0) >> 2] | 0;
  HEAP8[($8_1 + 31 | 0) >> 0] = 0;
  label$1 : {
   if (!((HEAP32[(HEAP32[($8_1 + 36 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
    break label$1
   }
   $350($8_1 + 16 | 0 | 0, $9_1 | 0, HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0);
   $352($9_1 | 0, HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0, $351($8_1 + 16 | 0 | 0) | 0 | 0);
   HEAP32[($8_1 + 32 | 0) >> 2] = $353($8_1 + 16 | 0 | 0) | 0;
   HEAP8[($8_1 + 31 | 0) >> 0] = 1;
   $354($8_1 + 16 | 0 | 0) | 0;
  }
  $355($8_1 + 8 | 0 | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  $356($0_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 31 | 0 | 0) | 0;
  global$0 = $8_1 + 64 | 0;
  return;
 }
 
 function $165($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = $358(($339(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 16 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $166($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $167($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $154(26180 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $155(26180 | 0) | 0;
  label$1 : {
   if (!(($168($4_1 + 16 | 0 | 0, $4_1 + 8 | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $20_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   HEAP32[($157(26180 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] = $20_1;
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $168($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = ($169(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $169($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $170($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $112($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $171($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $175($4_1 | 0) | 0;
  $176($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $172($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $177($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $178($6_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $173($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = $180($179((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $174($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $175($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $181($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $176($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $182($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $177($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $178($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $179($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $184(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $180($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $181($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $182($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $183($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $183($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $184($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $185($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($191(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $186($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $186($5_1 | 0, HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0);
   $186($5_1 | 0, HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   HEAP32[($4_1 + 4 | 0) >> 2] = $187($5_1 | 0) | 0;
   $189(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $188((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 16 | 0 | 0) | 0 | 0);
   $190(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $187($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $192((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $188($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $166(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $189($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $193(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $190($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $194(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $191($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = $180($199((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $192($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $195(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $193($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $2006($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $194($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $196(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 5 | 0 | 0, 4 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $195($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $196($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $197(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $197($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $198(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $198($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $1978(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $199($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $200(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $200($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $201($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $202($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $203($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $203($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $204($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $204($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $205($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $211(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $206($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  return;
 }
 
 function $207($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $14_1 = $100($5_1 | 0) | 0;
    $17_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -28 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $17_1;
    $212($14_1 | 0, $211($17_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $208($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $196(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 28) | 0, 4 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $209($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $214(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $210($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $215((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $211($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $212($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $213(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $213($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $51(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $214($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $215($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $216(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $216($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $217($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $218($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $219($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $219($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $220($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $220($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $221($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $227(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $222($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  return;
 }
 
 function $223($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $14_1 = $96($5_1 | 0) | 0;
    $17_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -12 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $17_1;
    $228($14_1 | 0, $227($17_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $224($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $196(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 12) | 0, 4 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $225($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $230(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $226($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $231((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $227($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $228($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $229(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $229($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $230($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $231($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $232(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $232($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $233($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $241(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $234($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 28) | 0;
  return $6_1 | 0;
 }
 
 function $235($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $242(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $236($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $237($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $36_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $243($5_1 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $244($5_1 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $101($5_1 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($245($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $36_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $36_1 | 0;
 }
 
 function $238($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $19_1 = 0, $26_1 = 0, $31_1 = 0, $33_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $246($7_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($6_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
    $19_1 = $248($247($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   $19_1 = 0;
  }
  HEAP32[$7_1 >> 2] = $19_1;
  $26_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 16 | 0) >> 2] | 0, 28) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 20 | 0) >> 2] | 0, 28) | 0;
  HEAP32[($249($7_1 | 0) | 0) >> 2] = $31_1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $33_1 | 0;
 }
 
 function $239($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $99($5_1 | 0);
  $250($100($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $251($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $251($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0 | 0);
  $251($103($5_1 | 0) | 0 | 0, $249(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $252($5_1 | 0, $84($5_1 | 0) | 0 | 0);
  $91($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $240($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $253($4_1 | 0);
  label$1 : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $102($247($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $254($4_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $241($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $242($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $12_1 = 0, $15_1 = 0, $38_1 = 0, $58_1 = 0, $68_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $38_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[i64toi32_i32$0 >> 2] = $38_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $8_1 = 24;
  HEAP32[(i64toi32_i32$0 + $8_1 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $8_1 | 0) >> 2] | 0;
  $12_1 = 16;
  i64toi32_i32$2 = i64toi32_i32$2 + $12_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $58_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + $12_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $58_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $15_1 = 8;
  i64toi32_i32$2 = $7_1 + $15_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $68_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + $15_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $68_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return;
 }
 
 function $243($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $256($255(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $257() | 0;
  $15_1 = HEAP32[($258($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $244($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $259(1833 | 0);
  wasm2js_trap();
 }
 
 function $245($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $260(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $246($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $201($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $268($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $247($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $270((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $248($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $269(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $249($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $271((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $250($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $22_1 = 0, $23_1 = 0, $14_1 = 0, $19_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $14_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    $19_1 = $211((HEAP32[(HEAP32[$6_1 >> 2] | 0) >> 2] | 0) + -28 | 0 | 0) | 0;
    $22_1 = (HEAP32[($6_1 + 4 | 0) >> 2] | 0) + -28 | 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = $22_1;
    $276($14_1 | 0, $19_1 | 0, $22_1 | 0);
    $23_1 = HEAP32[$6_1 >> 2] | 0;
    HEAP32[$23_1 >> 2] = (HEAP32[$23_1 >> 2] | 0) + -28 | 0;
    continue label$2;
   };
  }
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $251($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function $252($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $206($5_1 | 0, $205($5_1 | 0) | 0 | 0, ($205($5_1 | 0) | 0) + Math_imul($101($5_1 | 0) | 0, 28) | 0 | 0, ($205($5_1 | 0) | 0) + Math_imul($101($5_1 | 0) | 0, 28) | 0 | 0, ($205($5_1 | 0) | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 28) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $253($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $278($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $254($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($279($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (28 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $255($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $263((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $256($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $262(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $257() {
  return $264() | 0 | 0;
 }
 
 function $258($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $261(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $259($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = fimport$2(8 | 0) | 0;
  $267($5_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  fimport$3($5_1 | 0, 25516 | 0, 16 | 0);
  wasm2js_trap();
 }
 
 function $260($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($265($4_1 + 8 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = HEAP32[$4_1 >> 2] | 0;
    break label$1;
   }
   $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $261($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($265($4_1 + 8 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = HEAP32[$4_1 >> 2] | 0;
    break label$1;
   }
   $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $262($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 153391689 | 0;
 }
 
 function $263($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $266(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $264() {
  return 2147483647 | 0;
 }
 
 function $265($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0 | 0;
 }
 
 function $266($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $267($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1983($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 25476 + 8 | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $268($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $269($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($256(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $272();
   wasm2js_trap();
  }
  $17_1 = $273(Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 28) | 0, 4 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $17_1 | 0;
 }
 
 function $270($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $275((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $271($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $241(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $272() {
  var $1_1 = 0;
  $1_1 = fimport$2(4 | 0) | 0;
  $2046($1_1 | 0) | 0;
  fimport$3($1_1 | 0, 25416 | 0, 17 | 0);
  wasm2js_trap();
 }
 
 function $273($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = $274(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $274($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1975(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $275($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $276($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $277(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $277($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $12_1 = 0, $15_1 = 0, $38_1 = 0, $58_1 = 0, $68_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $38_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[i64toi32_i32$0 >> 2] = $38_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $8_1 = 24;
  HEAP32[(i64toi32_i32$0 + $8_1 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $8_1 | 0) >> 2] | 0;
  $12_1 = 16;
  i64toi32_i32$2 = i64toi32_i32$2 + $12_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $58_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + $12_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $58_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $15_1 = 8;
  i64toi32_i32$2 = $7_1 + $15_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $68_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + $15_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $68_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return;
 }
 
 function $278($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $280(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $279($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $281((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $280($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $13_1 = $247($5_1 | 0) | 0;
    $16_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -28 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $16_1;
    $212($13_1 | 0, $211($16_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $281($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $216(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $282($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $290(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $283($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 12) | 0;
  return $6_1 | 0;
 }
 
 function $284($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $291(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $285($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $286($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $36_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $292($5_1 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $293($5_1 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $97($5_1 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($245($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $36_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $36_1 | 0;
 }
 
 function $287($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $19_1 = 0, $26_1 = 0, $31_1 = 0, $33_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $294($7_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($6_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
    $19_1 = $296($295($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   $19_1 = 0;
  }
  HEAP32[$7_1 >> 2] = $19_1;
  $26_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 16 | 0) >> 2] | 0, 12) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 20 | 0) >> 2] | 0, 12) | 0;
  HEAP32[($297($7_1 | 0) | 0) >> 2] = $31_1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $33_1 | 0;
 }
 
 function $288($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $95($5_1 | 0);
  $298($96($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $299($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $299($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0 | 0);
  $299($106($5_1 | 0) | 0 | 0, $297(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $300($5_1 | 0, $87($5_1 | 0) | 0 | 0);
  $94($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $289($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $301($4_1 | 0);
  label$1 : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $98($295($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $302($4_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $290($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $291($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0, $30_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $7_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[$7_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  $30_1 = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $30_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $8_1 = 8;
  HEAP32[(i64toi32_i32$0 + $8_1 | 0) >> 2] = HEAP32[($7_1 + $8_1 | 0) >> 2] | 0;
  return;
 }
 
 function $292($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $304($303(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $257() | 0;
  $15_1 = HEAP32[($258($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $293($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $259(1833 | 0);
  wasm2js_trap();
 }
 
 function $294($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $217($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $308($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $295($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $310((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $296($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $309(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $297($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $311((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $298($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $13_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) - (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0 | 0) / (12 | 0) | 0;
  $13_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  HEAP32[$13_1 >> 2] = (HEAP32[$13_1 >> 2] | 0) + Math_imul(0 - (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0, 12) | 0;
  label$1 : {
   if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1798(HEAP32[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($6_1 + 12 | 0) >> 2] | 0, 12) | 0) | 0;
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $299($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function $300($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $222($5_1 | 0, $221($5_1 | 0) | 0 | 0, ($221($5_1 | 0) | 0) + Math_imul($97($5_1 | 0) | 0, 12) | 0 | 0, ($221($5_1 | 0) | 0) + Math_imul($97($5_1 | 0) | 0, 12) | 0 | 0, ($221($5_1 | 0) | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 12) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $301($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $313($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $302($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($314($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (12 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $303($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $306((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $304($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $305(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $305($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 357913941 | 0;
 }
 
 function $306($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $307(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $307($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $308($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $309($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($304(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $272();
   wasm2js_trap();
  }
  $17_1 = $273(Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 12) | 0, 4 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $17_1 | 0;
 }
 
 function $310($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $312((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $311($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $290(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $312($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $313($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $315(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $314($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $316((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $315($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $13_1 = $295($5_1 | 0) | 0;
    $16_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -12 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $16_1;
    $228($13_1 | 0, $227($16_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $316($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $232(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $317($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $14_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  $14_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($6_1, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $318($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $132($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $319($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $320($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $321($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $14_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  $14_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($6_1, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $322($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $140($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $323($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $324($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $325($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $327(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $326($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $41($6_1 | 0) | 0;
  $329($6_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $327($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $328(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $328($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $329($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $330($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $32_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (($334($331($7_1 | 0) | 0 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
       break label$4
      }
      HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
      HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
      break label$3;
     }
     HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    }
    continue label$2;
   };
  }
  $335($6_1 + 24 | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $32_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $32_1 | 0;
 }
 
 function $331($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $336((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $332($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = ($339(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 16 | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $333($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $12_1 = ($338(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, $337(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) & 1 | 0;
  global$0 = $5_1 + 16 | 0;
  return $12_1 | 0;
 }
 
 function $334($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $12_1 = ($338(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, $337(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  global$0 = $5_1 + 16 | 0;
  return $12_1 | 0;
 }
 
 function $335($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $336($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $348(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $337($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $338($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $10_1 = ($340(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  global$0 = $5_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $339($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $340($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $13_1 = ($341(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) < (0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $341($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $342($4_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $9_1 = $343($5_1 | 0, $4_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $342($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $347($0_1 | 0, $24($5_1 | 0) | 0 | 0, $23($5_1 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $343($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $45_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $23($5_1 | 0) | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $344($4_1 + 24 | 0 | 0) | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $346($24($5_1 | 0) | 0 | 0, $345($4_1 + 24 | 0 | 0) | 0 | 0, HEAP32[($258($4_1 + 20 | 0 | 0, $4_1 + 16 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($4_1 + 12 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 44 | 0) >> 2] = -1;
    break label$1;
   }
   label$4 : {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$4
    }
    HEAP32[($4_1 + 44 | 0) >> 2] = 1;
    break label$1;
   }
   HEAP32[($4_1 + 44 | 0) >> 2] = 0;
  }
  $45_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  global$0 = $4_1 + 48 | 0;
  return $45_1 | 0;
 }
 
 function $344($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $345($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $346($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (HEAP32[$5_1 >> 2] | 0) {
     break label$2
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $1904(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
  }
  $12_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $12_1 | 0;
 }
 
 function $347($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $348($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $349($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $68_1 = 0, $72_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $185($6_1 | 0) | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = $359($6_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       if (!(($333($331($6_1 | 0) | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0) | 0) & 1 | 0)) {
        break label$5
       }
       label$6 : {
        label$7 : {
         if (!((HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$7
         }
         HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
         HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
         break label$6;
        }
        HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
        HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
        break label$1;
       }
       break label$4;
      }
      label$8 : {
       label$9 : {
        if (!(($334($331($6_1 | 0) | 0 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
         break label$9
        }
        label$10 : {
         label$11 : {
          if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$11
          }
          HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0;
          HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
          break label$10;
         }
         HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
         HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0;
         break label$1;
        }
        break label$8;
       }
       HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       break label$1;
      }
     }
     continue label$3;
    };
   }
   $68_1 = $173($6_1 | 0) | 0;
   HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = $68_1;
   HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
  }
  $72_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $72_1 | 0;
 }
 
 function $350($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $187(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  HEAP8[($7_1 + 11 | 0) >> 0] = 0 & 1 | 0;
  $15_1 = $360(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  $361($7_1 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
  $362($0_1 | 0, $15_1 | 0, $7_1 | 0) | 0;
  $364(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $188(($363($0_1 | 0) | 0) + 16 | 0 | 0) | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0);
  HEAP8[(($365($0_1 | 0) | 0) + 4 | 0) >> 0] = 1;
  HEAP8[($7_1 + 11 | 0) >> 0] = 1 & 1 | 0;
  label$1 : {
   if ((HEAPU8[($7_1 + 11 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $354($0_1 | 0) | 0;
  }
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $351($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($368(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $352($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $33_1 = 0, $27_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAP32[(HEAP32[$6_1 >> 2] | 0) >> 2] = 0;
  HEAP32[((HEAP32[$6_1 >> 2] | 0) + 4 | 0) >> 2] = 0;
  HEAP32[((HEAP32[$6_1 >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
  label$1 : {
   if (!((HEAP32[(HEAP32[($174($7_1 | 0) | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $27_1 = HEAP32[(HEAP32[($174($7_1 | 0) | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($174($7_1 | 0) | 0) >> 2] = $27_1;
  }
  $366(HEAP32[($173($7_1 | 0) | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0);
  $33_1 = $367($7_1 | 0) | 0;
  HEAP32[$33_1 >> 2] = (HEAP32[$33_1 >> 2] | 0) + 1 | 0;
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $353($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($369($4_1 | 0) | 0) >> 2] | 0;
  HEAP32[($369($4_1 | 0) | 0) >> 2] = 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $354($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $370($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $355($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $356($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP8[($6_1 + 4 | 0) >> 0] = (HEAPU8[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 0] | 0) & 1 | 0;
  return $6_1 | 0;
 }
 
 function $357($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  $398($5_1 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 48 | 0;
  return $5_1 | 0;
 }
 
 function $358($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $359($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $191(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $360($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $371(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $361($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 7 | 0) >> 0] = $2_1;
  $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP8[($7_1 + 4 | 0) >> 0] = (HEAPU8[($5_1 + 7 | 0) >> 0] | 0) & 1 | 0;
  return $7_1 | 0;
 }
 
 function $362($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $372($6_1 | 0, $5_1 + 8 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $363($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($368(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $364($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  $373(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $365($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $374(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $366($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0;
  label$1 : while (1) {
   $21_1 = 0;
   label$2 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $21_1 = (HEAPU8[(($389(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) + 12 | 0) >> 0] | 0) ^ -1 | 0;
   }
   label$3 : {
    if (!($21_1 & 1 | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (!(($390($389(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(($389($389(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) + 4 | 0) >> 2] | 0;
      label$6 : {
       label$7 : {
        if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$7
        }
        if ((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 1 | 0) {
         break label$7
        }
        HEAP32[($4_1 + 8 | 0) >> 2] = $389(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
        HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = 1;
        HEAP32[($4_1 + 8 | 0) >> 2] = $389(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
        HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0;
        HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 0] = 1;
        break label$6;
       }
       label$8 : {
        if (($390(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
         break label$8
        }
        HEAP32[($4_1 + 8 | 0) >> 2] = $389(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
        $391(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
       }
       HEAP32[($4_1 + 8 | 0) >> 2] = $389(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
       HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = 1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $389(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
       HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = 0;
       $392(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
       break label$3;
      }
      break label$4;
     }
     HEAP32[$4_1 >> 2] = HEAP32[(HEAP32[(($389(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2] | 0) >> 2] | 0;
     label$9 : {
      label$10 : {
       if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$10
       }
       if ((HEAPU8[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 0] | 0) & 1 | 0) {
        break label$10
       }
       HEAP32[($4_1 + 8 | 0) >> 2] = $389(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
       HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = 1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $389(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
       HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0;
       HEAP8[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 0] = 1;
       break label$9;
      }
      label$11 : {
       if (!(($390(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
        break label$11
       }
       HEAP32[($4_1 + 8 | 0) >> 2] = $389(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
       $392(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
      }
      HEAP32[($4_1 + 8 | 0) >> 2] = $389(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
      HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = 1;
      HEAP32[($4_1 + 8 | 0) >> 2] = $389(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
      HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = 0;
      $391(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
      break label$3;
     }
    }
    continue label$1;
   }
   break label$1;
  };
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $367($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $393((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $368($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $387(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $369($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $396(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $370($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($369($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($369($5_1 | 0) | 0) >> 2] = $8_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $397($374($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $371($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($375(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $272();
   wasm2js_trap();
  }
  $17_1 = $273((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 5 | 0 | 0, 4 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $17_1 | 0;
 }
 
 function $372($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $377($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $378($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $373($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($7_1 + 32 | 0) >> 2] | 0) >> 2] | 0;
  $379($8_1 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $7_1 + 48 | 0;
  return;
 }
 
 function $374($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $388((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $375($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $376(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $376($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 134217727 | 0;
 }
 
 function $377($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $378($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $23_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  i64toi32_i32$2 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $23_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $379($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  $380($5_1 | 0, $4_1 + 32 | 0 | 0, $4_1 + 24 | 0 | 0) | 0;
  global$0 = $4_1 + 48 | 0;
  return $5_1 | 0;
 }
 
 function $380($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  $382($6_1 | 0, $381(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = 0;
  global$0 = $5_1 + 48 | 0;
  return $6_1 | 0;
 }
 
 function $381($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $383(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $382($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $19_1 = 0, $21_1 = 0, $20_1 = 0, i64toi32_i32$1 = 0, $81_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $5_1;
  $384($325(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  $385($5_1 | 0, $4_1 + 16 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (($31(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $19_1 = $34(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    $20_1 = $46($5_1 | 0) | 0;
    i64toi32_i32$0 = HEAP32[$19_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($19_1 + 4 | 0) >> 2] | 0;
    $81_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $20_1;
    HEAP32[i64toi32_i32$0 >> 2] = $81_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $21_1 = 8;
    HEAP32[(i64toi32_i32$0 + $21_1 | 0) >> 2] = HEAP32[($19_1 + $21_1 | 0) >> 2] | 0;
    break label$1;
   }
   $2009($5_1 | 0, $37($38(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0, $32(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  }
  $29($5_1 | 0);
  $30_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $30_1 | 0;
 }
 
 function $383($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $384($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $385($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $41($6_1 | 0) | 0;
  $386($6_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $386($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $387($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $388($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $389($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $390($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $391($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $30_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $394(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  }
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    if (!(($390(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    break label$2;
   }
   $30_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   HEAP32[(($389(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] = $30_1;
  }
  HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $394(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $392($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $30_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $394(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  }
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    if (!(($390(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    break label$2;
   }
   $30_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   HEAP32[(($389(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] = $30_1;
  }
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $394(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $393($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $395(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $394($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function $395($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $396($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $397($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAPU8[($5_1 + 4 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   $189(HEAP32[$5_1 >> 2] | 0 | 0, $188((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 16 | 0 | 0) | 0 | 0);
  }
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$2
   }
   $190(HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $398($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $399($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 48 | 0;
  return $5_1 | 0;
 }
 
 function $399($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $400() {
  $52();
  return;
 }
 
 function $401($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $27($6_1 | 0, $5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0;
  $2008($6_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  $29($6_1 | 0);
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $402($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $111($4_1 + 8 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0 | 0) | 0;
  $112($4_1 + 8 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return $4_1 + 8 | 0 | 0;
 }
 
 function $403() {
  var $2_1 = 0, $19_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(0 + 26192 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[(0 + 26192 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($2_1 + 8 | 0) >> 2] = $1977(16777216 | 0) | 0;
   HEAP32[(0 + 26192 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[(0 + 26192 | 0) >> 2] | 0;
  }
  $19_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $19_1 | 0;
 }
 
 function $404() {
  var $9_1 = 0;
  label$1 : {
   if (!((HEAP32[(0 + 26192 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $9_1 = HEAP32[(0 + 26192 | 0) >> 2] | 0;
   label$2 : {
    if (($9_1 | 0) == (0 | 0) & 1 | 0) {
     break label$2
    }
    $1979($9_1 | 0);
   }
   HEAP32[(0 + 26192 | 0) >> 2] = 0;
  }
  return;
 }
 
 function $405() {
  var $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $403() | 0;
  $4_1 = $1975(4 | 0) | 0;
  $451($4_1 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $4_1;
  $460();
  $930(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0);
  $20();
  global$0 = $2_1 + 16 | 0;
  return 1 & 1 | 0 | 0;
 }
 
 function $406() {
  var $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $931() | 0;
  $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($4_1);
  }
  $30();
  $404();
  global$0 = $2_1 + 16 | 0;
  return 1 & 1 | 0 | 0;
 }
 
 function $407() {
  var $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $403() | 0;
  $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $408() {
  var $2_1 = 0, $4_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = $1975(60 | 0) | 0;
  $59($4_1 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $409($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $64(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $410($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $23_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $2_1;
  HEAP8[($6_1 + 35 | 0) >> 0] = $3_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = $403() | 0;
  $401($6_1 + 8 | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) | 0;
  $23_1 = $116(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, $6_1 + 8 | 0 | 0, (HEAPU8[($6_1 + 35 | 0) >> 0] | 0) & 1 | 0 | 0) | 0;
  $2006($6_1 + 8 | 0 | 0) | 0;
  global$0 = $6_1 + 48 | 0;
  return $23_1 & 1 | 0 | 0;
 }
 
 function $411($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $117(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $412($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $118(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $413($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $119(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $414($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $120(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $415($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $121(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $416($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $122(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))) | 0;
  global$0 = $4_1 + 16 | 0;
  return 1 & 1 | 0 | 0;
 }
 
 function $417($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $403() | 0;
  $401($4_1 + 8 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $109(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
  $2006($4_1 + 8 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return 1 | 0;
 }
 
 function $418($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $126(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))) | 0;
  global$0 = $4_1 + 16 | 0;
  return 1 | 0;
 }
 
 function $419($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $6_1 = $65(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $420($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $6_1 = $128(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $421($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $8_1 = $129(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $422($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $8_1 = $137(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $423($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $9_1 = ($145(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))) | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $424($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  }
  $146(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return 1 & 1 | 0 | 0;
 }
 
 function $425($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $7_1 = $1654(12 | 0) | 0;
  $1776($7_1 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $7_1;
  $8_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $426($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $1781(HEAP32[$5_1 >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])));
  $1782(HEAP32[$5_1 >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])));
  global$0 = $5_1 + 16 | 0;
  return 1 & 1 | 0 | 0;
 }
 
 function $427($0_1, $1_1, $2_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $16_1 = 0, $19_1 = 0, $21_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAPF32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 23 | 0) >> 0] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAPU8[($5_1 + 23 | 0) >> 0] | 0) & 1 | 0)) {
     break label$2
    }
    $13_1 = $1975(8 | 0) | 0;
    $428($13_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = $13_1;
    break label$1;
   }
   $16_1 = $1975(8 | 0) | 0;
   $429($16_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $16_1;
  }
  $19_1 = $1654(32 | 0) | 0;
  $1783($19_1 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2])), HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = $19_1;
  $21_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $21_1 | 0;
 }
 
 function $428($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $430($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 6656 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $429($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $430($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 6780 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $430($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 6756 + 8 | 0;
  return $4_1 | 0;
 }
 
 function $431($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($7_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  $1787(HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2])));
  $1788(HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2])));
  $1789(HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2])));
  $1790(HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2])));
  global$0 = $7_1 + 32 | 0;
  return 1 & 1 | 0 | 0;
 }
 
 function $432($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = Math_fround($4_1);
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($7_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  $127(HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2])));
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $433($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $147(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, (HEAPU8[($4_1 + 11 | 0) >> 0] | 0) & 1 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $434($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($7_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  $148(HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2])));
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $435($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  $123(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $436($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $62($5_1 | 0) | 0;
   $1978($5_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $437($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $19_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 27 | 0) >> 0] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $403() | 0;
  $401($4_1 + 8 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $149($4_1 + 8 | 0 | 0, (HEAPU8[($4_1 + 27 | 0) >> 0] | 0) & 1 | 0 | 0) | 0;
  $19_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $2006($4_1 + 8 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return $19_1 | 0;
 }
 
 function $438($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $403() | 0;
  $401($3_1 + 8 | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $153($3_1 + 8 | 0 | 0) | 0;
  $14_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $2006($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 32 | 0;
  return $14_1 | 0;
 }
 
 function $439($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $403() | 0;
  $401($4_1 + 8 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  $167($4_1 + 8 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  $2006($4_1 + 8 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $440($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1977(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $6_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $441($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $1979($4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $442($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0, $22_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $22_1 = Math_fround(Math_fround(Math_fround($1036(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) - Math_fround(1.0))), Math_fround(Math_fround(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0)))) * ((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) % (2 | 0) | 0 ? Math_fround(1.0) : Math_fround(-1.0))) + Math_fround(1.0));
  global$0 = $4_1 + 16 | 0;
  return Math_fround($22_1);
 }
 
 function $443($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $7_1 = 0, $12_1 = Math_fround(0), $19_1 = Math_fround(0);
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAPF32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $12_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
  $19_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2])) * Math_fround(FUNCTION_TABLE[HEAP32[(HEAP32[$7_1 >> 2] | 0) >> 2] | 0 | 0]($7_1, Math_fround(HEAPF32[$6_1 >> 2])))) + $12_1);
  global$0 = $6_1 + 16 | 0;
  return Math_fround($19_1);
 }
 
 function $444($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $445($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $445($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $446($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $444($4_1 | 0) | 0;
  $1978($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $447($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  wasm2js_trap();
 }
 
 function $448($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0, $38_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) <= Math_fround(.5) & 1 | 0)) {
     break label$2
    }
    HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(Math_fround($1036(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * Math_fround(2.0))), Math_fround(Math_fround(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0)))) / Math_fround(2.0));
    break label$1;
   }
   HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(Math_fround(Math_fround($1036(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) - Math_fround(1.0)) * Math_fround(2.0))), Math_fround(Math_fround(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0)))) / ((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) % (2 | 0) | 0 ? Math_fround(2.0) : Math_fround(-2.0))) + Math_fround(1.0));
  }
  $38_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
  global$0 = $4_1 + 16 | 0;
  return Math_fround($38_1);
 }
 
 function $449($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $445($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $450($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $449($4_1 | 0) | 0;
  $1978($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $451($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $943($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 6844 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $452($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $935($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $453($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[34 | 0]($4_1) | 0;
  $1978($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $454($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $24_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $131(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $403() | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $1798(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, $125(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = fimport$4(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $1977(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $1798(HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $24_1 = HEAP32[$5_1 >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $24_1 | 0;
 }
 
 function $455($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $12_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (HEAP32[($6_1 + 20 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $1977(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  $12_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $12_1 | 0;
 }
 
 function $456($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $22_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (HEAP32[($6_1 + 20 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $1977(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   label$3 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $1799(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  $22_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $22_1 | 0;
 }
 
 function $457($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $15_1 = 0, $24_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if (HEAP32[($7_1 + 16 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($7_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($7_1 + 4 | 0) >> 2] = $1977(HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) | 0;
   $1798(HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) | 0;
   $15_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   label$3 : {
    if (($15_1 | 0) == (0 | 0) & 1 | 0) {
     break label$3
    }
    $1979($15_1 | 0);
   }
   HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
   HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  }
  $24_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  global$0 = $7_1 + 32 | 0;
  return $24_1 | 0;
 }
 
 function $458($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   if (($7_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $1979($7_1 | 0);
  }
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $459() {
  var $1_1 = 0;
  $1_1 = $1975(4 | 0) | 0;
  FUNCTION_TABLE[35 | 0]($1_1) | 0;
  return $1_1 | 0;
 }
 
 function $460() {
  var $2_1 = 0;
  $2_1 = global$0 - 512 | 0;
  global$0 = $2_1;
  $1159($2_1 + 496 | 0 | 0, 1598 | 0) | 0;
  $461(26208 | 0, $2_1 + 496 | 0 | 0) | 0;
  $462($2_1 + 496 | 0 | 0) | 0;
  $1159($2_1 + 480 | 0 | 0, 1880 | 0) | 0;
  $461(26220 | 0, $2_1 + 480 | 0 | 0) | 0;
  $462($2_1 + 480 | 0 | 0) | 0;
  $1159($2_1 + 464 | 0 | 0, 5054 | 0) | 0;
  $461(26544 | 0, $2_1 + 464 | 0 | 0) | 0;
  $462($2_1 + 464 | 0 | 0) | 0;
  $1159($2_1 + 448 | 0 | 0, 5134 | 0) | 0;
  $461(26604 | 0, $2_1 + 448 | 0 | 0) | 0;
  $462($2_1 + 448 | 0 | 0) | 0;
  $1160($2_1 + 432 | 0 | 0, 1875 | 0, 26220 | 0) | 0;
  $461(26196 | 0, $2_1 + 432 | 0 | 0) | 0;
  $462($2_1 + 432 | 0 | 0) | 0;
  $1160($2_1 + 416 | 0 | 0, 4858 | 0, 26544 | 0) | 0;
  $461(26232 | 0, $2_1 + 416 | 0 | 0) | 0;
  $462($2_1 + 416 | 0 | 0) | 0;
  $1160($2_1 + 400 | 0 | 0, 4749 | 0, 26604 | 0) | 0;
  $461(26244 | 0, $2_1 + 400 | 0 | 0) | 0;
  $462($2_1 + 400 | 0 | 0) | 0;
  $1160($2_1 + 384 | 0 | 0, 4894 | 0, 26544 | 0) | 0;
  $461(26332 | 0, $2_1 + 384 | 0 | 0) | 0;
  $462($2_1 + 384 | 0 | 0) | 0;
  $1160($2_1 + 368 | 0 | 0, 4844 | 0, 26544 | 0) | 0;
  $461(26344 | 0, $2_1 + 368 | 0 | 0) | 0;
  $462($2_1 + 368 | 0 | 0) | 0;
  $1160($2_1 + 352 | 0 | 0, 5002 | 0, 26544 | 0) | 0;
  $461(26308 | 0, $2_1 + 352 | 0 | 0) | 0;
  $462($2_1 + 352 | 0 | 0) | 0;
  $1160($2_1 + 336 | 0 | 0, 1414 | 0, 26604 | 0) | 0;
  $461(26360 | 0, $2_1 + 336 | 0 | 0) | 0;
  $462($2_1 + 336 | 0 | 0) | 0;
  $1160($2_1 + 320 | 0 | 0, 1427 | 0, 26604 | 0) | 0;
  $461(26412 | 0, $2_1 + 320 | 0 | 0) | 0;
  $462($2_1 + 320 | 0 | 0) | 0;
  $1160($2_1 + 304 | 0 | 0, 1499 | 0, 26208 | 0) | 0;
  $461(26460 | 0, $2_1 + 304 | 0 | 0) | 0;
  $462($2_1 + 304 | 0 | 0) | 0;
  $1160($2_1 + 288 | 0 | 0, 1543 | 0, 26208 | 0) | 0;
  $461(26472 | 0, $2_1 + 288 | 0 | 0) | 0;
  $462($2_1 + 288 | 0 | 0) | 0;
  $1160($2_1 + 272 | 0 | 0, 1394 | 0, 26604 | 0) | 0;
  $461(26556 | 0, $2_1 + 272 | 0 | 0) | 0;
  $462($2_1 + 272 | 0 | 0) | 0;
  $1160($2_1 + 256 | 0 | 0, 1482 | 0, 26208 | 0) | 0;
  $461(26616 | 0, $2_1 + 256 | 0 | 0) | 0;
  $462($2_1 + 256 | 0 | 0) | 0;
  $1160($2_1 + 240 | 0 | 0, 1460 | 0, 26616 | 0) | 0;
  $461(26260 | 0, $2_1 + 240 | 0 | 0) | 0;
  $462($2_1 + 240 | 0 | 0) | 0;
  $1160($2_1 + 224 | 0 | 0, 1590 | 0, 26616 | 0) | 0;
  $461(26272 | 0, $2_1 + 224 | 0 | 0) | 0;
  $462($2_1 + 224 | 0 | 0) | 0;
  $1160($2_1 + 208 | 0 | 0, 1575 | 0, 26616 | 0) | 0;
  $461(26388 | 0, $2_1 + 208 | 0 | 0) | 0;
  $462($2_1 + 208 | 0 | 0) | 0;
  $1160($2_1 + 192 | 0 | 0, 1560 | 0, 26616 | 0) | 0;
  $461(26400 | 0, $2_1 + 192 | 0 | 0) | 0;
  $462($2_1 + 192 | 0 | 0) | 0;
  $1160($2_1 + 176 | 0 | 0, 4880 | 0, 26308 | 0) | 0;
  $461(26284 | 0, $2_1 + 176 | 0 | 0) | 0;
  $462($2_1 + 176 | 0 | 0) | 0;
  $1160($2_1 + 160 | 0 | 0, 4957 | 0, 26308 | 0) | 0;
  $461(26320 | 0, $2_1 + 160 | 0 | 0) | 0;
  $462($2_1 + 160 | 0 | 0) | 0;
  $1160($2_1 + 144 | 0 | 0, 4823 | 0, 26308 | 0) | 0;
  $461(26372 | 0, $2_1 + 144 | 0 | 0) | 0;
  $462($2_1 + 144 | 0 | 0) | 0;
  $1160($2_1 + 128 | 0 | 0, 4769 | 0, 26308 | 0) | 0;
  $461(26424 | 0, $2_1 + 128 | 0 | 0) | 0;
  $462($2_1 + 128 | 0 | 0) | 0;
  $1160($2_1 + 112 | 0 | 0, 4926 | 0, 26308 | 0) | 0;
  $461(26436 | 0, $2_1 + 112 | 0 | 0) | 0;
  $462($2_1 + 112 | 0 | 0) | 0;
  $1160($2_1 + 96 | 0 | 0, 5016 | 0, 26308 | 0) | 0;
  $461(26484 | 0, $2_1 + 96 | 0 | 0) | 0;
  $462($2_1 + 96 | 0 | 0) | 0;
  $1160($2_1 + 80 | 0 | 0, 5031 | 0, 26308 | 0) | 0;
  $461(26580 | 0, $2_1 + 80 | 0 | 0) | 0;
  $462($2_1 + 80 | 0 | 0) | 0;
  $1160($2_1 + 64 | 0 | 0, 4877 | 0, 26308 | 0) | 0;
  $461(26592 | 0, $2_1 + 64 | 0 | 0) | 0;
  $462($2_1 + 64 | 0 | 0) | 0;
  $1160($2_1 + 48 | 0 | 0, 4795 | 0, 26308 | 0) | 0;
  $461(26568 | 0, $2_1 + 48 | 0 | 0) | 0;
  $462($2_1 + 48 | 0 | 0) | 0;
  $1160($2_1 + 32 | 0 | 0, 5049 | 0, 26580 | 0) | 0;
  $461(26496 | 0, $2_1 + 32 | 0 | 0) | 0;
  $462($2_1 + 32 | 0 | 0) | 0;
  $1160($2_1 + 16 | 0 | 0, 4912 | 0, 26580 | 0) | 0;
  $461(26508 | 0, $2_1 + 16 | 0 | 0) | 0;
  $462($2_1 + 16 | 0 | 0) | 0;
  $1160($2_1 | 0, 4972 | 0, 26436 | 0) | 0;
  $461(26448 | 0, $2_1 | 0) | 0;
  $462($2_1 | 0) | 0;
  global$0 = $2_1 + 512 | 0;
  return;
 }
 
 function $461($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $42_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $463($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$2 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $42_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + 4 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $42_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $462($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $463($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $464($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $7_1 = 0, $46_1 = 0, $60_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAPF32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  $113($7_1 | 0) | 0;
  HEAP32[$7_1 >> 2] = 6916 + 8 | 0;
  $465($7_1 + 4 | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  $466($7_1 + 20 | 0 | 0) | 0;
  HEAPF32[($7_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]);
  $124($7_1 + 36 | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (($131($7_1 + 36 | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5608 | 0, 2979 | 0, 49 | 0, 3967 | 0);
   wasm2js_trap();
  }
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) < ($467(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $46_1 = HEAP32[($468(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$46_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($46_1) | 0;
    HEAP8[($6_1 + 3 | 0) >> 0] = 1;
    $469($7_1 + 20 | 0 | 0, $6_1 + 4 | 0 | 0, $6_1 + 3 | 0 | 0);
    HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  $60_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $60_1 | 0;
 }
 
 function $465($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  $113($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 6964 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $470($5_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[$4_1 >> 2] = 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4_1 >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$2
     }
     $471($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0 | 0, (HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0 | 0);
     HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
  }
  $45_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $45_1 | 0;
 }
 
 function $466($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 7024 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $467($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $468($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $469($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $27_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = $472($6_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
    HEAP8[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 8 | 0) >> 0] = (HEAPU8[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 0] | 0) & 1 | 0;
    break label$1;
   }
   $27_1 = $1655(20 | 0, 4221 | 0, 114 | 0) | 0;
   $473($27_1 | 0) | 0;
   HEAP32[($5_1 + 16 | 0) >> 2] = $27_1;
   HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
   HEAP8[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 8 | 0) >> 0] = (HEAPU8[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 0] | 0) & 1 | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
   label$3 : {
    label$4 : {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
     break label$3;
    }
    HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $470($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5602 | 0, 4142 | 0, 195 | 0, 4679 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $490(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 197 | 0) | 0;
  label$2 : {
   if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$2
   }
   fimport$0(1829 | 0, 4142 | 0, 199 | 0, 4679 | 0);
   wasm2js_trap();
  }
  $31_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $31_1 | 0;
 }
 
 function $471($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $472($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!((HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
      break label$1;
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 2] | 0;
     continue label$3;
    };
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $473($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 7076 + 8 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $474($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $13_1 = ($475((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 20 | 0 | 0, $4_1 + 8 | 0 | 0) | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $475($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $13_1 = ($472(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $476($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 6916 + 8 | 0;
  $477($4_1 + 4 | 0 | 0);
  $112($4_1 + 36 | 0 | 0) | 0;
  $478($4_1 + 20 | 0 | 0) | 0;
  $479($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $477($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($467(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($468(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $480(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $478($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 7024 + 8 | 0;
  $481($4_1 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $479($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 6964 + 8 | 0;
  $482($4_1 | 0);
  $483($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $480($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $493($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $481($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    $15_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    label$3 : {
     if (($15_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$15_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($15_1);
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $482($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $493($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $483($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $494(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $484($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[42 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $485($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0 | 0;
 }
 
 function $486($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 32 | 0) >> 2]));
 }
 
 function $487($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $50_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = $488(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = ((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) / (HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0) - 2 | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($5_1 + 4 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 1 | 0;
   label$3 : while (1) {
    label$4 : {
     label$5 : {
      if (!(Math_fround(HEAPF32[($15(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[$5_1 >> 2] | 0) + 1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0) | 0) | 0) >> 2]) <= Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]) & 1 | 0)) {
       break label$5
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[$5_1 >> 2] | 0) + 1 | 0;
      break label$4;
     }
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    label$6 : {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = Math_imul((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0);
     break label$1;
    }
    HEAP32[$5_1 >> 2] = ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0) >>> 1 | 0;
    continue label$3;
   };
  }
  $50_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $50_1 | 0;
 }
 
 function $488($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $489($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $43_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $488(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) - 2 | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($4_1 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 1;
    break label$1;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 1 | 0;
   label$3 : while (1) {
    label$4 : {
     label$5 : {
      if (!(Math_fround(HEAPF32[($15(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]) <= Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
      break label$4;
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    }
    label$6 : {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     break label$1;
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) >>> 1 | 0;
    continue label$3;
   };
  }
  $43_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $43_1 | 0;
 }
 
 function $490($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $14_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  $14_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($6_1, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $491($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $479($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $492($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $478($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $493($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $494($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $495($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $496($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $495($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $497($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  return;
 }
 
 function $498($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  $499($4_1 + 4 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 7132 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 7132 + 24 | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  HEAP32[($4_1 + 32 | 0) >> 2] = 0;
  HEAP8[($4_1 + 36 | 0) >> 0] = 0;
  HEAP8[($4_1 + 37 | 0) >> 0] = 0;
  HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 44 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 48 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 52 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 56 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 60 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 64 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 68 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 72 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 76 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 80 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 84 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 88 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($4_1 + 92 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 96 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 100 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 104 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 108 | 0) >> 2] = Math_fround(0 | 0);
  HEAP32[($4_1 + 112 | 0) >> 2] = 2;
  $500($4_1 + 116 | 0 | 0) | 0;
  $501($4_1 + 132 | 0 | 0) | 0;
  $502($4_1 + 148 | 0 | 0) | 0;
  HEAP32[($4_1 + 164 | 0) >> 2] = 50;
  HEAP32[($4_1 + 168 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $499($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 7456 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $500($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 7472 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $501($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 7520 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $502($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 7584 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $503($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 7132 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 7132 + 24 | 0;
  $504($4_1 + 148 | 0 | 0) | 0;
  $505($4_1 + 132 | 0 | 0) | 0;
  $506($4_1 + 116 | 0 | 0) | 0;
  $507($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $504($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 7584 + 8 | 0;
  $508($4_1 | 0);
  $509($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $505($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 7520 + 8 | 0;
  $510($4_1 | 0);
  $511($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $506($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 7472 + 8 | 0;
  $512($4_1 | 0);
  $513($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $507($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[$4_1 >> 2] = 7456 + 8 | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0](HEAP32[($4_1 + 4 | 0) >> 2] | 0);
  }
  $24_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $24_1 | 0;
 }
 
 function $508($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $519($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $509($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $606(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $510($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $522($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $511($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $605(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $512($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $521($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $513($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $604(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $514($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = FUNCTION_TABLE[51 | 0]($4_1 + -4 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $515($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[51 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $516($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $515((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + -4 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $517($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $30_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAPU8[($4_1 + 36 | 0) >> 0] | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]));
    label$3 : {
     if (!(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) == Math_fround(0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]);
     break label$1;
    }
    HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(Math_fround($1017(Math_fround(Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2])))) + Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]));
    break label$1;
   }
   HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround($518(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2]) + Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]))), Math_fround(Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]))));
  }
  $30_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
  global$0 = $3_1 + 16 | 0;
  return Math_fround($30_1);
 }
 
 function $518($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $11_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  HEAPF32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]) < Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) & 1 | 0)) {
     break label$2
    }
    $11_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
    break label$1;
   }
   $11_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  }
  return Math_fround($11_1);
 }
 
 function $519($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $520($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  $11_1 = 0;
  $17($4_1 + 4 | 0 | 0, $11_1 | 0, $11_1 | 0);
  $512($4_1 + 116 | 0 | 0);
  $510($4_1 + 132 | 0 | 0);
  $508($4_1 + 148 | 0 | 0);
  HEAP32[($4_1 + 164 | 0) >> 2] = 50;
  HEAP32[($4_1 + 168 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $521($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $522($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $523($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $113($7_1 | 0) | 0;
  HEAP32[$7_1 >> 2] = 7164 + 8 | 0;
  HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($7_1 + 12 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $524($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = $1655(32 | 0, 3184 | 0, 190 | 0) | 0;
  FUNCTION_TABLE[52 | 0]($8_1, HEAP32[($4_1 + 12 | 0) >> 2] | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $525($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  FUNCTION_TABLE[53 | 0]($0_1, HEAP32[($6_1 + 8 | 0) >> 2] | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $526($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $113($6_1 | 0) | 0;
  HEAP32[$6_1 >> 2] = 7180 + 8 | 0;
  $527($6_1 + 4 | 0 | 0) | 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  HEAP8[($6_1 + 28 | 0) >> 0] = 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $527($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 7632 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $528($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 7180 + 8 | 0;
  $529($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $529($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 7632 + 8 | 0;
  $530($4_1 | 0);
  $531($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $530($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $550($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 4 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $531($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $608(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $532($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[54 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $533($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $12_1 = 0;
  $525($4_1 + 8 | 0 | 0, $12_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $12_1 | 0);
  $534($5_1 + 4 | 0 | 0, $4_1 + 8 | 0 | 0);
  $535($4_1 + 8 | 0 | 0) | 0;
  HEAP8[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 88 | 0) >> 0] = 1;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $534($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $61_1 = Math_fround(0), $20_1 = 0, $37_1 = 0, $50_1 = 0, $36_1 = 0, $49_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $536($4_1 + 8 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    $61_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($61_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $20_1 = ~~$61_1;
      break label$3;
     }
     $20_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $20_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $537(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $36_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $37_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $37_1 + 1 | 0;
    $538($5_1 | 0, $36_1 + ($37_1 << 4 | 0) | 0 | 0, $4_1 + 8 | 0 | 0);
    $535($4_1 + 8 | 0 | 0) | 0;
    break label$1;
   }
   $49_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $50_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $50_1 + 1 | 0;
   $538($5_1 | 0, $49_1 + ($50_1 << 4 | 0) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $535($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $536($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $14_1 = 0, $15_1 = 0, i64toi32_i32$1 = 0, $54_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $609($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 7164 + 8 | 0;
  $14_1 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0;
  i64toi32_i32$0 = HEAP32[$14_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
  $54_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + 4 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $54_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $15_1 = 8;
  HEAP32[(i64toi32_i32$0 + $15_1 | 0) >> 2] = HEAP32[($14_1 + $15_1 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $537($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 4 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $538($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $536($1656(16 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $539($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $7_1 = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 4 | 0;
  $525($4_1 + 8 | 0 | 0, 1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, 0 | 0);
  $534($7_1 | 0, $4_1 + 8 | 0 | 0);
  $535($4_1 + 8 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $540($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $525($4_1 + 8 | 0 | 0, 2 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, 0 | 0);
  $534($5_1 + 4 | 0 | 0, $4_1 + 8 | 0 | 0);
  $535($4_1 + 8 | 0 | 0) | 0;
  HEAP8[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 88 | 0) >> 0] = 1;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $541($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $7_1 = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 4 | 0;
  $525($4_1 + 8 | 0 | 0, 4 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, 0 | 0);
  $534($7_1 | 0, $4_1 + 8 | 0 | 0);
  $535($4_1 + 8 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $542($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $7_1 = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 4 | 0;
  $525($4_1 + 8 | 0 | 0, 3 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, 0 | 0);
  $534($7_1 | 0, $4_1 + 8 | 0 | 0);
  $535($4_1 + 8 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $543($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $8_1 = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0;
  $525($5_1 | 0, 5 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  $534($8_1 | 0, $5_1 | 0);
  $535($5_1 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $544($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $27_1 = 0, $45_1 = 0, $69_1 = 0, $93_1 = 0, $117_1 = 0, $140_1 = 0, $162_1 = 0, $189_1 = 0, $215_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAPU8[($4_1 + 28 | 0) >> 0] | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP8[($4_1 + 28 | 0) >> 0] = 1;
   HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   HEAP32[($3_1 + 20 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0) >>> 0 < ($545($4_1 + 4 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($3_1 + 16 | 0) >> 2] = $546($4_1 + 4 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     $27_1 = HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     label$5 : {
      label$6 : {
       switch ($27_1 | 0) {
       case 0:
       case 1:
       case 3:
        label$10 : {
         label$11 : {
          if ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
           break label$11
          }
          FUNCTION_TABLE[HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 164 | 0) >> 2] | 0 | 0](HEAP32[($3_1 + 24 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0, 0);
          break label$10;
         }
         $45_1 = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 2] | 0;
         FUNCTION_TABLE[HEAP32[((HEAP32[$45_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($45_1, HEAP32[($3_1 + 24 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0, 0);
        }
        label$12 : {
         label$13 : {
          if ((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
           break label$13
          }
          FUNCTION_TABLE[HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 92 | 0) >> 2] | 0 | 0](HEAP32[($3_1 + 24 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0, 0);
          break label$12;
         }
         $69_1 = HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0;
         FUNCTION_TABLE[HEAP32[((HEAP32[$69_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($69_1, HEAP32[($3_1 + 24 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0, 0);
        }
        break label$5;
       case 2:
        label$14 : {
         label$15 : {
          if ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
           break label$15
          }
          FUNCTION_TABLE[HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 164 | 0) >> 2] | 0 | 0](HEAP32[($3_1 + 24 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0, 0);
          break label$14;
         }
         $93_1 = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 2] | 0;
         FUNCTION_TABLE[HEAP32[((HEAP32[$93_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($93_1, HEAP32[($3_1 + 24 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0, 0);
        }
        label$16 : {
         label$17 : {
          if ((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
           break label$17
          }
          FUNCTION_TABLE[HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 92 | 0) >> 2] | 0 | 0](HEAP32[($3_1 + 24 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0, 0);
          break label$16;
         }
         $117_1 = HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0;
         FUNCTION_TABLE[HEAP32[((HEAP32[$117_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($117_1, HEAP32[($3_1 + 24 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0, 0);
        }
       case 4:
        label$18 : {
         label$19 : {
          if ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
           break label$19
          }
          FUNCTION_TABLE[HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 164 | 0) >> 2] | 0 | 0](HEAP32[($3_1 + 24 | 0) >> 2] | 0, 4, HEAP32[($3_1 + 12 | 0) >> 2] | 0, 0);
          break label$18;
         }
         $140_1 = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 2] | 0;
         FUNCTION_TABLE[HEAP32[((HEAP32[$140_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($140_1, HEAP32[($3_1 + 24 | 0) >> 2] | 0, 4, HEAP32[($3_1 + 12 | 0) >> 2] | 0, 0);
        }
        label$20 : {
         label$21 : {
          if ((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
           break label$21
          }
          FUNCTION_TABLE[HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 92 | 0) >> 2] | 0 | 0](HEAP32[($3_1 + 24 | 0) >> 2] | 0, 4, HEAP32[($3_1 + 12 | 0) >> 2] | 0, 0);
          break label$20;
         }
         $162_1 = HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0;
         FUNCTION_TABLE[HEAP32[((HEAP32[$162_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($162_1, HEAP32[($3_1 + 24 | 0) >> 2] | 0, 4, HEAP32[($3_1 + 12 | 0) >> 2] | 0, 0);
        }
        $520(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
        $547(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
        break label$5;
       case 5:
        break label$6;
       default:
        break label$5;
       };
      }
      label$22 : {
       label$23 : {
        if ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
         break label$23
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 164 | 0) >> 2] | 0 | 0](HEAP32[($3_1 + 24 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0);
        break label$22;
       }
       $189_1 = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 2] | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$189_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($189_1, HEAP32[($3_1 + 24 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0);
      }
      label$24 : {
       label$25 : {
        if ((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
         break label$25
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 92 | 0) >> 2] | 0 | 0](HEAP32[($3_1 + 24 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0);
        break label$24;
       }
       $215_1 = HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$215_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($215_1, HEAP32[($3_1 + 24 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0);
      }
     }
     HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   $530($4_1 + 4 | 0 | 0);
   HEAP8[($4_1 + 28 | 0) >> 0] = 0;
  }
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $545($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $546($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 4 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $547($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($548($5_1 + 4 | 0 | 0, $4_1 + 8 | 0 | 0) | 0) & 1 | 0) {
    break label$1
   }
   $549($5_1 + 4 | 0 | 0, $4_1 + 8 | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $548($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4_1 >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP8[($4_1 + 15 | 0) >> 0] = 1 & 1 | 0;
      break label$1;
     }
     HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP8[($4_1 + 15 | 0) >> 0] = 0 & 1 | 0;
  }
  return (HEAPU8[($4_1 + 15 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $549($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $592(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $593($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $593($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $550($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0 | 0]($5_1) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $551($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $113($5_1 | 0) | 0;
  $499($5_1 + 4 | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 7196 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = 7196 + 24 | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $552($5_1 + 20 | 0 | 0) | 0;
  $501($5_1 + 40 | 0 | 0) | 0;
  $553($5_1 + 56 | 0 | 0) | 0;
  HEAP32[($5_1 + 72 | 0) >> 2] = $524($5_1 | 0, $5_1 + 20 | 0 | 0) | 0;
  $466($5_1 + 76 | 0 | 0) | 0;
  HEAP8[($5_1 + 88 | 0) >> 0] = 0;
  HEAP32[($5_1 + 92 | 0) >> 2] = 50;
  HEAP32[($5_1 + 96 | 0) >> 2] = 0;
  HEAPF32[($5_1 + 100 | 0) >> 2] = Math_fround(1.0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $552($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 7700 + 8 | 0;
  $501($4_1 + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $553($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 7760 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $554($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $45_1 = 0, $66_1 = 0, $75_1 = 0, $87_1 = 0, $106_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[$4_1 >> 2] = 7196 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 7196 + 24 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0) >>> 0 < ($555($4_1 + 40 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[($556($4_1 + 40 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    label$3 : {
     if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
     label$4 : {
      label$5 : while (1) {
       if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$4
       }
       HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
       $45_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       label$6 : {
        if (($45_1 | 0) == (0 | 0) & 1 | 0) {
         break label$6
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$45_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($45_1);
       }
       continue label$5;
      };
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
     label$7 : {
      label$8 : while (1) {
       if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$7
       }
       HEAP32[$3_1 >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[$3_1 >> 2] | 0) + 20 | 0) >> 2] | 0;
       $66_1 = HEAP32[$3_1 >> 2] | 0;
       label$9 : {
        if (($66_1 | 0) == (0 | 0) & 1 | 0) {
         break label$9
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$66_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($66_1);
       }
       continue label$8;
      };
     }
     $75_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
     label$10 : {
      if (($75_1 | 0) == (0 | 0) & 1 | 0) {
       break label$10
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[$75_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($75_1);
     }
    }
    HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $87_1 = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
  label$11 : {
   if (($87_1 | 0) == (0 | 0) & 1 | 0) {
    break label$11
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$87_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($87_1);
  }
  $478($4_1 + 76 | 0 | 0) | 0;
  $557($4_1 + 56 | 0 | 0) | 0;
  $505($4_1 + 40 | 0 | 0) | 0;
  $558($4_1 + 20 | 0 | 0) | 0;
  $507($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  $106_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $106_1 | 0;
 }
 
 function $555($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $556($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $557($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 7760 + 8 | 0;
  $559($4_1 | 0);
  $560($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $558($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 7700 + 8 | 0;
  $561($4_1 + 4 | 0 | 0);
  $505($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $559($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $584($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $560($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $612(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $561($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($555(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($556(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $594(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $562($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = FUNCTION_TABLE[55 | 0]($4_1 + -4 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $563($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[55 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $564($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $563((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + -4 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $565($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0, $40_1 = 0, $183_1 = Math_fround(0), $74_1 = 0, $75_1 = 0, $89_1 = 0, $149_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 40 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 100 | 0) >> 2]));
  HEAP32[($4_1 + 36 | 0) >> 2] = 0;
  HEAP32[($4_1 + 32 | 0) >> 2] = $555($5_1 + 40 | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 36 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($556($5_1 + 40 | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
       break label$4
      }
      break label$3;
     }
     HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
     HEAPF32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 64 | 0) >> 2]);
     HEAPF32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 76 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 80 | 0) >> 2]);
     HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 88 | 0) >> 2]));
     label$5 : {
      if (!(Math_fround(HEAPF32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 68 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
       break label$5
      }
      $40_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
      HEAPF32[($40_1 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($40_1 + 68 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]));
      label$6 : {
       if (!(Math_fround(HEAPF32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 68 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
        break label$6
       }
       break label$3;
      }
      HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 68 | 0) >> 2]));
      HEAPF32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 68 | 0) >> 2] = Math_fround(0 | 0);
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
     label$7 : {
      label$8 : {
       if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$8
       }
       HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 76 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 68 | 0) >> 2]));
       label$9 : {
        if (!(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]) >= Math_fround(0 | 0) & 1 | 0)) {
         break label$9
        }
        HEAPF32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 68 | 0) >> 2] = Math_fround(0 | 0);
        label$10 : {
         label$11 : {
          if (!(Math_fround(HEAPF32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 88 | 0) >> 2]) == Math_fround(0 | 0) & 1 | 0)) {
           break label$11
          }
          $183_1 = Math_fround(0 | 0);
          break label$10;
         }
         $183_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]) / Math_fround(HEAPF32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 88 | 0) >> 2])) + Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2])) * Math_fround(HEAPF32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 88 | 0) >> 2]));
        }
        $74_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
        HEAPF32[($74_1 + 72 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($74_1 + 72 | 0) >> 2]) + $183_1);
        $75_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
        HEAPF32[($75_1 + 72 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($75_1 + 72 | 0) >> 2]) + Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]));
        $566($5_1 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0);
        label$12 : {
         label$13 : while (1) {
          if (!((HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$12
          }
          $89_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
          HEAPF32[($89_1 + 96 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($89_1 + 96 | 0) >> 2]) + Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]));
          HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
          continue label$13;
         };
        }
        break label$3;
       }
       break label$7;
      }
      label$14 : {
       if (!(Math_fround(HEAPF32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 76 | 0) >> 2]) >= Math_fround(HEAPF32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 84 | 0) >> 2]) & 1 | 0)) {
        break label$14
       }
       if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
        break label$14
       }
       HEAP32[($556($5_1 + 40 | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] = 0;
       $540(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
       $567($5_1 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
       break label$3;
      }
     }
     label$15 : {
      if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$15
      }
      if (!(($568($5_1 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]))) | 0) & 1 | 0)) {
       break label$15
      }
      HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
      HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] = 0;
      label$16 : {
       if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$16
       }
       HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 28 | 0) >> 2] = 0;
      }
      label$17 : {
       label$18 : while (1) {
        if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$17
        }
        $540(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
        HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
        continue label$18;
       };
      }
     }
     $149_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
     HEAPF32[($149_1 + 72 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($149_1 + 72 | 0) >> 2]) + Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]));
    }
    HEAP32[($4_1 + 36 | 0) >> 2] = (HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $544(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 48 | 0;
  return;
 }
 
 function $566($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $49_1 = 0, $11_1 = 0, $64_1 = Math_fround(0);
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP8[($6_1 + 19 | 0) >> 0] = $3_1;
  $8_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $569($8_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $11_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  HEAP32[($556($8_1 + 40 | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] = $11_1;
  label$1 : {
   if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!((HEAPU8[($6_1 + 19 | 0) >> 0] | 0) & 1 | 0)) {
     break label$2
    }
    $539(HEAP32[($8_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
   }
   HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
   HEAPF32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 96 | 0) >> 2] = Math_fround(0 | 0);
   label$3 : {
    if (!((HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    if (!(Math_fround(HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 100 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
     break label$3
    }
    $64_1 = Math_fround($518(Math_fround(Math_fround(1.0)), Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2]) / Math_fround(HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 100 | 0) >> 2])))));
    $49_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
    HEAPF32[($49_1 + 104 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($49_1 + 104 | 0) >> 2]) * $64_1);
   }
   $508((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 148 | 0 | 0);
  }
  $533(HEAP32[($8_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $567($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$1
    }
    $541(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
    continue label$2;
   };
  }
  HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $568($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $5_1 = 0, $6_1 = 0, $69_1 = 0, $70_1 = 0, $76_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 16 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP8[($5_1 + 31 | 0) >> 0] = 1 & 1 | 0;
    break label$1;
   }
   HEAP8[($5_1 + 11 | 0) >> 0] = ($568($6_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]))) | 0) & 1 | 0;
   HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 60 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2]);
   HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 76 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 80 | 0) >> 2]);
   label$3 : {
    if (!(Math_fround(HEAPF32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 96 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
     break label$3
    }
    if (!(Math_fround(HEAPF32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 96 | 0) >> 2]) >= Math_fround(HEAPF32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 100 | 0) >> 2]) & 1 | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (Math_fround(HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 108 | 0) >> 2]) == Math_fround(0 | 0) & 1 | 0) {
       break label$5
      }
      if (!(Math_fround(HEAPF32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 100 | 0) >> 2]) == Math_fround(0 | 0) & 1 | 0)) {
       break label$4
      }
     }
     HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
     label$6 : {
      if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     }
     HEAPF32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 104 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 104 | 0) >> 2]);
     $540(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
    }
    HEAP8[($5_1 + 31 | 0) >> 0] = (HEAPU8[($5_1 + 11 | 0) >> 0] | 0) & 1 | 0;
    break label$1;
   }
   $69_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   HEAPF32[($69_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 88 | 0) >> 2])) + Math_fround(HEAPF32[($69_1 + 72 | 0) >> 2]));
   $70_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
   HEAPF32[($70_1 + 96 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($70_1 + 96 | 0) >> 2]) + Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]));
   HEAP8[($5_1 + 31 | 0) >> 0] = 0 & 1 | 0;
  }
  $76_1 = (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) & 1 | 0;
  global$0 = $5_1 + 32 | 0;
  return $76_1 | 0;
 }
 
 function $569($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $34_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < ($555($5_1 + 40 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($556($5_1 + 40 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 >= ($555($5_1 + 40 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = 0;
     $549($5_1 + 40 | 0 | 0, $4_1 | 0);
     continue label$4;
    };
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $34_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $34_1 | 0;
 }
 
 function $570($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $42_1 = 0, $105_1 = 0, $176_1 = 0, $180_1 = 0, $206_1 = 0, $235_1 = Math_fround(0), $134_1 = 0, $138_1 = 0, $229_1 = 0;
  $4_1 = global$0 - 96 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 88 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAPU8[($5_1 + 88 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   $571($5_1 | 0);
  }
  HEAP8[($4_1 + 87 | 0) >> 0] = 0;
  HEAP32[($4_1 + 80 | 0) >> 2] = 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = $555($5_1 + 40 | 0 | 0) | 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($4_1 + 80 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 76 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 72 | 0) >> 2] = HEAP32[($556($5_1 + 40 | 0 | 0, HEAP32[($4_1 + 80 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    label$4 : {
     label$5 : {
      label$6 : {
       if ((HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
        break label$6
       }
       if (!(Math_fround(HEAPF32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 68 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
        break label$5
       }
      }
      break label$4;
     }
     HEAP32[($4_1 + 68 | 0) >> 2] = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
     HEAP8[($4_1 + 87 | 0) >> 0] = 1;
     label$7 : {
      label$8 : {
       if (HEAP32[($4_1 + 80 | 0) >> 2] | 0) {
        break label$8
       }
       $42_1 = 1;
       break label$7;
      }
      $42_1 = HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 112 | 0) >> 2] | 0;
     }
     HEAP32[($4_1 + 64 | 0) >> 2] = $42_1;
     HEAPF32[($4_1 + 60 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 92 | 0) >> 2]);
     label$9 : {
      label$10 : {
       if (!((HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$10
       }
       $235_1 = Math_fround($572($5_1 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0));
       HEAPF32[($4_1 + 60 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 60 | 0) >> 2]) * $235_1);
       break label$9;
      }
      label$11 : {
       if (!(Math_fround(HEAPF32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 72 | 0) >> 2]) >= Math_fround(HEAPF32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 84 | 0) >> 2]) & 1 | 0)) {
        break label$11
       }
       if (!((HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
        break label$11
       }
       HEAPF32[($4_1 + 60 | 0) >> 2] = Math_fround(0 | 0);
      }
     }
     HEAPF32[($4_1 + 56 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 60 | 0) >> 2]);
     HEAPF32[($4_1 + 52 | 0) >> 2] = Math_fround($517(HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0));
     HEAP32[($4_1 + 48 | 0) >> 2] = $467((HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
     HEAP32[($4_1 + 44 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 4 | 0;
     label$12 : {
      label$13 : {
       label$14 : {
        label$15 : {
         if (HEAP32[($4_1 + 80 | 0) >> 2] | 0) {
          break label$15
         }
         if (Math_fround(HEAPF32[($4_1 + 60 | 0) >> 2]) == Math_fround(1.0) & 1 | 0) {
          break label$14
         }
        }
        if (!((HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
         break label$13
        }
       }
       HEAP32[($4_1 + 40 | 0) >> 2] = 0;
       label$16 : {
        label$17 : while (1) {
         if (!((HEAP32[($4_1 + 40 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 48 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
          break label$16
         }
         $105_1 = HEAP32[($468(HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
         FUNCTION_TABLE[HEAP32[((HEAP32[$105_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($105_1, HEAP32[($4_1 + 88 | 0) >> 2] | 0, Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]), Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]), $5_1 + 56 | 0, Math_fround(HEAPF32[($4_1 + 60 | 0) >> 2]), HEAP32[($4_1 + 64 | 0) >> 2] | 0, 0);
         HEAP32[($4_1 + 40 | 0) >> 2] = (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1 | 0;
         continue label$17;
        };
       }
       break label$12;
      }
      HEAP32[($4_1 + 36 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 116 | 0;
      HEAP8[($4_1 + 35 | 0) >> 0] = ($488((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 148 | 0 | 0) | 0 | 0) == (0 | 0) & 1 | 0;
      label$18 : {
       if (!((HEAPU8[($4_1 + 35 | 0) >> 0] | 0) & 1 | 0)) {
        break label$18
       }
       $134_1 = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 148 | 0;
       $138_1 = ($467(HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) | 0) << 1 | 0;
       HEAPF32[($4_1 + 28 | 0) >> 2] = Math_fround(0 | 0);
       $573($134_1 | 0, $138_1 | 0, $4_1 + 28 | 0 | 0);
      }
      HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 148 | 0;
      HEAP32[($4_1 + 20 | 0) >> 2] = 0;
      label$19 : {
       label$20 : while (1) {
        if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 48 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
         break label$19
        }
        HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($468(HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
        label$21 : {
         if ((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
          break label$21
         }
         fimport$0(4760 | 0, 3184 | 0, 441 | 0, 1205 | 0);
         wasm2js_trap();
        }
        label$22 : {
         label$23 : {
          if ((HEAP32[($574(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) & 3 | 0) {
           break label$23
          }
          $176_1 = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
          break label$22;
         }
         $176_1 = 0;
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = $176_1;
        HEAP32[($4_1 + 8 | 0) >> 2] = 0;
        $180_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
        label$24 : {
         if (!(($1161(FUNCTION_TABLE[HEAP32[((HEAP32[$180_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($180_1) | 0 | 0, 26484 | 0) | 0) & 1 | 0)) {
          break label$24
         }
         HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
        }
        label$25 : {
         label$26 : {
          if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$26
          }
          $575(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 60 | 0) >> 2])), HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 1 | 0 | 0, (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) & 1 | 0 | 0);
          break label$25;
         }
         $206_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
         FUNCTION_TABLE[HEAP32[((HEAP32[$206_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($206_1, HEAP32[($4_1 + 88 | 0) >> 2] | 0, Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]), Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]), $5_1 + 56 | 0, Math_fround(HEAPF32[($4_1 + 60 | 0) >> 2]), HEAP32[($4_1 + 12 | 0) >> 2] | 0, 0);
        }
        HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
        continue label$20;
       };
      }
     }
     $576($5_1 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2])));
     $559($5_1 + 56 | 0 | 0);
     HEAPF32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 64 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]);
     HEAPF32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 80 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 72 | 0) >> 2]);
    }
    HEAP32[($4_1 + 80 | 0) >> 2] = (HEAP32[($4_1 + 80 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  $544(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0);
  $229_1 = (HEAPU8[($4_1 + 87 | 0) >> 0] | 0) & 1 | 0;
  global$0 = $4_1 + 96 | 0;
  return $229_1 | 0;
 }
 
 function $571($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  HEAP8[($4_1 + 88 | 0) >> 0] = 0;
  $481($4_1 + 76 | 0 | 0);
  HEAP32[($3_1 + 24 | 0) >> 2] = 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $555($4_1 + 40 | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 20 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[($556($4_1 + 40 | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      if ((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$4
      }
      break label$3;
     }
     label$5 : {
      label$6 : while (1) {
       if (!((HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$5
       }
       HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
       continue label$6;
      };
     }
     label$7 : while (1) {
      label$8 : {
       label$9 : {
        if ((HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
         break label$9
        }
        if (!((HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 112 | 0) >> 2] | 0 | 0) != (3 | 0) & 1 | 0)) {
         break label$8
        }
       }
       $577($4_1 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0);
      }
      HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
      if ((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       continue label$7
      }
      break label$7;
     };
    }
    HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $481($4_1 + 76 | 0 | 0);
  HEAP32[($3_1 + 12 | 0) >> 2] = ($555($4_1 + 40 | 0 | 0) | 0) - 1 | 0;
  label$10 : {
   label$11 : while (1) {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$10
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($556($4_1 + 40 | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    label$12 : {
     label$13 : while (1) {
      if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$12
      }
      $578($4_1 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
      HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
      continue label$13;
     };
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + -1 | 0;
    continue label$11;
   };
  }
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $572($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $54_1 = 0, $93_1 = 0, $156_1 = 0, $162_1 = 0, $186_1 = 0, $204_1 = 0, $205_1 = 0, $224_1 = 0, $248_1 = 0, $260_1 = 0, $124_1 = 0, $128_1 = 0, $338_1 = Math_fround(0);
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 100 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 96 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 108 | 0) >> 2] | 0;
  HEAP32[($6_1 + 92 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 104 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   Math_fround($572($7_1 | 0, HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 96 | 0) >> 2] | 0 | 0));
  }
  label$2 : {
   label$3 : {
    if (!(Math_fround(HEAPF32[((HEAP32[($6_1 + 104 | 0) >> 2] | 0) + 100 | 0) >> 2]) == Math_fround(0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF32[($6_1 + 88 | 0) >> 2] = Math_fround(1.0);
    label$4 : {
     if (!((HEAP32[($6_1 + 96 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($6_1 + 96 | 0) >> 2] = 0;
    }
    break label$2;
   }
   HEAPF32[($6_1 + 88 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 104 | 0) >> 2] | 0) + 96 | 0) >> 2]) / Math_fround(HEAPF32[((HEAP32[($6_1 + 104 | 0) >> 2] | 0) + 100 | 0) >> 2]));
   label$5 : {
    if (!(Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2]) > Math_fround(1.0) & 1 | 0)) {
     break label$5
    }
    HEAPF32[($6_1 + 88 | 0) >> 2] = Math_fround(1.0);
   }
   label$6 : {
    if (!((HEAP32[($6_1 + 96 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($6_1 + 96 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 112 | 0) >> 2] | 0;
   }
  }
  label$7 : {
   label$8 : {
    if (!(Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2]) < Math_fround(HEAPF32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 40 | 0) >> 2]) & 1 | 0)) {
     break label$8
    }
    $54_1 = $7_1 + 56 | 0;
    break label$7;
   }
   $54_1 = 0;
  }
  HEAP32[($6_1 + 84 | 0) >> 2] = $54_1;
  HEAP8[($6_1 + 83 | 0) >> 0] = Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2]) < Math_fround(HEAPF32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 44 | 0) >> 2]) & 1 | 0;
  HEAP8[($6_1 + 82 | 0) >> 0] = Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2]) < Math_fround(HEAPF32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 48 | 0) >> 2]) & 1 | 0;
  HEAPF32[($6_1 + 76 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 60 | 0) >> 2]);
  HEAPF32[($6_1 + 72 | 0) >> 2] = Math_fround($517(HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0));
  HEAP32[($6_1 + 68 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 4 | 0;
  HEAP32[($6_1 + 64 | 0) >> 2] = $467(HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) | 0;
  HEAPF32[($6_1 + 60 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 92 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($6_1 + 104 | 0) >> 2] | 0) + 104 | 0) >> 2]));
  HEAPF32[($6_1 + 56 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 60 | 0) >> 2]) * Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2])));
  label$9 : {
   label$10 : {
    if (!((HEAP32[($6_1 + 96 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
     break label$10
    }
    HEAP32[($6_1 + 52 | 0) >> 2] = 0;
    label$11 : {
     label$12 : while (1) {
      if (!((HEAP32[($6_1 + 52 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 64 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$11
      }
      $93_1 = HEAP32[($468(HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$93_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($93_1, HEAP32[($6_1 + 100 | 0) >> 2] | 0, Math_fround(HEAPF32[($6_1 + 76 | 0) >> 2]), Math_fround(HEAPF32[($6_1 + 72 | 0) >> 2]), HEAP32[($6_1 + 84 | 0) >> 2] | 0, Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2]), HEAP32[($6_1 + 96 | 0) >> 2] | 0, 1);
      HEAP32[($6_1 + 52 | 0) >> 2] = (HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 1 | 0;
      continue label$12;
     };
    }
    break label$9;
   }
   HEAP32[($6_1 + 48 | 0) >> 2] = (HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 116 | 0;
   HEAP32[($6_1 + 44 | 0) >> 2] = (HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 132 | 0;
   HEAP8[($6_1 + 43 | 0) >> 0] = ($488((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 148 | 0 | 0) | 0 | 0) == (0 | 0) & 1 | 0;
   label$13 : {
    if (!((HEAPU8[($6_1 + 43 | 0) >> 0] | 0) & 1 | 0)) {
     break label$13
    }
    $124_1 = (HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 148 | 0;
    $128_1 = ($467(HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) | 0) << 1 | 0;
    HEAPF32[($6_1 + 36 | 0) >> 2] = Math_fround(0 | 0);
    $573($124_1 | 0, $128_1 | 0, $6_1 + 36 | 0 | 0);
   }
   HEAP32[($6_1 + 32 | 0) >> 2] = (HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 148 | 0;
   HEAPF32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 108 | 0) >> 2] = Math_fround(0 | 0);
   HEAP32[($6_1 + 28 | 0) >> 2] = 0;
   label$14 : {
    label$15 : while (1) {
     if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 64 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$14
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[($468(HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = 1;
     $156_1 = (HEAP32[($574(HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) & 3 | 0;
     label$16 : {
      label$17 : {
       label$18 : {
        switch ($156_1 | 0) {
        case 0:
         HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 96 | 0) >> 2] | 0;
         label$22 : {
          if ((HEAPU8[($6_1 + 83 | 0) >> 0] | 0) & 1 | 0) {
           break label$22
          }
          $162_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
          if (!(($1161(FUNCTION_TABLE[HEAP32[((HEAP32[$162_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($162_1) | 0 | 0, 26232 | 0) | 0) & 1 | 0)) {
           break label$22
          }
          label$23 : {
           if (!(((HEAP32[($574(HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) & 4 | 0 | 0) == (4 | 0) & 1 | 0)) {
            break label$23
           }
           break label$16;
          }
          HEAP32[($6_1 + 16 | 0) >> 2] = 0;
         }
         label$24 : {
          if ((HEAPU8[($6_1 + 82 | 0) >> 0] | 0) & 1 | 0) {
           break label$24
          }
          $186_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
          if (!(($1161(FUNCTION_TABLE[HEAP32[((HEAP32[$186_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($186_1) | 0 | 0, 26332 | 0) | 0) & 1 | 0)) {
           break label$24
          }
          break label$16;
         }
         HEAPF32[($6_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2]);
         break label$17;
        case 1:
         HEAP32[($6_1 + 16 | 0) >> 2] = 0;
         HEAPF32[($6_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2]);
         break label$17;
        case 2:
         HEAP32[($6_1 + 16 | 0) >> 2] = 0;
         HEAPF32[($6_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($6_1 + 60 | 0) >> 2]);
         break label$17;
        default:
         break label$18;
        };
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = 0;
       HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($556(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
       HEAPF32[($6_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 60 | 0) >> 2]) * Math_fround($579(Math_fround(Math_fround(0 | 0)), Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 96 | 0) >> 2]) / Math_fround(HEAPF32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 100 | 0) >> 2])))))));
      }
      $204_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
      HEAPF32[($204_1 + 108 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($204_1 + 108 | 0) >> 2]) + Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]));
      $205_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        if (!(($1161(FUNCTION_TABLE[HEAP32[((HEAP32[$205_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($205_1) | 0 | 0, 26484 | 0) | 0) & 1 | 0)) {
         break label$26
        }
        $575(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 72 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2])), HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 1 | 0 | 0, (HEAPU8[($6_1 + 43 | 0) >> 0] | 0) & 1 | 0 | 0);
        break label$25;
       }
       label$27 : {
        if (HEAP32[($6_1 + 16 | 0) >> 2] | 0) {
         break label$27
        }
        $224_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
        label$28 : {
         label$29 : {
          if (!(($1161(FUNCTION_TABLE[HEAP32[((HEAP32[$224_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($224_1) | 0 | 0, 26232 | 0) | 0) & 1 | 0)) {
           break label$29
          }
          label$30 : {
           label$31 : {
            if ((HEAPU8[($6_1 + 83 | 0) >> 0] | 0) & 1 | 0) {
             break label$31
            }
            if (!(((HEAP32[($574(HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) & 4 | 0 | 0) == (4 | 0) & 1 | 0)) {
             break label$30
            }
           }
           HEAP32[($6_1 + 20 | 0) >> 2] = 0;
          }
          break label$28;
         }
         $248_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
         label$32 : {
          if (!(($1161(FUNCTION_TABLE[HEAP32[((HEAP32[$248_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($248_1) | 0 | 0, 26332 | 0) | 0) & 1 | 0)) {
           break label$32
          }
          label$33 : {
           if (!((HEAPU8[($6_1 + 82 | 0) >> 0] | 0) & 1 | 0)) {
            break label$33
           }
           HEAP32[($6_1 + 20 | 0) >> 2] = 0;
          }
         }
        }
       }
       $260_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$260_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($260_1, HEAP32[($6_1 + 100 | 0) >> 2] | 0, Math_fround(HEAPF32[($6_1 + 76 | 0) >> 2]), Math_fround(HEAPF32[($6_1 + 72 | 0) >> 2]), HEAP32[($6_1 + 84 | 0) >> 2] | 0, Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]), HEAP32[($6_1 + 16 | 0) >> 2] | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0);
      }
     }
     HEAP32[($6_1 + 28 | 0) >> 2] = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 1 | 0;
     continue label$15;
    };
   }
  }
  label$34 : {
   if (!(Math_fround(HEAPF32[((HEAP32[($6_1 + 104 | 0) >> 2] | 0) + 100 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
    break label$34
   }
   $576($7_1 | 0, HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 72 | 0) >> 2])));
  }
  $559($7_1 + 56 | 0 | 0);
  HEAPF32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 64 | 0) >> 2] = Math_fround(HEAPF32[($6_1 + 72 | 0) >> 2]);
  HEAPF32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 80 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 72 | 0) >> 2]);
  $338_1 = Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2]);
  global$0 = $6_1 + 112 | 0;
  return Math_fround($338_1);
 }
 
 function $573($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $75_1 = Math_fround(0), $31_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 >= 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5689 | 0, 4142 | 0, 76 | 0, 4598 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$2 : {
   if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   $75_1 = Math_fround(Math_fround((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
   label$3 : {
    label$4 : {
     if (!(Math_fround(Math_abs($75_1)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $31_1 = ~~$75_1;
     break label$3;
    }
    $31_1 = -2147483648;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $31_1;
   label$5 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = 8;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $580(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 82 | 0) | 0;
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$6
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$7
     }
     $581($6_1 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $574($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $575($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $27_1 = 0, $22_1 = 0, $35_1 = 0, $50_1 = 0, $218_1 = Math_fround(0), $84_1 = 0, $91_1 = 0, $92_1 = 0, $242_1 = Math_fround(0), $243_1 = Math_fround(0), $322_1 = 0.0, $106_1 = 0, $327_1 = 0.0, $118_1 = 0, $332_1 = 0.0, $128_1 = 0, $315_1 = Math_fround(0), $337_1 = 0.0, $196_1 = 0, $308_1 = Math_fround(0), $309_1 = Math_fround(0);
  $10_1 = global$0 - 96 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 88 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 84 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 80 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 76 | 0) >> 2] = $4_1;
  HEAP32[($10_1 + 72 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 68 | 0) >> 2] = $6_1;
  HEAP8[($10_1 + 67 | 0) >> 0] = $7_1;
  label$1 : {
   if (!((HEAPU8[($10_1 + 67 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF32[($15(HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 68 | 0) >> 2] | 0 | 0) | 0) >> 2] = Math_fround(0 | 0);
  }
  label$2 : {
   label$3 : {
    if (!(Math_fround(HEAPF32[($10_1 + 80 | 0) >> 2]) == Math_fround(1.0) & 1 | 0)) {
     break label$3
    }
    $22_1 = HEAP32[($10_1 + 92 | 0) >> 2] | 0;
    $27_1 = 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$22_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($22_1, HEAP32[($10_1 + 88 | 0) >> 2] | 0, Math_fround($27_1 | 0), Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2]), $27_1, Math_fround(1.0), HEAP32[($10_1 + 76 | 0) >> 2] | 0, $27_1);
    break label$2;
   }
   HEAP32[($10_1 + 60 | 0) >> 2] = HEAP32[($139((HEAP32[($10_1 + 88 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[((HEAP32[($10_1 + 92 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
   $35_1 = HEAP32[($10_1 + 60 | 0) >> 2] | 0;
   label$4 : {
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$35_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($35_1) | 0) & 1 | 0) {
     break label$4
    }
    break label$2;
   }
   HEAP32[($10_1 + 56 | 0) >> 2] = (HEAP32[($10_1 + 92 | 0) >> 2] | 0) + 24 | 0;
   label$5 : {
    label$6 : {
     if (!(Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2]) < Math_fround(HEAPF32[($15(HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0, 0 | 0) | 0) >> 2]) & 1 | 0)) {
      break label$6
     }
     $50_1 = HEAP32[($10_1 + 76 | 0) >> 2] | 0;
     label$7 : {
      switch ($50_1 | 0) {
      case 0:
       HEAPF32[((HEAP32[($10_1 + 60 | 0) >> 2] | 0) + 40 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 36 | 0) >> 2]);
      default:
       break label$2;
      case 1:
       break label$7;
      };
     }
     HEAPF32[($10_1 + 52 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 60 | 0) >> 2] | 0) + 40 | 0) >> 2]);
     HEAPF32[($10_1 + 48 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 36 | 0) >> 2]);
     break label$5;
    }
    label$10 : {
     label$11 : {
      if (HEAP32[($10_1 + 76 | 0) >> 2] | 0) {
       break label$11
      }
      $218_1 = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 36 | 0) >> 2]);
      break label$10;
     }
     $218_1 = Math_fround(HEAPF32[((HEAP32[($10_1 + 60 | 0) >> 2] | 0) + 40 | 0) >> 2]);
    }
    HEAPF32[($10_1 + 52 | 0) >> 2] = $218_1;
    label$12 : {
     label$13 : {
      if (!(Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2]) >= Math_fround(HEAPF32[($15(HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0, ($488(HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0) | 0) - 2 | 0 | 0) | 0) >> 2]) & 1 | 0)) {
       break label$13
      }
      HEAPF32[($10_1 + 48 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 36 | 0) >> 2]) + Math_fround(HEAPF32[($15(HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0, ($488(HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0) | 0) + -1 | 0 | 0) | 0) >> 2]));
      break label$12;
     }
     HEAP32[($10_1 + 44 | 0) >> 2] = $487(HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2])), 2 | 0) | 0;
     $84_1 = -1;
     HEAPF32[($10_1 + 40 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0, (HEAP32[($10_1 + 44 | 0) >> 2] | 0) + $84_1 | 0 | 0) | 0) >> 2]);
     HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) | 0) >> 2]);
     $91_1 = HEAP32[($10_1 + 44 | 0) >> 2] | 0;
     $92_1 = 1;
     HEAPF32[($10_1 + 32 | 0) >> 2] = Math_fround($843(HEAP32[($10_1 + 92 | 0) >> 2] | 0 | 0, ($91_1 >> $92_1 | 0) + $84_1 | 0 | 0, Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2])) / Math_fround(Math_fround(HEAPF32[($15(HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0, $91_1 + -2 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2])))))));
     HEAPF32[($10_1 + 48 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($15(HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0, (HEAP32[($10_1 + 44 | 0) >> 2] | 0) + $92_1 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]));
     $242_1 = Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]);
     $243_1 = Math_fround(360.0);
     $322_1 = 16384.499999999996 - +Math_fround($242_1 / $243_1);
     label$14 : {
      label$15 : {
       if (!(Math_abs($322_1) < 2147483648.0)) {
        break label$15
       }
       $106_1 = ~~$322_1;
       break label$14;
      }
      $106_1 = -2147483648;
     }
     HEAPF32[($10_1 + 48 | 0) >> 2] = Math_fround($242_1 - Math_fround(Math_imul(16384 - $106_1 | 0, 360) | 0));
     HEAPF32[($10_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 36 | 0) >> 2]));
     $327_1 = 16384.499999999996 - +Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) / $243_1);
     label$16 : {
      label$17 : {
       if (!(Math_abs($327_1) < 2147483648.0)) {
        break label$17
       }
       $118_1 = ~~$327_1;
       break label$16;
      }
      $118_1 = -2147483648;
     }
     HEAPF32[($10_1 + 48 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) - Math_fround(Math_imul(16384 - $118_1 | 0, 360) | 0));
    }
   }
   HEAPF32[($10_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2]));
   $332_1 = 16384.499999999996 - +Math_fround(Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]) / Math_fround(360.0));
   label$18 : {
    label$19 : {
     if (!(Math_abs($332_1) < 2147483648.0)) {
      break label$19
     }
     $128_1 = ~~$332_1;
     break label$18;
    }
    $128_1 = -2147483648;
   }
   HEAPF32[($10_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]) - Math_fround(Math_imul(16384 - $128_1 | 0, 360) | 0));
   label$20 : {
    label$21 : {
     if (!(Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]) == Math_fround(0 | 0) & 1 | 0)) {
      break label$21
     }
     HEAPF32[($10_1 + 28 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 68 | 0) >> 2] | 0 | 0) | 0) >> 2]);
     break label$20;
    }
    label$22 : {
     label$23 : {
      if (!((HEAPU8[($10_1 + 67 | 0) >> 0] | 0) & 1 | 0)) {
       break label$23
      }
      HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(0 | 0);
      HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]);
      break label$22;
     }
     HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 68 | 0) >> 2] | 0 | 0) | 0) >> 2]);
     HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0, (HEAP32[($10_1 + 68 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
    }
    HEAP8[($10_1 + 15 | 0) >> 0] = Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0;
    HEAP8[($10_1 + 14 | 0) >> 0] = Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]) >= Math_fround(0 | 0) & 1 | 0;
    label$24 : {
     if (!(Math_fround($1015(Math_fround(Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])))) != Math_fround($1015(Math_fround(Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2])))) & 1 | 0)) {
      break label$24
     }
     if (!(Math_fround($1014(Math_fround(Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])))) <= Math_fround(90.0) & 1 | 0)) {
      break label$24
     }
     label$25 : {
      if (!(Math_fround($1014(Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])))) > Math_fround(180.0) & 1 | 0)) {
       break label$25
      }
      HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($1015(Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])))) * Math_fround(360.0)) + Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]));
     }
     HEAP8[($10_1 + 14 | 0) >> 0] = (HEAPU8[($10_1 + 15 | 0) >> 0] | 0) & 1 | 0;
    }
    HEAPF32[($10_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) - Math_fround($1017(Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])), Math_fround(Math_fround(360.0)))));
    label$26 : {
     if (!(((HEAPU8[($10_1 + 14 | 0) >> 0] | 0) & 1 | 0 | 0) != ((HEAPU8[($10_1 + 15 | 0) >> 0] | 0) & 1 | 0 | 0) & 1 | 0)) {
      break label$26
     }
     HEAPF32[($10_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround($1015(Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])))) * Math_fround(360.0)) + Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]));
    }
    $308_1 = Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]);
    HEAPF32[($15(HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 68 | 0) >> 2] | 0 | 0) | 0) >> 2] = $308_1;
   }
   $309_1 = Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]);
   HEAPF32[($15(HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0, (HEAP32[($10_1 + 68 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $309_1;
   HEAPF32[($10_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 80 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2]));
   $315_1 = Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2]);
   $337_1 = 16384.499999999996 - +Math_fround($315_1 / Math_fround(360.0));
   label$27 : {
    label$28 : {
     if (!(Math_abs($337_1) < 2147483648.0)) {
      break label$28
     }
     $196_1 = ~~$337_1;
     break label$27;
    }
    $196_1 = -2147483648;
   }
   HEAPF32[((HEAP32[($10_1 + 60 | 0) >> 2] | 0) + 40 | 0) >> 2] = Math_fround($315_1 - Math_fround(Math_imul(16384 - $196_1 | 0, 360) | 0));
  }
  global$0 = $10_1 + 96 | 0;
  return;
 }
 
 function $576($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $5_1 = 0, $6_1 = 0, $50_1 = 0, $60_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 52 | 0) >> 2]);
  HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2]);
  HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]));
  HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround($1017(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 76 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]))));
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $582($6_1 + 56 | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($583($6_1 + 56 | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    label$3 : {
     if (!(Math_fround(HEAPF32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2]) < Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]) & 1 | 0)) {
      break label$3
     }
     break label$1;
    }
    label$4 : {
     label$5 : {
      if (!(Math_fround(HEAPF32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2]) > Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]) & 1 | 0)) {
       break label$5
      }
      break label$4;
     }
     $543(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP8[($5_1 + 7 | 0) >> 0] = 0;
  label$6 : {
   label$7 : {
    if (!((HEAPU8[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 36 | 0) >> 0] | 0) & 1 | 0)) {
     break label$7
    }
    $50_1 = 1;
    label$8 : {
     if (Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) == Math_fround(0 | 0) & 1 | 0) {
      break label$8
     }
     $50_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]) > Math_fround($1017(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 72 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]))));
    }
    HEAP8[($5_1 + 7 | 0) >> 0] = $50_1 & 1 | 0;
    break label$6;
   }
   $60_1 = 0;
   label$9 : {
    if (!(Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]) >= Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]) & 1 | 0)) {
     break label$9
    }
    $60_1 = Math_fround(HEAPF32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 60 | 0) >> 2]) < Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]);
   }
   HEAP8[($5_1 + 7 | 0) >> 0] = $60_1 & 1 | 0;
  }
  label$10 : {
   if (!((HEAPU8[($5_1 + 7 | 0) >> 0] | 0) & 1 | 0)) {
    break label$10
   }
   $542(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0);
  }
  label$11 : {
   label$12 : while (1) {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$11
    }
    HEAP32[$5_1 >> 2] = HEAP32[($583($6_1 + 56 | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    label$13 : {
     label$14 : {
      if (!(Math_fround(HEAPF32[((HEAP32[$5_1 >> 2] | 0) + 8 | 0) >> 2]) < Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]) & 1 | 0)) {
       break label$14
      }
      break label$13;
     }
     $543(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($583($6_1 + 56 | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0);
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$12;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $577($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $54_1 = 0, $94_1 = 0, $126_1 = 0, $134_1 = 0, $142_1 = 0, $17_1 = 0, $18_1 = 0, $26_1 = 0, $27_1 = 0, $184_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 72 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
  HEAP32[($4_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
  HEAP32[($4_1 + 64 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 4 | 0;
  HEAP32[($4_1 + 60 | 0) >> 2] = $467(HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 56 | 0) >> 2] = (HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 116 | 0;
  $17_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
  $18_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
  HEAP32[($4_1 + 52 | 0) >> 2] = 0;
  $595($17_1 | 0, $18_1 | 0, $4_1 + 52 | 0 | 0);
  HEAP32[($4_1 + 48 | 0) >> 2] = (HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 132 | 0;
  $26_1 = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
  $27_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
  HEAP32[($4_1 + 44 | 0) >> 2] = 0;
  $596($26_1 | 0, $27_1 | 0, $4_1 + 44 | 0 | 0);
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAPU8[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 37 | 0) >> 0] | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 40 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($4_1 + 40 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 60 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$3
      }
      $54_1 = HEAP32[($468(HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
      HEAP32[($4_1 + 36 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$54_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($54_1) | 0;
      label$5 : {
       if (($475($5_1 + 76 | 0 | 0, $4_1 + 36 | 0 | 0) | 0) & 1 | 0) {
        break label$5
       }
       HEAP8[($4_1 + 35 | 0) >> 0] = 1;
       $469($5_1 + 76 | 0 | 0, $4_1 + 36 | 0 | 0, $4_1 + 35 | 0 | 0);
      }
      HEAP32[($574(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0) >> 2] = 2;
      HEAP32[($4_1 + 40 | 0) >> 2] = (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    break label$1;
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
   label$6 : while (1) label$7 : while (1) {
    if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 60 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($468(HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $94_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    HEAP32[($4_1 + 20 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$94_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($94_1) | 0;
    label$8 : {
     label$9 : {
      if (!(($475($5_1 + 76 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) & 1 | 0)) {
       break label$9
      }
      HEAP32[($574(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] = 0;
      break label$8;
     }
     HEAP8[($4_1 + 19 | 0) >> 0] = 1;
     $469($5_1 + 76 | 0 | 0, $4_1 + 20 | 0 | 0, $4_1 + 19 | 0 | 0);
     label$10 : {
      label$11 : {
       label$12 : {
        if ((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
         break label$12
        }
        $126_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
        if (($1161(FUNCTION_TABLE[HEAP32[((HEAP32[$126_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($126_1) | 0 | 0, 26232 | 0) | 0) & 1 | 0) {
         break label$12
        }
        $134_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
        if (($1161(FUNCTION_TABLE[HEAP32[((HEAP32[$134_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($134_1) | 0 | 0, 26332 | 0) | 0) & 1 | 0) {
         break label$12
        }
        $142_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
        if (($1161(FUNCTION_TABLE[HEAP32[((HEAP32[$142_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($142_1) | 0 | 0, 26344 | 0) | 0) & 1 | 0) {
         break label$12
        }
        if (($474(HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
         break label$11
        }
       }
       HEAP32[($574(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] = 1;
       break label$10;
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
      label$13 : {
       label$14 : while (1) {
        if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$13
        }
        label$15 : {
         label$16 : {
          if (!(($474(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
           break label$16
          }
          break label$15;
         }
         label$17 : {
          if (!(Math_fround(HEAPF32[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 100 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
           break label$17
          }
          HEAP32[($574(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] = 3;
          $184_1 = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
          HEAP32[($556(HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] = $184_1;
          HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
          continue label$6;
         }
         break label$13;
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
        continue label$14;
       };
      }
      HEAP32[($574(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] = 2;
     }
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$7;
   };
  }
  global$0 = $4_1 + 80 | 0;
  return;
 }
 
 function $578($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $26_1 = 0, $63_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  HEAP32[($4_1 + 36 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + 4 | 0;
  HEAP32[($4_1 + 32 | 0) >> 2] = $467(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 116 | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $26_1 = HEAP32[($468(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    label$3 : {
     if (!(($1161(FUNCTION_TABLE[HEAP32[((HEAP32[$26_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($26_1) | 0 | 0, 26232 | 0) | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($468(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $738(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
     label$4 : {
      label$5 : {
       if (!((($475($5_1 + 76 | 0 | 0, $4_1 + 16 | 0 | 0) | 0) ^ -1 | 0) & 1 | 0)) {
        break label$5
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $738(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
       HEAP8[($4_1 + 11 | 0) >> 0] = 1;
       $469($5_1 + 76 | 0 | 0, $4_1 + 12 | 0 | 0, $4_1 + 11 | 0 | 0);
       break label$4;
      }
      $63_1 = $574(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[$63_1 >> 2] = HEAP32[$63_1 >> 2] | 0 | 4 | 0;
     }
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $4_1 + 48 | 0;
  return;
 }
 
 function $579($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $11_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  HEAPF32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]) > Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) & 1 | 0)) {
     break label$2
    }
    $11_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
    break label$1;
   }
   $11_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  }
  return Math_fround($11_1);
 }
 
 function $580($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $581($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAPF32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = Math_fround(HEAPF32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2]);
  return;
 }
 
 function $582($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $583($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $584($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $585($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP8[($3_1 + 11 | 0) >> 0] = (HEAPU8[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 28 | 0) >> 0] | 0) & 1 | 0;
  HEAP8[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 28 | 0) >> 0] = 1;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  HEAP32[$3_1 >> 2] = $555($4_1 + 40 | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[$3_1 >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $586($4_1 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $510($4_1 + 40 | 0 | 0);
  HEAP8[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 28 | 0) >> 0] = (HEAPU8[($3_1 + 11 | 0) >> 0] | 0) & 1 | 0;
  $544(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $586($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 >= ($555($5_1 + 40 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($556($5_1 + 40 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
   label$3 : {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$3
    }
    break label$1;
   }
   $540(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
   $567($5_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   label$4 : {
    label$5 : while (1) {
     HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
     label$6 : {
      if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
       break label$6
      }
      break label$4;
     }
     $540(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
     HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 24 | 0) >> 2] = 0;
     HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 28 | 0) >> 2] = 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     continue label$5;
    };
   }
   HEAP32[($556($5_1 + 40 | 0 | 0, HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) | 0) >> 2] = 0;
   $544(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $587($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $35_1 = 0, $62_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP8[($6_1 + 19 | 0) >> 0] = $3_1;
  $8_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$1
   }
   fimport$0(5472 | 0, 3184 | 0, 508 | 0, 3964 | 0);
   wasm2js_trap();
  }
  HEAP8[($6_1 + 18 | 0) >> 0] = 1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $569($8_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$2 : {
   if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if (!(Math_fround(HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 80 | 0) >> 2]) == Math_fround(-1.0) & 1 | 0)) {
      break label$4
     }
     $35_1 = HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
     HEAP32[($556($8_1 + 40 | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] = $35_1;
     $539(HEAP32[($8_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
     $540(HEAP32[($8_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
     $567($8_1 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
     HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
     HEAP8[($6_1 + 18 | 0) >> 0] = 0;
     break label$3;
    }
    $567($8_1 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
   }
  }
  HEAP32[($6_1 + 8 | 0) >> 2] = $588($8_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, (HEAPU8[($6_1 + 19 | 0) >> 0] | 0) & 1 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $566($8_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, (HEAPU8[($6_1 + 18 | 0) >> 0] | 0) & 1 | 0 | 0);
  $544(HEAP32[($8_1 + 72 | 0) >> 2] | 0 | 0);
  $62_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $62_1 | 0;
 }
 
 function $588($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $9_1 = 0, $81_1 = Math_fround(0), $68_1 = Math_fround(0), $61_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP8[($7_1 + 19 | 0) >> 0] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  $9_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $589($9_1 + 20 | 0 | 0) | 0;
  HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
  HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 36 | 0) >> 0] = (HEAPU8[($7_1 + 19 | 0) >> 0] | 0) & 1 | 0;
  HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 37 | 0) >> 0] = 0;
  HEAPF32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 40 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 44 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 48 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 52 | 0) >> 2] = Math_fround(0 | 0);
  $68_1 = Math_fround($486(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0));
  HEAPF32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] = $68_1;
  HEAPF32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 60 | 0) >> 2] = Math_fround(-1.0);
  HEAPF32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 64 | 0) >> 2] = Math_fround(-1.0);
  HEAPF32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 68 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 72 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 76 | 0) >> 2] = Math_fround(-1.0);
  HEAPF32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 80 | 0) >> 2] = Math_fround(-1.0);
  HEAPF32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 84 | 0) >> 2] = Math_fround(3402823466385288598117041.0e14);
  HEAPF32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 88 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 92 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 104 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 96 | 0) >> 2] = Math_fround(0 | 0);
  label$1 : {
   label$2 : {
    if (!((HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    $81_1 = Math_fround(0 | 0);
    break label$1;
   }
   $81_1 = Math_fround($622(HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0));
  }
  HEAPF32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 100 | 0) >> 2] = $81_1;
  $61_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
  global$0 = $7_1 + 32 | 0;
  return $61_1 | 0;
 }
 
 function $589($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $35_1 = 0, $38_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($555($4_1 + 4 | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 20 | 0) >> 2] = $556($4_1 + 4 | 0 | 0, ($555($4_1 + 4 | 0 | 0) | 0) - 1 | 0 | 0) | 0;
    HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
    $594($4_1 + 4 | 0 | 0, ($555($4_1 + 4 | 0 | 0) | 0) - 1 | 0 | 0);
    HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
    break label$1;
   }
   $35_1 = $1655(172 | 0, 4301 | 0, 57 | 0) | 0;
   FUNCTION_TABLE[56 | 0]($35_1) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = $35_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  }
  $38_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $38_1 | 0;
 }
 
 function $590($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 6964 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $591($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 100 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  return;
 }
 
 function $592($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $593($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $594($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $522($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $595($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $75_1 = Math_fround(0), $31_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 >= 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5689 | 0, 4142 | 0, 76 | 0, 4598 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$2 : {
   if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   $75_1 = Math_fround(Math_fround((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
   label$3 : {
    label$4 : {
     if (!(Math_fround(Math_abs($75_1)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $31_1 = ~~$75_1;
     break label$3;
    }
    $31_1 = -2147483648;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $31_1;
   label$5 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = 8;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $597(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 82 | 0) | 0;
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$6
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$7
     }
     $598($6_1 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $596($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $75_1 = Math_fround(0), $31_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 >= 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5689 | 0, 4142 | 0, 76 | 0, 4598 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$2 : {
   if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   $75_1 = Math_fround(Math_fround((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
   label$3 : {
    label$4 : {
     if (!(Math_fround(Math_abs($75_1)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $31_1 = ~~$75_1;
     break label$3;
    }
    $31_1 = -2147483648;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $31_1;
   label$5 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = 8;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $592(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 82 | 0) | 0;
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$6
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$7
     }
     $593($6_1 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $597($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $598($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $599($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $535($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $600($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $507($4_1 | 0) | 0;
  $1978($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $601($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $506($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $602($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $505($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $603($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $504($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $604($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $605($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $606($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $607($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $529($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $608($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $609($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 13184 + 8 | 0;
  return $5_1 | 0;
 }
 
 function $610($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $558($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $611($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $557($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $612($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $613($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $113($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 7820 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(0 | 0);
  $614($5_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $614($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 7952 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $615($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($6_1 + 16 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1513(HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1513(HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $616($7_1 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2])));
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $616($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($6_1 + 16 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$1
   }
   fimport$0(5508 | 0, 3699 | 0, 51 | 0, 1236 | 0);
   wasm2js_trap();
  }
  label$2 : {
   if ((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$2
   }
   fimport$0(5461 | 0, 3699 | 0, 52 | 0, 1236 | 0);
   wasm2js_trap();
  }
  FUNCTION_TABLE[80 | 0]($6_1, HEAP32[($6_1 + 24 | 0) >> 2] | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0) | 0;
  $617($7_1 + 12 | 0 | 0, $6_1 | 0, $6_1 + 16 | 0 | 0);
  $618($6_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $617($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $25_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = $619($6_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $620((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    HEAPF32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 16 | 0) >> 2] = Math_fround(HEAPF32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2]);
    break label$1;
   }
   $25_1 = $1655(28 | 0, 4221 | 0, 114 | 0) | 0;
   $621($25_1 | 0) | 0;
   HEAP32[($5_1 + 16 | 0) >> 2] = $25_1;
   $620((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
   HEAPF32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 16 | 0) >> 2] = Math_fround(HEAPF32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2]);
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
   label$3 : {
    label$4 : {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
     break label$3;
    }
    HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $618($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $619($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $25_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!(($626((HEAP32[$4_1 >> 2] | 0) + 4 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
      break label$1;
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[$4_1 >> 2] | 0) + 20 | 0) >> 2] | 0;
     continue label$3;
    };
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $25_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $25_1 | 0;
 }
 
 function $620($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $42_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $463($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$2 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $42_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + 4 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $42_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $621($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 8040 + 8 | 0;
  $10_1 = 0;
  FUNCTION_TABLE[80 | 0]($4_1 + 4 | 0, $10_1, $10_1) | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $622($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $57_1 = Math_fround(0);
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$1
   }
   fimport$0(5508 | 0, 3699 | 0, 59 | 0, 1243 | 0);
   wasm2js_trap();
  }
  label$2 : {
   if ((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$2
   }
   fimport$0(5461 | 0, 3699 | 0, 60 | 0, 1243 | 0);
   wasm2js_trap();
  }
  FUNCTION_TABLE[80 | 0]($5_1 + 16 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0;
  label$3 : {
   label$4 : {
    if (!(($623($6_1 + 12 | 0 | 0, $5_1 + 16 | 0 | 0) | 0) & 1 | 0)) {
     break label$4
    }
    HEAPF32[($5_1 + 44 | 0) >> 2] = Math_fround($624($6_1 + 12 | 0 | 0, $5_1 + 16 | 0 | 0));
    HEAP32[($5_1 + 12 | 0) >> 2] = 1;
    break label$3;
   }
   HEAPF32[($5_1 + 44 | 0) >> 2] = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
   HEAP32[($5_1 + 12 | 0) >> 2] = 1;
  }
  $618($5_1 + 16 | 0 | 0) | 0;
  $57_1 = Math_fround(HEAPF32[($5_1 + 44 | 0) >> 2]);
  global$0 = $5_1 + 48 | 0;
  return Math_fround($57_1);
 }
 
 function $623($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $13_1 = ($619(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $624($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $22_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $619(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $22_1 = Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 2]);
   global$0 = $4_1 + 16 | 0;
   return Math_fround($22_1);
  }
  fimport$0(4728 | 0, 4221 | 0, 159 | 0, 5372 | 0);
  wasm2js_trap();
 }
 
 function $625($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $113($6_1 | 0) | 0;
  HEAP32[$6_1 >> 2] = 7836 + 8 | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $626($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $17_1 = 0;
  label$1 : {
   if (!(($627((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 36 | 0 | 0, (HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 36 | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $17_1 = $627((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 36 | 0 | 0, (HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 36 | 0 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $17_1 & 1 | 0 | 0;
 }
 
 function $627($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $61_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP8[($4_1 + 15 | 0) >> 0] = 1 & 1 | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP8[($4_1 + 15 | 0) >> 0] = 0 & 1 | 0;
    break label$1;
   }
   label$4 : {
    if (!((HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    if (!((HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP8[($4_1 + 15 | 0) >> 0] = ($1926(HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0 | 0) == (0 | 0) & 1 | 0;
    break label$1;
   }
   HEAP8[($4_1 + 15 | 0) >> 0] = 0 & 1 | 0;
  }
  $61_1 = (HEAPU8[($4_1 + 15 | 0) >> 0] | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $61_1 | 0;
 }
 
 function $628($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 7820 + 8 | 0;
  $629($4_1 + 12 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $629($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 7952 + 8 | 0;
  $632($4_1 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $630($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $628($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $631($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $618($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $632($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
    $15_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    label$3 : {
     if (($15_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$15_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($15_1);
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $633($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $629($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $634($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 8040 + 8 | 0;
  $618($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $635($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $634($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $636($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $33_1 = 0, $61_1 = 0, $43_1 = 0, $102_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $2_1;
  HEAP8[($6_1 + 47 | 0) >> 0] = $3_1;
  $8_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
  HEAP32[($6_1 + 60 | 0) >> 2] = $8_1;
  $113($8_1 | 0) | 0;
  HEAP32[$8_1 >> 2] = 8136 + 8 | 0;
  $637($8_1 + 4 | 0 | 0) | 0;
  $638($8_1 + 20 | 0 | 0) | 0;
  HEAP32[($8_1 + 36 | 0) >> 2] = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = $639($125(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) | 0 | 0, 47 | 0) | 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = $639($125(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) | 0 | 0, 92 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0) >>> 0 > (HEAP32[($6_1 + 20 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $33_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
    break label$1;
   }
   $33_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  }
  HEAP32[($6_1 + 16 | 0) >> 2] = $33_1;
  $111($6_1 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
  $43_1 = $627($6_1 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) | 0;
  $112($6_1 | 0) | 0;
  label$3 : {
   if (!($43_1 & 1 | 0)) {
    break label$3
   }
   HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 1 | 0;
  }
  label$4 : {
   label$5 : {
    if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    $61_1 = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) - ($125(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) | 0) | 0;
    break label$4;
   }
   $61_1 = 0;
  }
  HEAP32[($6_1 + 40 | 0) >> 2] = $61_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $114((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 1 | 0 | 0, 2624 | 0, 54 | 0) | 0;
  $1798(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, $125(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) | 0;
  HEAP8[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + (HEAP32[($6_1 + 40 | 0) >> 2] | 0) | 0) >> 0] = 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $640(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
  label$6 : {
   if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$6
   }
   $641($8_1 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, (HEAPU8[($6_1 + 47 | 0) >> 0] | 0) & 1 | 0 | 0);
  }
  $642(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, 2624 | 0, 63 | 0);
  $115(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, 2624 | 0, 64 | 0);
  $102_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
  global$0 = $6_1 + 64 | 0;
  return $102_1 | 0;
 }
 
 function $637($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 8316 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $638($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 8380 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $639($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $643(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $640($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = $931() | 0;
  $10_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($5_1, HEAP32[($4_1 + 12 | 0) >> 2] | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $641($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $9_1 = 0, $23_1 = 0, $304_1 = 0, $30_1 = 0, $46_1 = 0, $108_1 = 0, $217_1 = 0, $230_1 = 0, $260_1 = 0, $144_1 = 0, $151_1 = 0, $165_1 = 0, $179_1 = 0, $188_1 = 0, $261_1 = 0, $352_1 = 0, $373_1 = 0, $380_1 = 0, $392_1 = 0, $399_1 = 0, $469_1 = 0, $478_1 = 0, $489_1 = 0, $500_1 = 0, $511_1 = 0, $539_1 = 0, $546_1 = 0, $557_1 = 0, $568_1 = 0, $579_1 = 0, $595_1 = 0, $602_1 = 0, $660_1 = Math_fround(0), $661_1 = Math_fround(0), $633_1 = 0;
  $7_1 = global$0 - 160 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 156 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 152 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 148 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 144 | 0) >> 2] = $3_1;
  HEAP8[($7_1 + 143 | 0) >> 0] = $4_1;
  $9_1 = HEAP32[($7_1 + 156 | 0) >> 2] | 0;
  HEAP32[($7_1 + 132 | 0) >> 2] = (HEAP32[($7_1 + 152 | 0) >> 2] | 0) + (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0;
  HEAP32[($7_1 + 128 | 0) >> 2] = $1821(HEAP32[($7_1 + 144 | 0) >> 2] | 0 | 0) | 0;
  $23_1 = 0;
  label$1 : {
   if (!((HEAP32[($7_1 + 128 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$1
   }
   $30_1 = 24;
   $23_1 = 0;
   if (!((((HEAPU8[((HEAP32[($7_1 + 144 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 128 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] | 0) << $30_1 | 0) >> $30_1 | 0 | 0) != (47 | 0) & 1 | 0)) {
    break label$1
   }
   $46_1 = 24;
   $23_1 = (((HEAPU8[((HEAP32[($7_1 + 144 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 128 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] | 0) << $46_1 | 0) >> $46_1 | 0 | 0) != (92 | 0);
  }
  HEAP32[($7_1 + 124 | 0) >> 2] = $23_1 & 1 | 0;
  HEAP32[($7_1 + 120 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!($644($7_1 + 152 | 0 | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0, $7_1 + 112 | 0 | 0) | 0)) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($7_1 + 116 | 0) >> 2] | 0) - (HEAP32[($7_1 + 112 | 0) >> 2] | 0) | 0) {
       break label$5
      }
      HEAP32[($7_1 + 120 | 0) >> 2] = 0;
      break label$4;
     }
     label$6 : {
      label$7 : {
       if ((HEAP32[($7_1 + 120 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$7
       }
       HEAP32[($7_1 + 76 | 0) >> 2] = $645($7_1 + 112 | 0 | 0) | 0;
       HEAP32[($7_1 + 72 | 0) >> 2] = $114((((HEAP32[($7_1 + 128 | 0) >> 2] | 0) + (HEAP32[($7_1 + 124 | 0) >> 2] | 0) | 0) + ($1821(HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) | 0) | 0) + 1 | 0 | 0, 2624 | 0, 120 | 0) | 0;
       $1798(HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 128 | 0) >> 2] | 0 | 0) | 0;
       label$8 : {
        if (!(HEAP32[($7_1 + 124 | 0) >> 2] | 0)) {
         break label$8
        }
        HEAP8[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + (HEAP32[($7_1 + 128 | 0) >> 2] | 0) | 0) >> 0] = 47;
       }
       $1928(((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + (HEAP32[($7_1 + 128 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 124 | 0) >> 2] | 0) | 0 | 0, HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) | 0;
       $108_1 = $1655(68 | 0, 2624 | 0, 125 | 0) | 0;
       $111($7_1 + 56 | 0 | 0, HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
       $646($108_1 | 0, $7_1 + 56 | 0 | 0) | 0;
       HEAP32[($7_1 + 120 | 0) >> 2] = $108_1;
       $112($7_1 + 56 | 0 | 0) | 0;
       HEAP32[($7_1 + 52 | 0) >> 2] = $647($7_1 + 152 | 0 | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
       label$9 : {
        if ((HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0) {
         break label$9
        }
        fimport$0(5573 | 0, 2624 | 0, 128 | 0, 5288 | 0);
        wasm2js_trap();
       }
       $144_1 = $648($7_1 + 80 | 0 | 0) | 0;
       HEAP32[((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 60 | 0) >> 2] = $144_1;
       $151_1 = $648(($7_1 + 80 | 0) + 8 | 0 | 0) | 0;
       HEAP32[((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 64 | 0) >> 2] = $151_1;
       $647($7_1 + 152 | 0 | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
       $165_1 = $649(25680 | 0, 8 | 0, $7_1 + 80 | 0 | 0) | 0;
       HEAP32[((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 40 | 0) >> 2] = $165_1;
       $647($7_1 + 152 | 0 | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
       $179_1 = $649(25712 | 0, 8 | 0, $7_1 + 80 | 0 | 0) | 0;
       HEAP32[((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 44 | 0) >> 2] = $179_1;
       $188_1 = $649(25712 | 0, 8 | 0, ($7_1 + 80 | 0) + 8 | 0 | 0) | 0;
       HEAP32[((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 48 | 0) >> 2] = $188_1;
       $650($7_1 + 152 | 0 | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0, $7_1 + 112 | 0 | 0) | 0;
       HEAP32[((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 52 | 0) >> 2] = 1;
       HEAP32[((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 56 | 0) >> 2] = 1;
       label$10 : {
        if ($651($7_1 + 112 | 0 | 0, 4739 | 0) | 0) {
         break label$10
        }
        label$11 : {
         label$12 : {
          if (!(((HEAP32[($7_1 + 116 | 0) >> 2] | 0) - (HEAP32[($7_1 + 112 | 0) >> 2] | 0) | 0 | 0) == (1 | 0) & 1 | 0)) {
           break label$12
          }
          $217_1 = 24;
          label$13 : {
           label$14 : {
            if (!((((HEAPU8[(HEAP32[($7_1 + 112 | 0) >> 2] | 0) >> 0] | 0) << $217_1 | 0) >> $217_1 | 0 | 0) == (120 | 0) & 1 | 0)) {
             break label$14
            }
            HEAP32[((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 52 | 0) >> 2] = 2;
            break label$13;
           }
           $230_1 = 24;
           label$15 : {
            if (!((((HEAPU8[(HEAP32[($7_1 + 112 | 0) >> 2] | 0) >> 0] | 0) << $230_1 | 0) >> $230_1 | 0 | 0) == (121 | 0) & 1 | 0)) {
             break label$15
            }
            HEAP32[((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 56 | 0) >> 2] = 2;
           }
          }
          break label$11;
         }
         label$16 : {
          if (!($651($7_1 + 112 | 0 | 0, 1168 | 0) | 0)) {
           break label$16
          }
          HEAP32[((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 52 | 0) >> 2] = 2;
          HEAP32[((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 56 | 0) >> 2] = 2;
         }
        }
       }
       label$17 : {
        label$18 : {
         if (!((HEAPU8[($7_1 + 143 | 0) >> 0] | 0) & 1 | 0)) {
          break label$18
         }
         label$19 : {
          if (!((HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$19
          }
          $260_1 = HEAP32[($9_1 + 36 | 0) >> 2] | 0;
          $261_1 = HEAP32[($7_1 + 120 | 0) >> 2] | 0;
          $111($7_1 + 40 | 0 | 0, HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
          FUNCTION_TABLE[HEAP32[((HEAP32[$260_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($260_1, $261_1, $7_1 + 40 | 0);
          $112($7_1 + 40 | 0 | 0) | 0;
         }
         $115(HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0, 2624 | 0, 160 | 0);
         break label$17;
        }
        $111($7_1 + 24 | 0 | 0, HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
        $652((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 28 | 0 | 0, $7_1 + 24 | 0 | 0) | 0;
        $112($7_1 + 24 | 0 | 0) | 0;
       }
       $653($9_1 + 4 | 0 | 0, $7_1 + 120 | 0 | 0);
       break label$6;
      }
      $304_1 = $1655(112 | 0, 2624 | 0, 166 | 0) | 0;
      $1799($304_1 | 0, 0 | 0, 112 | 0) | 0;
      $654($304_1 | 0) | 0;
      HEAP32[($7_1 + 20 | 0) >> 2] = $304_1;
      HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($7_1 + 120 | 0) >> 2] | 0;
      $111($7_1 + 8 | 0 | 0, $645($7_1 + 112 | 0 | 0) | 0 | 0, 1 & 1 | 0 | 0) | 0;
      $652((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 8 | 0 | 0, $7_1 + 8 | 0 | 0) | 0;
      $112($7_1 + 8 | 0 | 0) | 0;
      $650($7_1 + 152 | 0 | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0, $7_1 + 112 | 0 | 0) | 0;
      label$20 : {
       label$21 : {
        if (!($651($7_1 + 112 | 0 | 0, 4643 | 0) | 0)) {
         break label$21
        }
        HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] = 90;
        break label$20;
       }
       label$22 : {
        label$23 : {
         if (!($651($7_1 + 112 | 0 | 0, 4728 | 0) | 0)) {
          break label$23
         }
         HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] = 0;
         break label$22;
        }
        $352_1 = $648($7_1 + 112 | 0 | 0) | 0;
        HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] = $352_1;
       }
      }
      HEAP8[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 72 | 0) >> 0] = (HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0 | 0) == (90 | 0) & 1 | 0;
      $647($7_1 + 152 | 0 | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
      $373_1 = $648($7_1 + 80 | 0 | 0) | 0;
      HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 20 | 0) >> 2] = $373_1;
      $380_1 = $648(($7_1 + 80 | 0) + 8 | 0 | 0) | 0;
      HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] = $380_1;
      $647($7_1 + 152 | 0 | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
      $392_1 = $648($7_1 + 80 | 0 | 0) | 0;
      HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 28 | 0) >> 2] = $392_1;
      $399_1 = $648(($7_1 + 80 | 0) + 8 | 0 | 0) | 0;
      HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 32 | 0) >> 2] = $399_1;
      HEAPF32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) / Math_fround(HEAP32[((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0));
      HEAPF32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) / Math_fround(HEAP32[((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0));
      label$24 : {
       label$25 : {
        if (!((HEAPU8[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 72 | 0) >> 0] | 0) & 1 | 0)) {
         break label$25
        }
        HEAPF32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 44 | 0) >> 2] = Math_fround(Math_fround((HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) | 0 | 0) / Math_fround(HEAP32[((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0));
        HEAPF32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] = Math_fround(Math_fround((HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) | 0 | 0) / Math_fround(HEAP32[((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0));
        break label$24;
       }
       HEAPF32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 44 | 0) >> 2] = Math_fround(Math_fround((HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) | 0 | 0) / Math_fround(HEAP32[((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0));
       HEAPF32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] = Math_fround(Math_fround((HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) | 0 | 0) / Math_fround(HEAP32[((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0));
      }
      HEAP32[($7_1 + 136 | 0) >> 2] = $647($7_1 + 152 | 0 | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
      label$26 : {
       if (HEAP32[($7_1 + 136 | 0) >> 2] | 0) {
        break label$26
       }
       fimport$0(1370 | 0, 2624 | 0, 199 | 0, 5288 | 0);
       wasm2js_trap();
      }
      label$27 : {
       if (!((HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
        break label$27
       }
       $469_1 = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 80 | 0;
       HEAP32[($7_1 + 4 | 0) >> 2] = 0;
       $595($469_1 | 0, 4 | 0, $7_1 + 4 | 0 | 0);
       $478_1 = $648($7_1 + 80 | 0 | 0) | 0;
       HEAP32[($574((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 80 | 0 | 0, 0 | 0) | 0) >> 2] = $478_1;
       $489_1 = $648(($7_1 + 80 | 0) + 8 | 0 | 0) | 0;
       HEAP32[($574((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 80 | 0 | 0, 1 | 0) | 0) >> 2] = $489_1;
       $500_1 = $648(($7_1 + 80 | 0) + 16 | 0 | 0) | 0;
       HEAP32[($574((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 80 | 0 | 0, 2 | 0) | 0) >> 2] = $500_1;
       $511_1 = $648(($7_1 + 80 | 0) + 24 | 0 | 0) | 0;
       HEAP32[($574((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 80 | 0 | 0, 3 | 0) | 0) >> 2] = $511_1;
       HEAP32[($7_1 + 136 | 0) >> 2] = $647($7_1 + 152 | 0 | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
       label$28 : {
        if (HEAP32[($7_1 + 136 | 0) >> 2] | 0) {
         break label$28
        }
        fimport$0(1370 | 0, 2624 | 0, 210 | 0, 5288 | 0);
        wasm2js_trap();
       }
       label$29 : {
        if (!((HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
         break label$29
        }
        $539_1 = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 96 | 0;
        HEAP32[$7_1 >> 2] = 0;
        $595($539_1 | 0, 4 | 0, $7_1 | 0);
        $546_1 = $648($7_1 + 80 | 0 | 0) | 0;
        HEAP32[($574((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 96 | 0 | 0, 0 | 0) | 0) >> 2] = $546_1;
        $557_1 = $648(($7_1 + 80 | 0) + 8 | 0 | 0) | 0;
        HEAP32[($574((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 96 | 0 | 0, 1 | 0) | 0) >> 2] = $557_1;
        $568_1 = $648(($7_1 + 80 | 0) + 16 | 0 | 0) | 0;
        HEAP32[($574((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 96 | 0 | 0, 2 | 0) | 0) >> 2] = $568_1;
        $579_1 = $648(($7_1 + 80 | 0) + 24 | 0 | 0) | 0;
        HEAP32[($574((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 96 | 0 | 0, 3 | 0) | 0) >> 2] = $579_1;
        $647($7_1 + 152 | 0 | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
       }
      }
      $595_1 = $648($7_1 + 80 | 0 | 0) | 0;
      HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 60 | 0) >> 2] = $595_1;
      $602_1 = $648(($7_1 + 80 | 0) + 8 | 0 | 0) | 0;
      HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 64 | 0) >> 2] = $602_1;
      $647($7_1 + 152 | 0 | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
      $660_1 = Math_fround($648($7_1 + 80 | 0 | 0) | 0 | 0);
      HEAPF32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 52 | 0) >> 2] = $660_1;
      $661_1 = Math_fround($648(($7_1 + 80 | 0) + 8 | 0 | 0) | 0 | 0);
      HEAPF32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 56 | 0) >> 2] = $661_1;
      $650($7_1 + 152 | 0 | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0, $7_1 + 112 | 0 | 0) | 0;
      $633_1 = $648($7_1 + 112 | 0 | 0) | 0;
      HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 68 | 0) >> 2] = $633_1;
      $655($9_1 + 20 | 0 | 0, $7_1 + 20 | 0 | 0);
     }
    }
    continue label$3;
   };
  }
  global$0 = $7_1 + 160 | 0;
  return;
 }
 
 function $642($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $643($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $1932(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $644($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $27_1 = 0, $31_1 = 0, $41_1 = 0, $57_1 = 0, $62_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
   label$3 : while (1) {
    $27_1 = 0;
    label$4 : {
     if (!((HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     $31_1 = 24;
     $27_1 = (((HEAPU8[(HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >> 0] | 0) << $31_1 | 0) >> $31_1 | 0 | 0) != (10 | 0);
    }
    label$5 : {
     if (!($27_1 & 1 | 0)) {
      break label$5
     }
     $41_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     HEAP32[$41_1 >> 2] = (HEAP32[$41_1 >> 2] | 0) + 1 | 0;
     continue label$3;
    }
    break label$3;
   };
   HEAP32[((HEAP32[$5_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
   $673(HEAP32[$5_1 >> 2] | 0 | 0);
   label$6 : {
    if (!((HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    $57_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
    HEAP32[$57_1 >> 2] = (HEAP32[$57_1 >> 2] | 0) + 1 | 0;
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = 1;
  }
  $62_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $62_1 | 0;
 }
 
 function $645($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $114((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0, 2624 | 0, 312 | 0) | 0;
  $1798(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP8[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] = 0;
  $23_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $23_1 | 0;
 }
 
 function $646($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $113($5_1 | 0) | 0;
  $499($5_1 + 4 | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 8180 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = 8180 + 24 | 0;
  $124($5_1 + 16 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $674($5_1 + 28 | 0 | 0) | 0;
  HEAP32[($5_1 + 40 | 0) >> 2] = 6;
  HEAP32[($5_1 + 44 | 0) >> 2] = 1;
  HEAP32[($5_1 + 48 | 0) >> 2] = 1;
  HEAP32[($5_1 + 52 | 0) >> 2] = 1;
  HEAP32[($5_1 + 56 | 0) >> 2] = 1;
  HEAP32[($5_1 + 60 | 0) >> 2] = 0;
  HEAP32[($5_1 + 64 | 0) >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $647($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $11_1 = 0, $32_1 = 0, i64toi32_i32$0 = 0, $72_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $644(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
  $11_1 = 24;
  label$1 : {
   label$2 : {
    if ($675($5_1 | 0, (58 << $11_1 | 0) >> $11_1 | 0 | 0) | 0) {
     break label$2
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (3 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
     $32_1 = 24;
     label$5 : {
      if ($675($5_1 | 0, (44 << $32_1 | 0) >> $32_1 | 0 | 0) | 0) {
       break label$5
      }
      break label$3;
     }
     HEAP32[(((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] = (HEAP32[$5_1 >> 2] | 0) + -2 | 0;
     $673((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0 | 0);
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
   HEAP32[(((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   $673((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0 | 0);
   HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  $72_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $72_1 | 0;
 }
 
 function $648($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $10_1 = $1935(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0, 10 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $649($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $36_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0) | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) - 1 | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if ($1930(HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) {
       break label$4
      }
      HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
      break label$1;
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -1 | 0;
     continue label$3;
    };
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = 0;
  }
  $36_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $36_1 | 0;
 }
 
 function $650($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $11_1 = 0, $18_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  $644(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
  $11_1 = 24;
  label$1 : {
   label$2 : {
    if ($675(HEAP32[$5_1 >> 2] | 0 | 0, (58 << $11_1 | 0) >> $11_1 | 0 | 0) | 0) {
     break label$2
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   $673(HEAP32[$5_1 >> 2] | 0 | 0);
   HEAP32[($5_1 + 12 | 0) >> 2] = 1;
  }
  $18_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $18_1 | 0;
 }
 
 function $651($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $19_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $19_1 = ($1930(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0 | 0) | 0 | 0) == (0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $19_1 | 0;
 }
 
 function $652($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $48_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($5_1 | 0) == (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $115(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4464 | 0, 122 | 0);
   }
   label$4 : {
    label$5 : {
     if ((HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$5
     }
     HEAP32[($5_1 + 4 | 0) >> 2] = 0;
     HEAP32[($5_1 + 8 | 0) >> 2] = 0;
     break label$4;
    }
    HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $114((HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0, 4464 | 0, 129 | 0) | 0;
    $1798(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, (HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  }
  $48_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $48_1 | 0;
 }
 
 function $653($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $676(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $677($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $677($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $654($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 8264 + 8 | 0;
  $674($4_1 + 8 | 0 | 0) | 0;
  $500($4_1 + 80 | 0 | 0) | 0;
  $500($4_1 + 96 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $655($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $678(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $679($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $679($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $656($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $26_1 = 0, $48_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[$4_1 >> 2] = 8136 + 8 | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   HEAP32[$3_1 >> 2] = $657($4_1 + 4 | 0 | 0) | 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[$3_1 >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$2
     }
     $26_1 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
     ((wasm2js_i32$1 = $26_1, wasm2js_i32$2 = $14((HEAP32[($658($4_1 + 4 | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) + 4 | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$26_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
  }
  $659($4_1 + 4 | 0 | 0);
  $660($4_1 + 20 | 0 | 0);
  $661($4_1 + 20 | 0 | 0) | 0;
  $662($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  $48_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $48_1 | 0;
 }
 
 function $657($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $658($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $659($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($657(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($658(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $663(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $660($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($664(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($665(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $666(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $661($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 8380 + 8 | 0;
  $667($4_1 | 0);
  $668($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $662($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 8316 + 8 | 0;
  $669($4_1 | 0);
  $670($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $663($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $688($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $664($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $665($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $666($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $690($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $667($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $690($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $668($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $691(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $669($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $688($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $670($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $689(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $671($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[89 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $672($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $37_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $664($5_1 + 20 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!(($627((HEAP32[($665($5_1 + 20 | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($665($5_1 + 20 | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
      break label$1;
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $37_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $37_1 | 0;
 }
 
 function $673($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $22_1 = 0, $35_1 = 0, $51_1 = 0, $62_1 = 0, $66_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : while (1) {
   $11_1 = 0;
   label$2 : {
    if (!($1903((HEAPU8[(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) | 0)) {
     break label$2
    }
    $11_1 = (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >>> 0;
   }
   label$3 : {
    if (!($11_1 & 1 | 0)) {
     break label$3
    }
    $22_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    HEAP32[$22_1 >> 2] = (HEAP32[$22_1 >> 2] | 0) + 1 | 0;
    continue label$1;
   }
   break label$1;
  };
  label$4 : {
   label$5 : {
    if (!((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    break label$4;
   }
   $35_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   HEAP32[($35_1 + 4 | 0) >> 2] = (HEAP32[($35_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   label$6 : while (1) {
    $51_1 = 0;
    label$7 : {
     if (!(((HEAPU8[(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) == (13 | 0) & 1 | 0)) {
      break label$7
     }
     $51_1 = (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) >>> 0;
    }
    label$8 : {
     if (!($51_1 & 1 | 0)) {
      break label$8
     }
     $62_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     HEAP32[($62_1 + 4 | 0) >> 2] = (HEAP32[($62_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     continue label$6;
    }
    break label$6;
   };
   $66_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   HEAP32[($66_1 + 4 | 0) >> 2] = (HEAP32[($66_1 + 4 | 0) >> 2] | 0) + 1 | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $674($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 6496 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $675($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $22_1 = 0, $26_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 23 | 0) >> 0] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    HEAP8[($4_1 + 15 | 0) >> 0] = HEAPU8[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 0] | 0;
    label$3 : {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 28 | 0) >> 2] = 0;
     break label$1;
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    $22_1 = 24;
    $26_1 = 24;
    label$4 : {
     label$5 : {
      if (!((((HEAPU8[($4_1 + 15 | 0) >> 0] | 0) << $22_1 | 0) >> $22_1 | 0 | 0) == (((HEAPU8[($4_1 + 23 | 0) >> 0] | 0) << $26_1 | 0) >> $26_1 | 0 | 0) & 1 | 0)) {
       break label$5
      }
      break label$4;
     }
     continue label$2;
    }
    break label$2;
   };
   HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = 1;
  }
  return HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $676($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $677($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $678($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $679($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $680($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 8180 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 8180 + 24 | 0;
  $112($4_1 + 28 | 0 | 0) | 0;
  $112($4_1 + 16 | 0 | 0) | 0;
  $507($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $681($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $680($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $682($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $7_1 = $680($4_1 + -4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $683($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $681((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + -4 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $684($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 8264 + 8 | 0;
  $506($4_1 + 96 | 0 | 0) | 0;
  $506($4_1 + 80 | 0 | 0) | 0;
  $112($4_1 + 8 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $685($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $684($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $686($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $662($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $687($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $661($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $688($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $689($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $690($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $691($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $692() {
  $1160(26196 | 0, 1875 | 0, 26220 | 0) | 0;
  $1797(101 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $693($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26196 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $694($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26196 | 0;
 }
 
 function $695($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $720($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 8444 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $696($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $22_1 = 0, $56_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $697(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
   $22_1 = $1655(164 | 0, 2690 | 0, 59 | 0) | 0;
   $1167($22_1 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($6_1 + 16 | 0) >> 2] = $22_1;
   HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
   $17((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 20 | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, 0 | 0);
   $1169(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 36 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 40 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 44 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2])), (HEAPU8[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 72 | 0) >> 0] | 0) & 1 | 0 | 0);
   HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 60 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 52 | 0) >> 2]);
   HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 56 | 0) >> 2]);
   HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 68 | 0) >> 2] = Math_fround(HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0);
   HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 72 | 0) >> 2] = Math_fround(HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0);
   HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 76 | 0) >> 2] = Math_fround(HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0);
   HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 80 | 0) >> 2] = Math_fround(HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0);
   HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  }
  $56_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  global$0 = $6_1 + 48 | 0;
  return $56_1 | 0;
 }
 
 function $697($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = $672(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $698($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $22_1 = 0, $63_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $697(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
   $22_1 = $1655(236 | 0, 2690 | 0, 81 | 0) | 0;
   $1041($22_1 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($6_1 + 16 | 0) >> 2] = $22_1;
   HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
   $17((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 64 | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, 0 | 0);
   HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 180 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 36 | 0) >> 2]);
   HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 184 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 40 | 0) >> 2]);
   HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 188 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 44 | 0) >> 2]);
   HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 192 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2]);
   HEAP8[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 228 | 0) >> 0] = (HEAPU8[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 72 | 0) >> 0] | 0) & 1 | 0;
   HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 232 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 76 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 52 | 0) >> 2]);
   HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 80 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 56 | 0) >> 2]);
   HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 84 | 0) >> 2] = Math_fround(HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0);
   HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 88 | 0) >> 2] = Math_fround(HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0);
   HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 92 | 0) >> 2] = Math_fround(HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0);
   HEAPF32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2] = Math_fround(HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0);
   HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  }
  $63_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  global$0 = $6_1 + 48 | 0;
  return $63_1 | 0;
 }
 
 function $699($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $9_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $9_1 = $1655(64 | 0, 2690 | 0, 103 | 0) | 0;
  $794($9_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $700($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $9_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $9_1 = $1655(84 | 0, 2690 | 0, 108 | 0) | 0;
  $1084($9_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $701($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $9_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $9_1 = $1655(32 | 0, 2690 | 0, 113 | 0) | 0;
  $1154($9_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $702($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $9_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $9_1 = $1655(68 | 0, 2690 | 0, 118 | 0) | 0;
  $802($9_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $703($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $704($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $9($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $705() {
  $692();
  return;
 }
 
 function $706() {
  $1159(26208 | 0, 1598 | 0) | 0;
  $1797(105 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $707($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26208 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $708($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26208 | 0;
 }
 
 function $709($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $26_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  $113($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 8536 + 8 | 0;
  $124($5_1 + 4 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  label$1 : {
   if (($131($5_1 + 4 | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5608 | 0, 2481 | 0, 43 | 0, 1598 | 0);
   wasm2js_trap();
  }
  $26_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $26_1 | 0;
 }
 
 function $710($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 8536 + 8 | 0;
  $112($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $711($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  wasm2js_trap();
 }
 
 function $712($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0;
 }
 
 function $713($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0;
 }
 
 function $714($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
  return;
 }
 
 function $715($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + -1 | 0;
  return;
 }
 
 function $716() {
  $706();
  return;
 }
 
 function $717() {
  $1159(26220 | 0, 1880 | 0) | 0;
  $1797(109 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $718($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26220 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $719($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26220 | 0;
 }
 
 function $720($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 8596 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $721($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $722($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  wasm2js_trap();
 }
 
 function $723() {
  $717();
  return;
 }
 
 function $724() {
  $1160(26232 | 0, 4858 | 0, 26544 | 0) | 0;
  $1797(113 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $725($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26232 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $726($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26232 | 0;
 }
 
 function $727($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0, $43_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $5_1;
  $1664($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 8684 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = 0;
  $502($5_1 + 8 | 0 | 0) | 0;
  $728($5_1 + 24 | 0 | 0) | 0;
  $729($5_1 + 8 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  $730($5_1 + 24 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  $22_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround(0 | 0);
  $573($5_1 + 8 | 0 | 0, $22_1 | 0, $4_1 + 16 | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $674($4_1 | 0) | 0;
    $731($5_1 + 24 | 0 | 0, $4_1 | 0);
    $112($4_1 | 0) | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $43_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $43_1 | 0;
 }
 
 function $728($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 8756 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $729($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $580(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $730($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $732(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $731($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $61_1 = Math_fround(0), $20_1 = 0, $37_1 = 0, $50_1 = 0, $36_1 = 0, $49_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $124($4_1 + 8 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    $61_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($61_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $20_1 = ~~$61_1;
      break label$3;
     }
     $20_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $20_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $732(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $36_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $37_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $37_1 + 1 | 0;
    $733($5_1 | 0, $36_1 + Math_imul($37_1, 12) | 0 | 0, $4_1 + 8 | 0 | 0);
    $112($4_1 + 8 | 0 | 0) | 0;
    break label$1;
   }
   $49_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $50_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $50_1 + 1 | 0;
   $733($5_1 | 0, $49_1 + Math_imul($50_1, 12) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $732($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, Math_imul(HEAP32[($6_1 + 8 | 0) >> 2] | 0, 12), HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $733($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $124($1656(12 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $734($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $34_1 = 0, $56_1 = 0, $85_1 = 0, $121_1 = 0, $52_1 = 0, $81_1 = 0, $117_1 = 0;
  $10_1 = global$0 - 48 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 40 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 36 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 28 | 0) >> 2] = $4_1;
  HEAPF32[($10_1 + 24 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 16 | 0) >> 2] = $7_1;
  $11_1 = HEAP32[($10_1 + 44 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($11_1 + 4 | 0) >> 2] | 0) >>> 0 < ($80((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 24 | 0 | 0) | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5781 | 0, 3259 | 0, 66 | 0, 1205 | 0);
   wasm2js_trap();
  }
  HEAP32[($10_1 + 8 | 0) >> 2] = HEAP32[($82((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($10_1 + 4 | 0) >> 2] = HEAP32[($10_1 + 8 | 0) >> 2] | 0;
  $34_1 = HEAP32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$34_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($34_1) | 0) & 1 | 0) {
     break label$3
    }
    break label$2;
   }
   label$4 : {
    if (!((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$4
    }
    if (HEAP32[($10_1 + 20 | 0) >> 2] | 0) {
     break label$4
    }
    HEAP32[($10_1 + 12 | 0) >> 2] = (HEAP32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 68 | 0;
    $52_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
    label$5 : {
     label$6 : {
      if ($131(HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) | 0) {
       break label$6
      }
      $56_1 = 0;
      break label$5;
     }
     $56_1 = $1287(HEAP32[($10_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    }
    $1632($52_1 | 0, $56_1 | 0);
    break label$2;
   }
   label$7 : {
    if (!(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]) < Math_fround(HEAPF32[($15($11_1 + 8 | 0 | 0, 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$7
    }
    label$8 : {
     label$9 : {
      if (!(HEAP32[($10_1 + 20 | 0) >> 2] | 0)) {
       break label$9
      }
      if (!((HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$8
      }
     }
     HEAP32[($10_1 + 12 | 0) >> 2] = (HEAP32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 68 | 0;
     $81_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
     label$10 : {
      label$11 : {
       if ($131(HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) | 0) {
        break label$11
       }
       $85_1 = 0;
       break label$10;
      }
      $85_1 = $1287(HEAP32[($10_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     }
     $1632($81_1 | 0, $85_1 | 0);
    }
    break label$2;
   }
   label$12 : {
    label$13 : {
     if (!(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]) >= Math_fround(HEAPF32[($15($11_1 + 8 | 0 | 0, ($488($11_1 + 8 | 0 | 0) | 0) - 1 | 0 | 0) | 0) >> 2]) & 1 | 0)) {
      break label$13
     }
     HEAP32[$10_1 >> 2] = ($488($11_1 + 8 | 0 | 0) | 0) - 1 | 0;
     break label$12;
    }
    HEAP32[$10_1 >> 2] = ($487($11_1 + 8 | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2])), 1 | 0) | 0) - 1 | 0;
   }
   HEAP32[($10_1 + 12 | 0) >> 2] = $735($11_1 + 24 | 0 | 0, HEAP32[$10_1 >> 2] | 0 | 0) | 0;
   $117_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
   label$14 : {
    label$15 : {
     if ($131(HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) | 0) {
      break label$15
     }
     $121_1 = 0;
     break label$14;
    }
    $121_1 = $1287(HEAP32[($10_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) | 0;
   }
   $1632($117_1 | 0, $121_1 | 0);
  }
  global$0 = $10_1 + 48 | 0;
  return;
 }
 
 function $735($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 12) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $736($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 67108864 | 0 | 0;
 }
 
 function $737($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $19_1 = Math_fround(0), $12_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $19_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
  HEAPF32[($15($7_1 + 8 | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] = $19_1;
  $12_1 = HEAP32[$6_1 >> 2] | 0;
  $652($735($7_1 + 24 | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, $12_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $738($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $739($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 8684 + 8 | 0;
  $740($4_1 + 24 | 0 | 0) | 0;
  $504($4_1 + 8 | 0 | 0) | 0;
  $1665($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $740($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 8756 + 8 | 0;
  $742($4_1 | 0);
  $743($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $741($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $739($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $742($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $744($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + Math_imul(((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0, 12) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $743($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $745(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $744($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0 | 0]($5_1) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $745($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $746($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $740($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $747() {
  $724();
  return;
 }
 
 function $748() {
  $1160(26244 | 0, 4749 | 0, 26604 | 0) | 0;
  $1797(121 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $749($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26244 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $750($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26244 | 0;
 }
 
 function $751() {
  return (HEAPU8[(0 + 26256 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $752($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $7_1 = 0, $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $1757($7_1 | 0) | 0;
  HEAP32[$7_1 >> 2] = 8816 + 8 | 0;
  HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($7_1 + 12 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
  $753($7_1 + 16 | 0 | 0) | 0;
  HEAPF32[($7_1 + 32 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 36 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 40 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 44 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 48 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 52 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 56 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 60 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 64 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 68 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 72 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 76 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 80 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 84 | 0) >> 2] = Math_fround(0 | 0);
  HEAP8[($7_1 + 88 | 0) >> 0] = 0;
  HEAPF32[($7_1 + 92 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($7_1 + 96 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 100 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 104 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 108 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($7_1 + 112 | 0) >> 2] = Math_fround(0 | 0);
  HEAP8[($7_1 + 116 | 0) >> 0] = 0;
  HEAP8[($7_1 + 117 | 0) >> 0] = 0;
  $754($7_1 | 0);
  global$0 = $6_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $753($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 6596 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $754($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround($780(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0));
  HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround($781(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0));
  HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround($782(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0));
  HEAPF32[($4_1 + 44 | 0) >> 2] = Math_fround($783(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0));
  HEAPF32[($4_1 + 48 | 0) >> 2] = Math_fround($784(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0));
  HEAPF32[($4_1 + 52 | 0) >> 2] = Math_fround($785(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0));
  HEAPF32[($4_1 + 56 | 0) >> 2] = Math_fround($786(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0));
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $755($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $756($4_1 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2])));
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $756($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  $5_1 = Math_fround($5_1);
  $6_1 = Math_fround($6_1);
  $7_1 = Math_fround($7_1);
  var $10_1 = 0, $11_1 = 0, $32_1 = 0, $463_1 = Math_fround(0), $466_1 = Math_fround(0), $469_1 = Math_fround(0), $472_1 = Math_fround(0);
  $10_1 = global$0 - 176 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 172 | 0) >> 2] = $0_1;
  HEAPF32[($10_1 + 168 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 164 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 160 | 0) >> 2] = $3_1;
  HEAPF32[($10_1 + 156 | 0) >> 2] = $4_1;
  HEAPF32[($10_1 + 152 | 0) >> 2] = $5_1;
  HEAPF32[($10_1 + 148 | 0) >> 2] = $6_1;
  HEAPF32[($10_1 + 144 | 0) >> 2] = $7_1;
  $11_1 = HEAP32[($10_1 + 172 | 0) >> 2] | 0;
  HEAP32[($10_1 + 116 | 0) >> 2] = HEAP32[($11_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($11_1 + 60 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 168 | 0) >> 2]);
  HEAPF32[($11_1 + 64 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 164 | 0) >> 2]);
  HEAPF32[($11_1 + 68 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 160 | 0) >> 2]);
  HEAPF32[($11_1 + 72 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 156 | 0) >> 2]);
  HEAPF32[($11_1 + 76 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 152 | 0) >> 2]);
  HEAPF32[($11_1 + 80 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 148 | 0) >> 2]);
  HEAPF32[($11_1 + 84 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2]);
  HEAP8[($11_1 + 88 | 0) >> 0] = 1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($10_1 + 116 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAPF32[($10_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 160 | 0) >> 2]) + Math_fround(90.0)) + Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2]));
    HEAPF32[($10_1 + 108 | 0) >> 2] = Math_fround($1298(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0));
    HEAPF32[($10_1 + 104 | 0) >> 2] = Math_fround($1299(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0));
    HEAPF32[($11_1 + 92 | 0) >> 2] = Math_fround(Math_fround(Math_fround($1030(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 160 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 148 | 0) >> 2]))))) * Math_fround(HEAPF32[($10_1 + 156 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 108 | 0) >> 2]));
    HEAPF32[($11_1 + 96 | 0) >> 2] = Math_fround(Math_fround(Math_fround($1030(Math_fround(Math_fround(HEAPF32[($10_1 + 112 | 0) >> 2])))) * Math_fround(HEAPF32[($10_1 + 152 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 108 | 0) >> 2]));
    HEAPF32[($11_1 + 104 | 0) >> 2] = Math_fround(Math_fround(Math_fround($1029(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 160 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 148 | 0) >> 2]))))) * Math_fround(HEAPF32[($10_1 + 156 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 104 | 0) >> 2]));
    HEAPF32[($11_1 + 108 | 0) >> 2] = Math_fround(Math_fround(Math_fround($1029(Math_fround(Math_fround(HEAPF32[($10_1 + 112 | 0) >> 2])))) * Math_fround(HEAPF32[($10_1 + 152 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 104 | 0) >> 2]));
    HEAPF32[($11_1 + 100 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 168 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 108 | 0) >> 2])) + Math_fround($1296(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0)));
    HEAPF32[($11_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 164 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 104 | 0) >> 2])) + Math_fround($1297(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0)));
    break label$1;
   }
   HEAPF32[($10_1 + 132 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 116 | 0) >> 2] | 0) + 92 | 0) >> 2]);
   HEAPF32[($10_1 + 128 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 116 | 0) >> 2] | 0) + 96 | 0) >> 2]);
   HEAPF32[($10_1 + 124 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 116 | 0) >> 2] | 0) + 104 | 0) >> 2]);
   HEAPF32[($10_1 + 120 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 116 | 0) >> 2] | 0) + 108 | 0) >> 2]);
   HEAPF32[($11_1 + 100 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 132 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 168 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 128 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 164 | 0) >> 2]))) + Math_fround(HEAPF32[((HEAP32[($10_1 + 116 | 0) >> 2] | 0) + 100 | 0) >> 2]));
   HEAPF32[($11_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 168 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 164 | 0) >> 2]))) + Math_fround(HEAPF32[((HEAP32[($10_1 + 116 | 0) >> 2] | 0) + 112 | 0) >> 2]));
   $32_1 = $787(HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     switch ($32_1 | 0) {
     case 0:
      HEAPF32[($10_1 + 100 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 160 | 0) >> 2]) + Math_fround(90.0)) + Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2]));
      HEAPF32[($10_1 + 96 | 0) >> 2] = Math_fround(Math_fround($1030(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 160 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 148 | 0) >> 2]))))) * Math_fround(HEAPF32[($10_1 + 156 | 0) >> 2]));
      HEAPF32[($10_1 + 92 | 0) >> 2] = Math_fround(Math_fround($1030(Math_fround(Math_fround(HEAPF32[($10_1 + 100 | 0) >> 2])))) * Math_fround(HEAPF32[($10_1 + 152 | 0) >> 2]));
      HEAPF32[($10_1 + 88 | 0) >> 2] = Math_fround(Math_fround($1029(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 160 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 148 | 0) >> 2]))))) * Math_fround(HEAPF32[($10_1 + 156 | 0) >> 2]));
      HEAPF32[($10_1 + 84 | 0) >> 2] = Math_fround(Math_fround($1029(Math_fround(Math_fround(HEAPF32[($10_1 + 100 | 0) >> 2])))) * Math_fround(HEAPF32[($10_1 + 152 | 0) >> 2]));
      HEAPF32[($11_1 + 92 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 132 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 96 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 128 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2])));
      HEAPF32[($11_1 + 96 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 132 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 92 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 128 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2])));
      HEAPF32[($11_1 + 104 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 96 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2])));
      HEAPF32[($11_1 + 108 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 92 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2])));
      break label$1;
     case 1:
      HEAPF32[($10_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 160 | 0) >> 2]) + Math_fround(90.0)) + Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2]));
      HEAPF32[($11_1 + 92 | 0) >> 2] = Math_fround(Math_fround($1030(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 160 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 148 | 0) >> 2]))))) * Math_fround(HEAPF32[($10_1 + 156 | 0) >> 2]));
      HEAPF32[($11_1 + 96 | 0) >> 2] = Math_fround(Math_fround($1030(Math_fround(Math_fround(HEAPF32[($10_1 + 80 | 0) >> 2])))) * Math_fround(HEAPF32[($10_1 + 152 | 0) >> 2]));
      HEAPF32[($11_1 + 104 | 0) >> 2] = Math_fround(Math_fround($1029(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 160 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 148 | 0) >> 2]))))) * Math_fround(HEAPF32[($10_1 + 156 | 0) >> 2]));
      HEAPF32[($11_1 + 108 | 0) >> 2] = Math_fround(Math_fround($1029(Math_fround(Math_fround(HEAPF32[($10_1 + 80 | 0) >> 2])))) * Math_fround(HEAPF32[($10_1 + 152 | 0) >> 2]));
      break label$3;
     case 2:
      HEAPF32[($10_1 + 76 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 132 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 132 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2])));
      label$8 : {
       label$9 : {
        if (!(Math_fround(HEAPF32[($10_1 + 76 | 0) >> 2]) > Math_fround(9.999999747378752e-05) & 1 | 0)) {
         break label$9
        }
        HEAPF32[($10_1 + 76 | 0) >> 2] = Math_fround(Math_fround($1014(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 132 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($10_1 + 128 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]))))))) / Math_fround(HEAPF32[($10_1 + 76 | 0) >> 2]));
        HEAPF32[($10_1 + 128 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 76 | 0) >> 2]));
        HEAPF32[($10_1 + 120 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 132 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 76 | 0) >> 2]));
        HEAPF32[($10_1 + 72 | 0) >> 2] = Math_fround(Math_fround($1019(Math_fround(Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 132 | 0) >> 2])))) * Math_fround(HEAPF32[(0 + 10192 | 0) >> 2]));
        break label$8;
       }
       HEAPF32[($10_1 + 132 | 0) >> 2] = Math_fround(0 | 0);
       HEAPF32[($10_1 + 124 | 0) >> 2] = Math_fround(0 | 0);
       HEAPF32[($10_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-Math_fround($1019(Math_fround(Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 128 | 0) >> 2]))))) * Math_fround(HEAPF32[(0 + 10192 | 0) >> 2])) + Math_fround(90.0));
      }
      HEAPF32[($10_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 160 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 148 | 0) >> 2])) - Math_fround(HEAPF32[($10_1 + 72 | 0) >> 2]));
      HEAPF32[($10_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 160 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2])) - Math_fround(HEAPF32[($10_1 + 72 | 0) >> 2])) + Math_fround(90.0));
      HEAPF32[($10_1 + 60 | 0) >> 2] = Math_fround(Math_fround($1030(Math_fround(Math_fround(HEAPF32[($10_1 + 68 | 0) >> 2])))) * Math_fround(HEAPF32[($10_1 + 156 | 0) >> 2]));
      HEAPF32[($10_1 + 56 | 0) >> 2] = Math_fround(Math_fround($1030(Math_fround(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2])))) * Math_fround(HEAPF32[($10_1 + 152 | 0) >> 2]));
      HEAPF32[($10_1 + 52 | 0) >> 2] = Math_fround(Math_fround($1029(Math_fround(Math_fround(HEAPF32[($10_1 + 68 | 0) >> 2])))) * Math_fround(HEAPF32[($10_1 + 156 | 0) >> 2]));
      HEAPF32[($10_1 + 48 | 0) >> 2] = Math_fround(Math_fround($1029(Math_fround(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2])))) * Math_fround(HEAPF32[($10_1 + 152 | 0) >> 2]));
      HEAPF32[($11_1 + 92 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 132 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($10_1 + 128 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2]))));
      HEAPF32[($11_1 + 96 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 132 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($10_1 + 128 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]))));
      HEAPF32[($11_1 + 104 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2])));
      HEAPF32[($11_1 + 108 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2])));
      break label$3;
     case 3:
     case 4:
      break label$4;
     default:
      break label$3;
     };
    }
    HEAPF32[($10_1 + 140 | 0) >> 2] = Math_fround($1030(Math_fround(Math_fround(HEAPF32[($10_1 + 160 | 0) >> 2]))));
    HEAPF32[($10_1 + 136 | 0) >> 2] = Math_fround($1029(Math_fround(Math_fround(HEAPF32[($10_1 + 160 | 0) >> 2]))));
    HEAPF32[($10_1 + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 132 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 140 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 128 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 136 | 0) >> 2]))) / Math_fround($1298(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0)));
    HEAPF32[($10_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 140 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 136 | 0) >> 2]))) / Math_fround($1299(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0)));
    HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]))))));
    label$10 : {
     if (!(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]) > Math_fround(9.999999747378752e-06) & 1 | 0)) {
      break label$10
     }
     HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]));
    }
    HEAPF32[($10_1 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]));
    HEAPF32[($10_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]));
    HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]))))));
    label$11 : {
     if (!(($787(HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) == (3 | 0) & 1 | 0)) {
      break label$11
     }
     if (!((Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 132 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($10_1 + 128 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2])))) < Math_fround(0 | 0) & 1 | 0 | 0) != ((Math_fround($1298(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0)) < Math_fround(0 | 0) & 1 | 0 | 0) != (Math_fround($1299(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0)) < Math_fround(0 | 0) & 1 | 0 | 0) & 1 | 0 | 0) & 1 | 0)) {
      break label$11
     }
     HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]));
    }
    HEAPF32[($10_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 10180 | 0) >> 2]) / Math_fround(2.0)) + Math_fround($1019(Math_fround(Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2])))));
    HEAPF32[($10_1 + 28 | 0) >> 2] = Math_fround(Math_fround($1021(Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2])))) * Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]));
    HEAPF32[($10_1 + 24 | 0) >> 2] = Math_fround(Math_fround($1023(Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2])))) * Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]));
    HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(Math_fround($1030(Math_fround(Math_fround(HEAPF32[($10_1 + 148 | 0) >> 2])))) * Math_fround(HEAPF32[($10_1 + 156 | 0) >> 2]));
    HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(Math_fround($1030(Math_fround(Math_fround(Math_fround(90.0) + Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2]))))) * Math_fround(HEAPF32[($10_1 + 152 | 0) >> 2]));
    HEAPF32[($10_1 + 12 | 0) >> 2] = Math_fround(Math_fround($1029(Math_fround(Math_fround(HEAPF32[($10_1 + 148 | 0) >> 2])))) * Math_fround(HEAPF32[($10_1 + 156 | 0) >> 2]));
    HEAPF32[($10_1 + 8 | 0) >> 2] = Math_fround(Math_fround($1029(Math_fround(Math_fround(Math_fround(90.0) + Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2]))))) * Math_fround(HEAPF32[($10_1 + 152 | 0) >> 2]));
    HEAPF32[($11_1 + 92 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2])));
    HEAPF32[($11_1 + 96 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])));
    HEAPF32[($11_1 + 104 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2])));
    HEAPF32[($11_1 + 108 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])));
   }
   $463_1 = Math_fround($1298(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0));
   HEAPF32[($11_1 + 92 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($11_1 + 92 | 0) >> 2]) * $463_1);
   $466_1 = Math_fround($1298(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0));
   HEAPF32[($11_1 + 96 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($11_1 + 96 | 0) >> 2]) * $466_1);
   $469_1 = Math_fround($1299(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0));
   HEAPF32[($11_1 + 104 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($11_1 + 104 | 0) >> 2]) * $469_1);
   $472_1 = Math_fround($1299(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0));
   HEAPF32[($11_1 + 108 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($11_1 + 108 | 0) >> 2]) * $472_1);
  }
  global$0 = $10_1 + 176 | 0;
  return;
 }
 
 function $757($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $756($4_1 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2])));
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $758($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  HEAPF32[(HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 92 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 96 | 0) >> 2]))) + Math_fround(HEAPF32[($8_1 + 100 | 0) >> 2]));
  HEAPF32[(HEAP32[($7_1 + 12 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 104 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 108 | 0) >> 2]))) + Math_fround(HEAPF32[($8_1 + 112 | 0) >> 2]));
  return;
 }
 
 function $759($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $760($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $761($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $762($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0;
 }
 
 function $763($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 92 | 0) >> 2]));
 }
 
 function $764($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2]));
 }
 
 function $765($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 104 | 0) >> 2]));
 }
 
 function $766($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 108 | 0) >> 2]));
 }
 
 function $767($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 100 | 0) >> 2]));
 }
 
 function $768($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 112 | 0) >> 2]));
 }
 
 function $769($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 76 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
  HEAP32[($3_1 + 72 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP8[($4_1 + 88 | 0) >> 0] = 1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAPF32[($4_1 + 60 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 100 | 0) >> 2]);
    HEAPF32[($4_1 + 64 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 112 | 0) >> 2]);
    HEAPF32[($4_1 + 68 | 0) >> 2] = Math_fround(Math_fround($1019(Math_fround(Math_fround(HEAPF32[($4_1 + 104 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 92 | 0) >> 2])))) * Math_fround(HEAPF32[(0 + 10192 | 0) >> 2]));
    HEAPF32[($4_1 + 72 | 0) >> 2] = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 92 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 92 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($4_1 + 104 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 104 | 0) >> 2]))))));
    HEAPF32[($4_1 + 76 | 0) >> 2] = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($4_1 + 108 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 108 | 0) >> 2]))))));
    HEAPF32[($4_1 + 80 | 0) >> 2] = Math_fround(0 | 0);
    HEAPF32[($4_1 + 84 | 0) >> 2] = Math_fround(Math_fround($1019(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 92 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($4_1 + 104 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 108 | 0) >> 2])))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 92 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 108 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 104 | 0) >> 2]))))))) * Math_fround(HEAPF32[(0 + 10192 | 0) >> 2]));
    break label$1;
   }
   HEAPF32[($3_1 + 68 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 92 | 0) >> 2]);
   HEAPF32[($3_1 + 64 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 96 | 0) >> 2]);
   HEAPF32[($3_1 + 60 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 104 | 0) >> 2]);
   HEAPF32[($3_1 + 56 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 108 | 0) >> 2]);
   HEAPF32[($3_1 + 52 | 0) >> 2] = Math_fround(Math_fround(1.0) / Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 68 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($3_1 + 64 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 60 | 0) >> 2])))));
   HEAPF32[($3_1 + 48 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 100 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 100 | 0) >> 2]));
   HEAPF32[($3_1 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 112 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 112 | 0) >> 2]));
   HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2]));
   HEAPF32[($3_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 68 | 0) >> 2]));
   HEAPF32[($3_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 64 | 0) >> 2]));
   HEAPF32[($3_1 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 60 | 0) >> 2]));
   HEAPF32[($3_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 92 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 104 | 0) >> 2]))));
   HEAPF32[($3_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 108 | 0) >> 2]))));
   HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 104 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 92 | 0) >> 2]))));
   HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 108 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2]))));
   HEAPF32[($4_1 + 60 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 64 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]))));
   HEAPF32[($4_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 68 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 60 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]))));
   HEAPF32[($4_1 + 80 | 0) >> 2] = Math_fround(0 | 0);
   HEAPF32[($4_1 + 72 | 0) >> 2] = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]))))));
   label$3 : {
    label$4 : {
     if (!(Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2]) > Math_fround(9.999999747378752e-05) & 1 | 0)) {
      break label$4
     }
     HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]))));
     HEAPF32[($4_1 + 76 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) / Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2]));
     HEAPF32[($4_1 + 84 | 0) >> 2] = Math_fround(Math_fround($1019(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2])))), Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2])))) * Math_fround(HEAPF32[(0 + 10192 | 0) >> 2]));
     HEAPF32[($4_1 + 68 | 0) >> 2] = Math_fround(Math_fround($1019(Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2])))) * Math_fround(HEAPF32[(0 + 10192 | 0) >> 2]));
     break label$3;
    }
    HEAPF32[($4_1 + 72 | 0) >> 2] = Math_fround(0 | 0);
    HEAPF32[($4_1 + 76 | 0) >> 2] = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))))));
    HEAPF32[($4_1 + 84 | 0) >> 2] = Math_fround(0 | 0);
    HEAPF32[($4_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-Math_fround($1019(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]))))) * Math_fround(HEAPF32[(0 + 10192 | 0) >> 2])) + Math_fround(90.0));
   }
  }
  global$0 = $3_1 + 80 | 0;
  return;
 }
 
 function $770($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 117 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $771($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  HEAP8[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 117 | 0) >> 0] = (HEAPU8[($4_1 + 11 | 0) >> 0] | 0) & 1 | 0;
  return;
 }
 
 function $772($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 8816 + 8 | 0;
  $140($4_1 + 16 | 0 | 0) | 0;
  $1758($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $773($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $772($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $774() {
  $748();
  return;
 }
 
 function $775($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $7_1 = 0, $6_1 = 0, $48_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  $113($7_1 | 0) | 0;
  HEAP32[$7_1 >> 2] = 8876 + 8 | 0;
  HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  $124($7_1 + 8 | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($7_1 + 24 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 28 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 32 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 36 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 40 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($7_1 + 44 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($7_1 + 48 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 52 | 0) >> 2] = Math_fround(0 | 0);
  HEAP32[($7_1 + 56 | 0) >> 2] = 0;
  HEAP8[($7_1 + 60 | 0) >> 0] = 0;
  label$1 : {
   if ((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0) {
    break label$1
   }
   fimport$0(5678 | 0, 3778 | 0, 53 | 0, 5348 | 0);
   wasm2js_trap();
  }
  label$2 : {
   if (($131($7_1 + 8 | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$2
   }
   fimport$0(5608 | 0, 3778 | 0, 54 | 0, 5348 | 0);
   wasm2js_trap();
  }
  $48_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $48_1 | 0;
 }
 
 function $776($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $777($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0;
 }
 
 function $778($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0;
 }
 
 function $779($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2]));
 }
 
 function $780($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2]));
 }
 
 function $781($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 32 | 0) >> 2]));
 }
 
 function $782($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2]));
 }
 
 function $783($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2]));
 }
 
 function $784($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 2]));
 }
 
 function $785($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2]));
 }
 
 function $786($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 52 | 0) >> 2]));
 }
 
 function $787($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0;
 }
 
 function $788($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 60 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $789($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 8876 + 8 | 0;
  $112($4_1 + 8 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $790($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $789($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $791() {
  $1160(26260 | 0, 1460 | 0, 26616 | 0) | 0;
  $1797(130 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $792($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26260 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $793($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26260 | 0;
 }
 
 function $794($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1764($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 8924 + 8 | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $795($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $12_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $8_1 = $1655(64 | 0, 2017 | 0, 44 | 0) | 0;
  FUNCTION_TABLE[131 | 0]($8_1, $712($4_1 | 0) | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $8_1;
  $1774($4_1 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  $12_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $12_1 | 0;
 }
 
 function $796($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1766($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $797($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $796($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $798() {
  $791();
  return;
 }
 
 function $799() {
  $1160(26272 | 0, 1590 | 0, 26616 | 0) | 0;
  $1797(136 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $800($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26272 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $801($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26272 | 0;
 }
 
 function $802($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1764($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 8992 + 8 | 0;
  HEAP32[($5_1 + 64 | 0) >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $803($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $8_1 = $1655(68 | 0, 2402 | 0, 54 | 0) | 0;
  FUNCTION_TABLE[137 | 0]($8_1, $712($4_1 | 0) | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $8_1;
  $1774($4_1 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 64 | 0) >> 2] = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
  $14_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $804($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1766($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $805($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $804($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $806() {
  $799();
  return;
 }
 
 function $807() {
  $1160(26284 | 0, 4880 | 0, 26308 | 0) | 0;
  $1797(142 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $808($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26284 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $809($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26284 | 0;
 }
 
 function $810($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $838($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 9064 + 8 | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = 0;
  $502($5_1 + 24 | 0 | 0) | 0;
  $17_1 = Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 5);
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
  $573($5_1 + 24 | 0 | 0, $17_1 | 0, $4_1 + 4 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $811($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $20_1 = 0, $33_1 = 0;
  $10_1 = global$0 - 112 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 104 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 100 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 96 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 92 | 0) >> 2] = $4_1;
  HEAPF32[($10_1 + 88 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 84 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 80 | 0) >> 2] = $7_1;
  $11_1 = HEAP32[($10_1 + 108 | 0) >> 2] | 0;
  HEAP32[($10_1 + 76 | 0) >> 2] = HEAP32[($82((HEAP32[($10_1 + 104 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($10_1 + 72 | 0) >> 2] = HEAP32[($10_1 + 76 | 0) >> 2] | 0;
  $20_1 = HEAP32[((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$20_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($20_1) | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!(Math_fround(HEAPF32[($10_1 + 96 | 0) >> 2]) < Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$3
    }
    $33_1 = HEAP32[($10_1 + 84 | 0) >> 2] | 0;
    label$4 : {
     switch ($33_1 | 0) {
     case 0:
      $812((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 16 | 0 | 0, (HEAP32[((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 24 | 0 | 0) | 0;
      break label$1;
     case 1:
      HEAP32[($10_1 + 68 | 0) >> 2] = (HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 16 | 0;
      $813($10_1 + 48 | 0 | 0, (HEAP32[((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 24 | 0 | 0) | 0;
      $814(HEAP32[($10_1 + 68 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 68 | 0) >> 2] | 0) + 4 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 68 | 0) >> 2] | 0) + 8 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 68 | 0) >> 2] | 0) + 12 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 68 | 0) >> 2] | 0) + 16 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2])))) | 0;
      $815($10_1 + 48 | 0 | 0) | 0;
      break;
     default:
      break label$4;
     };
    }
    break label$1;
   }
   label$7 : {
    label$8 : {
     if (!(Math_fround(HEAPF32[($10_1 + 96 | 0) >> 2]) >= Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, ($488($11_1 + 24 | 0 | 0) | 0) - 5 | 0 | 0) | 0) >> 2]) & 1 | 0)) {
      break label$8
     }
     HEAP32[($10_1 + 28 | 0) >> 2] = $488($11_1 + 24 | 0 | 0) | 0;
     HEAPF32[($10_1 + 44 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + -4 | 0 | 0) | 0) >> 2]);
     HEAPF32[($10_1 + 40 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + -3 | 0 | 0) | 0) >> 2]);
     HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + -2 | 0 | 0) | 0) >> 2]);
     HEAPF32[($10_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + -1 | 0 | 0) | 0) >> 2]);
     break label$7;
    }
    HEAP32[($10_1 + 24 | 0) >> 2] = $487($11_1 + 24 | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 96 | 0) >> 2])), 5 | 0) | 0;
    HEAPF32[($10_1 + 44 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, (HEAP32[($10_1 + 24 | 0) >> 2] | 0) + -4 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 40 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, (HEAP32[($10_1 + 24 | 0) >> 2] | 0) + -3 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, (HEAP32[($10_1 + 24 | 0) >> 2] | 0) + -2 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, (HEAP32[($10_1 + 24 | 0) >> 2] | 0) + -1 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, HEAP32[($10_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround($843($11_1 | 0, (((HEAP32[($10_1 + 24 | 0) >> 2] | 0) >>> 0) / (5 >>> 0) | 0) - 1 | 0 | 0, Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 96 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) / Math_fround(Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, (HEAP32[($10_1 + 24 | 0) >> 2] | 0) + -5 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])))))));
    HEAPF32[($10_1 + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, (HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2]));
    HEAPF32[($10_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, (HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]));
    HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, (HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 3 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]));
    HEAPF32[($10_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, (HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]));
   }
   label$9 : {
    if (!(Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]) == Math_fround(1.0) & 1 | 0)) {
     break label$9
    }
    $816($1635(HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]))) | 0;
    break label$1;
   }
   HEAP32[($10_1 + 12 | 0) >> 2] = $1635(HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) | 0;
   label$10 : {
    if (HEAP32[($10_1 + 84 | 0) >> 2] | 0) {
     break label$10
    }
    $812(HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0, $1645($1633(HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0;
   }
   $814(HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2])))) | 0;
  }
  global$0 = $10_1 + 112 | 0;
  return;
 }
 
 function $812($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2]);
  HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2]);
  HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2]);
  HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2]);
  $817($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $813($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $11_1 = 0, $15_1 = 0, $54_1 = 0, $64_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $609($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 9128 + 8 | 0;
  $11_1 = $5_1 + 4 | 0;
  i64toi32_i32$2 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $54_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $11_1;
  HEAP32[i64toi32_i32$0 >> 2] = $54_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $15_1 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $15_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $64_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $11_1 + $15_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $64_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $814($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  HEAPF32[($8_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]));
  HEAPF32[($8_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]) + Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]));
  HEAPF32[($8_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]) + Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]));
  HEAPF32[($8_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]) + Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]));
  $817($8_1 | 0) | 0;
  global$0 = $7_1 + 32 | 0;
  return $8_1 | 0;
 }
 
 function $815($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $816($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  HEAPF32[($8_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
  HEAPF32[($8_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
  HEAPF32[($8_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
  HEAPF32[($8_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
  $817($8_1 | 0) | 0;
  global$0 = $7_1 + 32 | 0;
  return $8_1 | 0;
 }
 
 function $817($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround($1016(Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2])), Math_fround(Math_fround(0 | 0)), Math_fround(Math_fround(1.0))));
  HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround($1016(Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])), Math_fround(Math_fround(0 | 0)), Math_fround(Math_fround(1.0))));
  HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround($1016(Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2])), Math_fround(Math_fround(0 | 0)), Math_fround(Math_fround(1.0))));
  HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround($1016(Math_fround(Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2])), Math_fround(Math_fround(0 | 0)), Math_fround(Math_fround(1.0))));
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $818($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 83886080 | 0 | 0;
 }
 
 function $819($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  $5_1 = Math_fround($5_1);
  $6_1 = Math_fround($6_1);
  var $9_1 = 0, $10_1 = 0, $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47_1 = Math_fround(0), $48_1 = Math_fround(0);
  $9_1 = global$0 - 32 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($9_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($9_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($9_1 + 12 | 0) >> 2] = $4_1;
  HEAPF32[($9_1 + 8 | 0) >> 2] = $5_1;
  HEAPF32[($9_1 + 4 | 0) >> 2] = $6_1;
  $10_1 = HEAP32[($9_1 + 28 | 0) >> 2] | 0;
  HEAP32[($9_1 + 24 | 0) >> 2] = Math_imul(HEAP32[($9_1 + 24 | 0) >> 2] | 0, 5);
  $44_1 = Math_fround(HEAPF32[($9_1 + 20 | 0) >> 2]);
  HEAPF32[($15($10_1 + 24 | 0 | 0, HEAP32[($9_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] = $44_1;
  $45_1 = Math_fround(HEAPF32[($9_1 + 16 | 0) >> 2]);
  HEAPF32[($15($10_1 + 24 | 0 | 0, (HEAP32[($9_1 + 24 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $45_1;
  $46_1 = Math_fround(HEAPF32[($9_1 + 12 | 0) >> 2]);
  HEAPF32[($15($10_1 + 24 | 0 | 0, (HEAP32[($9_1 + 24 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2] = $46_1;
  $47_1 = Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]);
  HEAPF32[($15($10_1 + 24 | 0 | 0, (HEAP32[($9_1 + 24 | 0) >> 2] | 0) + 3 | 0 | 0) | 0) >> 2] = $47_1;
  $48_1 = Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]);
  HEAPF32[($15($10_1 + 24 | 0 | 0, (HEAP32[($9_1 + 24 | 0) >> 2] | 0) + 4 | 0 | 0) | 0) >> 2] = $48_1;
  global$0 = $9_1 + 32 | 0;
  return;
 }
 
 function $820($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 9064 + 8 | 0;
  $504($4_1 + 24 | 0 | 0) | 0;
  $839($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $821($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $820($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $822($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $815($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $823() {
  $807();
  return;
 }
 
 function $824() {
  $1160(26296 | 0, 1431 | 0, 26604 | 0) | 0;
  $1797(150 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $825($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26296 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $826() {
  $824();
  return;
 }
 
 function $827($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $113($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 9172 + 8 | 0;
  $124($5_1 + 4 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  HEAP8[($5_1 + 20 | 0) >> 0] = 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $828($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 9172 + 8 | 0;
  $112($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $829($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[151 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $830($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0;
 }
 
 function $831($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0;
 }
 
 function $832($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function $833($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $834($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  HEAP8[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 0] = (HEAPU8[($4_1 + 11 | 0) >> 0] | 0) & 1 | 0;
  return;
 }
 
 function $835() {
  $1160(26308 | 0, 5002 | 0, 26544 | 0) | 0;
  $1797(153 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $836($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26308 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $837($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26308 | 0;
 }
 
 function $838($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $28_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  $1664($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 9228 + 8 | 0;
  $502($5_1 + 4 | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0) {
    break label$1
   }
   fimport$0(5587 | 0, 3413 | 0, 48 | 0, 5002 | 0);
   wasm2js_trap();
  }
  $28_1 = Math_imul((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0, 19);
  HEAPF32[$4_1 >> 2] = Math_fround(0 | 0);
  $573($5_1 + 4 | 0 | 0, $28_1 | 0, $4_1 | 0);
  $31_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $31_1 | 0;
 }
 
 function $839($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 9228 + 8 | 0;
  $504($4_1 + 4 | 0 | 0) | 0;
  $1665($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $840($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  wasm2js_trap();
 }
 
 function $841($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($15((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0, Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 19) | 0) | 0) >> 2] = Math_fround(1.0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $842($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  $5_1 = Math_fround($5_1);
  var $8_1 = 0, $9_1 = 0, $47_1 = Math_fround(0), $54_1 = Math_fround(0), $78_1 = Math_fround(0), $82_1 = Math_fround(0), $15_1 = 0, $107_1 = Math_fround(0), $108_1 = Math_fround(0);
  $8_1 = global$0 - 80 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 72 | 0) >> 2] = $1_1;
  HEAPF32[($8_1 + 68 | 0) >> 2] = $2_1;
  HEAPF32[($8_1 + 64 | 0) >> 2] = $3_1;
  HEAPF32[($8_1 + 60 | 0) >> 2] = $4_1;
  HEAPF32[($8_1 + 56 | 0) >> 2] = $5_1;
  $9_1 = HEAP32[($8_1 + 76 | 0) >> 2] | 0;
  $47_1 = Math_fround(-Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]));
  HEAPF32[($8_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround($47_1 + $47_1) + Math_fround(HEAPF32[($8_1 + 60 | 0) >> 2])) * Math_fround(.029999999329447746));
  $54_1 = Math_fround(-Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]));
  HEAPF32[($8_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround($54_1 + $54_1) + Math_fround(HEAPF32[($8_1 + 56 | 0) >> 2])) * Math_fround(.029999999329447746));
  HEAPF32[($8_1 + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 60 | 0) >> 2])) * Math_fround(3.0)) + Math_fround(1.0)) * Math_fround(.006000000052154064));
  HEAPF32[($8_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 56 | 0) >> 2])) * Math_fround(3.0)) + Math_fround(1.0)) * Math_fround(.006000000052154064));
  $78_1 = Math_fround(HEAPF32[($8_1 + 52 | 0) >> 2]);
  HEAPF32[($8_1 + 36 | 0) >> 2] = Math_fround(Math_fround($78_1 + $78_1) + Math_fround(HEAPF32[($8_1 + 44 | 0) >> 2]));
  $82_1 = Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]);
  HEAPF32[($8_1 + 32 | 0) >> 2] = Math_fround(Math_fround($82_1 + $82_1) + Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2]));
  HEAPF32[($8_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 44 | 0) >> 2]) * Math_fround(.1666666716337204)) + Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]) * Math_fround(.30000001192092896)) + Math_fround(HEAPF32[($8_1 + 52 | 0) >> 2])));
  HEAPF32[($8_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2]) * Math_fround(.1666666716337204)) + Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]) * Math_fround(.30000001192092896)) + Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2])));
  HEAP32[($8_1 + 20 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 72 | 0) >> 2] | 0, 19);
  $15_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
  HEAP32[($8_1 + 20 | 0) >> 2] = $15_1 + 1 | 0;
  HEAPF32[($15($9_1 + 4 | 0 | 0, $15_1 | 0) | 0) >> 2] = Math_fround(2.0);
  HEAPF32[($8_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($8_1 + 28 | 0) >> 2]);
  HEAPF32[($8_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]);
  HEAP32[($8_1 + 8 | 0) >> 2] = ((HEAP32[($8_1 + 20 | 0) >> 2] | 0) + 19 | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($8_1 + 20 | 0) >> 2] | 0) >>> 0 < (HEAP32[($8_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $107_1 = Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]);
    HEAPF32[($15($9_1 + 4 | 0 | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] = $107_1;
    $108_1 = Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]);
    HEAPF32[($15($9_1 + 4 | 0 | 0, (HEAP32[($8_1 + 20 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $108_1;
    HEAPF32[($8_1 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 28 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 36 | 0) >> 2]));
    HEAPF32[($8_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2]));
    HEAPF32[($8_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 36 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 44 | 0) >> 2]));
    HEAPF32[($8_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2]));
    HEAPF32[($8_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 28 | 0) >> 2]));
    HEAPF32[($8_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]));
    HEAP32[($8_1 + 20 | 0) >> 2] = (HEAP32[($8_1 + 20 | 0) >> 2] | 0) + 2 | 0;
    continue label$2;
   };
  }
  global$0 = $8_1 + 80 | 0;
  return;
 }
 
 function $843($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $5_1 = 0, $6_1 = 0, $131_1 = Math_fround(0);
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 32 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 32 | 0) >> 2] = Math_fround($1016(Math_fround(Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2])), Math_fround(Math_fround(0 | 0)), Math_fround(Math_fround(1.0))));
  HEAP32[($5_1 + 28 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 36 | 0) >> 2] | 0, 19);
  HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[($15($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2]);
  label$1 : {
   label$2 : {
    if (!(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) == Math_fround(0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF32[($5_1 + 44 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]);
    break label$1;
   }
   label$3 : {
    if (!(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) == Math_fround(1.0) & 1 | 0)) {
     break label$3
    }
    HEAPF32[($5_1 + 44 | 0) >> 2] = Math_fround(0 | 0);
    break label$1;
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
   HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(0 | 0);
   HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = ((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 19 | 0) - 1 | 0;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$4
     }
     HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2]);
     label$6 : {
      if (!(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]) >= Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]) & 1 | 0)) {
       break label$6
      }
      label$7 : {
       label$8 : {
        if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$8
        }
        HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(0 | 0);
        HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
        break label$7;
       }
       HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($15($6_1 + 4 | 0 | 0, (HEAP32[($5_1 + 28 | 0) >> 2] | 0) - 2 | 0 | 0) | 0) >> 2]);
       HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[($15($6_1 + 4 | 0 | 0, (HEAP32[($5_1 + 28 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]);
      }
      HEAPF32[($5_1 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($6_1 + 4 | 0 | 0, (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])) * Math_fround(Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]))) / Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]))));
      break label$1;
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 2 | 0;
     continue label$5;
    };
   }
   HEAPF32[$5_1 >> 2] = Math_fround(HEAPF32[($15($6_1 + 4 | 0 | 0, (HEAP32[($5_1 + 28 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]);
   HEAPF32[($5_1 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$5_1 >> 2]) + Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[$5_1 >> 2])) * Math_fround(Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]))) / Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]))));
  }
  $131_1 = Math_fround(HEAPF32[($5_1 + 44 | 0) >> 2]);
  global$0 = $5_1 + 48 | 0;
  return Math_fround($131_1);
 }
 
 function $844() {
  $835();
  return;
 }
 
 function $845() {
  $1160(26320 | 0, 4957 | 0, 26308 | 0) | 0;
  $1797(157 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $846($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26320 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $847($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26320 | 0;
 }
 
 function $848($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $24_1 = 0, $51_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
  HEAP32[($4_1 + 44 | 0) >> 2] = $5_1;
  $838($5_1 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 9292 + 8 | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = 0;
  $502($5_1 + 24 | 0 | 0) | 0;
  $849($5_1 + 40 | 0 | 0) | 0;
  HEAP32[($5_1 + 56 | 0) >> 2] = 0;
  $729($5_1 + 24 | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0);
  $850($5_1 + 40 | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0);
  $24_1 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
  HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(0 | 0);
  $573($5_1 + 24 | 0 | 0, $24_1 | 0, $4_1 + 32 | 0 | 0);
  HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $502($4_1 + 8 | 0 | 0) | 0;
    $851($5_1 + 40 | 0 | 0, $4_1 + 8 | 0 | 0);
    $504($4_1 + 8 | 0 | 0) | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $51_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  global$0 = $4_1 + 48 | 0;
  return $51_1 | 0;
 }
 
 function $849($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 9360 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $850($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $852(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $851($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $61_1 = Math_fround(0), $20_1 = 0, $37_1 = 0, $50_1 = 0, $36_1 = 0, $49_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $853($4_1 + 8 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    $61_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($61_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $20_1 = ~~$61_1;
      break label$3;
     }
     $20_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $20_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $852(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $36_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $37_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $37_1 + 1 | 0;
    $854($5_1 | 0, $36_1 + ($37_1 << 4 | 0) | 0 | 0, $4_1 + 8 | 0 | 0);
    $504($4_1 + 8 | 0 | 0) | 0;
    break label$1;
   }
   $49_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $50_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $50_1 + 1 | 0;
   $854($5_1 | 0, $49_1 + ($50_1 << 4 | 0) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $852($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 4 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $853($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  $113($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 7584 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $871($5_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[$4_1 >> 2] = 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4_1 >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$2
     }
     $581($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0 | 0, (HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0 | 0);
     HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
  }
  $45_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $45_1 | 0;
 }
 
 function $854($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $853($1656(16 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $855($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $20_1 = 0, $35_1 = 0, $73_1 = 0, $108_1 = 0, $122_1 = 0, $180_1 = 0, $197_1 = 0, $208_1 = 0, $269_1 = 0, $295_1 = 0, $312_1 = 0, $372_1 = 0, $392_1 = 0, $416_1 = 0, $486_1 = 0, $515_1 = 0, $535_1 = 0, $80_1 = 0, $81_1 = 0, $548_1 = Math_fround(0), $549_1 = Math_fround(0), $556_1 = Math_fround(0), $126_1 = 0, $127_1 = 0, $566_1 = Math_fround(0), $569_1 = Math_fround(0), $573_1 = Math_fround(0), $579_1 = Math_fround(0), $582_1 = Math_fround(0), $585_1 = Math_fround(0), $586_1 = Math_fround(0), $592_1 = Math_fround(0), $593_1 = Math_fround(0), $597_1 = Math_fround(0), $598_1 = Math_fround(0), $617_1 = Math_fround(0), $625_1 = Math_fround(0), $629_1 = Math_fround(0), $635_1 = Math_fround(0), $639_1 = Math_fround(0), $645_1 = Math_fround(0), $648_1 = Math_fround(0), $649_1 = Math_fround(0), $660_1 = Math_fround(0), $662_1 = Math_fround(0), $670_1 = Math_fround(0), $672_1 = Math_fround(0), $680_1 = Math_fround(0), $681_1 = Math_fround(0), $686_1 = Math_fround(0), $694_1 = Math_fround(0), $695_1 = Math_fround(0), $700_1 = Math_fround(0), $706_1 = Math_fround(0), $707_1 = Math_fround(0);
  $10_1 = global$0 - 272 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 268 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 264 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 260 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 256 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 252 | 0) >> 2] = $4_1;
  HEAPF32[($10_1 + 248 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 244 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 240 | 0) >> 2] = $7_1;
  $11_1 = HEAP32[($10_1 + 268 | 0) >> 2] | 0;
  HEAP32[($10_1 + 236 | 0) >> 2] = HEAP32[($82((HEAP32[($10_1 + 264 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($10_1 + 232 | 0) >> 2] = HEAP32[($10_1 + 236 | 0) >> 2] | 0;
  $20_1 = HEAP32[((HEAP32[($10_1 + 232 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$20_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($20_1) | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($10_1 + 228 | 0) >> 2] = $1637(HEAP32[($10_1 + 232 | 0) >> 2] | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if ((HEAP32[($10_1 + 228 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
      break label$4
     }
     $35_1 = HEAP32[($10_1 + 228 | 0) >> 2] | 0;
     if (($1162(FUNCTION_TABLE[HEAP32[((HEAP32[$35_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($35_1) | 0 | 0, 26616 | 0) | 0) & 1 | 0) {
      break label$3
     }
    }
    break label$1;
   }
   HEAP32[($10_1 + 224 | 0) >> 2] = HEAP32[($10_1 + 228 | 0) >> 2] | 0;
   label$5 : {
    if (!((HEAP32[((HEAP32[($10_1 + 224 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != (HEAP32[($11_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    break label$1;
   }
   HEAP32[($10_1 + 220 | 0) >> 2] = (HEAP32[($10_1 + 232 | 0) >> 2] | 0) + 68 | 0;
   label$6 : {
    if ($488(HEAP32[($10_1 + 220 | 0) >> 2] | 0 | 0) | 0) {
     break label$6
    }
    HEAP32[($10_1 + 244 | 0) >> 2] = 0;
   }
   HEAP32[($10_1 + 216 | 0) >> 2] = $11_1 + 40 | 0;
   HEAP32[($10_1 + 212 | 0) >> 2] = $488($856(HEAP32[($10_1 + 216 | 0) >> 2] | 0 | 0, 0 | 0) | 0 | 0) | 0;
   HEAP32[($10_1 + 208 | 0) >> 2] = $11_1 + 24 | 0;
   label$7 : {
    if (!(Math_fround(HEAPF32[($10_1 + 256 | 0) >> 2]) < Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$7
    }
    $73_1 = HEAP32[($10_1 + 244 | 0) >> 2] | 0;
    label$8 : {
     switch ($73_1 | 0) {
     case 0:
      $508(HEAP32[($10_1 + 220 | 0) >> 2] | 0 | 0);
      break label$1;
     case 1:
      label$12 : {
       if (!(Math_fround(HEAPF32[($10_1 + 248 | 0) >> 2]) == Math_fround(1.0) & 1 | 0)) {
        break label$12
       }
       $508(HEAP32[($10_1 + 220 | 0) >> 2] | 0 | 0);
       break label$1;
      }
      $80_1 = HEAP32[($10_1 + 220 | 0) >> 2] | 0;
      $81_1 = HEAP32[($10_1 + 212 | 0) >> 2] | 0;
      HEAPF32[($10_1 + 204 | 0) >> 2] = Math_fround(0 | 0);
      $573($80_1 | 0, $81_1 | 0, $10_1 + 204 | 0 | 0);
      HEAP32[($10_1 + 200 | 0) >> 2] = HEAP32[($10_1 + 220 | 0) >> 2] | 0;
      label$13 : {
       label$14 : {
        if ($857($1770(HEAP32[($10_1 + 224 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) {
         break label$14
        }
        HEAP32[($10_1 + 196 | 0) >> 2] = $1771(HEAP32[($10_1 + 224 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($10_1 + 192 | 0) >> 2] = 0;
        label$15 : {
         label$16 : while (1) {
          if (!((HEAP32[($10_1 + 192 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 212 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
           break label$15
          }
          $548_1 = Math_fround(Math_fround(HEAPF32[($15(HEAP32[($10_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 192 | 0) >> 2] | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($15(HEAP32[($10_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 192 | 0) >> 2] | 0 | 0) | 0) >> 2]));
          $549_1 = Math_fround(HEAPF32[($10_1 + 248 | 0) >> 2]);
          $108_1 = $15(HEAP32[($10_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 192 | 0) >> 2] | 0 | 0) | 0;
          HEAPF32[$108_1 >> 2] = Math_fround(Math_fround($548_1 * $549_1) + Math_fround(HEAPF32[$108_1 >> 2]));
          HEAP32[($10_1 + 192 | 0) >> 2] = (HEAP32[($10_1 + 192 | 0) >> 2] | 0) + 1 | 0;
          continue label$16;
         };
        }
        break label$13;
       }
       HEAPF32[($10_1 + 248 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($10_1 + 248 | 0) >> 2]));
       HEAP32[($10_1 + 188 | 0) >> 2] = 0;
       label$17 : {
        label$18 : while (1) {
         if (!((HEAP32[($10_1 + 188 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 212 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
          break label$17
         }
         $556_1 = Math_fround(HEAPF32[($10_1 + 248 | 0) >> 2]);
         $122_1 = $15(HEAP32[($10_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 188 | 0) >> 2] | 0 | 0) | 0;
         HEAPF32[$122_1 >> 2] = Math_fround(Math_fround(HEAPF32[$122_1 >> 2]) * $556_1);
         HEAP32[($10_1 + 188 | 0) >> 2] = (HEAP32[($10_1 + 188 | 0) >> 2] | 0) + 1 | 0;
         continue label$18;
        };
       }
      }
     case 2:
     case 3:
      break label$1;
     default:
      break label$8;
     };
    }
   }
   $126_1 = HEAP32[($10_1 + 220 | 0) >> 2] | 0;
   $127_1 = HEAP32[($10_1 + 212 | 0) >> 2] | 0;
   HEAPF32[($10_1 + 184 | 0) >> 2] = Math_fround(0 | 0);
   $573($126_1 | 0, $127_1 | 0, $10_1 + 184 | 0 | 0);
   HEAP32[($10_1 + 180 | 0) >> 2] = HEAP32[($10_1 + 220 | 0) >> 2] | 0;
   label$19 : {
    if (!(Math_fround(HEAPF32[($10_1 + 256 | 0) >> 2]) >= Math_fround(HEAPF32[($15(HEAP32[($10_1 + 208 | 0) >> 2] | 0 | 0, ($488(HEAP32[($10_1 + 208 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$19
    }
    HEAP32[($10_1 + 176 | 0) >> 2] = $856(HEAP32[($10_1 + 216 | 0) >> 2] | 0 | 0, ($488(HEAP32[($10_1 + 208 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0) | 0;
    label$20 : {
     label$21 : {
      if (!(Math_fround(HEAPF32[($10_1 + 248 | 0) >> 2]) == Math_fround(1.0) & 1 | 0)) {
       break label$21
      }
      label$22 : {
       label$23 : {
        if (!((HEAP32[($10_1 + 244 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
         break label$23
        }
        HEAP32[($10_1 + 172 | 0) >> 2] = HEAP32[($10_1 + 228 | 0) >> 2] | 0;
        label$24 : {
         label$25 : {
          if ($857($1770(HEAP32[($10_1 + 172 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) {
           break label$25
          }
          HEAP32[($10_1 + 168 | 0) >> 2] = $1771(HEAP32[($10_1 + 172 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($10_1 + 164 | 0) >> 2] = 0;
          label$26 : {
           label$27 : while (1) {
            if (!((HEAP32[($10_1 + 164 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 212 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
             break label$26
            }
            $566_1 = Math_fround(Math_fround(HEAPF32[($15(HEAP32[($10_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 164 | 0) >> 2] | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($15(HEAP32[($10_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 164 | 0) >> 2] | 0 | 0) | 0) >> 2]));
            $180_1 = $15(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 164 | 0) >> 2] | 0 | 0) | 0;
            HEAPF32[$180_1 >> 2] = Math_fround(Math_fround(HEAPF32[$180_1 >> 2]) + $566_1);
            HEAP32[($10_1 + 164 | 0) >> 2] = (HEAP32[($10_1 + 164 | 0) >> 2] | 0) + 1 | 0;
            continue label$27;
           };
          }
          break label$24;
         }
         HEAP32[($10_1 + 160 | 0) >> 2] = 0;
         label$28 : {
          label$29 : while (1) {
           if (!((HEAP32[($10_1 + 160 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 212 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
            break label$28
           }
           $569_1 = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 160 | 0) >> 2] | 0 | 0) | 0) >> 2]);
           $197_1 = $15(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 160 | 0) >> 2] | 0 | 0) | 0;
           HEAPF32[$197_1 >> 2] = Math_fround(Math_fround(HEAPF32[$197_1 >> 2]) + $569_1);
           HEAP32[($10_1 + 160 | 0) >> 2] = (HEAP32[($10_1 + 160 | 0) >> 2] | 0) + 1 | 0;
           continue label$29;
          };
         }
        }
        break label$22;
       }
       $1798($858(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0) | 0 | 0, $858(HEAP32[($10_1 + 176 | 0) >> 2] | 0 | 0) | 0 | 0, (HEAP32[($10_1 + 212 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
      }
      break label$20;
     }
     $208_1 = HEAP32[($10_1 + 244 | 0) >> 2] | 0;
     label$30 : {
      label$31 : {
       switch ($208_1 | 0) {
       case 0:
        HEAP32[($10_1 + 156 | 0) >> 2] = HEAP32[($10_1 + 228 | 0) >> 2] | 0;
        label$34 : {
         label$35 : {
          if ($857($1770(HEAP32[($10_1 + 156 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) {
           break label$35
          }
          HEAP32[($10_1 + 152 | 0) >> 2] = $1771(HEAP32[($10_1 + 156 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($10_1 + 148 | 0) >> 2] = 0;
          label$36 : {
           label$37 : while (1) {
            if (!((HEAP32[($10_1 + 148 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 212 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
             break label$36
            }
            HEAPF32[($10_1 + 144 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 148 | 0) >> 2] | 0 | 0) | 0) >> 2]);
            $573_1 = Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2]);
            $579_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15(HEAP32[($10_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 148 | 0) >> 2] | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 248 | 0) >> 2])) + $573_1);
            HEAPF32[($15(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 148 | 0) >> 2] | 0 | 0) | 0) >> 2] = $579_1;
            HEAP32[($10_1 + 148 | 0) >> 2] = (HEAP32[($10_1 + 148 | 0) >> 2] | 0) + 1 | 0;
            continue label$37;
           };
          }
          break label$34;
         }
         HEAP32[($10_1 + 140 | 0) >> 2] = 0;
         label$38 : {
          label$39 : while (1) {
           if (!((HEAP32[($10_1 + 140 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 212 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
            break label$38
           }
           $582_1 = Math_fround(Math_fround(HEAPF32[($15(HEAP32[($10_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 140 | 0) >> 2] | 0 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 248 | 0) >> 2]));
           HEAPF32[($15(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 140 | 0) >> 2] | 0 | 0) | 0) >> 2] = $582_1;
           HEAP32[($10_1 + 140 | 0) >> 2] = (HEAP32[($10_1 + 140 | 0) >> 2] | 0) + 1 | 0;
           continue label$39;
          };
         }
        }
        break label$30;
       case 1:
       case 2:
        HEAP32[($10_1 + 136 | 0) >> 2] = 0;
        label$40 : {
         label$41 : while (1) {
          if (!((HEAP32[($10_1 + 136 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 212 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
           break label$40
          }
          $585_1 = Math_fround(Math_fround(HEAPF32[($15(HEAP32[($10_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 136 | 0) >> 2] | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($15(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 136 | 0) >> 2] | 0 | 0) | 0) >> 2]));
          $586_1 = Math_fround(HEAPF32[($10_1 + 248 | 0) >> 2]);
          $269_1 = $15(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 136 | 0) >> 2] | 0 | 0) | 0;
          HEAPF32[$269_1 >> 2] = Math_fround(Math_fround($585_1 * $586_1) + Math_fround(HEAPF32[$269_1 >> 2]));
          HEAP32[($10_1 + 136 | 0) >> 2] = (HEAP32[($10_1 + 136 | 0) >> 2] | 0) + 1 | 0;
          continue label$41;
         };
        }
        break label$30;
       case 3:
        break label$31;
       default:
        break label$30;
       };
      }
      HEAP32[($10_1 + 132 | 0) >> 2] = HEAP32[($10_1 + 228 | 0) >> 2] | 0;
      label$42 : {
       label$43 : {
        if ($857($1770(HEAP32[($10_1 + 132 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) {
         break label$43
        }
        HEAP32[($10_1 + 128 | 0) >> 2] = $1771(HEAP32[($10_1 + 132 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($10_1 + 124 | 0) >> 2] = 0;
        label$44 : {
         label$45 : while (1) {
          if (!((HEAP32[($10_1 + 124 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 212 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
           break label$44
          }
          $592_1 = Math_fround(Math_fround(HEAPF32[($15(HEAP32[($10_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 124 | 0) >> 2] | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($15(HEAP32[($10_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 124 | 0) >> 2] | 0 | 0) | 0) >> 2]));
          $593_1 = Math_fround(HEAPF32[($10_1 + 248 | 0) >> 2]);
          $295_1 = $15(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 124 | 0) >> 2] | 0 | 0) | 0;
          HEAPF32[$295_1 >> 2] = Math_fround(Math_fround($592_1 * $593_1) + Math_fround(HEAPF32[$295_1 >> 2]));
          HEAP32[($10_1 + 124 | 0) >> 2] = (HEAP32[($10_1 + 124 | 0) >> 2] | 0) + 1 | 0;
          continue label$45;
         };
        }
        break label$42;
       }
       HEAP32[($10_1 + 120 | 0) >> 2] = 0;
       label$46 : {
        label$47 : while (1) {
         if (!((HEAP32[($10_1 + 120 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 212 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
          break label$46
         }
         $597_1 = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 120 | 0) >> 2] | 0 | 0) | 0) >> 2]);
         $598_1 = Math_fround(HEAPF32[($10_1 + 248 | 0) >> 2]);
         $312_1 = $15(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 120 | 0) >> 2] | 0 | 0) | 0;
         HEAPF32[$312_1 >> 2] = Math_fround(Math_fround($597_1 * $598_1) + Math_fround(HEAPF32[$312_1 >> 2]));
         HEAP32[($10_1 + 120 | 0) >> 2] = (HEAP32[($10_1 + 120 | 0) >> 2] | 0) + 1 | 0;
         continue label$47;
        };
       }
      }
     }
    }
    break label$1;
   }
   HEAP32[($10_1 + 116 | 0) >> 2] = $489(HEAP32[($10_1 + 208 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 256 | 0) >> 2]))) | 0;
   HEAP32[($10_1 + 112 | 0) >> 2] = $856(HEAP32[($10_1 + 216 | 0) >> 2] | 0 | 0, (HEAP32[($10_1 + 116 | 0) >> 2] | 0) - 1 | 0 | 0) | 0;
   HEAP32[($10_1 + 108 | 0) >> 2] = $856(HEAP32[($10_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 116 | 0) >> 2] | 0 | 0) | 0;
   HEAPF32[($10_1 + 104 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 116 | 0) >> 2] | 0 | 0) | 0) >> 2]);
   HEAPF32[($10_1 + 100 | 0) >> 2] = Math_fround($843($11_1 | 0, (HEAP32[($10_1 + 116 | 0) >> 2] | 0) - 1 | 0 | 0, Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 256 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 104 | 0) >> 2])) / Math_fround(Math_fround(HEAPF32[($15(HEAP32[($10_1 + 208 | 0) >> 2] | 0 | 0, (HEAP32[($10_1 + 116 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 104 | 0) >> 2])))))));
   label$48 : {
    if (!(Math_fround(HEAPF32[($10_1 + 248 | 0) >> 2]) == Math_fround(1.0) & 1 | 0)) {
     break label$48
    }
    label$49 : {
     label$50 : {
      if (!((HEAP32[($10_1 + 244 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
       break label$50
      }
      HEAP32[($10_1 + 96 | 0) >> 2] = HEAP32[($10_1 + 228 | 0) >> 2] | 0;
      label$51 : {
       label$52 : {
        if ($857($1770(HEAP32[($10_1 + 96 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) {
         break label$52
        }
        HEAP32[($10_1 + 92 | 0) >> 2] = $1771(HEAP32[($10_1 + 96 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($10_1 + 88 | 0) >> 2] = 0;
        label$53 : {
         label$54 : while (1) {
          if (!((HEAP32[($10_1 + 88 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 212 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
           break label$53
          }
          HEAPF32[($10_1 + 84 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 2]);
          $617_1 = Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2]);
          $625_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15(HEAP32[($10_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 100 | 0) >> 2])) + $617_1) - Math_fround(HEAPF32[($15(HEAP32[($10_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 2]));
          $372_1 = $15(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 88 | 0) >> 2] | 0 | 0) | 0;
          HEAPF32[$372_1 >> 2] = Math_fround(Math_fround(HEAPF32[$372_1 >> 2]) + $625_1);
          HEAP32[($10_1 + 88 | 0) >> 2] = (HEAP32[($10_1 + 88 | 0) >> 2] | 0) + 1 | 0;
          continue label$54;
         };
        }
        break label$51;
       }
       HEAP32[($10_1 + 80 | 0) >> 2] = 0;
       label$55 : {
        label$56 : while (1) {
         if (!((HEAP32[($10_1 + 80 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 212 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
          break label$55
         }
         HEAPF32[($10_1 + 76 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 80 | 0) >> 2] | 0 | 0) | 0) >> 2]);
         $629_1 = Math_fround(HEAPF32[($10_1 + 76 | 0) >> 2]);
         $635_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15(HEAP32[($10_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 80 | 0) >> 2] | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 76 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 100 | 0) >> 2])) + $629_1);
         $392_1 = $15(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 80 | 0) >> 2] | 0 | 0) | 0;
         HEAPF32[$392_1 >> 2] = Math_fround(Math_fround(HEAPF32[$392_1 >> 2]) + $635_1);
         HEAP32[($10_1 + 80 | 0) >> 2] = (HEAP32[($10_1 + 80 | 0) >> 2] | 0) + 1 | 0;
         continue label$56;
        };
       }
      }
      break label$49;
     }
     HEAP32[($10_1 + 72 | 0) >> 2] = 0;
     label$57 : {
      label$58 : while (1) {
       if (!((HEAP32[($10_1 + 72 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 212 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$57
       }
       HEAPF32[($10_1 + 68 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) | 0) >> 2]);
       $639_1 = Math_fround(HEAPF32[($10_1 + 68 | 0) >> 2]);
       $645_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15(HEAP32[($10_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 68 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 100 | 0) >> 2])) + $639_1);
       HEAPF32[($15(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) | 0) >> 2] = $645_1;
       HEAP32[($10_1 + 72 | 0) >> 2] = (HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 1 | 0;
       continue label$58;
      };
     }
    }
    break label$1;
   }
   $416_1 = HEAP32[($10_1 + 244 | 0) >> 2] | 0;
   label$59 : {
    label$60 : {
     switch ($416_1 | 0) {
     case 0:
      HEAP32[($10_1 + 64 | 0) >> 2] = HEAP32[($10_1 + 228 | 0) >> 2] | 0;
      label$63 : {
       label$64 : {
        if ($857($1770(HEAP32[($10_1 + 64 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) {
         break label$64
        }
        HEAP32[($10_1 + 60 | 0) >> 2] = $1771(HEAP32[($10_1 + 64 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($10_1 + 56 | 0) >> 2] = 0;
        label$65 : {
         label$66 : while (1) {
          if (!((HEAP32[($10_1 + 56 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 212 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
           break label$65
          }
          HEAPF32[($10_1 + 52 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 2]);
          HEAPF32[($10_1 + 48 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 2]);
          $648_1 = Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]);
          $649_1 = Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2]);
          $660_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15(HEAP32[($10_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 100 | 0) >> 2])) + $649_1) - Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 248 | 0) >> 2])) + $648_1);
          HEAPF32[($15(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 2] = $660_1;
          HEAP32[($10_1 + 56 | 0) >> 2] = (HEAP32[($10_1 + 56 | 0) >> 2] | 0) + 1 | 0;
          continue label$66;
         };
        }
        break label$63;
       }
       HEAP32[($10_1 + 44 | 0) >> 2] = 0;
       label$67 : {
        label$68 : while (1) {
         if (!((HEAP32[($10_1 + 44 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 212 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
          break label$67
         }
         HEAPF32[($10_1 + 40 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) | 0) >> 2]);
         $662_1 = Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]);
         $670_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15(HEAP32[($10_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 100 | 0) >> 2])) + $662_1) * Math_fround(HEAPF32[($10_1 + 248 | 0) >> 2]));
         HEAPF32[($15(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) | 0) >> 2] = $670_1;
         HEAP32[($10_1 + 44 | 0) >> 2] = (HEAP32[($10_1 + 44 | 0) >> 2] | 0) + 1 | 0;
         continue label$68;
        };
       }
      }
      break label$59;
     case 1:
     case 2:
      HEAP32[($10_1 + 36 | 0) >> 2] = 0;
      label$69 : {
       label$70 : while (1) {
        if (!((HEAP32[($10_1 + 36 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 212 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
         break label$69
        }
        HEAPF32[($10_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2]);
        $672_1 = Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]);
        $680_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15(HEAP32[($10_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 100 | 0) >> 2])) + $672_1) - Math_fround(HEAPF32[($15(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2]));
        $681_1 = Math_fround(HEAPF32[($10_1 + 248 | 0) >> 2]);
        $486_1 = $15(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 36 | 0) >> 2] | 0 | 0) | 0;
        HEAPF32[$486_1 >> 2] = Math_fround(Math_fround($680_1 * $681_1) + Math_fround(HEAPF32[$486_1 >> 2]));
        HEAP32[($10_1 + 36 | 0) >> 2] = (HEAP32[($10_1 + 36 | 0) >> 2] | 0) + 1 | 0;
        continue label$70;
       };
      }
      break label$59;
     case 3:
      break label$60;
     default:
      break label$59;
     };
    }
    HEAP32[($10_1 + 28 | 0) >> 2] = HEAP32[($10_1 + 228 | 0) >> 2] | 0;
    label$71 : {
     label$72 : {
      if ($857($1770(HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) {
       break label$72
      }
      HEAP32[($10_1 + 24 | 0) >> 2] = $1771(HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($10_1 + 20 | 0) >> 2] = 0;
      label$73 : {
       label$74 : while (1) {
        if (!((HEAP32[($10_1 + 20 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 212 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
         break label$73
        }
        HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2]);
        $686_1 = Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]);
        $694_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15(HEAP32[($10_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 100 | 0) >> 2])) + $686_1) - Math_fround(HEAPF32[($15(HEAP32[($10_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2]));
        $695_1 = Math_fround(HEAPF32[($10_1 + 248 | 0) >> 2]);
        $515_1 = $15(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) | 0;
        HEAPF32[$515_1 >> 2] = Math_fround(Math_fround($694_1 * $695_1) + Math_fround(HEAPF32[$515_1 >> 2]));
        HEAP32[($10_1 + 20 | 0) >> 2] = (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + 1 | 0;
        continue label$74;
       };
      }
      break label$71;
     }
     HEAP32[($10_1 + 12 | 0) >> 2] = 0;
     label$75 : {
      label$76 : while (1) {
       if (!((HEAP32[($10_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 212 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$75
       }
       HEAPF32[($10_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($10_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2]);
       $700_1 = Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]);
       $706_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15(HEAP32[($10_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 100 | 0) >> 2])) + $700_1);
       $707_1 = Math_fround(HEAPF32[($10_1 + 248 | 0) >> 2]);
       $535_1 = $15(HEAP32[($10_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) | 0;
       HEAPF32[$535_1 >> 2] = Math_fround(Math_fround($706_1 * $707_1) + Math_fround(HEAPF32[$535_1 >> 2]));
       HEAP32[($10_1 + 12 | 0) >> 2] = (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + 1 | 0;
       continue label$76;
      };
     }
    }
   }
  }
  global$0 = $10_1 + 272 | 0;
  return;
 }
 
 function $856($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 4 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $857($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $858($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $859($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $21_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$1
   }
   fimport$0(5415 | 0, 3338 | 0, 265 | 0, 5293 | 0);
   wasm2js_trap();
  }
  $21_1 = ((HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 100663296 | 0) + (HEAP32[($4_1 + 20 | 0) >> 2] | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $860($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $23_1 = Math_fround(0);
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $23_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
  HEAPF32[($15($7_1 + 24 | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] = $23_1;
  $508($856($7_1 + 40 | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $861($856($7_1 + 40 | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0);
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $861($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $729($5_1 | 0, ($488($5_1 | 0) | 0) + ($488(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) | 0 | 0);
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < ($488(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $862($5_1 | 0, $15(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $862($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $18_1 = 0, $35_1 = 0, $45_1 = 0, $34_1 = 0, $44_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2]);
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $18_1 = ~~$57_1;
      break label$3;
     }
     $18_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $18_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $580(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $34_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $35_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $35_1 + 1 | 0;
    $581($5_1 | 0, $34_1 + ($35_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $44_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $45_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $45_1 + 1 | 0;
   $581($5_1 | 0, $44_1 + ($45_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $863($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 9292 + 8 | 0;
  $864($4_1 + 40 | 0 | 0) | 0;
  $504($4_1 + 24 | 0 | 0) | 0;
  $839($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $864($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 9360 + 8 | 0;
  $866($4_1 | 0);
  $867($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $865($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $863($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $866($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $868($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 4 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $867($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $869(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $868($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0 | 0]($5_1) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $869($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $870($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $864($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $871($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5602 | 0, 4142 | 0, 195 | 0, 4679 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $872(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 197 | 0) | 0;
  label$2 : {
   if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$2
   }
   fimport$0(1829 | 0, 4142 | 0, 199 | 0, 4679 | 0);
   wasm2js_trap();
  }
  $31_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $31_1 | 0;
 }
 
 function $872($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $14_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  $14_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($6_1, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $873() {
  $845();
  return;
 }
 
 function $874() {
  $1160(26332 | 0, 4894 | 0, 26544 | 0) | 0;
  $1797(165 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $875($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26332 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $876($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26332 | 0;
 }
 
 function $877($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0, $48_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
  HEAP32[($4_1 + 44 | 0) >> 2] = $5_1;
  $1664($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 9416 + 8 | 0;
  $502($5_1 + 4 | 0 | 0) | 0;
  $878($5_1 + 20 | 0 | 0) | 0;
  $729($5_1 + 4 | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0);
  $879($5_1 + 20 | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0);
  $21_1 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
  HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(0 | 0);
  $573($5_1 + 4 | 0 | 0, $21_1 | 0, $4_1 + 32 | 0 | 0);
  HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $500($4_1 + 8 | 0 | 0) | 0;
    $880($5_1 + 20 | 0 | 0, $4_1 + 8 | 0 | 0);
    $506($4_1 + 8 | 0 | 0) | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $48_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  global$0 = $4_1 + 48 | 0;
  return $48_1 | 0;
 }
 
 function $878($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 9484 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $879($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $881(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $880($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $61_1 = Math_fround(0), $20_1 = 0, $37_1 = 0, $50_1 = 0, $36_1 = 0, $49_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $882($4_1 + 8 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    $61_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($61_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $20_1 = ~~$61_1;
      break label$3;
     }
     $20_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $20_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $881(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $36_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $37_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $37_1 + 1 | 0;
    $883($5_1 | 0, $36_1 + ($37_1 << 4 | 0) | 0 | 0, $4_1 + 8 | 0 | 0);
    $506($4_1 + 8 | 0 | 0) | 0;
    break label$1;
   }
   $49_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $50_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $50_1 + 1 | 0;
   $883($5_1 | 0, $49_1 + ($50_1 << 4 | 0) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $881($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 4 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $882($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  $113($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 7472 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $903($5_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[$4_1 >> 2] = 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4_1 >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$2
     }
     $598($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0 | 0, (HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0 | 0);
     HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
  }
  $45_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $45_1 | 0;
 }
 
 function $883($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $882($1656(16 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $884($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $144_1 = 0;
  $10_1 = global$0 - 80 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 72 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 68 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 60 | 0) >> 2] = $4_1;
  HEAPF32[($10_1 + 56 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 52 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 48 | 0) >> 2] = $7_1;
  $11_1 = HEAP32[($10_1 + 76 | 0) >> 2] | 0;
  HEAP32[($10_1 + 44 | 0) >> 2] = (HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 40 | 0;
  HEAP32[($10_1 + 40 | 0) >> 2] = (HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 24 | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    if (HEAP32[($10_1 + 52 | 0) >> 2] | 0) {
     break label$2
    }
    $135(HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0);
    $885(HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0, $80(HEAP32[($10_1 + 40 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($10_1 + 36 | 0) >> 2] = 0;
    HEAP32[($10_1 + 32 | 0) >> 2] = $80(HEAP32[($10_1 + 40 | 0) >> 2] | 0 | 0) | 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($10_1 + 36 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 32 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$3
      }
      $886(HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0, $82(HEAP32[($10_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0);
      HEAP32[($10_1 + 36 | 0) >> 2] = (HEAP32[($10_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    break label$1;
   }
   label$5 : {
    if (!(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2]) < Math_fround(HEAPF32[($15($11_1 + 4 | 0 | 0, 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$5
    }
    label$6 : {
     label$7 : {
      if (!(HEAP32[($10_1 + 52 | 0) >> 2] | 0)) {
       break label$7
      }
      if (!((HEAP32[($10_1 + 52 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$6
      }
     }
     $135(HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0);
     $885(HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0, $80(HEAP32[($10_1 + 40 | 0) >> 2] | 0 | 0) | 0 | 0);
     HEAP32[($10_1 + 28 | 0) >> 2] = 0;
     HEAP32[($10_1 + 24 | 0) >> 2] = $80(HEAP32[($10_1 + 40 | 0) >> 2] | 0 | 0) | 0;
     label$8 : {
      label$9 : while (1) {
       if (!((HEAP32[($10_1 + 28 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$8
       }
       $886(HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0, $82(HEAP32[($10_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0);
       HEAP32[($10_1 + 28 | 0) >> 2] = (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 1 | 0;
       continue label$9;
      };
     }
    }
    break label$1;
   }
   label$10 : {
    label$11 : {
     if (!(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2]) >= Math_fround(HEAPF32[($15($11_1 + 4 | 0 | 0, ($488($11_1 + 4 | 0 | 0) | 0) - 1 | 0 | 0) | 0) >> 2]) & 1 | 0)) {
      break label$11
     }
     HEAP32[($10_1 + 20 | 0) >> 2] = ($488($11_1 + 4 | 0 | 0) | 0) - 1 | 0;
     break label$10;
    }
    HEAP32[($10_1 + 20 | 0) >> 2] = ($489($11_1 + 4 | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2]))) | 0) - 1 | 0;
   }
   HEAP32[($10_1 + 16 | 0) >> 2] = $887($11_1 + 20 | 0 | 0, HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   label$12 : {
    if ($888(HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) | 0) {
     break label$12
    }
    $135(HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0);
    HEAP32[($10_1 + 12 | 0) >> 2] = 0;
    HEAP32[($10_1 + 8 | 0) >> 2] = $80(HEAP32[($10_1 + 40 | 0) >> 2] | 0 | 0) | 0;
    label$13 : {
     label$14 : while (1) {
      if (!((HEAP32[($10_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$13
      }
      $886(HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0, $82(HEAP32[($10_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
      HEAP32[($10_1 + 12 | 0) >> 2] = (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      continue label$14;
     };
    }
    break label$1;
   }
   HEAP32[($10_1 + 4 | 0) >> 2] = 0;
   HEAP32[$10_1 >> 2] = $888(HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) | 0;
   label$15 : {
    label$16 : while (1) {
     if (!((HEAP32[($10_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[$10_1 >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$15
     }
     $144_1 = HEAP32[($82(HEAP32[($10_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($574(HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     HEAP32[($82(HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] = $144_1;
     HEAP32[($10_1 + 4 | 0) >> 2] = (HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$16;
    };
   }
  }
  global$0 = $10_1 + 80 | 0;
  return;
 }
 
 function $885($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $889(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $886($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $889(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $134($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $134($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $887($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 4 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $888($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $889($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $890($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 134217728 | 0;
 }
 
 function $891($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $23_1 = Math_fround(0);
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $23_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
  HEAPF32[($15($7_1 + 4 | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] = $23_1;
  $512($887($7_1 + 20 | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $892($887($7_1 + 20 | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0);
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $892($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $893($5_1 | 0, ($888($5_1 | 0) | 0) + ($888(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) | 0 | 0);
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < ($888(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $894($5_1 | 0, $574(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $893($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $597(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $894($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $597(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $598($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $598($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $895($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 9416 + 8 | 0;
  $896($4_1 + 20 | 0 | 0) | 0;
  $504($4_1 + 4 | 0 | 0) | 0;
  $1665($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $896($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 9484 + 8 | 0;
  $898($4_1 | 0);
  $899($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $897($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $895($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $898($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $900($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 4 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $899($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $901(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $900($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0 | 0]($5_1) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $901($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $902($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $896($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $903($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5602 | 0, 4142 | 0, 195 | 0, 4679 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $904(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 197 | 0) | 0;
  label$2 : {
   if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$2
   }
   fimport$0(1829 | 0, 4142 | 0, 199 | 0, 4679 | 0);
   wasm2js_trap();
  }
  $31_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $31_1 | 0;
 }
 
 function $904($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $14_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  $14_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($6_1, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $905() {
  $874();
  return;
 }
 
 function $906($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $113($6_1 | 0) | 0;
  HEAP32[$6_1 >> 2] = 9540 + 8 | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
  HEAP32[($6_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($6_1 + 16 | 0) >> 2] = Math_fround(0 | 0);
  $674($6_1 + 20 | 0 | 0) | 0;
  HEAPF32[($6_1 + 32 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($6_1 + 36 | 0) >> 2] = Math_fround(0 | 0);
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $907($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2]));
 }
 
 function $908($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 9540 + 8 | 0;
  $112($4_1 + 20 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $909($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $908($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $910($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  $113($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 9584 + 8 | 0;
  $124($5_1 + 4 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(0 | 0);
  $674($5_1 + 24 | 0 | 0) | 0;
  $674($5_1 + 36 | 0 | 0) | 0;
  HEAPF32[($5_1 + 48 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($5_1 + 52 | 0) >> 2] = Math_fround(0 | 0);
  label$1 : {
   if (($131($5_1 + 4 | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5608 | 0, 3556 | 0, 45 | 0, 5338 | 0);
   wasm2js_trap();
  }
  $32_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $32_1 | 0;
 }
 
 function $911($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0;
 }
 
 function $912($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 9584 + 8 | 0;
  $112($4_1 + 36 | 0 | 0) | 0;
  $112($4_1 + 24 | 0 | 0) | 0;
  $112($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $913($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $912($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $914() {
  $1160(26344 | 0, 4844 | 0, 26544 | 0) | 0;
  $1797(177 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $915($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26344 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $916($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26344 | 0;
 }
 
 function $917($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1664($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 9632 + 8 | 0;
  $502($5_1 + 4 | 0 | 0) | 0;
  $553($5_1 + 20 | 0 | 0) | 0;
  $15_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
  $573($5_1 + 4 | 0 | 0, $15_1 | 0, $4_1 + 4 | 0 | 0);
  $22_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  $918($5_1 + 20 | 0 | 0, $22_1 | 0, $4_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $918($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $75_1 = Math_fround(0), $31_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 >= 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5689 | 0, 4142 | 0, 76 | 0, 4598 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$2 : {
   if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   $75_1 = Math_fround(Math_fround((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
   label$3 : {
    label$4 : {
     if (!(Math_fround(Math_abs($75_1)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $31_1 = ~~$75_1;
     break label$3;
    }
    $31_1 = -2147483648;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $31_1;
   label$5 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = 8;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $919(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 82 | 0) | 0;
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$6
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$7
     }
     $920($6_1 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $919($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $920($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $921($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 9632 + 8 | 0;
  $922($4_1 + 20 | 0 | 0);
  $557($4_1 + 20 | 0 | 0) | 0;
  $504($4_1 + 4 | 0 | 0) | 0;
  $1665($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $922($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($582(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($583(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $923(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $923($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $584($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $924($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[178 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $925($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $90_1 = 0;
  $10_1 = global$0 - 48 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 40 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 36 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 28 | 0) >> 2] = $4_1;
  HEAPF32[($10_1 + 24 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 16 | 0) >> 2] = $7_1;
  $11_1 = HEAP32[($10_1 + 44 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($10_1 + 12 | 0) >> 2] = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
   HEAP32[($10_1 + 8 | 0) >> 2] = $488($11_1 + 4 | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]) > Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]) & 1 | 0)) {
      break label$4
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$11_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($11_1, HEAP32[($10_1 + 40 | 0) >> 2] | 0, Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]), Math_fround(3402823466385288598117041.0e14), HEAP32[($10_1 + 28 | 0) >> 2] | 0, Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]), HEAP32[($10_1 + 20 | 0) >> 2] | 0, HEAP32[($10_1 + 16 | 0) >> 2] | 0);
     HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(-1.0);
     break label$3;
    }
    label$5 : {
     if (!(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]) >= Math_fround(HEAPF32[($15($11_1 + 4 | 0 | 0, (HEAP32[($10_1 + 8 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]) & 1 | 0)) {
      break label$5
     }
     break label$1;
    }
   }
   label$6 : {
    if (!(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]) < Math_fround(HEAPF32[($15($11_1 + 4 | 0 | 0, 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$6
    }
    break label$1;
   }
   label$7 : {
    label$8 : {
     if (!(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]) < Math_fround(HEAPF32[($15($11_1 + 4 | 0 | 0, 0 | 0) | 0) >> 2]) & 1 | 0)) {
      break label$8
     }
     HEAP32[($10_1 + 4 | 0) >> 2] = 0;
     break label$7;
    }
    HEAP32[($10_1 + 4 | 0) >> 2] = $489($11_1 + 4 | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]))) | 0;
    HEAPF32[$10_1 >> 2] = Math_fround(HEAPF32[($15($11_1 + 4 | 0 | 0, HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$9
      }
      label$11 : {
       if (!(Math_fround(HEAPF32[($15($11_1 + 4 | 0 | 0, (HEAP32[($10_1 + 4 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]) != Math_fround(HEAPF32[$10_1 >> 2]) & 1 | 0)) {
        break label$11
       }
       break label$9;
      }
      HEAP32[($10_1 + 4 | 0) >> 2] = (HEAP32[($10_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      continue label$10;
     };
    }
   }
   label$12 : while (1) {
    $90_1 = 0;
    label$13 : {
     if (!((HEAP32[($10_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$13
     }
     $90_1 = Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]) >= Math_fround(HEAPF32[($15($11_1 + 4 | 0 | 0, HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    }
    if (!($90_1 & 1 | 0)) {
     break label$1
    }
    $926(HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0, $583($11_1 + 20 | 0 | 0, HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($10_1 + 4 | 0) >> 2] = (HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$12;
   };
  }
  global$0 = $10_1 + 48 | 0;
  return;
 }
 
 function $926($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $919(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $920($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $920($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $927($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 117440512 | 0;
 }
 
 function $928($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $19_1 = Math_fround(0), $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $19_1 = Math_fround($907(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0));
  HEAPF32[($15($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] = $19_1;
  $12_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  HEAP32[($583($6_1 + 20 | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] = $12_1;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $929() {
  $914();
  return;
 }
 
 function $930($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$1
   }
   fimport$0(4654 | 0, 3049 | 0, 44 | 0, 5215 | 0);
   wasm2js_trap();
  }
  HEAP32[(0 + 26356 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $931() {
  label$1 : {
   if ((HEAP32[(0 + 26356 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$1
   }
   HEAP32[(0 + 26356 | 0) >> 2] = $459() | 0;
  }
  label$2 : {
   if ((HEAP32[(0 + 26356 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$2
   }
   fimport$0(5205 | 0, 3049 | 0, 51 | 0, 5227 | 0);
   wasm2js_trap();
  }
  return HEAP32[(0 + 26356 | 0) >> 2] | 0 | 0;
 }
 
 function $932($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $933($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  wasm2js_trap();
 }
 
 function $934($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 9696 + 8 | 0;
  return $4_1 | 0;
 }
 
 function $935($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $932($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $936($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[183 | 0]($4_1) | 0;
  $1978($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $937($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $12_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (HEAP32[($6_1 + 20 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $1827(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  $12_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $12_1 | 0;
 }
 
 function $938($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $22_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (HEAP32[($6_1 + 20 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $1827(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   label$3 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $1799(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  $22_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $22_1 | 0;
 }
 
 function $939($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $24_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($7_1 + 16 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($7_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($7_1 + 4 | 0) >> 2] = $1827(HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) | 0;
     break label$3;
    }
    HEAP32[($7_1 + 4 | 0) >> 2] = $1829(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) | 0;
   }
   HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  }
  $24_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  global$0 = $7_1 + 32 | 0;
  return $24_1 | 0;
 }
 
 function $940($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $1828(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $941($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $25_1 = 0, $22_1 = 0, $38_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1893($125(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0, 5322 | 0) | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   $1899(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0, 2 | 0) | 0;
   $22_1 = $1902(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] = $22_1;
   $25_1 = 0;
   $1899(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, $25_1 | 0, $25_1 | 0) | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $942(HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0, 3049 | 0, 119 | 0) | 0;
   $1896(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   $1880(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  }
  $38_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $38_1 | 0;
 }
 
 function $942($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $14_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  $14_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($6_1, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $943($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $934($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 9732 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $944() {
  $1160(26360 | 0, 1414 | 0, 26604 | 0) | 0;
  $1797(192 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $945($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26360 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $946($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26360 | 0;
 }
 
 function $947($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = Math_fround($6_1);
  var $9_1 = 0, $32_1 = 0;
  $9_1 = global$0 - 96 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 92 | 0) >> 2] = $0_1;
  HEAPF32[($9_1 + 88 | 0) >> 2] = $1_1;
  HEAPF32[($9_1 + 84 | 0) >> 2] = $2_1;
  HEAP8[($9_1 + 83 | 0) >> 0] = $3_1;
  HEAP8[($9_1 + 82 | 0) >> 0] = $4_1;
  HEAP8[($9_1 + 81 | 0) >> 0] = $5_1;
  HEAPF32[($9_1 + 76 | 0) >> 2] = $6_1;
  HEAP32[($9_1 + 72 | 0) >> 2] = $761(HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) | 0;
  HEAPF32[($9_1 + 68 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + 92 | 0) >> 2]);
  HEAPF32[($9_1 + 64 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + 96 | 0) >> 2]);
  HEAPF32[($9_1 + 60 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + 104 | 0) >> 2]);
  HEAPF32[($9_1 + 56 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + 108 | 0) >> 2]);
  HEAPF32[($9_1 + 52 | 0) >> 2] = Math_fround(Math_fround(-Math_fround(HEAPF32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 80 | 0) >> 2])) - Math_fround(HEAPF32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 68 | 0) >> 2]));
  HEAPF32[($9_1 + 48 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($9_1 + 44 | 0) >> 2] = Math_fround(0 | 0);
  label$1 : {
   if ((HEAPU8[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 88 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $769(HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0);
  }
  $32_1 = ($787(HEAP32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) + -1 | 0;
  label$2 : {
   label$3 : {
    switch ($32_1 | 0) {
    case 0:
     HEAPF32[($9_1 + 48 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($9_1 + 88 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 100 | 0) >> 2]));
     HEAPF32[($9_1 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($9_1 + 84 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 112 | 0) >> 2]));
     break label$2;
    case 1:
     HEAPF32[($9_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround($1019(Math_fround(Math_fround(HEAPF32[($9_1 + 60 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($9_1 + 68 | 0) >> 2])))) * Math_fround(HEAPF32[(0 + 10192 | 0) >> 2])) + Math_fround(HEAPF32[($9_1 + 52 | 0) >> 2]));
     HEAPF32[($9_1 + 40 | 0) >> 2] = Math_fround(Math_fround($1014(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($9_1 + 68 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 56 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($9_1 + 64 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 60 | 0) >> 2]))))))) / Math_fround(Math_fround(Math_fround(HEAPF32[($9_1 + 68 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 68 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($9_1 + 60 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 60 | 0) >> 2]))));
     HEAPF32[($9_1 + 64 | 0) >> 2] = Math_fround(Math_fround(-Math_fround(HEAPF32[($9_1 + 60 | 0) >> 2])) * Math_fround(HEAPF32[($9_1 + 40 | 0) >> 2]));
     HEAPF32[($9_1 + 56 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($9_1 + 68 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 40 | 0) >> 2]));
     break;
    default:
     break label$3;
    };
   }
   HEAPF32[($9_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($9_1 + 88 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + 100 | 0) >> 2]));
   HEAPF32[($9_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($9_1 + 84 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + 112 | 0) >> 2]));
   HEAPF32[($9_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($9_1 + 68 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 56 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($9_1 + 64 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 60 | 0) >> 2]))));
   HEAPF32[($9_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($9_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 56 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($9_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 64 | 0) >> 2])))) / Math_fround(HEAPF32[($9_1 + 28 | 0) >> 2])) - Math_fround(HEAPF32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 60 | 0) >> 2]));
   HEAPF32[($9_1 + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($9_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 68 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($9_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 60 | 0) >> 2])))) / Math_fround(HEAPF32[($9_1 + 28 | 0) >> 2])) - Math_fround(HEAPF32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 64 | 0) >> 2]));
  }
  HEAPF32[($9_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround($1019(Math_fround(Math_fround(HEAPF32[($9_1 + 44 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($9_1 + 48 | 0) >> 2])))) * Math_fround(HEAPF32[(0 + 10192 | 0) >> 2])) + Math_fround(HEAPF32[($9_1 + 52 | 0) >> 2]));
  label$6 : {
   if (!(Math_fround(HEAPF32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 72 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
    break label$6
   }
   HEAPF32[($9_1 + 52 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($9_1 + 52 | 0) >> 2]) + Math_fround(180.0));
  }
  label$7 : {
   label$8 : {
    if (!(Math_fround(HEAPF32[($9_1 + 52 | 0) >> 2]) > Math_fround(180.0) & 1 | 0)) {
     break label$8
    }
    HEAPF32[($9_1 + 52 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($9_1 + 52 | 0) >> 2]) - Math_fround(360.0));
    break label$7;
   }
   label$9 : {
    if (!(Math_fround(HEAPF32[($9_1 + 52 | 0) >> 2]) < Math_fround(-180.0) & 1 | 0)) {
     break label$9
    }
    HEAPF32[($9_1 + 52 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($9_1 + 52 | 0) >> 2]) + Math_fround(360.0));
   }
  }
  HEAPF32[($9_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 72 | 0) >> 2]);
  HEAPF32[($9_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 76 | 0) >> 2]);
  label$10 : {
   label$11 : {
    if ((HEAPU8[($9_1 + 83 | 0) >> 0] | 0) & 1 | 0) {
     break label$11
    }
    if (!((HEAPU8[($9_1 + 82 | 0) >> 0] | 0) & 1 | 0)) {
     break label$10
    }
   }
   label$12 : {
    if ((($787(HEAP32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) + -3 | 0) >>> 0 > 1 >>> 0) {
     break label$12
    }
    HEAPF32[($9_1 + 48 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($9_1 + 88 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 100 | 0) >> 2]));
    HEAPF32[($9_1 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($9_1 + 84 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 112 | 0) >> 2]));
   }
   HEAPF32[($9_1 + 16 | 0) >> 2] = Math_fround(Math_fround($779(HEAP32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0)) * Math_fround(HEAPF32[($9_1 + 24 | 0) >> 2]));
   HEAPF32[($9_1 + 12 | 0) >> 2] = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($9_1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 48 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($9_1 + 44 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 44 | 0) >> 2]))))));
   label$13 : {
    label$14 : {
     label$15 : {
      if (!((HEAPU8[($9_1 + 83 | 0) >> 0] | 0) & 1 | 0)) {
       break label$15
      }
      if (Math_fround(HEAPF32[($9_1 + 12 | 0) >> 2]) < Math_fround(HEAPF32[($9_1 + 16 | 0) >> 2]) & 1 | 0) {
       break label$14
      }
     }
     if (!((HEAPU8[($9_1 + 82 | 0) >> 0] | 0) & 1 | 0)) {
      break label$13
     }
     if (!(Math_fround(HEAPF32[($9_1 + 12 | 0) >> 2]) > Math_fround(HEAPF32[($9_1 + 16 | 0) >> 2]) & 1 | 0)) {
      break label$13
     }
    }
    if (!(Math_fround(HEAPF32[($9_1 + 16 | 0) >> 2]) > Math_fround(9.999999747378752e-05) & 1 | 0)) {
     break label$13
    }
    HEAPF32[($9_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($9_1 + 12 | 0) >> 2]) / Math_fround(HEAPF32[($9_1 + 16 | 0) >> 2])) - Math_fround(1.0)) * Math_fround(HEAPF32[($9_1 + 76 | 0) >> 2])) + Math_fround(1.0));
    HEAPF32[($9_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($9_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]));
    label$16 : {
     if (!((HEAPU8[($9_1 + 81 | 0) >> 0] | 0) & 1 | 0)) {
      break label$16
     }
     HEAPF32[($9_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($9_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]));
    }
   }
  }
  $756(HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 60 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 64 | 0) >> 2])), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($9_1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 76 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 68 | 0) >> 2]))), Math_fround(Math_fround(HEAPF32[($9_1 + 24 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($9_1 + 20 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 80 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 84 | 0) >> 2])));
  global$0 = $9_1 + 96 | 0;
  return;
 }
 
 function $948($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = Math_fround($6_1);
  $7_1 = Math_fround($7_1);
  var $10_1 = 0, $222_1 = Math_fround(0), $297_1 = Math_fround(0), $298_1 = Math_fround(0), $89_1 = 0, $564_1 = Math_fround(0), $712_1 = Math_fround(0), $449_1 = Math_fround(0);
  $10_1 = global$0 - 256 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 252 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 248 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 244 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 240 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 236 | 0) >> 2] = $4_1;
  HEAP8[($10_1 + 235 | 0) >> 0] = $5_1;
  HEAPF32[($10_1 + 228 | 0) >> 2] = $6_1;
  HEAPF32[($10_1 + 224 | 0) >> 2] = $7_1;
  HEAP32[($10_1 + 148 | 0) >> 2] = $761(HEAP32[($10_1 + 252 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(Math_fround(HEAPF32[($10_1 + 224 | 0) >> 2]) == Math_fround(0 | 0) & 1 | 0)) {
     break label$2
    }
    $757(HEAP32[($10_1 + 248 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   label$3 : {
    if ((HEAPU8[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 88 | 0) >> 0] | 0) & 1 | 0) {
     break label$3
    }
    $769(HEAP32[($10_1 + 252 | 0) >> 2] | 0 | 0);
   }
   label$4 : {
    if ((HEAPU8[((HEAP32[($10_1 + 248 | 0) >> 2] | 0) + 88 | 0) >> 0] | 0) & 1 | 0) {
     break label$4
    }
    $769(HEAP32[($10_1 + 248 | 0) >> 2] | 0 | 0);
   }
   HEAPF32[($10_1 + 204 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 60 | 0) >> 2]);
   HEAPF32[($10_1 + 200 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 64 | 0) >> 2]);
   HEAPF32[($10_1 + 196 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 72 | 0) >> 2]);
   HEAPF32[($10_1 + 192 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 196 | 0) >> 2]);
   HEAPF32[($10_1 + 188 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 76 | 0) >> 2]);
   HEAPF32[($10_1 + 176 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 248 | 0) >> 2] | 0) + 72 | 0) >> 2]);
   label$5 : {
    label$6 : {
     if (!(Math_fround(HEAPF32[($10_1 + 196 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAPF32[($10_1 + 196 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($10_1 + 196 | 0) >> 2]));
     HEAP32[($10_1 + 164 | 0) >> 2] = 180;
     HEAP32[($10_1 + 156 | 0) >> 2] = -1;
     break label$5;
    }
    HEAP32[($10_1 + 164 | 0) >> 2] = 0;
    HEAP32[($10_1 + 156 | 0) >> 2] = 1;
   }
   label$7 : {
    if (!(Math_fround(HEAPF32[($10_1 + 188 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAPF32[($10_1 + 188 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($10_1 + 188 | 0) >> 2]));
    HEAP32[($10_1 + 156 | 0) >> 2] = 0 - (HEAP32[($10_1 + 156 | 0) >> 2] | 0) | 0;
   }
   label$8 : {
    label$9 : {
     if (!(Math_fround(HEAPF32[($10_1 + 176 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
      break label$9
     }
     HEAPF32[($10_1 + 176 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($10_1 + 176 | 0) >> 2]));
     HEAP32[($10_1 + 160 | 0) >> 2] = 180;
     break label$8;
    }
    HEAP32[($10_1 + 160 | 0) >> 2] = 0;
   }
   HEAPF32[($10_1 + 108 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 196 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 188 | 0) >> 2]));
   HEAPF32[($10_1 + 184 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 248 | 0) >> 2] | 0) + 60 | 0) >> 2]);
   label$10 : {
    label$11 : {
     if (!(Math_fround(HEAPF32[($10_1 + 108 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
      break label$11
     }
     $222_1 = Math_fround(-Math_fround(HEAPF32[($10_1 + 108 | 0) >> 2]));
     break label$10;
    }
    $222_1 = Math_fround(HEAPF32[($10_1 + 108 | 0) >> 2]);
   }
   HEAP32[($10_1 + 152 | 0) >> 2] = $222_1 <= Math_fround(9.999999747378752e-05) & 1 | 0;
   label$12 : {
    label$13 : {
     if (HEAP32[($10_1 + 152 | 0) >> 2] | 0) {
      break label$13
     }
     HEAPF32[($10_1 + 180 | 0) >> 2] = Math_fround(0 | 0);
     HEAPF32[($10_1 + 172 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 92 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 184 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 100 | 0) >> 2]));
     HEAPF32[($10_1 + 168 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 104 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 184 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 112 | 0) >> 2]));
     break label$12;
    }
    HEAPF32[($10_1 + 180 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 248 | 0) >> 2] | 0) + 64 | 0) >> 2]);
    HEAPF32[($10_1 + 172 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 92 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 184 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 96 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 180 | 0) >> 2]))) + Math_fround(HEAPF32[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 100 | 0) >> 2]));
    HEAPF32[($10_1 + 168 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 104 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 184 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 108 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 180 | 0) >> 2]))) + Math_fround(HEAPF32[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 112 | 0) >> 2]));
   }
   HEAPF32[($10_1 + 220 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 148 | 0) >> 2] | 0) + 92 | 0) >> 2]);
   HEAPF32[($10_1 + 216 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 148 | 0) >> 2] | 0) + 96 | 0) >> 2]);
   HEAPF32[($10_1 + 212 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 148 | 0) >> 2] | 0) + 104 | 0) >> 2]);
   HEAPF32[($10_1 + 208 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 148 | 0) >> 2] | 0) + 108 | 0) >> 2]);
   HEAPF32[($10_1 + 92 | 0) >> 2] = Math_fround(Math_fround(1.0) / Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 220 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 208 | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[($10_1 + 216 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 212 | 0) >> 2]))));
   HEAPF32[($10_1 + 88 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 172 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 148 | 0) >> 2] | 0) + 100 | 0) >> 2]));
   HEAPF32[($10_1 + 84 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 168 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 148 | 0) >> 2] | 0) + 112 | 0) >> 2]));
   HEAPF32[($10_1 + 136 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 208 | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 216 | 0) >> 2]))) * Math_fround(HEAPF32[($10_1 + 92 | 0) >> 2])) - Math_fround(HEAPF32[($10_1 + 204 | 0) >> 2]));
   HEAPF32[($10_1 + 132 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 220 | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 212 | 0) >> 2]))) * Math_fround(HEAPF32[($10_1 + 92 | 0) >> 2])) - Math_fround(HEAPF32[($10_1 + 200 | 0) >> 2]));
   $297_1 = Math_fround(HEAPF32[($10_1 + 136 | 0) >> 2]);
   $298_1 = Math_fround(HEAPF32[($10_1 + 132 | 0) >> 2]);
   HEAPF32[($10_1 + 124 | 0) >> 2] = Math_fround($1025(Math_fround(Math_fround(Math_fround($297_1 * $297_1) + Math_fround($298_1 * $298_1)))));
   HEAPF32[($10_1 + 120 | 0) >> 2] = Math_fround(Math_fround($779(HEAP32[((HEAP32[($10_1 + 248 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0)) * Math_fround(HEAPF32[($10_1 + 176 | 0) >> 2]));
   label$14 : {
    if (!(+Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]) < .0001 & 1 | 0)) {
     break label$14
    }
    $89_1 = 0;
    $947(HEAP32[($10_1 + 252 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 244 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 240 | 0) >> 2])), $89_1 & 1 | 0 | 0, (HEAPU8[($10_1 + 235 | 0) >> 0] | 0) & 1 | 0 | 0, $89_1 & 1 | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 224 | 0) >> 2])));
    $756(HEAP32[($10_1 + 248 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 184 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 180 | 0) >> 2])), Math_fround(Math_fround(0 | 0)), Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 248 | 0) >> 2] | 0) + 72 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 248 | 0) >> 2] | 0) + 76 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 248 | 0) >> 2] | 0) + 80 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 248 | 0) >> 2] | 0) + 84 | 0) >> 2])));
    break label$1;
   }
   HEAPF32[($10_1 + 88 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 244 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 148 | 0) >> 2] | 0) + 100 | 0) >> 2]));
   HEAPF32[($10_1 + 84 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 240 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 148 | 0) >> 2] | 0) + 112 | 0) >> 2]));
   HEAPF32[($10_1 + 144 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 208 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 216 | 0) >> 2])))) * Math_fround(HEAPF32[($10_1 + 92 | 0) >> 2])) + Math_fround(-Math_fround(HEAPF32[($10_1 + 204 | 0) >> 2])));
   HEAPF32[($10_1 + 140 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 220 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 212 | 0) >> 2])))) * Math_fround(HEAPF32[($10_1 + 92 | 0) >> 2])) + Math_fround(-Math_fround(HEAPF32[($10_1 + 200 | 0) >> 2])));
   HEAPF32[($10_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 140 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 140 | 0) >> 2])));
   label$15 : {
    if (!(Math_fround(HEAPF32[($10_1 + 228 | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0)) {
     break label$15
    }
    HEAPF32[($10_1 + 228 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 228 | 0) >> 2]) * Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 196 | 0) >> 2]) * Math_fround(Math_fround(HEAPF32[($10_1 + 176 | 0) >> 2]) + Math_fround(1.0))) / Math_fround(2.0)));
    HEAPF32[($10_1 + 104 | 0) >> 2] = Math_fround($1025(Math_fround(Math_fround(HEAPF32[($10_1 + 128 | 0) >> 2]))));
    HEAPF32[($10_1 + 100 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(-Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 196 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 104 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]))) + Math_fround(HEAPF32[($10_1 + 228 | 0) >> 2]));
    label$16 : {
     if (!(Math_fround(HEAPF32[($10_1 + 100 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
      break label$16
     }
     HEAPF32[($10_1 + 96 | 0) >> 2] = Math_fround(Math_fround($518(Math_fround(Math_fround(1.0)), Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 100 | 0) >> 2]) / Math_fround(Math_fround(HEAPF32[($10_1 + 228 | 0) >> 2]) * Math_fround(2.0)))))) - Math_fround(1.0));
     HEAPF32[($10_1 + 96 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(-Math_fround(HEAPF32[($10_1 + 228 | 0) >> 2])) * Math_fround(Math_fround(Math_fround(-Math_fround(HEAPF32[($10_1 + 96 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 96 | 0) >> 2])) + Math_fround(1.0))) + Math_fround(HEAPF32[($10_1 + 100 | 0) >> 2])) / Math_fround(HEAPF32[($10_1 + 104 | 0) >> 2]));
     HEAPF32[($10_1 + 144 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-Math_fround(HEAPF32[($10_1 + 96 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2]));
     HEAPF32[($10_1 + 140 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-Math_fround(HEAPF32[($10_1 + 96 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 140 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 140 | 0) >> 2]));
     HEAPF32[($10_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 140 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 140 | 0) >> 2])));
    }
   }
   label$17 : {
    label$18 : {
     label$19 : {
      if (!(HEAP32[($10_1 + 152 | 0) >> 2] | 0)) {
       break label$19
      }
      HEAPF32[($10_1 + 120 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 196 | 0) >> 2]));
      HEAPF32[($10_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(-Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(-Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 128 | 0) >> 2]))) / Math_fround(Math_fround(Math_fround(2.0) * Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2])));
      label$20 : {
       label$21 : {
        if (!(Math_fround(HEAPF32[($10_1 + 80 | 0) >> 2]) < Math_fround(-1.0) & 1 | 0)) {
         break label$21
        }
        HEAPF32[($10_1 + 80 | 0) >> 2] = Math_fround(-1.0);
        break label$20;
       }
       label$22 : {
        if (!(Math_fround(HEAPF32[($10_1 + 80 | 0) >> 2]) > Math_fround(1.0) & 1 | 0)) {
         break label$22
        }
        HEAPF32[($10_1 + 80 | 0) >> 2] = Math_fround(1.0);
        label$23 : {
         if (!((HEAPU8[($10_1 + 235 | 0) >> 0] | 0) & 1 | 0)) {
          break label$23
         }
         $449_1 = Math_fround($1025(Math_fround(Math_fround(HEAPF32[($10_1 + 128 | 0) >> 2]))));
         HEAPF32[($10_1 + 192 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 192 | 0) >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($449_1 / Math_fround(Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2]))) - Math_fround(1.0)) * Math_fround(HEAPF32[($10_1 + 224 | 0) >> 2])) + Math_fround(1.0)));
        }
       }
      }
      HEAPF32[($10_1 + 112 | 0) >> 2] = Math_fround(Math_fround($1027(Math_fround(Math_fround(HEAPF32[($10_1 + 80 | 0) >> 2])))) * Math_fround(HEAP32[($10_1 + 236 | 0) >> 2] | 0 | 0));
      HEAPF32[($10_1 + 220 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 80 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]));
      HEAPF32[($10_1 + 216 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2]) * Math_fround($1023(Math_fround(Math_fround(HEAPF32[($10_1 + 112 | 0) >> 2])))));
      HEAPF32[($10_1 + 116 | 0) >> 2] = Math_fround($1019(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 140 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 220 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 216 | 0) >> 2]))))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 220 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 140 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 216 | 0) >> 2]))))));
      break label$18;
     }
     HEAPF32[($10_1 + 220 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 196 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2]));
     HEAPF32[($10_1 + 216 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 188 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 120 | 0) >> 2]));
     HEAPF32[($10_1 + 76 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 220 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 220 | 0) >> 2]));
     HEAPF32[($10_1 + 72 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 216 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 216 | 0) >> 2]));
     HEAPF32[($10_1 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]));
     HEAPF32[($10_1 + 64 | 0) >> 2] = Math_fround($1019(Math_fround(Math_fround(HEAPF32[($10_1 + 140 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 144 | 0) >> 2]))));
     HEAPF32[($10_1 + 60 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-Math_fround(HEAPF32[($10_1 + 76 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 72 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 72 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 68 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 76 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 128 | 0) >> 2]))));
     HEAPF32[($10_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-2.0) * Math_fround(HEAPF32[($10_1 + 72 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]));
     HEAPF32[($10_1 + 52 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 72 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 76 | 0) >> 2]));
     HEAPF32[($10_1 + 208 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(Math_fround(4.0) * Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]))));
     label$24 : {
      if (!(Math_fround(HEAPF32[($10_1 + 208 | 0) >> 2]) >= Math_fround(0 | 0) & 1 | 0)) {
       break label$24
      }
      HEAPF32[($10_1 + 48 | 0) >> 2] = Math_fround($1025(Math_fround(Math_fround(HEAPF32[($10_1 + 208 | 0) >> 2]))));
      label$25 : {
       if (!(Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
        break label$25
       }
       HEAPF32[($10_1 + 48 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]));
      }
      HEAPF32[($10_1 + 48 | 0) >> 2] = Math_fround(Math_fround(-Math_fround(Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]))) / Math_fround(2.0));
      HEAPF32[($10_1 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) / Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2]));
      HEAPF32[($10_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]) / Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]));
      label$26 : {
       label$27 : {
        if (!(Math_fround($1014(Math_fround(Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2])))) < Math_fround($1014(Math_fround(Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])))) & 1 | 0)) {
         break label$27
        }
        $564_1 = Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2]);
        break label$26;
       }
       $564_1 = Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]);
      }
      HEAPF32[($10_1 + 108 | 0) >> 2] = $564_1;
      label$28 : {
       if (!(Math_fround(Math_fround(HEAPF32[($10_1 + 108 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 108 | 0) >> 2])) <= Math_fround(HEAPF32[($10_1 + 128 | 0) >> 2]) & 1 | 0)) {
        break label$28
       }
       HEAPF32[($10_1 + 84 | 0) >> 2] = Math_fround(Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(-Math_fround(HEAPF32[($10_1 + 108 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 108 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 128 | 0) >> 2]))))) * Math_fround(HEAP32[($10_1 + 236 | 0) >> 2] | 0 | 0));
       HEAPF32[($10_1 + 116 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2]) - Math_fround($1019(Math_fround(Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 108 | 0) >> 2])))));
       HEAPF32[($10_1 + 112 | 0) >> 2] = Math_fround($1019(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2]) / Math_fround(HEAPF32[($10_1 + 188 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 108 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2])) / Math_fround(HEAPF32[($10_1 + 196 | 0) >> 2])))));
       break label$17;
      }
     }
     HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[(0 + 10180 | 0) >> 2]);
     HEAPF32[($10_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 220 | 0) >> 2]));
     HEAPF32[($10_1 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]));
     HEAPF32[($10_1 + 24 | 0) >> 2] = Math_fround(0 | 0);
     HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(0 | 0);
     HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 220 | 0) >> 2]));
     HEAPF32[($10_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]));
     HEAPF32[($10_1 + 8 | 0) >> 2] = Math_fround(0 | 0);
     HEAPF32[($10_1 + 60 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-Math_fround(HEAPF32[($10_1 + 220 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2])) / Math_fround(Math_fround(HEAPF32[($10_1 + 76 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 72 | 0) >> 2])));
     label$29 : {
      if (!(Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]) >= Math_fround(-1.0) & 1 | 0)) {
       break label$29
      }
      if (!(Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]) <= Math_fround(1.0) & 1 | 0)) {
       break label$29
      }
      HEAPF32[($10_1 + 60 | 0) >> 2] = Math_fround($1027(Math_fround(Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]))));
      HEAPF32[($10_1 + 88 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 220 | 0) >> 2]) * Math_fround($1021(Math_fround(Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]))))) + Math_fround(HEAPF32[($10_1 + 124 | 0) >> 2]));
      HEAPF32[($10_1 + 84 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 216 | 0) >> 2]) * Math_fround($1023(Math_fround(Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2])))));
      HEAPF32[($10_1 + 208 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2])));
      label$30 : {
       if (!(Math_fround(HEAPF32[($10_1 + 208 | 0) >> 2]) < Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]) & 1 | 0)) {
        break label$30
       }
       HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]);
       HEAPF32[($10_1 + 28 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 208 | 0) >> 2]);
       HEAPF32[($10_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]);
       HEAPF32[($10_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2]);
      }
      label$31 : {
       if (!(Math_fround(HEAPF32[($10_1 + 208 | 0) >> 2]) > Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]) & 1 | 0)) {
        break label$31
       }
       HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]);
       HEAPF32[($10_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 208 | 0) >> 2]);
       HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]);
       HEAPF32[($10_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 84 | 0) >> 2]);
      }
     }
     label$32 : {
      label$33 : {
       if (!(Math_fround(HEAPF32[($10_1 + 128 | 0) >> 2]) <= Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2])) / Math_fround(2.0)) & 1 | 0)) {
        break label$33
       }
       HEAPF32[($10_1 + 116 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2]) - Math_fround($1019(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]) * Math_fround(HEAP32[($10_1 + 236 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2])))));
       HEAPF32[($10_1 + 112 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]) * Math_fround(HEAP32[($10_1 + 236 | 0) >> 2] | 0 | 0));
       break label$32;
      }
      HEAPF32[($10_1 + 116 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2]) - Math_fround($1019(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]) * Math_fround(HEAP32[($10_1 + 236 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])))));
      HEAPF32[($10_1 + 112 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]) * Math_fround(HEAP32[($10_1 + 236 | 0) >> 2] | 0 | 0));
     }
    }
   }
   HEAPF32[($10_1 + 4 | 0) >> 2] = Math_fround(Math_fround($1019(Math_fround(Math_fround(HEAPF32[($10_1 + 180 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 184 | 0) >> 2])))) * Math_fround(HEAP32[($10_1 + 156 | 0) >> 2] | 0 | 0));
   HEAPF32[($10_1 + 116 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 116 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2])) * Math_fround(HEAPF32[(0 + 10192 | 0) >> 2])) + Math_fround(HEAP32[($10_1 + 164 | 0) >> 2] | 0 | 0)) - Math_fround(HEAPF32[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 68 | 0) >> 2]));
   label$34 : {
    label$35 : {
     if (!(Math_fround(HEAPF32[($10_1 + 116 | 0) >> 2]) > Math_fround(180.0) & 1 | 0)) {
      break label$35
     }
     HEAPF32[($10_1 + 116 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 116 | 0) >> 2]) - Math_fround(360.0));
     break label$34;
    }
    label$36 : {
     if (!(Math_fround(HEAPF32[($10_1 + 116 | 0) >> 2]) < Math_fround(-180.0) & 1 | 0)) {
      break label$36
     }
     HEAPF32[($10_1 + 116 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 116 | 0) >> 2]) + Math_fround(360.0));
    }
   }
   $712_1 = Math_fround(0 | 0);
   $756(HEAP32[($10_1 + 252 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 204 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 200 | 0) >> 2])), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 116 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 224 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 40 | 0) >> 2]))), Math_fround(Math_fround(HEAPF32[($10_1 + 192 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 252 | 0) >> 2] | 0) + 76 | 0) >> 2])), Math_fround($712_1), Math_fround($712_1));
   HEAPF32[($10_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 112 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2])) * Math_fround(HEAPF32[(0 + 10192 | 0) >> 2])) + Math_fround(-Math_fround(HEAPF32[((HEAP32[($10_1 + 248 | 0) >> 2] | 0) + 80 | 0) >> 2]))) * Math_fround(HEAP32[($10_1 + 156 | 0) >> 2] | 0 | 0)) + Math_fround(HEAP32[($10_1 + 160 | 0) >> 2] | 0 | 0)) - Math_fround(HEAPF32[((HEAP32[($10_1 + 248 | 0) >> 2] | 0) + 68 | 0) >> 2]));
   label$37 : {
    label$38 : {
     if (!(Math_fround(HEAPF32[($10_1 + 112 | 0) >> 2]) > Math_fround(180.0) & 1 | 0)) {
      break label$38
     }
     HEAPF32[($10_1 + 112 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 112 | 0) >> 2]) - Math_fround(360.0));
     break label$37;
    }
    label$39 : {
     if (!(Math_fround(HEAPF32[($10_1 + 112 | 0) >> 2]) < Math_fround(-180.0) & 1 | 0)) {
      break label$39
     }
     HEAPF32[($10_1 + 112 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 112 | 0) >> 2]) + Math_fround(360.0));
    }
   }
   $756(HEAP32[($10_1 + 248 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 184 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 180 | 0) >> 2])), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 112 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 224 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($10_1 + 248 | 0) >> 2] | 0) + 68 | 0) >> 2]))), Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 248 | 0) >> 2] | 0) + 72 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 248 | 0) >> 2] | 0) + 76 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 248 | 0) >> 2] | 0) + 80 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 248 | 0) >> 2] | 0) + 84 | 0) >> 2])));
  }
  global$0 = $10_1 + 256 | 0;
  return;
 }
 
 function $949($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $63_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $6_1;
  $1757($6_1 | 0) | 0;
  HEAP32[$6_1 >> 2] = 9848 + 8 | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  $753($6_1 + 8 | 0 | 0) | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = $970(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP8[($6_1 + 28 | 0) >> 0] = ($973(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  HEAP8[($6_1 + 29 | 0) >> 0] = ($972(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  HEAPF32[($6_1 + 32 | 0) >> 2] = Math_fround($971(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0));
  HEAPF32[($6_1 + 36 | 0) >> 2] = Math_fround($974(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0));
  HEAP32[($6_1 + 40 | 0) >> 2] = $1281(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $777($969(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0;
  HEAP8[($6_1 + 44 | 0) >> 0] = 0;
  $951($6_1 + 8 | 0 | 0, $950($968(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < ($950($968(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($952($968(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $1281(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $777(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
    $953($6_1 + 8 | 0 | 0, $5_1 + 4 | 0 | 0);
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $63_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $63_1 | 0;
 }
 
 function $950($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $951($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $954(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $952($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $953($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $954(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $142($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $142($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $954($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $955($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $9_1 = ($956($4_1 + 8 | 0 | 0) | 0) + -1 | 0;
  label$1 : {
   label$2 : {
    switch ($9_1 | 0) {
    case 0:
     HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($139($4_1 + 8 | 0 | 0, 0 | 0) | 0) >> 2] | 0;
     $947(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($767(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround($768(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0))), (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) & 1 | 0 | 0, (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) & 1 | 0 | 0, (HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 50 | 0) >> 0] | 0) & 1 | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2])));
     break label$1;
    case 1:
     break label$2;
    default:
     break label$1;
    };
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($139($4_1 + 8 | 0 | 0, 0 | 0) | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($139($4_1 + 8 | 0 | 0, 1 | 0) | 0) >> 2] | 0;
   $948(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$3_1 >> 2] | 0 | 0, Math_fround(Math_fround($767(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround($768(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0))), HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) & 1 | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2])));
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $956($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $957($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $831(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $958($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $959($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0;
 }
 
 function $960($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0;
 }
 
 function $961($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $962($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  HEAP8[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 0] = (HEAPU8[($4_1 + 11 | 0) >> 0] | 0) & 1 | 0;
  return;
 }
 
 function $963($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 9848 + 8 | 0;
  $140($4_1 + 8 | 0 | 0) | 0;
  $1758($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $964($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $963($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $965() {
  $944();
  return;
 }
 
 function $966($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $827($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 9920 + 8 | 0;
  $967($5_1 + 24 | 0 | 0) | 0;
  HEAP32[($5_1 + 40 | 0) >> 2] = 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = 1;
  HEAP8[($5_1 + 48 | 0) >> 0] = 0;
  HEAP8[($5_1 + 49 | 0) >> 0] = 0;
  HEAP8[($5_1 + 50 | 0) >> 0] = 0;
  HEAPF32[($5_1 + 52 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($5_1 + 56 | 0) >> 2] = Math_fround(0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $967($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 9976 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $968($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0 | 0;
 }
 
 function $969($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0;
 }
 
 function $970($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0;
 }
 
 function $971($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 52 | 0) >> 2]));
 }
 
 function $972($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 49 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $973($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $974($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 56 | 0) >> 2]));
 }
 
 function $975($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 9920 + 8 | 0;
  $976($4_1 + 24 | 0 | 0) | 0;
  $828($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $976($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 9976 + 8 | 0;
  $978($4_1 | 0);
  $979($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $977($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $975($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $978($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $981($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $979($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $982(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $980($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $976($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $981($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $982($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $983() {
  $1160(26372 | 0, 4823 | 0, 26308 | 0) | 0;
  $1797(204 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $984($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26372 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $985($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26372 | 0;
 }
 
 function $986($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $838($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 10040 + 8 | 0;
  $502($5_1 + 20 | 0 | 0) | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = 0;
  $17_1 = Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 6);
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
  $573($5_1 + 20 | 0 | 0, $17_1 | 0, $4_1 + 4 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $987($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $19_1 = 0, $32_1 = 0, $59_1 = 0, $63_1 = 0, $446_1 = Math_fround(0), $152_1 = 0, $191_1 = 0, $201_1 = 0, $467_1 = Math_fround(0), $214_1 = 0, $514_1 = Math_fround(0), $332_1 = 0, $365_1 = 0, $373_1 = 0, $547_1 = Math_fround(0), $384_1 = 0, $432_1 = Math_fround(0), $433_1 = Math_fround(0), $439_1 = Math_fround(0), $440_1 = Math_fround(0), $165_1 = 0, $178_1 = 0, $453_1 = Math_fround(0), $460_1 = Math_fround(0), $227_1 = 0, $240_1 = 0, $488_1 = Math_fround(0), $489_1 = Math_fround(0), $490_1 = Math_fround(0), $501_1 = Math_fround(0), $502_1 = Math_fround(0), $503_1 = Math_fround(0), $343_1 = 0, $354_1 = 0, $521_1 = Math_fround(0), $522_1 = Math_fround(0), $534_1 = Math_fround(0), $535_1 = Math_fround(0), $395_1 = 0, $406_1 = 0;
  $10_1 = global$0 - 64 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 56 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 52 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 44 | 0) >> 2] = $4_1;
  HEAPF32[($10_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 32 | 0) >> 2] = $7_1;
  $11_1 = HEAP32[($10_1 + 60 | 0) >> 2] | 0;
  HEAP32[($10_1 + 28 | 0) >> 2] = HEAP32[($988((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + 56 | 0 | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($10_1 + 24 | 0) >> 2] = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
  $19_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($19_1) | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) < Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$3
    }
    $32_1 = HEAP32[($10_1 + 36 | 0) >> 2] | 0;
    label$4 : {
     switch ($32_1 | 0) {
     case 0:
      HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 52 | 0) >> 2]);
      HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 56 | 0) >> 2]);
      HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
      HEAP8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 0] = (HEAPU8[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 48 | 0) >> 0] | 0) & 1 | 0;
      HEAP8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 29 | 0) >> 0] = (HEAPU8[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 49 | 0) >> 0] | 0) & 1 | 0;
      break label$1;
     case 1:
      $59_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
      HEAPF32[($59_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 52 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($59_1 + 32 | 0) >> 2]));
      $63_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
      HEAPF32[($63_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 56 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($63_1 + 36 | 0) >> 2]));
      HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
      HEAP8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 0] = (HEAPU8[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 48 | 0) >> 0] | 0) & 1 | 0;
      HEAP8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 29 | 0) >> 0] = (HEAPU8[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 49 | 0) >> 0] | 0) & 1 | 0;
      break label$1;
     default:
      break label$4;
     };
    }
    break label$1;
   }
   label$7 : {
    if (!(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) >= Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) - 6 | 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$7
    }
    label$8 : {
     label$9 : {
      if (HEAP32[($10_1 + 36 | 0) >> 2] | 0) {
       break label$9
      }
      $432_1 = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 52 | 0) >> 2]);
      $433_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + -5 | 0 | 0) | 0) >> 2]);
      HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround($433_1 - Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 52 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + $432_1);
      $439_1 = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 56 | 0) >> 2]);
      $440_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + -4 | 0 | 0) | 0) >> 2]);
      HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($440_1 - Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 56 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + $439_1);
      label$10 : {
       label$11 : {
        if (!((HEAP32[($10_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$11
        }
        HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
        HEAP8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 0] = (HEAPU8[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 48 | 0) >> 0] | 0) & 1 | 0;
        HEAP8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 29 | 0) >> 0] = (HEAPU8[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 49 | 0) >> 0] | 0) & 1 | 0;
        break label$10;
       }
       $446_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + -3 | 0 | 0) | 0) >> 2]);
       label$12 : {
        label$13 : {
         if (!(Math_fround(Math_abs($446_1)) < Math_fround(2147483648.0))) {
          break label$13
         }
         $152_1 = ~~$446_1;
         break label$12;
        }
        $152_1 = -2147483648;
       }
       HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] = $152_1;
       $165_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + -2 | 0 | 0) | 0) >> 2]) != Math_fround(0 | 0);
       HEAP8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 0] = $165_1 & 1 | 0;
       $178_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) | 0) >> 2]) != Math_fround(0 | 0);
       HEAP8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 29 | 0) >> 0] = $178_1 & 1 | 0;
      }
      break label$8;
     }
     $453_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + -5 | 0 | 0) | 0) >> 2]);
     $191_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
     HEAPF32[($191_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround($453_1 - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($191_1 + 32 | 0) >> 2]));
     $460_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + -4 | 0 | 0) | 0) >> 2]);
     $201_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
     HEAPF32[($201_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($460_1 - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($201_1 + 36 | 0) >> 2]));
     label$14 : {
      if (HEAP32[($10_1 + 32 | 0) >> 2] | 0) {
       break label$14
      }
      $467_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + -3 | 0 | 0) | 0) >> 2]);
      label$15 : {
       label$16 : {
        if (!(Math_fround(Math_abs($467_1)) < Math_fround(2147483648.0))) {
         break label$16
        }
        $214_1 = ~~$467_1;
        break label$15;
       }
       $214_1 = -2147483648;
      }
      HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] = $214_1;
      $227_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + -2 | 0 | 0) | 0) >> 2]) != Math_fround(0 | 0);
      HEAP8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 0] = $227_1 & 1 | 0;
      $240_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) | 0) >> 2]) != Math_fround(0 | 0);
      HEAP8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 29 | 0) >> 0] = $240_1 & 1 | 0;
     }
    }
    break label$1;
   }
   HEAP32[($10_1 + 20 | 0) >> 2] = $487($11_1 + 20 | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2])), 6 | 0) | 0;
   HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + -5 | 0 | 0) | 0) >> 2]);
   HEAPF32[($10_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + -4 | 0 | 0) | 0) >> 2]);
   HEAPF32[($10_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2]);
   HEAPF32[($10_1 + 4 | 0) >> 2] = Math_fround($843($11_1 | 0, ((HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) / (6 | 0) | 0) - 1 | 0 | 0, Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])) / Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + -6 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])))))));
   label$17 : {
    if (HEAP32[($10_1 + 36 | 0) >> 2] | 0) {
     break label$17
    }
    $488_1 = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 52 | 0) >> 2]);
    $489_1 = Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]);
    $490_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
    HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($490_1 - Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2])) + $489_1) - Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 52 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + $488_1);
    $501_1 = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 56 | 0) >> 2]);
    $502_1 = Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]);
    $503_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2]);
    HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($503_1 - Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2])) + $502_1) - Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 56 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + $501_1);
    label$18 : {
     label$19 : {
      if (!((HEAP32[($10_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$19
      }
      HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
      HEAP8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 0] = (HEAPU8[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 48 | 0) >> 0] | 0) & 1 | 0;
      HEAP8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 29 | 0) >> 0] = (HEAPU8[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 49 | 0) >> 0] | 0) & 1 | 0;
      break label$18;
     }
     $514_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + -3 | 0 | 0) | 0) >> 2]);
     label$20 : {
      label$21 : {
       if (!(Math_fround(Math_abs($514_1)) < Math_fround(2147483648.0))) {
        break label$21
       }
       $332_1 = ~~$514_1;
       break label$20;
      }
      $332_1 = -2147483648;
     }
     HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] = $332_1;
     $343_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + -2 | 0 | 0) | 0) >> 2]) != Math_fround(0 | 0);
     HEAP8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 0] = $343_1 & 1 | 0;
     $354_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + -1 | 0 | 0) | 0) >> 2]) != Math_fround(0 | 0);
     HEAP8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 29 | 0) >> 0] = $354_1 & 1 | 0;
    }
    break label$1;
   }
   $521_1 = Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]);
   $522_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
   $365_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
   HEAPF32[($365_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($522_1 - Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2])) + $521_1) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($365_1 + 32 | 0) >> 2]));
   $534_1 = Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]);
   $535_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2]);
   $373_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
   HEAPF32[($373_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($535_1 - Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2])) + $534_1) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($373_1 + 36 | 0) >> 2]));
   label$22 : {
    if (HEAP32[($10_1 + 32 | 0) >> 2] | 0) {
     break label$22
    }
    $547_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + -3 | 0 | 0) | 0) >> 2]);
    label$23 : {
     label$24 : {
      if (!(Math_fround(Math_abs($547_1)) < Math_fround(2147483648.0))) {
       break label$24
      }
      $384_1 = ~~$547_1;
      break label$23;
     }
     $384_1 = -2147483648;
    }
    HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] = $384_1;
    $395_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + -2 | 0 | 0) | 0) >> 2]) != Math_fround(0 | 0);
    HEAP8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 0] = $395_1 & 1 | 0;
    $406_1 = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + -1 | 0 | 0) | 0) >> 2]) != Math_fround(0 | 0);
    HEAP8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 29 | 0) >> 0] = $406_1 & 1 | 0;
   }
  }
  global$0 = $10_1 + 64 | 0;
  return;
 }
 
 function $988($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $989($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 150994944 | 0 | 0;
 }
 
 function $990($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $13_1 = 0, $66_1 = Math_fround(0), $67_1 = Math_fround(0), $68_1 = Math_fround(0), $69_1 = Math_fround(0), $70_1 = Math_fround(0), $71_1 = Math_fround(0);
  $10_1 = global$0 - 32 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($10_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($10_1 + 8 | 0) >> 2] = $5_1;
  HEAP8[($10_1 + 7 | 0) >> 0] = $6_1;
  HEAP8[($10_1 + 6 | 0) >> 0] = $7_1;
  $13_1 = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
  HEAP32[($10_1 + 24 | 0) >> 2] = Math_imul(HEAP32[($10_1 + 24 | 0) >> 2] | 0, 6);
  $66_1 = Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]);
  HEAPF32[($15($13_1 + 20 | 0 | 0, HEAP32[($10_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] = $66_1;
  $67_1 = Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]);
  HEAPF32[($15($13_1 + 20 | 0 | 0, (HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $67_1;
  $68_1 = Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]);
  HEAPF32[($15($13_1 + 20 | 0 | 0, (HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2] = $68_1;
  $69_1 = Math_fround(HEAP32[($10_1 + 8 | 0) >> 2] | 0 | 0);
  HEAPF32[($15($13_1 + 20 | 0 | 0, (HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 3 | 0 | 0) | 0) >> 2] = $69_1;
  $70_1 = Math_fround(((HEAPU8[($10_1 + 7 | 0) >> 0] | 0) & 1 | 0 ? 1 : 0) | 0);
  HEAPF32[($15($13_1 + 20 | 0 | 0, (HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0 | 0) | 0) >> 2] = $70_1;
  $71_1 = Math_fround(((HEAPU8[($10_1 + 6 | 0) >> 0] | 0) & 1 | 0 ? 1 : 0) | 0);
  HEAPF32[($15($13_1 + 20 | 0 | 0, (HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 5 | 0 | 0) | 0) >> 2] = $71_1;
  global$0 = $10_1 + 32 | 0;
  return;
 }
 
 function $991($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 10040 + 8 | 0;
  $504($4_1 + 20 | 0 | 0) | 0;
  $839($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $992($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $991($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $993() {
  $983();
  return;
 }
 
 function $994($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $29_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  label$1 : while (1) {
   $15_1 = 0;
   label$2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $15_1 = ($995(HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0);
   }
   label$3 : {
    if (!($15_1 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
    continue label$1;
   }
   break label$1;
  };
  $29_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $29_1 | 0;
 }
 
 function $995($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $39_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $1923(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = -1;
    break label$1;
   }
   label$4 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 1;
  }
  $39_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $39_1 | 0;
 }
 
 function $996($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $994(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
  }
  $19_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $19_1 | 0;
 }
 
 function $997($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $5_1 = 0, $20_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $994(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $20_1 = Math_fround(HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2]);
    break label$1;
   }
   $20_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
  }
  global$0 = $5_1 + 16 | 0;
  return Math_fround($20_1);
 }
 
 function $998($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $18_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $994(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $18_1 = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
    break label$1;
   }
   $18_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $18_1 | 0;
 }
 
 function $999($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $83_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 3 | 0) >> 0] = $2_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $994(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    label$3 : {
     if (!((HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP8[($5_1 + 15 | 0) >> 0] = ($1926(HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 4643 | 0) | 0 | 0) == (0 | 0) & 1 | 0;
     break label$1;
    }
    label$4 : {
     if (!((HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP8[($5_1 + 15 | 0) >> 0] = 1 & 1 | 0;
     break label$1;
    }
    label$5 : {
     if (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) {
      break label$5
     }
     HEAP8[($5_1 + 15 | 0) >> 0] = 0 & 1 | 0;
     break label$1;
    }
    label$6 : {
     if (!((HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP8[($5_1 + 15 | 0) >> 0] = 0 & 1 | 0;
     break label$1;
    }
    label$7 : {
     if (!((HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP8[($5_1 + 15 | 0) >> 0] = Math_fround(HEAPF32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0;
     break label$1;
    }
    HEAP8[($5_1 + 15 | 0) >> 0] = (HEAPU8[($5_1 + 3 | 0) >> 0] | 0) & 1 | 0;
    break label$1;
   }
   HEAP8[($5_1 + 15 | 0) >> 0] = (HEAPU8[($5_1 + 3 | 0) >> 0] | 0) & 1 | 0;
  }
  $83_1 = (HEAPU8[($5_1 + 15 | 0) >> 0] | 0) & 1 | 0;
  global$0 = $5_1 + 16 | 0;
  return $83_1 | 0;
 }
 
 function $1000() {
  return HEAP32[(0 + 26384 | 0) >> 2] | 0 | 0;
 }
 
 function $1001($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $35_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = 0;
  HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(0 | 0);
  HEAP32[($5_1 + 28 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = $1003($5_1 | 0, $1002(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
   label$2 : {
    if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    fimport$0(4648 | 0, 2914 | 0, 119 | 0, 3883 | 0);
    wasm2js_trap();
   }
  }
  $35_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $35_1 | 0;
 }
 
 function $1002($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   label$3 : while (1) {
    $23_1 = 0;
    label$4 : {
     if (!(((HEAPU8[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
      break label$4
     }
     $23_1 = ((HEAPU8[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) <= (32 | 0);
    }
    label$5 : {
     if (!($23_1 & 1 | 0)) {
      break label$5
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    }
    break label$3;
   };
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  }
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $1003($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0, $60_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $8_1 = (HEAP8[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 0] | 0) + -34 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     switch ($8_1 | 0) {
     case 76:
      label$11 : {
       if ($1930((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0 | 0, 4061 | 0, 3 | 0) | 0) {
        break label$11
       }
       HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = 2;
       HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0;
       break label$1;
      }
      break label$2;
     case 68:
      label$12 : {
       if ($1930((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0 | 0, 4729 | 0, 4 | 0) | 0) {
        break label$12
       }
       HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 5 | 0;
       break label$1;
      }
      break label$2;
     case 82:
      label$13 : {
       if ($1930((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0 | 0, 4644 | 0, 3 | 0) | 0) {
        break label$13
       }
       HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = 1;
       HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] = 1;
       HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0;
       break label$1;
      }
      break label$2;
     case 0:
      HEAP32[($4_1 + 12 | 0) >> 2] = $1004(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
      break label$1;
     case 57:
      HEAP32[($4_1 + 12 | 0) >> 2] = $1005(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
      break label$1;
     case 89:
      HEAP32[($4_1 + 12 | 0) >> 2] = $1006(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
      break label$1;
     case 11:
     case 14:
     case 15:
     case 16:
     case 17:
     case 18:
     case 19:
     case 20:
     case 21:
     case 22:
     case 23:
      HEAP32[($4_1 + 12 | 0) >> 2] = $1007(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
      break label$1;
     default:
      break label$3;
     };
    }
   }
   HEAP32[(0 + 26384 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $60_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $60_1 | 0;
 }
 
 function $1004($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $35_1 = 0, $11_1 = 0, $25_1 = 0, $49_1 = 0, $57_1 = 0, $61_1 = 0, $93_1 = 0, $103_1 = 0, $117_1 = 0, $126_1 = 0, $130_1 = 0, $139_1 = 0, $141_1 = 0, $145_1 = 0, $149_1 = 0, $153_1 = 0, $157_1 = 0, $203_1 = 0, $214_1 = 0, $287_1 = 0, $296_1 = 0, $307_1 = 0, $318_1 = 0, $330_1 = 0, $336_1 = 0, $346_1 = 0, $129_1 = 0, $163_1 = 0, $225_1 = 0, $293_1 = 0, $304_1 = 0, $315_1 = 0, $327_1 = 0, $335_1 = 0, $363_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 48 | 0) >> 2] = (HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($4_1 + 36 | 0) >> 2] = 0;
  $11_1 = 24;
  label$1 : {
   label$2 : {
    if (!((((HEAPU8[(HEAP32[($4_1 + 52 | 0) >> 2] | 0) >> 0] | 0) << $11_1 | 0) >> $11_1 | 0 | 0) != (34 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[(0 + 26384 | 0) >> 2] = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
    HEAP32[($4_1 + 60 | 0) >> 2] = 0;
    break label$1;
   }
   label$3 : while (1) {
    $25_1 = 24;
    $35_1 = 0;
    label$4 : {
     if (!((((HEAPU8[(HEAP32[($4_1 + 48 | 0) >> 2] | 0) >> 0] | 0) << $25_1 | 0) >> $25_1 | 0 | 0) != (34 | 0) & 1 | 0)) {
      break label$4
     }
     $35_1 = 0;
     if (!(((HEAPU8[(HEAP32[($4_1 + 48 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
      break label$4
     }
     $49_1 = (HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($4_1 + 36 | 0) >> 2] = $49_1;
     $35_1 = ($49_1 | 0) != (0 | 0);
    }
    label$5 : {
     if (!($35_1 & 1 | 0)) {
      break label$5
     }
     $57_1 = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
     HEAP32[($4_1 + 48 | 0) >> 2] = $57_1 + 1 | 0;
     $61_1 = 24;
     label$6 : {
      if (!((((HEAPU8[$57_1 >> 0] | 0) << $61_1 | 0) >> $61_1 | 0 | 0) == (92 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($4_1 + 48 | 0) >> 2] = (HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 1 | 0;
     }
     continue label$3;
    }
    break label$3;
   };
   HEAP32[($4_1 + 40 | 0) >> 2] = $942((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 1 | 0 | 0, 2914 | 0, 236 | 0) | 0;
   label$7 : {
    if ((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$7
    }
    HEAP32[($4_1 + 60 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($4_1 + 48 | 0) >> 2] = (HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
   label$8 : while (1) {
    $93_1 = 24;
    $103_1 = 0;
    label$9 : {
     if (!((((HEAPU8[(HEAP32[($4_1 + 48 | 0) >> 2] | 0) >> 0] | 0) << $93_1 | 0) >> $93_1 | 0 | 0) != (34 | 0) & 1 | 0)) {
      break label$9
     }
     $103_1 = ((HEAPU8[(HEAP32[($4_1 + 48 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0);
    }
    label$10 : {
     if (!($103_1 & 1 | 0)) {
      break label$10
     }
     $117_1 = 24;
     label$11 : {
      label$12 : {
       if (!((((HEAPU8[(HEAP32[($4_1 + 48 | 0) >> 2] | 0) >> 0] | 0) << $117_1 | 0) >> $117_1 | 0 | 0) != (92 | 0) & 1 | 0)) {
        break label$12
       }
       $126_1 = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
       HEAP32[($4_1 + 48 | 0) >> 2] = $126_1 + 1 | 0;
       $129_1 = HEAPU8[$126_1 >> 0] | 0;
       $130_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
       HEAP32[($4_1 + 44 | 0) >> 2] = $130_1 + 1 | 0;
       HEAP8[$130_1 >> 0] = $129_1;
       break label$11;
      }
      HEAP32[($4_1 + 48 | 0) >> 2] = (HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 1 | 0;
      $139_1 = (HEAP8[(HEAP32[($4_1 + 48 | 0) >> 2] | 0) >> 0] | 0) + -98 | 0;
      label$13 : {
       label$14 : {
        switch ($139_1 | 0) {
        case 0:
         $141_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
         HEAP32[($4_1 + 44 | 0) >> 2] = $141_1 + 1 | 0;
         HEAP8[$141_1 >> 0] = 8;
         break label$13;
        case 4:
         $145_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
         HEAP32[($4_1 + 44 | 0) >> 2] = $145_1 + 1 | 0;
         HEAP8[$145_1 >> 0] = 12;
         break label$13;
        case 12:
         $149_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
         HEAP32[($4_1 + 44 | 0) >> 2] = $149_1 + 1 | 0;
         HEAP8[$149_1 >> 0] = 10;
         break label$13;
        case 16:
         $153_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
         HEAP32[($4_1 + 44 | 0) >> 2] = $153_1 + 1 | 0;
         HEAP8[$153_1 >> 0] = 13;
         break label$13;
        case 18:
         $157_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
         HEAP32[($4_1 + 44 | 0) >> 2] = $157_1 + 1 | 0;
         HEAP8[$157_1 >> 0] = 9;
         break label$13;
        case 19:
         $163_1 = (HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 1 | 0;
         HEAP32[($4_1 + 16 | 0) >> 2] = $4_1 + 32 | 0;
         $1919($163_1 | 0, 1291 | 0, $4_1 + 16 | 0 | 0) | 0;
         HEAP32[($4_1 + 48 | 0) >> 2] = (HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 4 | 0;
         label$21 : {
          label$22 : {
           label$23 : {
            if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 0 >= 56320 >>> 0 & 1 | 0)) {
             break label$23
            }
            if ((HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 0 <= 57343 >>> 0 & 1 | 0) {
             break label$22
            }
           }
           if (HEAP32[($4_1 + 32 | 0) >> 2] | 0) {
            break label$21
           }
          }
          break label$13;
         }
         label$24 : {
          if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 0 >= 55296 >>> 0 & 1 | 0)) {
           break label$24
          }
          if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 0 <= 56319 >>> 0 & 1 | 0)) {
           break label$24
          }
          $203_1 = 24;
          label$25 : {
           label$26 : {
            if ((((HEAPU8[((HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $203_1 | 0) >> $203_1 | 0 | 0) != (92 | 0) & 1 | 0) {
             break label$26
            }
            $214_1 = 24;
            if (!((((HEAPU8[((HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) << $214_1 | 0) >> $214_1 | 0 | 0) != (117 | 0) & 1 | 0)) {
             break label$25
            }
           }
           break label$13;
          }
          $225_1 = (HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 3 | 0;
          HEAP32[$4_1 >> 2] = $4_1 + 28 | 0;
          $1919($225_1 | 0, 1291 | 0, $4_1 | 0) | 0;
          HEAP32[($4_1 + 48 | 0) >> 2] = (HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 6 | 0;
          label$27 : {
           label$28 : {
            if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) >>> 0 < 56320 >>> 0 & 1 | 0) {
             break label$28
            }
            if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0) >>> 0 > 57343 >>> 0 & 1 | 0)) {
             break label$27
            }
           }
           break label$13;
          }
          HEAP32[($4_1 + 32 | 0) >> 2] = (((HEAP32[($4_1 + 32 | 0) >> 2] | 0) & 1023 | 0) << 10 | 0 | ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) & 1023 | 0) | 0) + 65536 | 0;
         }
         HEAP32[($4_1 + 36 | 0) >> 2] = 4;
         label$29 : {
          label$30 : {
           if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 0 < 128 >>> 0 & 1 | 0)) {
            break label$30
           }
           HEAP32[($4_1 + 36 | 0) >> 2] = 1;
           break label$29;
          }
          label$31 : {
           label$32 : {
            if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 0 < 2048 >>> 0 & 1 | 0)) {
             break label$32
            }
            HEAP32[($4_1 + 36 | 0) >> 2] = 2;
            break label$31;
           }
           label$33 : {
            if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 0 < 65536 >>> 0 & 1 | 0)) {
             break label$33
            }
            HEAP32[($4_1 + 36 | 0) >> 2] = 3;
           }
          }
         }
         HEAP32[($4_1 + 44 | 0) >> 2] = (HEAP32[($4_1 + 44 | 0) >> 2] | 0) + (HEAP32[($4_1 + 36 | 0) >> 2] | 0) | 0;
         $287_1 = (HEAP32[($4_1 + 36 | 0) >> 2] | 0) + -1 | 0;
         label$34 : {
          switch ($287_1 | 0) {
          case 3:
           $293_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 128 | 0) & 191 | 0;
           $296_1 = (HEAP32[($4_1 + 44 | 0) >> 2] | 0) + -1 | 0;
           HEAP32[($4_1 + 44 | 0) >> 2] = $296_1;
           HEAP8[$296_1 >> 0] = $293_1;
           HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 6 | 0;
          case 2:
           $304_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 128 | 0) & 191 | 0;
           $307_1 = (HEAP32[($4_1 + 44 | 0) >> 2] | 0) + -1 | 0;
           HEAP32[($4_1 + 44 | 0) >> 2] = $307_1;
           HEAP8[$307_1 >> 0] = $304_1;
           HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 6 | 0;
          case 1:
           $315_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 128 | 0) & 191 | 0;
           $318_1 = (HEAP32[($4_1 + 44 | 0) >> 2] | 0) + -1 | 0;
           HEAP32[($4_1 + 44 | 0) >> 2] = $318_1;
           HEAP8[$318_1 >> 0] = $315_1;
           HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 6 | 0;
          case 0:
           $327_1 = HEAP32[($4_1 + 32 | 0) >> 2] | 0 | ((HEAPU8[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 10120 | 0) >> 0] | 0) & 255 | 0) | 0;
           $330_1 = (HEAP32[($4_1 + 44 | 0) >> 2] | 0) + -1 | 0;
           HEAP32[($4_1 + 44 | 0) >> 2] = $330_1;
           HEAP8[$330_1 >> 0] = $327_1;
           break;
          default:
           break label$34;
          };
         }
         HEAP32[($4_1 + 44 | 0) >> 2] = (HEAP32[($4_1 + 44 | 0) >> 2] | 0) + (HEAP32[($4_1 + 36 | 0) >> 2] | 0) | 0;
         break label$13;
        default:
         break label$14;
        };
       }
       $335_1 = HEAPU8[(HEAP32[($4_1 + 48 | 0) >> 2] | 0) >> 0] | 0;
       $336_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
       HEAP32[($4_1 + 44 | 0) >> 2] = $336_1 + 1 | 0;
       HEAP8[$336_1 >> 0] = $335_1;
      }
      HEAP32[($4_1 + 48 | 0) >> 2] = (HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 1 | 0;
     }
     continue label$8;
    }
    break label$8;
   };
   HEAP8[(HEAP32[($4_1 + 44 | 0) >> 2] | 0) >> 0] = 0;
   $346_1 = 24;
   label$39 : {
    if (!((((HEAPU8[(HEAP32[($4_1 + 48 | 0) >> 2] | 0) >> 0] | 0) << $346_1 | 0) >> $346_1 | 0 | 0) == (34 | 0) & 1 | 0)) {
     break label$39
    }
    HEAP32[($4_1 + 48 | 0) >> 2] = (HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] = 4;
   HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
  }
  $363_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
  global$0 = $4_1 + 64 | 0;
  return $363_1 | 0;
 }
 
 function $1005($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $26_1 = 0, $13_1 = 0, $56_1 = 0, $66_1 = 0, $95_1 = 0, $101_1 = 0, $116_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] = 5;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1002((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
  $13_1 = 24;
  label$1 : {
   label$2 : {
    if (!((((HEAPU8[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 0] | 0) << $13_1 | 0) >> $13_1 | 0 | 0) == (93 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    break label$1;
   }
   $26_1 = $1975(32 | 0) | 0;
   FUNCTION_TABLE[210 | 0]($26_1, 0) | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = $26_1;
   HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = $26_1;
   label$3 : {
    if ((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$3
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $1002($1003(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, $1002(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0;
   label$4 : {
    if ((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$4
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] = 1;
   label$5 : {
    label$6 : while (1) {
     $56_1 = 24;
     if (!((((HEAPU8[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 0] | 0) << $56_1 | 0) >> $56_1 | 0 | 0) == (44 | 0) & 1 | 0)) {
      break label$5
     }
     $66_1 = $1975(32 | 0) | 0;
     FUNCTION_TABLE[210 | 0]($66_1, 0) | 0;
     HEAP32[($4_1 + 12 | 0) >> 2] = $66_1;
     label$7 : {
      if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$7
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = $1002($1003(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, $1002((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0 | 0) | 0 | 0) | 0 | 0) | 0;
     label$8 : {
      if ((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$8
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = 0;
      break label$1;
     }
     $95_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
     HEAP32[($95_1 + 12 | 0) >> 2] = (HEAP32[($95_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   $101_1 = 24;
   label$9 : {
    if (!((((HEAPU8[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 0] | 0) << $101_1 | 0) >> $101_1 | 0 | 0) == (93 | 0) & 1 | 0)) {
     break label$9
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    break label$1;
   }
   HEAP32[(0 + 26384 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $116_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $116_1 | 0;
 }
 
 function $1006($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $26_1 = 0, $13_1 = 0, $59_1 = 0, $90_1 = 0, $100_1 = 0, $136_1 = 0, $163_1 = 0, $169_1 = 0, $184_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] = 6;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1002((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
  $13_1 = 24;
  label$1 : {
   label$2 : {
    if (!((((HEAPU8[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 0] | 0) << $13_1 | 0) >> $13_1 | 0 | 0) == (125 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    break label$1;
   }
   $26_1 = $1975(32 | 0) | 0;
   FUNCTION_TABLE[210 | 0]($26_1, 0) | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = $26_1;
   HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = $26_1;
   label$3 : {
    if ((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$3
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $1002($1004(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, $1002(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0;
   label$4 : {
    if ((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$4
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 16 | 0) >> 2] = 0;
   $59_1 = 24;
   label$5 : {
    if (!((((HEAPU8[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 0] | 0) << $59_1 | 0) >> $59_1 | 0 | 0) != (58 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[(0 + 26384 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $1002($1003(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, $1002((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0 | 0) | 0 | 0) | 0 | 0) | 0;
   label$6 : {
    if ((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$6
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] = 1;
   label$7 : {
    label$8 : while (1) {
     $90_1 = 24;
     if (!((((HEAPU8[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 0] | 0) << $90_1 | 0) >> $90_1 | 0 | 0) == (44 | 0) & 1 | 0)) {
      break label$7
     }
     $100_1 = $1975(32 | 0) | 0;
     FUNCTION_TABLE[210 | 0]($100_1, 0) | 0;
     HEAP32[($4_1 + 12 | 0) >> 2] = $100_1;
     label$9 : {
      if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$9
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = $1002($1004(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, $1002((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0 | 0) | 0 | 0) | 0 | 0) | 0;
     label$10 : {
      if ((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$10
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 16 | 0) >> 2] = 0;
     $136_1 = 24;
     label$11 : {
      if (!((((HEAPU8[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 0] | 0) << $136_1 | 0) >> $136_1 | 0 | 0) != (58 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[(0 + 26384 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
      HEAP32[($4_1 + 28 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP32[($4_1 + 20 | 0) >> 2] = $1002($1003(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, $1002((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0 | 0) | 0 | 0) | 0 | 0) | 0;
     label$12 : {
      if ((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$12
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = 0;
      break label$1;
     }
     $163_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
     HEAP32[($163_1 + 12 | 0) >> 2] = (HEAP32[($163_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
   $169_1 = 24;
   label$13 : {
    if (!((((HEAPU8[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 0] | 0) << $169_1 | 0) >> $169_1 | 0 | 0) == (125 | 0) & 1 | 0)) {
     break label$13
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    break label$1;
   }
   HEAP32[(0 + 26384 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $184_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $184_1 | 0;
 }
 
 function $1007($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $25_1 = 0, $35_1 = 0, $38_1 = 0, $50_1 = 0, $60_1 = 0, $76_1 = 0, $86_1 = 0, $89_1 = 0, $101_1 = 0, $116_1 = 0, $127_1 = 0, $144_1 = 0, $159_1 = 0, $173_1 = 0, $183_1 = 0, $186_1 = 0, $198_1 = 0, $271_1 = 0.0, $223_1 = 0, $251_1 = 0.0, $233_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 52 | 0) >> 2] = $1_1;
  HEAPF64[($4_1 + 40 | 0) >> 3] = +(0 | 0);
  HEAP32[($4_1 + 36 | 0) >> 2] = 0;
  HEAP32[($4_1 + 32 | 0) >> 2] = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
  $10_1 = 24;
  label$1 : {
   if (!((((HEAPU8[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $10_1 | 0) >> $10_1 | 0 | 0) == (45 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($4_1 + 36 | 0) >> 2] = -1;
   HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
  }
  label$2 : while (1) {
   $25_1 = 24;
   $35_1 = 0;
   label$3 : {
    if (!((((HEAPU8[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $25_1 | 0) >> $25_1 | 0 | 0) >= (48 | 0) & 1 | 0)) {
     break label$3
    }
    $38_1 = 24;
    $35_1 = (((HEAPU8[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $38_1 | 0) >> $38_1 | 0 | 0) <= (57 | 0);
   }
   label$4 : {
    if (!($35_1 & 1 | 0)) {
     break label$4
    }
    $50_1 = 24;
    HEAPF64[($4_1 + 40 | 0) >> 3] = +HEAPF64[($4_1 + 40 | 0) >> 3] * 10.0 + +((((HEAPU8[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $50_1 | 0) >> $50_1 | 0) - 48 | 0 | 0);
    HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   }
   break label$2;
  };
  $60_1 = 24;
  label$5 : {
   if (!((((HEAPU8[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $60_1 | 0) >> $60_1 | 0 | 0) == (46 | 0) & 1 | 0)) {
    break label$5
   }
   HEAPF64[($4_1 + 24 | 0) >> 3] = +(0 | 0);
   HEAP32[($4_1 + 20 | 0) >> 2] = 0;
   HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
   label$6 : while (1) {
    $76_1 = 24;
    $86_1 = 0;
    label$7 : {
     if (!((((HEAPU8[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $76_1 | 0) >> $76_1 | 0 | 0) >= (48 | 0) & 1 | 0)) {
      break label$7
     }
     $89_1 = 24;
     $86_1 = (((HEAPU8[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $89_1 | 0) >> $89_1 | 0 | 0) <= (57 | 0);
    }
    label$8 : {
     if (!($86_1 & 1 | 0)) {
      break label$8
     }
     $101_1 = 24;
     HEAPF64[($4_1 + 24 | 0) >> 3] = +HEAPF64[($4_1 + 24 | 0) >> 3] * 10.0 + +((((HEAPU8[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $101_1 | 0) >> $101_1 | 0) - 48 | 0 | 0);
     HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    }
    break label$6;
   };
   $251_1 = +HEAPF64[($4_1 + 24 | 0) >> 3] / +$1009(+(10.0), HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
   HEAPF64[($4_1 + 40 | 0) >> 3] = +HEAPF64[($4_1 + 40 | 0) >> 3] + $251_1;
  }
  label$9 : {
   if (!(HEAP32[($4_1 + 36 | 0) >> 2] | 0)) {
    break label$9
   }
   HEAPF64[($4_1 + 40 | 0) >> 3] = -+HEAPF64[($4_1 + 40 | 0) >> 3];
  }
  $116_1 = 24;
  label$10 : {
   label$11 : {
    if ((((HEAPU8[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $116_1 | 0) >> $116_1 | 0 | 0) == (101 | 0) & 1 | 0) {
     break label$11
    }
    $127_1 = 24;
    if (!((((HEAPU8[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $127_1 | 0) >> $127_1 | 0 | 0) == (69 | 0) & 1 | 0)) {
     break label$10
    }
   }
   HEAPF64[($4_1 + 8 | 0) >> 3] = +(0 | 0);
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
   $144_1 = 24;
   label$12 : {
    label$13 : {
     if (!((((HEAPU8[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $144_1 | 0) >> $144_1 | 0 | 0) == (45 | 0) & 1 | 0)) {
      break label$13
     }
     HEAP32[($4_1 + 4 | 0) >> 2] = -1;
     HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
     break label$12;
    }
    $159_1 = 24;
    label$14 : {
     if (!((((HEAPU8[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $159_1 | 0) >> $159_1 | 0 | 0) == (43 | 0) & 1 | 0)) {
      break label$14
     }
     HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    }
   }
   label$15 : while (1) {
    $173_1 = 24;
    $183_1 = 0;
    label$16 : {
     if (!((((HEAPU8[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $173_1 | 0) >> $173_1 | 0 | 0) >= (48 | 0) & 1 | 0)) {
      break label$16
     }
     $186_1 = 24;
     $183_1 = (((HEAPU8[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $186_1 | 0) >> $186_1 | 0 | 0) <= (57 | 0);
    }
    label$17 : {
     if (!($183_1 & 1 | 0)) {
      break label$17
     }
     $198_1 = 24;
     HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[($4_1 + 8 | 0) >> 3] * 10.0 + +((((HEAPU8[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $198_1 | 0) >> $198_1 | 0) - 48 | 0 | 0);
     HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
     continue label$15;
    }
    break label$15;
   };
   label$18 : {
    label$19 : {
     if (!(HEAP32[($4_1 + 4 | 0) >> 2] | 0)) {
      break label$19
     }
     HEAPF64[($4_1 + 40 | 0) >> 3] = +HEAPF64[($4_1 + 40 | 0) >> 3] / +$1010(10 | 0, +(+HEAPF64[($4_1 + 8 | 0) >> 3]));
     break label$18;
    }
    HEAPF64[($4_1 + 40 | 0) >> 3] = +HEAPF64[($4_1 + 40 | 0) >> 3] * +$1010(10 | 0, +(+HEAPF64[($4_1 + 8 | 0) >> 3]));
   }
  }
  label$20 : {
   label$21 : {
    if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$21
    }
    HEAPF32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 24 | 0) >> 2] = Math_fround(+HEAPF64[($4_1 + 40 | 0) >> 3]);
    $271_1 = +HEAPF64[($4_1 + 40 | 0) >> 3];
    label$22 : {
     label$23 : {
      if (!(Math_abs($271_1) < 2147483648.0)) {
       break label$23
      }
      $223_1 = ~~$271_1;
      break label$22;
     }
     $223_1 = -2147483648;
    }
    HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 20 | 0) >> 2] = $223_1;
    HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] = 3;
    HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
    break label$20;
   }
   HEAP32[(0 + 26384 | 0) >> 2] = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
   HEAP32[($4_1 + 60 | 0) >> 2] = 0;
  }
  $233_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
  global$0 = $4_1 + 64 | 0;
  return $233_1 | 0;
 }
 
 function $1008($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $17_1 = 0, $52_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  HEAP32[$3_1 >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$1 : while (1) {
   HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
   label$2 : {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[$3_1 >> 2] = HEAP32[(HEAP32[($3_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
   }
   $17_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   label$3 : {
    if (($17_1 | 0) == (0 | 0) & 1 | 0) {
     break label$3
    }
    FUNCTION_TABLE[211 | 0]($17_1) | 0;
    $1978($17_1 | 0);
   }
   if ((HEAP32[$3_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    continue label$1
   }
   break label$1;
  };
  label$4 : {
   if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$4
   }
   $642(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, 2914 | 0, 135 | 0);
  }
  label$5 : {
   if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$5
   }
   $642(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 2914 | 0, 139 | 0);
  }
  $52_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $52_1 | 0;
 }
 
 function $1009($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $10_1 = +$1807(+(+HEAPF64[($4_1 + 8 | 0) >> 3]), +(+(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0)));
  global$0 = $4_1 + 16 | 0;
  return +$10_1;
 }
 
 function $1010($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $10_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF64[$4_1 >> 3] = $1_1;
  $10_1 = +$1807(+(+(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0)), +(+HEAPF64[$4_1 >> 3]));
  global$0 = $4_1 + 16 | 0;
  return +$10_1;
 }
 
 function $1011($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
  HEAP8[($8_1 + 11 | 0) >> 0] = $5_1;
  $10_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
  $113($10_1 | 0) | 0;
  HEAP32[$10_1 >> 2] = 10128 + 8 | 0;
  HEAP32[($10_1 + 4 | 0) >> 2] = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  $124($10_1 + 8 | 0 | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($10_1 + 20 | 0) >> 2] = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
  $124($10_1 + 24 | 0 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP8[($10_1 + 36 | 0) >> 0] = (HEAPU8[($8_1 + 11 | 0) >> 0] | 0) & 1 | 0;
  global$0 = $8_1 + 32 | 0;
  return $10_1 | 0;
 }
 
 function $1012($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 10128 + 8 | 0;
  $112($4_1 + 24 | 0 | 0) | 0;
  $112($4_1 + 8 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1013($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1012($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1014($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $12_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
     break label$2
    }
    $12_1 = Math_fround(-Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]));
    break label$1;
   }
   $12_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
  }
  return Math_fround($12_1);
 }
 
 function $1015($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $16_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
     break label$2
    }
    $16_1 = Math_fround(-1.0);
    break label$1;
   }
   $16_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0 ? Math_fround(1.0) : Math_fround(0 | 0);
  }
  return Math_fround($16_1);
 }
 
 function $1016($0_1, $1_1, $2_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var $5_1 = 0, $15_1 = Math_fround(0), $19_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  HEAPF32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) < Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]) & 1 | 0)) {
     break label$2
    }
    $15_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) > Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]) & 1 | 0)) {
      break label$4
     }
     $19_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
     break label$3;
    }
    $19_1 = Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]);
   }
   $15_1 = $19_1;
  }
  return Math_fround($15_1);
 }
 
 function $1017($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $9_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = Math_fround($1018(Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))));
  global$0 = $4_1 + 16 | 0;
  return Math_fround($9_1);
 }
 
 function $1018($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $9_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = Math_fround($1802(Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))));
  global$0 = $4_1 + 16 | 0;
  return Math_fround($9_1);
 }
 
 function $1019($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $9_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = Math_fround($1020(Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))));
  global$0 = $4_1 + 16 | 0;
  return Math_fround($9_1);
 }
 
 function $1020($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $9_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = Math_fround($1869(Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))));
  global$0 = $4_1 + 16 | 0;
  return Math_fround($9_1);
 }
 
 function $1021($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = Math_fround($1022(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($7_1);
 }
 
 function $1022($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = Math_fround($1879(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($7_1);
 }
 
 function $1023($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = Math_fround($1024(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($7_1);
 }
 
 function $1024($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = Math_fround($1918(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($7_1);
 }
 
 function $1025($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = Math_fround($1026(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($7_1);
 }
 
 function $1026($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(Math_sqrt(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
 }
 
 function $1027($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = Math_fround($1028(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($7_1);
 }
 
 function $1028($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = Math_fround($1866(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($7_1);
 }
 
 function $1029($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $9_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $9_1 = Math_fround($1024(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) * Math_fround(.01745329238474369)))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($9_1);
 }
 
 function $1030($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $9_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $9_1 = Math_fround($1022(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) * Math_fround(.01745329238474369)))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($9_1);
 }
 
 function $1031($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = ($1032(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2])), Math_fround(Math_fround(0 | 0))) | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $1032($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(Math_fround(0 | 0) / Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
  $17_1 = (0 | 0) == ($1904($4_1 + 12 | 0 | 0, $4_1 + 4 | 0 | 0, 4 | 0) | 0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $17_1 | 0;
 }
 
 function $1033() {
  return Math_fround(Math_fround(Math_fround($1917() | 0 | 0) / Math_fround(2147483648.0)));
 }
 
 function $1034($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $14_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $14_1 = Math_fround($1035(Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]) + Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])) * Math_fround(.5)))));
  global$0 = $4_1 + 16 | 0;
  return Math_fround($14_1);
 }
 
 function $1035($0_1, $1_1, $2_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var $5_1 = 0, $43_1 = Math_fround(0);
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAPF32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 16 | 0) >> 2] = $2_1;
  HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround($1033());
  HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
  label$1 : {
   label$2 : {
    if (!(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) <= Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2])) / Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])) & 1 | 0)) {
     break label$2
    }
    HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) + Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])) * Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2])))))));
    break label$1;
   }
   HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]) - Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2])) * Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])) * Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2])))))));
  }
  $43_1 = Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]);
  global$0 = $5_1 + 32 | 0;
  return Math_fround($43_1);
 }
 
 function $1036($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $9_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = Math_fround($1037(Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))));
  global$0 = $4_1 + 16 | 0;
  return Math_fround($9_1);
 }
 
 function $1037($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $9_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = Math_fround($1911(Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))));
  global$0 = $4_1 + 16 | 0;
  return Math_fround($9_1);
 }
 
 function $1038() {
  $1160(26388 | 0, 1575 | 0, 26616 | 0) | 0;
  $1797(214 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1039($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26388 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1040($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26388 | 0;
 }
 
 function $1041($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1764($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $499($5_1 + 64 | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 10196 + 8 | 0;
  HEAP32[($5_1 + 64 | 0) >> 2] = 10196 + 32 | 0;
  HEAPF32[($5_1 + 76 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 80 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 84 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 88 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 92 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 96 | 0) >> 2] = Math_fround(0 | 0);
  HEAP32[($5_1 + 100 | 0) >> 2] = 0;
  $502($5_1 + 104 | 0 | 0) | 0;
  $502($5_1 + 120 | 0 | 0) | 0;
  $1042($5_1 + 136 | 0 | 0) | 0;
  $1042($5_1 + 152 | 0 | 0) | 0;
  $674($5_1 + 168 | 0 | 0) | 0;
  HEAPF32[($5_1 + 180 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 184 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 188 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 192 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 196 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 200 | 0) >> 2] = Math_fround(0 | 0);
  $57_1 = Math_fround(1.0);
  $1043($5_1 + 204 | 0 | 0, Math_fround($57_1), Math_fround($57_1), Math_fround($57_1), Math_fround($57_1)) | 0;
  HEAP32[($5_1 + 224 | 0) >> 2] = 0;
  HEAP8[($5_1 + 228 | 0) >> 0] = 0;
  HEAP32[($5_1 + 232 | 0) >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1042($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 10296 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1043($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  $113($8_1 | 0) | 0;
  HEAP32[$8_1 >> 2] = 9128 + 8 | 0;
  HEAPF32[($8_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
  HEAPF32[($8_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
  HEAPF32[($8_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
  HEAPF32[($8_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
  $817($8_1 | 0) | 0;
  global$0 = $7_1 + 32 | 0;
  return $8_1 | 0;
 }
 
 function $1044($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 10196 + 8 | 0;
  HEAP32[($4_1 + 64 | 0) >> 2] = 10196 + 32 | 0;
  $815($4_1 + 204 | 0 | 0) | 0;
  $112($4_1 + 168 | 0 | 0) | 0;
  $1045($4_1 + 152 | 0 | 0) | 0;
  $1045($4_1 + 136 | 0 | 0) | 0;
  $504($4_1 + 120 | 0 | 0) | 0;
  $504($4_1 + 104 | 0 | 0) | 0;
  $507($4_1 + 64 | 0 | 0) | 0;
  $1766($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1045($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 10296 + 8 | 0;
  $1046($4_1 | 0);
  $1047($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1046($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1067($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 1 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1047($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1068(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1048($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = FUNCTION_TABLE[215 | 0]($4_1 + -64 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $1049($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[215 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1050($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $1049((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + -64 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1051($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $25_1 = 0, $29_1 = 0, $20_1 = 0, $199_1 = Math_fround(0), $203_1 = Math_fround(0), $204_1 = Math_fround(0), $210_1 = Math_fround(0), $241_1 = Math_fround(0), $247_1 = Math_fround(0), $248_1 = Math_fround(0), $254_1 = Math_fround(0), $281_1 = Math_fround(0), $287_1 = Math_fround(0), $288_1 = Math_fround(0), $292_1 = Math_fround(0), $323_1 = Math_fround(0), $327_1 = Math_fround(0), $328_1 = Math_fround(0), $332_1 = Math_fround(0);
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
  label$1 : {
   if (!(($488($4_1 + 104 | 0 | 0) | 0 | 0) != ($488($4_1 + 120 | 0 | 0) | 0 | 0) & 1 | 0)) {
    break label$1
   }
   $20_1 = $488($4_1 + 120 | 0 | 0) | 0;
   HEAPF32[($3_1 + 56 | 0) >> 2] = Math_fround(0 | 0);
   $573($4_1 + 104 | 0 | 0, $20_1 | 0, $3_1 + 56 | 0 | 0);
  }
  $25_1 = 0;
  HEAP32[($3_1 + 52 | 0) >> 2] = $25_1;
  HEAP32[($3_1 + 48 | 0) >> 2] = $488($4_1 + 120 | 0 | 0) | 0;
  HEAPF32[($3_1 + 44 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 180 | 0) >> 2]);
  HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 184 | 0) >> 2]);
  HEAP32[($3_1 + 36 | 0) >> 2] = $25_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = $25_1;
  $29_1 = HEAP32[($4_1 + 232 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       if (($29_1 | 0) == (90 | 0)) {
        break label$6
       }
       if (($29_1 | 0) == (180 | 0)) {
        break label$5
       }
       if (($29_1 | 0) == (270 | 0)) {
        break label$4
       }
       break label$3;
      }
      HEAPF32[($3_1 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 88 | 0) >> 2]) / Math_fround(Math_fround(HEAPF32[($4_1 + 188 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 180 | 0) >> 2])));
      HEAPF32[($3_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 84 | 0) >> 2]) / Math_fround(Math_fround(HEAPF32[($4_1 + 192 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 184 | 0) >> 2])));
      HEAPF32[($3_1 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 80 | 0) >> 2])) - Math_fround(HEAPF32[($4_1 + 88 | 0) >> 2])) / Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2])));
      HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 92 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 76 | 0) >> 2])) - Math_fround(HEAPF32[($4_1 + 84 | 0) >> 2])) / Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2])));
      HEAPF32[($3_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2]) / Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]));
      HEAPF32[($3_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 92 | 0) >> 2]) / Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]));
      HEAP32[($3_1 + 52 | 0) >> 2] = 0;
      label$7 : {
       label$8 : while (1) {
        if (!((HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$7
        }
        $199_1 = Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]);
        $203_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($15($4_1 + 120 | 0 | 0, (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2])) + $199_1);
        HEAPF32[($15($4_1 + 104 | 0 | 0, HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2] = $203_1;
        $204_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
        $210_1 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($15($4_1 + 120 | 0 | 0, HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2])) + $204_1);
        HEAPF32[($15($4_1 + 104 | 0 | 0, (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $210_1;
        HEAP32[($3_1 + 52 | 0) >> 2] = (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 2 | 0;
        continue label$8;
       };
      }
      break label$2;
     }
     HEAPF32[($3_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 84 | 0) >> 2]) / Math_fround(Math_fround(HEAPF32[($4_1 + 188 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 180 | 0) >> 2])));
     HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 88 | 0) >> 2]) / Math_fround(Math_fround(HEAPF32[($4_1 + 192 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 184 | 0) >> 2])));
     HEAPF32[($3_1 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 92 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 76 | 0) >> 2])) - Math_fround(HEAPF32[($4_1 + 84 | 0) >> 2])) / Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2])));
     HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) - Math_fround(Math_fround(HEAPF32[($4_1 + 80 | 0) >> 2]) / Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2])));
     HEAPF32[($3_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 92 | 0) >> 2]) / Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]));
     HEAPF32[($3_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2]) / Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]));
     HEAP32[($3_1 + 52 | 0) >> 2] = 0;
     label$9 : {
      label$10 : while (1) {
       if (!((HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
       }
       $241_1 = Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]);
       $247_1 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($15($4_1 + 120 | 0 | 0, HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2])) + $241_1);
       HEAPF32[($15($4_1 + 104 | 0 | 0, HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2] = $247_1;
       $248_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
       $254_1 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($15($4_1 + 120 | 0 | 0, (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2])) + $248_1);
       HEAPF32[($15($4_1 + 104 | 0 | 0, (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $254_1;
       HEAP32[($3_1 + 52 | 0) >> 2] = (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 2 | 0;
       continue label$10;
      };
     }
     break label$2;
    }
    HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 88 | 0) >> 2]) / Math_fround(Math_fround(HEAPF32[($4_1 + 192 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 184 | 0) >> 2])));
    HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 84 | 0) >> 2]) / Math_fround(Math_fround(HEAPF32[($4_1 + 188 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 180 | 0) >> 2])));
    HEAPF32[($3_1 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]) - Math_fround(Math_fround(HEAPF32[($4_1 + 80 | 0) >> 2]) / Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2])));
    HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) - Math_fround(Math_fround(HEAPF32[($4_1 + 76 | 0) >> 2]) / Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2])));
    HEAPF32[($3_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2]) / Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]));
    HEAPF32[($3_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 92 | 0) >> 2]) / Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]));
    HEAP32[($3_1 + 52 | 0) >> 2] = 0;
    label$11 : {
     label$12 : while (1) {
      if (!((HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$11
      }
      $281_1 = Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]);
      $287_1 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($15($4_1 + 120 | 0 | 0, (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2])) + $281_1);
      HEAPF32[($15($4_1 + 104 | 0 | 0, HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2] = $287_1;
      $288_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
      $292_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($15($4_1 + 120 | 0 | 0, HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2])) + $288_1);
      HEAPF32[($15($4_1 + 104 | 0 | 0, (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $292_1;
      HEAP32[($3_1 + 52 | 0) >> 2] = (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 2 | 0;
      continue label$12;
     };
    }
    break label$2;
   }
   HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 84 | 0) >> 2]) / Math_fround(Math_fround(HEAPF32[($4_1 + 188 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 180 | 0) >> 2])));
   HEAPF32[$3_1 >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 88 | 0) >> 2]) / Math_fround(Math_fround(HEAPF32[($4_1 + 192 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 184 | 0) >> 2])));
   HEAPF32[($3_1 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]) - Math_fround(Math_fround(HEAPF32[($4_1 + 76 | 0) >> 2]) / Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2])));
   HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 80 | 0) >> 2])) - Math_fround(HEAPF32[($4_1 + 88 | 0) >> 2])) / Math_fround(HEAPF32[$3_1 >> 2])));
   HEAPF32[($3_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 92 | 0) >> 2]) / Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]));
   HEAPF32[($3_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2]) / Math_fround(HEAPF32[$3_1 >> 2]));
   HEAP32[($3_1 + 52 | 0) >> 2] = 0;
   label$13 : {
    label$14 : while (1) {
     if (!((HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$13
     }
     $323_1 = Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]);
     $327_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($15($4_1 + 120 | 0 | 0, HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2])) + $323_1);
     HEAPF32[($15($4_1 + 104 | 0 | 0, HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2] = $327_1;
     $328_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
     $332_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($15($4_1 + 120 | 0 | 0, (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2])) + $328_1);
     HEAPF32[($15($4_1 + 104 | 0 | 0, (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $332_1;
     HEAP32[($3_1 + 52 | 0) >> 2] = (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 2 | 0;
     continue label$14;
    };
   }
  }
  global$0 = $3_1 + 64 | 0;
  return;
 }
 
 function $1052($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 120 | 0 | 0;
 }
 
 function $1053($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 104 | 0 | 0;
 }
 
 function $1054($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 136 | 0 | 0;
 }
 
 function $1055($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 100 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1056($5_1 + 20 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 20 | 0 | 0);
   $1057($5_1 + 36 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 36 | 0 | 0);
   HEAP32[($5_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0;
   $1057($5_1 + 120 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 120 | 0 | 0);
   $1058($5_1 + 136 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 136 | 0 | 0);
   HEAP32[($5_1 + 224 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 224 | 0) >> 2] | 0;
   $1058($5_1 + 152 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 152 | 0 | 0);
   HEAPF32[($5_1 + 196 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 196 | 0) >> 2]);
   HEAPF32[($5_1 + 200 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 200 | 0) >> 2]);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1056($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1059($5_1 | 0);
  $1060($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1057($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $508($5_1 | 0);
  $861($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1058($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1046($5_1 | 0);
  $1061($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1059($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1069($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1060($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1070($5_1 | 0, ($857($5_1 | 0) | 0) + ($857(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) | 0 | 0);
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < ($857(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1072($5_1 | 0, $1071(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1061($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1075($5_1 | 0, ($19($5_1 | 0) | 0) + ($19(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) | 0 | 0);
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < ($19(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1077($5_1 | 0, $1076(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1062($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 152 | 0 | 0;
 }
 
 function $1063($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 204 | 0 | 0;
 }
 
 function $1064($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $16_1 = 0, $79_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = $1065($4_1 | 0) | 0;
    break label$1;
   }
   $16_1 = $1655(236 | 0, 2327 | 0, 279 | 0) | 0;
   FUNCTION_TABLE[216 | 0]($16_1, $712($4_1 | 0) | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $16_1;
   $17((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 64 | 0 | 0, $14($4_1 + 64 | 0 | 0) | 0 | 0, 0 | 0);
   HEAPF32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 180 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 180 | 0) >> 2]);
   HEAPF32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 184 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 184 | 0) >> 2]);
   HEAPF32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 188 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 188 | 0) >> 2]);
   HEAPF32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 192 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 192 | 0) >> 2]);
   HEAP8[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 228 | 0) >> 0] = (HEAPU8[($4_1 + 228 | 0) >> 0] | 0) & 1 | 0;
   HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 232 | 0) >> 2] = HEAP32[($4_1 + 232 | 0) >> 2] | 0;
   HEAPF32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 76 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 76 | 0) >> 2]);
   HEAPF32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 80 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 80 | 0) >> 2]);
   HEAPF32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 84 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 84 | 0) >> 2]);
   HEAPF32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 88 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 88 | 0) >> 2]);
   HEAPF32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 92 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 92 | 0) >> 2]);
   HEAPF32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 96 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2]);
   $652((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 168 | 0 | 0, $4_1 + 168 | 0 | 0) | 0;
   $812((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 204 | 0 | 0, $4_1 + 204 | 0 | 0) | 0;
   $1774($4_1 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
   $1057((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 120 | 0 | 0, $4_1 + 120 | 0 | 0);
   $1057((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 104 | 0 | 0, $4_1 + 104 | 0 | 0);
   $1058((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 136 | 0 | 0, $4_1 + 136 | 0 | 0);
   HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 224 | 0) >> 2] = HEAP32[($4_1 + 224 | 0) >> 2] | 0;
   $1058((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 152 | 0 | 0, (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 152 | 0 | 0);
   HEAPF32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 196 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 196 | 0) >> 2]);
   HEAPF32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 200 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 200 | 0) >> 2]);
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  }
  $79_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $79_1 | 0;
 }
 
 function $1065($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $55_1 = 0, $46_1 = 0, $58_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $8_1 = $1655(236 | 0, 2327 | 0, 310 | 0) | 0;
  FUNCTION_TABLE[216 | 0]($8_1, $712($4_1 | 0) | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $8_1;
  $17((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 64 | 0 | 0, $14($4_1 + 64 | 0 | 0) | 0 | 0, 0 | 0);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 180 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 180 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 184 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 184 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 188 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 188 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 192 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 192 | 0) >> 2]);
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 228 | 0) >> 0] = (HEAPU8[($4_1 + 228 | 0) >> 0] | 0) & 1 | 0;
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 232 | 0) >> 2] = HEAP32[($4_1 + 232 | 0) >> 2] | 0;
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 76 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 76 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 80 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 80 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 84 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 84 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 88 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 88 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 92 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 92 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 96 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2]);
  $652((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 168 | 0 | 0, $4_1 + 168 | 0 | 0) | 0;
  $812((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 204 | 0 | 0, $4_1 + 204 | 0 | 0) | 0;
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 56 | 0) >> 2] = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
  $46_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $55_1 = HEAP32[($4_1 + 100 | 0) >> 2] | 0;
    break label$1;
   }
   $55_1 = $4_1;
  }
  $1055($46_1 | 0, $55_1 | 0);
  $1051(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  $58_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $58_1 | 0;
 }
 
 function $1066($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1045($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1067($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1068($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1069($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1070($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $1073(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1071($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1072($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $1073(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $1074($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $1074($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1073($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1074($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1075($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $1078(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1076($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1077($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP16[($4_1 + 6 | 0) >> 1] = HEAPU16[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 1] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $1078(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $1079($5_1 | 0, $35_1 + ($36_1 << 1 | 0) | 0 | 0, $4_1 + 6 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $1079($5_1 | 0, $45_1 + ($46_1 << 1 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1078($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1079($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP16[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 1] = HEAPU16[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 1] | 0;
  return;
 }
 
 function $1080() {
  $1038();
  return;
 }
 
 function $1081() {
  $1160(26400 | 0, 1560 | 0, 26616 | 0) | 0;
  $1797(224 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1082($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26400 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1083($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26400 | 0;
 }
 
 function $1084($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1764($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 10344 + 8 | 0;
  $502($5_1 + 64 | 0 | 0) | 0;
  HEAP8[($5_1 + 80 | 0) >> 0] = 0;
  HEAP8[($5_1 + 81 | 0) >> 0] = 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1085($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 64 | 0 | 0;
 }
 
 function $1086($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 80 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $1087($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 81 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $1088($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $8_1 = $1655(84 | 0, 2252 | 0, 64 | 0) | 0;
  FUNCTION_TABLE[225 | 0]($8_1, $712($4_1 | 0) | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $8_1;
  $1774($4_1 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  $1057((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 64 | 0 | 0, $4_1 + 64 | 0 | 0);
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 80 | 0) >> 0] = (HEAPU8[($4_1 + 80 | 0) >> 0] | 0) & 1 | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 81 | 0) >> 0] = (HEAPU8[($4_1 + 81 | 0) >> 0] | 0) & 1 | 0;
  $25_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $25_1 | 0;
 }
 
 function $1089($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 10344 + 8 | 0;
  $504($4_1 + 64 | 0 | 0) | 0;
  $1766($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1090($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1089($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1091() {
  $1081();
  return;
 }
 
 function $1092() {
  $1160(26412 | 0, 1427 | 0, 26604 | 0) | 0;
  $1797(230 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1093($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26412 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1094($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26412 | 0;
 }
 
 function $1095($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $72_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $6_1;
  $1757($6_1 | 0) | 0;
  HEAP32[$6_1 >> 2] = 10408 + 8 | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  $753($6_1 + 8 | 0 | 0) | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1283(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $1643($1112(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0;
  HEAPF32[($6_1 + 28 | 0) >> 2] = Math_fround($1115(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0));
  HEAPF32[($6_1 + 32 | 0) >> 2] = Math_fround($1116(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0));
  HEAPF32[($6_1 + 36 | 0) >> 2] = Math_fround($1117(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0));
  HEAPF32[($6_1 + 40 | 0) >> 2] = Math_fround($1118(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0));
  $502($6_1 + 44 | 0 | 0) | 0;
  $502($6_1 + 60 | 0 | 0) | 0;
  $502($6_1 + 76 | 0 | 0) | 0;
  $502($6_1 + 92 | 0 | 0) | 0;
  $502($6_1 + 108 | 0 | 0) | 0;
  $502($6_1 + 124 | 0 | 0) | 0;
  HEAP8[($6_1 + 140 | 0) >> 0] = 0;
  $951($6_1 + 8 | 0 | 0, $950($1111(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < ($950($1111(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($952($1111(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $1281(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $777(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
    $953($6_1 + 8 | 0 | 0, $5_1 + 4 | 0 | 0);
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF32[$5_1 >> 2] = Math_fround(0 | 0);
  $573($6_1 + 124 | 0 | 0, 10 | 0, $5_1 | 0);
  $72_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $72_1 | 0;
 }
 
 function $1096($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $14_1 = 0, $69_1 = 0, $139_1 = 0, $158_1 = 0, $386_1 = Math_fround(0), $176_1 = 0, $409_1 = Math_fround(0), $257_1 = 0, $259_1 = 0, $278_1 = 0, $279_1 = 0, $76_1 = 0, $92_1 = 0, $366_1 = Math_fround(0), $367_1 = Math_fround(0), $382_1 = Math_fround(0), $392_1 = Math_fround(0), $393_1 = Math_fround(0), $477_1 = Math_fround(0);
  $3_1 = global$0 - 208 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 204 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 204 | 0) >> 2] | 0;
  HEAP32[($3_1 + 200 | 0) >> 2] = $1637(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($3_1 + 200 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     $14_1 = HEAP32[($3_1 + 200 | 0) >> 2] | 0;
     if (($1162(FUNCTION_TABLE[HEAP32[((HEAP32[$14_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($14_1) | 0 | 0, 26400 | 0) | 0) & 1 | 0) {
      break label$2
     }
    }
    break label$1;
   }
   HEAP32[($3_1 + 196 | 0) >> 2] = HEAP32[($3_1 + 200 | 0) >> 2] | 0;
   HEAPF32[($3_1 + 192 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
   HEAPF32[($3_1 + 188 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
   HEAP8[($3_1 + 187 | 0) >> 0] = Math_fround(HEAPF32[($3_1 + 188 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0;
   HEAP8[($3_1 + 186 | 0) >> 0] = Math_fround(HEAPF32[($3_1 + 192 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0;
   label$4 : {
    if ((HEAPU8[($3_1 + 187 | 0) >> 0] | 0) & 1 | 0) {
     break label$4
    }
    if ((HEAPU8[($3_1 + 186 | 0) >> 0] | 0) & 1 | 0) {
     break label$4
    }
    break label$1;
   }
   HEAP32[($3_1 + 180 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   HEAP8[($3_1 + 179 | 0) >> 0] = (HEAP32[((HEAP32[($3_1 + 180 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0;
   HEAP32[($3_1 + 172 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 180 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0;
   HEAP8[($3_1 + 171 | 0) >> 0] = (HEAP32[($3_1 + 172 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0;
   HEAP8[($3_1 + 170 | 0) >> 0] = (HEAP32[($3_1 + 172 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0;
   HEAP32[($3_1 + 164 | 0) >> 2] = $956($4_1 + 8 | 0 | 0) | 0;
   label$5 : {
    label$6 : {
     if (!((HEAPU8[($3_1 + 171 | 0) >> 0] | 0) & 1 | 0)) {
      break label$6
     }
     $69_1 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
     break label$5;
    }
    $69_1 = (HEAP32[($3_1 + 164 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP32[($3_1 + 160 | 0) >> 2] = $69_1;
   $76_1 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
   HEAPF32[($3_1 + 156 | 0) >> 2] = Math_fround(0 | 0);
   $573($4_1 + 44 | 0 | 0, $76_1 | 0, $3_1 + 156 | 0 | 0);
   HEAPF32[($3_1 + 152 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
   label$7 : {
    label$8 : {
     label$9 : {
      if ((HEAPU8[($3_1 + 170 | 0) >> 0] | 0) & 1 | 0) {
       break label$9
      }
      if ((HEAPU8[($3_1 + 179 | 0) >> 0] | 0) & 1 | 0) {
       break label$8
      }
     }
     label$10 : {
      if (!((HEAPU8[($3_1 + 170 | 0) >> 0] | 0) & 1 | 0)) {
       break label$10
      }
      $92_1 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
      HEAPF32[($3_1 + 148 | 0) >> 2] = Math_fround(0 | 0);
      $573($4_1 + 108 | 0 | 0, $92_1 | 0, $3_1 + 148 | 0 | 0);
     }
     HEAP8[($3_1 + 147 | 0) >> 0] = (HEAP32[((HEAP32[($3_1 + 180 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0;
     HEAP32[($3_1 + 140 | 0) >> 2] = 0;
     HEAP32[($3_1 + 136 | 0) >> 2] = (HEAP32[($3_1 + 160 | 0) >> 2] | 0) - 1 | 0;
     label$11 : {
      label$12 : while (1) {
       if (!((HEAP32[($3_1 + 140 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 136 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$11
       }
       HEAP32[($3_1 + 132 | 0) >> 2] = HEAP32[($139($4_1 + 8 | 0 | 0, HEAP32[($3_1 + 140 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
       HEAP32[($3_1 + 128 | 0) >> 2] = HEAP32[($3_1 + 132 | 0) >> 2] | 0;
       HEAPF32[($3_1 + 124 | 0) >> 2] = Math_fround($779(HEAP32[((HEAP32[($3_1 + 128 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0));
       label$13 : {
        label$14 : {
         if (!(Math_fround(HEAPF32[($3_1 + 124 | 0) >> 2]) < Math_fround(9.999999747378752e-06) & 1 | 0)) {
          break label$14
         }
         label$15 : {
          if (!((HEAPU8[($3_1 + 170 | 0) >> 0] | 0) & 1 | 0)) {
           break label$15
          }
          HEAPF32[($15($4_1 + 108 | 0 | 0, HEAP32[($3_1 + 140 | 0) >> 2] | 0 | 0) | 0) >> 2] = Math_fround(0 | 0);
         }
         $139_1 = (HEAP32[($3_1 + 140 | 0) >> 2] | 0) + 1 | 0;
         HEAP32[($3_1 + 140 | 0) >> 2] = $139_1;
         HEAPF32[($15($4_1 + 44 | 0 | 0, $139_1 | 0) | 0) >> 2] = Math_fround(0 | 0);
         break label$13;
        }
        label$16 : {
         label$17 : {
          if (!((HEAPU8[($3_1 + 179 | 0) >> 0] | 0) & 1 | 0)) {
           break label$17
          }
          label$18 : {
           if (!((HEAPU8[($3_1 + 170 | 0) >> 0] | 0) & 1 | 0)) {
            break label$18
           }
           HEAPF32[($3_1 + 120 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 124 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($3_1 + 128 | 0) >> 2] | 0) + 92 | 0) >> 2]));
           HEAPF32[($3_1 + 116 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 124 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($3_1 + 128 | 0) >> 2] | 0) + 104 | 0) >> 2]));
           HEAPF32[($3_1 + 112 | 0) >> 2] = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 120 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 120 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2]))))));
           $366_1 = Math_fround(HEAPF32[($3_1 + 112 | 0) >> 2]);
           HEAPF32[($15($4_1 + 108 | 0 | 0, HEAP32[($3_1 + 140 | 0) >> 2] | 0 | 0) | 0) >> 2] = $366_1;
          }
          $367_1 = Math_fround(HEAPF32[($3_1 + 152 | 0) >> 2]);
          $158_1 = (HEAP32[($3_1 + 140 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[($3_1 + 140 | 0) >> 2] = $158_1;
          HEAPF32[($15($4_1 + 44 | 0 | 0, $158_1 | 0) | 0) >> 2] = $367_1;
          break label$16;
         }
         HEAPF32[($3_1 + 108 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 124 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($3_1 + 128 | 0) >> 2] | 0) + 92 | 0) >> 2]));
         HEAPF32[($3_1 + 104 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 124 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($3_1 + 128 | 0) >> 2] | 0) + 104 | 0) >> 2]));
         HEAPF32[($3_1 + 100 | 0) >> 2] = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 108 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 108 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 104 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 104 | 0) >> 2]))))));
         label$19 : {
          if (!((HEAPU8[($3_1 + 170 | 0) >> 0] | 0) & 1 | 0)) {
           break label$19
          }
          $382_1 = Math_fround(HEAPF32[($3_1 + 100 | 0) >> 2]);
          HEAPF32[($15($4_1 + 108 | 0 | 0, HEAP32[($3_1 + 140 | 0) >> 2] | 0 | 0) | 0) >> 2] = $382_1;
         }
         label$20 : {
          label$21 : {
           if (!((HEAPU8[($3_1 + 147 | 0) >> 0] | 0) & 1 | 0)) {
            break label$21
           }
           $386_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 124 | 0) >> 2]) + Math_fround(HEAPF32[($3_1 + 152 | 0) >> 2]));
           break label$20;
          }
          $386_1 = Math_fround(HEAPF32[($3_1 + 152 | 0) >> 2]);
         }
         $392_1 = Math_fround(Math_fround($386_1 * Math_fround(HEAPF32[($3_1 + 100 | 0) >> 2])) / Math_fround(HEAPF32[($3_1 + 124 | 0) >> 2]));
         $176_1 = (HEAP32[($3_1 + 140 | 0) >> 2] | 0) + 1 | 0;
         HEAP32[($3_1 + 140 | 0) >> 2] = $176_1;
         HEAPF32[($15($4_1 + 44 | 0 | 0, $176_1 | 0) | 0) >> 2] = $392_1;
        }
       }
       continue label$12;
      };
     }
     break label$7;
    }
    HEAP32[($3_1 + 96 | 0) >> 2] = 1;
    label$22 : {
     label$23 : while (1) {
      if (!((HEAP32[($3_1 + 96 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 160 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$22
      }
      $393_1 = Math_fround(HEAPF32[($3_1 + 152 | 0) >> 2]);
      HEAPF32[($15($4_1 + 44 | 0 | 0, HEAP32[($3_1 + 96 | 0) >> 2] | 0 | 0) | 0) >> 2] = $393_1;
      HEAP32[($3_1 + 96 | 0) >> 2] = (HEAP32[($3_1 + 96 | 0) >> 2] | 0) + 1 | 0;
      continue label$23;
     };
    }
   }
   HEAP32[($3_1 + 92 | 0) >> 2] = $1097($4_1 | 0, HEAP32[($3_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 160 | 0) >> 2] | 0 | 0, (HEAPU8[($3_1 + 171 | 0) >> 0] | 0) & 1 | 0 | 0, ($1113(HEAP32[($3_1 + 180 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0) & 1 | 0 | 0, (HEAPU8[($3_1 + 179 | 0) >> 0] | 0) & 1 | 0 | 0) | 0;
   HEAPF32[($3_1 + 88 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0, 0 | 0) | 0) >> 2]);
   HEAPF32[($3_1 + 84 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0, 1 | 0) | 0) >> 2]);
   HEAPF32[($3_1 + 80 | 0) >> 2] = Math_fround($1114(HEAP32[($3_1 + 180 | 0) >> 2] | 0 | 0));
   label$24 : {
    label$25 : {
     if (!(Math_fround(HEAPF32[($3_1 + 80 | 0) >> 2]) == Math_fround(0 | 0) & 1 | 0)) {
      break label$25
     }
     HEAP8[($3_1 + 79 | 0) >> 0] = (HEAP32[($3_1 + 172 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0;
     break label$24;
    }
    HEAP8[($3_1 + 79 | 0) >> 0] = 0;
    HEAP32[($3_1 + 72 | 0) >> 2] = $1634(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    label$26 : {
     label$27 : {
      if (!(Math_fround(Math_fround(Math_fround($763(HEAP32[($3_1 + 72 | 0) >> 2] | 0 | 0)) * Math_fround($766(HEAP32[($3_1 + 72 | 0) >> 2] | 0 | 0))) + Math_fround(-Math_fround(Math_fround($764(HEAP32[($3_1 + 72 | 0) >> 2] | 0 | 0)) * Math_fround($765(HEAP32[($3_1 + 72 | 0) >> 2] | 0 | 0))))) > Math_fround(0 | 0) & 1 | 0)) {
       break label$27
      }
      $409_1 = Math_fround(HEAPF32[(0 + 10188 | 0) >> 2]);
      break label$26;
     }
     $409_1 = Math_fround(-Math_fround(HEAPF32[(0 + 10188 | 0) >> 2]));
    }
    HEAPF32[($3_1 + 80 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 80 | 0) >> 2]) * $409_1);
   }
   HEAP32[($3_1 + 68 | 0) >> 2] = 0;
   HEAP32[($3_1 + 64 | 0) >> 2] = 3;
   label$28 : while (1) {
    if (!((HEAP32[($3_1 + 68 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 164 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 60 | 0) >> 2] = HEAP32[($139($4_1 + 8 | 0 | 0, HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($3_1 + 56 | 0) >> 2] = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
    $257_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
    HEAPF32[($257_1 + 100 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 100 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 188 | 0) >> 2])) + Math_fround(HEAPF32[($257_1 + 100 | 0) >> 2]));
    $259_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
    HEAPF32[($259_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 84 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 112 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 188 | 0) >> 2])) + Math_fround(HEAPF32[($259_1 + 112 | 0) >> 2]));
    HEAPF32[($3_1 + 52 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 64 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($3_1 + 48 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
    HEAPF32[($3_1 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2]));
    HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 84 | 0) >> 2]));
    label$29 : {
     if (!((HEAPU8[($3_1 + 170 | 0) >> 0] | 0) & 1 | 0)) {
      break label$29
     }
     HEAPF32[($3_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[($15($4_1 + 108 | 0 | 0, HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) | 0) >> 2]);
     label$30 : {
      if (!(Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]) >= Math_fround(9.999999747378752e-06) & 1 | 0)) {
       break label$30
      }
      HEAPF32[($3_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2])))))) / Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2])) - Math_fround(1.0)) * Math_fround(HEAPF32[($3_1 + 192 | 0) >> 2])) + Math_fround(1.0));
      $278_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
      HEAPF32[($278_1 + 92 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($278_1 + 92 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]));
      $279_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
      HEAPF32[($279_1 + 104 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($279_1 + 104 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]));
     }
    }
    HEAPF32[($3_1 + 88 | 0) >> 2] = Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]);
    HEAPF32[($3_1 + 84 | 0) >> 2] = Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]);
    label$31 : {
     if (!((HEAPU8[($3_1 + 186 | 0) >> 0] | 0) & 1 | 0)) {
      break label$31
     }
     HEAPF32[($3_1 + 28 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 92 | 0) >> 2]);
     HEAPF32[($3_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 96 | 0) >> 2]);
     HEAPF32[($3_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 104 | 0) >> 2]);
     HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 108 | 0) >> 2]);
     label$32 : {
      label$33 : {
       if (!((HEAPU8[($3_1 + 171 | 0) >> 0] | 0) & 1 | 0)) {
        break label$33
       }
       HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 64 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]);
       break label$32;
      }
      label$34 : {
       label$35 : {
        if (!(Math_fround(HEAPF32[($15($4_1 + 44 | 0 | 0, (HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]) < Math_fround(9.999999747378752e-06) & 1 | 0)) {
         break label$35
        }
        HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2]);
        break label$34;
       }
       HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround($1019(Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]))));
      }
     }
     $477_1 = Math_fround($1019(Math_fround(Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]))));
     HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) - $477_1);
     label$36 : {
      label$37 : {
       if (!((HEAPU8[($3_1 + 79 | 0) >> 0] | 0) & 1 | 0)) {
        break label$37
       }
       HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround($1021(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
       HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($1023(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
       HEAPF32[$3_1 >> 2] = Math_fround($779(HEAP32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0));
       HEAPF32[($3_1 + 88 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$3_1 >> 2]) * Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]))))) + Math_fround(-Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]))) * Math_fround(HEAPF32[($3_1 + 192 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2]));
       HEAPF32[($3_1 + 84 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$3_1 >> 2]) * Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2])))) + Math_fround(-Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]))) * Math_fround(HEAPF32[($3_1 + 192 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 84 | 0) >> 2]));
       break label$36;
      }
      HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) + Math_fround(HEAPF32[($3_1 + 80 | 0) >> 2]));
     }
     label$38 : {
      label$39 : {
       if (!(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) > Math_fround(HEAPF32[(0 + 10180 | 0) >> 2]) & 1 | 0)) {
        break label$39
       }
       HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) - Math_fround(HEAPF32[(0 + 10184 | 0) >> 2]));
       break label$38;
      }
      label$40 : {
       if (!(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) < Math_fround(-Math_fround(HEAPF32[(0 + 10180 | 0) >> 2])) & 1 | 0)) {
        break label$40
       }
       HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) + Math_fround(HEAPF32[(0 + 10184 | 0) >> 2]));
      }
     }
     HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 192 | 0) >> 2]));
     HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround($1021(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
     HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($1023(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
     HEAPF32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 92 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]))));
     HEAPF32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 96 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]))));
     HEAPF32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 104 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2])));
     HEAPF32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 108 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2])));
    }
    HEAP8[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 88 | 0) >> 0] = 0;
    HEAP32[($3_1 + 68 | 0) >> 2] = (HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($3_1 + 64 | 0) >> 2] = (HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 3 | 0;
    continue label$28;
   };
  }
  global$0 = $3_1 + 208 | 0;
  return;
 }
 
 function $1097($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $12_1 = 0, $73_1 = 0, $120_1 = 0, $197_1 = 0, $240_1 = 0, $249_1 = 0, $280_1 = 0, $289_1 = 0, $322_1 = 0, $680_1 = Math_fround(0), $689_1 = Math_fround(0), $720_1 = Math_fround(0), $724_1 = Math_fround(0), $414_1 = 0, $878_1 = Math_fround(0), $887_1 = Math_fround(0), $918_1 = Math_fround(0), $922_1 = Math_fround(0), $577_1 = 0, $586_1 = 0, $20_1 = 0, $608_1 = Math_fround(0), $77_1 = 0, $647_1 = Math_fround(0), $648_1 = Math_fround(0), $649_1 = Math_fround(0), $650_1 = Math_fround(0), $651_1 = Math_fround(0), $652_1 = Math_fround(0), $653_1 = Math_fround(0), $654_1 = Math_fround(0), $655_1 = Math_fround(0), $234_1 = 0, $235_1 = 0, $268_1 = 0, $269_1 = 0, $659_1 = Math_fround(0), $660_1 = Math_fround(0), $312_1 = 0, $313_1 = 0, $326_1 = 0, $757_1 = Math_fround(0), $779_1 = Math_fround(0), $795_1 = Math_fround(0), $815_1 = Math_fround(0), $818_1 = Math_fround(0), $826_1 = Math_fround(0), $829_1 = Math_fround(0), $956_1 = Math_fround(0), $976_1 = Math_fround(0), $979_1 = Math_fround(0), $993_1 = Math_fround(0), $996_1 = Math_fround(0), $1014_1 = Math_fround(0), $1017_1 = Math_fround(0), $1039_1 = Math_fround(0), $1040_1 = Math_fround(0), $1041_1 = Math_fround(0), $1042_1 = Math_fround(0), $1043_1 = Math_fround(0), $1044_1 = Math_fround(0), $1045_1 = Math_fround(0), $1046_1 = Math_fround(0), $1047_1 = Math_fround(0), $571_1 = 0, $572_1 = 0, $599_1 = 0;
  $8_1 = global$0 - 240 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 232 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 228 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 224 | 0) >> 2] = $2_1;
  HEAP8[($8_1 + 223 | 0) >> 0] = $3_1;
  HEAP8[($8_1 + 222 | 0) >> 0] = $4_1;
  HEAP8[($8_1 + 221 | 0) >> 0] = $5_1;
  $12_1 = HEAP32[($8_1 + 232 | 0) >> 2] | 0;
  HEAP32[($8_1 + 216 | 0) >> 2] = HEAP32[($12_1 + 24 | 0) >> 2] | 0;
  HEAPF32[($8_1 + 212 | 0) >> 2] = Math_fround(HEAPF32[($12_1 + 28 | 0) >> 2]);
  $20_1 = Math_imul(HEAP32[($8_1 + 224 | 0) >> 2] | 0, 3) + 2 | 0;
  HEAPF32[($8_1 + 208 | 0) >> 2] = Math_fround(0 | 0);
  $573($12_1 + 60 | 0 | 0, $20_1 | 0, $8_1 + 208 | 0 | 0);
  HEAP32[($8_1 + 204 | 0) >> 2] = $12_1 + 60 | 0;
  HEAP32[($8_1 + 200 | 0) >> 2] = $12_1 + 76 | 0;
  HEAP8[($8_1 + 199 | 0) >> 0] = ($1086(HEAP32[($8_1 + 228 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  HEAP32[($8_1 + 192 | 0) >> 2] = $1772(HEAP32[($8_1 + 228 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($8_1 + 188 | 0) >> 2] = (HEAP32[($8_1 + 192 | 0) >> 2] | 0 | 0) / (6 | 0) | 0;
  HEAP32[($8_1 + 184 | 0) >> 2] = -1;
  label$1 : {
   label$2 : {
    if (($1087(HEAP32[($8_1 + 228 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($8_1 + 176 | 0) >> 2] = $1085(HEAP32[($8_1 + 228 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($8_1 + 188 | 0) >> 2] = (HEAP32[($8_1 + 188 | 0) >> 2] | 0) - ((HEAPU8[($8_1 + 199 | 0) >> 0] | 0) & 1 | 0 ? 1 : 2) | 0;
    HEAPF32[($8_1 + 180 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 188 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    label$3 : {
     if (!((HEAPU8[($8_1 + 222 | 0) >> 0] | 0) & 1 | 0)) {
      break label$3
     }
     HEAPF32[($8_1 + 212 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 212 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]));
    }
    label$4 : {
     if (!((HEAPU8[($8_1 + 221 | 0) >> 0] | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($8_1 + 172 | 0) >> 2] = 1;
     label$5 : {
      label$6 : while (1) {
       if (!((HEAP32[($8_1 + 172 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$5
       }
       $608_1 = Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]);
       $73_1 = $15($12_1 + 44 | 0 | 0, HEAP32[($8_1 + 172 | 0) >> 2] | 0 | 0) | 0;
       HEAPF32[$73_1 >> 2] = Math_fround(Math_fround(HEAPF32[$73_1 >> 2]) * $608_1);
       HEAP32[($8_1 + 172 | 0) >> 2] = (HEAP32[($8_1 + 172 | 0) >> 2] | 0) + 1 | 0;
       continue label$6;
      };
     }
    }
    $77_1 = HEAP32[($8_1 + 200 | 0) >> 2] | 0;
    HEAPF32[($8_1 + 168 | 0) >> 2] = Math_fround(0 | 0);
    $573($77_1 | 0, 8 | 0, $8_1 + 168 | 0 | 0);
    HEAP32[($8_1 + 164 | 0) >> 2] = 0;
    HEAP32[($8_1 + 160 | 0) >> 2] = 0;
    HEAP32[($8_1 + 156 | 0) >> 2] = 0;
    label$7 : {
     label$8 : while (1) {
      if (!((HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAPF32[($8_1 + 152 | 0) >> 2] = Math_fround(HEAPF32[($15($12_1 + 44 | 0 | 0, HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) | 0) >> 2]);
      HEAPF32[($8_1 + 212 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 212 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 152 | 0) >> 2]));
      HEAPF32[($8_1 + 148 | 0) >> 2] = Math_fround(HEAPF32[($8_1 + 212 | 0) >> 2]);
      label$9 : {
       label$10 : {
        label$11 : {
         if (!((HEAPU8[($8_1 + 199 | 0) >> 0] | 0) & 1 | 0)) {
          break label$11
         }
         HEAPF32[($8_1 + 148 | 0) >> 2] = Math_fround($1017(Math_fround(Math_fround(HEAPF32[($8_1 + 148 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]))));
         label$12 : {
          if (!(Math_fround(HEAPF32[($8_1 + 148 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
           break label$12
          }
          HEAPF32[($8_1 + 148 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 148 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]));
         }
         HEAP32[($8_1 + 156 | 0) >> 2] = 0;
         break label$10;
        }
        label$13 : {
         if (!(Math_fround(HEAPF32[($8_1 + 148 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
          break label$13
         }
         label$14 : {
          if (!((HEAP32[($8_1 + 184 | 0) >> 2] | 0 | 0) != (-2 | 0) & 1 | 0)) {
           break label$14
          }
          HEAP32[($8_1 + 184 | 0) >> 2] = -2;
          $120_1 = 2;
          $1768(HEAP32[($8_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 216 | 0) >> 2] | 0 | 0, $120_1 | 0, 4 | 0, HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0, $120_1 | 0);
         }
         $1098(Math_fround(Math_fround(HEAPF32[($8_1 + 148 | 0) >> 2])), HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($8_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0);
         break label$9;
        }
        label$15 : {
         if (!(Math_fround(HEAPF32[($8_1 + 148 | 0) >> 2]) > Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]) & 1 | 0)) {
          break label$15
         }
         label$16 : {
          if (!((HEAP32[($8_1 + 184 | 0) >> 2] | 0 | 0) != (-3 | 0) & 1 | 0)) {
           break label$16
          }
          HEAP32[($8_1 + 184 | 0) >> 2] = -3;
          $1768(HEAP32[($8_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 216 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 192 | 0) >> 2] | 0) - 6 | 0 | 0, 4 | 0, HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0, 2 | 0);
         }
         $1099(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 148 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]))), HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($8_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0);
         break label$9;
        }
       }
       label$17 : {
        label$18 : while (1) {
         HEAPF32[($8_1 + 144 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 156 | 0) >> 2] | 0 | 0) | 0) >> 2]);
         label$19 : {
          label$20 : {
           if (!(Math_fround(HEAPF32[($8_1 + 148 | 0) >> 2]) > Math_fround(HEAPF32[($8_1 + 144 | 0) >> 2]) & 1 | 0)) {
            break label$20
           }
           break label$19;
          }
          label$21 : {
           label$22 : {
            if (HEAP32[($8_1 + 156 | 0) >> 2] | 0) {
             break label$22
            }
            HEAPF32[($8_1 + 148 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 148 | 0) >> 2]) / Math_fround(HEAPF32[($8_1 + 144 | 0) >> 2]));
            break label$21;
           }
           HEAPF32[($8_1 + 140 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 176 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 156 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]);
           HEAPF32[($8_1 + 148 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 148 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 140 | 0) >> 2])) / Math_fround(Math_fround(HEAPF32[($8_1 + 144 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 140 | 0) >> 2])));
          }
          break label$17;
         }
         HEAP32[($8_1 + 156 | 0) >> 2] = (HEAP32[($8_1 + 156 | 0) >> 2] | 0) + 1 | 0;
         continue label$18;
        };
       }
       label$23 : {
        if (!((HEAP32[($8_1 + 156 | 0) >> 2] | 0 | 0) != (HEAP32[($8_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$23
        }
        HEAP32[($8_1 + 184 | 0) >> 2] = HEAP32[($8_1 + 156 | 0) >> 2] | 0;
        label$24 : {
         label$25 : {
          if (!((HEAPU8[($8_1 + 199 | 0) >> 0] | 0) & 1 | 0)) {
           break label$25
          }
          if (!((HEAP32[($8_1 + 156 | 0) >> 2] | 0 | 0) == (HEAP32[($8_1 + 188 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$25
          }
          $1768(HEAP32[($8_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 216 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 192 | 0) >> 2] | 0) - 4 | 0 | 0, 4 | 0, HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0, 2 | 0);
          $197_1 = 4;
          $1768(HEAP32[($8_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 216 | 0) >> 2] | 0 | 0, 0 | 0, $197_1 | 0, HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, $197_1 | 0, 2 | 0);
          break label$24;
         }
         $1768(HEAP32[($8_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 216 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($8_1 + 156 | 0) >> 2] | 0, 6) + 2 | 0 | 0, 8 | 0, HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0, 2 | 0);
        }
       }
       $647_1 = Math_fround(HEAPF32[($8_1 + 148 | 0) >> 2]);
       $648_1 = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0) | 0) >> 2]);
       $649_1 = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 1 | 0) | 0) >> 2]);
       $650_1 = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 2 | 0) | 0) >> 2]);
       $651_1 = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 3 | 0) | 0) >> 2]);
       $652_1 = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 4 | 0) | 0) >> 2]);
       $653_1 = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 5 | 0) | 0) >> 2]);
       $654_1 = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 6 | 0) | 0) >> 2]);
       $655_1 = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 7 | 0) | 0) >> 2]);
       $234_1 = HEAP32[($8_1 + 204 | 0) >> 2] | 0;
       $235_1 = HEAP32[($8_1 + 160 | 0) >> 2] | 0;
       $240_1 = 1;
       label$26 : {
        if ((HEAPU8[($8_1 + 223 | 0) >> 0] | 0) & 1 | 0) {
         break label$26
        }
        $249_1 = 0;
        label$27 : {
         if (!((HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
          break label$27
         }
         $249_1 = Math_fround(HEAPF32[($8_1 + 152 | 0) >> 2]) < Math_fround(9.999999747378752e-06);
        }
        $240_1 = $249_1;
       }
       $1100(Math_fround($647_1), Math_fround($648_1), Math_fround($649_1), Math_fround($650_1), Math_fround($651_1), Math_fround($652_1), Math_fround($653_1), Math_fround($654_1), Math_fround($655_1), $234_1 | 0, $235_1 | 0, $240_1 & 1 | 0 | 0);
      }
      HEAP32[($8_1 + 164 | 0) >> 2] = (HEAP32[($8_1 + 164 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($8_1 + 160 | 0) >> 2] = (HEAP32[($8_1 + 160 | 0) >> 2] | 0) + 3 | 0;
      continue label$8;
     };
    }
    HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 204 | 0) >> 2] | 0;
    break label$1;
   }
   label$28 : {
    label$29 : {
     if (!((HEAPU8[($8_1 + 199 | 0) >> 0] | 0) & 1 | 0)) {
      break label$29
     }
     HEAP32[($8_1 + 192 | 0) >> 2] = (HEAP32[($8_1 + 192 | 0) >> 2] | 0) + 2 | 0;
     $268_1 = HEAP32[($8_1 + 200 | 0) >> 2] | 0;
     $269_1 = HEAP32[($8_1 + 192 | 0) >> 2] | 0;
     HEAPF32[($8_1 + 136 | 0) >> 2] = Math_fround(0 | 0);
     $573($268_1 | 0, $269_1 | 0, $8_1 + 136 | 0 | 0);
     $280_1 = 2;
     $1768(HEAP32[($8_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 216 | 0) >> 2] | 0 | 0, $280_1 | 0, (HEAP32[($8_1 + 192 | 0) >> 2] | 0) - 4 | 0 | 0, HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0, $280_1 | 0);
     $289_1 = 2;
     $1768(HEAP32[($8_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 216 | 0) >> 2] | 0 | 0, 0 | 0, $289_1 | 0, HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 192 | 0) >> 2] | 0) - 4 | 0 | 0, $289_1 | 0);
     $659_1 = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0) | 0) >> 2]);
     HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 192 | 0) >> 2] | 0) - 2 | 0 | 0) | 0) >> 2] = $659_1;
     $660_1 = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 1 | 0) | 0) >> 2]);
     HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 192 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2] = $660_1;
     break label$28;
    }
    HEAP32[($8_1 + 188 | 0) >> 2] = (HEAP32[($8_1 + 188 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($8_1 + 192 | 0) >> 2] = (HEAP32[($8_1 + 192 | 0) >> 2] | 0) - 4 | 0;
    $312_1 = HEAP32[($8_1 + 200 | 0) >> 2] | 0;
    $313_1 = HEAP32[($8_1 + 192 | 0) >> 2] | 0;
    HEAPF32[($8_1 + 132 | 0) >> 2] = Math_fround(0 | 0);
    $573($312_1 | 0, $313_1 | 0, $8_1 + 132 | 0 | 0);
    $322_1 = 2;
    $1768(HEAP32[($8_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 216 | 0) >> 2] | 0 | 0, $322_1 | 0, HEAP32[($8_1 + 192 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0, $322_1 | 0);
   }
   $326_1 = HEAP32[($8_1 + 188 | 0) >> 2] | 0;
   HEAPF32[($8_1 + 128 | 0) >> 2] = Math_fround(0 | 0);
   $573($12_1 + 92 | 0 | 0, $326_1 | 0, $8_1 + 128 | 0 | 0);
   HEAPF32[($8_1 + 180 | 0) >> 2] = Math_fround(0 | 0);
   HEAPF32[($8_1 + 124 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0) | 0) >> 2]);
   HEAPF32[($8_1 + 120 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 1 | 0) | 0) >> 2]);
   HEAPF32[($8_1 + 116 | 0) >> 2] = Math_fround(0 | 0);
   HEAPF32[($8_1 + 112 | 0) >> 2] = Math_fround(0 | 0);
   HEAPF32[($8_1 + 108 | 0) >> 2] = Math_fround(0 | 0);
   HEAPF32[($8_1 + 104 | 0) >> 2] = Math_fround(0 | 0);
   HEAPF32[($8_1 + 100 | 0) >> 2] = Math_fround(0 | 0);
   HEAPF32[($8_1 + 96 | 0) >> 2] = Math_fround(0 | 0);
   HEAP32[($8_1 + 60 | 0) >> 2] = 0;
   HEAP32[($8_1 + 56 | 0) >> 2] = 2;
   label$30 : {
    label$31 : while (1) {
     if (!((HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 188 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$30
     }
     HEAPF32[($8_1 + 116 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 2]);
     HEAPF32[($8_1 + 112 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 56 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
     HEAPF32[($8_1 + 108 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 56 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2]);
     HEAPF32[($8_1 + 104 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 56 | 0) >> 2] | 0) + 3 | 0 | 0) | 0) >> 2]);
     HEAPF32[($8_1 + 100 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 56 | 0) >> 2] | 0) + 4 | 0 | 0) | 0) >> 2]);
     HEAPF32[($8_1 + 96 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 56 | 0) >> 2] | 0) + 5 | 0 | 0) | 0) >> 2]);
     $680_1 = Math_fround(-Math_fround(HEAPF32[($8_1 + 116 | 0) >> 2]));
     HEAPF32[($8_1 + 92 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($680_1 + $680_1) + Math_fround(HEAPF32[($8_1 + 124 | 0) >> 2])) + Math_fround(HEAPF32[($8_1 + 108 | 0) >> 2])) * Math_fround(.1875));
     $689_1 = Math_fround(-Math_fround(HEAPF32[($8_1 + 112 | 0) >> 2]));
     HEAPF32[($8_1 + 88 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($689_1 + $689_1) + Math_fround(HEAPF32[($8_1 + 120 | 0) >> 2])) + Math_fround(HEAPF32[($8_1 + 104 | 0) >> 2])) * Math_fround(.1875));
     HEAPF32[($8_1 + 84 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 116 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 108 | 0) >> 2])) * Math_fround(3.0)) + Math_fround(-Math_fround(HEAPF32[($8_1 + 124 | 0) >> 2]))) + Math_fround(HEAPF32[($8_1 + 100 | 0) >> 2])) * Math_fround(.09375));
     HEAPF32[($8_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 112 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 104 | 0) >> 2])) * Math_fround(3.0)) + Math_fround(-Math_fround(HEAPF32[($8_1 + 120 | 0) >> 2]))) + Math_fround(HEAPF32[($8_1 + 96 | 0) >> 2])) * Math_fround(.09375));
     $720_1 = Math_fround(HEAPF32[($8_1 + 92 | 0) >> 2]);
     HEAPF32[($8_1 + 76 | 0) >> 2] = Math_fround(Math_fround($720_1 + $720_1) + Math_fround(HEAPF32[($8_1 + 84 | 0) >> 2]));
     $724_1 = Math_fround(HEAPF32[($8_1 + 88 | 0) >> 2]);
     HEAPF32[($8_1 + 72 | 0) >> 2] = Math_fround(Math_fround($724_1 + $724_1) + Math_fround(HEAPF32[($8_1 + 80 | 0) >> 2]));
     HEAPF32[($8_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 84 | 0) >> 2]) * Math_fround(.1666666716337204)) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 116 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 124 | 0) >> 2])) * Math_fround(.75)) + Math_fround(HEAPF32[($8_1 + 92 | 0) >> 2])));
     HEAPF32[($8_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 80 | 0) >> 2]) * Math_fround(.1666666716337204)) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 112 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 120 | 0) >> 2])) * Math_fround(.75)) + Math_fround(HEAPF32[($8_1 + 88 | 0) >> 2])));
     $757_1 = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]))))));
     HEAPF32[($8_1 + 180 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]) + $757_1);
     HEAPF32[($8_1 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 76 | 0) >> 2]));
     HEAPF32[($8_1 + 64 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 72 | 0) >> 2]));
     HEAPF32[($8_1 + 76 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 76 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 84 | 0) >> 2]));
     HEAPF32[($8_1 + 72 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 72 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 80 | 0) >> 2]));
     $779_1 = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]))))));
     HEAPF32[($8_1 + 180 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]) + $779_1);
     HEAPF32[($8_1 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 76 | 0) >> 2]));
     HEAPF32[($8_1 + 64 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 72 | 0) >> 2]));
     $795_1 = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]))))));
     HEAPF32[($8_1 + 180 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]) + $795_1);
     HEAPF32[($8_1 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($8_1 + 76 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 84 | 0) >> 2])));
     HEAPF32[($8_1 + 64 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($8_1 + 72 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 80 | 0) >> 2])));
     $815_1 = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]))))));
     HEAPF32[($8_1 + 180 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]) + $815_1);
     $818_1 = Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]);
     HEAPF32[($15($12_1 + 92 | 0 | 0, HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0) | 0) >> 2] = $818_1;
     HEAPF32[($8_1 + 124 | 0) >> 2] = Math_fround(HEAPF32[($8_1 + 100 | 0) >> 2]);
     HEAPF32[($8_1 + 120 | 0) >> 2] = Math_fround(HEAPF32[($8_1 + 96 | 0) >> 2]);
     HEAP32[($8_1 + 60 | 0) >> 2] = (HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($8_1 + 56 | 0) >> 2] = (HEAP32[($8_1 + 56 | 0) >> 2] | 0) + 6 | 0;
     continue label$31;
    };
   }
   label$32 : {
    label$33 : {
     if (!((HEAPU8[($8_1 + 222 | 0) >> 0] | 0) & 1 | 0)) {
      break label$33
     }
     HEAPF32[($8_1 + 212 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 212 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]));
     break label$32;
    }
    $826_1 = Math_fround(Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]) / Math_fround(HEAPF32[($15($1085(HEAP32[($8_1 + 228 | 0) >> 2] | 0 | 0) | 0 | 0, (HEAP32[($8_1 + 188 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]));
    HEAPF32[($8_1 + 212 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 212 | 0) >> 2]) * $826_1);
   }
   label$34 : {
    if (!((HEAPU8[($8_1 + 221 | 0) >> 0] | 0) & 1 | 0)) {
     break label$34
    }
    HEAP32[($8_1 + 52 | 0) >> 2] = 1;
    label$35 : {
     label$36 : while (1) {
      if (!((HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$35
      }
      $829_1 = Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]);
      $414_1 = $15($12_1 + 44 | 0 | 0, HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) | 0;
      HEAPF32[$414_1 >> 2] = Math_fround(Math_fround(HEAPF32[$414_1 >> 2]) * $829_1);
      HEAP32[($8_1 + 52 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) + 1 | 0;
      continue label$36;
     };
    }
   }
   HEAPF32[($8_1 + 48 | 0) >> 2] = Math_fround(0 | 0);
   HEAP32[($8_1 + 44 | 0) >> 2] = 0;
   HEAP32[($8_1 + 40 | 0) >> 2] = 0;
   HEAP32[($8_1 + 36 | 0) >> 2] = 0;
   HEAP32[($8_1 + 32 | 0) >> 2] = 0;
   label$37 : {
    label$38 : while (1) {
     if (!((HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$37
     }
     HEAPF32[($8_1 + 28 | 0) >> 2] = Math_fround(HEAPF32[($15($12_1 + 44 | 0 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0) | 0) >> 2]);
     HEAPF32[($8_1 + 212 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 212 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 28 | 0) >> 2]));
     HEAPF32[($8_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[($8_1 + 212 | 0) >> 2]);
     label$39 : {
      label$40 : {
       label$41 : {
        if (!((HEAPU8[($8_1 + 199 | 0) >> 0] | 0) & 1 | 0)) {
         break label$41
        }
        HEAPF32[($8_1 + 24 | 0) >> 2] = Math_fround($1017(Math_fround(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]))));
        label$42 : {
         if (!(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
          break label$42
         }
         HEAPF32[($8_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]));
        }
        HEAP32[($8_1 + 36 | 0) >> 2] = 0;
        break label$40;
       }
       label$43 : {
        if (!(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
         break label$43
        }
        $1098(Math_fround(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2])), HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($8_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0);
        break label$39;
       }
       label$44 : {
        if (!(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) > Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]) & 1 | 0)) {
         break label$44
        }
        $1099(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 180 | 0) >> 2]))), HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 192 | 0) >> 2] | 0) - 4 | 0 | 0, HEAP32[($8_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0);
        break label$39;
       }
      }
      label$45 : {
       label$46 : while (1) {
        HEAPF32[($8_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15($12_1 + 92 | 0 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2]);
        label$47 : {
         label$48 : {
          if (!(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) > Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]) & 1 | 0)) {
           break label$48
          }
          break label$47;
         }
         label$49 : {
          label$50 : {
           if (HEAP32[($8_1 + 36 | 0) >> 2] | 0) {
            break label$50
           }
           HEAPF32[($8_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) / Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]));
           break label$49;
          }
          HEAPF32[($8_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($15($12_1 + 92 | 0 | 0, (HEAP32[($8_1 + 36 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]);
          HEAPF32[($8_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2])) / Math_fround(Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2])));
         }
         break label$45;
        }
        HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 1 | 0;
        continue label$46;
       };
      }
      label$51 : {
       if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) != (HEAP32[($8_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$51
       }
       HEAP32[($8_1 + 184 | 0) >> 2] = HEAP32[($8_1 + 36 | 0) >> 2] | 0;
       HEAP32[($8_1 + 12 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 36 | 0) >> 2] | 0, 6);
       HEAPF32[($8_1 + 124 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2]);
       HEAPF32[($8_1 + 120 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 12 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
       HEAPF32[($8_1 + 116 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 12 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2]);
       HEAPF32[($8_1 + 112 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 12 | 0) >> 2] | 0) + 3 | 0 | 0) | 0) >> 2]);
       HEAPF32[($8_1 + 108 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0) >> 2]);
       HEAPF32[($8_1 + 104 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 12 | 0) >> 2] | 0) + 5 | 0 | 0) | 0) >> 2]);
       HEAPF32[($8_1 + 100 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 12 | 0) >> 2] | 0) + 6 | 0 | 0) | 0) >> 2]);
       HEAPF32[($8_1 + 96 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 12 | 0) >> 2] | 0) + 7 | 0 | 0) | 0) >> 2]);
       $878_1 = Math_fround(-Math_fround(HEAPF32[($8_1 + 116 | 0) >> 2]));
       HEAPF32[($8_1 + 92 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($878_1 + $878_1) + Math_fround(HEAPF32[($8_1 + 124 | 0) >> 2])) + Math_fround(HEAPF32[($8_1 + 108 | 0) >> 2])) * Math_fround(.029999999329447746));
       $887_1 = Math_fround(-Math_fround(HEAPF32[($8_1 + 112 | 0) >> 2]));
       HEAPF32[($8_1 + 88 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($887_1 + $887_1) + Math_fround(HEAPF32[($8_1 + 120 | 0) >> 2])) + Math_fround(HEAPF32[($8_1 + 104 | 0) >> 2])) * Math_fround(.029999999329447746));
       HEAPF32[($8_1 + 84 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 116 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 108 | 0) >> 2])) * Math_fround(3.0)) + Math_fround(-Math_fround(HEAPF32[($8_1 + 124 | 0) >> 2]))) + Math_fround(HEAPF32[($8_1 + 100 | 0) >> 2])) * Math_fround(.006000000052154064));
       HEAPF32[($8_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 112 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 104 | 0) >> 2])) * Math_fround(3.0)) + Math_fround(-Math_fround(HEAPF32[($8_1 + 120 | 0) >> 2]))) + Math_fround(HEAPF32[($8_1 + 96 | 0) >> 2])) * Math_fround(.006000000052154064));
       $918_1 = Math_fround(HEAPF32[($8_1 + 92 | 0) >> 2]);
       HEAPF32[($8_1 + 76 | 0) >> 2] = Math_fround(Math_fround($918_1 + $918_1) + Math_fround(HEAPF32[($8_1 + 84 | 0) >> 2]));
       $922_1 = Math_fround(HEAPF32[($8_1 + 88 | 0) >> 2]);
       HEAPF32[($8_1 + 72 | 0) >> 2] = Math_fround(Math_fround($922_1 + $922_1) + Math_fround(HEAPF32[($8_1 + 80 | 0) >> 2]));
       HEAPF32[($8_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 84 | 0) >> 2]) * Math_fround(.1666666716337204)) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 116 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 124 | 0) >> 2])) * Math_fround(.30000001192092896)) + Math_fround(HEAPF32[($8_1 + 92 | 0) >> 2])));
       HEAPF32[($8_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 80 | 0) >> 2]) * Math_fround(.1666666716337204)) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 112 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 120 | 0) >> 2])) * Math_fround(.30000001192092896)) + Math_fround(HEAPF32[($8_1 + 88 | 0) >> 2])));
       HEAPF32[($8_1 + 48 | 0) >> 2] = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]))))));
       $956_1 = Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]);
       HEAPF32[($15($12_1 + 124 | 0 | 0, 0 | 0) | 0) >> 2] = $956_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = 1;
       label$52 : {
        label$53 : while (1) {
         if (!((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
          break label$52
         }
         HEAPF32[($8_1 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 76 | 0) >> 2]));
         HEAPF32[($8_1 + 64 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 72 | 0) >> 2]));
         HEAPF32[($8_1 + 76 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 76 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 84 | 0) >> 2]));
         HEAPF32[($8_1 + 72 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 72 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 80 | 0) >> 2]));
         $976_1 = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]))))));
         HEAPF32[($8_1 + 48 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]) + $976_1);
         $979_1 = Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]);
         HEAPF32[($15($12_1 + 124 | 0 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] = $979_1;
         HEAP32[($8_1 + 12 | 0) >> 2] = (HEAP32[($8_1 + 12 | 0) >> 2] | 0) + 1 | 0;
         continue label$53;
        };
       }
       HEAPF32[($8_1 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 76 | 0) >> 2]));
       HEAPF32[($8_1 + 64 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 72 | 0) >> 2]));
       $993_1 = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]))))));
       HEAPF32[($8_1 + 48 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]) + $993_1);
       $996_1 = Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]);
       HEAPF32[($15($12_1 + 124 | 0 | 0, 8 | 0) | 0) >> 2] = $996_1;
       HEAPF32[($8_1 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($8_1 + 76 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 84 | 0) >> 2])));
       HEAPF32[($8_1 + 64 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($8_1 + 72 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 80 | 0) >> 2])));
       $1014_1 = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]))))));
       HEAPF32[($8_1 + 48 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]) + $1014_1);
       $1017_1 = Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]);
       HEAPF32[($15($12_1 + 124 | 0 | 0, 9 | 0) | 0) >> 2] = $1017_1;
       HEAP32[($8_1 + 32 | 0) >> 2] = 0;
      }
      HEAPF32[($8_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]));
      label$54 : {
       label$55 : while (1) {
        HEAPF32[($8_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($15($12_1 + 124 | 0 | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) | 0) >> 2]);
        label$56 : {
         label$57 : {
          if (!(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) > Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]) & 1 | 0)) {
           break label$57
          }
          break label$56;
         }
         label$58 : {
          label$59 : {
           if (HEAP32[($8_1 + 32 | 0) >> 2] | 0) {
            break label$59
           }
           HEAPF32[($8_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) / Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]));
           break label$58;
          }
          HEAPF32[($8_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[($15($12_1 + 124 | 0 | 0, (HEAP32[($8_1 + 32 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]);
          HEAPF32[($8_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) + Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2])) / Math_fround(Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]))));
         }
         break label$54;
        }
        HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 32 | 0) >> 2] | 0) + 1 | 0;
        continue label$55;
       };
      }
      $1039_1 = Math_fround(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) * Math_fround(.10000000149011612));
      $1040_1 = Math_fround(HEAPF32[($8_1 + 124 | 0) >> 2]);
      $1041_1 = Math_fround(HEAPF32[($8_1 + 120 | 0) >> 2]);
      $1042_1 = Math_fround(HEAPF32[($8_1 + 116 | 0) >> 2]);
      $1043_1 = Math_fround(HEAPF32[($8_1 + 112 | 0) >> 2]);
      $1044_1 = Math_fround(HEAPF32[($8_1 + 108 | 0) >> 2]);
      $1045_1 = Math_fround(HEAPF32[($8_1 + 104 | 0) >> 2]);
      $1046_1 = Math_fround(HEAPF32[($8_1 + 100 | 0) >> 2]);
      $1047_1 = Math_fround(HEAPF32[($8_1 + 96 | 0) >> 2]);
      $571_1 = HEAP32[($8_1 + 204 | 0) >> 2] | 0;
      $572_1 = HEAP32[($8_1 + 40 | 0) >> 2] | 0;
      $577_1 = 1;
      label$60 : {
       if ((HEAPU8[($8_1 + 223 | 0) >> 0] | 0) & 1 | 0) {
        break label$60
       }
       $586_1 = 0;
       label$61 : {
        if (!((HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
         break label$61
        }
        $586_1 = Math_fround(HEAPF32[($8_1 + 28 | 0) >> 2]) < Math_fround(9.999999747378752e-06);
       }
       $577_1 = $586_1;
      }
      $1100(Math_fround($1039_1), Math_fround($1040_1), Math_fround($1041_1), Math_fround($1042_1), Math_fround($1043_1), Math_fround($1044_1), Math_fround($1045_1), Math_fround($1046_1), Math_fround($1047_1), $571_1 | 0, $572_1 | 0, $577_1 & 1 | 0 | 0);
     }
     HEAP32[($8_1 + 44 | 0) >> 2] = (HEAP32[($8_1 + 44 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($8_1 + 40 | 0) >> 2] = (HEAP32[($8_1 + 40 | 0) >> 2] | 0) + 3 | 0;
     continue label$38;
    };
   }
   HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 204 | 0) >> 2] | 0;
  }
  $599_1 = HEAP32[($8_1 + 236 | 0) >> 2] | 0;
  global$0 = $8_1 + 240 | 0;
  return $599_1 | 0;
 }
 
 function $1098($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $52_1 = Math_fround(0), $57_1 = Math_fround(0), $58_1 = Math_fround(0), $63_1 = Math_fround(0), $64_1 = Math_fround(0);
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAPF32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  HEAPF32[($7_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2]);
  HEAPF32[($7_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
  HEAPF32[($7_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($15(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]));
  HEAPF32[($7_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($15(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 3 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]));
  HEAPF32[($7_1 + 8 | 0) >> 2] = Math_fround($1019(Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]))));
  $52_1 = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
  $57_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 44 | 0) >> 2]) * Math_fround($1021(Math_fround(Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]))))) + $52_1);
  HEAPF32[($15(HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] = $57_1;
  $58_1 = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
  $63_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 44 | 0) >> 2]) * Math_fround($1023(Math_fround(Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]))))) + $58_1);
  HEAPF32[($15(HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $63_1;
  $64_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
  HEAPF32[($15(HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2] = $64_1;
  global$0 = $7_1 + 48 | 0;
  return;
 }
 
 function $1099($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $52_1 = Math_fround(0), $57_1 = Math_fround(0), $58_1 = Math_fround(0), $63_1 = Math_fround(0), $64_1 = Math_fround(0);
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAPF32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  HEAPF32[($7_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2]);
  HEAPF32[($7_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 3 | 0 | 0) | 0) >> 2]);
  HEAPF32[($7_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]) - Math_fround(HEAPF32[($15(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2]));
  HEAPF32[($7_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]) - Math_fround(HEAPF32[($15(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]));
  HEAPF32[($7_1 + 8 | 0) >> 2] = Math_fround($1019(Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]))));
  $52_1 = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
  $57_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 44 | 0) >> 2]) * Math_fround($1021(Math_fround(Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]))))) + $52_1);
  HEAPF32[($15(HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] = $57_1;
  $58_1 = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
  $63_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 44 | 0) >> 2]) * Math_fround($1023(Math_fround(Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]))))) + $58_1);
  HEAPF32[($15(HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $63_1;
  $64_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
  HEAPF32[($15(HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2] = $64_1;
  global$0 = $7_1 + 48 | 0;
  return;
 }
 
 function $1100($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  $5_1 = Math_fround($5_1);
  $6_1 = Math_fround($6_1);
  $7_1 = Math_fround($7_1);
  $8_1 = Math_fround($8_1);
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $14_1 = 0, $64_1 = Math_fround(0), $65_1 = Math_fround(0), $72_1 = Math_fround(0), $130_1 = Math_fround(0), $131_1 = Math_fround(0), $139_1 = Math_fround(0), $170_1 = Math_fround(0);
  $14_1 = global$0 - 96 | 0;
  global$0 = $14_1;
  HEAPF32[($14_1 + 92 | 0) >> 2] = $0_1;
  HEAPF32[($14_1 + 88 | 0) >> 2] = $1_1;
  HEAPF32[($14_1 + 84 | 0) >> 2] = $2_1;
  HEAPF32[($14_1 + 80 | 0) >> 2] = $3_1;
  HEAPF32[($14_1 + 76 | 0) >> 2] = $4_1;
  HEAPF32[($14_1 + 72 | 0) >> 2] = $5_1;
  HEAPF32[($14_1 + 68 | 0) >> 2] = $6_1;
  HEAPF32[($14_1 + 64 | 0) >> 2] = $7_1;
  HEAPF32[($14_1 + 60 | 0) >> 2] = $8_1;
  HEAP32[($14_1 + 56 | 0) >> 2] = $9_1;
  HEAP32[($14_1 + 52 | 0) >> 2] = $10_1;
  HEAP8[($14_1 + 51 | 0) >> 0] = $11_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (Math_fround(HEAPF32[($14_1 + 92 | 0) >> 2]) < Math_fround(9.999999747378752e-06) & 1 | 0) {
      break label$3
     }
     if (!(($1031(Math_fround(Math_fround(HEAPF32[($14_1 + 92 | 0) >> 2]))) | 0) & 1 | 0)) {
      break label$2
     }
    }
    $64_1 = Math_fround(HEAPF32[($14_1 + 88 | 0) >> 2]);
    HEAPF32[($15(HEAP32[($14_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2] = $64_1;
    $65_1 = Math_fround(HEAPF32[($14_1 + 84 | 0) >> 2]);
    HEAPF32[($15(HEAP32[($14_1 + 56 | 0) >> 2] | 0 | 0, (HEAP32[($14_1 + 52 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $65_1;
    $72_1 = Math_fround($1019(Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 76 | 0) >> 2]) - Math_fround(HEAPF32[($14_1 + 84 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 80 | 0) >> 2]) - Math_fround(HEAPF32[($14_1 + 88 | 0) >> 2])))));
    HEAPF32[($15(HEAP32[($14_1 + 56 | 0) >> 2] | 0 | 0, (HEAP32[($14_1 + 52 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2] = $72_1;
    break label$1;
   }
   HEAPF32[($14_1 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($14_1 + 92 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 92 | 0) >> 2]));
   HEAPF32[($14_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($14_1 + 44 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 92 | 0) >> 2]));
   HEAPF32[($14_1 + 36 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($14_1 + 92 | 0) >> 2]));
   HEAPF32[($14_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($14_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 36 | 0) >> 2]));
   HEAPF32[($14_1 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($14_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 36 | 0) >> 2]));
   HEAPF32[($14_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($14_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 92 | 0) >> 2]));
   HEAPF32[($14_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($14_1 + 24 | 0) >> 2]) * Math_fround(3.0));
   HEAPF32[($14_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($14_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 20 | 0) >> 2]));
   HEAPF32[($14_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($14_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 92 | 0) >> 2]));
   HEAPF32[($14_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 64 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 40 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 72 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 12 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 88 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 28 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($14_1 + 80 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 16 | 0) >> 2])))));
   HEAPF32[($14_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 60 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 40 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 68 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 12 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 84 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 28 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($14_1 + 76 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 16 | 0) >> 2])))));
   $130_1 = Math_fround(HEAPF32[($14_1 + 8 | 0) >> 2]);
   HEAPF32[($15(HEAP32[($14_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2] = $130_1;
   $131_1 = Math_fround(HEAPF32[($14_1 + 4 | 0) >> 2]);
   HEAPF32[($15(HEAP32[($14_1 + 56 | 0) >> 2] | 0 | 0, (HEAP32[($14_1 + 52 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $131_1;
   if (!((HEAPU8[($14_1 + 51 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   label$4 : {
    label$5 : {
     if (!(+Math_fround(HEAPF32[($14_1 + 92 | 0) >> 2]) < .001 & 1 | 0)) {
      break label$5
     }
     $139_1 = Math_fround($1019(Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 76 | 0) >> 2]) - Math_fround(HEAPF32[($14_1 + 84 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 80 | 0) >> 2]) - Math_fround(HEAPF32[($14_1 + 88 | 0) >> 2])))));
     HEAPF32[($15(HEAP32[($14_1 + 56 | 0) >> 2] | 0 | 0, (HEAP32[($14_1 + 52 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2] = $139_1;
     break label$4;
    }
    $170_1 = Math_fround($1019(Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 4 | 0) >> 2]) - Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 68 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 44 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 84 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 32 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 76 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 24 | 0) >> 2])) * Math_fround(2.0)))))), Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 8 | 0) >> 2]) - Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 72 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 44 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 88 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 32 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($14_1 + 80 | 0) >> 2]) * Math_fround(HEAPF32[($14_1 + 24 | 0) >> 2])) * Math_fround(2.0))))))));
    HEAPF32[($15(HEAP32[($14_1 + 56 | 0) >> 2] | 0 | 0, (HEAP32[($14_1 + 52 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2] = $170_1;
   }
  }
  global$0 = $14_1 + 96 | 0;
  return;
 }
 
 function $1101($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $831(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1102($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0;
 }
 
 function $1103($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $1104($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1105($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 140 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $1106($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  HEAP8[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 140 | 0) >> 0] = (HEAPU8[($4_1 + 11 | 0) >> 0] | 0) & 1 | 0;
  return;
 }
 
 function $1107($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 10408 + 8 | 0;
  $504($4_1 + 124 | 0 | 0) | 0;
  $504($4_1 + 108 | 0 | 0) | 0;
  $504($4_1 + 92 | 0 | 0) | 0;
  $504($4_1 + 76 | 0 | 0) | 0;
  $504($4_1 + 60 | 0 | 0) | 0;
  $504($4_1 + 44 | 0 | 0) | 0;
  $140($4_1 + 8 | 0 | 0) | 0;
  $1758($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1108($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1107($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1109() {
  $1092();
  return;
 }
 
 function $1110($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $827($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 10484 + 8 | 0;
  $967($5_1 + 24 | 0 | 0) | 0;
  HEAP32[($5_1 + 40 | 0) >> 2] = 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = 0;
  HEAP32[($5_1 + 48 | 0) >> 2] = 0;
  HEAP32[($5_1 + 52 | 0) >> 2] = 0;
  HEAPF32[($5_1 + 56 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 60 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 64 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 68 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 72 | 0) >> 2] = Math_fround(0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1111($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0 | 0;
 }
 
 function $1112($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0;
 }
 
 function $1113($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0;
 }
 
 function $1114($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 56 | 0) >> 2]));
 }
 
 function $1115($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 60 | 0) >> 2]));
 }
 
 function $1116($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2]));
 }
 
 function $1117($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 68 | 0) >> 2]));
 }
 
 function $1118($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 72 | 0) >> 2]));
 }
 
 function $1119($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 10484 + 8 | 0;
  $976($4_1 + 24 | 0 | 0) | 0;
  $828($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1120($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1119($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1121() {
  $1160(26424 | 0, 4769 | 0, 26308 | 0) | 0;
  $1797(240 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1122($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26424 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1123($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26424 | 0;
 }
 
 function $1124($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $838($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 10548 + 8 | 0;
  $502($5_1 + 20 | 0 | 0) | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = 0;
  $17_1 = Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 3);
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
  $573($5_1 + 20 | 0 | 0, $17_1 | 0, $4_1 + 4 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1125($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $19_1 = 0, $32_1 = 0, $43_1 = 0, $47_1 = 0, $130_1 = 0, $132_1 = 0;
  $10_1 = global$0 - 64 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 56 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 52 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 44 | 0) >> 2] = $4_1;
  HEAPF32[($10_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 32 | 0) >> 2] = $7_1;
  $11_1 = HEAP32[($10_1 + 60 | 0) >> 2] | 0;
  HEAP32[($10_1 + 28 | 0) >> 2] = HEAP32[($1126((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + 88 | 0 | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($10_1 + 24 | 0) >> 2] = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
  $19_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($19_1) | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) < Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$3
    }
    $32_1 = HEAP32[($10_1 + 36 | 0) >> 2] | 0;
    label$4 : {
     switch ($32_1 | 0) {
     case 0:
      HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 68 | 0) >> 2]);
      HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 40 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 72 | 0) >> 2]);
      break label$1;
     case 1:
      $43_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
      HEAPF32[($43_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 68 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($43_1 + 36 | 0) >> 2]));
      $47_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
      HEAPF32[($47_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 72 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 40 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($47_1 + 40 | 0) >> 2]));
      break label$1;
     default:
      break label$4;
     };
    }
    break label$1;
   }
   label$7 : {
    label$8 : {
     if (!(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) >= Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) - 3 | 0 | 0) | 0) >> 2]) & 1 | 0)) {
      break label$8
     }
     HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + -2 | 0 | 0) | 0) >> 2]);
     HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) | 0) >> 2]);
     break label$7;
    }
    HEAP32[($10_1 + 12 | 0) >> 2] = $487($11_1 + 20 | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2])), 3 | 0) | 0;
    HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + -2 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + -1 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 4 | 0) >> 2] = Math_fround($843($11_1 | 0, ((HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) / (3 | 0) | 0) - 1 | 0 | 0, Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])) / Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + -3 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])))))));
    HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]));
    HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]));
   }
   label$9 : {
    if (HEAP32[($10_1 + 36 | 0) >> 2] | 0) {
     break label$9
    }
    HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 68 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 68 | 0) >> 2]));
    HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 72 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 72 | 0) >> 2]));
    break label$1;
   }
   $130_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
   HEAPF32[($130_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($130_1 + 36 | 0) >> 2]));
   $132_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
   HEAPF32[($132_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 40 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($132_1 + 40 | 0) >> 2]));
  }
  global$0 = $10_1 + 64 | 0;
  return;
 }
 
 function $1126($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1127($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 218103808 | 0 | 0;
 }
 
 function $1128($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  var $7_1 = 0, $8_1 = 0, $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0);
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  HEAP32[($7_1 + 24 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 24 | 0) >> 2] | 0, 3);
  $30_1 = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
  HEAPF32[($15($8_1 + 20 | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] = $30_1;
  $31_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
  HEAPF32[($15($8_1 + 20 | 0 | 0, (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $31_1;
  $32_1 = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
  HEAPF32[($15($8_1 + 20 | 0 | 0, (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2] = $32_1;
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $1129($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 10548 + 8 | 0;
  $504($4_1 + 20 | 0 | 0) | 0;
  $839($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1130($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1129($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1131() {
  $1121();
  return;
 }
 
 function $1132() {
  $1160(26436 | 0, 4926 | 0, 26308 | 0) | 0;
  $1797(246 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1133($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26436 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1134($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26436 | 0;
 }
 
 function $1135($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $838($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 10640 + 8 | 0;
  $502($5_1 + 20 | 0 | 0) | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = 0;
  $17_1 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 1 | 0;
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
  $573($5_1 + 20 | 0 | 0, $17_1 | 0, $4_1 + 4 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1136($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 10640 + 8 | 0;
  $504($4_1 + 20 | 0 | 0) | 0;
  $839($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1137($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[247 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1138($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $19_1 = 0, $32_1 = 0, $40_1 = 0, $98_1 = 0;
  $10_1 = global$0 - 64 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 56 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 52 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 44 | 0) >> 2] = $4_1;
  HEAPF32[($10_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 32 | 0) >> 2] = $7_1;
  $11_1 = HEAP32[($10_1 + 60 | 0) >> 2] | 0;
  HEAP32[($10_1 + 28 | 0) >> 2] = HEAP32[($1126((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + 88 | 0 | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($10_1 + 24 | 0) >> 2] = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
  $19_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($19_1) | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) < Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$3
    }
    $32_1 = HEAP32[($10_1 + 36 | 0) >> 2] | 0;
    label$4 : {
     switch ($32_1 | 0) {
     case 0:
      HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 60 | 0) >> 2]);
      break label$1;
     case 1:
      $40_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
      HEAPF32[($40_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 60 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($40_1 + 28 | 0) >> 2]));
      break label$1;
     default:
      break label$4;
     };
    }
    break label$1;
   }
   label$7 : {
    label$8 : {
     if (!(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) >= Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) - 2 | 0 | 0) | 0) >> 2]) & 1 | 0)) {
      break label$8
     }
     HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) | 0) >> 2]);
     break label$7;
    }
    HEAP32[($10_1 + 16 | 0) >> 2] = $487($11_1 + 20 | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2])), 2 | 0) | 0;
    HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + -1 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 8 | 0) >> 2] = Math_fround($843($11_1 | 0, ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) / (2 | 0) | 0) - 1 | 0 | 0, Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2])) / Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + -2 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2])))))));
    HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]));
   }
   label$9 : {
    if (HEAP32[($10_1 + 36 | 0) >> 2] | 0) {
     break label$9
    }
    HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 60 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 60 | 0) >> 2]));
    break label$1;
   }
   $98_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
   HEAPF32[($98_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($98_1 + 28 | 0) >> 2]));
  }
  global$0 = $10_1 + 64 | 0;
  return;
 }
 
 function $1139($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 184549376 | 0 | 0;
 }
 
 function $1140($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $7_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0);
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAPF32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 1 | 0;
  $23_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
  HEAPF32[($15($7_1 + 20 | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] = $23_1;
  $24_1 = Math_fround(HEAPF32[$6_1 >> 2]);
  HEAPF32[($15($7_1 + 20 | 0 | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $24_1;
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $1141() {
  $1132();
  return;
 }
 
 function $1142() {
  $1160(26448 | 0, 4972 | 0, 26436 | 0) | 0;
  $1797(252 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1143($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26448 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1144($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26448 | 0;
 }
 
 function $1145($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1135($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 10724 + 8 | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1146($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $19_1 = 0, $32_1 = 0, $40_1 = 0, $105_1 = 0;
  $10_1 = global$0 - 64 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 56 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 52 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 44 | 0) >> 2] = $4_1;
  HEAPF32[($10_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 32 | 0) >> 2] = $7_1;
  $11_1 = HEAP32[($10_1 + 60 | 0) >> 2] | 0;
  HEAP32[($10_1 + 28 | 0) >> 2] = HEAP32[($1126((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + 88 | 0 | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($10_1 + 24 | 0) >> 2] = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
  $19_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($19_1) | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) < Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$3
    }
    $32_1 = HEAP32[($10_1 + 36 | 0) >> 2] | 0;
    label$4 : {
     switch ($32_1 | 0) {
     case 0:
      HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 64 | 0) >> 2]);
      break label$1;
     case 1:
      $40_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
      HEAPF32[($40_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 64 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($40_1 + 32 | 0) >> 2]));
      break label$1;
     default:
      break label$4;
     };
    }
    break label$1;
   }
   label$7 : {
    label$8 : {
     if (!(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) >= Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) - (HEAP32[(0 + 10624 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]) & 1 | 0)) {
      break label$8
     }
     HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + (HEAP32[(0 + 10632 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]);
     break label$7;
    }
    HEAP32[($10_1 + 16 | 0) >> 2] = $487($11_1 + 20 | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2])), HEAP32[(0 + 10624 | 0) >> 2] | 0 | 0) | 0;
    HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + (HEAP32[(0 + 10632 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 8 | 0) >> 2] = Math_fround($843($11_1 | 0, ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) / (HEAP32[(0 + 10624 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0, Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2])) / Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + (HEAP32[(0 + 10628 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2])))))));
    HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + (HEAP32[(0 + 10636 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]));
   }
   label$9 : {
    if (HEAP32[($10_1 + 36 | 0) >> 2] | 0) {
     break label$9
    }
    HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 64 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 64 | 0) >> 2]));
    break label$1;
   }
   $105_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
   HEAPF32[($105_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($105_1 + 32 | 0) >> 2]));
  }
  global$0 = $10_1 + 64 | 0;
  return;
 }
 
 function $1147($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 201326592 | 0 | 0;
 }
 
 function $1148($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1136($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1149($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1148($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1150() {
  $1142();
  return;
 }
 
 function $1151() {
  $1160(26460 | 0, 1499 | 0, 26208 | 0) | 0;
  $1797(258 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1152($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26460 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1153($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26460 | 0;
 }
 
 function $1154($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $709($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 10804 + 8 | 0;
  HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround(0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1155($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $8_1 = $1655(32 | 0, 2099 | 0, 85 | 0) | 0;
  FUNCTION_TABLE[259 | 0]($8_1, $712($4_1 | 0) | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $8_1;
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 28 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
  $14_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $1156($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $710($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1157($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1156($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1158() {
  $1151();
  return;
 }
 
 function $1159($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $113($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 10868 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1160($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $113($6_1 | 0) | 0;
  HEAP32[$6_1 >> 2] = 10868 + 8 | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1161($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $17_1 = (($1926(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $17_1 | 0;
 }
 
 function $1162($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $28_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if ($1926(HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) {
       break label$4
      }
      HEAP8[($4_1 + 15 | 0) >> 0] = 1 & 1 | 0;
      break label$1;
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0;
     continue label$3;
    };
   }
   HEAP8[($4_1 + 15 | 0) >> 0] = 0 & 1 | 0;
  }
  $28_1 = (HEAPU8[($4_1 + 15 | 0) >> 0] | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $28_1 | 0;
 }
 
 function $1163($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $462($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1164() {
  $1160(26472 | 0, 1543 | 0, 26208 | 0) | 0;
  $1797(266 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1165($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26472 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1166($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26472 | 0;
 }
 
 function $1167($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $69_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $709($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $499($5_1 + 20 | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 10912 + 8 | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = 10912 + 32 | 0;
  HEAPF32[($5_1 + 32 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 36 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 40 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 44 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($5_1 + 48 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($5_1 + 52 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 56 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 60 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 64 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 68 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 72 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 76 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 80 | 0) >> 2] = Math_fround(0 | 0);
  $502($5_1 + 84 | 0 | 0) | 0;
  $502($5_1 + 100 | 0 | 0) | 0;
  $674($5_1 + 116 | 0 | 0) | 0;
  HEAPF32[($5_1 + 128 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 132 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 136 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 140 | 0) >> 2] = Math_fround(0 | 0);
  $69_1 = Math_fround(1.0);
  $1043($5_1 + 144 | 0 | 0, Math_fround($69_1), Math_fround($69_1), Math_fround($69_1), Math_fround($69_1)) | 0;
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
  $573($5_1 + 84 | 0 | 0, 8 | 0, $4_1 + 4 | 0 | 0);
  HEAPF32[$4_1 >> 2] = Math_fround(0 | 0);
  $573($5_1 + 100 | 0 | 0, 8 | 0, $4_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1168($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $117_1 = Math_fround(0), $120_1 = Math_fround(0), $123_1 = Math_fround(0), $126_1 = Math_fround(0), $129_1 = Math_fround(0), $132_1 = Math_fround(0), $135_1 = Math_fround(0), $138_1 = Math_fround(0);
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 76 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
  HEAPF32[($3_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]) / Math_fround(HEAPF32[($4_1 + 76 | 0) >> 2])) * Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]));
  HEAPF32[($3_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]) / Math_fround(HEAPF32[($4_1 + 80 | 0) >> 2])) * Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2]));
  HEAPF32[($3_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(-Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2])) / Math_fround(2.0)) * Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($4_1 + 60 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 72 | 0) >> 2])));
  HEAPF32[($3_1 + 60 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(-Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2])) / Math_fround(2.0)) * Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 68 | 0) >> 2])));
  HEAPF32[($3_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 72 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 64 | 0) >> 2]));
  HEAPF32[($3_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 68 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 60 | 0) >> 2]));
  HEAPF32[($3_1 + 48 | 0) >> 2] = Math_fround($1030(Math_fround(Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]))));
  HEAPF32[($3_1 + 44 | 0) >> 2] = Math_fround($1029(Math_fround(Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]))));
  HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 64 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2])) + Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]));
  HEAPF32[($3_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 64 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]));
  HEAPF32[($3_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 60 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2])) + Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]));
  HEAPF32[($3_1 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 60 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]));
  HEAPF32[($3_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2])) + Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]));
  HEAPF32[($3_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]));
  HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2])) + Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]));
  HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]));
  $117_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]));
  HEAPF32[($15($4_1 + 84 | 0 | 0, 0 | 0) | 0) >> 2] = $117_1;
  $120_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]) + Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]));
  HEAPF32[($15($4_1 + 84 | 0 | 0, 1 | 0) | 0) >> 2] = $120_1;
  $123_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]));
  HEAPF32[($15($4_1 + 84 | 0 | 0, 2 | 0) | 0) >> 2] = $123_1;
  $126_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) + Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]));
  HEAPF32[($15($4_1 + 84 | 0 | 0, 3 | 0) | 0) >> 2] = $126_1;
  $129_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]));
  HEAPF32[($15($4_1 + 84 | 0 | 0, 4 | 0) | 0) >> 2] = $129_1;
  $132_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) + Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]));
  HEAPF32[($15($4_1 + 84 | 0 | 0, 5 | 0) | 0) >> 2] = $132_1;
  $135_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]));
  HEAPF32[($15($4_1 + 84 | 0 | 0, 6 | 0) | 0) >> 2] = $135_1;
  $138_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]) + Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]));
  HEAPF32[($15($4_1 + 84 | 0 | 0, 7 | 0) | 0) >> 2] = $138_1;
  global$0 = $3_1 + 80 | 0;
  return;
 }
 
 function $1169($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $10_1 = 0, $80_1 = Math_fround(0), $81_1 = Math_fround(0), $82_1 = Math_fround(0), $83_1 = Math_fround(0), $84_1 = Math_fround(0), $85_1 = Math_fround(0), $86_1 = Math_fround(0), $87_1 = Math_fround(0), $88_1 = Math_fround(0), $89_1 = Math_fround(0), $90_1 = Math_fround(0), $91_1 = Math_fround(0), $92_1 = Math_fround(0), $93_1 = Math_fround(0), $94_1 = Math_fround(0), $95_1 = Math_fround(0);
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($8_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($8_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($8_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($8_1 + 12 | 0) >> 2] = $4_1;
  HEAP8[($8_1 + 11 | 0) >> 0] = $5_1;
  $10_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAPU8[($8_1 + 11 | 0) >> 0] | 0) & 1 | 0)) {
     break label$2
    }
    $80_1 = Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]);
    HEAPF32[($15($10_1 + 100 | 0 | 0, 4 | 0) | 0) >> 2] = $80_1;
    $81_1 = Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]);
    HEAPF32[($15($10_1 + 100 | 0 | 0, 5 | 0) | 0) >> 2] = $81_1;
    $82_1 = Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]);
    HEAPF32[($15($10_1 + 100 | 0 | 0, 6 | 0) | 0) >> 2] = $82_1;
    $83_1 = Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]);
    HEAPF32[($15($10_1 + 100 | 0 | 0, 7 | 0) | 0) >> 2] = $83_1;
    $84_1 = Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]);
    HEAPF32[($15($10_1 + 100 | 0 | 0, 0 | 0) | 0) >> 2] = $84_1;
    $85_1 = Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]);
    HEAPF32[($15($10_1 + 100 | 0 | 0, 1 | 0) | 0) >> 2] = $85_1;
    $86_1 = Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]);
    HEAPF32[($15($10_1 + 100 | 0 | 0, 2 | 0) | 0) >> 2] = $86_1;
    $87_1 = Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]);
    HEAPF32[($15($10_1 + 100 | 0 | 0, 3 | 0) | 0) >> 2] = $87_1;
    break label$1;
   }
   $88_1 = Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]);
   HEAPF32[($15($10_1 + 100 | 0 | 0, 2 | 0) | 0) >> 2] = $88_1;
   $89_1 = Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]);
   HEAPF32[($15($10_1 + 100 | 0 | 0, 3 | 0) | 0) >> 2] = $89_1;
   $90_1 = Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]);
   HEAPF32[($15($10_1 + 100 | 0 | 0, 4 | 0) | 0) >> 2] = $90_1;
   $91_1 = Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]);
   HEAPF32[($15($10_1 + 100 | 0 | 0, 5 | 0) | 0) >> 2] = $91_1;
   $92_1 = Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]);
   HEAPF32[($15($10_1 + 100 | 0 | 0, 6 | 0) | 0) >> 2] = $92_1;
   $93_1 = Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]);
   HEAPF32[($15($10_1 + 100 | 0 | 0, 7 | 0) | 0) >> 2] = $93_1;
   $94_1 = Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]);
   HEAPF32[($15($10_1 + 100 | 0 | 0, 0 | 0) | 0) >> 2] = $94_1;
   $95_1 = Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]);
   HEAPF32[($15($10_1 + 100 | 0 | 0, 1 | 0) | 0) >> 2] = $95_1;
  }
  global$0 = $8_1 + 32 | 0;
  return;
 }
 
 function $1170($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 64 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
  HEAPF32[($7_1 + 40 | 0) >> 2] = Math_fround($767(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0));
  HEAPF32[($7_1 + 36 | 0) >> 2] = Math_fround($768(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0));
  HEAPF32[($7_1 + 32 | 0) >> 2] = Math_fround($763(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0));
  HEAPF32[($7_1 + 28 | 0) >> 2] = Math_fround($764(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0));
  HEAPF32[($7_1 + 24 | 0) >> 2] = Math_fround($765(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0));
  HEAPF32[($7_1 + 20 | 0) >> 2] = Math_fround($766(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0));
  HEAPF32[($7_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($15($8_1 + 84 | 0 | 0, 6 | 0) | 0) >> 2]);
  HEAPF32[($7_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($15($8_1 + 84 | 0 | 0, 7 | 0) | 0) >> 2]);
  HEAPF32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 48 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 28 | 0) >> 2]))) + Math_fround(HEAPF32[($7_1 + 40 | 0) >> 2]));
  HEAPF32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 48 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]))) + Math_fround(HEAPF32[($7_1 + 36 | 0) >> 2]));
  HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + (HEAP32[($7_1 + 44 | 0) >> 2] | 0) | 0;
  HEAPF32[($7_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($15($8_1 + 84 | 0 | 0, 0 | 0) | 0) >> 2]);
  HEAPF32[($7_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($15($8_1 + 84 | 0 | 0, 1 | 0) | 0) >> 2]);
  HEAPF32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 48 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 28 | 0) >> 2]))) + Math_fround(HEAPF32[($7_1 + 40 | 0) >> 2]));
  HEAPF32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 48 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]))) + Math_fround(HEAPF32[($7_1 + 36 | 0) >> 2]));
  HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + (HEAP32[($7_1 + 44 | 0) >> 2] | 0) | 0;
  HEAPF32[($7_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($15($8_1 + 84 | 0 | 0, 2 | 0) | 0) >> 2]);
  HEAPF32[($7_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($15($8_1 + 84 | 0 | 0, 3 | 0) | 0) >> 2]);
  HEAPF32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 48 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 28 | 0) >> 2]))) + Math_fround(HEAPF32[($7_1 + 40 | 0) >> 2]));
  HEAPF32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 48 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]))) + Math_fround(HEAPF32[($7_1 + 36 | 0) >> 2]));
  HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + (HEAP32[($7_1 + 44 | 0) >> 2] | 0) | 0;
  HEAPF32[($7_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($15($8_1 + 84 | 0 | 0, 4 | 0) | 0) >> 2]);
  HEAPF32[($7_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($15($8_1 + 84 | 0 | 0, 5 | 0) | 0) >> 2]);
  HEAPF32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 48 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 28 | 0) >> 2]))) + Math_fround(HEAPF32[($7_1 + 40 | 0) >> 2]));
  HEAPF32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 48 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]))) + Math_fround(HEAPF32[($7_1 + 36 | 0) >> 2]));
  global$0 = $7_1 + 64 | 0;
  return;
 }
 
 function $1171($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 100 | 0 | 0;
 }
 
 function $1172($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 144 | 0 | 0;
 }
 
 function $1173($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $51_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $8_1 = $1655(164 | 0, 2175 | 0, 267 | 0) | 0;
  FUNCTION_TABLE[267 | 0]($8_1, $712($4_1 | 0) | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $8_1;
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 68 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 72 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 60 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 60 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 64 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 76 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 76 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 80 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 80 | 0) >> 2]);
  $17((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 20 | 0 | 0, $14($4_1 + 20 | 0 | 0) | 0 | 0, 0 | 0);
  $652((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 116 | 0 | 0, $4_1 + 116 | 0 | 0) | 0;
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 32 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 36 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 44 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 48 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 40 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 52 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]);
  HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 56 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]);
  $1057((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 100 | 0 | 0, $4_1 + 100 | 0 | 0);
  $1057((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 84 | 0 | 0, $4_1 + 84 | 0 | 0);
  $812((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 144 | 0 | 0, $4_1 + 144 | 0 | 0) | 0;
  $51_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $51_1 | 0;
 }
 
 function $1174($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 10912 + 8 | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = 10912 + 32 | 0;
  $815($4_1 + 144 | 0 | 0) | 0;
  $112($4_1 + 116 | 0 | 0) | 0;
  $504($4_1 + 100 | 0 | 0) | 0;
  $504($4_1 + 84 | 0 | 0) | 0;
  $507($4_1 + 20 | 0 | 0) | 0;
  $710($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1175($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1174($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1176($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $7_1 = $1174($4_1 + -20 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $1177($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $1175((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + -20 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1178() {
  $1164();
  return;
 }
 
 function $1179() {
  $1160(26484 | 0, 5016 | 0, 26308 | 0) | 0;
  $1797(274 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1180($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26484 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1181($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26484 | 0;
 }
 
 function $1182($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $838($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 11012 + 8 | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = 0;
  $502($5_1 + 24 | 0 | 0) | 0;
  $17_1 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 1 | 0;
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
  $573($5_1 + 24 | 0 | 0, $17_1 | 0, $4_1 + 4 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1183($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $82_1 = 0, $28_1 = 0, $33_1 = 0, $148_1 = Math_fround(0), $231_1 = 0.0, $38_1 = 0, $45_1 = 0, $58_1 = 0, $63_1 = 0, $68_1 = 0, $236_1 = 0.0, $73_1 = 0, $80_1 = 0, $86_1 = 0, $91_1 = 0, $92_1 = 0, $198_1 = Math_fround(0), $241_1 = 0.0, $104_1 = 0, $111_1 = 0, $207_1 = Math_fround(0), $246_1 = 0.0, $118_1 = 0, $220_1 = Math_fround(0), $251_1 = 0.0, $132_1 = 0, $139_1 = 0, $197_1 = Math_fround(0), $206_1 = Math_fround(0);
  $10_1 = global$0 - 64 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 56 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 52 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 44 | 0) >> 2] = $4_1;
  HEAPF32[($10_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 32 | 0) >> 2] = $7_1;
  $11_1 = HEAP32[($10_1 + 60 | 0) >> 2] | 0;
  HEAP32[($10_1 + 28 | 0) >> 2] = HEAP32[($139($1291(HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAPU8[((HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 117 | 0) >> 0] | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) < Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$3
    }
    $28_1 = HEAP32[($10_1 + 36 | 0) >> 2] | 0;
    label$4 : {
     label$5 : {
      switch ($28_1 | 0) {
      case 0:
       HEAPF32[((HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 40 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 36 | 0) >> 2]);
       break label$4;
      case 1:
       $33_1 = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
       HEAPF32[($10_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($33_1 + 4 | 0) >> 2] | 0) + 36 | 0) >> 2]) - Math_fround(HEAPF32[($33_1 + 40 | 0) >> 2]));
       $148_1 = Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]);
       $231_1 = 16384.499999999996 - +Math_fround($148_1 / Math_fround(360.0));
       label$8 : {
        label$9 : {
         if (!(Math_abs($231_1) < 2147483648.0)) {
          break label$9
         }
         $38_1 = ~~$231_1;
         break label$8;
        }
        $38_1 = -2147483648;
       }
       $45_1 = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
       HEAPF32[($45_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($148_1 - Math_fround(Math_imul(16384 - $38_1 | 0, 360) | 0)) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($45_1 + 40 | 0) >> 2]));
       break label$4;
      default:
       break label$5;
      };
     }
    }
    break label$1;
   }
   label$10 : {
    if (!(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) >= Math_fround(HEAPF32[($15($11_1 + 24 | 0 | 0, ($488($11_1 + 24 | 0 | 0) | 0) - 2 | 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$10
    }
    $58_1 = $11_1 + 24 | 0;
    HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15($58_1 | 0, ($488($58_1 | 0) | 0) + -1 | 0 | 0) | 0) >> 2]);
    $63_1 = HEAP32[($10_1 + 36 | 0) >> 2] | 0;
    label$11 : {
     label$12 : {
      switch ($63_1 | 0) {
      case 0:
       HEAPF32[((HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 36 | 0) >> 2]));
       break label$11;
      case 1:
      case 2:
       $68_1 = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
       HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[((HEAP32[($68_1 + 4 | 0) >> 2] | 0) + 36 | 0) >> 2]) - Math_fround(HEAPF32[($68_1 + 40 | 0) >> 2])));
       $236_1 = 16384.499999999996 - +Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]) / Math_fround(360.0));
       label$15 : {
        label$16 : {
         if (!(Math_abs($236_1) < 2147483648.0)) {
          break label$16
         }
         $73_1 = ~~$236_1;
         break label$15;
        }
        $73_1 = -2147483648;
       }
       HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]) - Math_fround(Math_imul(16384 - $73_1 | 0, 360) | 0));
       break;
      case 3:
       break label$12;
      default:
       break label$11;
      };
     }
     $80_1 = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
     HEAPF32[($80_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($80_1 + 40 | 0) >> 2]));
    }
    break label$1;
   }
   $82_1 = $11_1 + 24 | 0;
   HEAP32[($10_1 + 16 | 0) >> 2] = $487($82_1 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2])), 2 | 0) | 0;
   $86_1 = -1;
   HEAPF32[($10_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($15($82_1 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + $86_1 | 0 | 0) | 0) >> 2]);
   HEAPF32[($10_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($15($82_1 | 0, HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2]);
   $91_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
   $92_1 = 1;
   HEAPF32[($10_1 + 4 | 0) >> 2] = Math_fround($843($11_1 | 0, ($91_1 >> $92_1 | 0) + $86_1 | 0 | 0, Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])) / Math_fround(Math_fround(HEAPF32[($15($82_1 | 0, $91_1 + -2 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])))))));
   HEAPF32[$10_1 >> 2] = Math_fround(Math_fround(HEAPF32[($15($82_1 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + $92_1 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]));
   $197_1 = Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]);
   $198_1 = Math_fround(HEAPF32[$10_1 >> 2]);
   $241_1 = +Math_fround($198_1 / Math_fround(-360.0)) + 16384.499999999996;
   label$17 : {
    label$18 : {
     if (!(Math_abs($241_1) < 2147483648.0)) {
      break label$18
     }
     $104_1 = ~~$241_1;
     break label$17;
    }
    $104_1 = -2147483648;
   }
   HEAPF32[$10_1 >> 2] = Math_fround(Math_fround(Math_fround($198_1 - Math_fround(Math_imul(16384 - $104_1 | 0, 360) | 0)) * Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2])) + $197_1);
   $111_1 = HEAP32[($10_1 + 36 | 0) >> 2] | 0;
   label$19 : {
    switch ($111_1 | 0) {
    case 0:
     $206_1 = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 36 | 0) >> 2]);
     $207_1 = Math_fround(HEAPF32[$10_1 >> 2]);
     $246_1 = 16384.499999999996 - +Math_fround($207_1 / Math_fround(360.0));
     label$22 : {
      label$23 : {
       if (!(Math_abs($246_1) < 2147483648.0)) {
        break label$23
       }
       $118_1 = ~~$246_1;
       break label$22;
      }
      $118_1 = -2147483648;
     }
     HEAPF32[((HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($207_1 - Math_fround(Math_imul(16384 - $118_1 | 0, 360) | 0)) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + $206_1);
     break label$1;
    case 1:
    case 2:
     HEAPF32[$10_1 >> 2] = Math_fround(Math_fround(HEAPF32[$10_1 >> 2]) + Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 36 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 40 | 0) >> 2])));
     break;
    case 3:
     break label$19;
    default:
     break label$1;
    };
   }
   $220_1 = Math_fround(HEAPF32[$10_1 >> 2]);
   $251_1 = 16384.499999999996 - +Math_fround($220_1 / Math_fround(360.0));
   label$24 : {
    label$25 : {
     if (!(Math_abs($251_1) < 2147483648.0)) {
      break label$25
     }
     $132_1 = ~~$251_1;
     break label$24;
    }
    $132_1 = -2147483648;
   }
   $139_1 = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
   HEAPF32[($139_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($220_1 - Math_fround(Math_imul(16384 - $132_1 | 0, 360) | 0)) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($139_1 + 40 | 0) >> 2]));
  }
  global$0 = $10_1 + 64 | 0;
  return;
 }
 
 function $1184($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 0 | 0 | 0;
 }
 
 function $1185($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $7_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0);
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAPF32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 1 | 0;
  $23_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
  HEAPF32[($15($7_1 + 24 | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] = $23_1;
  $24_1 = Math_fround(HEAPF32[$6_1 >> 2]);
  HEAPF32[($15($7_1 + 24 | 0 | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $24_1;
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $1186($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 11012 + 8 | 0;
  $504($4_1 + 24 | 0 | 0) | 0;
  $839($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1187($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1186($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1188() {
  $1179();
  return;
 }
 
 function $1189() {
  $1160(26496 | 0, 5049 | 0, 26580 | 0) | 0;
  $1797(280 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1190($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26496 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1191($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26496 | 0;
 }
 
 function $1192($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1710($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 11080 + 8 | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1193($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $30_1 = 0, $41_1 = 0, $45_1 = 0, $146_1 = 0, $149_1 = 0, $159_1 = 0, $179_1 = 0, $241_1 = Math_fround(0), $250_1 = Math_fround(0), $275_1 = Math_fround(0), $277_1 = Math_fround(0), $279_1 = Math_fround(0), $287_1 = Math_fround(0), $289_1 = Math_fround(0), $291_1 = Math_fround(0), $301_1 = Math_fround(0), $303_1 = Math_fround(0), $305_1 = Math_fround(0), $313_1 = Math_fround(0), $315_1 = Math_fround(0), $317_1 = Math_fround(0), $327_1 = Math_fround(0), $329_1 = Math_fround(0), $331_1 = Math_fround(0), $339_1 = Math_fround(0), $341_1 = Math_fround(0), $343_1 = Math_fround(0), $404_1 = Math_fround(0), $405_1 = Math_fround(0), $406_1 = Math_fround(0), $408_1 = Math_fround(0), $418_1 = Math_fround(0), $419_1 = Math_fround(0), $420_1 = Math_fround(0), $422_1 = Math_fround(0);
  $10_1 = global$0 - 80 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 72 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 68 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 60 | 0) >> 2] = $4_1;
  HEAPF32[($10_1 + 56 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 52 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 48 | 0) >> 2] = $7_1;
  $11_1 = HEAP32[($10_1 + 76 | 0) >> 2] | 0;
  HEAP32[($10_1 + 44 | 0) >> 2] = HEAP32[($139((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($10_1 + 40 | 0) >> 2] = HEAP32[($10_1 + 44 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAPU8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 117 | 0) >> 0] | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2]) < Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$3
    }
    $30_1 = HEAP32[($10_1 + 52 | 0) >> 2] | 0;
    label$4 : {
     switch ($30_1 | 0) {
     case 0:
      HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 40 | 0) >> 2]);
      HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 44 | 0) >> 2]);
      break label$1;
     case 1:
      $41_1 = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
      HEAPF32[($41_1 + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 40 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[($41_1 + 44 | 0) >> 2]));
      $45_1 = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
      HEAPF32[($45_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 44 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[($45_1 + 48 | 0) >> 2]));
      break;
     default:
      break label$4;
     };
    }
    break label$1;
   }
   label$7 : {
    label$8 : {
     if (!(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2]) >= Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) - (HEAP32[(0 + 13520 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]) & 1 | 0)) {
      break label$8
     }
     HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + (HEAP32[(0 + 13528 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 40 | 0) >> 2]));
     HEAPF32[($10_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + (HEAP32[(0 + 13532 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 44 | 0) >> 2]));
     break label$7;
    }
    HEAP32[($10_1 + 28 | 0) >> 2] = $487($11_1 + 20 | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2])), HEAP32[(0 + 13520 | 0) >> 2] | 0 | 0) | 0;
    HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + (HEAP32[(0 + 13528 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + (HEAP32[(0 + 13532 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround($843($11_1 | 0, ((HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0) / (HEAP32[(0 + 13520 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0, Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2])) / Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + (HEAP32[(0 + 13524 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2])))))));
    $241_1 = Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]);
    HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + (HEAP32[(0 + 13536 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) + $241_1) * Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 40 | 0) >> 2]));
    $250_1 = Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]);
    HEAPF32[($10_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + (HEAP32[(0 + 13540 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) + $250_1) * Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 44 | 0) >> 2]));
   }
   label$9 : {
    if (!(Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2]) == Math_fround(1.0) & 1 | 0)) {
     break label$9
    }
    label$10 : {
     label$11 : {
      if (!((HEAP32[($10_1 + 52 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
       break label$11
      }
      $146_1 = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
      HEAPF32[($146_1 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($146_1 + 44 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 40 | 0) >> 2])));
      $149_1 = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
      HEAPF32[($149_1 + 48 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($149_1 + 48 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 44 | 0) >> 2])));
      break label$10;
     }
     HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]);
     HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]);
    }
    break label$1;
   }
   label$12 : {
    label$13 : {
     if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$13
     }
     $159_1 = HEAP32[($10_1 + 52 | 0) >> 2] | 0;
     label$14 : {
      label$15 : {
       switch ($159_1 | 0) {
       case 0:
        HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 40 | 0) >> 2]);
        HEAPF32[($10_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 44 | 0) >> 2]);
        $275_1 = Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]);
        $277_1 = Math_fround($1014(Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]))));
        $279_1 = Math_fround($1015(Math_fround(Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]))));
        HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($277_1 * $279_1) + Math_fround(-Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]))) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + $275_1);
        $287_1 = Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]);
        $289_1 = Math_fround($1014(Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]))));
        $291_1 = Math_fround($1015(Math_fround(Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]))));
        HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($289_1 * $291_1) + Math_fround(-Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]))) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + $287_1);
        break label$14;
       case 1:
       case 2:
        HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2]);
        HEAPF32[($10_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2]);
        $301_1 = Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]);
        $303_1 = Math_fround($1014(Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]))));
        $305_1 = Math_fround($1015(Math_fround(Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]))));
        HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($303_1 * $305_1) + Math_fround(-Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]))) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + $301_1);
        $313_1 = Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]);
        $315_1 = Math_fround($1014(Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]))));
        $317_1 = Math_fround($1015(Math_fround(Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]))));
        HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($315_1 * $317_1) + Math_fround(-Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]))) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + $313_1);
        break label$14;
       case 3:
        break label$15;
       default:
        break label$14;
       };
      }
      HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2]);
      HEAPF32[($10_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2]);
      $327_1 = Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]);
      $329_1 = Math_fround($1014(Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]))));
      $331_1 = Math_fround($1015(Math_fround(Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]))));
      HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($329_1 * $331_1) + Math_fround(-Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 40 | 0) >> 2]))) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + $327_1);
      $339_1 = Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]);
      $341_1 = Math_fround($1014(Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]))));
      $343_1 = Math_fround($1015(Math_fround(Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]))));
      HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($341_1 * $343_1) + Math_fround(-Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 44 | 0) >> 2]))) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + $339_1);
     }
     break label$12;
    }
    $179_1 = HEAP32[($10_1 + 52 | 0) >> 2] | 0;
    label$18 : {
     label$19 : {
      switch ($179_1 | 0) {
      case 0:
       HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(Math_fround($1014(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 40 | 0) >> 2])))) * Math_fround($1015(Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2])))));
       HEAPF32[($10_1 + 12 | 0) >> 2] = Math_fround(Math_fround($1014(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 44 | 0) >> 2])))) * Math_fround($1015(Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2])))));
       HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]));
       HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]));
       break label$18;
      case 1:
      case 2:
       HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(Math_fround($1014(Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2])))) * Math_fround($1015(Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2])))));
       HEAPF32[($10_1 + 12 | 0) >> 2] = Math_fround(Math_fround($1014(Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2])))) * Math_fround($1015(Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2])))));
       HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]));
       HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]));
       break label$18;
      case 3:
       break label$19;
      default:
       break label$18;
      };
     }
     HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround($1015(Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]))));
     HEAPF32[($10_1 + 12 | 0) >> 2] = Math_fround($1015(Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]))));
     $404_1 = Math_fround($1014(Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2]))));
     $405_1 = Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]);
     $406_1 = Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]);
     $408_1 = Math_fround($1014(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 40 | 0) >> 2]))));
     HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2] = Math_fround(Math_fround($404_1 * $405_1) + Math_fround(Math_fround(Math_fround(Math_fround(-$408_1) * Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])) + $406_1) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])));
     $418_1 = Math_fround($1014(Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2]))));
     $419_1 = Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]);
     $420_1 = Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]);
     $422_1 = Math_fround($1014(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 44 | 0) >> 2]))));
     HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] = Math_fround(Math_fround($418_1 * $419_1) + Math_fround(Math_fround(Math_fround(Math_fround(-$422_1) * Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2])) + $420_1) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])));
    }
   }
  }
  global$0 = $10_1 + 80 | 0;
  return;
 }
 
 function $1194($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 33554432 | 0 | 0;
 }
 
 function $1195($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1711($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1196($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1195($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1197() {
  $1189();
  return;
 }
 
 function $1198() {
  $1160(26508 | 0, 4912 | 0, 26580 | 0) | 0;
  $1797(286 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1199($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26508 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1200($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26508 | 0;
 }
 
 function $1201($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1710($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 11144 + 8 | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1202($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $30_1 = 0, $41_1 = 0, $45_1 = 0, $126_1 = 0, $137_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $182_1 = Math_fround(0), $189_1 = Math_fround(0);
  $10_1 = global$0 - 64 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 56 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 52 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 44 | 0) >> 2] = $4_1;
  HEAPF32[($10_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 32 | 0) >> 2] = $7_1;
  $11_1 = HEAP32[($10_1 + 60 | 0) >> 2] | 0;
  HEAP32[($10_1 + 28 | 0) >> 2] = HEAP32[($139((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($10_1 + 24 | 0) >> 2] = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAPU8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 117 | 0) >> 0] | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) < Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$3
    }
    $30_1 = HEAP32[($10_1 + 36 | 0) >> 2] | 0;
    label$4 : {
     switch ($30_1 | 0) {
     case 0:
      HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 48 | 0) >> 2]);
      HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 56 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 52 | 0) >> 2]);
      break label$1;
     case 1:
      $41_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
      HEAPF32[($41_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 48 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($41_1 + 52 | 0) >> 2]));
      $45_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
      HEAPF32[($45_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 52 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 56 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($45_1 + 56 | 0) >> 2]));
      break;
     default:
      break label$4;
     };
    }
    break label$1;
   }
   label$7 : {
    label$8 : {
     if (!(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) >= Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) - (HEAP32[(0 + 13520 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]) & 1 | 0)) {
      break label$8
     }
     HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + (HEAP32[(0 + 13528 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]);
     HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + (HEAP32[(0 + 13532 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]);
     break label$7;
    }
    HEAP32[($10_1 + 12 | 0) >> 2] = $487($11_1 + 20 | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2])), HEAP32[(0 + 13520 | 0) >> 2] | 0 | 0) | 0;
    HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + (HEAP32[(0 + 13528 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + (HEAP32[(0 + 13532 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 4 | 0) >> 2] = Math_fround($843($11_1 | 0, ((HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) / (HEAP32[(0 + 13520 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0, Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])) / Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + (HEAP32[(0 + 13524 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])))))));
    $182_1 = Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]);
    HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + (HEAP32[(0 + 13536 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2])) + $182_1);
    $189_1 = Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]);
    HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + (HEAP32[(0 + 13540 | 0) >> 2] | 0) | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2])) + $189_1);
   }
   $126_1 = HEAP32[($10_1 + 36 | 0) >> 2] | 0;
   label$9 : {
    switch ($126_1 | 0) {
    case 0:
     HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 48 | 0) >> 2]));
     HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 52 | 0) >> 2]));
     break label$1;
    case 1:
    case 2:
     $137_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
     HEAPF32[($137_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 48 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($137_1 + 52 | 0) >> 2]));
     $141_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
     HEAPF32[($141_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 52 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 56 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($141_1 + 56 | 0) >> 2]));
     break label$1;
    case 3:
     break label$9;
    default:
     break label$1;
    };
   }
   $142_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
   HEAPF32[($142_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($142_1 + 52 | 0) >> 2]));
   $143_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
   HEAPF32[($143_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($143_1 + 56 | 0) >> 2]));
  }
  global$0 = $10_1 + 64 | 0;
  return;
 }
 
 function $1203($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 50331648 | 0 | 0;
 }
 
 function $1204($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1711($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1205($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1204($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1206() {
  $1198();
  return;
 }
 
 function $1207($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $243_1 = Math_fround(0), $63_1 = 0, $76_1 = 0, $127_1 = 0, $166_1 = 0, $199_1 = 0, $232_1 = 0, $240_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 72 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 68 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = $5_1;
  $113($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 11208 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
  $753($5_1 + 8 | 0 | 0) | 0;
  $1208($5_1 + 24 | 0 | 0) | 0;
  $1208($5_1 + 40 | 0 | 0) | 0;
  $1209($5_1 + 56 | 0 | 0) | 0;
  $1210($5_1 + 72 | 0 | 0) | 0;
  $1211($5_1 + 88 | 0 | 0) | 0;
  $1212($5_1 + 104 | 0 | 0) | 0;
  $753($5_1 + 120 | 0 | 0) | 0;
  HEAP32[($5_1 + 136 | 0) >> 2] = 0;
  $243_1 = Math_fround(1.0);
  $1043($5_1 + 140 | 0 | 0, Math_fround($243_1), Math_fround($243_1), Math_fround($243_1), Math_fround($243_1)) | 0;
  HEAPF32[($5_1 + 160 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 164 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($5_1 + 168 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($5_1 + 172 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 176 | 0) >> 2] = Math_fround(0 | 0);
  $951($5_1 + 8 | 0 | 0, $950($1521(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  HEAP32[($4_1 + 64 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 64 | 0) >> 2] | 0) >>> 0 < ($950($1521(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[($952($1521(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      if (!(($778(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) == (0 | 0) & 1 | 0)) {
       break label$4
      }
      $63_1 = $1655(120 | 0, 2772 | 0, 74 | 0) | 0;
      $752($63_1 | 0, HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, $5_1 | 0, 0 | 0) | 0;
      HEAP32[($4_1 + 56 | 0) >> 2] = $63_1;
      break label$3;
     }
     HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[($139($5_1 + 8 | 0 | 0, $776($778(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0) >> 2] | 0;
     $76_1 = $1655(120 | 0, 2772 | 0, 77 | 0) | 0;
     $752($76_1 | 0, HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, $5_1 | 0, HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($4_1 + 56 | 0) >> 2] = $76_1;
     $953($762(HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) | 0 | 0, $4_1 + 56 | 0 | 0);
    }
    $953($5_1 + 8 | 0 | 0, $4_1 + 56 | 0 | 0);
    HEAP32[($4_1 + 64 | 0) >> 2] = (HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $885($5_1 + 24 | 0 | 0, $1213($1522(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  $885($5_1 + 40 | 0 | 0, $1213($1522(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  HEAP32[($4_1 + 48 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($4_1 + 48 | 0) >> 2] | 0) >>> 0 < ($1213($1522(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[($1214($1522(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($4_1 + 40 | 0) >> 2] = HEAP32[($139($5_1 + 8 | 0 | 0, $776($1644(HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0) >> 2] | 0;
    $127_1 = $1655(84 | 0, 2772 | 0, 90 | 0) | 0;
    $1630($127_1 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = $127_1;
    $886($5_1 + 24 | 0 | 0, $4_1 + 36 | 0 | 0);
    $886($5_1 + 40 | 0 | 0, $4_1 + 36 | 0 | 0);
    HEAP32[($4_1 + 48 | 0) >> 2] = (HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  $1216($5_1 + 56 | 0 | 0, $1215($1524(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  HEAP32[($4_1 + 32 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 0 < ($1215($1524(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$7
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($1217($1524(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $166_1 = $1655(48 | 0, 2772 | 0, 100 | 0) | 0;
    $949($166_1 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
    HEAP32[($4_1 + 24 | 0) >> 2] = $166_1;
    $1218($5_1 + 56 | 0 | 0, $4_1 + 24 | 0 | 0);
    HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  $1220($5_1 + 72 | 0 | 0, $1219($1525(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  HEAP32[($4_1 + 20 | 0) >> 2] = 0;
  label$9 : {
   label$10 : while (1) {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 < ($1219($1525(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$9
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($1221($1525(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $199_1 = $1655(48 | 0, 2772 | 0, 109 | 0) | 0;
    $1671($199_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $199_1;
    $1222($5_1 + 72 | 0 | 0, $4_1 + 12 | 0 | 0);
    HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$10;
   };
  }
  $1224($5_1 + 88 | 0 | 0, $1223($1526(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  label$11 : {
   label$12 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < ($1223($1526(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$11
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($1225($1526(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $232_1 = $1655(144 | 0, 2772 | 0, 118 | 0) | 0;
    $1095($232_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
    HEAP32[$4_1 >> 2] = $232_1;
    $1226($5_1 + 88 | 0 | 0, $4_1 | 0);
    HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$12;
   };
  }
  $1227($5_1 | 0);
  $240_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
  global$0 = $4_1 + 80 | 0;
  return $240_1 | 0;
 }
 
 function $1208($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 6540 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1209($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 11256 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1210($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 11324 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1211($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 11396 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1212($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 11464 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1213($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1214($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1215($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1216($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $1228(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1217($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1218($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $1228(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $1229($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $1229($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1219($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1220($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $1230(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1221($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1222($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $1230(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $1231($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $1231($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1223($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $1232(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1225($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1226($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $1232(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $1233($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $1233($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1227($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 76 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
  $1234($4_1 + 104 | 0 | 0);
  $143($4_1 + 120 | 0 | 0);
  HEAP32[($3_1 + 72 | 0) >> 2] = 0;
  HEAP32[($3_1 + 68 | 0) >> 2] = $956($4_1 + 8 | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 72 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 68 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 64 | 0) >> 2] = HEAP32[($139($4_1 + 8 | 0 | 0, HEAP32[($3_1 + 72 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $27_1 = $788(HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
    HEAP8[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 116 | 0) >> 0] = $27_1 & 1 | 0;
    HEAP8[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 117 | 0) >> 0] = ((HEAPU8[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 116 | 0) >> 0] | 0) ^ -1 | 0) & 1 | 0;
    HEAP32[($3_1 + 72 | 0) >> 2] = (HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (!((HEAP32[($4_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 60 | 0) >> 2] = $1614(HEAP32[($4_1 + 136 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = 0;
   HEAP32[($3_1 + 52 | 0) >> 2] = $950(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) | 0;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($3_1 + 56 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 52 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$4
     }
     HEAP32[($3_1 + 48 | 0) >> 2] = HEAP32[($139($4_1 + 8 | 0 | 0, $776(HEAP32[($952(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >> 2] | 0;
     label$6 : while (1) {
      HEAP8[((HEAP32[($3_1 + 48 | 0) >> 2] | 0) + 116 | 0) >> 0] = 0;
      HEAP8[((HEAP32[($3_1 + 48 | 0) >> 2] | 0) + 117 | 0) >> 0] = 1;
      HEAP32[($3_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 48 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
      if ((HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       continue label$6
      }
      break label$6;
     };
     HEAP32[($3_1 + 56 | 0) >> 2] = (HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
  }
  HEAP32[($3_1 + 44 | 0) >> 2] = $1235($4_1 + 56 | 0 | 0) | 0;
  HEAP32[($3_1 + 40 | 0) >> 2] = $1236($4_1 + 72 | 0 | 0) | 0;
  HEAP32[($3_1 + 36 | 0) >> 2] = $1237($4_1 + 88 | 0 | 0) | 0;
  HEAP32[($3_1 + 32 | 0) >> 2] = ((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + (HEAP32[($3_1 + 40 | 0) >> 2] | 0) | 0) + (HEAP32[($3_1 + 36 | 0) >> 2] | 0) | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = 0;
  label$7 : while (1) {
   label$8 : {
    label$9 : while (1) {
     if (!((HEAP32[($3_1 + 28 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 32 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$8
     }
     HEAP32[($3_1 + 24 | 0) >> 2] = 0;
     label$10 : {
      label$11 : while (1) {
       if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 44 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$10
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[($988($4_1 + 56 | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
       label$12 : {
        if (!(($831($958(HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) == (HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$12
        }
        $1238($4_1 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0);
        HEAP32[($3_1 + 28 | 0) >> 2] = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
        continue label$7;
       }
       HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 1 | 0;
       continue label$11;
      };
     }
     HEAP32[($3_1 + 16 | 0) >> 2] = 0;
     label$13 : {
      label$14 : while (1) {
       if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 40 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$13
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($1239($4_1 + 72 | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
       label$15 : {
        if (!(($831($1678(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) == (HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$15
        }
        $1240($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
        HEAP32[($3_1 + 28 | 0) >> 2] = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
        continue label$7;
       }
       HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1 | 0;
       continue label$14;
      };
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = 0;
     label$16 : {
      label$17 : while (1) {
       if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 36 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$16
       }
       HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($1126($4_1 + 88 | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
       label$18 : {
        if (!(($831($1104(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) == (HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$18
        }
        $1241($4_1 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
        HEAP32[($3_1 + 28 | 0) >> 2] = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
        continue label$7;
       }
       HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
       continue label$17;
      };
     }
     HEAP32[($3_1 + 28 | 0) >> 2] = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
     continue label$9;
    };
   }
   break label$7;
  };
  HEAP32[$3_1 >> 2] = $956($4_1 + 8 | 0 | 0) | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = 0;
  label$19 : {
   label$20 : while (1) {
    if (!((HEAP32[($3_1 + 28 | 0) >> 2] | 0) >>> 0 < (HEAP32[$3_1 >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$19
    }
    $1242($4_1 | 0, HEAP32[($139($4_1 + 8 | 0 | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 28 | 0) >> 2] = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$20;
   };
  }
  global$0 = $3_1 + 80 | 0;
  return;
 }
 
 function $1228($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1229($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1230($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1231($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1232($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1233($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1234($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1266($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1235($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1236($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1237($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1238($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $12_1 = 0, $19_1 = 0, $28_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  $12_1 = 0;
  label$1 : {
   if (!((HEAPU8[((HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + 117 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   $19_1 = 1;
   label$2 : {
    if (!(($833(HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $28_1 = 0;
    label$3 : {
     if (!((HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $31_1 = (HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 52 | 0;
     HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     $28_1 = $1267($31_1 | 0, $4_1 + 36 | 0 | 0) | 0;
    }
    $19_1 = $28_1;
   }
   $12_1 = $19_1;
  }
  HEAP8[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 0] = $12_1 & 1 | 0;
  label$4 : {
   label$5 : {
    if ((HEAPU8[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 0] | 0) & 1 | 0) {
     break label$5
    }
    break label$4;
   }
   HEAP32[($4_1 + 32 | 0) >> 2] = $960(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0;
   $1242($5_1 | 0, HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0);
   HEAP32[($4_1 + 28 | 0) >> 2] = $959(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($139(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 0 | 0) | 0) >> 2] | 0;
   $1242($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
   label$6 : {
    if (!(($956(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 1 >>> 0 & 1 | 0)) {
     break label$6
    }
    HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($139(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, ($956(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    label$7 : {
     if (!((($1268($5_1 + 104 | 0 | 0, $4_1 + 16 | 0 | 0) | 0) ^ -1 | 0) & 1 | 0)) {
      break label$7
     }
     $953($5_1 + 120 | 0 | 0, $4_1 + 20 | 0 | 0);
    }
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
   $1269($5_1 + 104 | 0 | 0, $4_1 + 12 | 0 | 0);
   $1270($762(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
   HEAP8[((HEAP32[($139(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, ($956(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0) | 0) >> 2] | 0) + 116 | 0) >> 0] = 1;
  }
  global$0 = $4_1 + 48 | 0;
  return;
 }
 
 function $1239($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1240($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $12_1 = 0, $19_1 = 0, $28_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  $12_1 = 0;
  label$1 : {
   if (!((HEAPU8[((HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 117 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   $19_1 = 1;
   label$2 : {
    if (!(($833(HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $28_1 = 0;
    label$3 : {
     if (!((HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $31_1 = (HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 52 | 0;
     HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     $28_1 = $1267($31_1 | 0, $4_1 + 36 | 0 | 0) | 0;
    }
    $19_1 = $28_1;
   }
   $12_1 = $19_1;
  }
  HEAP8[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 0] = $12_1 & 1 | 0;
  label$4 : {
   label$5 : {
    if ((HEAPU8[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 0] | 0) & 1 | 0) {
     break label$5
    }
    break label$4;
   }
   $1242($5_1 | 0, $1680(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0 | 0);
   HEAP32[($4_1 + 32 | 0) >> 2] = $1679(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = $956(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) | 0;
   label$6 : {
    label$7 : {
     if (!(($1694(HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[($4_1 + 24 | 0) >> 2] = 0;
     label$8 : {
      label$9 : while (1) {
       if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 28 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$8
       }
       HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($139(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
       $1242($5_1 | 0, $761(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
       HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
       label$10 : {
        if (!((($1268($5_1 + 104 | 0 | 0, $4_1 + 16 | 0 | 0) | 0) ^ -1 | 0) & 1 | 0)) {
         break label$10
        }
        $953($5_1 + 120 | 0 | 0, $4_1 + 20 | 0 | 0);
       }
       HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 1 | 0;
       continue label$9;
      };
     }
     break label$6;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    label$11 : {
     label$12 : while (1) {
      if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 28 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$11
      }
      $1242($5_1 | 0, HEAP32[($139(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0);
      HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      continue label$12;
     };
    }
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
   $1269($5_1 + 104 | 0 | 0, $4_1 + 8 | 0 | 0);
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
   label$13 : {
    label$14 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 28 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$13
     }
     $1270($762(HEAP32[($139(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0 | 0);
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$14;
    };
   }
   HEAP32[$4_1 >> 2] = 0;
   label$15 : while (1) {
    if (!((HEAP32[$4_1 >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 28 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$4
    }
    HEAP8[((HEAP32[($139(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0) >> 2] | 0) + 116 | 0) >> 0] = 1;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    continue label$15;
   };
  }
  global$0 = $4_1 + 48 | 0;
  return;
 }
 
 function $1241($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $13_1 = 0, $20_1 = 0, $29_1 = 0, $118_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
  $13_1 = 0;
  label$1 : {
   if (!((HEAPU8[((HEAP32[((HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 117 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   $20_1 = 1;
   label$2 : {
    if (!(($833(HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $29_1 = 0;
    label$3 : {
     if (!((HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $32_1 = (HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 52 | 0;
     HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     $29_1 = $1267($32_1 | 0, $4_1 + 52 | 0 | 0) | 0;
    }
    $20_1 = $29_1;
   }
   $13_1 = $20_1;
  }
  HEAP8[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 140 | 0) >> 0] = $13_1 & 1 | 0;
  label$4 : {
   label$5 : {
    if ((HEAPU8[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 140 | 0) >> 0] | 0) & 1 | 0) {
     break label$5
    }
    break label$4;
   }
   HEAP32[($4_1 + 48 | 0) >> 2] = $1103(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($4_1 + 44 | 0) >> 2] = $1642($1633(HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
   HEAP32[($4_1 + 40 | 0) >> 2] = $1634(HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) | 0;
   label$6 : {
    if (!((HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$6
    }
    $1271($5_1 | 0, HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
   }
   label$7 : {
    if (!((HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$7
    }
    if (!((HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    $1271($5_1 | 0, HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($4_1 + 36 | 0) >> 2] = 0;
   HEAP32[($4_1 + 32 | 0) >> 2] = $1272((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 48 | 0 | 0) | 0;
   label$8 : {
    label$9 : while (1) {
     if (!((HEAP32[($4_1 + 36 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$8
     }
     $1271($5_1 | 0, HEAP32[($1273((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 48 | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
     HEAP32[($4_1 + 36 | 0) >> 2] = (HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     continue label$9;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = $1637(HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) | 0;
   label$10 : {
    if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$10
    }
    $118_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    if (!(($1162(FUNCTION_TABLE[HEAP32[((HEAP32[$118_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($118_1) | 0 | 0, 26400 | 0) | 0) & 1 | 0)) {
     break label$10
    }
    $1274($5_1 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($4_1 + 24 | 0) >> 2] = $1102(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = $956(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = 0;
   label$11 : {
    label$12 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$11
     }
     $1242($5_1 | 0, HEAP32[($139(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0);
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$12;
    };
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
   $1269($5_1 + 104 | 0 | 0, $4_1 + 12 | 0 | 0);
   HEAP32[($4_1 + 8 | 0) >> 2] = 0;
   label$13 : {
    label$14 : while (1) {
     if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$13
     }
     $1270($762(HEAP32[($139(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0 | 0);
     HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0;
     continue label$14;
    };
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
   label$15 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$4
    }
    HEAP8[((HEAP32[($139(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) + 116 | 0) >> 0] = 1;
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$15;
   };
  }
  global$0 = $4_1 + 64 | 0;
  return;
 }
 
 function $1242($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAPU8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 116 | 0) >> 0] | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
   label$3 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $1242($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
   }
   HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 116 | 0) >> 0] = 1;
   HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   $1269($5_1 + 104 | 0 | 0, $4_1 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1243($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 11208 + 8 | 0;
  $1244($4_1 + 8 | 0 | 0);
  $1245($4_1 + 24 | 0 | 0);
  $1246($4_1 + 56 | 0 | 0);
  $1247($4_1 + 72 | 0 | 0);
  $1248($4_1 + 88 | 0 | 0);
  $815($4_1 + 140 | 0 | 0) | 0;
  $140($4_1 + 120 | 0 | 0) | 0;
  $1249($4_1 + 104 | 0 | 0) | 0;
  $1250($4_1 + 88 | 0 | 0) | 0;
  $1251($4_1 + 72 | 0 | 0) | 0;
  $1252($4_1 + 56 | 0 | 0) | 0;
  $132($4_1 + 40 | 0 | 0) | 0;
  $132($4_1 + 24 | 0 | 0) | 0;
  $140($4_1 + 8 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1244($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($956(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($139(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $1253(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1245($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($80(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($82(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $1254(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1246($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($1235(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($988(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $1255(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1247($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($1236(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($1239(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $1256(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1248($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($1237(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($1126(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $1257(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1249($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 11464 + 8 | 0;
  $1234($4_1 | 0);
  $1258($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1250($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 11396 + 8 | 0;
  $1259($4_1 | 0);
  $1260($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1251($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 11324 + 8 | 0;
  $1261($4_1 | 0);
  $1262($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1252($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 11256 + 8 | 0;
  $1263($4_1 | 0);
  $1264($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1253($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $323($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1254($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $319($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1255($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $1314($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1256($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $1316($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1257($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $1318($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1258($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1320(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1259($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1318($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1260($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1319(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1261($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1316($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1262($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1317(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1263($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1314($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1264($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1315(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1265($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[292 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1266($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1267($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4_1 >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP8[($4_1 + 15 | 0) >> 0] = 1 & 1 | 0;
      break label$1;
     }
     HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP8[($4_1 + 15 | 0) >> 0] = 0 & 1 | 0;
  }
  return (HEAPU8[($4_1 + 15 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $1268($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4_1 >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP8[($4_1 + 15 | 0) >> 0] = 1 & 1 | 0;
      break label$1;
     }
     HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP8[($4_1 + 15 | 0) >> 0] = 0 & 1 | 0;
  }
  return (HEAPU8[($4_1 + 15 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $1269($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $1300(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $1301($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $1301($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1270($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $956(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[$3_1 >> 2] = HEAP32[($139(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      if ((HEAPU8[((HEAP32[$3_1 >> 2] | 0) + 117 | 0) >> 0] | 0) & 1 | 0) {
       break label$4
      }
      break label$3;
     }
     label$5 : {
      if (!((HEAPU8[((HEAP32[$3_1 >> 2] | 0) + 116 | 0) >> 0] | 0) & 1 | 0)) {
       break label$5
      }
      $1270($762(HEAP32[$3_1 >> 2] | 0 | 0) | 0 | 0);
     }
     HEAP8[((HEAP32[$3_1 >> 2] | 0) + 116 | 0) >> 0] = 0;
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1271($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
  $1612($6_1 + 32 | 0 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0);
  label$1 : {
   label$2 : while (1) {
    if (!(($1302($6_1 + 32 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    $1304($6_1 + 8 | 0 | 0, $1303($6_1 + 32 | 0 | 0) | 0 | 0) | 0;
    label$3 : {
     if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     $1274($7_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0);
    }
    $1305($6_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $6_1 + 64 | 0;
  return;
 }
 
 function $1272($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1273($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1274($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $14_1 = 0, $38_1 = 0, $56_1 = 0, $37_1 = 0, $55_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     $14_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     if (($1162(FUNCTION_TABLE[HEAP32[((HEAP32[$14_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($14_1) | 0 | 0, 26400 | 0) | 0) & 1 | 0) {
      break label$2
     }
    }
    break label$1;
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = $1770(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
   label$4 : {
    if ($857(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0) {
     break label$4
    }
    $1242($6_1 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
   HEAP32[($5_1 + 8 | 0) >> 2] = $857(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$5
     }
     $37_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
     $38_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = $38_1 + 1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($1071($37_1 | 0, $38_1 | 0) | 0) >> 2] | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0;
     label$7 : {
      label$8 : while (1) {
       if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$7
       }
       $55_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
       $56_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       HEAP32[($5_1 + 12 | 0) >> 2] = $56_1 + 1 | 0;
       $1242($6_1 | 0, HEAP32[($139($6_1 + 8 | 0 | 0, HEAP32[($1071($55_1 | 0, $56_1 | 0) | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0);
       continue label$8;
      };
     }
     continue label$6;
    };
   }
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $1275($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1276($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1277($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $56_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 24 | 0) >> 2] = 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $956($4_1 + 120 | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 20 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[($139($4_1 + 120 | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
    HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 60 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 32 | 0) >> 2]);
    HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2]);
    HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 68 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2]);
    HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 72 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 2]);
    HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 76 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2]);
    HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 80 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 52 | 0) >> 2]);
    HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 84 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 56 | 0) >> 2]);
    HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 88 | 0) >> 0] = 1;
    HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $1275($4_1 + 104 | 0 | 0) | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    $56_1 = HEAP32[($1276($4_1 + 104 | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$56_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($56_1);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $1278($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1279($4_1 | 0);
  $1280($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1279($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 76 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
  HEAP32[($3_1 + 72 | 0) >> 2] = 0;
  HEAP32[($3_1 + 68 | 0) >> 2] = $956($4_1 + 8 | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 72 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 68 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $754(HEAP32[($139($4_1 + 8 | 0 | 0, HEAP32[($3_1 + 72 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 72 | 0) >> 2] = (HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($3_1 + 64 | 0) >> 2] = 0;
  HEAP32[($3_1 + 60 | 0) >> 2] = $1235($4_1 + 56 | 0 | 0) | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($3_1 + 64 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 60 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 56 | 0) >> 2] = HEAP32[($988($4_1 + 56 | 0 | 0, HEAP32[($3_1 + 64 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($3_1 + 52 | 0) >> 2] = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
    HEAP8[((HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 28 | 0) >> 0] = (HEAPU8[((HEAP32[((HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 48 | 0) >> 0] | 0) & 1 | 0;
    HEAP8[((HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 29 | 0) >> 0] = (HEAPU8[((HEAP32[((HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 49 | 0) >> 0] | 0) & 1 | 0;
    HEAPF32[((HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 32 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 52 | 0) >> 2]);
    HEAPF32[((HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 36 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 56 | 0) >> 2]);
    HEAP32[($3_1 + 64 | 0) >> 2] = (HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[($3_1 + 48 | 0) >> 2] = 0;
  HEAP32[($3_1 + 44 | 0) >> 2] = $1236($4_1 + 72 | 0 | 0) | 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($3_1 + 48 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 44 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[($1239($4_1 + 72 | 0 | 0, HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
    HEAP32[($3_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAPF32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 28 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 44 | 0) >> 2]);
    HEAPF32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 32 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 48 | 0) >> 2]);
    HEAPF32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 36 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 52 | 0) >> 2]);
    HEAPF32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 40 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 56 | 0) >> 2]);
    HEAP32[($3_1 + 48 | 0) >> 2] = (HEAP32[($3_1 + 48 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[($3_1 + 28 | 0) >> 2] = 0;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1237($4_1 + 88 | 0 | 0) | 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($3_1 + 28 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$7
    }
    HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[($1126($4_1 + 88 | 0 | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAPF32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 28 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 60 | 0) >> 2]);
    HEAPF32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 32 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2]);
    HEAPF32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 36 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 68 | 0) >> 2]);
    HEAPF32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 40 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 72 | 0) >> 2]);
    HEAP32[($3_1 + 28 | 0) >> 2] = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  global$0 = $3_1 + 80 | 0;
  return;
 }
 
 function $1280($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  $135($4_1 + 40 | 0 | 0);
  HEAP32[($3_1 + 24 | 0) >> 2] = 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $80($4_1 + 24 | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 20 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $886($4_1 + 40 | 0 | 0, $82($4_1 + 24 | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($3_1 + 16 | 0) >> 2] = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $80($4_1 + 24 | 0 | 0) | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    $1631(HEAP32[($82($4_1 + 24 | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $1281($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $1282((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $1282($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $42_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   if (($131(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5609 | 0, 4378 | 0, 81 | 0, 5111 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  label$2 : {
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < ($956(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($139(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     label$5 : {
      if (!(($627($777($759(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      break label$2;
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $42_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $42_1 | 0;
 }
 
 function $1283($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $1284((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $1284($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $42_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   if (($131(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5609 | 0, 4378 | 0, 81 | 0, 5111 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  label$2 : {
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < ($80(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($82(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     label$5 : {
      if (!(($627($1643($1633(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      break label$2;
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $42_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $42_1 | 0;
 }
 
 function $1285($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1509(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$1
   }
   fimport$0(5490 | 0, 2772 | 0, 307 | 0, 4005 | 0);
   wasm2js_trap();
  }
  $1286($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1286($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (!((HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 36 | 0) >> 2] = $5_1;
      $1613(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0);
      break label$4;
     }
     HEAP32[($4_1 + 32 | 0) >> 2] = 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = $80($5_1 + 24 | 0 | 0) | 0;
     label$6 : {
      label$7 : while (1) {
       if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 28 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$6
       }
       HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($82($5_1 + 24 | 0 | 0, HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
       HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
       HEAP32[($4_1 + 16 | 0) >> 2] = $1649(HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
       label$8 : {
        if (!(($131(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
         break label$8
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = $1610(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
        label$9 : {
         if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$9
         }
         $1632(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
        }
       }
       HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
       continue label$7;
      };
     }
    }
   }
   HEAP32[($5_1 + 136 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
   $1227($5_1 | 0);
  }
  global$0 = $4_1 + 48 | 0;
  return;
 }
 
 function $1287($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $51_1 = 0, $54_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   if (($131(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5649 | 0, 2772 | 0, 342 | 0, 1529 | 0);
   wasm2js_trap();
  }
  label$2 : {
   label$3 : {
    if (!((HEAP32[($6_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $1610(HEAP32[($6_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    label$4 : {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
     break label$2;
    }
   }
   label$5 : {
    label$6 : {
     if (!(($1523(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$6
     }
     $51_1 = $1610($1523(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
     break label$5;
    }
    $51_1 = 0;
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = $51_1;
  }
  $54_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $54_1 | 0;
 }
 
 function $1288($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if (($131(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5627 | 0, 2772 | 0, 355 | 0, 1515 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $80($6_1 + 24 | 0 | 0) | 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($82($6_1 + 24 | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    label$4 : {
     if (!(($627($1643(HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($5_1 + 4 | 0) >> 2] = 0;
     label$5 : {
      if (!(($131(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
       break label$5
      }
      HEAP32[($5_1 + 4 | 0) >> 2] = $1287($6_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
      label$6 : {
       if ((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$6
       }
       fimport$0(5416 | 0, 2772 | 0, 364 | 0, 1515 | 0);
       wasm2js_trap();
      }
     }
     $1632(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
     global$0 = $5_1 + 32 | 0;
     return;
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  HEAP32[$5_1 >> 2] = $125(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $1819(1810 | 0, $5_1 | 0) | 0;
  fimport$0(4728 | 0, 2772 | 0, 375 | 0, 1515 | 0);
  wasm2js_trap();
 }
 
 function $1289($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 160 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 160 | 0) >> 2]) + Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
  return;
 }
 
 function $1290($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1291($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0;
 }
 
 function $1292($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0 | 0;
 }
 
 function $1293($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 40 | 0 | 0;
 }
 
 function $1294($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 140 | 0 | 0;
 }
 
 function $1295($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 160 | 0) >> 2]));
 }
 
 function $1296($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 172 | 0) >> 2]));
 }
 
 function $1297($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 176 | 0) >> 2]));
 }
 
 function $1298($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 164 | 0) >> 2]));
 }
 
 function $1299($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $15_1 = Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 2]) * Math_fround((($751() | 0) & 1 | 0 ? -1 : 1) | 0));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($15_1);
 }
 
 function $1300($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1301($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1302($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $35_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 >= ($1306(HEAP32[$4_1 >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP8[($3_1 + 15 | 0) >> 0] = 0 & 1 | 0;
     break label$1;
    }
    label$4 : {
     if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 >= ($1308($1307(HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$4
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$2;
    }
    break label$2;
   };
   HEAP8[($3_1 + 15 | 0) >> 0] = 1 & 1 | 0;
  }
  $35_1 = (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $35_1 | 0;
 }
 
 function $1303($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1309($1307(HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  $13_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $1304($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  $124($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1305($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $112($4_1 + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1306($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1307($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 4 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1308($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1309($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 20) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1310($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1252($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1311($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1251($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1312($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1250($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1313($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1249($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1314($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1315($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1316($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1317($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1318($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1319($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1320($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1321($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 11648 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1322($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $26_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  $113($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 11528 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $1321($5_1 + 8 | 0 | 0) | 0;
  $674($5_1 + 24 | 0 | 0) | 0;
  HEAPF32[($5_1 + 36 | 0) >> 2] = Math_fround(1.0);
  HEAP8[($5_1 + 40 | 0) >> 0] = 0;
  label$1 : {
   if ((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$1
   }
   fimport$0(5435 | 0, 1942 | 0, 104 | 0, 1190 | 0);
   wasm2js_trap();
  }
  $26_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $26_1 | 0;
 }
 
 function $1323($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $15_1 = 0, $28_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[$4_1 >> 2] = 11528 + 8 | 0;
  $1324($4_1 + 8 | 0 | 0);
  $1325($4_1 + 8 | 0 | 0);
  label$1 : {
   if (!((HEAPU8[($4_1 + 40 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   $15_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   label$2 : {
    if (($15_1 | 0) == (0 | 0) & 1 | 0) {
     break label$2
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$15_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($15_1);
   }
  }
  $112($4_1 + 24 | 0 | 0) | 0;
  $1326($4_1 + 8 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  $28_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $28_1 | 0;
 }
 
 function $1324($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($1327(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($1328(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $1329(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1325($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1330($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1326($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 11648 + 8 | 0;
  $1325($4_1 | 0);
  $1331($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1327($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1328($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1329($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $1330($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1330($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1331($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1402(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1332($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[302 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1333($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $10_1 = 0, $57_1 = 0, $66_1 = 0, $878_1 = 0, $887_1 = 0, $916_1 = 0, $925_1 = 0, $1088_1 = 0, $1097_1 = 0, $1121_1 = 0, $25_1 = 0, $154_1 = 0, $169_1 = 0, $261_1 = 0, $386_1 = 0, $467_1 = 0, $521_1 = 0, $661_1 = 0, $760_1 = 0, $773_1 = 0, $864_1 = 0, $945_1 = 0, $956_1 = 0, $995_1 = 0, i64toi32_i32$0 = 0, $51_1 = 0, $1135_1 = Math_fround(0), $1136_1 = Math_fround(0), $1137_1 = Math_fround(0), $1138_1 = Math_fround(0), $1139_1 = Math_fround(0), $120_1 = 0, $136_1 = 0, $137_1 = 0, $170_1 = 0, $1140_1 = Math_fround(0), $1141_1 = Math_fround(0), $1144_1 = Math_fround(0), $1147_1 = Math_fround(0), $1148_1 = Math_fround(0), $1149_1 = Math_fround(0), $1150_1 = Math_fround(0), $1151_1 = Math_fround(0), $205_1 = 0, $208_1 = 0, $216_1 = 0, $232_1 = 0, $233_1 = 0, $262_1 = 0, $341_1 = 0, $349_1 = 0, $351_1 = 0, $367_1 = 0, $368_1 = 0, $418_1 = 0, $419_1 = 0, $441_1 = 0, $459_1 = 0, $1164_1 = Math_fround(0), $1165_1 = Math_fround(0), $469_1 = 0, $472_1 = 0, $477_1 = 0, $482_1 = 0, $486_1 = 0, $502_1 = 0, $503_1 = 0, $553_1 = 0, $554_1 = 0, $576_1 = 0, $594_1 = 0, $597_1 = 0, $602_1 = 0, $1168_1 = Math_fround(0), $1169_1 = Math_fround(0), $1172_1 = Math_fround(0), $1175_1 = Math_fround(0), $1176_1 = Math_fround(0), $1177_1 = Math_fround(0), $1178_1 = Math_fround(0), $1179_1 = Math_fround(0), $1180_1 = Math_fround(0), $1181_1 = Math_fround(0), $626_1 = 0, $642_1 = 0, $643_1 = 0, $693_1 = 0, $694_1 = 0, $716_1 = 0, $734_1 = 0, $740_1 = 0, $746_1 = 0, $752_1 = 0, $1182_1 = Math_fround(0), $1183_1 = Math_fround(0), $1187_1 = Math_fround(0), $1191_1 = Math_fround(0), $1192_1 = Math_fround(0), $778_1 = 0, $826_1 = 0, $975_1 = 0, $976_1 = 0, $1013_1 = 0, $1193_1 = Math_fround(0), $1194_1 = Math_fround(0), $1195_1 = Math_fround(0), $1037_1 = 0, $1053_1 = 0, $1054_1 = 0, $1108_1 = 0, $1131_1 = 0;
  $5_1 = global$0 - 384 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 376 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 372 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 368 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 376 | 0) >> 2] | 0;
  $10_1 = $1655(12 | 0, 1942 | 0, 118 | 0) | 0;
  i64toi32_i32$0 = 0;
  HEAP32[$10_1 >> 2] = 0;
  HEAP32[($10_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($10_1 + 8 | 0) >> 2] = 0;
  $1334($10_1 | 0) | 0;
  HEAP32[($5_1 + 356 | 0) >> 2] = $10_1;
  HEAP32[((HEAP32[($5_1 + 356 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($5_1 + 372 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 356 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAP32[($5_1 + 372 | 0) >> 2] | 0) + (HEAP32[($5_1 + 368 | 0) >> 2] | 0) | 0;
  $1325($6_1 + 8 | 0 | 0);
  $25_1 = $1655(232 | 0, 1942 | 0, 124 | 0) | 0;
  $1447($25_1 | 0) | 0;
  HEAP32[($5_1 + 360 | 0) >> 2] = $25_1;
  HEAP32[($5_1 + 352 | 0) >> 2] = $1335($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
  $1336((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 176 | 0 | 0, HEAP32[($5_1 + 352 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 348 | 0) >> 2] = $1335($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
  $1336((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 164 | 0 | 0, HEAP32[($5_1 + 348 | 0) >> 2] | 0 | 0);
  $111($5_1 + 336 | 0 | 0, 5541 | 0, 0 & 1 | 0 | 0) | 0;
  $51_1 = $627($5_1 + 336 | 0 | 0, (HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 164 | 0 | 0) | 0;
  $112($5_1 + 336 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!($51_1 & 1 | 0)) {
     break label$2
    }
    $57_1 = HEAP32[($5_1 + 356 | 0) >> 2] | 0;
    label$3 : {
     if (($57_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$57_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($57_1);
    }
    $66_1 = HEAP32[($5_1 + 360 | 0) >> 2] | 0;
    label$4 : {
     if (($66_1 | 0) == (0 | 0) & 1 | 0) {
      break label$4
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$66_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($66_1);
    }
    $1337($6_1 | 0, 5702 | 0, 6494 | 0);
    HEAP32[($5_1 + 380 | 0) >> 2] = 0;
    break label$1;
   }
   $1135_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
   HEAPF32[((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 148 | 0) >> 2] = $1135_1;
   $1136_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
   HEAPF32[((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 152 | 0) >> 2] = $1136_1;
   $1137_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
   HEAPF32[((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 156 | 0) >> 2] = $1137_1;
   $1138_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
   HEAPF32[((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 160 | 0) >> 2] = $1138_1;
   HEAP8[($5_1 + 367 | 0) >> 0] = ($1339($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
   label$5 : {
    if (!((HEAPU8[($5_1 + 367 | 0) >> 0] | 0) & 1 | 0)) {
     break label$5
    }
    $1139_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
    HEAPF32[((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 204 | 0) >> 2] = $1139_1;
    $1336((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 208 | 0 | 0, $1335($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0 | 0);
    $1336((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 220 | 0 | 0, $1335($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0 | 0);
   }
   HEAP32[($5_1 + 332 | 0) >> 2] = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
   HEAP32[($5_1 + 328 | 0) >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($5_1 + 328 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 332 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     $120_1 = (HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 188 | 0;
     HEAP32[($5_1 + 324 | 0) >> 2] = $1335($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
     $1341($120_1 | 0, $5_1 + 324 | 0 | 0);
     HEAP32[($5_1 + 328 | 0) >> 2] = (HEAP32[($5_1 + 328 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
   HEAP32[($5_1 + 320 | 0) >> 2] = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
   $136_1 = (HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 16 | 0;
   $137_1 = HEAP32[($5_1 + 320 | 0) >> 2] | 0;
   HEAP32[($5_1 + 316 | 0) >> 2] = 0;
   $1342($136_1 | 0, $137_1 | 0, $5_1 + 316 | 0 | 0);
   HEAP32[($5_1 + 312 | 0) >> 2] = 0;
   label$8 : {
    label$9 : while (1) {
     if (!((HEAP32[($5_1 + 312 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 320 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$8
     }
     HEAP32[($5_1 + 308 | 0) >> 2] = $1335($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
     label$10 : {
      label$11 : {
       if (HEAP32[($5_1 + 312 | 0) >> 2] | 0) {
        break label$11
       }
       $154_1 = 0;
       break label$10;
      }
      $154_1 = HEAP32[($952((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 16 | 0 | 0, $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0 | 0) | 0) >> 2] | 0;
     }
     HEAP32[($5_1 + 304 | 0) >> 2] = $154_1;
     $169_1 = $1655(64 | 0, 1942 | 0, 162 | 0) | 0;
     $170_1 = HEAP32[($5_1 + 312 | 0) >> 2] | 0;
     $111($5_1 + 288 | 0 | 0, HEAP32[($5_1 + 308 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     $775($169_1 | 0, $170_1 | 0, $5_1 + 288 | 0 | 0, HEAP32[($5_1 + 304 | 0) >> 2] | 0 | 0) | 0;
     $112($5_1 + 288 | 0 | 0) | 0;
     HEAP32[($5_1 + 300 | 0) >> 2] = $169_1;
     $1140_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 300 | 0) >> 2] | 0) + 36 | 0) >> 2] = $1140_1;
     $1141_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 300 | 0) >> 2] | 0) + 28 | 0) >> 2] = Math_fround($1141_1 * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]));
     $1144_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 300 | 0) >> 2] | 0) + 32 | 0) >> 2] = Math_fround($1144_1 * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]));
     $1147_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 300 | 0) >> 2] | 0) + 40 | 0) >> 2] = $1147_1;
     $1148_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 300 | 0) >> 2] | 0) + 44 | 0) >> 2] = $1148_1;
     $1149_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 300 | 0) >> 2] | 0) + 48 | 0) >> 2] = $1149_1;
     $1150_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 300 | 0) >> 2] | 0) + 52 | 0) >> 2] = $1150_1;
     $1151_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 300 | 0) >> 2] | 0) + 24 | 0) >> 2] = Math_fround($1151_1 * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]));
     $205_1 = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     HEAP32[((HEAP32[($5_1 + 300 | 0) >> 2] | 0) + 56 | 0) >> 2] = $205_1;
     $208_1 = $1339($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
     HEAP8[((HEAP32[($5_1 + 300 | 0) >> 2] | 0) + 60 | 0) >> 0] = $208_1 & 1 | 0;
     label$12 : {
      if (!((HEAPU8[($5_1 + 367 | 0) >> 0] | 0) & 1 | 0)) {
       break label$12
      }
      $1343($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
     }
     $216_1 = HEAP32[($5_1 + 300 | 0) >> 2] | 0;
     HEAP32[($952((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($5_1 + 312 | 0) >> 2] | 0 | 0) | 0) >> 2] = $216_1;
     HEAP32[($5_1 + 312 | 0) >> 2] = (HEAP32[($5_1 + 312 | 0) >> 2] | 0) + 1 | 0;
     continue label$9;
    };
   }
   HEAP32[($5_1 + 284 | 0) >> 2] = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
   $232_1 = (HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 32 | 0;
   $233_1 = HEAP32[($5_1 + 284 | 0) >> 2] | 0;
   HEAP32[($5_1 + 280 | 0) >> 2] = 0;
   $1344($232_1 | 0, $233_1 | 0, $5_1 + 280 | 0 | 0);
   HEAP32[($5_1 + 276 | 0) >> 2] = 0;
   label$13 : {
    label$14 : while (1) {
     if (!((HEAP32[($5_1 + 276 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 284 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$13
     }
     HEAP32[($5_1 + 272 | 0) >> 2] = $1335($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($5_1 + 268 | 0) >> 2] = HEAP32[($952((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 16 | 0 | 0, $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0 | 0) | 0) >> 2] | 0;
     $261_1 = $1655(84 | 0, 1942 | 0, 183 | 0) | 0;
     $262_1 = HEAP32[($5_1 + 276 | 0) >> 2] | 0;
     $111($5_1 + 248 | 0 | 0, HEAP32[($5_1 + 272 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     $1641($261_1 | 0, $262_1 | 0, $5_1 + 248 | 0 | 0, HEAP32[($5_1 + 268 | 0) >> 2] | 0 | 0) | 0;
     $112($5_1 + 248 | 0 | 0) | 0;
     HEAP32[($5_1 + 264 | 0) >> 2] = $261_1;
     $1345($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, $1645(HEAP32[($5_1 + 264 | 0) >> 2] | 0 | 0) | 0 | 0);
     HEAP8[($5_1 + 247 | 0) >> 0] = $1346($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
     HEAP8[($5_1 + 246 | 0) >> 0] = $1346($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
     HEAP8[($5_1 + 245 | 0) >> 0] = $1346($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
     HEAP8[($5_1 + 244 | 0) >> 0] = $1346($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
     label$15 : {
      label$16 : {
       if (!(((HEAPU8[($5_1 + 247 | 0) >> 0] | 0) & 255 | 0 | 0) == (255 | 0) & 1 | 0)) {
        break label$16
       }
       if (!(((HEAPU8[($5_1 + 246 | 0) >> 0] | 0) & 255 | 0 | 0) == (255 | 0) & 1 | 0)) {
        break label$16
       }
       if (!(((HEAPU8[($5_1 + 245 | 0) >> 0] | 0) & 255 | 0 | 0) == (255 | 0) & 1 | 0)) {
        break label$16
       }
       if (((HEAPU8[($5_1 + 244 | 0) >> 0] | 0) & 255 | 0 | 0) == (255 | 0) & 1 | 0) {
        break label$15
       }
      }
      $816($1646(HEAP32[($5_1 + 264 | 0) >> 2] | 0 | 0) | 0 | 0, Math_fround(Math_fround(Math_fround((HEAPU8[($5_1 + 247 | 0) >> 0] | 0) & 255 | 0 | 0) / Math_fround(255.0))), Math_fround(Math_fround(Math_fround((HEAPU8[($5_1 + 246 | 0) >> 0] | 0) & 255 | 0 | 0) / Math_fround(255.0))), Math_fround(Math_fround(Math_fround((HEAPU8[($5_1 + 245 | 0) >> 0] | 0) & 255 | 0 | 0) / Math_fround(255.0))), Math_fround(Math_fround(1.0))) | 0;
      $1648(HEAP32[($5_1 + 264 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0);
     }
     $341_1 = $1347($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 360 | 0) >> 2] | 0 | 0) | 0;
     $1348((HEAP32[($5_1 + 264 | 0) >> 2] | 0) + 68 | 0 | 0, $341_1 | 0) | 0;
     $349_1 = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     HEAP32[((HEAP32[($5_1 + 264 | 0) >> 2] | 0) + 80 | 0) >> 2] = $349_1;
     $351_1 = HEAP32[($5_1 + 264 | 0) >> 2] | 0;
     HEAP32[($1214((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 32 | 0 | 0, HEAP32[($5_1 + 276 | 0) >> 2] | 0 | 0) | 0) >> 2] = $351_1;
     HEAP32[($5_1 + 276 | 0) >> 2] = (HEAP32[($5_1 + 276 | 0) >> 2] | 0) + 1 | 0;
     continue label$14;
    };
   }
   HEAP32[($5_1 + 240 | 0) >> 2] = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
   $367_1 = (HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 100 | 0;
   $368_1 = HEAP32[($5_1 + 240 | 0) >> 2] | 0;
   HEAP32[($5_1 + 236 | 0) >> 2] = 0;
   $1349($367_1 | 0, $368_1 | 0, $5_1 + 236 | 0 | 0);
   HEAP32[($5_1 + 232 | 0) >> 2] = 0;
   label$17 : {
    label$18 : while (1) {
     if (!((HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$17
     }
     HEAP32[($5_1 + 228 | 0) >> 2] = $1335($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
     $386_1 = $1655(60 | 0, 1942 | 0, 204 | 0) | 0;
     $111($5_1 + 208 | 0 | 0, HEAP32[($5_1 + 228 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     $966($386_1 | 0, $5_1 + 208 | 0 | 0) | 0;
     $112($5_1 + 208 | 0 | 0) | 0;
     HEAP32[($5_1 + 224 | 0) >> 2] = $386_1;
     $832(HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0, $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0 | 0);
     $834(HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0, ($1339($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0) & 1 | 0 | 0);
     HEAP32[($5_1 + 204 | 0) >> 2] = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     $418_1 = (HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 24 | 0;
     $419_1 = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
     HEAP32[($5_1 + 200 | 0) >> 2] = 0;
     $1342($418_1 | 0, $419_1 | 0, $5_1 + 200 | 0 | 0);
     HEAP32[($5_1 + 196 | 0) >> 2] = 0;
     label$19 : {
      label$20 : while (1) {
       if (!((HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 204 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$19
       }
       $441_1 = HEAP32[($952((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 16 | 0 | 0, $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0 | 0) | 0) >> 2] | 0;
       HEAP32[($952((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0) | 0) >> 2] = $441_1;
       HEAP32[($5_1 + 196 | 0) >> 2] = (HEAP32[($5_1 + 196 | 0) >> 2] | 0) + 1 | 0;
       continue label$20;
      };
     }
     $459_1 = HEAP32[($952((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 16 | 0 | 0, $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 40 | 0) >> 2] = $459_1;
     $1164_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 52 | 0) >> 2] = $1164_1;
     $1165_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 56 | 0) >> 2] = Math_fround($1165_1 * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]));
     $467_1 = 24;
     $469_1 = (($1350($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0) << $467_1 | 0) >> $467_1 | 0;
     HEAP32[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 44 | 0) >> 2] = $469_1;
     $472_1 = $1339($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
     HEAP8[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 48 | 0) >> 0] = $472_1 & 1 | 0;
     $477_1 = $1339($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
     HEAP8[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 49 | 0) >> 0] = $477_1 & 1 | 0;
     $482_1 = $1339($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
     HEAP8[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 50 | 0) >> 0] = $482_1 & 1 | 0;
     $486_1 = HEAP32[($5_1 + 224 | 0) >> 2] | 0;
     HEAP32[($1217((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 100 | 0 | 0, HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0) | 0) >> 2] = $486_1;
     HEAP32[($5_1 + 232 | 0) >> 2] = (HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 1 | 0;
     continue label$18;
    };
   }
   HEAP32[($5_1 + 192 | 0) >> 2] = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
   $502_1 = (HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 116 | 0;
   $503_1 = HEAP32[($5_1 + 192 | 0) >> 2] | 0;
   HEAP32[($5_1 + 188 | 0) >> 2] = 0;
   $1351($502_1 | 0, $503_1 | 0, $5_1 + 188 | 0 | 0);
   HEAP32[($5_1 + 184 | 0) >> 2] = 0;
   label$21 : {
    label$22 : while (1) {
     if (!((HEAP32[($5_1 + 184 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 192 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$21
     }
     HEAP32[($5_1 + 180 | 0) >> 2] = $1335($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
     $521_1 = $1655(88 | 0, 1942 | 0, 226 | 0) | 0;
     $111($5_1 + 160 | 0 | 0, HEAP32[($5_1 + 180 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     $1686($521_1 | 0, $5_1 + 160 | 0 | 0) | 0;
     $112($5_1 + 160 | 0 | 0) | 0;
     HEAP32[($5_1 + 176 | 0) >> 2] = $521_1;
     $832(HEAP32[($5_1 + 176 | 0) >> 2] | 0 | 0, $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0 | 0);
     $834(HEAP32[($5_1 + 176 | 0) >> 2] | 0 | 0, ($1339($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0) & 1 | 0 | 0);
     HEAP32[($5_1 + 156 | 0) >> 2] = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     $553_1 = (HEAP32[($5_1 + 176 | 0) >> 2] | 0) + 24 | 0;
     $554_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
     HEAP32[($5_1 + 152 | 0) >> 2] = 0;
     $1342($553_1 | 0, $554_1 | 0, $5_1 + 152 | 0 | 0);
     HEAP32[($5_1 + 148 | 0) >> 2] = 0;
     label$23 : {
      label$24 : while (1) {
       if (!((HEAP32[($5_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 156 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$23
       }
       $576_1 = HEAP32[($952((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 16 | 0 | 0, $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0 | 0) | 0) >> 2] | 0;
       HEAP32[($952((HEAP32[($5_1 + 176 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($5_1 + 148 | 0) >> 2] | 0 | 0) | 0) >> 2] = $576_1;
       HEAP32[($5_1 + 148 | 0) >> 2] = (HEAP32[($5_1 + 148 | 0) >> 2] | 0) + 1 | 0;
       continue label$24;
      };
     }
     $594_1 = HEAP32[($952((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 16 | 0 | 0, $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 176 | 0) >> 2] | 0) + 40 | 0) >> 2] = $594_1;
     $597_1 = $1339($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
     HEAP8[((HEAP32[($5_1 + 176 | 0) >> 2] | 0) + 85 | 0) >> 0] = $597_1 & 1 | 0;
     $602_1 = $1339($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
     HEAP8[((HEAP32[($5_1 + 176 | 0) >> 2] | 0) + 84 | 0) >> 0] = $602_1 & 1 | 0;
     $1168_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 176 | 0) >> 2] | 0) + 60 | 0) >> 2] = $1168_1;
     $1169_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 176 | 0) >> 2] | 0) + 64 | 0) >> 2] = Math_fround($1169_1 * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]));
     $1172_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 176 | 0) >> 2] | 0) + 68 | 0) >> 2] = Math_fround($1172_1 * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]));
     $1175_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 176 | 0) >> 2] | 0) + 72 | 0) >> 2] = $1175_1;
     $1176_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 176 | 0) >> 2] | 0) + 76 | 0) >> 2] = $1176_1;
     $1177_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 176 | 0) >> 2] | 0) + 80 | 0) >> 2] = $1177_1;
     $1178_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 176 | 0) >> 2] | 0) + 44 | 0) >> 2] = $1178_1;
     $1179_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 176 | 0) >> 2] | 0) + 48 | 0) >> 2] = $1179_1;
     $1180_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 176 | 0) >> 2] | 0) + 52 | 0) >> 2] = $1180_1;
     $1181_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 176 | 0) >> 2] | 0) + 56 | 0) >> 2] = $1181_1;
     $626_1 = HEAP32[($5_1 + 176 | 0) >> 2] | 0;
     HEAP32[($1221((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 116 | 0 | 0, HEAP32[($5_1 + 184 | 0) >> 2] | 0 | 0) | 0) >> 2] = $626_1;
     HEAP32[($5_1 + 184 | 0) >> 2] = (HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 1 | 0;
     continue label$22;
    };
   }
   HEAP32[($5_1 + 144 | 0) >> 2] = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
   $642_1 = (HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 132 | 0;
   $643_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
   HEAP32[($5_1 + 140 | 0) >> 2] = 0;
   $1352($642_1 | 0, $643_1 | 0, $5_1 + 140 | 0 | 0);
   HEAP32[($5_1 + 136 | 0) >> 2] = 0;
   label$25 : {
    label$26 : while (1) {
     if (!((HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 144 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$25
     }
     HEAP32[($5_1 + 132 | 0) >> 2] = $1335($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0;
     $661_1 = $1655(76 | 0, 1942 | 0, 254 | 0) | 0;
     $111($5_1 + 112 | 0 | 0, HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     $1110($661_1 | 0, $5_1 + 112 | 0 | 0) | 0;
     $112($5_1 + 112 | 0 | 0) | 0;
     HEAP32[($5_1 + 128 | 0) >> 2] = $661_1;
     $832(HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0, $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0 | 0);
     $834(HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0, ($1339($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0) & 1 | 0 | 0);
     HEAP32[($5_1 + 108 | 0) >> 2] = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     $693_1 = (HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 24 | 0;
     $694_1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
     HEAP32[($5_1 + 104 | 0) >> 2] = 0;
     $1342($693_1 | 0, $694_1 | 0, $5_1 + 104 | 0 | 0);
     HEAP32[($5_1 + 100 | 0) >> 2] = 0;
     label$27 : {
      label$28 : while (1) {
       if (!((HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$27
       }
       $716_1 = HEAP32[($952((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 16 | 0 | 0, $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0 | 0) | 0) >> 2] | 0;
       HEAP32[($952((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0) | 0) >> 2] = $716_1;
       HEAP32[($5_1 + 100 | 0) >> 2] = (HEAP32[($5_1 + 100 | 0) >> 2] | 0) + 1 | 0;
       continue label$28;
      };
     }
     $734_1 = HEAP32[($1214((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 32 | 0 | 0, $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 40 | 0) >> 2] = $734_1;
     $740_1 = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 44 | 0) >> 2] = $740_1;
     $746_1 = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 48 | 0) >> 2] = $746_1;
     $752_1 = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 52 | 0) >> 2] = $752_1;
     $1182_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 56 | 0) >> 2] = $1182_1;
     $1183_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 60 | 0) >> 2] = $1183_1;
     label$29 : {
      if (HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
       break label$29
      }
      $760_1 = HEAP32[($5_1 + 128 | 0) >> 2] | 0;
      HEAPF32[($760_1 + 60 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($760_1 + 60 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]));
     }
     $1187_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 64 | 0) >> 2] = $1187_1;
     label$30 : {
      label$31 : {
       if (!(HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0)) {
        break label$31
       }
       if (!((HEAP32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$30
       }
      }
      $773_1 = HEAP32[($5_1 + 128 | 0) >> 2] | 0;
      HEAPF32[($773_1 + 64 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($773_1 + 64 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]));
     }
     $1191_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 68 | 0) >> 2] = $1191_1;
     $1192_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 128 | 0) >> 2] | 0) + 72 | 0) >> 2] = $1192_1;
     $778_1 = HEAP32[($5_1 + 128 | 0) >> 2] | 0;
     HEAP32[($1225((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 132 | 0 | 0, HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0) | 0) >> 2] = $778_1;
     HEAP32[($5_1 + 136 | 0) >> 2] = (HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 1 | 0;
     continue label$26;
    };
   }
   HEAP32[($5_1 + 96 | 0) >> 2] = $1353($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0, HEAP32[($5_1 + 360 | 0) >> 2] | 0 | 0, (HEAPU8[($5_1 + 367 | 0) >> 0] | 0) & 1 | 0 | 0) | 0;
   label$32 : {
    if (!((HEAP32[($5_1 + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$32
    }
    HEAP32[((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 64 | 0) >> 2] = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
    $1354((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 48 | 0 | 0, $5_1 + 96 | 0 | 0);
   }
   HEAP32[($5_1 + 92 | 0) >> 2] = 0;
   HEAP32[($5_1 + 88 | 0) >> 2] = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
   label$33 : {
    label$34 : while (1) {
     if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 88 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$33
     }
     $826_1 = (HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 48 | 0;
     HEAP32[($5_1 + 84 | 0) >> 2] = $1353($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0, HEAP32[($5_1 + 360 | 0) >> 2] | 0 | 0, (HEAPU8[($5_1 + 367 | 0) >> 0] | 0) & 1 | 0 | 0) | 0;
     $1354($826_1 | 0, $5_1 + 84 | 0 | 0);
     HEAP32[($5_1 + 92 | 0) >> 2] = (HEAP32[($5_1 + 92 | 0) >> 2] | 0) + 1 | 0;
     continue label$34;
    };
   }
   HEAP32[($5_1 + 80 | 0) >> 2] = 0;
   HEAP32[($5_1 + 76 | 0) >> 2] = $1327($6_1 + 8 | 0 | 0) | 0;
   label$35 : {
    label$36 : while (1) {
     if (!((HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$35
     }
     HEAP32[($5_1 + 72 | 0) >> 2] = HEAP32[($1328($6_1 + 8 | 0 | 0, HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     label$37 : {
      label$38 : {
       if ($131((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 8 | 0 | 0) | 0) {
        break label$38
       }
       $864_1 = $1523(HEAP32[($5_1 + 360 | 0) >> 2] | 0 | 0) | 0;
       break label$37;
      }
      $864_1 = $1509(HEAP32[($5_1 + 360 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
     }
     HEAP32[($5_1 + 68 | 0) >> 2] = $864_1;
     label$39 : {
      if (!((HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
       break label$39
      }
      $878_1 = HEAP32[($5_1 + 356 | 0) >> 2] | 0;
      label$40 : {
       if (($878_1 | 0) == (0 | 0) & 1 | 0) {
        break label$40
       }
       FUNCTION_TABLE[HEAP32[((HEAP32[$878_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($878_1);
      }
      $887_1 = HEAP32[($5_1 + 360 | 0) >> 2] | 0;
      label$41 : {
       if (($887_1 | 0) == (0 | 0) & 1 | 0) {
        break label$41
       }
       FUNCTION_TABLE[HEAP32[((HEAP32[$887_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($887_1);
      }
      $1337($6_1 | 0, 6252 | 0, $125((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 8 | 0 | 0) | 0 | 0);
      HEAP32[($5_1 + 380 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP32[($5_1 + 64 | 0) >> 2] = $1610(HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 24 | 0 | 0) | 0;
     label$42 : {
      if (!((HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
       break label$42
      }
      $916_1 = HEAP32[($5_1 + 356 | 0) >> 2] | 0;
      label$43 : {
       if (($916_1 | 0) == (0 | 0) & 1 | 0) {
        break label$43
       }
       FUNCTION_TABLE[HEAP32[((HEAP32[$916_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($916_1);
      }
      $925_1 = HEAP32[($5_1 + 360 | 0) >> 2] | 0;
      label$44 : {
       if (($925_1 | 0) == (0 | 0) & 1 | 0) {
        break label$44
       }
       FUNCTION_TABLE[HEAP32[((HEAP32[$925_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($925_1);
      }
      $1337($6_1 | 0, 6269 | 0, $125((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 24 | 0 | 0) | 0 | 0);
      HEAP32[($5_1 + 380 | 0) >> 2] = 0;
      break label$1;
     }
     label$45 : {
      label$46 : {
       if (!((HEAPU8[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 36 | 0) >> 0] | 0) & 1 | 0)) {
        break label$46
       }
       $945_1 = HEAP32[($5_1 + 64 | 0) >> 2] | 0;
       break label$45;
      }
      $945_1 = HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     }
     HEAP32[((HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] = $945_1;
     $1055(HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0);
     $1051(HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     $956_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$956_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($956_1, HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0);
     HEAP32[($5_1 + 80 | 0) >> 2] = (HEAP32[($5_1 + 80 | 0) >> 2] | 0) + 1 | 0;
     continue label$36;
    };
   }
   $1324($6_1 + 8 | 0 | 0);
   $1325($6_1 + 8 | 0 | 0);
   HEAP32[($5_1 + 60 | 0) >> 2] = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
   $975_1 = (HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 68 | 0;
   $976_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
   HEAP32[($5_1 + 56 | 0) >> 2] = 0;
   $1355($975_1 | 0, $976_1 | 0, $5_1 + 56 | 0 | 0);
   HEAP32[($5_1 + 52 | 0) >> 2] = 0;
   label$47 : {
    label$48 : while (1) {
     if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$47
     }
     HEAP32[($5_1 + 48 | 0) >> 2] = $1347($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 360 | 0) >> 2] | 0 | 0) | 0;
     $995_1 = $1655(56 | 0, 1942 | 0, 317 | 0) | 0;
     $111($5_1 + 32 | 0 | 0, HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
     $910($995_1 | 0, $5_1 + 32 | 0 | 0) | 0;
     $112($5_1 + 32 | 0 | 0) | 0;
     HEAP32[($5_1 + 44 | 0) >> 2] = $995_1;
     $1013_1 = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
     HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 2] = $1013_1;
     $1193_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 20 | 0) >> 2] = $1193_1;
     $1336((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 24 | 0 | 0, $1335($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0 | 0);
     $1336((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 36 | 0 | 0, $1335($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0 | 0);
     label$49 : {
      if (($1356((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 36 | 0 | 0) | 0) & 1 | 0) {
       break label$49
      }
      $1194_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
      HEAPF32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 48 | 0) >> 2] = $1194_1;
      $1195_1 = Math_fround($1338($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0));
      HEAPF32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 52 | 0) >> 2] = $1195_1;
     }
     $1037_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
     HEAP32[($1357((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 68 | 0 | 0, HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2] = $1037_1;
     HEAP32[($5_1 + 52 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 1 | 0;
     continue label$48;
    };
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = $1340($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
   $1053_1 = (HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 84 | 0;
   $1054_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
   HEAP32[($5_1 + 24 | 0) >> 2] = 0;
   $1358($1053_1 | 0, $1054_1 | 0, $5_1 + 24 | 0 | 0);
   HEAP32[($5_1 + 20 | 0) >> 2] = 0;
   label$50 : {
    label$51 : while (1) {
     if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$50
     }
     $111($5_1 + 8 | 0 | 0, $1335($6_1 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0) | 0 | 0, 1 & 1 | 0 | 0) | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $1359($6_1 | 0, $5_1 + 8 | 0 | 0, HEAP32[($5_1 + 356 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 360 | 0) >> 2] | 0 | 0) | 0;
     label$52 : {
      label$53 : {
       if ((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$53
       }
       $1088_1 = HEAP32[($5_1 + 356 | 0) >> 2] | 0;
       label$54 : {
        if (($1088_1 | 0) == (0 | 0) & 1 | 0) {
         break label$54
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$1088_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($1088_1);
       }
       $1097_1 = HEAP32[($5_1 + 360 | 0) >> 2] | 0;
       label$55 : {
        if (($1097_1 | 0) == (0 | 0) & 1 | 0) {
         break label$55
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$1097_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($1097_1);
       }
       HEAP32[($5_1 + 380 | 0) >> 2] = 0;
       HEAP32[$5_1 >> 2] = 1;
       break label$52;
      }
      $1108_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      HEAP32[($1360((HEAP32[($5_1 + 360 | 0) >> 2] | 0) + 84 | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] = $1108_1;
      HEAP32[$5_1 >> 2] = 0;
     }
     $112($5_1 + 8 | 0 | 0) | 0;
     label$56 : {
      switch (HEAP32[$5_1 >> 2] | 0 | 0) {
      case 1:
       break label$1;
      default:
       break label$56;
      };
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$51;
    };
   }
   $1121_1 = HEAP32[($5_1 + 356 | 0) >> 2] | 0;
   label$57 : {
    if (($1121_1 | 0) == (0 | 0) & 1 | 0) {
     break label$57
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$1121_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($1121_1);
   }
   HEAP32[($5_1 + 380 | 0) >> 2] = HEAP32[($5_1 + 360 | 0) >> 2] | 0;
  }
  $1131_1 = HEAP32[($5_1 + 380 | 0) >> 2] | 0;
  global$0 = $5_1 + 384 | 0;
  return $1131_1 | 0;
 }
 
 function $1334($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 11584 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1335($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $26_1 = 0, $36_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1340(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($4_1 + 16 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $942(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, 1942 | 0, 373 | 0) | 0;
   $1798(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 16 | 0) >> 2] | 0) - 1 | 0 | 0) | 0;
   $26_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   HEAP32[($26_1 + 4 | 0) >> 2] = (HEAP32[($26_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) - 1 | 0) | 0;
   HEAP8[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] = 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  }
  $36_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $36_1 | 0;
 }
 
 function $1336($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $115(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4464 | 0, 102 | 0);
   }
   label$4 : {
    if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$4
    }
    HEAP32[($5_1 + 4 | 0) >> 2] = 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($5_1 + 4 | 0) >> 2] = $1821(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1337($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 288 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 284 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 280 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 276 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 284 | 0) >> 2] | 0;
  $1928($5_1 + 16 | 0 | 0, HEAP32[($5_1 + 280 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1821(HEAP32[($5_1 + 280 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 276 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1929(($5_1 + 16 | 0) + (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0 | 0, HEAP32[($5_1 + 276 | 0) >> 2] | 0 | 0, 255 - (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0 | 0) | 0;
  }
  $111($5_1 | 0, $5_1 + 16 | 0 | 0, 0 & 1 | 0 | 0) | 0;
  $652($6_1 + 24 | 0 | 0, $5_1 | 0) | 0;
  $112($5_1 | 0) | 0;
  global$0 = $5_1 + 288 | 0;
  return;
 }
 
 function $1338($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = $1343(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $10_1 = Math_fround(HEAPF32[$4_1 >> 2]);
  global$0 = $4_1 + 16 | 0;
  return Math_fround($10_1);
 }
 
 function $1339($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $15_1 = (($1346(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != (0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $1340($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $75_1 = 0, $90_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 7 | 0) >> 0] = $2_1;
  $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP8[($5_1 + 6 | 0) >> 0] = $1346($7_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = ((HEAPU8[($5_1 + 6 | 0) >> 0] | 0) & 255 | 0) & 127 | 0;
  label$1 : {
   if (!(((HEAPU8[($5_1 + 6 | 0) >> 0] | 0) & 255 | 0) & 128 | 0)) {
    break label$1
   }
   HEAP8[($5_1 + 6 | 0) >> 0] = $1346($7_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | ((((HEAPU8[($5_1 + 6 | 0) >> 0] | 0) & 255 | 0) & 127 | 0) << 7 | 0) | 0;
   label$2 : {
    if (!(((HEAPU8[($5_1 + 6 | 0) >> 0] | 0) & 255 | 0) & 128 | 0)) {
     break label$2
    }
    HEAP8[($5_1 + 6 | 0) >> 0] = $1346($7_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | ((((HEAPU8[($5_1 + 6 | 0) >> 0] | 0) & 255 | 0) & 127 | 0) << 14 | 0) | 0;
    label$3 : {
     if (!(((HEAPU8[($5_1 + 6 | 0) >> 0] | 0) & 255 | 0) & 128 | 0)) {
      break label$3
     }
     HEAP8[($5_1 + 6 | 0) >> 0] = $1346($7_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | ((((HEAPU8[($5_1 + 6 | 0) >> 0] | 0) & 255 | 0) & 127 | 0) << 21 | 0) | 0;
     label$4 : {
      if (!(((HEAPU8[($5_1 + 6 | 0) >> 0] | 0) & 255 | 0) & 128 | 0)) {
       break label$4
      }
      $75_1 = ((($1346($7_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0) & 127 | 0) << 28 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | $75_1 | 0;
     }
    }
   }
  }
  label$5 : {
   if ((HEAPU8[($5_1 + 7 | 0) >> 0] | 0) & 1 | 0) {
    break label$5
   }
   HEAP32[$5_1 >> 2] = ((HEAP32[$5_1 >> 2] | 0) >>> 1 | 0) ^ (0 - ((HEAP32[$5_1 >> 2] | 0) & 1 | 0) | 0) | 0;
  }
  $90_1 = HEAP32[$5_1 >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $90_1 | 0;
 }
 
 function $1341($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $1361(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $1362($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $1362($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1342($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $75_1 = Math_fround(0), $31_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 >= 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5689 | 0, 4142 | 0, 76 | 0, 4598 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$2 : {
   if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   $75_1 = Math_fround(Math_fround((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
   label$3 : {
    label$4 : {
     if (!(Math_fround(Math_abs($75_1)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $31_1 = ~~$75_1;
     break label$3;
    }
    $31_1 = -2147483648;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $31_1;
   label$5 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = 8;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $1363(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 82 | 0) | 0;
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$6
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$7
     }
     $1364($6_1 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $1343($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $25_1 = 0, $34_1 = 0, $37_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = ($1346($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 8 | 0;
  $16_1 = ($1346($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | $16_1 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 8 | 0;
  $25_1 = ($1346($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | $25_1 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 8 | 0;
  $34_1 = ($1346($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | $34_1 | 0;
  $37_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $37_1 | 0;
 }
 
 function $1344($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $75_1 = Math_fround(0), $31_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 >= 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5689 | 0, 4142 | 0, 76 | 0, 4598 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$2 : {
   if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   $75_1 = Math_fround(Math_fround((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
   label$3 : {
    label$4 : {
     if (!(Math_fround(Math_abs($75_1)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $31_1 = ~~$75_1;
     break label$3;
    }
    $31_1 = -2147483648;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $31_1;
   label$5 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = 8;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $1365(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 82 | 0) | 0;
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$6
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$7
     }
     $1366($6_1 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $1345($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $31_1 = Math_fround(0), $34_1 = Math_fround(0), $37_1 = Math_fround(0), $40_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $31_1 = Math_fround(Math_fround(($1346($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) / Math_fround(255.0));
  HEAPF32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] = $31_1;
  $34_1 = Math_fround(Math_fround(($1346($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) / Math_fround(255.0));
  HEAPF32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = $34_1;
  $37_1 = Math_fround(Math_fround(($1346($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) / Math_fround(255.0));
  HEAPF32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] = $37_1;
  $40_1 = Math_fround(Math_fround(($1346($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) / Math_fround(255.0));
  HEAPF32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 2] = $40_1;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1346($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
  return (HEAPU8[$6_1 >> 0] | 0) & 255 | 0 | 0;
 }
 
 function $1347($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $14_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$5_1 >> 2] = $1340(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[$5_1 >> 2] | 0) {
     break label$2
    }
    $14_1 = 0;
    break label$1;
   }
   $14_1 = HEAP32[($1367((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 188 | 0 | 0, (HEAP32[$5_1 >> 2] | 0) - 1 | 0 | 0) | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $1348($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $115(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4464 | 0, 138 | 0);
   }
   label$4 : {
    label$5 : {
     if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$5
     }
     HEAP32[($5_1 + 4 | 0) >> 2] = 0;
     HEAP32[($5_1 + 8 | 0) >> 2] = 0;
     break label$4;
    }
    HEAP32[($5_1 + 4 | 0) >> 2] = $1821(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $114((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 1 | 0 | 0, 4464 | 0, 145 | 0) | 0;
    $1798(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  }
  $45_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $45_1 | 0;
 }
 
 function $1349($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $75_1 = Math_fround(0), $31_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 >= 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5689 | 0, 4142 | 0, 76 | 0, 4598 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$2 : {
   if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   $75_1 = Math_fround(Math_fround((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
   label$3 : {
    label$4 : {
     if (!(Math_fround(Math_abs($75_1)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $31_1 = ~~$75_1;
     break label$3;
    }
    $31_1 = -2147483648;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $31_1;
   label$5 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = 8;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $1368(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 82 | 0) | 0;
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$6
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$7
     }
     $1369($6_1 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $1350($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = 24;
  $10_1 = (($1346(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) << $8_1 | 0) >> $8_1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $1351($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $75_1 = Math_fround(0), $31_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 >= 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5689 | 0, 4142 | 0, 76 | 0, 4598 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$2 : {
   if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   $75_1 = Math_fround(Math_fround((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
   label$3 : {
    label$4 : {
     if (!(Math_fround(Math_abs($75_1)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $31_1 = ~~$75_1;
     break label$3;
    }
    $31_1 = -2147483648;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $31_1;
   label$5 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = 8;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $1370(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 82 | 0) | 0;
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$6
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$7
     }
     $1371($6_1 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $1352($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $75_1 = Math_fround(0), $31_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 >= 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5689 | 0, 4142 | 0, 76 | 0, 4598 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$2 : {
   if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   $75_1 = Math_fround(Math_fround((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
   label$3 : {
    label$4 : {
     if (!(Math_fround(Math_abs($75_1)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $31_1 = ~~$75_1;
     break label$3;
    }
    $31_1 = -2147483648;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $31_1;
   label$5 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = 8;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $1372(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 82 | 0) | 0;
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$6
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$7
     }
     $1373($6_1 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $1353($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $10_1 = 0, $25_1 = 0, $42_1 = 0, $99_1 = 0, $130_1 = 0, $161_1 = 0, $236_1 = 0, $237_1 = 0, $261_1 = 0;
  $7_1 = global$0 - 160 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 152 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 148 | 0) >> 2] = $1_1;
  HEAP8[($7_1 + 147 | 0) >> 0] = $2_1;
  HEAP32[($7_1 + 140 | 0) >> 2] = $3_1;
  HEAP8[($7_1 + 139 | 0) >> 0] = $4_1;
  $10_1 = HEAP32[($7_1 + 152 | 0) >> 2] | 0;
  HEAP32[($7_1 + 128 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!((HEAPU8[($7_1 + 147 | 0) >> 0] | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($7_1 + 128 | 0) >> 2] = $1340($10_1 | 0, HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     label$4 : {
      if (HEAP32[($7_1 + 128 | 0) >> 2] | 0) {
       break label$4
      }
      HEAP32[($7_1 + 156 | 0) >> 2] = 0;
      break label$1;
     }
     $25_1 = $1655(68 | 0, 1942 | 0, 450 | 0) | 0;
     $111($7_1 + 112 | 0 | 0, 1625 | 0, 0 & 1 | 0 | 0) | 0;
     $1600($25_1 | 0, $7_1 + 112 | 0 | 0) | 0;
     HEAP32[($7_1 + 132 | 0) >> 2] = $25_1;
     $112($7_1 + 112 | 0 | 0) | 0;
     break label$2;
    }
    $42_1 = $1655(68 | 0, 1942 | 0, 452 | 0) | 0;
    $111($7_1 + 96 | 0 | 0, $1347($10_1 | 0, HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
    $1600($42_1 | 0, $7_1 + 96 | 0 | 0) | 0;
    HEAP32[($7_1 + 132 | 0) >> 2] = $42_1;
    $112($7_1 + 96 | 0 | 0) | 0;
    HEAP32[($7_1 + 92 | 0) >> 2] = 0;
    HEAP32[($7_1 + 88 | 0) >> 2] = $1340($10_1 | 0, HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      $1374($1614(HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0) | 0 | 0, $952((HEAP32[($7_1 + 140 | 0) >> 2] | 0) + 16 | 0 | 0, $1340($10_1 | 0, HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0 | 0) | 0 | 0);
      HEAP32[($7_1 + 92 | 0) >> 2] = (HEAP32[($7_1 + 92 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    HEAP32[($7_1 + 84 | 0) >> 2] = 0;
    HEAP32[($7_1 + 80 | 0) >> 2] = $1340($10_1 | 0, HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
    label$7 : {
     label$8 : while (1) {
      if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 80 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$7
      }
      $99_1 = $1615(HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($7_1 + 76 | 0) >> 2] = HEAP32[($1217((HEAP32[($7_1 + 140 | 0) >> 2] | 0) + 100 | 0 | 0, $1340($10_1 | 0, HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0 | 0) | 0) >> 2] | 0;
      $1375($99_1 | 0, $7_1 + 76 | 0 | 0);
      HEAP32[($7_1 + 84 | 0) >> 2] = (HEAP32[($7_1 + 84 | 0) >> 2] | 0) + 1 | 0;
      continue label$8;
     };
    }
    HEAP32[($7_1 + 72 | 0) >> 2] = 0;
    HEAP32[($7_1 + 68 | 0) >> 2] = $1340($10_1 | 0, HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      $130_1 = $1615(HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($7_1 + 64 | 0) >> 2] = HEAP32[($1221((HEAP32[($7_1 + 140 | 0) >> 2] | 0) + 116 | 0 | 0, $1340($10_1 | 0, HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0 | 0) | 0) >> 2] | 0;
      $1375($130_1 | 0, $7_1 + 64 | 0 | 0);
      HEAP32[($7_1 + 72 | 0) >> 2] = (HEAP32[($7_1 + 72 | 0) >> 2] | 0) + 1 | 0;
      continue label$10;
     };
    }
    HEAP32[($7_1 + 60 | 0) >> 2] = 0;
    HEAP32[($7_1 + 56 | 0) >> 2] = $1340($10_1 | 0, HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
    label$11 : {
     label$12 : while (1) {
      if (!((HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$11
      }
      $161_1 = $1615(HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($7_1 + 52 | 0) >> 2] = HEAP32[($1225((HEAP32[($7_1 + 140 | 0) >> 2] | 0) + 132 | 0 | 0, $1340($10_1 | 0, HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0 | 0) | 0) >> 2] | 0;
      $1375($161_1 | 0, $7_1 + 52 | 0 | 0);
      HEAP32[($7_1 + 60 | 0) >> 2] = (HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 1 | 0;
      continue label$12;
     };
    }
    HEAP32[($7_1 + 128 | 0) >> 2] = $1340($10_1 | 0, HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
   }
   HEAP32[($7_1 + 48 | 0) >> 2] = 0;
   label$13 : {
    label$14 : while (1) {
     if (!((HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 128 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$13
     }
     HEAP32[($7_1 + 44 | 0) >> 2] = $1340($10_1 | 0, HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     HEAP32[($7_1 + 40 | 0) >> 2] = 0;
     HEAP32[($7_1 + 36 | 0) >> 2] = $1340($10_1 | 0, HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     label$15 : {
      label$16 : while (1) {
       if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
       $111($7_1 + 24 | 0 | 0, $1347($10_1 | 0, HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
       HEAP32[($7_1 + 20 | 0) >> 2] = $1376($10_1 | 0, HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, $7_1 + 24 | 0 | 0, HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0, (HEAPU8[($7_1 + 139 | 0) >> 0] | 0) & 1 | 0 | 0) | 0;
       label$17 : {
        if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$17
        }
        $236_1 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
        $237_1 = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
        $124($7_1 + 8 | 0 | 0, $7_1 + 24 | 0 | 0) | 0;
        $1609($236_1 | 0, $237_1 | 0, $7_1 + 8 | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0);
        $112($7_1 + 8 | 0 | 0) | 0;
       }
       $112($7_1 + 24 | 0 | 0) | 0;
       HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0;
       continue label$16;
      };
     }
     HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + 1 | 0;
     continue label$14;
    };
   }
   HEAP32[($7_1 + 156 | 0) >> 2] = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
  }
  $261_1 = HEAP32[($7_1 + 156 | 0) >> 2] | 0;
  global$0 = $7_1 + 160 | 0;
  return $261_1 | 0;
 }
 
 function $1354($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $1377(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $1378($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $1378($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1355($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $75_1 = Math_fround(0), $31_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 >= 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5689 | 0, 4142 | 0, 76 | 0, 4598 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$2 : {
   if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   $75_1 = Math_fround(Math_fround((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
   label$3 : {
    label$4 : {
     if (!(Math_fround(Math_abs($75_1)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $31_1 = ~~$75_1;
     break label$3;
    }
    $31_1 = -2147483648;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $31_1;
   label$5 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = 8;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $1379(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 82 | 0) | 0;
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$6
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$7
     }
     $1380($6_1 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $1356($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0 | 0;
 }
 
 function $1357($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1358($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $75_1 = Math_fround(0), $31_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 >= 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5689 | 0, 4142 | 0, 76 | 0, 4598 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$2 : {
   if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   $75_1 = Math_fround(Math_fround((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
   label$3 : {
    label$4 : {
     if (!(Math_fround(Math_abs($75_1)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $31_1 = ~~$75_1;
     break label$3;
    }
    $31_1 = -2147483648;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $31_1;
   label$5 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = 8;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $1381(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 82 | 0) | 0;
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$6
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$7
     }
     $1382($6_1 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $1359($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $48_1 = 0, $53_1 = 0, $103_1 = 0, $169_1 = 0, $304_1 = 0, $309_1 = 0, $368_1 = 0, $382_1 = 0, $387_1 = 0, $483_1 = 0, $511_1 = 0, $581_1 = 0, $677_1 = 0, $689_1 = 0, $704_1 = 0, $757_1 = 0, $922_1 = 0, $934_1 = 0, $1065_1 = 0, $1130_1 = 0, $1215_1 = 0, $1218_1 = 0, $1226_1 = 0, $1250_1 = 0, $1253_1 = 0, $1284_1 = 0, $1341_1 = 0, $1365_1 = 0, $1384_1 = 0, $1445_1 = 0, $869_1 = 0, $870_1 = 0, $881_1 = 0, $961_1 = 0, $990_1 = 0, $1594_1 = Math_fround(0), $1597_1 = Math_fround(0), $1598_1 = Math_fround(0), $1153_1 = 0, $1185_1 = 0, $1289_1 = 0, $1371_1 = 0, $1612_1 = Math_fround(0), $1613_1 = Math_fround(0), $1614_1 = Math_fround(0), $1457_1 = 0;
  $6_1 = global$0 - 752 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 744 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 740 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 736 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 732 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 744 | 0) >> 2] | 0;
  $590($6_1 + 712 | 0 | 0) | 0;
  HEAPF32[($6_1 + 708 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 36 | 0) >> 2]);
  HEAPF32[($6_1 + 704 | 0) >> 2] = Math_fround(0 | 0);
  HEAP32[($6_1 + 700 | 0) >> 2] = 0;
  HEAP32[($6_1 + 696 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($6_1 + 700 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 696 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAP32[($6_1 + 692 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     HEAP32[($6_1 + 688 | 0) >> 2] = 0;
     HEAP32[($6_1 + 684 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     label$4 : {
      label$5 : while (1) {
       if (!((HEAP32[($6_1 + 688 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 684 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$4
       }
       HEAP8[($6_1 + 683 | 0) >> 0] = $1346($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($6_1 + 676 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
       $48_1 = HEAPU8[($6_1 + 683 | 0) >> 0] | 0;
       label$6 : {
        label$7 : {
         switch ($48_1 | 0) {
         case 0:
          $53_1 = $1655(40 | 0, 1942 | 0, 699 | 0) | 0;
          $727($53_1 | 0, HEAP32[($6_1 + 676 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($6_1 + 672 | 0) >> 2] = $53_1;
          HEAP32[((HEAP32[($6_1 + 672 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($6_1 + 692 | 0) >> 2] | 0;
          HEAP32[($6_1 + 668 | 0) >> 2] = 0;
          label$11 : {
           label$12 : while (1) {
            if (!((HEAP32[($6_1 + 668 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 676 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$11
            }
            HEAPF32[($6_1 + 664 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
            $111($6_1 + 648 | 0 | 0, $1347($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 732 | 0) >> 2] | 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
            $737(HEAP32[($6_1 + 672 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 668 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 664 | 0) >> 2])), $6_1 + 648 | 0 | 0);
            $112($6_1 + 648 | 0 | 0) | 0;
            HEAP32[($6_1 + 668 | 0) >> 2] = (HEAP32[($6_1 + 668 | 0) >> 2] | 0) + 1 | 0;
            continue label$12;
           };
          }
          HEAP32[($6_1 + 644 | 0) >> 2] = HEAP32[($6_1 + 672 | 0) >> 2] | 0;
          $1383($6_1 + 712 | 0 | 0, $6_1 + 644 | 0 | 0);
          HEAPF32[($6_1 + 704 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($6_1 + 704 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($6_1 + 672 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($6_1 + 676 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]))));
          break label$6;
         case 1:
          $103_1 = $1655(40 | 0, 1942 | 0, 711 | 0) | 0;
          $810($103_1 | 0, HEAP32[($6_1 + 676 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($6_1 + 640 | 0) >> 2] = $103_1;
          HEAP32[((HEAP32[($6_1 + 640 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($6_1 + 692 | 0) >> 2] | 0;
          HEAP32[($6_1 + 636 | 0) >> 2] = 0;
          label$13 : {
           label$14 : while (1) {
            if (!((HEAP32[($6_1 + 636 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 676 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$13
            }
            HEAPF32[($6_1 + 632 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
            HEAP32[($6_1 + 628 | 0) >> 2] = $1343($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0) | 0;
            HEAPF32[($6_1 + 624 | 0) >> 2] = Math_fround(Math_fround((HEAPU8[($6_1 + 631 | 0) >> 0] | 0) >>> 0) / Math_fround(255.0));
            HEAPF32[($6_1 + 620 | 0) >> 2] = Math_fround(Math_fround(((HEAP32[($6_1 + 628 | 0) >> 2] | 0) & 16711680 | 0) >> 16 | 0 | 0) / Math_fround(255.0));
            HEAPF32[($6_1 + 616 | 0) >> 2] = Math_fround(Math_fround(((HEAP32[($6_1 + 628 | 0) >> 2] | 0) & 65280 | 0) >> 8 | 0 | 0) / Math_fround(255.0));
            HEAPF32[($6_1 + 612 | 0) >> 2] = Math_fround(Math_fround((HEAP32[($6_1 + 628 | 0) >> 2] | 0) & 255 | 0 | 0) / Math_fround(255.0));
            $819(HEAP32[($6_1 + 640 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 636 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 632 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 624 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 620 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 616 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 612 | 0) >> 2])));
            label$15 : {
             if (!((HEAP32[($6_1 + 636 | 0) >> 2] | 0 | 0) < ((HEAP32[($6_1 + 676 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
              break label$15
             }
             $1384($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 636 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 640 | 0) >> 2] | 0 | 0);
            }
            HEAP32[($6_1 + 636 | 0) >> 2] = (HEAP32[($6_1 + 636 | 0) >> 2] | 0) + 1 | 0;
            continue label$14;
           };
          }
          HEAP32[($6_1 + 608 | 0) >> 2] = HEAP32[($6_1 + 640 | 0) >> 2] | 0;
          $1383($6_1 + 712 | 0 | 0, $6_1 + 608 | 0 | 0);
          HEAPF32[($6_1 + 704 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($6_1 + 704 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($6_1 + 640 | 0) >> 2] | 0) + 24 | 0 | 0, Math_imul((HEAP32[($6_1 + 676 | 0) >> 2] | 0) - 1 | 0, HEAP32[(0 + 9060 | 0) >> 2] | 0) | 0) | 0) >> 2]))));
          break label$6;
         case 2:
          $169_1 = $1655(40 | 0, 1942 | 0, 728 | 0) | 0;
          $1747($169_1 | 0, HEAP32[($6_1 + 676 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($6_1 + 604 | 0) >> 2] = $169_1;
          HEAP32[((HEAP32[($6_1 + 604 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($6_1 + 692 | 0) >> 2] | 0;
          HEAP32[($6_1 + 600 | 0) >> 2] = 0;
          label$16 : {
           label$17 : while (1) {
            if (!((HEAP32[($6_1 + 600 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 676 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$16
            }
            HEAPF32[($6_1 + 596 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
            HEAP32[($6_1 + 592 | 0) >> 2] = $1343($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0) | 0;
            HEAPF32[($6_1 + 588 | 0) >> 2] = Math_fround(Math_fround((HEAPU8[($6_1 + 595 | 0) >> 0] | 0) >>> 0) / Math_fround(255.0));
            HEAPF32[($6_1 + 584 | 0) >> 2] = Math_fround(Math_fround(((HEAP32[($6_1 + 592 | 0) >> 2] | 0) & 16711680 | 0) >> 16 | 0 | 0) / Math_fround(255.0));
            HEAPF32[($6_1 + 580 | 0) >> 2] = Math_fround(Math_fround(((HEAP32[($6_1 + 592 | 0) >> 2] | 0) & 65280 | 0) >> 8 | 0 | 0) / Math_fround(255.0));
            HEAPF32[($6_1 + 576 | 0) >> 2] = Math_fround(Math_fround((HEAP32[($6_1 + 592 | 0) >> 2] | 0) & 255 | 0 | 0) / Math_fround(255.0));
            HEAP32[($6_1 + 572 | 0) >> 2] = $1343($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0) | 0;
            HEAPF32[($6_1 + 568 | 0) >> 2] = Math_fround(Math_fround(((HEAP32[($6_1 + 572 | 0) >> 2] | 0) & 16711680 | 0) >> 16 | 0 | 0) / Math_fround(255.0));
            HEAPF32[($6_1 + 564 | 0) >> 2] = Math_fround(Math_fround(((HEAP32[($6_1 + 572 | 0) >> 2] | 0) & 65280 | 0) >> 8 | 0 | 0) / Math_fround(255.0));
            HEAPF32[($6_1 + 560 | 0) >> 2] = Math_fround(Math_fround((HEAP32[($6_1 + 572 | 0) >> 2] | 0) & 255 | 0 | 0) / Math_fround(255.0));
            $1750(HEAP32[($6_1 + 604 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 600 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 596 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 588 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 584 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 580 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 576 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 568 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 564 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 560 | 0) >> 2])));
            label$18 : {
             if (!((HEAP32[($6_1 + 600 | 0) >> 2] | 0 | 0) < ((HEAP32[($6_1 + 676 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
              break label$18
             }
             $1384($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 600 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 604 | 0) >> 2] | 0 | 0);
            }
            HEAP32[($6_1 + 600 | 0) >> 2] = (HEAP32[($6_1 + 600 | 0) >> 2] | 0) + 1 | 0;
            continue label$17;
           };
          }
          HEAP32[($6_1 + 556 | 0) >> 2] = HEAP32[($6_1 + 604 | 0) >> 2] | 0;
          $1383($6_1 + 712 | 0 | 0, $6_1 + 556 | 0 | 0);
          HEAPF32[($6_1 + 704 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($6_1 + 704 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($6_1 + 604 | 0) >> 2] | 0) + 20 | 0 | 0, Math_imul((HEAP32[($6_1 + 676 | 0) >> 2] | 0) - 1 | 0, HEAP32[(0 + 13664 | 0) >> 2] | 0) | 0) | 0) >> 2]))));
          break label$6;
         default:
          break label$7;
         };
        }
        $477($6_1 + 712 | 0 | 0);
        $1337($7_1 | 0, 5901 | 0, $125((HEAP32[($1214((HEAP32[($6_1 + 732 | 0) >> 2] | 0) + 32 | 0 | 0, HEAP32[($6_1 + 692 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) + 8 | 0 | 0) | 0 | 0);
        HEAP32[($6_1 + 748 | 0) >> 2] = 0;
        HEAP32[($6_1 + 552 | 0) >> 2] = 1;
        break label$1;
       }
       HEAP32[($6_1 + 688 | 0) >> 2] = (HEAP32[($6_1 + 688 | 0) >> 2] | 0) + 1 | 0;
       continue label$5;
      };
     }
     HEAP32[($6_1 + 700 | 0) >> 2] = (HEAP32[($6_1 + 700 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP32[($6_1 + 548 | 0) >> 2] = 0;
   HEAP32[($6_1 + 544 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
   label$19 : {
    label$20 : while (1) {
     if (!((HEAP32[($6_1 + 548 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 544 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$19
     }
     HEAP32[($6_1 + 540 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     HEAP32[($6_1 + 536 | 0) >> 2] = 0;
     HEAP32[($6_1 + 532 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     label$21 : {
      label$22 : while (1) {
       if (!((HEAP32[($6_1 + 536 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 532 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$21
       }
       HEAP8[($6_1 + 531 | 0) >> 0] = $1346($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($6_1 + 524 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
       $304_1 = HEAPU8[($6_1 + 531 | 0) >> 0] | 0;
       label$23 : {
        label$24 : {
         switch ($304_1 | 0) {
         case 0:
          $309_1 = $1655(40 | 0, 1942 | 0, 766 | 0) | 0;
          $1182($309_1 | 0, HEAP32[($6_1 + 524 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($6_1 + 520 | 0) >> 2] = $309_1;
          HEAP32[((HEAP32[($6_1 + 520 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($6_1 + 540 | 0) >> 2] | 0;
          HEAP32[($6_1 + 516 | 0) >> 2] = 0;
          label$27 : {
           label$28 : while (1) {
            if (!((HEAP32[($6_1 + 516 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 524 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$27
            }
            HEAPF32[($6_1 + 512 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
            HEAPF32[($6_1 + 508 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
            $1185(HEAP32[($6_1 + 520 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 516 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 512 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 508 | 0) >> 2])));
            label$29 : {
             if (!((HEAP32[($6_1 + 516 | 0) >> 2] | 0 | 0) < ((HEAP32[($6_1 + 524 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
              break label$29
             }
             $1384($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 516 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 520 | 0) >> 2] | 0 | 0);
            }
            HEAP32[($6_1 + 516 | 0) >> 2] = (HEAP32[($6_1 + 516 | 0) >> 2] | 0) + 1 | 0;
            continue label$28;
           };
          }
          HEAP32[($6_1 + 504 | 0) >> 2] = HEAP32[($6_1 + 520 | 0) >> 2] | 0;
          $1383($6_1 + 712 | 0 | 0, $6_1 + 504 | 0 | 0);
          HEAPF32[($6_1 + 704 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($6_1 + 704 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($6_1 + 520 | 0) >> 2] | 0) + 24 | 0 | 0, ((HEAP32[($6_1 + 524 | 0) >> 2] | 0) - 1 | 0) << 1 | 0 | 0) | 0) >> 2]))));
          break label$23;
         case 1:
         case 2:
         case 3:
          HEAPF32[($6_1 + 496 | 0) >> 2] = Math_fround(1.0);
          label$30 : {
           label$31 : {
            if (!(((HEAPU8[($6_1 + 531 | 0) >> 0] | 0) & 255 | 0 | 0) == (2 | 0) & 1 | 0)) {
             break label$31
            }
            $368_1 = $1655(40 | 0, 1942 | 0, 784 | 0) | 0;
            $1192($368_1 | 0, HEAP32[($6_1 + 524 | 0) >> 2] | 0 | 0) | 0;
            HEAP32[($6_1 + 500 | 0) >> 2] = $368_1;
            break label$30;
           }
           label$32 : {
            label$33 : {
             if (!(((HEAPU8[($6_1 + 531 | 0) >> 0] | 0) & 255 | 0 | 0) == (3 | 0) & 1 | 0)) {
              break label$33
             }
             $382_1 = $1655(40 | 0, 1942 | 0, 786 | 0) | 0;
             $1201($382_1 | 0, HEAP32[($6_1 + 524 | 0) >> 2] | 0 | 0) | 0;
             HEAP32[($6_1 + 500 | 0) >> 2] = $382_1;
             break label$32;
            }
            $387_1 = $1655(40 | 0, 1942 | 0, 788 | 0) | 0;
            $1710($387_1 | 0, HEAP32[($6_1 + 524 | 0) >> 2] | 0 | 0) | 0;
            HEAP32[($6_1 + 500 | 0) >> 2] = $387_1;
            HEAPF32[($6_1 + 496 | 0) >> 2] = Math_fround(HEAPF32[($6_1 + 708 | 0) >> 2]);
           }
          }
          HEAP32[((HEAP32[($6_1 + 500 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($6_1 + 540 | 0) >> 2] | 0;
          HEAP32[($6_1 + 492 | 0) >> 2] = 0;
          label$34 : {
           label$35 : while (1) {
            if (!((HEAP32[($6_1 + 492 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 524 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$34
            }
            HEAPF32[($6_1 + 488 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
            HEAPF32[($6_1 + 484 | 0) >> 2] = Math_fround(Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0)) * Math_fround(HEAPF32[($6_1 + 496 | 0) >> 2]));
            HEAPF32[($6_1 + 480 | 0) >> 2] = Math_fround(Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0)) * Math_fround(HEAPF32[($6_1 + 496 | 0) >> 2]));
            $1715(HEAP32[($6_1 + 500 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 492 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 488 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 484 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 480 | 0) >> 2])));
            label$36 : {
             if (!((HEAP32[($6_1 + 492 | 0) >> 2] | 0 | 0) < ((HEAP32[($6_1 + 524 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
              break label$36
             }
             $1384($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 492 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 500 | 0) >> 2] | 0 | 0);
            }
            HEAP32[($6_1 + 492 | 0) >> 2] = (HEAP32[($6_1 + 492 | 0) >> 2] | 0) + 1 | 0;
            continue label$35;
           };
          }
          HEAP32[($6_1 + 476 | 0) >> 2] = HEAP32[($6_1 + 500 | 0) >> 2] | 0;
          $1383($6_1 + 712 | 0 | 0, $6_1 + 476 | 0 | 0);
          HEAPF32[($6_1 + 704 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($6_1 + 704 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($6_1 + 500 | 0) >> 2] | 0) + 20 | 0 | 0, Math_imul((HEAP32[($6_1 + 524 | 0) >> 2] | 0) - 1 | 0, HEAP32[(0 + 13520 | 0) >> 2] | 0) | 0) | 0) >> 2]))));
          break label$23;
         default:
          break label$24;
         };
        }
        $477($6_1 + 712 | 0 | 0);
        $1337($7_1 | 0, 5974 | 0, $125((HEAP32[($952((HEAP32[($6_1 + 732 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($6_1 + 540 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) + 8 | 0 | 0) | 0 | 0);
        HEAP32[($6_1 + 748 | 0) >> 2] = 0;
        HEAP32[($6_1 + 552 | 0) >> 2] = 1;
        break label$1;
       }
       HEAP32[($6_1 + 536 | 0) >> 2] = (HEAP32[($6_1 + 536 | 0) >> 2] | 0) + 1 | 0;
       continue label$22;
      };
     }
     HEAP32[($6_1 + 548 | 0) >> 2] = (HEAP32[($6_1 + 548 | 0) >> 2] | 0) + 1 | 0;
     continue label$20;
    };
   }
   HEAP32[($6_1 + 472 | 0) >> 2] = 0;
   HEAP32[($6_1 + 468 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
   label$37 : {
    label$38 : while (1) {
     if (!((HEAP32[($6_1 + 472 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 468 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$37
     }
     HEAP32[($6_1 + 464 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     HEAP32[($6_1 + 460 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     $483_1 = $1655(40 | 0, 1942 | 0, 818 | 0) | 0;
     $986($483_1 | 0, HEAP32[($6_1 + 460 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($6_1 + 456 | 0) >> 2] = $483_1;
     HEAP32[((HEAP32[($6_1 + 456 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($6_1 + 464 | 0) >> 2] | 0;
     HEAP32[($6_1 + 452 | 0) >> 2] = 0;
     label$39 : {
      label$40 : while (1) {
       if (!((HEAP32[($6_1 + 452 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 460 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$39
       }
       HEAPF32[($6_1 + 448 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
       HEAPF32[($6_1 + 444 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
       HEAPF32[($6_1 + 440 | 0) >> 2] = Math_fround(Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0)) * Math_fround(HEAPF32[($7_1 + 36 | 0) >> 2]));
       HEAP8[($6_1 + 439 | 0) >> 0] = $1350($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0) | 0;
       HEAP8[($6_1 + 438 | 0) >> 0] = ($1339($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
       HEAP8[($6_1 + 437 | 0) >> 0] = ($1339($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
       $511_1 = 24;
       $990(HEAP32[($6_1 + 456 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 452 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 448 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 444 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 440 | 0) >> 2])), ((HEAPU8[($6_1 + 439 | 0) >> 0] | 0) << $511_1 | 0) >> $511_1 | 0 | 0, (HEAPU8[($6_1 + 438 | 0) >> 0] | 0) & 1 | 0 | 0, (HEAPU8[($6_1 + 437 | 0) >> 0] | 0) & 1 | 0 | 0);
       label$41 : {
        if (!((HEAP32[($6_1 + 452 | 0) >> 2] | 0 | 0) < ((HEAP32[($6_1 + 460 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
         break label$41
        }
        $1384($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 452 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 456 | 0) >> 2] | 0 | 0);
       }
       HEAP32[($6_1 + 452 | 0) >> 2] = (HEAP32[($6_1 + 452 | 0) >> 2] | 0) + 1 | 0;
       continue label$40;
      };
     }
     HEAP32[($6_1 + 432 | 0) >> 2] = HEAP32[($6_1 + 456 | 0) >> 2] | 0;
     $1383($6_1 + 712 | 0 | 0, $6_1 + 432 | 0 | 0);
     HEAPF32[($6_1 + 704 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($6_1 + 704 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($6_1 + 456 | 0) >> 2] | 0) + 20 | 0 | 0, Math_imul((HEAP32[($6_1 + 460 | 0) >> 2] | 0) - 1 | 0, HEAP32[(0 + 10036 | 0) >> 2] | 0) | 0) | 0) >> 2]))));
     HEAP32[($6_1 + 472 | 0) >> 2] = (HEAP32[($6_1 + 472 | 0) >> 2] | 0) + 1 | 0;
     continue label$38;
    };
   }
   HEAP32[($6_1 + 428 | 0) >> 2] = 0;
   HEAP32[($6_1 + 424 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
   label$42 : {
    label$43 : while (1) {
     if (!((HEAP32[($6_1 + 428 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 424 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$42
     }
     HEAP32[($6_1 + 420 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     HEAP32[($6_1 + 416 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     $581_1 = $1655(40 | 0, 1942 | 0, 838 | 0) | 0;
     $1700($581_1 | 0, HEAP32[($6_1 + 416 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($6_1 + 412 | 0) >> 2] = $581_1;
     HEAP32[((HEAP32[($6_1 + 412 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($6_1 + 420 | 0) >> 2] | 0;
     HEAP32[($6_1 + 408 | 0) >> 2] = 0;
     label$44 : {
      label$45 : while (1) {
       if (!((HEAP32[($6_1 + 408 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 416 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$44
       }
       HEAPF32[($6_1 + 404 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
       HEAPF32[($6_1 + 400 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
       HEAPF32[($6_1 + 396 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
       HEAPF32[($6_1 + 392 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
       HEAPF32[($6_1 + 388 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
       $1703(HEAP32[($6_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 408 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 404 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 400 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 396 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 392 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 388 | 0) >> 2])));
       label$46 : {
        if (!((HEAP32[($6_1 + 408 | 0) >> 2] | 0 | 0) < ((HEAP32[($6_1 + 416 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
         break label$46
        }
        $1384($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 408 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 412 | 0) >> 2] | 0 | 0);
       }
       HEAP32[($6_1 + 408 | 0) >> 2] = (HEAP32[($6_1 + 408 | 0) >> 2] | 0) + 1 | 0;
       continue label$45;
      };
     }
     HEAP32[($6_1 + 384 | 0) >> 2] = HEAP32[($6_1 + 412 | 0) >> 2] | 0;
     $1383($6_1 + 712 | 0 | 0, $6_1 + 384 | 0 | 0);
     HEAPF32[($6_1 + 704 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($6_1 + 704 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($6_1 + 412 | 0) >> 2] | 0) + 20 | 0 | 0, Math_imul((HEAP32[($6_1 + 416 | 0) >> 2] | 0) - 1 | 0, HEAP32[(0 + 13436 | 0) >> 2] | 0) | 0) | 0) >> 2]))));
     HEAP32[($6_1 + 428 | 0) >> 2] = (HEAP32[($6_1 + 428 | 0) >> 2] | 0) + 1 | 0;
     continue label$43;
    };
   }
   HEAP32[($6_1 + 380 | 0) >> 2] = 0;
   HEAP32[($6_1 + 376 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
   label$47 : {
    label$48 : while (1) {
     if (!((HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 376 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$47
     }
     HEAP32[($6_1 + 372 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     HEAP32[($6_1 + 368 | 0) >> 2] = HEAP32[($1225((HEAP32[($6_1 + 732 | 0) >> 2] | 0) + 132 | 0 | 0, HEAP32[($6_1 + 372 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     HEAP32[($6_1 + 364 | 0) >> 2] = 0;
     HEAP32[($6_1 + 360 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     label$49 : {
      label$50 : while (1) {
       if (!((HEAP32[($6_1 + 364 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 360 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$49
       }
       HEAP32[($6_1 + 356 | 0) >> 2] = $1350($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($6_1 + 352 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
       $677_1 = HEAP32[($6_1 + 356 | 0) >> 2] | 0;
       label$51 : {
        label$52 : {
         switch ($677_1 | 0) {
         case 0:
         case 1:
          HEAPF32[($6_1 + 344 | 0) >> 2] = Math_fround(1.0);
          label$54 : {
           label$55 : {
            if (!((HEAP32[($6_1 + 356 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
             break label$55
            }
            $689_1 = $1655(40 | 0, 1942 | 0, 866 | 0) | 0;
            $1145($689_1 | 0, HEAP32[($6_1 + 352 | 0) >> 2] | 0 | 0) | 0;
            HEAP32[($6_1 + 348 | 0) >> 2] = $689_1;
            label$56 : {
             label$57 : {
              if (!(HEAP32[((HEAP32[($6_1 + 368 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0)) {
               break label$57
              }
              if (!((HEAP32[((HEAP32[($6_1 + 368 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
               break label$56
              }
             }
             HEAPF32[($6_1 + 344 | 0) >> 2] = Math_fround(HEAPF32[($6_1 + 708 | 0) >> 2]);
            }
            break label$54;
           }
           $704_1 = $1655(40 | 0, 1942 | 0, 870 | 0) | 0;
           $1135($704_1 | 0, HEAP32[($6_1 + 352 | 0) >> 2] | 0 | 0) | 0;
           HEAP32[($6_1 + 348 | 0) >> 2] = $704_1;
           label$58 : {
            if (HEAP32[((HEAP32[($6_1 + 368 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
             break label$58
            }
            HEAPF32[($6_1 + 344 | 0) >> 2] = Math_fround(HEAPF32[($6_1 + 708 | 0) >> 2]);
           }
          }
          HEAP32[((HEAP32[($6_1 + 348 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($6_1 + 372 | 0) >> 2] | 0;
          HEAP32[($6_1 + 340 | 0) >> 2] = 0;
          label$59 : {
           label$60 : while (1) {
            if (!((HEAP32[($6_1 + 340 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 352 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$59
            }
            HEAPF32[($6_1 + 336 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
            HEAPF32[($6_1 + 332 | 0) >> 2] = Math_fround(Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0)) * Math_fround(HEAPF32[($6_1 + 344 | 0) >> 2]));
            $1140(HEAP32[($6_1 + 348 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 340 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 336 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 332 | 0) >> 2])));
            label$61 : {
             if (!((HEAP32[($6_1 + 340 | 0) >> 2] | 0 | 0) < ((HEAP32[($6_1 + 352 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
              break label$61
             }
             $1384($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 340 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 348 | 0) >> 2] | 0 | 0);
            }
            HEAP32[($6_1 + 340 | 0) >> 2] = (HEAP32[($6_1 + 340 | 0) >> 2] | 0) + 1 | 0;
            continue label$60;
           };
          }
          HEAP32[($6_1 + 328 | 0) >> 2] = HEAP32[($6_1 + 348 | 0) >> 2] | 0;
          $1383($6_1 + 712 | 0 | 0, $6_1 + 328 | 0 | 0);
          HEAPF32[($6_1 + 704 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($6_1 + 704 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($6_1 + 348 | 0) >> 2] | 0) + 20 | 0 | 0, Math_imul((HEAP32[($6_1 + 352 | 0) >> 2] | 0) - 1 | 0, HEAP32[(0 + 10624 | 0) >> 2] | 0) | 0) | 0) >> 2]))));
          break label$51;
         case 2:
          break label$52;
         default:
          break label$51;
         };
        }
        $757_1 = $1655(40 | 0, 1942 | 0, 886 | 0) | 0;
        $1124($757_1 | 0, HEAP32[($6_1 + 352 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($6_1 + 324 | 0) >> 2] = $757_1;
        HEAP32[((HEAP32[($6_1 + 324 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($6_1 + 372 | 0) >> 2] | 0;
        HEAP32[($6_1 + 320 | 0) >> 2] = 0;
        label$62 : {
         label$63 : while (1) {
          if (!((HEAP32[($6_1 + 320 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 352 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$62
          }
          HEAPF32[($6_1 + 316 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
          HEAPF32[($6_1 + 312 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
          HEAPF32[($6_1 + 308 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
          $1128(HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 320 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 316 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 312 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 308 | 0) >> 2])));
          label$64 : {
           if (!((HEAP32[($6_1 + 320 | 0) >> 2] | 0 | 0) < ((HEAP32[($6_1 + 352 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
            break label$64
           }
           $1384($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 320 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0);
          }
          HEAP32[($6_1 + 320 | 0) >> 2] = (HEAP32[($6_1 + 320 | 0) >> 2] | 0) + 1 | 0;
          continue label$63;
         };
        }
        HEAP32[($6_1 + 304 | 0) >> 2] = HEAP32[($6_1 + 324 | 0) >> 2] | 0;
        $1383($6_1 + 712 | 0 | 0, $6_1 + 304 | 0 | 0);
        HEAPF32[($6_1 + 704 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($6_1 + 704 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($6_1 + 324 | 0) >> 2] | 0) + 20 | 0 | 0, Math_imul((HEAP32[($6_1 + 352 | 0) >> 2] | 0) - 1 | 0, HEAP32[(0 + 10544 | 0) >> 2] | 0) | 0) | 0) >> 2]))));
       }
       HEAP32[($6_1 + 364 | 0) >> 2] = (HEAP32[($6_1 + 364 | 0) >> 2] | 0) + 1 | 0;
       continue label$50;
      };
     }
     HEAP32[($6_1 + 380 | 0) >> 2] = (HEAP32[($6_1 + 380 | 0) >> 2] | 0) + 1 | 0;
     continue label$48;
    };
   }
   HEAP32[($6_1 + 300 | 0) >> 2] = 0;
   HEAP32[($6_1 + 296 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
   label$65 : {
    label$66 : while (1) {
     if (!((HEAP32[($6_1 + 300 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 296 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$65
     }
     HEAP32[($6_1 + 292 | 0) >> 2] = HEAP32[($1273((HEAP32[($6_1 + 732 | 0) >> 2] | 0) + 48 | 0 | 0, $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0 | 0) | 0) >> 2] | 0;
     HEAP32[($6_1 + 288 | 0) >> 2] = 0;
     HEAP32[($6_1 + 284 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     label$67 : {
      label$68 : while (1) {
       if (!((HEAP32[($6_1 + 288 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 284 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$67
       }
       HEAP32[($6_1 + 280 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
       HEAP32[($6_1 + 276 | 0) >> 2] = 0;
       HEAP32[($6_1 + 272 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
       label$69 : {
        label$70 : while (1) {
         if (!((HEAP32[($6_1 + 276 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 272 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$69
         }
         HEAP32[($6_1 + 268 | 0) >> 2] = $1347($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 732 | 0) >> 2] | 0 | 0) | 0;
         $869_1 = HEAP32[($6_1 + 292 | 0) >> 2] | 0;
         $870_1 = HEAP32[($6_1 + 280 | 0) >> 2] | 0;
         $111($6_1 + 248 | 0 | 0, HEAP32[($6_1 + 268 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
         $881_1 = $1610($869_1 | 0, $870_1 | 0, $6_1 + 248 | 0 | 0) | 0;
         $112($6_1 + 248 | 0 | 0) | 0;
         HEAP32[($6_1 + 264 | 0) >> 2] = $881_1;
         label$71 : {
          if ((HEAP32[($6_1 + 264 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
           break label$71
          }
          $477($6_1 + 712 | 0 | 0);
          $1337($7_1 | 0, 6229 | 0, HEAP32[($6_1 + 268 | 0) >> 2] | 0 | 0);
          HEAP32[($6_1 + 748 | 0) >> 2] = 0;
          HEAP32[($6_1 + 552 | 0) >> 2] = 1;
          break label$1;
         }
         HEAP32[($6_1 + 244 | 0) >> 2] = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
         HEAP8[($6_1 + 243 | 0) >> 0] = ($857((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 20 | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0;
         HEAP32[($6_1 + 236 | 0) >> 2] = (HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 36 | 0;
         label$72 : {
          label$73 : {
           if (!((HEAPU8[($6_1 + 243 | 0) >> 0] | 0) & 1 | 0)) {
            break label$73
           }
           $922_1 = ((($488(HEAP32[($6_1 + 236 | 0) >> 2] | 0 | 0) | 0) >>> 0) / (3 >>> 0) | 0) << 1 | 0;
           break label$72;
          }
          $922_1 = $488(HEAP32[($6_1 + 236 | 0) >> 2] | 0 | 0) | 0;
         }
         HEAP32[($6_1 + 232 | 0) >> 2] = $922_1;
         HEAP32[($6_1 + 228 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
         $934_1 = $1655(60 | 0, 1942 | 0, 927 | 0) | 0;
         $848($934_1 | 0, HEAP32[($6_1 + 228 | 0) >> 2] | 0 | 0) | 0;
         HEAP32[($6_1 + 224 | 0) >> 2] = $934_1;
         HEAP32[((HEAP32[($6_1 + 224 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($6_1 + 280 | 0) >> 2] | 0;
         HEAP32[((HEAP32[($6_1 + 224 | 0) >> 2] | 0) + 56 | 0) >> 2] = HEAP32[($6_1 + 244 | 0) >> 2] | 0;
         HEAP32[($6_1 + 220 | 0) >> 2] = 0;
         label$74 : {
          label$75 : while (1) {
           if (!((HEAP32[($6_1 + 220 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 228 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
            break label$74
           }
           HEAPF32[($6_1 + 216 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
           $502($6_1 + 200 | 0 | 0) | 0;
           HEAP32[($6_1 + 196 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
           label$76 : {
            label$77 : {
             if (HEAP32[($6_1 + 196 | 0) >> 2] | 0) {
              break label$77
             }
             label$78 : {
              label$79 : {
               if (!((HEAPU8[($6_1 + 243 | 0) >> 0] | 0) & 1 | 0)) {
                break label$79
               }
               $961_1 = HEAP32[($6_1 + 232 | 0) >> 2] | 0;
               HEAPF32[($6_1 + 192 | 0) >> 2] = Math_fround(0 | 0);
               $573($6_1 + 200 | 0 | 0, $961_1 | 0, $6_1 + 192 | 0 | 0);
               HEAP32[($6_1 + 188 | 0) >> 2] = 0;
               label$80 : {
                label$81 : while (1) {
                 if (!((HEAP32[($6_1 + 188 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 232 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
                  break label$80
                 }
                 HEAPF32[($15($6_1 + 200 | 0 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) | 0) >> 2] = Math_fround(0 | 0);
                 HEAP32[($6_1 + 188 | 0) >> 2] = (HEAP32[($6_1 + 188 | 0) >> 2] | 0) + 1 | 0;
                 continue label$81;
                };
               }
               break label$78;
              }
              $1057($6_1 + 200 | 0 | 0, HEAP32[($6_1 + 236 | 0) >> 2] | 0 | 0);
             }
             break label$76;
            }
            $990_1 = HEAP32[($6_1 + 232 | 0) >> 2] | 0;
            HEAPF32[($6_1 + 184 | 0) >> 2] = Math_fround(0 | 0);
            $573($6_1 + 200 | 0 | 0, $990_1 | 0, $6_1 + 184 | 0 | 0);
            HEAP32[($6_1 + 180 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
            HEAP32[($6_1 + 196 | 0) >> 2] = (HEAP32[($6_1 + 196 | 0) >> 2] | 0) + (HEAP32[($6_1 + 180 | 0) >> 2] | 0) | 0;
            label$82 : {
             label$83 : {
              if (!(Math_fround(HEAPF32[($6_1 + 708 | 0) >> 2]) == Math_fround(1.0) & 1 | 0)) {
               break label$83
              }
              HEAP32[($6_1 + 176 | 0) >> 2] = HEAP32[($6_1 + 180 | 0) >> 2] | 0;
              label$84 : {
               label$85 : while (1) {
                if (!((HEAP32[($6_1 + 176 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 196 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
                 break label$84
                }
                $1594_1 = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
                HEAPF32[($15($6_1 + 200 | 0 | 0, HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0) | 0) >> 2] = $1594_1;
                HEAP32[($6_1 + 176 | 0) >> 2] = (HEAP32[($6_1 + 176 | 0) >> 2] | 0) + 1 | 0;
                continue label$85;
               };
              }
              break label$82;
             }
             HEAP32[($6_1 + 172 | 0) >> 2] = HEAP32[($6_1 + 180 | 0) >> 2] | 0;
             label$86 : {
              label$87 : while (1) {
               if (!((HEAP32[($6_1 + 172 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 196 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
                break label$86
               }
               $1597_1 = Math_fround(Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0)) * Math_fround(HEAPF32[($6_1 + 708 | 0) >> 2]));
               HEAPF32[($15($6_1 + 200 | 0 | 0, HEAP32[($6_1 + 172 | 0) >> 2] | 0 | 0) | 0) >> 2] = $1597_1;
               HEAP32[($6_1 + 172 | 0) >> 2] = (HEAP32[($6_1 + 172 | 0) >> 2] | 0) + 1 | 0;
               continue label$87;
              };
             }
            }
            label$88 : {
             if ((HEAPU8[($6_1 + 243 | 0) >> 0] | 0) & 1 | 0) {
              break label$88
             }
             HEAP32[($6_1 + 168 | 0) >> 2] = 0;
             HEAP32[($6_1 + 164 | 0) >> 2] = $488($6_1 + 200 | 0 | 0) | 0;
             label$89 : {
              label$90 : while (1) {
               if (!((HEAP32[($6_1 + 168 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 164 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
                break label$89
               }
               $1598_1 = Math_fround(HEAPF32[($15(HEAP32[($6_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0) | 0) >> 2]);
               $1065_1 = $15($6_1 + 200 | 0 | 0, HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0) | 0;
               HEAPF32[$1065_1 >> 2] = Math_fround(Math_fround(HEAPF32[$1065_1 >> 2]) + $1598_1);
               HEAP32[($6_1 + 168 | 0) >> 2] = (HEAP32[($6_1 + 168 | 0) >> 2] | 0) + 1 | 0;
               continue label$90;
              };
             }
            }
           }
           $860(HEAP32[($6_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 216 | 0) >> 2])), $6_1 + 200 | 0 | 0);
           label$91 : {
            if (!((HEAP32[($6_1 + 220 | 0) >> 2] | 0) >>> 0 < ((HEAP32[($6_1 + 228 | 0) >> 2] | 0) - 1 | 0) >>> 0 & 1 | 0)) {
             break label$91
            }
            $1384($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 224 | 0) >> 2] | 0 | 0);
           }
           $504($6_1 + 200 | 0 | 0) | 0;
           HEAP32[($6_1 + 220 | 0) >> 2] = (HEAP32[($6_1 + 220 | 0) >> 2] | 0) + 1 | 0;
           continue label$75;
          };
         }
         HEAP32[($6_1 + 160 | 0) >> 2] = HEAP32[($6_1 + 224 | 0) >> 2] | 0;
         $1383($6_1 + 712 | 0 | 0, $6_1 + 160 | 0 | 0);
         HEAPF32[($6_1 + 704 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($6_1 + 704 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($6_1 + 224 | 0) >> 2] | 0) + 24 | 0 | 0, (HEAP32[($6_1 + 228 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]))));
         HEAP32[($6_1 + 276 | 0) >> 2] = (HEAP32[($6_1 + 276 | 0) >> 2] | 0) + 1 | 0;
         continue label$70;
        };
       }
       HEAP32[($6_1 + 288 | 0) >> 2] = (HEAP32[($6_1 + 288 | 0) >> 2] | 0) + 1 | 0;
       continue label$68;
      };
     }
     HEAP32[($6_1 + 300 | 0) >> 2] = (HEAP32[($6_1 + 300 | 0) >> 2] | 0) + 1 | 0;
     continue label$66;
    };
   }
   HEAP32[($6_1 + 156 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
   label$92 : {
    if (!((HEAP32[($6_1 + 156 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
     break label$92
    }
    $1130_1 = $1655(36 | 0, 1942 | 0, 974 | 0) | 0;
    $877($1130_1 | 0, HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 152 | 0) >> 2] = $1130_1;
    HEAP32[($6_1 + 148 | 0) >> 2] = $1213((HEAP32[($6_1 + 732 | 0) >> 2] | 0) + 32 | 0 | 0) | 0;
    HEAP32[($6_1 + 144 | 0) >> 2] = 0;
    label$93 : {
     label$94 : while (1) {
      if (!((HEAP32[($6_1 + 144 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 156 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$93
      }
      HEAPF32[($6_1 + 140 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
      HEAP32[($6_1 + 136 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
      $500($6_1 + 120 | 0 | 0) | 0;
      $1153_1 = HEAP32[($6_1 + 148 | 0) >> 2] | 0;
      HEAP32[($6_1 + 116 | 0) >> 2] = 0;
      $595($6_1 + 120 | 0 | 0, $1153_1 | 0, $6_1 + 116 | 0 | 0);
      HEAP32[($6_1 + 112 | 0) >> 2] = (HEAP32[($6_1 + 148 | 0) >> 2] | 0) - 1 | 0;
      label$95 : {
       label$96 : while (1) {
        if (!((HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
         break label$95
        }
        HEAP32[($574($6_1 + 120 | 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0) | 0) >> 2] = -1;
        HEAP32[($6_1 + 112 | 0) >> 2] = (HEAP32[($6_1 + 112 | 0) >> 2] | 0) + -1 | 0;
        continue label$96;
       };
      }
      $500($6_1 + 96 | 0 | 0) | 0;
      $1185_1 = (HEAP32[($6_1 + 148 | 0) >> 2] | 0) - (HEAP32[($6_1 + 136 | 0) >> 2] | 0) | 0;
      HEAP32[($6_1 + 92 | 0) >> 2] = 0;
      $595($6_1 + 96 | 0 | 0, $1185_1 | 0, $6_1 + 92 | 0 | 0);
      HEAP32[($6_1 + 88 | 0) >> 2] = 0;
      HEAP32[($6_1 + 84 | 0) >> 2] = 0;
      HEAP32[($6_1 + 80 | 0) >> 2] = 0;
      label$97 : {
       label$98 : while (1) {
        if (!((HEAP32[($6_1 + 80 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 136 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
         break label$97
        }
        HEAP32[($6_1 + 76 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
        label$99 : {
         label$100 : while (1) {
          if (!((HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$99
          }
          $1215_1 = HEAP32[($6_1 + 88 | 0) >> 2] | 0;
          HEAP32[($6_1 + 88 | 0) >> 2] = $1215_1 + 1 | 0;
          $1218_1 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
          HEAP32[($6_1 + 84 | 0) >> 2] = $1218_1 + 1 | 0;
          HEAP32[($574($6_1 + 96 | 0 | 0, $1218_1 | 0) | 0) >> 2] = $1215_1;
          continue label$100;
         };
        }
        HEAP32[($6_1 + 72 | 0) >> 2] = HEAP32[($6_1 + 88 | 0) >> 2] | 0;
        $1226_1 = HEAP32[($6_1 + 88 | 0) >> 2] | 0;
        HEAP32[($6_1 + 88 | 0) >> 2] = $1226_1 + 1 | 0;
        HEAP32[($574($6_1 + 120 | 0 | 0, (HEAP32[($6_1 + 72 | 0) >> 2] | 0) + ($1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0) | 0 | 0) | 0) >> 2] = $1226_1;
        HEAP32[($6_1 + 80 | 0) >> 2] = (HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 1 | 0;
        continue label$98;
       };
      }
      label$101 : {
       label$102 : while (1) {
        if (!((HEAP32[($6_1 + 88 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 148 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
         break label$101
        }
        $1250_1 = HEAP32[($6_1 + 88 | 0) >> 2] | 0;
        HEAP32[($6_1 + 88 | 0) >> 2] = $1250_1 + 1 | 0;
        $1253_1 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
        HEAP32[($6_1 + 84 | 0) >> 2] = $1253_1 + 1 | 0;
        HEAP32[($574($6_1 + 96 | 0 | 0, $1253_1 | 0) | 0) >> 2] = $1250_1;
        continue label$102;
       };
      }
      HEAP32[($6_1 + 68 | 0) >> 2] = (HEAP32[($6_1 + 148 | 0) >> 2] | 0) - 1 | 0;
      label$103 : {
       label$104 : while (1) {
        if (!((HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
         break label$103
        }
        label$105 : {
         if (!((HEAP32[($574($6_1 + 120 | 0 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
          break label$105
         }
         $1284_1 = (HEAP32[($6_1 + 84 | 0) >> 2] | 0) + -1 | 0;
         HEAP32[($6_1 + 84 | 0) >> 2] = $1284_1;
         $1289_1 = HEAP32[($574($6_1 + 96 | 0 | 0, $1284_1 | 0) | 0) >> 2] | 0;
         HEAP32[($574($6_1 + 120 | 0 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) | 0) >> 2] = $1289_1;
        }
        HEAP32[($6_1 + 68 | 0) >> 2] = (HEAP32[($6_1 + 68 | 0) >> 2] | 0) + -1 | 0;
        continue label$104;
       };
      }
      $891(HEAP32[($6_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 144 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 140 | 0) >> 2])), $6_1 + 120 | 0 | 0);
      $506($6_1 + 96 | 0 | 0) | 0;
      $506($6_1 + 120 | 0 | 0) | 0;
      HEAP32[($6_1 + 144 | 0) >> 2] = (HEAP32[($6_1 + 144 | 0) >> 2] | 0) + 1 | 0;
      continue label$94;
     };
    }
    HEAP32[($6_1 + 64 | 0) >> 2] = HEAP32[($6_1 + 152 | 0) >> 2] | 0;
    $1383($6_1 + 712 | 0 | 0, $6_1 + 64 | 0 | 0);
    HEAPF32[($6_1 + 704 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($6_1 + 704 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + 4 | 0 | 0, (HEAP32[($6_1 + 156 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]))));
   }
   HEAP32[($6_1 + 60 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
   label$106 : {
    if (!((HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$106
    }
    $1341_1 = $1655(36 | 0, 1942 | 0, 1016 | 0) | 0;
    $917($1341_1 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 56 | 0) >> 2] = $1341_1;
    HEAP32[($6_1 + 52 | 0) >> 2] = 0;
    label$107 : {
     label$108 : while (1) {
      if (!((HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$107
      }
      HEAPF32[($6_1 + 48 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
      HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($1357((HEAP32[($6_1 + 732 | 0) >> 2] | 0) + 68 | 0 | 0, $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0 | 0) | 0) >> 2] | 0;
      $1365_1 = $1655(40 | 0, 1942 | 0, 1021 | 0) | 0;
      $906($1365_1 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 48 | 0) >> 2])), HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($6_1 + 40 | 0) >> 2] = $1365_1;
      $1371_1 = $1340($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
      HEAP32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] = $1371_1;
      $1612_1 = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
      HEAPF32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 16 | 0) >> 2] = $1612_1;
      HEAP8[($6_1 + 39 | 0) >> 0] = ($1339($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
      label$109 : {
       label$110 : {
        if (!((HEAPU8[($6_1 + 39 | 0) >> 0] | 0) & 1 | 0)) {
         break label$110
        }
        $1384_1 = $1335($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0) | 0;
        break label$109;
       }
       $1384_1 = $125((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 24 | 0 | 0) | 0;
      }
      HEAP32[($6_1 + 32 | 0) >> 2] = $1384_1;
      $111($6_1 + 16 | 0 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
      $652((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 20 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
      $112($6_1 + 16 | 0 | 0) | 0;
      label$111 : {
       if (!((HEAPU8[($6_1 + 39 | 0) >> 0] | 0) & 1 | 0)) {
        break label$111
       }
       $642(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, 1942 | 0, 1028 | 0);
      }
      label$112 : {
       if (($1356((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 36 | 0 | 0) | 0) & 1 | 0) {
        break label$112
       }
       $1613_1 = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
       HEAPF32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 32 | 0) >> 2] = $1613_1;
       $1614_1 = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 736 | 0) >> 2] | 0 | 0));
       HEAPF32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 36 | 0) >> 2] = $1614_1;
      }
      $928(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0);
      HEAP32[($6_1 + 52 | 0) >> 2] = (HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 1 | 0;
      continue label$108;
     };
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
    $1383($6_1 + 712 | 0 | 0, $6_1 + 12 | 0 | 0);
    HEAPF32[($6_1 + 704 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($6_1 + 704 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 4 | 0 | 0, (HEAP32[($6_1 + 60 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]))));
   }
   $1445_1 = $1655(48 | 0, 1942 | 0, 1041 | 0) | 0;
   $124($6_1 | 0, HEAP32[($6_1 + 740 | 0) >> 2] | 0 | 0) | 0;
   $464($1445_1 | 0, $6_1 | 0, $6_1 + 712 | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 704 | 0) >> 2]))) | 0;
   HEAP32[($6_1 + 748 | 0) >> 2] = $1445_1;
   $112($6_1 | 0) | 0;
   HEAP32[($6_1 + 552 | 0) >> 2] = 1;
  }
  $479($6_1 + 712 | 0 | 0) | 0;
  $1457_1 = HEAP32[($6_1 + 748 | 0) >> 2] | 0;
  global$0 = $6_1 + 752 | 0;
  return $1457_1 | 0;
 }
 
 function $1360($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1361($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1362($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1363($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1364($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1365($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1366($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1367($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1368($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1369($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1370($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1371($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1372($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1373($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1374($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $1363(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $1364($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $1364($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1375($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $1386(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $1387($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $1387($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1376($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $11_1 = 0, $297_1 = 0, $33_1 = 0, $81_1 = 0, $137_1 = 0, $151_1 = 0, $175_1 = 0, $203_1 = 0, $240_1 = 0, $309_1 = 0, $339_1 = 0, $409_1 = 0, $455_1 = 0, $522_1 = 0, $528_1 = 0, $555_1 = 0, $571_1 = 0, $593_1 = 0, $82_1 = 0, $103_1 = 0, $152_1 = 0, $164_1 = 0, $204_1 = 0, $278_1 = 0, $630_1 = Math_fround(0), $633_1 = Math_fround(0), $340_1 = 0, $361_1 = 0, $638_1 = Math_fround(0), $641_1 = Math_fround(0), $410_1 = 0, $417_1 = 0, $456_1 = 0, $468_1 = 0, $473_1 = 0, $478_1 = 0, $495_1 = 0, $496_1 = 0, $647_1 = Math_fround(0), $529_1 = 0, $541_1 = 0, $648_1 = Math_fround(0), $649_1 = Math_fround(0), $652_1 = Math_fround(0), $587_1 = 0, $604_1 = 0;
  $9_1 = global$0 - 400 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 392 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 388 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 384 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 380 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 376 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 372 | 0) >> 2] = $5_1;
  HEAP8[($9_1 + 371 | 0) >> 0] = $6_1;
  $11_1 = HEAP32[($9_1 + 392 | 0) >> 2] | 0;
  $111($9_1 + 352 | 0 | 0, $1347($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 372 | 0) >> 2] | 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
  label$1 : {
   if (!(($1356($9_1 + 352 | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $652($9_1 + 352 | 0 | 0, HEAP32[($9_1 + 376 | 0) >> 2] | 0 | 0) | 0;
  }
  HEAP32[($9_1 + 348 | 0) >> 2] = $1346($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0) | 0;
  $33_1 = HEAP32[($9_1 + 348 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    switch ($33_1 | 0) {
    case 0:
     $111($9_1 + 336 | 0 | 0, $1347($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 372 | 0) >> 2] | 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
     label$11 : {
      if (!(($1356($9_1 + 336 | 0 | 0) | 0) & 1 | 0)) {
       break label$11
      }
      $652($9_1 + 336 | 0 | 0, $9_1 + 352 | 0 | 0) | 0;
     }
     HEAPF32[($9_1 + 332 | 0) >> 2] = Math_fround($1338($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0));
     HEAPF32[($9_1 + 328 | 0) >> 2] = Math_fround($1338($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0));
     HEAPF32[($9_1 + 324 | 0) >> 2] = Math_fround($1338($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0));
     HEAPF32[($9_1 + 320 | 0) >> 2] = Math_fround($1338($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0));
     HEAPF32[($9_1 + 316 | 0) >> 2] = Math_fround($1338($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0));
     HEAPF32[($9_1 + 312 | 0) >> 2] = Math_fround($1338($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0));
     HEAPF32[($9_1 + 308 | 0) >> 2] = Math_fround($1338($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0));
     label$12 : {
      if (!(((HEAPU8[(0 + 26540 | 0) >> 0] | 0) & 255 | 0 | 0) == (0 & 255 | 0 | 0) & 1 | 0)) {
       break label$12
      }
      $1388(26520 | 0) | 0;
      $1797(303 | 0, 0 | 0, 1024 | 0) | 0;
      HEAP8[(0 + 26540 | 0) >> 0] = 1;
     }
     $1345($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, 26520 | 0);
     $81_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
     $82_1 = HEAP32[($9_1 + 384 | 0) >> 2] | 0;
     $124($9_1 + 288 | 0 | 0, $9_1 + 352 | 0 | 0) | 0;
     $124($9_1 + 272 | 0 | 0, $9_1 + 336 | 0 | 0) | 0;
     $103_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$81_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($81_1, $82_1, $9_1 + 288 | 0, $9_1 + 272 | 0) | 0;
     $112($9_1 + 272 | 0 | 0) | 0;
     $112($9_1 + 288 | 0 | 0) | 0;
     HEAP32[($9_1 + 304 | 0) >> 2] = $103_1;
     label$13 : {
      label$14 : {
       if (!((HEAP32[($9_1 + 304 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
        break label$14
       }
       HEAP32[($9_1 + 396 | 0) >> 2] = 0;
       HEAP32[($9_1 + 268 | 0) >> 2] = 1;
       break label$13;
      }
      $652((HEAP32[($9_1 + 304 | 0) >> 2] | 0) + 116 | 0 | 0, $9_1 + 336 | 0 | 0) | 0;
      HEAPF32[((HEAP32[($9_1 + 304 | 0) >> 2] | 0) + 40 | 0) >> 2] = Math_fround(HEAPF32[($9_1 + 332 | 0) >> 2]);
      HEAPF32[((HEAP32[($9_1 + 304 | 0) >> 2] | 0) + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($9_1 + 328 | 0) >> 2]) * Math_fround(HEAPF32[($11_1 + 36 | 0) >> 2]));
      HEAPF32[((HEAP32[($9_1 + 304 | 0) >> 2] | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($9_1 + 324 | 0) >> 2]) * Math_fround(HEAPF32[($11_1 + 36 | 0) >> 2]));
      HEAPF32[((HEAP32[($9_1 + 304 | 0) >> 2] | 0) + 44 | 0) >> 2] = Math_fround(HEAPF32[($9_1 + 320 | 0) >> 2]);
      HEAPF32[((HEAP32[($9_1 + 304 | 0) >> 2] | 0) + 48 | 0) >> 2] = Math_fround(HEAPF32[($9_1 + 316 | 0) >> 2]);
      HEAPF32[((HEAP32[($9_1 + 304 | 0) >> 2] | 0) + 52 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($9_1 + 312 | 0) >> 2]) * Math_fround(HEAPF32[($11_1 + 36 | 0) >> 2]));
      HEAPF32[((HEAP32[($9_1 + 304 | 0) >> 2] | 0) + 56 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($9_1 + 308 | 0) >> 2]) * Math_fround(HEAPF32[($11_1 + 36 | 0) >> 2]));
      $1390((HEAP32[($9_1 + 304 | 0) >> 2] | 0) + 144 | 0 | 0, 26520 | 0) | 0;
      $1168(HEAP32[($9_1 + 304 | 0) >> 2] | 0 | 0);
      $137_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$137_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($137_1, HEAP32[($9_1 + 304 | 0) >> 2] | 0);
      HEAP32[($9_1 + 396 | 0) >> 2] = HEAP32[($9_1 + 304 | 0) >> 2] | 0;
      HEAP32[($9_1 + 268 | 0) >> 2] = 1;
     }
     $112($9_1 + 336 | 0 | 0) | 0;
     break label$2;
    case 1:
     HEAP32[($9_1 + 264 | 0) >> 2] = $1340($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     $151_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
     $152_1 = HEAP32[($9_1 + 384 | 0) >> 2] | 0;
     $124($9_1 + 248 | 0 | 0, $9_1 + 352 | 0 | 0) | 0;
     $164_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$151_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($151_1, $152_1, $9_1 + 248 | 0) | 0;
     $112($9_1 + 248 | 0 | 0) | 0;
     HEAP32[($9_1 + 260 | 0) >> 2] = $164_1;
     $1391($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 264 | 0) >> 2] | 0 | 0);
     label$15 : {
      if (!((HEAPU8[($9_1 + 371 | 0) >> 0] | 0) & 1 | 0)) {
       break label$15
      }
      $1343($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0) | 0;
     }
     $175_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$175_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($175_1, HEAP32[($9_1 + 260 | 0) >> 2] | 0);
     HEAP32[($9_1 + 396 | 0) >> 2] = HEAP32[($9_1 + 260 | 0) >> 2] | 0;
     HEAP32[($9_1 + 268 | 0) >> 2] = 1;
     break label$2;
    case 2:
     HEAP8[($9_1 + 247 | 0) >> 0] = 0;
     $111($9_1 + 224 | 0 | 0, $1347($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 372 | 0) >> 2] | 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
     label$16 : {
      if (!(($1356($9_1 + 224 | 0 | 0) | 0) & 1 | 0)) {
       break label$16
      }
      $652($9_1 + 224 | 0 | 0, $9_1 + 352 | 0 | 0) | 0;
     }
     $203_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
     $204_1 = HEAP32[($9_1 + 384 | 0) >> 2] | 0;
     $124($9_1 + 208 | 0 | 0, $9_1 + 352 | 0 | 0) | 0;
     $124($9_1 + 192 | 0 | 0, $9_1 + 224 | 0 | 0) | 0;
     HEAP32[($9_1 + 236 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$203_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($203_1, $204_1, $9_1 + 208 | 0, $9_1 + 192 | 0) | 0;
     $112($9_1 + 192 | 0 | 0) | 0;
     $112($9_1 + 208 | 0 | 0) | 0;
     label$17 : {
      if ((HEAP32[($9_1 + 236 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$17
      }
      $240_1 = $1654(236 | 0) | 0;
      $1041($240_1 | 0, $9_1 + 352 | 0 | 0) | 0;
      HEAP32[($9_1 + 236 | 0) >> 2] = $240_1;
      HEAP8[($9_1 + 247 | 0) >> 0] = 1;
     }
     $652((HEAP32[($9_1 + 236 | 0) >> 2] | 0) + 168 | 0 | 0, $9_1 + 224 | 0 | 0) | 0;
     $1345($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, $1063(HEAP32[($9_1 + 236 | 0) >> 2] | 0 | 0) | 0 | 0);
     HEAP32[($9_1 + 240 | 0) >> 2] = $1340($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     $1392($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, (HEAP32[($9_1 + 240 | 0) >> 2] | 0) << 1 | 0 | 0, Math_fround(Math_fround(1.0)), $1052(HEAP32[($9_1 + 236 | 0) >> 2] | 0 | 0) | 0 | 0);
     $1393($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, $1054(HEAP32[($9_1 + 236 | 0) >> 2] | 0 | 0) | 0 | 0);
     $1391($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 240 | 0) >> 2] | 0 | 0);
     $1051(HEAP32[($9_1 + 236 | 0) >> 2] | 0 | 0);
     $278_1 = ($1340($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0) << 1 | 0;
     HEAP32[((HEAP32[($9_1 + 236 | 0) >> 2] | 0) + 224 | 0) >> 2] = $278_1;
     label$18 : {
      label$19 : {
       if (!((HEAPU8[($9_1 + 371 | 0) >> 0] | 0) & 1 | 0)) {
        break label$19
       }
       $1393($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, $1062(HEAP32[($9_1 + 236 | 0) >> 2] | 0 | 0) | 0 | 0);
       $630_1 = Math_fround($1338($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0));
       HEAPF32[((HEAP32[($9_1 + 236 | 0) >> 2] | 0) + 196 | 0) >> 2] = Math_fround($630_1 * Math_fround(HEAPF32[($11_1 + 36 | 0) >> 2]));
       $633_1 = Math_fround($1338($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0));
       HEAPF32[((HEAP32[($9_1 + 236 | 0) >> 2] | 0) + 200 | 0) >> 2] = Math_fround($633_1 * Math_fround(HEAPF32[($11_1 + 36 | 0) >> 2]));
       break label$18;
      }
      HEAPF32[((HEAP32[($9_1 + 236 | 0) >> 2] | 0) + 196 | 0) >> 2] = Math_fround(0 | 0);
      HEAPF32[((HEAP32[($9_1 + 236 | 0) >> 2] | 0) + 200 | 0) >> 2] = Math_fround(0 | 0);
     }
     label$20 : {
      label$21 : {
       if (!((HEAPU8[($9_1 + 247 | 0) >> 0] | 0) & 1 | 0)) {
        break label$21
       }
       $297_1 = HEAP32[($9_1 + 236 | 0) >> 2] | 0;
       label$22 : {
        if (($297_1 | 0) == (0 | 0) & 1 | 0) {
         break label$22
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$297_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($297_1);
       }
       HEAP32[($9_1 + 236 | 0) >> 2] = 0;
       HEAP32[($9_1 + 396 | 0) >> 2] = 0;
       HEAP32[($9_1 + 268 | 0) >> 2] = 1;
       break label$20;
      }
      $309_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$309_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($309_1, HEAP32[($9_1 + 236 | 0) >> 2] | 0);
      HEAP32[($9_1 + 396 | 0) >> 2] = HEAP32[($9_1 + 236 | 0) >> 2] | 0;
      HEAP32[($9_1 + 268 | 0) >> 2] = 1;
     }
     $112($9_1 + 224 | 0 | 0) | 0;
     break label$2;
    case 3:
     $111($9_1 + 176 | 0 | 0, $1347($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 372 | 0) >> 2] | 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
     label$23 : {
      if (!(($1356($9_1 + 176 | 0 | 0) | 0) & 1 | 0)) {
       break label$23
      }
      $652($9_1 + 176 | 0 | 0, $9_1 + 352 | 0 | 0) | 0;
     }
     $339_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
     $340_1 = HEAP32[($9_1 + 384 | 0) >> 2] | 0;
     $124($9_1 + 160 | 0 | 0, $9_1 + 352 | 0 | 0) | 0;
     $124($9_1 + 144 | 0 | 0, $9_1 + 176 | 0 | 0) | 0;
     $361_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$339_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($339_1, $340_1, $9_1 + 160 | 0, $9_1 + 144 | 0) | 0;
     $112($9_1 + 144 | 0 | 0) | 0;
     $112($9_1 + 160 | 0 | 0) | 0;
     HEAP32[($9_1 + 172 | 0) >> 2] = $361_1;
     $652((HEAP32[($9_1 + 172 | 0) >> 2] | 0) + 168 | 0 | 0, $9_1 + 176 | 0 | 0) | 0;
     $1345($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, $1063(HEAP32[($9_1 + 172 | 0) >> 2] | 0 | 0) | 0 | 0);
     $111($9_1 + 128 | 0 | 0, $1347($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 372 | 0) >> 2] | 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
     $111($9_1 + 112 | 0 | 0, $1347($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 372 | 0) >> 2] | 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
     HEAP8[($9_1 + 111 | 0) >> 0] = ($1339($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
     label$24 : {
      if (!((HEAPU8[($9_1 + 371 | 0) >> 0] | 0) & 1 | 0)) {
       break label$24
      }
      $638_1 = Math_fround($1338($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0));
      HEAPF32[((HEAP32[($9_1 + 172 | 0) >> 2] | 0) + 196 | 0) >> 2] = Math_fround($638_1 * Math_fround(HEAPF32[($11_1 + 36 | 0) >> 2]));
      $641_1 = Math_fround($1338($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0));
      HEAPF32[((HEAP32[($9_1 + 172 | 0) >> 2] | 0) + 200 | 0) >> 2] = Math_fround($641_1 * Math_fround(HEAPF32[($11_1 + 36 | 0) >> 2]));
     }
     $409_1 = $1655(40 | 0, 1942 | 0, 580 | 0) | 0;
     $410_1 = HEAP32[($9_1 + 172 | 0) >> 2] | 0;
     $124($9_1 + 88 | 0 | 0, $9_1 + 128 | 0 | 0) | 0;
     $417_1 = HEAP32[($9_1 + 380 | 0) >> 2] | 0;
     $124($9_1 + 72 | 0 | 0, $9_1 + 112 | 0 | 0) | 0;
     $1011($409_1 | 0, $410_1 | 0, $9_1 + 88 | 0 | 0, $417_1 | 0, $9_1 + 72 | 0 | 0, (HEAPU8[($9_1 + 111 | 0) >> 0] | 0) & 1 | 0 | 0) | 0;
     $112($9_1 + 72 | 0 | 0) | 0;
     $112($9_1 + 88 | 0 | 0) | 0;
     HEAP32[($9_1 + 104 | 0) >> 2] = $409_1;
     $1394($11_1 + 8 | 0 | 0, $9_1 + 104 | 0 | 0);
     HEAP32[($9_1 + 396 | 0) >> 2] = HEAP32[($9_1 + 172 | 0) >> 2] | 0;
     HEAP32[($9_1 + 268 | 0) >> 2] = 1;
     $112($9_1 + 112 | 0 | 0) | 0;
     $112($9_1 + 128 | 0 | 0) | 0;
     $112($9_1 + 176 | 0 | 0) | 0;
     break label$2;
    case 4:
     $455_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
     $456_1 = HEAP32[($9_1 + 384 | 0) >> 2] | 0;
     $124($9_1 + 56 | 0 | 0, $9_1 + 352 | 0 | 0) | 0;
     $468_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$455_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($455_1, $456_1, $9_1 + 56 | 0) | 0;
     $112($9_1 + 56 | 0 | 0) | 0;
     HEAP32[($9_1 + 68 | 0) >> 2] = $468_1;
     $473_1 = $1339($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0) | 0;
     HEAP8[((HEAP32[($9_1 + 68 | 0) >> 2] | 0) + 80 | 0) >> 0] = $473_1 & 1 | 0;
     $478_1 = $1339($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0) | 0;
     HEAP8[((HEAP32[($9_1 + 68 | 0) >> 2] | 0) + 81 | 0) >> 0] = $478_1 & 1 | 0;
     HEAP32[($9_1 + 52 | 0) >> 2] = $1340($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     $1391($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0);
     HEAP32[($9_1 + 48 | 0) >> 2] = (HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0) / (3 | 0) | 0;
     $495_1 = (HEAP32[($9_1 + 68 | 0) >> 2] | 0) + 64 | 0;
     $496_1 = HEAP32[($9_1 + 48 | 0) >> 2] | 0;
     HEAPF32[($9_1 + 44 | 0) >> 2] = Math_fround(0 | 0);
     $573($495_1 | 0, $496_1 | 0, $9_1 + 44 | 0 | 0);
     HEAP32[($9_1 + 40 | 0) >> 2] = 0;
     label$25 : {
      label$26 : while (1) {
       if (!((HEAP32[($9_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$25
       }
       $647_1 = Math_fround(Math_fround($1338($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0)) * Math_fround(HEAPF32[($11_1 + 36 | 0) >> 2]));
       HEAPF32[($15((HEAP32[($9_1 + 68 | 0) >> 2] | 0) + 64 | 0 | 0, HEAP32[($9_1 + 40 | 0) >> 2] | 0 | 0) | 0) >> 2] = $647_1;
       HEAP32[($9_1 + 40 | 0) >> 2] = (HEAP32[($9_1 + 40 | 0) >> 2] | 0) + 1 | 0;
       continue label$26;
      };
     }
     label$27 : {
      if (!((HEAPU8[($9_1 + 371 | 0) >> 0] | 0) & 1 | 0)) {
       break label$27
      }
      $1343($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0) | 0;
     }
     $522_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$522_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($522_1, HEAP32[($9_1 + 68 | 0) >> 2] | 0);
     HEAP32[($9_1 + 396 | 0) >> 2] = HEAP32[($9_1 + 68 | 0) >> 2] | 0;
     HEAP32[($9_1 + 268 | 0) >> 2] = 1;
     break label$2;
    case 5:
     $528_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
     $529_1 = HEAP32[($9_1 + 384 | 0) >> 2] | 0;
     $124($9_1 + 24 | 0 | 0, $9_1 + 352 | 0 | 0) | 0;
     $541_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$528_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($528_1, $529_1, $9_1 + 24 | 0) | 0;
     $112($9_1 + 24 | 0 | 0) | 0;
     HEAP32[($9_1 + 36 | 0) >> 2] = $541_1;
     $648_1 = Math_fround($1338($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($9_1 + 36 | 0) >> 2] | 0) + 28 | 0) >> 2] = $648_1;
     $649_1 = Math_fround($1338($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($9_1 + 36 | 0) >> 2] | 0) + 20 | 0) >> 2] = Math_fround($649_1 * Math_fround(HEAPF32[($11_1 + 36 | 0) >> 2]));
     $652_1 = Math_fround($1338($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0));
     HEAPF32[((HEAP32[($9_1 + 36 | 0) >> 2] | 0) + 24 | 0) >> 2] = Math_fround($652_1 * Math_fround(HEAPF32[($11_1 + 36 | 0) >> 2]));
     label$28 : {
      if (!((HEAPU8[($9_1 + 371 | 0) >> 0] | 0) & 1 | 0)) {
       break label$28
      }
      $1343($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0) | 0;
     }
     $555_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$555_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($555_1, HEAP32[($9_1 + 36 | 0) >> 2] | 0);
     HEAP32[($9_1 + 396 | 0) >> 2] = HEAP32[($9_1 + 36 | 0) >> 2] | 0;
     HEAP32[($9_1 + 268 | 0) >> 2] = 1;
     break label$2;
    case 6:
     HEAP32[($9_1 + 20 | 0) >> 2] = $1340($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     HEAP32[($9_1 + 16 | 0) >> 2] = $1340($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
     $571_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
     HEAP32[($9_1 + 12 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$571_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($571_1, HEAP32[($9_1 + 384 | 0) >> 2] | 0, $9_1 + 352 | 0) | 0;
     $1391($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0);
     $587_1 = HEAP32[($1214((HEAP32[($9_1 + 372 | 0) >> 2] | 0) + 32 | 0 | 0, HEAP32[($9_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] = $587_1;
     label$29 : {
      if (!((HEAPU8[($9_1 + 371 | 0) >> 0] | 0) & 1 | 0)) {
       break label$29
      }
      $1343($11_1 | 0, HEAP32[($9_1 + 388 | 0) >> 2] | 0 | 0) | 0;
     }
     $593_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$593_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($593_1, HEAP32[($9_1 + 12 | 0) >> 2] | 0);
     HEAP32[($9_1 + 396 | 0) >> 2] = HEAP32[($9_1 + 12 | 0) >> 2] | 0;
     HEAP32[($9_1 + 268 | 0) >> 2] = 1;
     break label$2;
    default:
     break label$3;
    };
   }
   HEAP32[($9_1 + 396 | 0) >> 2] = 0;
   HEAP32[($9_1 + 268 | 0) >> 2] = 1;
  }
  $112($9_1 + 352 | 0 | 0) | 0;
  $604_1 = HEAP32[($9_1 + 396 | 0) >> 2] | 0;
  global$0 = $9_1 + 400 | 0;
  return $604_1 | 0;
 }
 
 function $1377($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1378($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1379($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1380($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1381($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1382($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1383($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $1398(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $471($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $471($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1384($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $11_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  $11_1 = ($1346($7_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0) + -1 | 0;
  label$1 : {
   label$2 : {
    switch ($11_1 | 0) {
    case 0:
     $841(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
     break label$1;
    case 1:
     break label$2;
    default:
     break label$1;
    };
   }
   HEAPF32[($6_1 + 12 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0));
   HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0));
   HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0));
   HEAPF32[$6_1 >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0));
   $842(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[$6_1 >> 2])));
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $1385($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $20_1 = 0, $43_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
  $111($4_1 + 8 | 0 | 0, $125(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
  $20_1 = $640($4_1 + 8 | 0 | 0, $4_1 + 32 | 0 | 0) | 0;
  $112($4_1 + 8 | 0 | 0) | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $20_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP32[($4_1 + 32 | 0) >> 2] | 0)) {
      break label$3
     }
     if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$2
     }
    }
    $1337($5_1 | 0, 6009 | 0, $125(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($4_1 + 44 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = $1333($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) | 0;
   $642(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, 1942 | 0, 356 | 0);
   HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  }
  $43_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  global$0 = $4_1 + 48 | 0;
  return $43_1 | 0;
 }
 
 function $1386($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1387($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1388($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 9128 + 8 | 0;
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround(0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1389($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $815(26520 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1390($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $8_1 = 0, $12_1 = 0, $46_1 = 0, $56_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $463($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $8_1 = $5_1 + 4 | 0;
  i64toi32_i32$2 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $46_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $8_1;
  HEAP32[i64toi32_i32$0 >> 2] = $46_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $12_1 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $12_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $56_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $8_1 + $12_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $56_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1391($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $50_1 = 0, $63_1 = 0, $72_1 = 0, $77_1 = 0, $82_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
  HEAPF32[($6_1 + 44 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 36 | 0) >> 2]);
  HEAP32[($6_1 + 40 | 0) >> 2] = (HEAP32[($6_1 + 48 | 0) >> 2] | 0) << 1 | 0;
  $1773(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 48 | 0) >> 2] | 0) << 1 | 0 | 0);
  label$1 : {
   label$2 : {
    if (($1339($7_1 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $1392($7_1 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 44 | 0) >> 2])), $1771(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) | 0 | 0);
    break label$1;
   }
   HEAP32[($6_1 + 36 | 0) >> 2] = $1771(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($6_1 + 32 | 0) >> 2] = $1770(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) | 0;
   $729(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, Math_imul(Math_imul(HEAP32[($6_1 + 40 | 0) >> 2] | 0, 3), 3) | 0);
   $1070(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($6_1 + 40 | 0) >> 2] | 0, 3) | 0);
   HEAP32[($6_1 + 28 | 0) >> 2] = 0;
   label$3 : while (1) {
    if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($6_1 + 24 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
    $50_1 = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
    HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
    $1072($50_1 | 0, $6_1 + 20 | 0 | 0);
    HEAP32[($6_1 + 16 | 0) >> 2] = 0;
    label$4 : {
     label$5 : while (1) {
      if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$4
      }
      $63_1 = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
      HEAP32[($6_1 + 12 | 0) >> 2] = $1340($7_1 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
      $1072($63_1 | 0, $6_1 + 12 | 0 | 0);
      $72_1 = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
      HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0)) * Math_fround(HEAPF32[($6_1 + 44 | 0) >> 2]));
      $862($72_1 | 0, $6_1 + 8 | 0 | 0);
      $77_1 = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
      HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround(Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0)) * Math_fround(HEAPF32[($6_1 + 44 | 0) >> 2]));
      $862($77_1 | 0, $6_1 + 4 | 0 | 0);
      $82_1 = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
      HEAPF32[$6_1 >> 2] = Math_fround($1338($7_1 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0));
      $862($82_1 | 0, $6_1 | 0);
      HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 1 | 0;
      continue label$5;
     };
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  global$0 = $6_1 + 64 | 0;
  return;
 }
 
 function $1392($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $53_1 = Math_fround(0), $56_1 = Math_fround(0);
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  $9_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
  $10_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
  HEAPF32[($7_1 + 8 | 0) >> 2] = Math_fround(0 | 0);
  $573($9_1 | 0, $10_1 | 0, $7_1 + 8 | 0 | 0);
  label$1 : {
   label$2 : {
    if (!(Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]) == Math_fround(1.0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($7_1 + 4 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      $53_1 = Math_fround($1338($8_1 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0));
      HEAPF32[($15(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] = $53_1;
      HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    break label$1;
   }
   HEAP32[($7_1 + 4 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     $56_1 = Math_fround(Math_fround($1338($8_1 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0)) * Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]));
     HEAPF32[($15(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] = $56_1;
     HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
  }
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $1393($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $41_1 = 0, $12_1 = 0, $13_1 = 0, $31_1 = 0, $38_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = $1340($6_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
  $12_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  $13_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  HEAP16[($5_1 + 14 | 0) >> 1] = 0;
  $1395($12_1 | 0, $13_1 | 0, $5_1 + 14 | 0 | 0);
  HEAP32[($5_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $31_1 = (($1346($6_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0) & 255 | 0) << 8 | 0;
    HEAP16[($1076(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 1] = $31_1;
    $38_1 = ($1346($6_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
    $41_1 = $1076(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP16[$41_1 >> 1] = (HEAPU16[$41_1 >> 1] | 0) & 65535 | 0 | $38_1 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $1394($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $1396(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $1397($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $1397($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1395($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $75_1 = Math_fround(0), $31_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 >= 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5689 | 0, 4142 | 0, 76 | 0, 4598 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$2 : {
   if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   $75_1 = Math_fround(Math_fround((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
   label$3 : {
    label$4 : {
     if (!(Math_fround(Math_abs($75_1)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $31_1 = ~~$75_1;
     break label$3;
    }
    $31_1 = -2147483648;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $31_1;
   label$5 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = 8;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $1078(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 82 | 0) | 0;
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$6
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$7
     }
     $1079($6_1 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 1 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $1396($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1397($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1398($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1399($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1400($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1399($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1401($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1326($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1402($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1403($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 11712 + 8 | 0;
  $1404($4_1 + 4 | 0 | 0) | 0;
  $502($4_1 + 128 | 0 | 0) | 0;
  $502($4_1 + 144 | 0 | 0) | 0;
  $502($4_1 + 160 | 0 | 0) | 0;
  $1042($4_1 + 176 | 0 | 0) | 0;
  $502($4_1 + 192 | 0 | 0) | 0;
  $502($4_1 + 208 | 0 | 0) | 0;
  HEAP32[($4_1 + 224 | 0) >> 2] = 0;
  $729($4_1 + 144 | 0 | 0, 128 | 0);
  $729($4_1 + 160 | 0 | 0, 128 | 0);
  $1075($4_1 + 176 | 0 | 0, 128 | 0);
  $729($4_1 + 192 | 0 | 0, 128 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1404($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 13612 + 8 | 0;
  $1405($4_1 + 4 | 0 | 0) | 0;
  $1406($4_1 + 20 | 0 | 0) | 0;
  $500($4_1 + 36 | 0 | 0) | 0;
  $1407($4_1 + 52 | 0 | 0) | 0;
  $500($4_1 + 68 | 0 | 0) | 0;
  $1408($4_1 + 84 | 0 | 0) | 0;
  $1409($4_1 + 104 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1405($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 11768 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1406($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 11824 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1407($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 11880 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1408($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 11928 + 8 | 0;
  $1405($4_1 + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1409($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 11988 + 8 | 0;
  $1406($4_1 + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1410($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $30_1 = 0, $20_1 = 0, $72_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($6_1 + 224 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 44 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($6_1 + 224 | 0) >> 2] = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
   HEAP32[($5_1 + 28 | 0) >> 2] = $1772(HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) | 0;
   $20_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
   HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(0 | 0);
   $573($6_1 + 128 | 0 | 0, $20_1 | 0, $5_1 + 24 | 0 | 0);
   $30_1 = 0;
   $1768(HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, $30_1 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, $6_1 + 128 | 0 | 0, $30_1 | 0, 2 | 0);
   $1411($6_1 + 128 | 0 | 0);
   HEAP32[($6_1 + 228 | 0) >> 2] = $1730($6_1 + 4 | 0 | 0, $6_1 + 128 | 0 | 0, $1719($6_1 + 4 | 0 | 0, $6_1 + 128 | 0 | 0) | 0 | 0) | 0;
   HEAP32[($5_1 + 20 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0) >>> 0 < ($1412(HEAP32[($6_1 + 228 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($1413(HEAP32[($6_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
     $1411(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
     $862(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, $15(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0 | 0);
     $862(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, $15(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0) | 0 | 0);
     HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($5_1 + 44 | 0) >> 2] = $1412(HEAP32[($6_1 + 228 | 0) >> 2] | 0 | 0) | 0;
  }
  $72_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return $72_1 | 0;
 }
 
 function $1411($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $138_1 = Math_fround(0), $139_1 = Math_fround(0), $140_1 = Math_fround(0), $141_1 = Math_fround(0);
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 56 | 0) >> 2] = $488(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) | 0;
  HEAPF32[($3_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($15(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 56 | 0) >> 2] | 0) - 2 | 0 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($15(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, 1 | 0) | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($15(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, 0 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($15(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 56 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]))));
  HEAP32[($3_1 + 32 | 0) >> 2] = 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = (HEAP32[($3_1 + 56 | 0) >> 2] | 0) - 3 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 32 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 28 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAPF32[($3_1 + 48 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($3_1 + 44 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
    HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2]);
    HEAPF32[($3_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 3 | 0 | 0) | 0) >> 2]);
    HEAPF32[($3_1 + 52 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2])))));
    HEAP32[($3_1 + 32 | 0) >> 2] = (HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 2 | 0;
    continue label$2;
   };
  }
  label$3 : {
   label$4 : {
    if (!(Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
     break label$4
    }
    break label$3;
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = 0;
   HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 56 | 0) >> 2] | 0) - 2 | 0;
   HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($3_1 + 56 | 0) >> 2] | 0) >>> 1 | 0;
   label$5 : while (1) {
    if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) - (HEAP32[($3_1 + 24 | 0) >> 2] | 0) | 0;
    $138_1 = Math_fround(HEAPF32[($15(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($15(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] = $138_1;
    $139_1 = Math_fround(HEAPF32[($15(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
    HEAPF32[($15(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $139_1;
    $140_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
    HEAPF32[($15(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] = $140_1;
    $141_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
    HEAPF32[($15(HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $141_1;
    HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 2 | 0;
    continue label$5;
   };
  }
  global$0 = $3_1 + 64 | 0;
  return;
 }
 
 function $1412($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1413($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1414($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!((HEAP32[((HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   $1415($5_1 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1415($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 224 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($4_1 + 224 | 0) >> 2] = 0;
   HEAP32[($4_1 + 228 | 0) >> 2] = 0;
   $508($4_1 + 160 | 0 | 0);
   $508($4_1 + 192 | 0 | 0);
   $1046($4_1 + 176 | 0 | 0);
   $508($4_1 + 128 | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1416($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 224 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0 | 0;
 }
 
 function $1417($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 11712 + 8 | 0;
  $504($4_1 + 208 | 0 | 0) | 0;
  $504($4_1 + 192 | 0 | 0) | 0;
  $1045($4_1 + 176 | 0 | 0) | 0;
  $504($4_1 + 160 | 0 | 0) | 0;
  $504($4_1 + 144 | 0 | 0) | 0;
  $504($4_1 + 128 | 0 | 0) | 0;
  $1717($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1418($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1417($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1419($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 11768 + 8 | 0;
  $1420($4_1 | 0);
  $1421($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1420($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1423($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1421($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1424(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1422($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1419($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1423($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1424($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1425($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 11824 + 8 | 0;
  $1426($4_1 | 0);
  $1427($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1426($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1429($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1427($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1430(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1428($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1425($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1429($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1430($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1431($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 11880 + 8 | 0;
  $1432($4_1 | 0);
  $1433($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1432($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1435($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1433($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1436(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1434($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1431($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1435($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1436($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1437($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 11928 + 8 | 0;
  $1438($4_1 + 4 | 0 | 0);
  $1419($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1438($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($1412(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($1413(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $1440(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1439($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1437($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1440($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $1423($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1441($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 11988 + 8 | 0;
  $1442($4_1 + 4 | 0 | 0);
  $1425($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1442($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($1444(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($1445(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $1446(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1443($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1441($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1444($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1445($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $21_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $1446($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $1429($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1447($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 12048 + 8 | 0;
  $674($4_1 + 4 | 0 | 0) | 0;
  $967($4_1 + 16 | 0 | 0) | 0;
  $1448($4_1 + 32 | 0 | 0) | 0;
  $1449($4_1 + 48 | 0 | 0) | 0;
  HEAP32[($4_1 + 64 | 0) >> 2] = 0;
  $1450($4_1 + 68 | 0 | 0) | 0;
  $1451($4_1 + 84 | 0 | 0) | 0;
  $1452($4_1 + 100 | 0 | 0) | 0;
  $1453($4_1 + 116 | 0 | 0) | 0;
  $1454($4_1 + 132 | 0 | 0) | 0;
  HEAPF32[($4_1 + 148 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 152 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 156 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 160 | 0) >> 2] = Math_fround(0 | 0);
  $674($4_1 + 164 | 0 | 0) | 0;
  $674($4_1 + 176 | 0 | 0) | 0;
  $1455($4_1 + 188 | 0 | 0) | 0;
  HEAPF32[($4_1 + 204 | 0) >> 2] = Math_fround(0 | 0);
  $674($4_1 + 208 | 0 | 0) | 0;
  $674($4_1 + 220 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1448($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 12100 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1449($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 12160 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1450($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 12216 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1451($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 12280 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1452($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 12344 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1453($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 12416 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1454($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 12492 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1455($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 12564 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1456($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $73_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[$4_1 >> 2] = 12048 + 8 | 0;
  $1457($4_1 + 16 | 0 | 0);
  $1458($4_1 + 32 | 0 | 0);
  $1459($4_1 + 48 | 0 | 0);
  HEAP32[($4_1 + 64 | 0) >> 2] = 0;
  $1460($4_1 + 68 | 0 | 0);
  $1461($4_1 + 84 | 0 | 0);
  $1462($4_1 + 100 | 0 | 0);
  $1463($4_1 + 116 | 0 | 0);
  $1464($4_1 + 132 | 0 | 0);
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0) >>> 0 < ($1465($4_1 + 188 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $115(HEAP32[($1367($4_1 + 188 | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0, 3626 | 0, 74 | 0);
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $112($4_1 + 220 | 0 | 0) | 0;
  $112($4_1 + 208 | 0 | 0) | 0;
  $1466($4_1 + 188 | 0 | 0) | 0;
  $112($4_1 + 176 | 0 | 0) | 0;
  $112($4_1 + 164 | 0 | 0) | 0;
  $1467($4_1 + 132 | 0 | 0) | 0;
  $1468($4_1 + 116 | 0 | 0) | 0;
  $1469($4_1 + 100 | 0 | 0) | 0;
  $1470($4_1 + 84 | 0 | 0) | 0;
  $1471($4_1 + 68 | 0 | 0) | 0;
  $1472($4_1 + 48 | 0 | 0) | 0;
  $1473($4_1 + 32 | 0 | 0) | 0;
  $976($4_1 + 16 | 0 | 0) | 0;
  $112($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  $73_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $73_1 | 0;
 }
 
 function $1457($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($950(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($952(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $1474(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1458($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($1213(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($1214(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $1475(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1459($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($1272(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($1273(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $1476(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1460($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($1477(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($1357(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $1478(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1461($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($1479(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($1360(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $1480(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1462($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($1215(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($1217(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $1481(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1463($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($1219(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($1221(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $1482(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1464($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($1223(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($1225(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    $19_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($19_1);
    }
    $1483(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1465($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1466($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 12564 + 8 | 0;
  $1484($4_1 | 0);
  $1485($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1467($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 12492 + 8 | 0;
  $1486($4_1 | 0);
  $1487($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1468($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 12416 + 8 | 0;
  $1488($4_1 | 0);
  $1489($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1469($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 12344 + 8 | 0;
  $1490($4_1 | 0);
  $1491($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1470($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 12280 + 8 | 0;
  $1492($4_1 | 0);
  $1493($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1471($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 12216 + 8 | 0;
  $1494($4_1 | 0);
  $1495($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1472($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 12160 + 8 | 0;
  $1496($4_1 | 0);
  $1497($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1473($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 12100 + 8 | 0;
  $1498($4_1 | 0);
  $1499($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1474($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $981($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1475($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $1535($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1476($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $1537($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1477($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1478($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $1539($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1479($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1480($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $1541($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1481($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $1543($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1482($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $1545($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1483($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $1547($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1484($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1549($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1485($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1550(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1486($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1547($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1487($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1548(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1488($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1545($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1489($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1546(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1490($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1543($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1491($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1544(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1492($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1541($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1493($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1542(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1494($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1539($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1495($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1540(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1496($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1537($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1497($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1538(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1498($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1535($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1499($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1536(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1500($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[321 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1501($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $1502((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $1502($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $41_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   if (($131(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5609 | 0, 4378 | 0, 49 | 0, 5098 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  label$2 : {
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < ($950(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($952(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     label$5 : {
      if (!(($627($777(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      break label$2;
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $41_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $41_1 | 0;
 }
 
 function $1503($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $1504((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $1504($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $42_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   if (($131(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5609 | 0, 4378 | 0, 64 | 0, 5080 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $950(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($952(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     label$5 : {
      if (!(($627($777(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
      break label$2;
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = -1;
  }
  $42_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $42_1 | 0;
 }
 
 function $1505($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $1506((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 32 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $1506($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $41_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   if (($131(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5609 | 0, 4378 | 0, 49 | 0, 5098 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  label$2 : {
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < ($1213(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($1214(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     label$5 : {
      if (!(($627($1643(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      break label$2;
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $41_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $41_1 | 0;
 }
 
 function $1507($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $1508((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 32 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $1508($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $42_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   if (($131(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5609 | 0, 4378 | 0, 64 | 0, 5080 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1213(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($1214(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     label$5 : {
      if (!(($627($1643(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
      break label$2;
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = -1;
  }
  $42_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $42_1 | 0;
 }
 
 function $1509($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $1510((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 48 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $1510($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $41_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   if (($131(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5609 | 0, 4378 | 0, 49 | 0, 5098 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  label$2 : {
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < ($1272(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($1273(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     label$5 : {
      if (!(($627($1611(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      break label$2;
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $41_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $41_1 | 0;
 }
 
 function $1511($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $1512((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 68 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $1512($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $41_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   if (($131(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5609 | 0, 4378 | 0, 49 | 0, 5098 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  label$2 : {
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < ($1477(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($1357(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     label$5 : {
      if (!(($627($911(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      break label$2;
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $41_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $41_1 | 0;
 }
 
 function $1513($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $1514((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 84 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $1514($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $41_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   if (($131(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5609 | 0, 4378 | 0, 49 | 0, 5098 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  label$2 : {
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < ($1479(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($1360(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     label$5 : {
      if (!(($627($485(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      break label$2;
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $41_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $41_1 | 0;
 }
 
 function $1515($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $1516((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 100 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $1516($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $41_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   if (($131(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5609 | 0, 4378 | 0, 49 | 0, 5098 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  label$2 : {
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < ($1215(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($1217(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     label$5 : {
      if (!(($627($830(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      break label$2;
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $41_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $41_1 | 0;
 }
 
 function $1517($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $1518((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 116 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $1518($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $41_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   if (($131(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5609 | 0, 4378 | 0, 49 | 0, 5098 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  label$2 : {
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < ($1219(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($1221(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     label$5 : {
      if (!(($627($830(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      break label$2;
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $41_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $41_1 | 0;
 }
 
 function $1519($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $1520((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 132 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $1520($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $41_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   if (($131(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5609 | 0, 4378 | 0, 49 | 0, 5098 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  label$2 : {
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < ($1223(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($1225(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     label$5 : {
      if (!(($627($830(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      break label$2;
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $41_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $41_1 | 0;
 }
 
 function $1521($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0;
 }
 
 function $1522($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 32 | 0 | 0;
 }
 
 function $1523($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0;
 }
 
 function $1524($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 100 | 0 | 0;
 }
 
 function $1525($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 116 | 0 | 0;
 }
 
 function $1526($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 132 | 0 | 0;
 }
 
 function $1527($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1473($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1528($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1472($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1529($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1471($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1530($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1470($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1531($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1469($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1532($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1468($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1533($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1467($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1534($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1466($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1535($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1536($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1537($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1538($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1539($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1540($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1541($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1542($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1543($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1544($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1545($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1546($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1547($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1548($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1549($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1550($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1551($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $26_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  $113($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 12612 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $1321($5_1 + 8 | 0 | 0) | 0;
  HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(1.0);
  HEAP8[($5_1 + 28 | 0) >> 0] = 0;
  $674($5_1 + 32 | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$1
   }
   fimport$0(5435 | 0, 2841 | 0, 88 | 0, 3875 | 0);
   wasm2js_trap();
  }
  $26_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $26_1 | 0;
 }
 
 function $1552($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $13_1 = 0, $26_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[$4_1 >> 2] = 12612 + 8 | 0;
  $1324($4_1 + 8 | 0 | 0);
  label$1 : {
   if (!((HEAPU8[($4_1 + 28 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   $13_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   label$2 : {
    if (($13_1 | 0) == (0 | 0) & 1 | 0) {
     break label$2
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$13_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($13_1);
   }
  }
  $112($4_1 + 32 | 0 | 0) | 0;
  $1326($4_1 + 8 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  $26_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $26_1 | 0;
 }
 
 function $1553($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[339 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1554($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $41_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $640(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, $4_1 + 32 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP32[($4_1 + 32 | 0) >> 2] | 0)) {
      break label$3
     }
     if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$2
     }
    }
    $111($4_1 + 8 | 0 | 0, 6009 | 0, 0 & 1 | 0 | 0) | 0;
    $1555($5_1 | 0, 0 | 0, $4_1 + 8 | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0);
    $112($4_1 + 8 | 0 | 0) | 0;
    HEAP32[($4_1 + 44 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = $1556($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
   $642(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, 2841 | 0, 108 | 0);
   HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  }
  $41_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  global$0 = $4_1 + 48 | 0;
  return $41_1 | 0;
 }
 
 function $1555($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $16_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  $124($6_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $652($7_1 + 32 | 0 | 0, $1557($6_1 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $112($6_1 | 0) | 0;
  $16_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   if (($16_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $1008($16_1 | 0) | 0;
   $1978($16_1 | 0);
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $1556($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $167_1 = 0, $370_1 = 0, $673_1 = 0, $744_1 = 0, $965_1 = 0, $1036_1 = 0, $1268_1 = 0, $1339_1 = 0, $1574_1 = 0, $1661_1 = 0, $1749_1 = 0, $1837_1 = 0, $1984_1 = 0, $2878 = 0, $12_1 = 0, $52_1 = 0, $207_1 = 0, $410_1 = 0, $582_1 = 0, $874_1 = 0, $1177_1 = 0, $1438_1 = 0, $1453_1 = 0, $1518_1 = 0, $1887_1 = 0, $2021_1 = 0, $2023_1 = 0, $2118 = 0, $2122 = 0, $2340 = 0, $2356 = 0, $2398 = 0, $2426 = 0, $2430 = 0, $2519 = 0, $2523 = 0, $2554 = 0, $2558 = 0, $2614 = 0, $2666 = 0, $2699 = 0, $2710 = 0, $2759 = 0, $2872 = 0, $66_1 = 0, $73_1 = 0, $2890 = Math_fround(0), $2892 = Math_fround(0), $2894 = Math_fround(0), $2896 = Math_fround(0), $2898 = Math_fround(0), $99_1 = 0, $106_1 = 0, $115_1 = 0, $117_1 = 0, $145_1 = 0, $176_1 = 0, $208_1 = 0, $2900 = Math_fround(0), $2904 = Math_fround(0), $2908 = Math_fround(0), $2912 = Math_fround(0), $2914 = Math_fround(0), $2916 = Math_fround(0), $2918 = Math_fround(0), $2920 = Math_fround(0), $292_1 = 0, $296_1 = 0, $327_1 = 0, $329_1 = 0, $348_1 = 0, $359_1 = 0, $379_1 = 0, $411_1 = 0, $2921 = Math_fround(0), $2922 = Math_fround(0), $2923 = Math_fround(0), $2924 = Math_fround(0), $2925 = Math_fround(0), $2926 = Math_fround(0), $2927 = Math_fround(0), $491_1 = 0, $534_1 = 0, $562_1 = 0, $564_1 = 0, $623_1 = 0, $625_1 = 0, $640_1 = 0, $652_1 = 0, $682_1 = 0, $720_1 = 0, $731_1 = 0, $753_1 = 0, $2930 = Math_fround(0), $2932 = Math_fround(0), $794_1 = 0, $802_1 = 0, $812_1 = 0, $822_1 = 0, $826_1 = 0, $854_1 = 0, $856_1 = 0, $915_1 = 0, $917_1 = 0, $932_1 = 0, $944_1 = 0, $974_1 = 0, $1012_1 = 0, $1023_1 = 0, $1045_1 = 0, $1079_1 = 0, $1089_1 = 0, $2936 = Math_fround(0), $2938 = Math_fround(0), $2942 = Math_fround(0), $2946 = Math_fround(0), $2948 = Math_fround(0), $2950 = Math_fround(0), $2952 = Math_fround(0), $2954 = Math_fround(0), $2956 = Math_fround(0), $2958 = Math_fround(0), $1129_1 = 0, $1157_1 = 0, $1159_1 = 0, $1218_1 = 0, $1220_1 = 0, $1235_1 = 0, $1247_1 = 0, $1277_1 = 0, $1315_1 = 0, $1326_1 = 0, $1348_1 = 0, $2960 = Math_fround(0), $2962 = Math_fround(0), $2967 = Math_fround(0), $2972 = Math_fround(0), $2974 = Math_fround(0), $1460_1 = 0, $1488_1 = 0, $1490_1 = 0, $1551_1 = 0, $1563_1 = 0, $1583_1 = 0, $1638_1 = 0, $1650_1 = 0, $1670_1 = 0, $1700_1 = 0, $1726_1 = 0, $1738_1 = 0, $1758_1 = 0, $1788_1 = 0, $1814_1 = 0, $1826_1 = 0, $1846_1 = 0, $1876_1 = 0, $1883_1 = 0, $1886_1 = 0, $1916_1 = 0, $1928_1 = 0, $1993_1 = 0, $2024_1 = 0, $2976 = Math_fround(0), $2980 = Math_fround(0), $2984 = Math_fround(0), $2986 = Math_fround(0), $2988 = Math_fround(0), $2990 = Math_fround(0), $2994 = Math_fround(0), $2997 = Math_fround(0), $2998 = Math_fround(0), $2999 = Math_fround(0), $3000 = Math_fround(0), $2123 = 0, $3001 = Math_fround(0), $3002 = Math_fround(0), $3003 = Math_fround(0), $3004 = Math_fround(0), $3006 = Math_fround(0), $3010 = Math_fround(0), $2218 = 0, $2220 = 0, $2236 = 0, $2258 = 0, $2259 = 0, $3014 = Math_fround(0), $2292 = 0, $2311 = 0, $2313 = 0, $2329 = 0, $2357 = 0, $2369 = 0, $2399 = 0, $2431 = 0, $2456 = 0, $2466 = 0, $2487 = 0, $2490 = 0, $3018 = Math_fround(0), $2524 = 0, $3020 = Math_fround(0), $3024 = Math_fround(0), $3028 = Math_fround(0), $2559 = 0, $2589 = 0, $2600 = 0, $2618 = 0, $2620 = 0, $2739 = 0, $2741 = 0, $2777 = 0, $3030 = Math_fround(0), $3032 = Math_fround(0), $3034 = Math_fround(0), $2813 = 0, $2841 = 0, $2843 = 0, $2868 = 0, $2871 = 0, $2886 = 0;
  $4_1 = global$0 - 1344 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 1336 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 1332 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 1336 | 0) >> 2] | 0;
  $1348($5_1 + 32 | 0 | 0, 6494 | 0) | 0;
  $1325($5_1 + 8 | 0 | 0);
  $12_1 = $1975(32 | 0) | 0;
  $1001($12_1 | 0, HEAP32[($4_1 + 1332 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 1316 | 0) >> 2] = $12_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($4_1 + 1316 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    $111($4_1 + 1264 | 0 | 0, 6471 | 0, 0 & 1 | 0 | 0) | 0;
    $111($4_1 + 1248 | 0 | 0, $1000() | 0 | 0, 0 & 1 | 0 | 0) | 0;
    $1555($5_1 | 0, 0 | 0, $4_1 + 1264 | 0 | 0, $4_1 + 1248 | 0 | 0);
    $112($4_1 + 1248 | 0 | 0) | 0;
    $112($4_1 + 1264 | 0 | 0) | 0;
    HEAP32[($4_1 + 1340 | 0) >> 2] = 0;
    break label$1;
   }
   $52_1 = $1655(232 | 0, 2841 | 0, 128 | 0) | 0;
   $1447($52_1 | 0) | 0;
   HEAP32[($4_1 + 1320 | 0) >> 2] = $52_1;
   HEAP32[($4_1 + 1312 | 0) >> 2] = $994(HEAP32[($4_1 + 1316 | 0) >> 2] | 0 | 0, 3860 | 0) | 0;
   label$3 : {
    if (!((HEAP32[($4_1 + 1312 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $66_1 = $996(HEAP32[($4_1 + 1312 | 0) >> 2] | 0 | 0, 4129 | 0, 0 | 0) | 0;
    $1348((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 176 | 0 | 0, $66_1 | 0) | 0;
    $73_1 = $996(HEAP32[($4_1 + 1312 | 0) >> 2] | 0 | 0, 4754 | 0, 0 | 0) | 0;
    $1348((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 164 | 0 | 0, $73_1 | 0) | 0;
    $2890 = Math_fround($997(HEAP32[($4_1 + 1312 | 0) >> 2] | 0 | 0, 1322 | 0, Math_fround(Math_fround(0 | 0))));
    HEAPF32[((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 148 | 0) >> 2] = $2890;
    $2892 = Math_fround($997(HEAP32[($4_1 + 1312 | 0) >> 2] | 0 | 0, 1218 | 0, Math_fround(Math_fround(0 | 0))));
    HEAPF32[((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 152 | 0) >> 2] = $2892;
    $2894 = Math_fround($997(HEAP32[($4_1 + 1312 | 0) >> 2] | 0 | 0, 4107 | 0, Math_fround(Math_fround(0 | 0))));
    HEAPF32[((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 156 | 0) >> 2] = $2894;
    $2896 = Math_fround($997(HEAP32[($4_1 + 1312 | 0) >> 2] | 0 | 0, 1639 | 0, Math_fround(Math_fround(0 | 0))));
    HEAPF32[((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 160 | 0) >> 2] = $2896;
    $2898 = Math_fround($997(HEAP32[($4_1 + 1312 | 0) >> 2] | 0 | 0, 1730 | 0, Math_fround(Math_fround(30.0))));
    HEAPF32[((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 204 | 0) >> 2] = $2898;
    $99_1 = $996(HEAP32[($4_1 + 1312 | 0) >> 2] | 0 | 0, 3854 | 0, 0 | 0) | 0;
    $1348((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 220 | 0 | 0, $99_1 | 0) | 0;
    $106_1 = $996(HEAP32[($4_1 + 1312 | 0) >> 2] | 0 | 0, 1787 | 0, 0 | 0) | 0;
    $1348((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 208 | 0 | 0, $106_1 | 0) | 0;
   }
   HEAP32[($4_1 + 1308 | 0) >> 2] = $994(HEAP32[($4_1 + 1316 | 0) >> 2] | 0 | 0, 1765 | 0) | 0;
   $115_1 = (HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 16 | 0;
   $117_1 = HEAP32[((HEAP32[($4_1 + 1308 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
   HEAP32[($4_1 + 1244 | 0) >> 2] = 0;
   $1342($115_1 | 0, $117_1 | 0, $4_1 + 1244 | 0 | 0);
   HEAP32[($4_1 + 1240 | 0) >> 2] = 0;
   HEAP32[($4_1 + 1304 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 1308 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($4_1 + 1328 | 0) >> 2] = 0;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($4_1 + 1304 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($4_1 + 1228 | 0) >> 2] = 0;
     HEAP32[($4_1 + 1224 | 0) >> 2] = $996(HEAP32[($4_1 + 1304 | 0) >> 2] | 0 | 0, 1442 | 0, 0 | 0) | 0;
     label$6 : {
      if (!((HEAP32[($4_1 + 1224 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$6
      }
      $145_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
      $111($4_1 + 1208 | 0 | 0, HEAP32[($4_1 + 1224 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
      HEAP32[($4_1 + 1228 | 0) >> 2] = $1501($145_1 | 0, $4_1 + 1208 | 0 | 0) | 0;
      $112($4_1 + 1208 | 0 | 0) | 0;
      label$7 : {
       if ((HEAP32[($4_1 + 1228 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$7
       }
       $167_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
       label$8 : {
        if (($167_1 | 0) == (0 | 0) & 1 | 0) {
         break label$8
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$167_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($167_1);
       }
       $176_1 = HEAP32[($4_1 + 1316 | 0) >> 2] | 0;
       $111($4_1 + 1192 | 0 | 0, 6315 | 0, 0 & 1 | 0 | 0) | 0;
       $111($4_1 + 1176 | 0 | 0, HEAP32[($4_1 + 1224 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
       $1555($5_1 | 0, $176_1 | 0, $4_1 + 1192 | 0 | 0, $4_1 + 1176 | 0 | 0);
       $112($4_1 + 1176 | 0 | 0) | 0;
       $112($4_1 + 1192 | 0 | 0) | 0;
       HEAP32[($4_1 + 1340 | 0) >> 2] = 0;
       break label$1;
      }
     }
     $207_1 = $1655(64 | 0, 2841 | 0, 162 | 0) | 0;
     $208_1 = HEAP32[($4_1 + 1240 | 0) >> 2] | 0;
     $111($4_1 + 1160 | 0 | 0, $996(HEAP32[($4_1 + 1304 | 0) >> 2] | 0 | 0, 5075 | 0, 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
     $775($207_1 | 0, $208_1 | 0, $4_1 + 1160 | 0 | 0, HEAP32[($4_1 + 1228 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($4_1 + 1236 | 0) >> 2] = $207_1;
     $112($4_1 + 1160 | 0 | 0) | 0;
     $2900 = Math_fround($997(HEAP32[($4_1 + 1304 | 0) >> 2] | 0 | 0, 4100 | 0, Math_fround(Math_fround(0 | 0))));
     HEAPF32[((HEAP32[($4_1 + 1236 | 0) >> 2] | 0) + 24 | 0) >> 2] = Math_fround($2900 * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
     $2904 = Math_fround($997(HEAP32[($4_1 + 1304 | 0) >> 2] | 0 | 0, 1322 | 0, Math_fround(Math_fround(0 | 0))));
     HEAPF32[((HEAP32[($4_1 + 1236 | 0) >> 2] | 0) + 28 | 0) >> 2] = Math_fround($2904 * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
     $2908 = Math_fround($997(HEAP32[($4_1 + 1304 | 0) >> 2] | 0 | 0, 1218 | 0, Math_fround(Math_fround(0 | 0))));
     HEAPF32[((HEAP32[($4_1 + 1236 | 0) >> 2] | 0) + 32 | 0) >> 2] = Math_fround($2908 * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
     $2912 = Math_fround($997(HEAP32[($4_1 + 1304 | 0) >> 2] | 0 | 0, 3955 | 0, Math_fround(Math_fround(0 | 0))));
     HEAPF32[((HEAP32[($4_1 + 1236 | 0) >> 2] | 0) + 36 | 0) >> 2] = $2912;
     $2914 = Math_fround($997(HEAP32[($4_1 + 1304 | 0) >> 2] | 0 | 0, 5404 | 0, Math_fround(Math_fround(1.0))));
     HEAPF32[((HEAP32[($4_1 + 1236 | 0) >> 2] | 0) + 40 | 0) >> 2] = $2914;
     $2916 = Math_fround($997(HEAP32[($4_1 + 1304 | 0) >> 2] | 0 | 0, 5390 | 0, Math_fround(Math_fround(1.0))));
     HEAPF32[((HEAP32[($4_1 + 1236 | 0) >> 2] | 0) + 44 | 0) >> 2] = $2916;
     $2918 = Math_fround($997(HEAP32[($4_1 + 1304 | 0) >> 2] | 0 | 0, 5397 | 0, Math_fround(Math_fround(0 | 0))));
     HEAPF32[((HEAP32[($4_1 + 1236 | 0) >> 2] | 0) + 48 | 0) >> 2] = $2918;
     $2920 = Math_fround($997(HEAP32[($4_1 + 1304 | 0) >> 2] | 0 | 0, 5383 | 0, Math_fround(Math_fround(0 | 0))));
     HEAPF32[((HEAP32[($4_1 + 1236 | 0) >> 2] | 0) + 52 | 0) >> 2] = $2920;
     HEAP32[($4_1 + 1232 | 0) >> 2] = $996(HEAP32[($4_1 + 1304 | 0) >> 2] | 0 | 0, 4035 | 0, 4065 | 0) | 0;
     HEAP32[((HEAP32[($4_1 + 1236 | 0) >> 2] | 0) + 56 | 0) >> 2] = 0;
     label$9 : {
      label$10 : {
       if ($1926(HEAP32[($4_1 + 1232 | 0) >> 2] | 0 | 0, 4065 | 0) | 0) {
        break label$10
       }
       HEAP32[((HEAP32[($4_1 + 1236 | 0) >> 2] | 0) + 56 | 0) >> 2] = 0;
       break label$9;
      }
      label$11 : {
       label$12 : {
        if ($1926(HEAP32[($4_1 + 1232 | 0) >> 2] | 0 | 0, 3977 | 0) | 0) {
         break label$12
        }
        HEAP32[((HEAP32[($4_1 + 1236 | 0) >> 2] | 0) + 56 | 0) >> 2] = 1;
        break label$11;
       }
       label$13 : {
        label$14 : {
         if ($1926(HEAP32[($4_1 + 1232 | 0) >> 2] | 0 | 0, 3912 | 0) | 0) {
          break label$14
         }
         HEAP32[((HEAP32[($4_1 + 1236 | 0) >> 2] | 0) + 56 | 0) >> 2] = 2;
         break label$13;
        }
        label$15 : {
         label$16 : {
          if ($1926(HEAP32[($4_1 + 1232 | 0) >> 2] | 0 | 0, 5150 | 0) | 0) {
           break label$16
          }
          HEAP32[((HEAP32[($4_1 + 1236 | 0) >> 2] | 0) + 56 | 0) >> 2] = 3;
          break label$15;
         }
         label$17 : {
          if ($1926(HEAP32[($4_1 + 1232 | 0) >> 2] | 0 | 0, 3935 | 0) | 0) {
           break label$17
          }
          HEAP32[((HEAP32[($4_1 + 1236 | 0) >> 2] | 0) + 56 | 0) >> 2] = 4;
         }
        }
       }
      }
     }
     $292_1 = $999(HEAP32[($4_1 + 1304 | 0) >> 2] | 0 | 0, 4e3 | 0, 0 & 1 | 0 | 0) | 0;
     HEAP8[((HEAP32[($4_1 + 1236 | 0) >> 2] | 0) + 60 | 0) >> 0] = $292_1 & 1 | 0;
     $296_1 = HEAP32[($4_1 + 1236 | 0) >> 2] | 0;
     HEAP32[($952((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($4_1 + 1328 | 0) >> 2] | 0 | 0) | 0) >> 2] = $296_1;
     HEAP32[($4_1 + 1240 | 0) >> 2] = (HEAP32[($4_1 + 1240 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($4_1 + 1304 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 1304 | 0) >> 2] | 0) >> 2] | 0;
     HEAP32[($4_1 + 1328 | 0) >> 2] = (HEAP32[($4_1 + 1328 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
   HEAP32[($4_1 + 1288 | 0) >> 2] = $994(HEAP32[($4_1 + 1316 | 0) >> 2] | 0 | 0, 1679 | 0) | 0;
   label$18 : {
    if (!((HEAP32[($4_1 + 1288 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$18
    }
    $1558((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 32 | 0 | 0, HEAP32[((HEAP32[($4_1 + 1288 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
    $327_1 = (HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 32 | 0;
    $329_1 = HEAP32[((HEAP32[($4_1 + 1288 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    HEAP32[($4_1 + 1152 | 0) >> 2] = 0;
    $1344($327_1 | 0, $329_1 | 0, $4_1 + 1152 | 0 | 0);
    HEAP32[($4_1 + 1156 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 1288 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 1328 | 0) >> 2] = 0;
    label$19 : {
     label$20 : while (1) {
      if (!((HEAP32[($4_1 + 1156 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$19
      }
      HEAP32[($4_1 + 1132 | 0) >> 2] = $996(HEAP32[($4_1 + 1156 | 0) >> 2] | 0 | 0, 4744 | 0, 0 | 0) | 0;
      $348_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
      $111($4_1 + 1112 | 0 | 0, HEAP32[($4_1 + 1132 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
      $359_1 = $1501($348_1 | 0, $4_1 + 1112 | 0 | 0) | 0;
      $112($4_1 + 1112 | 0 | 0) | 0;
      HEAP32[($4_1 + 1128 | 0) >> 2] = $359_1;
      label$21 : {
       if ((HEAP32[($4_1 + 1128 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$21
       }
       $370_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
       label$22 : {
        if (($370_1 | 0) == (0 | 0) & 1 | 0) {
         break label$22
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$370_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($370_1);
       }
       $379_1 = HEAP32[($4_1 + 1316 | 0) >> 2] | 0;
       $111($4_1 + 1096 | 0 | 0, 6293 | 0, 0 & 1 | 0 | 0) | 0;
       $111($4_1 + 1080 | 0 | 0, HEAP32[($4_1 + 1132 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
       $1555($5_1 | 0, $379_1 | 0, $4_1 + 1096 | 0 | 0, $4_1 + 1080 | 0 | 0);
       $112($4_1 + 1080 | 0 | 0) | 0;
       $112($4_1 + 1096 | 0 | 0) | 0;
       HEAP32[($4_1 + 1340 | 0) >> 2] = 0;
       break label$1;
      }
      $410_1 = $1655(84 | 0, 2841 | 0, 210 | 0) | 0;
      $411_1 = HEAP32[($4_1 + 1328 | 0) >> 2] | 0;
      $111($4_1 + 1064 | 0 | 0, $996(HEAP32[($4_1 + 1156 | 0) >> 2] | 0 | 0, 5075 | 0, 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
      $1641($410_1 | 0, $411_1 | 0, $4_1 + 1064 | 0 | 0, HEAP32[($4_1 + 1128 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($4_1 + 1148 | 0) >> 2] = $410_1;
      $112($4_1 + 1064 | 0 | 0) | 0;
      HEAP32[($4_1 + 1144 | 0) >> 2] = $996(HEAP32[($4_1 + 1156 | 0) >> 2] | 0 | 0, 1840 | 0, 0 | 0) | 0;
      label$23 : {
       if (!((HEAP32[($4_1 + 1144 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$23
       }
       HEAP32[($4_1 + 1060 | 0) >> 2] = $1645(HEAP32[($4_1 + 1148 | 0) >> 2] | 0 | 0) | 0;
       $2921 = Math_fround($1559(HEAP32[($4_1 + 1144 | 0) >> 2] | 0 | 0, 0 | 0));
       HEAPF32[((HEAP32[($4_1 + 1060 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2921;
       $2922 = Math_fround($1559(HEAP32[($4_1 + 1144 | 0) >> 2] | 0 | 0, 1 | 0));
       HEAPF32[((HEAP32[($4_1 + 1060 | 0) >> 2] | 0) + 8 | 0) >> 2] = $2922;
       $2923 = Math_fround($1559(HEAP32[($4_1 + 1144 | 0) >> 2] | 0 | 0, 2 | 0));
       HEAPF32[((HEAP32[($4_1 + 1060 | 0) >> 2] | 0) + 12 | 0) >> 2] = $2923;
       $2924 = Math_fround($1559(HEAP32[($4_1 + 1144 | 0) >> 2] | 0 | 0, 3 | 0));
       HEAPF32[((HEAP32[($4_1 + 1060 | 0) >> 2] | 0) + 16 | 0) >> 2] = $2924;
      }
      HEAP32[($4_1 + 1140 | 0) >> 2] = $996(HEAP32[($4_1 + 1156 | 0) >> 2] | 0 | 0, 4078 | 0, 0 | 0) | 0;
      label$24 : {
       if (!((HEAP32[($4_1 + 1140 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$24
       }
       HEAP32[($4_1 + 1056 | 0) >> 2] = $1646(HEAP32[($4_1 + 1148 | 0) >> 2] | 0 | 0) | 0;
       $2925 = Math_fround($1559(HEAP32[($4_1 + 1140 | 0) >> 2] | 0 | 0, 0 | 0));
       HEAPF32[((HEAP32[($4_1 + 1056 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2925;
       $2926 = Math_fround($1559(HEAP32[($4_1 + 1140 | 0) >> 2] | 0 | 0, 1 | 0));
       HEAPF32[((HEAP32[($4_1 + 1056 | 0) >> 2] | 0) + 8 | 0) >> 2] = $2926;
       $2927 = Math_fround($1559(HEAP32[($4_1 + 1140 | 0) >> 2] | 0 | 0, 2 | 0));
       HEAPF32[((HEAP32[($4_1 + 1056 | 0) >> 2] | 0) + 12 | 0) >> 2] = $2927;
       HEAPF32[((HEAP32[($4_1 + 1056 | 0) >> 2] | 0) + 16 | 0) >> 2] = Math_fround(1.0);
       $1648(HEAP32[($4_1 + 1148 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0);
      }
      HEAP32[($4_1 + 1136 | 0) >> 2] = $994(HEAP32[($4_1 + 1156 | 0) >> 2] | 0 | 0, 1449 | 0) | 0;
      label$25 : {
       if (!((HEAP32[($4_1 + 1136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$25
       }
       $491_1 = HEAP32[($4_1 + 1148 | 0) >> 2] | 0;
       $111($4_1 + 1040 | 0 | 0, HEAP32[((HEAP32[($4_1 + 1136 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
       $1650($491_1 | 0, $4_1 + 1040 | 0 | 0);
       $112($4_1 + 1040 | 0 | 0) | 0;
      }
      HEAP32[($4_1 + 1136 | 0) >> 2] = $994(HEAP32[($4_1 + 1156 | 0) >> 2] | 0 | 0, 5247 | 0) | 0;
      label$26 : {
       if (!((HEAP32[($4_1 + 1136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$26
       }
       label$27 : {
        label$28 : {
         if ($1926(HEAP32[((HEAP32[($4_1 + 1136 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 4625 | 0) | 0) {
          break label$28
         }
         HEAP32[((HEAP32[($4_1 + 1148 | 0) >> 2] | 0) + 80 | 0) >> 2] = 1;
         break label$27;
        }
        label$29 : {
         label$30 : {
          if ($1926(HEAP32[((HEAP32[($4_1 + 1136 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 1211 | 0) | 0) {
           break label$30
          }
          HEAP32[((HEAP32[($4_1 + 1148 | 0) >> 2] | 0) + 80 | 0) >> 2] = 2;
          break label$29;
         }
         label$31 : {
          if ($1926(HEAP32[((HEAP32[($4_1 + 1136 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 4024 | 0) | 0) {
           break label$31
          }
          HEAP32[((HEAP32[($4_1 + 1148 | 0) >> 2] | 0) + 80 | 0) >> 2] = 3;
         }
        }
       }
      }
      $534_1 = HEAP32[($4_1 + 1148 | 0) >> 2] | 0;
      HEAP32[($1214((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 32 | 0 | 0, HEAP32[($4_1 + 1328 | 0) >> 2] | 0 | 0) | 0) >> 2] = $534_1;
      HEAP32[($4_1 + 1156 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 1156 | 0) >> 2] | 0) >> 2] | 0;
      HEAP32[($4_1 + 1328 | 0) >> 2] = (HEAP32[($4_1 + 1328 | 0) >> 2] | 0) + 1 | 0;
      continue label$20;
     };
    }
   }
   HEAP32[($4_1 + 1300 | 0) >> 2] = $994(HEAP32[($4_1 + 1316 | 0) >> 2] | 0 | 0, 4083 | 0) | 0;
   label$32 : {
    if (!((HEAP32[($4_1 + 1300 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$32
    }
    $1560((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 100 | 0 | 0, HEAP32[((HEAP32[($4_1 + 1300 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
    $562_1 = (HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 100 | 0;
    $564_1 = HEAP32[((HEAP32[($4_1 + 1300 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    HEAP32[($4_1 + 1032 | 0) >> 2] = 0;
    $1349($562_1 | 0, $564_1 | 0, $4_1 + 1032 | 0 | 0);
    HEAP32[($4_1 + 1036 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 1300 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 1328 | 0) >> 2] = 0;
    label$33 : {
     label$34 : while (1) {
      if (!((HEAP32[($4_1 + 1036 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$33
      }
      $582_1 = $1655(60 | 0, 2841 | 0, 257 | 0) | 0;
      $111($4_1 + 1008 | 0 | 0, $996(HEAP32[($4_1 + 1036 | 0) >> 2] | 0 | 0, 5075 | 0, 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
      $966($582_1 | 0, $4_1 + 1008 | 0 | 0) | 0;
      $112($4_1 + 1008 | 0 | 0) | 0;
      HEAP32[($4_1 + 1024 | 0) >> 2] = $582_1;
      $832(HEAP32[($4_1 + 1024 | 0) >> 2] | 0 | 0, $998(HEAP32[($4_1 + 1036 | 0) >> 2] | 0 | 0, 1859 | 0, 0 | 0) | 0 | 0);
      $834(HEAP32[($4_1 + 1024 | 0) >> 2] | 0 | 0, ($999(HEAP32[($4_1 + 1036 | 0) >> 2] | 0 | 0, 4e3 | 0, 0 & 1 | 0 | 0) | 0) & 1 | 0 | 0);
      HEAP32[($4_1 + 1304 | 0) >> 2] = $994(HEAP32[($4_1 + 1036 | 0) >> 2] | 0 | 0, 1765 | 0) | 0;
      $1561((HEAP32[($4_1 + 1024 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[((HEAP32[($4_1 + 1304 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
      $623_1 = (HEAP32[($4_1 + 1024 | 0) >> 2] | 0) + 24 | 0;
      $625_1 = HEAP32[((HEAP32[($4_1 + 1304 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
      HEAP32[($4_1 + 1004 | 0) >> 2] = 0;
      $1342($623_1 | 0, $625_1 | 0, $4_1 + 1004 | 0 | 0);
      HEAP32[($4_1 + 1304 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 1304 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      HEAP32[($4_1 + 1324 | 0) >> 2] = 0;
      label$35 : {
       label$36 : while (1) {
        if (!((HEAP32[($4_1 + 1304 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$35
        }
        $640_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
        $111($4_1 + 992 | 0 | 0, HEAP32[((HEAP32[($4_1 + 1304 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
        $652_1 = $1501($640_1 | 0, $4_1 + 992 | 0 | 0) | 0;
        HEAP32[($952((HEAP32[($4_1 + 1024 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($4_1 + 1324 | 0) >> 2] | 0 | 0) | 0) >> 2] = $652_1;
        $112($4_1 + 992 | 0 | 0) | 0;
        label$37 : {
         if ((HEAP32[($952((HEAP32[($4_1 + 1024 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($4_1 + 1324 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
          break label$37
         }
         $673_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
         label$38 : {
          if (($673_1 | 0) == (0 | 0) & 1 | 0) {
           break label$38
          }
          FUNCTION_TABLE[HEAP32[((HEAP32[$673_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($673_1);
         }
         $682_1 = HEAP32[($4_1 + 1316 | 0) >> 2] | 0;
         $111($4_1 + 976 | 0 | 0, 6434 | 0, 0 & 1 | 0 | 0) | 0;
         $111($4_1 + 960 | 0 | 0, HEAP32[((HEAP32[($4_1 + 1304 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
         $1555($5_1 | 0, $682_1 | 0, $4_1 + 976 | 0 | 0, $4_1 + 960 | 0 | 0);
         $112($4_1 + 960 | 0 | 0) | 0;
         $112($4_1 + 976 | 0 | 0) | 0;
         HEAP32[($4_1 + 1340 | 0) >> 2] = 0;
         break label$1;
        }
        HEAP32[($4_1 + 1304 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 1304 | 0) >> 2] | 0) >> 2] | 0;
        HEAP32[($4_1 + 1324 | 0) >> 2] = (HEAP32[($4_1 + 1324 | 0) >> 2] | 0) + 1 | 0;
        continue label$36;
       };
      }
      HEAP32[($4_1 + 1028 | 0) >> 2] = $996(HEAP32[($4_1 + 1036 | 0) >> 2] | 0 | 0, 1653 | 0, 0 | 0) | 0;
      $720_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
      $111($4_1 + 944 | 0 | 0, HEAP32[($4_1 + 1028 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
      $731_1 = $1501($720_1 | 0, $4_1 + 944 | 0 | 0) | 0;
      HEAP32[((HEAP32[($4_1 + 1024 | 0) >> 2] | 0) + 40 | 0) >> 2] = $731_1;
      $112($4_1 + 944 | 0 | 0) | 0;
      label$39 : {
       if ((HEAP32[((HEAP32[($4_1 + 1024 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$39
       }
       $744_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
       label$40 : {
        if (($744_1 | 0) == (0 | 0) & 1 | 0) {
         break label$40
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$744_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($744_1);
       }
       $753_1 = HEAP32[($4_1 + 1316 | 0) >> 2] | 0;
       $111($4_1 + 928 | 0 | 0, 6339 | 0, 0 & 1 | 0 | 0) | 0;
       $111($4_1 + 912 | 0 | 0, HEAP32[($4_1 + 1028 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
       $1555($5_1 | 0, $753_1 | 0, $4_1 + 928 | 0 | 0, $4_1 + 912 | 0 | 0);
       $112($4_1 + 912 | 0 | 0) | 0;
       $112($4_1 + 928 | 0 | 0) | 0;
       HEAP32[($4_1 + 1340 | 0) >> 2] = 0;
       break label$1;
      }
      $2930 = Math_fround($997(HEAP32[($4_1 + 1036 | 0) >> 2] | 0 | 0, 1232 | 0, Math_fround(Math_fround(1.0))));
      HEAPF32[((HEAP32[($4_1 + 1024 | 0) >> 2] | 0) + 52 | 0) >> 2] = $2930;
      $2932 = Math_fround($997(HEAP32[($4_1 + 1036 | 0) >> 2] | 0 | 0, 1721 | 0, Math_fround(Math_fround(0 | 0))));
      HEAPF32[((HEAP32[($4_1 + 1024 | 0) >> 2] | 0) + 56 | 0) >> 2] = Math_fround($2932 * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
      $794_1 = $998(HEAP32[($4_1 + 1036 | 0) >> 2] | 0 | 0, 4612 | 0, 1 | 0) | 0 ? 1 : -1;
      HEAP32[((HEAP32[($4_1 + 1024 | 0) >> 2] | 0) + 44 | 0) >> 2] = $794_1;
      $802_1 = $998(HEAP32[($4_1 + 1036 | 0) >> 2] | 0 | 0, 1712 | 0, 0 | 0) | 0 ? 1 : 0;
      HEAP8[((HEAP32[($4_1 + 1024 | 0) >> 2] | 0) + 48 | 0) >> 0] = $802_1 & 1 | 0;
      $812_1 = $998(HEAP32[($4_1 + 1036 | 0) >> 2] | 0 | 0, 4134 | 0, 0 | 0) | 0 ? 1 : 0;
      HEAP8[((HEAP32[($4_1 + 1024 | 0) >> 2] | 0) + 49 | 0) >> 0] = $812_1 & 1 | 0;
      $822_1 = $998(HEAP32[($4_1 + 1036 | 0) >> 2] | 0 | 0, 4045 | 0, 0 | 0) | 0 ? 1 : 0;
      HEAP8[((HEAP32[($4_1 + 1024 | 0) >> 2] | 0) + 50 | 0) >> 0] = $822_1 & 1 | 0;
      $826_1 = HEAP32[($4_1 + 1024 | 0) >> 2] | 0;
      HEAP32[($1217((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 100 | 0 | 0, HEAP32[($4_1 + 1328 | 0) >> 2] | 0 | 0) | 0) >> 2] = $826_1;
      HEAP32[($4_1 + 1036 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 1036 | 0) >> 2] | 0) >> 2] | 0;
      HEAP32[($4_1 + 1328 | 0) >> 2] = (HEAP32[($4_1 + 1328 | 0) >> 2] | 0) + 1 | 0;
      continue label$34;
     };
    }
   }
   HEAP32[($4_1 + 1296 | 0) >> 2] = $994(HEAP32[($4_1 + 1316 | 0) >> 2] | 0 | 0, 4035 | 0) | 0;
   label$41 : {
    if (!((HEAP32[($4_1 + 1296 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$41
    }
    $1562((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 116 | 0 | 0, HEAP32[((HEAP32[($4_1 + 1296 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
    $854_1 = (HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 116 | 0;
    $856_1 = HEAP32[((HEAP32[($4_1 + 1296 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    HEAP32[($4_1 + 904 | 0) >> 2] = 0;
    $1351($854_1 | 0, $856_1 | 0, $4_1 + 904 | 0 | 0);
    HEAP32[($4_1 + 908 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 1296 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 1328 | 0) >> 2] = 0;
    label$42 : {
     label$43 : while (1) {
      if (!((HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$42
      }
      $874_1 = $1655(88 | 0, 2841 | 0, 301 | 0) | 0;
      $111($4_1 + 880 | 0 | 0, $996(HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0, 5075 | 0, 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
      $1686($874_1 | 0, $4_1 + 880 | 0 | 0) | 0;
      $112($4_1 + 880 | 0 | 0) | 0;
      HEAP32[($4_1 + 896 | 0) >> 2] = $874_1;
      $832(HEAP32[($4_1 + 896 | 0) >> 2] | 0 | 0, $998(HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0, 1859 | 0, 0 | 0) | 0 | 0);
      $834(HEAP32[($4_1 + 896 | 0) >> 2] | 0 | 0, ($999(HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0, 4e3 | 0, 0 & 1 | 0 | 0) | 0) & 1 | 0 | 0);
      HEAP32[($4_1 + 1304 | 0) >> 2] = $994(HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0, 1765 | 0) | 0;
      $1561((HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[((HEAP32[($4_1 + 1304 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
      $915_1 = (HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 24 | 0;
      $917_1 = HEAP32[((HEAP32[($4_1 + 1304 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
      HEAP32[($4_1 + 876 | 0) >> 2] = 0;
      $1342($915_1 | 0, $917_1 | 0, $4_1 + 876 | 0 | 0);
      HEAP32[($4_1 + 1304 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 1304 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      HEAP32[($4_1 + 1324 | 0) >> 2] = 0;
      label$44 : {
       label$45 : while (1) {
        if (!((HEAP32[($4_1 + 1304 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$44
        }
        $932_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
        $111($4_1 + 864 | 0 | 0, HEAP32[((HEAP32[($4_1 + 1304 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
        $944_1 = $1501($932_1 | 0, $4_1 + 864 | 0 | 0) | 0;
        HEAP32[($952((HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($4_1 + 1324 | 0) >> 2] | 0 | 0) | 0) >> 2] = $944_1;
        $112($4_1 + 864 | 0 | 0) | 0;
        label$46 : {
         if ((HEAP32[($952((HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($4_1 + 1324 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
          break label$46
         }
         $965_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
         label$47 : {
          if (($965_1 | 0) == (0 | 0) & 1 | 0) {
           break label$47
          }
          FUNCTION_TABLE[HEAP32[((HEAP32[$965_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($965_1);
         }
         $974_1 = HEAP32[($4_1 + 1316 | 0) >> 2] | 0;
         $111($4_1 + 848 | 0 | 0, 6385 | 0, 0 & 1 | 0 | 0) | 0;
         $111($4_1 + 832 | 0 | 0, HEAP32[((HEAP32[($4_1 + 1304 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
         $1555($5_1 | 0, $974_1 | 0, $4_1 + 848 | 0 | 0, $4_1 + 832 | 0 | 0);
         $112($4_1 + 832 | 0 | 0) | 0;
         $112($4_1 + 848 | 0 | 0) | 0;
         HEAP32[($4_1 + 1340 | 0) >> 2] = 0;
         break label$1;
        }
        HEAP32[($4_1 + 1304 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 1304 | 0) >> 2] | 0) >> 2] | 0;
        HEAP32[($4_1 + 1324 | 0) >> 2] = (HEAP32[($4_1 + 1324 | 0) >> 2] | 0) + 1 | 0;
        continue label$45;
       };
      }
      HEAP32[($4_1 + 900 | 0) >> 2] = $996(HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0, 1653 | 0, 0 | 0) | 0;
      $1012_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
      $111($4_1 + 816 | 0 | 0, HEAP32[($4_1 + 900 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
      $1023_1 = $1501($1012_1 | 0, $4_1 + 816 | 0 | 0) | 0;
      HEAP32[((HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 40 | 0) >> 2] = $1023_1;
      $112($4_1 + 816 | 0 | 0) | 0;
      label$48 : {
       if ((HEAP32[((HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$48
       }
       $1036_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
       label$49 : {
        if (($1036_1 | 0) == (0 | 0) & 1 | 0) {
         break label$49
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$1036_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($1036_1);
       }
       $1045_1 = HEAP32[($4_1 + 1316 | 0) >> 2] | 0;
       $111($4_1 + 800 | 0 | 0, 6339 | 0, 0 & 1 | 0 | 0) | 0;
       $111($4_1 + 784 | 0 | 0, HEAP32[($4_1 + 900 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
       $1555($5_1 | 0, $1045_1 | 0, $4_1 + 800 | 0 | 0, $4_1 + 784 | 0 | 0);
       $112($4_1 + 784 | 0 | 0) | 0;
       $112($4_1 + 800 | 0 | 0) | 0;
       HEAP32[($4_1 + 1340 | 0) >> 2] = 0;
       break label$1;
      }
      $1079_1 = $998(HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0, 4072 | 0, 0 | 0) | 0 ? 1 : 0;
      HEAP8[((HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 85 | 0) >> 0] = $1079_1 & 1 | 0;
      $1089_1 = $998(HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0, 4634 | 0, 0 | 0) | 0 ? 1 : 0;
      HEAP8[((HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 84 | 0) >> 0] = $1089_1 & 1 | 0;
      $2936 = Math_fround($997(HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0, 3955 | 0, Math_fround(Math_fround(0 | 0))));
      HEAPF32[((HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 60 | 0) >> 2] = $2936;
      $2938 = Math_fround($997(HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0, 1322 | 0, Math_fround(Math_fround(0 | 0))));
      HEAPF32[((HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 64 | 0) >> 2] = Math_fround($2938 * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
      $2942 = Math_fround($997(HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0, 1218 | 0, Math_fround(Math_fround(0 | 0))));
      HEAPF32[((HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 68 | 0) >> 2] = Math_fround($2942 * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
      $2946 = Math_fround($997(HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0, 5404 | 0, Math_fround(Math_fround(0 | 0))));
      HEAPF32[((HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 72 | 0) >> 2] = $2946;
      $2948 = Math_fround($997(HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0, 5390 | 0, Math_fround(Math_fround(0 | 0))));
      HEAPF32[((HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 76 | 0) >> 2] = $2948;
      $2950 = Math_fround($997(HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0, 5383 | 0, Math_fround(Math_fround(0 | 0))));
      HEAPF32[((HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 80 | 0) >> 2] = $2950;
      $2952 = Math_fround($997(HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0, 1259 | 0, Math_fround(Math_fround(1.0))));
      HEAPF32[((HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 44 | 0) >> 2] = $2952;
      $2954 = Math_fround($997(HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0, 1269 | 0, Math_fround(Math_fround(1.0))));
      HEAPF32[((HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 48 | 0) >> 2] = $2954;
      $2956 = Math_fround($997(HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0, 1282 | 0, Math_fround(Math_fround(1.0))));
      HEAPF32[((HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 52 | 0) >> 2] = $2956;
      $2958 = Math_fround($997(HEAP32[($4_1 + 908 | 0) >> 2] | 0 | 0, 1250 | 0, Math_fround(Math_fround(1.0))));
      HEAPF32[((HEAP32[($4_1 + 896 | 0) >> 2] | 0) + 56 | 0) >> 2] = $2958;
      $1129_1 = HEAP32[($4_1 + 896 | 0) >> 2] | 0;
      HEAP32[($1221((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 116 | 0 | 0, HEAP32[($4_1 + 1328 | 0) >> 2] | 0 | 0) | 0) >> 2] = $1129_1;
      HEAP32[($4_1 + 908 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 908 | 0) >> 2] | 0) >> 2] | 0;
      HEAP32[($4_1 + 1328 | 0) >> 2] = (HEAP32[($4_1 + 1328 | 0) >> 2] | 0) + 1 | 0;
      continue label$43;
     };
    }
   }
   HEAP32[($4_1 + 1292 | 0) >> 2] = $994(HEAP32[($4_1 + 1316 | 0) >> 2] | 0 | 0, 4113 | 0) | 0;
   label$50 : {
    if (!((HEAP32[($4_1 + 1292 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$50
    }
    $1563((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 132 | 0 | 0, HEAP32[((HEAP32[($4_1 + 1292 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
    $1157_1 = (HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 132 | 0;
    $1159_1 = HEAP32[((HEAP32[($4_1 + 1292 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    HEAP32[($4_1 + 776 | 0) >> 2] = 0;
    $1352($1157_1 | 0, $1159_1 | 0, $4_1 + 776 | 0 | 0);
    HEAP32[($4_1 + 780 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 1292 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 1328 | 0) >> 2] = 0;
    label$51 : {
     label$52 : while (1) {
      if (!((HEAP32[($4_1 + 780 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$51
      }
      $1177_1 = $1655(76 | 0, 2841 | 0, 353 | 0) | 0;
      $111($4_1 + 752 | 0 | 0, $996(HEAP32[($4_1 + 780 | 0) >> 2] | 0 | 0, 5075 | 0, 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
      $1110($1177_1 | 0, $4_1 + 752 | 0 | 0) | 0;
      $112($4_1 + 752 | 0 | 0) | 0;
      HEAP32[($4_1 + 764 | 0) >> 2] = $1177_1;
      $832(HEAP32[($4_1 + 764 | 0) >> 2] | 0 | 0, $998(HEAP32[($4_1 + 780 | 0) >> 2] | 0 | 0, 1859 | 0, 0 | 0) | 0 | 0);
      $834(HEAP32[($4_1 + 764 | 0) >> 2] | 0 | 0, ($999(HEAP32[($4_1 + 780 | 0) >> 2] | 0 | 0, 4e3 | 0, 0 & 1 | 0 | 0) | 0) & 1 | 0 | 0);
      HEAP32[($4_1 + 1304 | 0) >> 2] = $994(HEAP32[($4_1 + 780 | 0) >> 2] | 0 | 0, 1765 | 0) | 0;
      $1561((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[((HEAP32[($4_1 + 1304 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
      $1218_1 = (HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 24 | 0;
      $1220_1 = HEAP32[((HEAP32[($4_1 + 1304 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
      HEAP32[($4_1 + 748 | 0) >> 2] = 0;
      $1342($1218_1 | 0, $1220_1 | 0, $4_1 + 748 | 0 | 0);
      HEAP32[($4_1 + 1304 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 1304 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      HEAP32[($4_1 + 1324 | 0) >> 2] = 0;
      label$53 : {
       label$54 : while (1) {
        if (!((HEAP32[($4_1 + 1304 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$53
        }
        $1235_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
        $111($4_1 + 736 | 0 | 0, HEAP32[((HEAP32[($4_1 + 1304 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
        $1247_1 = $1501($1235_1 | 0, $4_1 + 736 | 0 | 0) | 0;
        HEAP32[($952((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($4_1 + 1324 | 0) >> 2] | 0 | 0) | 0) >> 2] = $1247_1;
        $112($4_1 + 736 | 0 | 0) | 0;
        label$55 : {
         if ((HEAP32[($952((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($4_1 + 1324 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
          break label$55
         }
         $1268_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
         label$56 : {
          if (($1268_1 | 0) == (0 | 0) & 1 | 0) {
           break label$56
          }
          FUNCTION_TABLE[HEAP32[((HEAP32[$1268_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($1268_1);
         }
         $1277_1 = HEAP32[($4_1 + 1316 | 0) >> 2] | 0;
         $111($4_1 + 720 | 0 | 0, 6412 | 0, 0 & 1 | 0 | 0) | 0;
         $111($4_1 + 704 | 0 | 0, HEAP32[((HEAP32[($4_1 + 1304 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
         $1555($5_1 | 0, $1277_1 | 0, $4_1 + 720 | 0 | 0, $4_1 + 704 | 0 | 0);
         $112($4_1 + 704 | 0 | 0) | 0;
         $112($4_1 + 720 | 0 | 0) | 0;
         HEAP32[($4_1 + 1340 | 0) >> 2] = 0;
         break label$1;
        }
        HEAP32[($4_1 + 1304 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 1304 | 0) >> 2] | 0) >> 2] | 0;
        HEAP32[($4_1 + 1324 | 0) >> 2] = (HEAP32[($4_1 + 1324 | 0) >> 2] | 0) + 1 | 0;
        continue label$54;
       };
      }
      HEAP32[($4_1 + 772 | 0) >> 2] = $996(HEAP32[($4_1 + 780 | 0) >> 2] | 0 | 0, 1653 | 0, 0 | 0) | 0;
      $1315_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
      $111($4_1 + 688 | 0 | 0, HEAP32[($4_1 + 772 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
      $1326_1 = $1505($1315_1 | 0, $4_1 + 688 | 0 | 0) | 0;
      HEAP32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 40 | 0) >> 2] = $1326_1;
      $112($4_1 + 688 | 0 | 0) | 0;
      label$57 : {
       if ((HEAP32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$57
       }
       $1339_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
       label$58 : {
        if (($1339_1 | 0) == (0 | 0) & 1 | 0) {
         break label$58
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$1339_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($1339_1);
       }
       $1348_1 = HEAP32[($4_1 + 1316 | 0) >> 2] | 0;
       $111($4_1 + 672 | 0 | 0, 6040 | 0, 0 & 1 | 0 | 0) | 0;
       $111($4_1 + 656 | 0 | 0, HEAP32[($4_1 + 772 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
       $1555($5_1 | 0, $1348_1 | 0, $4_1 + 672 | 0 | 0, $4_1 + 656 | 0 | 0);
       $112($4_1 + 656 | 0 | 0) | 0;
       $112($4_1 + 672 | 0 | 0) | 0;
       HEAP32[($4_1 + 1340 | 0) >> 2] = 0;
       break label$1;
      }
      HEAP32[($4_1 + 768 | 0) >> 2] = $996(HEAP32[($4_1 + 780 | 0) >> 2] | 0 | 0, 5169 | 0, 1617 | 0) | 0;
      label$59 : {
       label$60 : {
        if ($1926(HEAP32[($4_1 + 768 | 0) >> 2] | 0 | 0, 5253 | 0) | 0) {
         break label$60
        }
        HEAP32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 44 | 0) >> 2] = 0;
        break label$59;
       }
       label$61 : {
        if ($1926(HEAP32[($4_1 + 768 | 0) >> 2] | 0 | 0, 1617 | 0) | 0) {
         break label$61
        }
        HEAP32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 44 | 0) >> 2] = 1;
       }
      }
      HEAP32[($4_1 + 768 | 0) >> 2] = $996(HEAP32[($4_1 + 780 | 0) >> 2] | 0 | 0, 5182 | 0, 4100 | 0) | 0;
      label$62 : {
       label$63 : {
        if ($1926(HEAP32[($4_1 + 768 | 0) >> 2] | 0 | 0, 4100 | 0) | 0) {
         break label$63
        }
        HEAP32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 48 | 0) >> 2] = 0;
        break label$62;
       }
       label$64 : {
        label$65 : {
         if ($1926(HEAP32[($4_1 + 768 | 0) >> 2] | 0 | 0, 5253 | 0) | 0) {
          break label$65
         }
         HEAP32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 48 | 0) >> 2] = 1;
         break label$64;
        }
        label$66 : {
         if ($1926(HEAP32[($4_1 + 768 | 0) >> 2] | 0 | 0, 1617 | 0) | 0) {
          break label$66
         }
         HEAP32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 48 | 0) >> 2] = 2;
        }
       }
      }
      HEAP32[($4_1 + 768 | 0) >> 2] = $996(HEAP32[($4_1 + 780 | 0) >> 2] | 0 | 0, 5194 | 0, 1609 | 0) | 0;
      label$67 : {
       label$68 : {
        if ($1926(HEAP32[($4_1 + 768 | 0) >> 2] | 0 | 0, 1609 | 0) | 0) {
         break label$68
        }
        HEAP32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 52 | 0) >> 2] = 0;
        break label$67;
       }
       label$69 : {
        label$70 : {
         if ($1926(HEAP32[($4_1 + 768 | 0) >> 2] | 0 | 0, 4018 | 0) | 0) {
          break label$70
         }
         HEAP32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 52 | 0) >> 2] = 1;
         break label$69;
        }
        label$71 : {
         if ($1926(HEAP32[($4_1 + 768 | 0) >> 2] | 0 | 0, 5158 | 0) | 0) {
          break label$71
         }
         HEAP32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 52 | 0) >> 2] = 2;
        }
       }
      }
      $2960 = Math_fround($997(HEAP32[($4_1 + 780 | 0) >> 2] | 0 | 0, 3955 | 0, Math_fround(Math_fround(0 | 0))));
      HEAPF32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 56 | 0) >> 2] = $2960;
      $2962 = Math_fround($997(HEAP32[($4_1 + 780 | 0) >> 2] | 0 | 0, 3903 | 0, Math_fround(Math_fround(0 | 0))));
      HEAPF32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 60 | 0) >> 2] = $2962;
      label$72 : {
       if (HEAP32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
        break label$72
       }
       $1438_1 = HEAP32[($4_1 + 764 | 0) >> 2] | 0;
       HEAPF32[($1438_1 + 60 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1438_1 + 60 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
      }
      $2967 = Math_fround($997(HEAP32[($4_1 + 780 | 0) >> 2] | 0 | 0, 4570 | 0, Math_fround(Math_fround(0 | 0))));
      HEAPF32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 64 | 0) >> 2] = $2967;
      label$73 : {
       label$74 : {
        if (!(HEAP32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0)) {
         break label$74
        }
        if (!((HEAP32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$73
        }
       }
       $1453_1 = HEAP32[($4_1 + 764 | 0) >> 2] | 0;
       HEAPF32[($1453_1 + 64 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1453_1 + 64 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
      }
      $2972 = Math_fround($997(HEAP32[($4_1 + 780 | 0) >> 2] | 0 | 0, 1259 | 0, Math_fround(Math_fround(1.0))));
      HEAPF32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 68 | 0) >> 2] = $2972;
      $2974 = Math_fround($997(HEAP32[($4_1 + 780 | 0) >> 2] | 0 | 0, 1269 | 0, Math_fround(Math_fround(1.0))));
      HEAPF32[((HEAP32[($4_1 + 764 | 0) >> 2] | 0) + 72 | 0) >> 2] = $2974;
      $1460_1 = HEAP32[($4_1 + 764 | 0) >> 2] | 0;
      HEAP32[($1225((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 132 | 0 | 0, HEAP32[($4_1 + 1328 | 0) >> 2] | 0 | 0) | 0) >> 2] = $1460_1;
      HEAP32[($4_1 + 780 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 780 | 0) >> 2] | 0) >> 2] | 0;
      HEAP32[($4_1 + 1328 | 0) >> 2] = (HEAP32[($4_1 + 1328 | 0) >> 2] | 0) + 1 | 0;
      continue label$52;
     };
    }
   }
   HEAP32[($4_1 + 1284 | 0) >> 2] = $994(HEAP32[($4_1 + 1316 | 0) >> 2] | 0 | 0, 1745 | 0) | 0;
   label$75 : {
    if (!((HEAP32[($4_1 + 1284 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$75
    }
    $1564((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 48 | 0 | 0, HEAP32[((HEAP32[($4_1 + 1284 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
    $1488_1 = (HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 48 | 0;
    $1490_1 = HEAP32[((HEAP32[($4_1 + 1284 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    HEAP32[($4_1 + 648 | 0) >> 2] = 0;
    $1565($1488_1 | 0, $1490_1 | 0, $4_1 + 648 | 0 | 0);
    HEAP32[($4_1 + 644 | 0) >> 2] = 0;
    HEAP32[($4_1 + 652 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 1284 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 1328 | 0) >> 2] = 0;
    label$76 : {
     label$77 : while (1) {
      if (!((HEAP32[($4_1 + 652 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$76
      }
      HEAP32[($4_1 + 632 | 0) >> 2] = 0;
      HEAP32[($4_1 + 628 | 0) >> 2] = $996(HEAP32[($4_1 + 652 | 0) >> 2] | 0 | 0, 5075 | 0, 6494 | 0) | 0;
      label$78 : {
       if ($1821(HEAP32[($4_1 + 628 | 0) >> 2] | 0 | 0) | 0) {
        break label$78
       }
       HEAP32[($4_1 + 628 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 652 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
      }
      $1518_1 = $1655(68 | 0, 2841 | 0, 428 | 0) | 0;
      $111($4_1 + 616 | 0 | 0, HEAP32[($4_1 + 628 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
      $1600($1518_1 | 0, $4_1 + 616 | 0 | 0) | 0;
      HEAP32[($4_1 + 632 | 0) >> 2] = $1518_1;
      $112($4_1 + 616 | 0 | 0) | 0;
      HEAP32[($4_1 + 612 | 0) >> 2] = $994(HEAP32[($4_1 + 652 | 0) >> 2] | 0 | 0, 1765 | 0) | 0;
      label$79 : {
       if (!((HEAP32[($4_1 + 612 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$79
       }
       HEAP32[($4_1 + 612 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 612 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       label$80 : {
        label$81 : while (1) {
         if (!((HEAP32[($4_1 + 612 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$80
         }
         $1551_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
         $111($4_1 + 592 | 0 | 0, HEAP32[((HEAP32[($4_1 + 612 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
         $1563_1 = $1501($1551_1 | 0, $4_1 + 592 | 0 | 0) | 0;
         $112($4_1 + 592 | 0 | 0) | 0;
         HEAP32[($4_1 + 608 | 0) >> 2] = $1563_1;
         label$82 : {
          if ((HEAP32[($4_1 + 608 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
           break label$82
          }
          $1574_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
          label$83 : {
           if (($1574_1 | 0) == (0 | 0) & 1 | 0) {
            break label$83
           }
           FUNCTION_TABLE[HEAP32[((HEAP32[$1574_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($1574_1);
          }
          $1583_1 = HEAP32[($4_1 + 1316 | 0) >> 2] | 0;
          $111($4_1 + 576 | 0 | 0, 6363 | 0, 0 & 1 | 0 | 0) | 0;
          $111($4_1 + 560 | 0 | 0, HEAP32[((HEAP32[($4_1 + 612 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
          $1555($5_1 | 0, $1583_1 | 0, $4_1 + 576 | 0 | 0, $4_1 + 560 | 0 | 0);
          $112($4_1 + 560 | 0 | 0) | 0;
          $112($4_1 + 576 | 0 | 0) | 0;
          HEAP32[($4_1 + 1340 | 0) >> 2] = 0;
          break label$1;
         }
         $1374($1614(HEAP32[($4_1 + 632 | 0) >> 2] | 0 | 0) | 0 | 0, $4_1 + 608 | 0 | 0);
         HEAP32[($4_1 + 612 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 612 | 0) >> 2] | 0) >> 2] | 0;
         continue label$81;
        };
       }
      }
      HEAP32[($4_1 + 612 | 0) >> 2] = $994(HEAP32[($4_1 + 652 | 0) >> 2] | 0 | 0, 4083 | 0) | 0;
      label$84 : {
       if (!((HEAP32[($4_1 + 612 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$84
       }
       HEAP32[($4_1 + 612 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 612 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       label$85 : {
        label$86 : while (1) {
         if (!((HEAP32[($4_1 + 612 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$85
         }
         $1638_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
         $111($4_1 + 544 | 0 | 0, HEAP32[((HEAP32[($4_1 + 612 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
         $1650_1 = $1515($1638_1 | 0, $4_1 + 544 | 0 | 0) | 0;
         $112($4_1 + 544 | 0 | 0) | 0;
         HEAP32[($4_1 + 556 | 0) >> 2] = $1650_1;
         label$87 : {
          if ((HEAP32[($4_1 + 556 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
           break label$87
          }
          $1661_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
          label$88 : {
           if (($1661_1 | 0) == (0 | 0) & 1 | 0) {
            break label$88
           }
           FUNCTION_TABLE[HEAP32[((HEAP32[$1661_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($1661_1);
          }
          $1670_1 = HEAP32[($4_1 + 1316 | 0) >> 2] | 0;
          $111($4_1 + 528 | 0 | 0, 6180 | 0, 0 & 1 | 0 | 0) | 0;
          $111($4_1 + 512 | 0 | 0, HEAP32[((HEAP32[($4_1 + 612 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
          $1555($5_1 | 0, $1670_1 | 0, $4_1 + 528 | 0 | 0, $4_1 + 512 | 0 | 0);
          $112($4_1 + 512 | 0 | 0) | 0;
          $112($4_1 + 528 | 0 | 0) | 0;
          HEAP32[($4_1 + 1340 | 0) >> 2] = 0;
          break label$1;
         }
         $1700_1 = $1615(HEAP32[($4_1 + 632 | 0) >> 2] | 0 | 0) | 0;
         HEAP32[($4_1 + 508 | 0) >> 2] = HEAP32[($4_1 + 556 | 0) >> 2] | 0;
         $1375($1700_1 | 0, $4_1 + 508 | 0 | 0);
         HEAP32[($4_1 + 612 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 612 | 0) >> 2] | 0) >> 2] | 0;
         continue label$86;
        };
       }
      }
      HEAP32[($4_1 + 612 | 0) >> 2] = $994(HEAP32[($4_1 + 652 | 0) >> 2] | 0 | 0, 4035 | 0) | 0;
      label$89 : {
       if (!((HEAP32[($4_1 + 612 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$89
       }
       HEAP32[($4_1 + 612 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 612 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       label$90 : {
        label$91 : while (1) {
         if (!((HEAP32[($4_1 + 612 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$90
         }
         $1726_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
         $111($4_1 + 488 | 0 | 0, HEAP32[((HEAP32[($4_1 + 612 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
         $1738_1 = $1517($1726_1 | 0, $4_1 + 488 | 0 | 0) | 0;
         $112($4_1 + 488 | 0 | 0) | 0;
         HEAP32[($4_1 + 504 | 0) >> 2] = $1738_1;
         label$92 : {
          if ((HEAP32[($4_1 + 504 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
           break label$92
          }
          $1749_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
          label$93 : {
           if (($1749_1 | 0) == (0 | 0) & 1 | 0) {
            break label$93
           }
           FUNCTION_TABLE[HEAP32[((HEAP32[$1749_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($1749_1);
          }
          $1758_1 = HEAP32[($4_1 + 1316 | 0) >> 2] | 0;
          $111($4_1 + 472 | 0 | 0, 6081 | 0, 0 & 1 | 0 | 0) | 0;
          $111($4_1 + 456 | 0 | 0, HEAP32[((HEAP32[($4_1 + 612 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
          $1555($5_1 | 0, $1758_1 | 0, $4_1 + 472 | 0 | 0, $4_1 + 456 | 0 | 0);
          $112($4_1 + 456 | 0 | 0) | 0;
          $112($4_1 + 472 | 0 | 0) | 0;
          HEAP32[($4_1 + 1340 | 0) >> 2] = 0;
          break label$1;
         }
         $1788_1 = $1615(HEAP32[($4_1 + 632 | 0) >> 2] | 0 | 0) | 0;
         HEAP32[($4_1 + 452 | 0) >> 2] = HEAP32[($4_1 + 504 | 0) >> 2] | 0;
         $1375($1788_1 | 0, $4_1 + 452 | 0 | 0);
         HEAP32[($4_1 + 612 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 612 | 0) >> 2] | 0) >> 2] | 0;
         continue label$91;
        };
       }
      }
      HEAP32[($4_1 + 612 | 0) >> 2] = $994(HEAP32[($4_1 + 652 | 0) >> 2] | 0 | 0, 4113 | 0) | 0;
      label$94 : {
       if (!((HEAP32[($4_1 + 612 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$94
       }
       HEAP32[($4_1 + 612 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 612 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       label$95 : {
        label$96 : while (1) {
         if (!((HEAP32[($4_1 + 612 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$95
         }
         $1814_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
         $111($4_1 + 432 | 0 | 0, HEAP32[((HEAP32[($4_1 + 612 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
         $1826_1 = $1519($1814_1 | 0, $4_1 + 432 | 0 | 0) | 0;
         $112($4_1 + 432 | 0 | 0) | 0;
         HEAP32[($4_1 + 448 | 0) >> 2] = $1826_1;
         label$97 : {
          if ((HEAP32[($4_1 + 448 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
           break label$97
          }
          $1837_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
          label$98 : {
           if (($1837_1 | 0) == (0 | 0) & 1 | 0) {
            break label$98
           }
           FUNCTION_TABLE[HEAP32[((HEAP32[$1837_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($1837_1);
          }
          $1846_1 = HEAP32[($4_1 + 1316 | 0) >> 2] | 0;
          $111($4_1 + 416 | 0 | 0, 6119 | 0, 0 & 1 | 0 | 0) | 0;
          $111($4_1 + 400 | 0 | 0, HEAP32[((HEAP32[($4_1 + 612 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
          $1555($5_1 | 0, $1846_1 | 0, $4_1 + 416 | 0 | 0, $4_1 + 400 | 0 | 0);
          $112($4_1 + 400 | 0 | 0) | 0;
          $112($4_1 + 416 | 0 | 0) | 0;
          HEAP32[($4_1 + 1340 | 0) >> 2] = 0;
          break label$1;
         }
         $1876_1 = $1615(HEAP32[($4_1 + 632 | 0) >> 2] | 0 | 0) | 0;
         HEAP32[($4_1 + 396 | 0) >> 2] = HEAP32[($4_1 + 448 | 0) >> 2] | 0;
         $1375($1876_1 | 0, $4_1 + 396 | 0 | 0);
         HEAP32[($4_1 + 612 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 612 | 0) >> 2] | 0) >> 2] | 0;
         continue label$96;
        };
       }
      }
      $1883_1 = HEAP32[($4_1 + 632 | 0) >> 2] | 0;
      $1886_1 = (HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 48 | 0;
      $1887_1 = HEAP32[($4_1 + 644 | 0) >> 2] | 0;
      HEAP32[($4_1 + 644 | 0) >> 2] = $1887_1 + 1 | 0;
      HEAP32[($1273($1886_1 | 0, $1887_1 | 0) | 0) >> 2] = $1883_1;
      label$99 : {
       if ($1926(HEAP32[($4_1 + 628 | 0) >> 2] | 0 | 0, 1625 | 0) | 0) {
        break label$99
       }
       HEAP32[((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 64 | 0) >> 2] = HEAP32[($4_1 + 632 | 0) >> 2] | 0;
      }
      HEAP32[($4_1 + 392 | 0) >> 2] = $994(HEAP32[($4_1 + 652 | 0) >> 2] | 0 | 0, 1692 | 0) | 0;
      label$100 : {
       if ((HEAP32[($4_1 + 392 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$100
       }
       HEAP32[($4_1 + 392 | 0) >> 2] = HEAP32[($4_1 + 652 | 0) >> 2] | 0;
      }
      HEAP32[($4_1 + 640 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 392 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      label$101 : {
       label$102 : while (1) {
        if (!((HEAP32[($4_1 + 640 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$101
        }
        $1916_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
        $111($4_1 + 376 | 0 | 0, HEAP32[((HEAP32[($4_1 + 640 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
        $1928_1 = $1505($1916_1 | 0, $4_1 + 376 | 0 | 0) | 0;
        $112($4_1 + 376 | 0 | 0) | 0;
        HEAP32[($4_1 + 388 | 0) >> 2] = $1928_1;
        HEAP32[($4_1 + 372 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 640 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        label$103 : {
         label$104 : while (1) {
          if (!((HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$103
          }
          HEAP32[($4_1 + 368 | 0) >> 2] = 0;
          HEAP32[($4_1 + 364 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 372 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
          HEAP32[($4_1 + 360 | 0) >> 2] = $996(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 5075 | 0, HEAP32[($4_1 + 364 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($4_1 + 356 | 0) >> 2] = $996(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 4113 | 0, HEAP32[($4_1 + 360 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($4_1 + 344 | 0) >> 2] = $996(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 4734 | 0, 3993 | 0) | 0;
          label$105 : {
           label$106 : {
            if ($1926(HEAP32[($4_1 + 344 | 0) >> 2] | 0 | 0, 3993 | 0) | 0) {
             break label$106
            }
            HEAP32[($4_1 + 340 | 0) >> 2] = 0;
            break label$105;
           }
           label$107 : {
            label$108 : {
             if ($1926(HEAP32[($4_1 + 344 | 0) >> 2] | 0 | 0, 4124 | 0) | 0) {
              break label$108
             }
             HEAP32[($4_1 + 340 | 0) >> 2] = 2;
             break label$107;
            }
            label$109 : {
             label$110 : {
              if ($1926(HEAP32[($4_1 + 344 | 0) >> 2] | 0 | 0, 4118 | 0) | 0) {
               break label$110
              }
              HEAP32[($4_1 + 340 | 0) >> 2] = 3;
              break label$109;
             }
             label$111 : {
              label$112 : {
               if ($1926(HEAP32[($4_1 + 344 | 0) >> 2] | 0 | 0, 1220 | 0) | 0) {
                break label$112
               }
               HEAP32[($4_1 + 340 | 0) >> 2] = 1;
               break label$111;
              }
              label$113 : {
               label$114 : {
                if ($1926(HEAP32[($4_1 + 344 | 0) >> 2] | 0 | 0, 4113 | 0) | 0) {
                 break label$114
                }
                HEAP32[($4_1 + 340 | 0) >> 2] = 4;
                break label$113;
               }
               label$115 : {
                label$116 : {
                 if ($1926(HEAP32[($4_1 + 344 | 0) >> 2] | 0 | 0, 4561 | 0) | 0) {
                  break label$116
                 }
                 HEAP32[($4_1 + 340 | 0) >> 2] = 6;
                 break label$115;
                }
                label$117 : {
                 label$118 : {
                  if ($1926(HEAP32[($4_1 + 344 | 0) >> 2] | 0 | 0, 1388 | 0) | 0) {
                   break label$118
                  }
                  HEAP32[($4_1 + 340 | 0) >> 2] = 5;
                  break label$117;
                 }
                 $1984_1 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
                 label$119 : {
                  if (($1984_1 | 0) == (0 | 0) & 1 | 0) {
                   break label$119
                  }
                  FUNCTION_TABLE[HEAP32[((HEAP32[$1984_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($1984_1);
                 }
                 $1993_1 = HEAP32[($4_1 + 1316 | 0) >> 2] | 0;
                 $111($4_1 + 328 | 0 | 0, 5948 | 0, 0 & 1 | 0 | 0) | 0;
                 $111($4_1 + 312 | 0 | 0, HEAP32[($4_1 + 344 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
                 $1555($5_1 | 0, $1993_1 | 0, $4_1 + 328 | 0 | 0, $4_1 + 312 | 0 | 0);
                 $112($4_1 + 312 | 0 | 0) | 0;
                 $112($4_1 + 328 | 0 | 0) | 0;
                 HEAP32[($4_1 + 1340 | 0) >> 2] = 0;
                 break label$1;
                }
               }
              }
             }
            }
           }
          }
          $2021_1 = HEAP32[($4_1 + 340 | 0) >> 2] | 0;
          label$120 : {
           label$121 : {
            label$122 : {
             switch ($2021_1 | 0) {
             case 0:
              $2023_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
              $2024_1 = HEAP32[($4_1 + 632 | 0) >> 2] | 0;
              $111($4_1 + 296 | 0 | 0, HEAP32[($4_1 + 360 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
              $111($4_1 + 280 | 0 | 0, HEAP32[($4_1 + 356 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
              HEAP32[($4_1 + 368 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$2023_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($2023_1, $2024_1, $4_1 + 296 | 0, $4_1 + 280 | 0) | 0;
              $112($4_1 + 280 | 0 | 0) | 0;
              $112($4_1 + 296 | 0 | 0) | 0;
              label$128 : {
               if ((HEAP32[($4_1 + 368 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
                break label$128
               }
               break label$120;
              }
              HEAP32[($4_1 + 276 | 0) >> 2] = HEAP32[($4_1 + 368 | 0) >> 2] | 0;
              $1348((HEAP32[($4_1 + 276 | 0) >> 2] | 0) + 116 | 0 | 0, HEAP32[($4_1 + 356 | 0) >> 2] | 0 | 0) | 0;
              $2976 = Math_fround($997(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 1322 | 0, Math_fround(Math_fround(0 | 0))));
              HEAPF32[((HEAP32[($4_1 + 276 | 0) >> 2] | 0) + 32 | 0) >> 2] = Math_fround($2976 * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
              $2980 = Math_fround($997(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 1218 | 0, Math_fround(Math_fround(0 | 0))));
              HEAPF32[((HEAP32[($4_1 + 276 | 0) >> 2] | 0) + 36 | 0) >> 2] = Math_fround($2980 * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
              $2984 = Math_fround($997(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 5404 | 0, Math_fround(Math_fround(1.0))));
              HEAPF32[((HEAP32[($4_1 + 276 | 0) >> 2] | 0) + 44 | 0) >> 2] = $2984;
              $2986 = Math_fround($997(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 5390 | 0, Math_fround(Math_fround(1.0))));
              HEAPF32[((HEAP32[($4_1 + 276 | 0) >> 2] | 0) + 48 | 0) >> 2] = $2986;
              $2988 = Math_fround($997(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 3955 | 0, Math_fround(Math_fround(0 | 0))));
              HEAPF32[((HEAP32[($4_1 + 276 | 0) >> 2] | 0) + 40 | 0) >> 2] = $2988;
              $2990 = Math_fround($997(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 4107 | 0, Math_fround(Math_fround(32.0))));
              HEAPF32[((HEAP32[($4_1 + 276 | 0) >> 2] | 0) + 52 | 0) >> 2] = Math_fround($2990 * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
              $2994 = Math_fround($997(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 1639 | 0, Math_fround(Math_fround(32.0))));
              HEAPF32[((HEAP32[($4_1 + 276 | 0) >> 2] | 0) + 56 | 0) >> 2] = Math_fround($2994 * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
              HEAP32[($4_1 + 352 | 0) >> 2] = $996(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 1840 | 0, 0 | 0) | 0;
              label$129 : {
               if (!((HEAP32[($4_1 + 352 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                break label$129
               }
               $2997 = Math_fround($1559(HEAP32[($4_1 + 352 | 0) >> 2] | 0 | 0, 0 | 0));
               HEAPF32[(($1172(HEAP32[($4_1 + 276 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] = $2997;
               $2998 = Math_fround($1559(HEAP32[($4_1 + 352 | 0) >> 2] | 0 | 0, 1 | 0));
               HEAPF32[(($1172(HEAP32[($4_1 + 276 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2] = $2998;
               $2999 = Math_fround($1559(HEAP32[($4_1 + 352 | 0) >> 2] | 0 | 0, 2 | 0));
               HEAPF32[(($1172(HEAP32[($4_1 + 276 | 0) >> 2] | 0 | 0) | 0) + 12 | 0) >> 2] = $2999;
               $3000 = Math_fround($1559(HEAP32[($4_1 + 352 | 0) >> 2] | 0 | 0, 3 | 0));
               HEAPF32[(($1172(HEAP32[($4_1 + 276 | 0) >> 2] | 0 | 0) | 0) + 16 | 0) >> 2] = $3000;
              }
              $1168(HEAP32[($4_1 + 276 | 0) >> 2] | 0 | 0);
              $2118 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
              FUNCTION_TABLE[HEAP32[((HEAP32[$2118 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($2118, HEAP32[($4_1 + 276 | 0) >> 2] | 0);
              break label$121;
             case 2:
             case 3:
              $2122 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
              $2123 = HEAP32[($4_1 + 632 | 0) >> 2] | 0;
              $111($4_1 + 264 | 0 | 0, HEAP32[($4_1 + 360 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
              $111($4_1 + 248 | 0 | 0, HEAP32[($4_1 + 356 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
              HEAP32[($4_1 + 368 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$2122 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($2122, $2123, $4_1 + 264 | 0, $4_1 + 248 | 0) | 0;
              $112($4_1 + 248 | 0 | 0) | 0;
              $112($4_1 + 264 | 0 | 0) | 0;
              label$130 : {
               if ((HEAP32[($4_1 + 368 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
                break label$130
               }
               break label$120;
              }
              HEAP32[($4_1 + 244 | 0) >> 2] = HEAP32[($4_1 + 368 | 0) >> 2] | 0;
              $1348((HEAP32[($4_1 + 244 | 0) >> 2] | 0) + 168 | 0 | 0, HEAP32[($4_1 + 356 | 0) >> 2] | 0 | 0) | 0;
              HEAP32[($4_1 + 352 | 0) >> 2] = $996(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 1840 | 0, 0 | 0) | 0;
              label$131 : {
               if (!((HEAP32[($4_1 + 352 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                break label$131
               }
               $3001 = Math_fround($1559(HEAP32[($4_1 + 352 | 0) >> 2] | 0 | 0, 0 | 0));
               HEAPF32[(($1063(HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] = $3001;
               $3002 = Math_fround($1559(HEAP32[($4_1 + 352 | 0) >> 2] | 0 | 0, 1 | 0));
               HEAPF32[(($1063(HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2] = $3002;
               $3003 = Math_fround($1559(HEAP32[($4_1 + 352 | 0) >> 2] | 0 | 0, 2 | 0));
               HEAPF32[(($1063(HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0) | 0) + 12 | 0) >> 2] = $3003;
               $3004 = Math_fround($1559(HEAP32[($4_1 + 352 | 0) >> 2] | 0 | 0, 3 | 0));
               HEAPF32[(($1063(HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0) | 0) + 16 | 0) >> 2] = $3004;
              }
              $3006 = Math_fround($997(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 4107 | 0, Math_fround(Math_fround(32.0))));
              HEAPF32[((HEAP32[($4_1 + 244 | 0) >> 2] | 0) + 196 | 0) >> 2] = Math_fround($3006 * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
              $3010 = Math_fround($997(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 1639 | 0, Math_fround(Math_fround(32.0))));
              HEAPF32[((HEAP32[($4_1 + 244 | 0) >> 2] | 0) + 200 | 0) >> 2] = Math_fround($3010 * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
              HEAP32[($4_1 + 348 | 0) >> 2] = $994(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 1442 | 0) | 0;
              label$132 : {
               label$133 : {
                if ((HEAP32[($4_1 + 348 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
                 break label$133
                }
                HEAP32[($4_1 + 348 | 0) >> 2] = $994(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 1771 | 0) | 0;
                $1075((HEAP32[($4_1 + 244 | 0) >> 2] | 0) + 136 | 0 | 0, HEAP32[((HEAP32[($4_1 + 348 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
                $2218 = (HEAP32[($4_1 + 244 | 0) >> 2] | 0) + 136 | 0;
                $2220 = HEAP32[((HEAP32[($4_1 + 348 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
                HEAP16[($4_1 + 238 | 0) >> 1] = 0;
                $1395($2218 | 0, $2220 | 0, $4_1 + 238 | 0 | 0);
                HEAP32[($4_1 + 348 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
                HEAP32[($4_1 + 1324 | 0) >> 2] = 0;
                label$134 : {
                 label$135 : while (1) {
                  if (!((HEAP32[($4_1 + 348 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                   break label$134
                  }
                  $2236 = HEAP32[((HEAP32[($4_1 + 348 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
                  HEAP16[($1076((HEAP32[($4_1 + 244 | 0) >> 2] | 0) + 136 | 0 | 0, HEAP32[($4_1 + 1324 | 0) >> 2] | 0 | 0) | 0) >> 1] = $2236;
                  HEAP32[($4_1 + 348 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 348 | 0) >> 2] | 0) >> 2] | 0;
                  HEAP32[($4_1 + 1324 | 0) >> 2] = (HEAP32[($4_1 + 1324 | 0) >> 2] | 0) + 1 | 0;
                  continue label$135;
                 };
                }
                HEAP32[($4_1 + 348 | 0) >> 2] = $994(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 1675 | 0) | 0;
                HEAP32[($4_1 + 240 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 348 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
                $729((HEAP32[($4_1 + 244 | 0) >> 2] | 0) + 120 | 0 | 0, HEAP32[($4_1 + 240 | 0) >> 2] | 0 | 0);
                $2258 = (HEAP32[($4_1 + 244 | 0) >> 2] | 0) + 120 | 0;
                $2259 = HEAP32[($4_1 + 240 | 0) >> 2] | 0;
                HEAPF32[($4_1 + 232 | 0) >> 2] = Math_fround(0 | 0);
                $573($2258 | 0, $2259 | 0, $4_1 + 232 | 0 | 0);
                HEAP32[($4_1 + 348 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
                HEAP32[($4_1 + 1324 | 0) >> 2] = 0;
                label$136 : {
                 label$137 : while (1) {
                  if (!((HEAP32[($4_1 + 348 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                   break label$136
                  }
                  $3014 = Math_fround(HEAPF32[((HEAP32[($4_1 + 348 | 0) >> 2] | 0) + 24 | 0) >> 2]);
                  HEAPF32[($15((HEAP32[($4_1 + 244 | 0) >> 2] | 0) + 120 | 0 | 0, HEAP32[($4_1 + 1324 | 0) >> 2] | 0 | 0) | 0) >> 2] = $3014;
                  HEAP32[($4_1 + 348 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 348 | 0) >> 2] | 0) >> 2] | 0;
                  HEAP32[($4_1 + 1324 | 0) >> 2] = (HEAP32[($4_1 + 1324 | 0) >> 2] | 0) + 1 | 0;
                  continue label$137;
                 };
                }
                $1566($5_1 | 0, HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 240 | 0) >> 2] | 0 | 0);
                $1051(HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0);
                $2292 = $998(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 4060 | 0, 0 | 0) | 0;
                HEAP32[((HEAP32[($4_1 + 244 | 0) >> 2] | 0) + 224 | 0) >> 2] = $2292;
                HEAP32[($4_1 + 348 | 0) >> 2] = $994(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 1781 | 0) | 0;
                label$138 : {
                 if (!((HEAP32[($4_1 + 348 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                  break label$138
                 }
                 $1075((HEAP32[($4_1 + 244 | 0) >> 2] | 0) + 152 | 0 | 0, HEAP32[((HEAP32[($4_1 + 348 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
                 $2311 = (HEAP32[($4_1 + 244 | 0) >> 2] | 0) + 152 | 0;
                 $2313 = HEAP32[((HEAP32[($4_1 + 348 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
                 HEAP16[($4_1 + 230 | 0) >> 1] = 0;
                 $1395($2311 | 0, $2313 | 0, $4_1 + 230 | 0 | 0);
                 HEAP32[($4_1 + 348 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
                 HEAP32[($4_1 + 1324 | 0) >> 2] = 0;
                 label$139 : {
                  label$140 : while (1) {
                   if (!((HEAP32[($4_1 + 348 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                    break label$139
                   }
                   $2329 = HEAP32[((HEAP32[($4_1 + 348 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
                   HEAP16[($1076((HEAP32[($4_1 + 244 | 0) >> 2] | 0) + 152 | 0 | 0, HEAP32[($4_1 + 1324 | 0) >> 2] | 0 | 0) | 0) >> 1] = $2329;
                   HEAP32[($4_1 + 348 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 348 | 0) >> 2] | 0) >> 2] | 0;
                   HEAP32[($4_1 + 1324 | 0) >> 2] = (HEAP32[($4_1 + 1324 | 0) >> 2] | 0) + 1 | 0;
                   continue label$140;
                  };
                 }
                }
                $2340 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
                FUNCTION_TABLE[HEAP32[((HEAP32[$2340 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($2340, HEAP32[($4_1 + 244 | 0) >> 2] | 0);
                break label$132;
               }
               HEAP8[($4_1 + 229 | 0) >> 0] = ($998(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 4053 | 0, 1 | 0) | 0 ? 1 : 0) & 1 | 0;
               $2356 = $1655(40 | 0, 2841 | 0, 615 | 0) | 0;
               $2357 = HEAP32[($4_1 + 244 | 0) >> 2] | 0;
               $111($4_1 + 208 | 0 | 0, $996(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 4e3 | 0, 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
               $2369 = $1642(HEAP32[($4_1 + 388 | 0) >> 2] | 0 | 0) | 0;
               $111($4_1 + 192 | 0 | 0, HEAP32[((HEAP32[($4_1 + 348 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
               $1011($2356 | 0, $2357 | 0, $4_1 + 208 | 0 | 0, $2369 | 0, $4_1 + 192 | 0 | 0, (HEAPU8[($4_1 + 229 | 0) >> 0] | 0) & 1 | 0 | 0) | 0;
               $112($4_1 + 192 | 0 | 0) | 0;
               $112($4_1 + 208 | 0 | 0) | 0;
               HEAP32[($4_1 + 224 | 0) >> 2] = $2356;
               $1394($5_1 + 8 | 0 | 0, $4_1 + 224 | 0 | 0);
              }
              break label$121;
             case 1:
              $2398 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
              $2399 = HEAP32[($4_1 + 632 | 0) >> 2] | 0;
              $111($4_1 + 176 | 0 | 0, HEAP32[($4_1 + 360 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
              HEAP32[($4_1 + 368 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$2398 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($2398, $2399, $4_1 + 176 | 0) | 0;
              $112($4_1 + 176 | 0 | 0) | 0;
              HEAP32[($4_1 + 172 | 0) >> 2] = HEAP32[($4_1 + 368 | 0) >> 2] | 0;
              HEAP32[($4_1 + 168 | 0) >> 2] = ($998(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 1376 | 0, 0 | 0) | 0) << 1 | 0;
              $1566($5_1 | 0, HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 168 | 0) >> 2] | 0 | 0);
              $2426 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
              FUNCTION_TABLE[HEAP32[((HEAP32[$2426 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($2426, HEAP32[($4_1 + 368 | 0) >> 2] | 0);
              break label$121;
             case 4:
              $2430 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
              $2431 = HEAP32[($4_1 + 632 | 0) >> 2] | 0;
              $111($4_1 + 152 | 0 | 0, HEAP32[($4_1 + 360 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
              HEAP32[($4_1 + 368 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$2430 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($2430, $2431, $4_1 + 152 | 0) | 0;
              $112($4_1 + 152 | 0 | 0) | 0;
              HEAP32[($4_1 + 148 | 0) >> 2] = HEAP32[($4_1 + 368 | 0) >> 2] | 0;
              HEAP32[($4_1 + 144 | 0) >> 2] = 0;
              $2456 = $998(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 5259 | 0, 0 | 0) | 0 ? 1 : 0;
              HEAP8[((HEAP32[($4_1 + 148 | 0) >> 2] | 0) + 80 | 0) >> 0] = $2456 & 1 | 0;
              $2466 = $998(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 5274 | 0, 1 | 0) | 0 ? 1 : 0;
              HEAP8[((HEAP32[($4_1 + 148 | 0) >> 2] | 0) + 81 | 0) >> 0] = $2466 & 1 | 0;
              HEAP32[($4_1 + 144 | 0) >> 2] = $998(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 1376 | 0, 0 | 0) | 0;
              $1566($5_1 | 0, HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 148 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 144 | 0) >> 2] | 0) << 1 | 0 | 0);
              $729((HEAP32[($4_1 + 148 | 0) >> 2] | 0) + 64 | 0 | 0, (HEAP32[($4_1 + 144 | 0) >> 2] | 0 | 0) / (3 | 0) | 0 | 0);
              $2487 = (HEAP32[($4_1 + 148 | 0) >> 2] | 0) + 64 | 0;
              $2490 = (HEAP32[($4_1 + 144 | 0) >> 2] | 0 | 0) / (3 | 0) | 0;
              HEAPF32[($4_1 + 140 | 0) >> 2] = Math_fround(0 | 0);
              $573($2487 | 0, $2490 | 0, $4_1 + 140 | 0 | 0);
              HEAP32[($4_1 + 636 | 0) >> 2] = $994(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 1751 | 0) | 0;
              HEAP32[($4_1 + 636 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 636 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
              HEAP32[($4_1 + 1324 | 0) >> 2] = 0;
              label$141 : {
               label$142 : while (1) {
                if (!((HEAP32[($4_1 + 636 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                 break label$141
                }
                $3018 = Math_fround(Math_fround(HEAPF32[((HEAP32[($4_1 + 636 | 0) >> 2] | 0) + 24 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
                HEAPF32[($15((HEAP32[($4_1 + 148 | 0) >> 2] | 0) + 64 | 0 | 0, HEAP32[($4_1 + 1324 | 0) >> 2] | 0 | 0) | 0) >> 2] = $3018;
                HEAP32[($4_1 + 636 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 636 | 0) >> 2] | 0) >> 2] | 0;
                HEAP32[($4_1 + 1324 | 0) >> 2] = (HEAP32[($4_1 + 1324 | 0) >> 2] | 0) + 1 | 0;
                continue label$142;
               };
              }
              $2519 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
              FUNCTION_TABLE[HEAP32[((HEAP32[$2519 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($2519, HEAP32[($4_1 + 368 | 0) >> 2] | 0);
              break label$121;
             case 5:
              $2523 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
              $2524 = HEAP32[($4_1 + 632 | 0) >> 2] | 0;
              $111($4_1 + 128 | 0 | 0, HEAP32[($4_1 + 360 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
              HEAP32[($4_1 + 368 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$2523 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($2523, $2524, $4_1 + 128 | 0) | 0;
              $112($4_1 + 128 | 0 | 0) | 0;
              HEAP32[($4_1 + 124 | 0) >> 2] = HEAP32[($4_1 + 368 | 0) >> 2] | 0;
              $3020 = Math_fround($997(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 1322 | 0, Math_fround(Math_fround(0 | 0))));
              HEAPF32[((HEAP32[($4_1 + 124 | 0) >> 2] | 0) + 20 | 0) >> 2] = Math_fround($3020 * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
              $3024 = Math_fround($997(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 1218 | 0, Math_fround(Math_fround(0 | 0))));
              HEAPF32[((HEAP32[($4_1 + 124 | 0) >> 2] | 0) + 24 | 0) >> 2] = Math_fround($3024 * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]));
              $3028 = Math_fround($997(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 3955 | 0, Math_fround(Math_fround(0 | 0))));
              HEAPF32[((HEAP32[($4_1 + 124 | 0) >> 2] | 0) + 28 | 0) >> 2] = $3028;
              $2554 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
              FUNCTION_TABLE[HEAP32[((HEAP32[$2554 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($2554, HEAP32[($4_1 + 368 | 0) >> 2] | 0);
              break label$121;
             case 6:
              break label$122;
             default:
              break label$121;
             };
            }
            $2558 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
            $2559 = HEAP32[($4_1 + 632 | 0) >> 2] | 0;
            $111($4_1 + 112 | 0 | 0, HEAP32[($4_1 + 360 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
            HEAP32[($4_1 + 368 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$2558 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($2558, $2559, $4_1 + 112 | 0) | 0;
            $112($4_1 + 112 | 0 | 0) | 0;
            HEAP32[($4_1 + 108 | 0) >> 2] = HEAP32[($4_1 + 368 | 0) >> 2] | 0;
            HEAP32[($4_1 + 104 | 0) >> 2] = 0;
            HEAP32[($4_1 + 100 | 0) >> 2] = $996(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 5249 | 0, 0 | 0) | 0;
            label$143 : {
             if (!((HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
              break label$143
             }
             $2589 = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
             $111($4_1 + 88 | 0 | 0, HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
             $2600 = $1505($2589 | 0, $4_1 + 88 | 0 | 0) | 0;
             HEAP32[((HEAP32[($4_1 + 108 | 0) >> 2] | 0) + 64 | 0) >> 2] = $2600;
             $112($4_1 + 88 | 0 | 0) | 0;
            }
            HEAP32[($4_1 + 104 | 0) >> 2] = ($998(HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, 1376 | 0, 0 | 0) | 0) << 1 | 0;
            $1566($5_1 | 0, HEAP32[($4_1 + 372 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 104 | 0) >> 2] | 0 | 0);
            $2614 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
            FUNCTION_TABLE[HEAP32[((HEAP32[$2614 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($2614, HEAP32[($4_1 + 368 | 0) >> 2] | 0);
           }
           $2618 = HEAP32[($4_1 + 632 | 0) >> 2] | 0;
           $2620 = $1642(HEAP32[($4_1 + 388 | 0) >> 2] | 0 | 0) | 0;
           $111($4_1 + 72 | 0 | 0, HEAP32[($4_1 + 364 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
           $1609($2618 | 0, $2620 | 0, $4_1 + 72 | 0 | 0, HEAP32[($4_1 + 368 | 0) >> 2] | 0 | 0);
           $112($4_1 + 72 | 0 | 0) | 0;
          }
          HEAP32[($4_1 + 372 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 372 | 0) >> 2] | 0) >> 2] | 0;
          continue label$104;
         };
        }
        HEAP32[($4_1 + 640 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 640 | 0) >> 2] | 0) >> 2] | 0;
        continue label$102;
       };
      }
      HEAP32[($4_1 + 652 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 652 | 0) >> 2] | 0) >> 2] | 0;
      HEAP32[($4_1 + 1328 | 0) >> 2] = (HEAP32[($4_1 + 1328 | 0) >> 2] | 0) + 1 | 0;
      continue label$77;
     };
    }
   }
   HEAP32[($4_1 + 68 | 0) >> 2] = $1327($5_1 + 8 | 0 | 0) | 0;
   HEAP32[($4_1 + 1328 | 0) >> 2] = 0;
   label$144 : {
    label$145 : while (1) {
     if (!((HEAP32[($4_1 + 1328 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$144
     }
     HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[($1328($5_1 + 8 | 0 | 0, HEAP32[($4_1 + 1328 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     label$146 : {
      label$147 : {
       if ($131((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 8 | 0 | 0) | 0) {
        break label$147
       }
       $2666 = $1523(HEAP32[($4_1 + 1320 | 0) >> 2] | 0 | 0) | 0;
       break label$146;
      }
      $2666 = $1509(HEAP32[($4_1 + 1320 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
     }
     HEAP32[($4_1 + 60 | 0) >> 2] = $2666;
     label$148 : {
      label$149 : {
       if (!((HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
        break label$149
       }
       break label$148;
      }
      HEAP32[($4_1 + 56 | 0) >> 2] = $1610(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 24 | 0 | 0) | 0;
      label$150 : {
       if (!((HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
        break label$150
       }
       break label$148;
      }
      label$151 : {
       label$152 : {
        if (!((HEAPU8[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 36 | 0) >> 0] | 0) & 1 | 0)) {
         break label$152
        }
        $2699 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
        break label$151;
       }
       $2699 = HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      }
      HEAP32[((HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] = $2699;
      $1055(HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0);
      $1051(HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
      $2710 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$2710 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($2710, HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0);
     }
     HEAP32[($4_1 + 1328 | 0) >> 2] = (HEAP32[($4_1 + 1328 | 0) >> 2] | 0) + 1 | 0;
     continue label$145;
    };
   }
   $1324($5_1 + 8 | 0 | 0);
   $1325($5_1 + 8 | 0 | 0);
   HEAP32[($4_1 + 1276 | 0) >> 2] = $994(HEAP32[($4_1 + 1316 | 0) >> 2] | 0 | 0, 1685 | 0) | 0;
   label$153 : {
    if (!((HEAP32[($4_1 + 1276 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$153
    }
    $1567((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 68 | 0 | 0, HEAP32[((HEAP32[($4_1 + 1276 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
    $2739 = (HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 68 | 0;
    $2741 = HEAP32[((HEAP32[($4_1 + 1276 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    HEAP32[($4_1 + 48 | 0) >> 2] = 0;
    $1355($2739 | 0, $2741 | 0, $4_1 + 48 | 0 | 0);
    HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 1276 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 1328 | 0) >> 2] = 0;
    label$154 : {
     label$155 : while (1) {
      if (!((HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$154
      }
      $2759 = $1655(56 | 0, 2841 | 0, 717 | 0) | 0;
      $111($4_1 + 32 | 0 | 0, HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
      $910($2759 | 0, $4_1 + 32 | 0 | 0) | 0;
      $112($4_1 + 32 | 0 | 0) | 0;
      HEAP32[($4_1 + 44 | 0) >> 2] = $2759;
      $2777 = $998(HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0, 1438 | 0, 0 | 0) | 0;
      HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 2] = $2777;
      $3030 = Math_fround($997(HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0, 1660 | 0, Math_fround(Math_fround(0 | 0))));
      HEAPF32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 20 | 0) >> 2] = $3030;
      HEAP32[($4_1 + 28 | 0) >> 2] = $996(HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0, 4554 | 0, 0 | 0) | 0;
      $1348((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($4_1 + 24 | 0) >> 2] = $996(HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0, 3854 | 0, 0 | 0) | 0;
      $1348((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 36 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
      label$156 : {
       if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$156
       }
       $3032 = Math_fround($997(HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0, 5063 | 0, Math_fround(Math_fround(1.0))));
       HEAPF32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 48 | 0) >> 2] = $3032;
       $3034 = Math_fround($997(HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0, 5239 | 0, Math_fround(Math_fround(0 | 0))));
       HEAPF32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 52 | 0) >> 2] = $3034;
      }
      $2813 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
      HEAP32[($1357((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 68 | 0 | 0, HEAP32[($4_1 + 1328 | 0) >> 2] | 0 | 0) | 0) >> 2] = $2813;
      HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 52 | 0) >> 2] | 0) >> 2] | 0;
      HEAP32[($4_1 + 1328 | 0) >> 2] = (HEAP32[($4_1 + 1328 | 0) >> 2] | 0) + 1 | 0;
      continue label$155;
     };
    }
   }
   HEAP32[($4_1 + 1280 | 0) >> 2] = $994(HEAP32[($4_1 + 1316 | 0) >> 2] | 0 | 0, 1734 | 0) | 0;
   label$157 : {
    if (!((HEAP32[($4_1 + 1280 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$157
    }
    $1568((HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 84 | 0 | 0, HEAP32[((HEAP32[($4_1 + 1280 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
    $2841 = (HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 84 | 0;
    $2843 = HEAP32[((HEAP32[($4_1 + 1280 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    HEAP32[($4_1 + 16 | 0) >> 2] = 0;
    $1358($2841 | 0, $2843 | 0, $4_1 + 16 | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 1280 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    label$158 : {
     label$159 : while (1) {
      if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$158
      }
      HEAP32[($4_1 + 8 | 0) >> 2] = $1569($5_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 1320 | 0) >> 2] | 0 | 0) | 0;
      label$160 : {
       label$161 : {
        if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
         break label$161
        }
        break label$160;
       }
       $2868 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       $2871 = (HEAP32[($4_1 + 1320 | 0) >> 2] | 0) + 84 | 0;
       $2872 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $2872 + 1 | 0;
       HEAP32[($1360($2871 | 0, $2872 | 0) | 0) >> 2] = $2868;
      }
      HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
      continue label$159;
     };
    }
   }
   $2878 = HEAP32[($4_1 + 1316 | 0) >> 2] | 0;
   label$162 : {
    if (($2878 | 0) == (0 | 0) & 1 | 0) {
     break label$162
    }
    $1008($2878 | 0) | 0;
    $1978($2878 | 0);
   }
   HEAP32[($4_1 + 1340 | 0) >> 2] = HEAP32[($4_1 + 1320 | 0) >> 2] | 0;
  }
  $2886 = HEAP32[($4_1 + 1340 | 0) >> 2] | 0;
  global$0 = $4_1 + 1344 | 0;
  return $2886 | 0;
 }
 
 function $1557($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $34_1 = 0, $29_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $131(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + (HEAP32[($4_1 + 20 | 0) >> 2] | 0) | 0;
  HEAP8[($4_1 + 15 | 0) >> 0] = (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1575(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 1 | 0 | 0, 4464 | 0, 166 | 0) | 0;
  $29_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + (HEAP32[($4_1 + 16 | 0) >> 2] | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAPU8[($4_1 + 15 | 0) >> 0] | 0) & 1 | 0)) {
     break label$2
    }
    $34_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
    break label$1;
   }
   $34_1 = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  }
  $1798($29_1 | 0, $34_1 | 0, (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $1558($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $1365(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1559($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $35_1 = 0, $46_1 = Math_fround(0);
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 >= (($1821(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAPF32[($4_1 + 28 | 0) >> 2] = Math_fround(-1.0);
    break label$1;
   }
   HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 1 | 0) | 0;
   HEAP8[($4_1 + 17 | 0) >> 0] = HEAPU8[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 0] | 0;
   HEAP8[($4_1 + 18 | 0) >> 0] = HEAPU8[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0;
   HEAP8[($4_1 + 19 | 0) >> 0] = 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = $1933($4_1 + 17 | 0 | 0, $4_1 + 12 | 0 | 0, 16 | 0) | 0;
   $35_1 = 24;
   label$3 : {
    if (!(((HEAPU8[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $35_1 | 0) >> $35_1 | 0)) {
     break label$3
    }
    HEAPF32[($4_1 + 28 | 0) >> 2] = Math_fround(-1.0);
    break label$1;
   }
   HEAPF32[($4_1 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) / Math_fround(255.0));
  }
  $46_1 = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
  global$0 = $4_1 + 32 | 0;
  return Math_fround($46_1);
 }
 
 function $1560($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $1368(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1561($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $1363(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1562($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $1370(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1563($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $1372(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1564($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $1377(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1565($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $75_1 = Math_fround(0), $31_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 >= 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5689 | 0, 4142 | 0, 76 | 0, 4598 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$2 : {
   if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   $75_1 = Math_fround(Math_fround((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
   label$3 : {
    label$4 : {
     if (!(Math_fround(Math_abs($75_1)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $31_1 = ~~$75_1;
     break label$3;
    }
    $31_1 = -2147483648;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $31_1;
   label$5 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = 8;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $1377(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 82 | 0) | 0;
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$6
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$7
     }
     $1378($6_1 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $1566($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $73_1 = 0, $113_1 = 0, $240_1 = Math_fround(0), $123_1 = 0, $243_1 = Math_fround(0), $160_1 = 0, $22_1 = 0, $234_1 = Math_fround(0), $237_1 = Math_fround(0), $151_1 = 0;
  $6_1 = global$0 - 128 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 120 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 116 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 112 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
  $502($6_1 + 72 | 0 | 0) | 0;
  $1773(HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0);
  HEAP32[($6_1 + 108 | 0) >> 2] = $994(HEAP32[($6_1 + 120 | 0) >> 2] | 0 | 0, 1794 | 0) | 0;
  HEAP32[($6_1 + 92 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 108 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
  $729($6_1 + 72 | 0 | 0, HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0);
  $22_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
  HEAPF32[($6_1 + 68 | 0) >> 2] = Math_fround(0 | 0);
  $573($6_1 + 72 | 0 | 0, $22_1 | 0, $6_1 + 68 | 0 | 0);
  HEAP32[($6_1 + 108 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 108 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 104 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 108 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$1
    }
    $234_1 = Math_fround(HEAPF32[((HEAP32[($6_1 + 108 | 0) >> 2] | 0) + 24 | 0) >> 2]);
    HEAPF32[($15($6_1 + 72 | 0 | 0, HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0) | 0) >> 2] = $234_1;
    HEAP32[($6_1 + 108 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 108 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($6_1 + 104 | 0) >> 2] = (HEAP32[($6_1 + 104 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$3 : {
   label$4 : {
    if (!((HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    label$5 : {
     if (!(Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]) != Math_fround(1.0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($6_1 + 104 | 0) >> 2] = 0;
     label$6 : {
      label$7 : while (1) {
       if (!((HEAP32[($6_1 + 104 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 92 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$6
       }
       $237_1 = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
       $73_1 = $15($6_1 + 72 | 0 | 0, HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0) | 0;
       HEAPF32[$73_1 >> 2] = Math_fround(Math_fround(HEAPF32[$73_1 >> 2]) * $237_1);
       HEAP32[($6_1 + 104 | 0) >> 2] = (HEAP32[($6_1 + 104 | 0) >> 2] | 0) + 1 | 0;
       continue label$7;
      };
     }
    }
    $1057($1771(HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0) | 0 | 0, $6_1 + 72 | 0 | 0);
    HEAP32[($6_1 + 64 | 0) >> 2] = 1;
    break label$3;
   }
   $1570($6_1 + 24 | 0 | 0) | 0;
   $1070(($6_1 + 24 | 0) + 4 | 0 | 0, Math_imul(HEAP32[($6_1 + 112 | 0) >> 2] | 0, 3) | 0);
   $729(($6_1 + 24 | 0) + 20 | 0 | 0, Math_imul(Math_imul(HEAP32[($6_1 + 112 | 0) >> 2] | 0, 3), 3) | 0);
   HEAP32[($6_1 + 104 | 0) >> 2] = 0;
   HEAP32[($6_1 + 100 | 0) >> 2] = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
   label$8 : {
    label$9 : while (1) {
     if (!((HEAP32[($6_1 + 104 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 100 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$8
     }
     $113_1 = HEAP32[($6_1 + 104 | 0) >> 2] | 0;
     HEAP32[($6_1 + 104 | 0) >> 2] = $113_1 + 1 | 0;
     $240_1 = Math_fround(HEAPF32[($15($6_1 + 72 | 0 | 0, $113_1 | 0) | 0) >> 2]);
     label$10 : {
      label$11 : {
       if (!(Math_fround(Math_abs($240_1)) < Math_fround(2147483648.0))) {
        break label$11
       }
       $123_1 = ~~$240_1;
       break label$10;
      }
      $123_1 = -2147483648;
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $123_1;
     HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     $1072(($6_1 + 24 | 0) + 4 | 0 | 0, $6_1 + 16 | 0 | 0);
     HEAP32[($6_1 + 96 | 0) >> 2] = (HEAP32[($6_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0;
     label$12 : {
      label$13 : while (1) {
       if (!((HEAP32[($6_1 + 104 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 96 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$12
       }
       $151_1 = ($6_1 + 24 | 0) + 4 | 0;
       $243_1 = Math_fround(HEAPF32[($15($6_1 + 72 | 0 | 0, HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0) | 0) >> 2]);
       label$14 : {
        label$15 : {
         if (!(Math_fround(Math_abs($243_1)) < Math_fround(2147483648.0))) {
          break label$15
         }
         $160_1 = ~~$243_1;
         break label$14;
        }
        $160_1 = -2147483648;
       }
       HEAP32[($6_1 + 12 | 0) >> 2] = $160_1;
       $1072($151_1 | 0, $6_1 + 12 | 0 | 0);
       HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($15($6_1 + 72 | 0 | 0, (HEAP32[($6_1 + 104 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]));
       $862(($6_1 + 24 | 0) + 20 | 0 | 0, $6_1 + 8 | 0 | 0);
       HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($15($6_1 + 72 | 0 | 0, (HEAP32[($6_1 + 104 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]));
       $862(($6_1 + 24 | 0) + 20 | 0 | 0, $6_1 + 4 | 0 | 0);
       $862(($6_1 + 24 | 0) + 20 | 0 | 0, $15($6_1 + 72 | 0 | 0, (HEAP32[($6_1 + 104 | 0) >> 2] | 0) + 3 | 0 | 0) | 0 | 0);
       HEAP32[($6_1 + 104 | 0) >> 2] = (HEAP32[($6_1 + 104 | 0) >> 2] | 0) + 4 | 0;
       continue label$13;
      };
     }
     continue label$9;
    };
   }
   $1057($1771(HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0) | 0 | 0, ($6_1 + 24 | 0) + 20 | 0 | 0);
   $1056($1770(HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0) | 0 | 0, ($6_1 + 24 | 0) + 4 | 0 | 0);
   $1571($6_1 + 24 | 0 | 0) | 0;
   HEAP32[($6_1 + 64 | 0) >> 2] = 0;
  }
  $504($6_1 + 72 | 0 | 0) | 0;
  global$0 = $6_1 + 128 | 0;
  return;
 }
 
 function $1567($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $1379(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1568($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $1381(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1569($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $65_1 = 0, $90_1 = 0, $115_1 = 0, $129_1 = 0, $143_1 = 0, $168_1 = 0, $224_1 = 0, $306_1 = 0, $334_1 = 0, $385_1 = 0, $453_1 = 0, $570_1 = 0, $652_1 = 0, $2186 = Math_fround(0), $743_1 = 0, $750_1 = 0, $757_1 = 0, $856_1 = 0, $885_1 = 0, $1001_1 = 0, $1030_1 = 0, $1124_1 = 0, $1241_1 = 0, $1257_1 = 0, $1317_1 = 0, $1383_1 = 0, $1491_1 = 0, $1498_1 = 0, $1619_1 = 0, $1676_1 = 0, $1847_1 = 0, $1850_1 = 0, $1883_1 = 0, $1886_1 = 0, $1920_1 = 0, $1983_1 = 0, $2059 = 0, $2126 = 0, $234_1 = 0, $246_1 = 0, $580_1 = 0, $592_1 = 0, $866_1 = 0, $878_1 = 0, $1011_1 = 0, $1023_1 = 0, $1135_1 = 0, $1147_1 = 0, $1393_1 = 0, $1405_1 = 0, $1418_1 = 0, $1430_1 = 0, $1443_1 = 0, $1444_1 = 0, $1456_1 = 0, $1529_1 = 0, $1547_1 = 0, $2253 = Math_fround(0), $2256 = Math_fround(0), $2257 = Math_fround(0), $1721_1 = 0, $1741_1 = 0, $1780_1 = 0, $1794_1 = 0, $1857_1 = 0, $1925_1 = 0, $1996_1 = 0, $2010_1 = 0, $2068 = 0, $2273 = Math_fround(0), $2080 = 0, $2275 = Math_fround(0), $2277 = Math_fround(0), $2148 = 0;
  $5_1 = global$0 - 816 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 808 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 804 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 800 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 808 | 0) >> 2] | 0;
  $590($5_1 + 784 | 0 | 0) | 0;
  HEAPF32[($5_1 + 780 | 0) >> 2] = Math_fround(0 | 0);
  HEAP32[($5_1 + 768 | 0) >> 2] = 0;
  HEAP32[($5_1 + 764 | 0) >> 2] = $994(HEAP32[($5_1 + 804 | 0) >> 2] | 0 | 0, 1765 | 0) | 0;
  HEAP32[($5_1 + 760 | 0) >> 2] = $994(HEAP32[($5_1 + 804 | 0) >> 2] | 0 | 0, 1679 | 0) | 0;
  HEAP32[($5_1 + 756 | 0) >> 2] = $994(HEAP32[($5_1 + 804 | 0) >> 2] | 0 | 0, 4083 | 0) | 0;
  HEAP32[($5_1 + 752 | 0) >> 2] = $994(HEAP32[($5_1 + 804 | 0) >> 2] | 0 | 0, 4035 | 0) | 0;
  HEAP32[($5_1 + 748 | 0) >> 2] = $994(HEAP32[($5_1 + 804 | 0) >> 2] | 0 | 0, 4113 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 748 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 748 | 0) >> 2] = $994(HEAP32[($5_1 + 804 | 0) >> 2] | 0 | 0, 1759 | 0) | 0;
  }
  HEAP32[($5_1 + 744 | 0) >> 2] = $994(HEAP32[($5_1 + 804 | 0) >> 2] | 0 | 0, 4053 | 0) | 0;
  HEAP32[($5_1 + 740 | 0) >> 2] = $994(HEAP32[($5_1 + 804 | 0) >> 2] | 0 | 0, 1865 | 0) | 0;
  HEAP32[($5_1 + 736 | 0) >> 2] = $994(HEAP32[($5_1 + 804 | 0) >> 2] | 0 | 0, 1685 | 0) | 0;
  label$2 : {
   if ((HEAP32[($5_1 + 740 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$2
   }
   HEAP32[($5_1 + 740 | 0) >> 2] = $994(HEAP32[($5_1 + 804 | 0) >> 2] | 0 | 0, 1855 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    if (!((HEAP32[($5_1 + 764 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    $65_1 = HEAP32[((HEAP32[($5_1 + 764 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    break label$3;
   }
   $65_1 = 0;
  }
  HEAP32[($5_1 + 732 | 0) >> 2] = $65_1;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($5_1 + 732 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($5_1 + 732 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) | 0;
    HEAP32[($5_1 + 732 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 732 | 0) >> 2] | 0) >> 2] | 0;
    continue label$6;
   };
  }
  label$7 : {
   label$8 : {
    if (!((HEAP32[($5_1 + 760 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$8
    }
    $90_1 = HEAP32[((HEAP32[($5_1 + 760 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    break label$7;
   }
   $90_1 = 0;
  }
  HEAP32[($5_1 + 728 | 0) >> 2] = $90_1;
  label$9 : {
   label$10 : while (1) {
    if (!((HEAP32[($5_1 + 728 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$9
    }
    HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($5_1 + 728 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) | 0;
    HEAP32[($5_1 + 728 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 728 | 0) >> 2] | 0) >> 2] | 0;
    continue label$10;
   };
  }
  label$11 : {
   label$12 : {
    if (!((HEAP32[($5_1 + 756 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$12
    }
    $115_1 = HEAP32[((HEAP32[($5_1 + 756 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    break label$11;
   }
   $115_1 = 0;
  }
  HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + $115_1 | 0;
  label$13 : {
   label$14 : {
    if (!((HEAP32[($5_1 + 752 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$14
    }
    $129_1 = HEAP32[((HEAP32[($5_1 + 752 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    break label$13;
   }
   $129_1 = 0;
  }
  HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + $129_1 | 0;
  label$15 : {
   label$16 : {
    if (!((HEAP32[($5_1 + 748 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$16
    }
    $143_1 = HEAP32[((HEAP32[($5_1 + 748 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    break label$15;
   }
   $143_1 = 0;
  }
  HEAP32[($5_1 + 724 | 0) >> 2] = $143_1;
  label$17 : {
   label$18 : while (1) {
    if (!((HEAP32[($5_1 + 724 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$17
    }
    HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($5_1 + 724 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) | 0;
    HEAP32[($5_1 + 724 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 724 | 0) >> 2] | 0) >> 2] | 0;
    continue label$18;
   };
  }
  label$19 : {
   label$20 : {
    if (!((HEAP32[($5_1 + 744 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$20
    }
    $168_1 = HEAP32[((HEAP32[($5_1 + 744 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    break label$19;
   }
   $168_1 = 0;
  }
  HEAP32[($5_1 + 724 | 0) >> 2] = $168_1;
  label$21 : {
   label$22 : while (1) {
    if (!((HEAP32[($5_1 + 724 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$21
    }
    HEAP32[($5_1 + 728 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 724 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    label$23 : {
     label$24 : while (1) {
      if (!((HEAP32[($5_1 + 728 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$23
      }
      HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($5_1 + 728 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) | 0;
      HEAP32[($5_1 + 728 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 728 | 0) >> 2] | 0) >> 2] | 0;
      continue label$24;
     };
    }
    HEAP32[($5_1 + 724 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 724 | 0) >> 2] | 0) >> 2] | 0;
    continue label$22;
   };
  }
  label$25 : {
   if (!((HEAP32[($5_1 + 740 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$25
   }
   HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + 1 | 0;
  }
  label$26 : {
   if (!((HEAP32[($5_1 + 736 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$26
   }
   HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + 1 | 0;
  }
  label$27 : {
   label$28 : {
    if (!((HEAP32[($5_1 + 760 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$28
    }
    $224_1 = HEAP32[((HEAP32[($5_1 + 760 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    break label$27;
   }
   $224_1 = 0;
  }
  HEAP32[($5_1 + 728 | 0) >> 2] = $224_1;
  label$29 : {
   label$30 : {
    label$31 : while (1) {
     if (!((HEAP32[($5_1 + 728 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$30
     }
     $234_1 = HEAP32[($5_1 + 800 | 0) >> 2] | 0;
     $111($5_1 + 704 | 0 | 0, HEAP32[((HEAP32[($5_1 + 728 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
     $246_1 = $1507($234_1 | 0, $5_1 + 704 | 0 | 0) | 0;
     $112($5_1 + 704 | 0 | 0) | 0;
     HEAP32[($5_1 + 716 | 0) >> 2] = $246_1;
     label$32 : {
      if (!((HEAP32[($5_1 + 716 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
       break label$32
      }
      $477($5_1 + 784 | 0 | 0);
      $111($5_1 + 688 | 0 | 0, 6064 | 0, 0 & 1 | 0 | 0) | 0;
      $111($5_1 + 672 | 0 | 0, HEAP32[((HEAP32[($5_1 + 728 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
      $1555($6_1 | 0, 0 | 0, $5_1 + 688 | 0 | 0, $5_1 + 672 | 0 | 0);
      $112($5_1 + 672 | 0 | 0) | 0;
      $112($5_1 + 688 | 0 | 0) | 0;
      HEAP32[($5_1 + 812 | 0) >> 2] = 0;
      HEAP32[($5_1 + 668 | 0) >> 2] = 1;
      break label$29;
     }
     HEAP32[($5_1 + 720 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 728 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     label$33 : {
      label$34 : while (1) {
       if (!((HEAP32[($5_1 + 720 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$33
       }
       label$35 : {
        label$36 : {
         if ($1926(HEAP32[((HEAP32[($5_1 + 720 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 1449 | 0) | 0) {
          break label$36
         }
         $306_1 = $1655(40 | 0, 2841 | 0, 844 | 0) | 0;
         $727($306_1 | 0, HEAP32[((HEAP32[($5_1 + 720 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
         HEAP32[($5_1 + 664 | 0) >> 2] = $306_1;
         HEAP32[((HEAP32[($5_1 + 664 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($5_1 + 716 | 0) >> 2] | 0;
         HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 720 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
         HEAP32[($5_1 + 776 | 0) >> 2] = 0;
         label$37 : {
          label$38 : while (1) {
           if (!((HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break label$37
           }
           HEAP32[($5_1 + 660 | 0) >> 2] = $994(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5075 | 0) | 0;
           label$39 : {
            label$40 : {
             if (!((HEAP32[((HEAP32[($5_1 + 660 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 10112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$40
             }
             $334_1 = 6494;
             break label$39;
            }
            $334_1 = HEAP32[((HEAP32[($5_1 + 660 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
           }
           $111($5_1 + 648 | 0 | 0, $334_1 | 0, 0 & 1 | 0 | 0) | 0;
           $737(HEAP32[($5_1 + 664 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5070 | 0, Math_fround(Math_fround(0 | 0))))), $5_1 + 648 | 0 | 0);
           $112($5_1 + 648 | 0 | 0) | 0;
           HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 772 | 0) >> 2] | 0) >> 2] | 0;
           HEAP32[($5_1 + 776 | 0) >> 2] = (HEAP32[($5_1 + 776 | 0) >> 2] | 0) + 1 | 0;
           continue label$38;
          };
         }
         HEAP32[($5_1 + 644 | 0) >> 2] = HEAP32[($5_1 + 664 | 0) >> 2] | 0;
         $1383($5_1 + 784 | 0 | 0, $5_1 + 644 | 0 | 0);
         HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + 1 | 0;
         HEAPF32[($5_1 + 780 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($5_1 + 780 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($5_1 + 664 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[((HEAP32[($5_1 + 720 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]))));
         break label$35;
        }
        label$41 : {
         label$42 : {
          if ($1926(HEAP32[((HEAP32[($5_1 + 720 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 1840 | 0) | 0) {
           break label$42
          }
          $385_1 = $1655(40 | 0, 2841 | 0, 858 | 0) | 0;
          $810($385_1 | 0, HEAP32[((HEAP32[($5_1 + 720 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($5_1 + 640 | 0) >> 2] = $385_1;
          HEAP32[((HEAP32[($5_1 + 640 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($5_1 + 716 | 0) >> 2] | 0;
          HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 720 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
          HEAP32[($5_1 + 776 | 0) >> 2] = 0;
          label$43 : {
           label$44 : while (1) {
            if (!((HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break label$43
            }
            HEAP32[($5_1 + 636 | 0) >> 2] = $996(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1840 | 0, 0 | 0) | 0;
            $819(HEAP32[($5_1 + 640 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5070 | 0, Math_fround(Math_fround(0 | 0))))), Math_fround(Math_fround($1559(HEAP32[($5_1 + 636 | 0) >> 2] | 0 | 0, 0 | 0))), Math_fround(Math_fround($1559(HEAP32[($5_1 + 636 | 0) >> 2] | 0 | 0, 1 | 0))), Math_fround(Math_fround($1559(HEAP32[($5_1 + 636 | 0) >> 2] | 0 | 0, 2 | 0))), Math_fround(Math_fround($1559(HEAP32[($5_1 + 636 | 0) >> 2] | 0 | 0, 3 | 0))));
            $1572(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 640 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0);
            HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 772 | 0) >> 2] | 0) >> 2] | 0;
            HEAP32[($5_1 + 776 | 0) >> 2] = (HEAP32[($5_1 + 776 | 0) >> 2] | 0) + 1 | 0;
            continue label$44;
           };
          }
          HEAP32[($5_1 + 632 | 0) >> 2] = HEAP32[($5_1 + 640 | 0) >> 2] | 0;
          $1383($5_1 + 784 | 0 | 0, $5_1 + 632 | 0 | 0);
          HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + 1 | 0;
          HEAPF32[($5_1 + 780 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($5_1 + 780 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($5_1 + 640 | 0) >> 2] | 0) + 24 | 0 | 0, Math_imul((HEAP32[((HEAP32[($5_1 + 720 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - 1 | 0, HEAP32[(0 + 9060 | 0) >> 2] | 0) | 0) | 0) >> 2]))));
          break label$41;
         }
         label$45 : {
          label$46 : {
           if ($1926(HEAP32[((HEAP32[($5_1 + 720 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 1846 | 0) | 0) {
            break label$46
           }
           $453_1 = $1655(40 | 0, 2841 | 0, 873 | 0) | 0;
           $1747($453_1 | 0, HEAP32[((HEAP32[($5_1 + 720 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
           HEAP32[($5_1 + 628 | 0) >> 2] = $453_1;
           HEAP32[((HEAP32[($5_1 + 628 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($5_1 + 716 | 0) >> 2] | 0;
           HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 720 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
           HEAP32[($5_1 + 776 | 0) >> 2] = 0;
           label$47 : {
            label$48 : while (1) {
             if (!((HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
              break label$47
             }
             HEAP32[($5_1 + 624 | 0) >> 2] = $996(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1633 | 0, 0 | 0) | 0;
             HEAP32[($5_1 + 620 | 0) >> 2] = $996(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 4078 | 0, 0 | 0) | 0;
             $1750(HEAP32[($5_1 + 628 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5070 | 0, Math_fround(Math_fround(0 | 0))))), Math_fround(Math_fround($1559(HEAP32[($5_1 + 624 | 0) >> 2] | 0 | 0, 0 | 0))), Math_fround(Math_fround($1559(HEAP32[($5_1 + 624 | 0) >> 2] | 0 | 0, 1 | 0))), Math_fround(Math_fround($1559(HEAP32[($5_1 + 624 | 0) >> 2] | 0 | 0, 2 | 0))), Math_fround(Math_fround($1559(HEAP32[($5_1 + 624 | 0) >> 2] | 0 | 0, 3 | 0))), Math_fround(Math_fround($1559(HEAP32[($5_1 + 620 | 0) >> 2] | 0 | 0, 0 | 0))), Math_fround(Math_fround($1559(HEAP32[($5_1 + 620 | 0) >> 2] | 0 | 0, 1 | 0))), Math_fround(Math_fround($1559(HEAP32[($5_1 + 620 | 0) >> 2] | 0 | 0, 2 | 0))));
             $1572(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 628 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0);
             HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 772 | 0) >> 2] | 0) >> 2] | 0;
             HEAP32[($5_1 + 776 | 0) >> 2] = (HEAP32[($5_1 + 776 | 0) >> 2] | 0) + 1 | 0;
             continue label$48;
            };
           }
           HEAP32[($5_1 + 616 | 0) >> 2] = HEAP32[($5_1 + 628 | 0) >> 2] | 0;
           $1383($5_1 + 784 | 0 | 0, $5_1 + 616 | 0 | 0);
           HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + 1 | 0;
           HEAPF32[($5_1 + 780 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($5_1 + 780 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($5_1 + 628 | 0) >> 2] | 0) + 20 | 0 | 0, Math_imul((HEAP32[((HEAP32[($5_1 + 720 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - 1 | 0, HEAP32[(0 + 13664 | 0) >> 2] | 0) | 0) | 0) >> 2]))));
           break label$45;
          }
          $477($5_1 + 784 | 0 | 0);
          $111($5_1 + 600 | 0 | 0, 5901 | 0, 0 & 1 | 0 | 0) | 0;
          $111($5_1 + 584 | 0 | 0, HEAP32[((HEAP32[($5_1 + 720 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
          $1555($6_1 | 0, 0 | 0, $5_1 + 600 | 0 | 0, $5_1 + 584 | 0 | 0);
          $112($5_1 + 584 | 0 | 0) | 0;
          $112($5_1 + 600 | 0 | 0) | 0;
          HEAP32[($5_1 + 812 | 0) >> 2] = 0;
          HEAP32[($5_1 + 668 | 0) >> 2] = 1;
          break label$29;
         }
        }
       }
       HEAP32[($5_1 + 720 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 720 | 0) >> 2] | 0) >> 2] | 0;
       continue label$34;
      };
     }
     HEAP32[($5_1 + 728 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 728 | 0) >> 2] | 0) >> 2] | 0;
     continue label$31;
    };
   }
   label$49 : {
    label$50 : {
     if (!((HEAP32[($5_1 + 764 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$50
     }
     $570_1 = HEAP32[((HEAP32[($5_1 + 764 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     break label$49;
    }
    $570_1 = 0;
   }
   HEAP32[($5_1 + 732 | 0) >> 2] = $570_1;
   label$51 : {
    label$52 : while (1) {
     if (!((HEAP32[($5_1 + 732 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$51
     }
     $580_1 = HEAP32[($5_1 + 800 | 0) >> 2] | 0;
     $111($5_1 + 560 | 0 | 0, HEAP32[((HEAP32[($5_1 + 732 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
     $592_1 = $1503($580_1 | 0, $5_1 + 560 | 0 | 0) | 0;
     $112($5_1 + 560 | 0 | 0) | 0;
     HEAP32[($5_1 + 576 | 0) >> 2] = $592_1;
     label$53 : {
      if (!((HEAP32[($5_1 + 576 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
       break label$53
      }
      $477($5_1 + 784 | 0 | 0);
      $111($5_1 + 544 | 0 | 0, 6454 | 0, 0 & 1 | 0 | 0) | 0;
      $111($5_1 + 528 | 0 | 0, HEAP32[((HEAP32[($5_1 + 732 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
      $1555($6_1 | 0, 0 | 0, $5_1 + 544 | 0 | 0, $5_1 + 528 | 0 | 0);
      $112($5_1 + 528 | 0 | 0) | 0;
      $112($5_1 + 544 | 0 | 0) | 0;
      HEAP32[($5_1 + 812 | 0) >> 2] = 0;
      HEAP32[($5_1 + 668 | 0) >> 2] = 1;
      break label$29;
     }
     HEAP32[($5_1 + 580 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 732 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     label$54 : {
      label$55 : while (1) {
       if (!((HEAP32[($5_1 + 580 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$54
       }
       label$56 : {
        label$57 : {
         if ($1926(HEAP32[((HEAP32[($5_1 + 580 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 4662 | 0) | 0) {
          break label$57
         }
         $652_1 = $1655(40 | 0, 2841 | 0, 909 | 0) | 0;
         $1182($652_1 | 0, HEAP32[((HEAP32[($5_1 + 580 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
         HEAP32[($5_1 + 524 | 0) >> 2] = $652_1;
         HEAP32[((HEAP32[($5_1 + 524 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($5_1 + 576 | 0) >> 2] | 0;
         HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 580 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
         HEAP32[($5_1 + 776 | 0) >> 2] = 0;
         label$58 : {
          label$59 : while (1) {
           if (!((HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break label$58
           }
           $1185(HEAP32[($5_1 + 524 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5070 | 0, Math_fround(Math_fround(0 | 0))))), Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5128 | 0, Math_fround(Math_fround(0 | 0))))));
           $1572(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 524 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0);
           HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 772 | 0) >> 2] | 0) >> 2] | 0;
           HEAP32[($5_1 + 776 | 0) >> 2] = (HEAP32[($5_1 + 776 | 0) >> 2] | 0) + 1 | 0;
           continue label$59;
          };
         }
         HEAP32[($5_1 + 520 | 0) >> 2] = HEAP32[($5_1 + 524 | 0) >> 2] | 0;
         $1383($5_1 + 784 | 0 | 0, $5_1 + 520 | 0 | 0);
         HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + 1 | 0;
         HEAPF32[($5_1 + 780 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($5_1 + 780 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($5_1 + 524 | 0) >> 2] | 0) + 24 | 0 | 0, ((HEAP32[((HEAP32[($5_1 + 580 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - 1 | 0) << 1 | 0 | 0) | 0) >> 2]))));
         break label$56;
        }
        HEAP32[($5_1 + 516 | 0) >> 2] = ($1926(HEAP32[((HEAP32[($5_1 + 580 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 5144 | 0) | 0 | 0) == (0 | 0) & 1 | 0;
        HEAP32[($5_1 + 512 | 0) >> 2] = ($1926(HEAP32[((HEAP32[($5_1 + 580 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 4669 | 0) | 0 | 0) == (0 | 0) & 1 | 0;
        HEAP32[($5_1 + 508 | 0) >> 2] = ($1926(HEAP32[((HEAP32[($5_1 + 580 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 1936 | 0) | 0 | 0) == (0 | 0) & 1 | 0;
        label$60 : {
         label$61 : {
          label$62 : {
           if (HEAP32[($5_1 + 516 | 0) >> 2] | 0) {
            break label$62
           }
           if (HEAP32[($5_1 + 512 | 0) >> 2] | 0) {
            break label$62
           }
           if (!(HEAP32[($5_1 + 508 | 0) >> 2] | 0)) {
            break label$61
           }
          }
          label$63 : {
           label$64 : {
            if (!(HEAP32[($5_1 + 512 | 0) >> 2] | 0)) {
             break label$64
            }
            $2186 = Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]);
            break label$63;
           }
           $2186 = Math_fround(1.0);
          }
          HEAPF32[($5_1 + 504 | 0) >> 2] = $2186;
          HEAPF32[($5_1 + 500 | 0) >> 2] = Math_fround(0 | 0);
          HEAP32[($5_1 + 496 | 0) >> 2] = 0;
          label$65 : {
           label$66 : {
            if (!(HEAP32[($5_1 + 516 | 0) >> 2] | 0)) {
             break label$66
            }
            $743_1 = $1655(40 | 0, 2841 | 0, 929 | 0) | 0;
            $1192($743_1 | 0, HEAP32[((HEAP32[($5_1 + 580 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
            HEAP32[($5_1 + 496 | 0) >> 2] = $743_1;
            HEAPF32[($5_1 + 500 | 0) >> 2] = Math_fround(1.0);
            break label$65;
           }
           label$67 : {
            label$68 : {
             if (!(HEAP32[($5_1 + 512 | 0) >> 2] | 0)) {
              break label$68
             }
             $750_1 = $1655(40 | 0, 2841 | 0, 932 | 0) | 0;
             $1710($750_1 | 0, HEAP32[((HEAP32[($5_1 + 580 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
             HEAP32[($5_1 + 496 | 0) >> 2] = $750_1;
             break label$67;
            }
            label$69 : {
             if (!(HEAP32[($5_1 + 508 | 0) >> 2] | 0)) {
              break label$69
             }
             $757_1 = $1655(40 | 0, 2841 | 0, 934 | 0) | 0;
             $1201($757_1 | 0, HEAP32[((HEAP32[($5_1 + 580 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
             HEAP32[($5_1 + 496 | 0) >> 2] = $757_1;
            }
           }
          }
          HEAP32[((HEAP32[($5_1 + 496 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($5_1 + 576 | 0) >> 2] | 0;
          HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 580 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
          HEAP32[($5_1 + 776 | 0) >> 2] = 0;
          label$70 : {
           label$71 : while (1) {
            if (!((HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break label$70
            }
            $1715(HEAP32[($5_1 + 496 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5070 | 0, Math_fround(Math_fround(0 | 0))))), Math_fround(Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1322 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 500 | 0) >> 2])))) * Math_fround(HEAPF32[($5_1 + 504 | 0) >> 2]))), Math_fround(Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1218 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 500 | 0) >> 2])))) * Math_fround(HEAPF32[($5_1 + 504 | 0) >> 2]))));
            $1572(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 496 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0);
            HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 772 | 0) >> 2] | 0) >> 2] | 0;
            HEAP32[($5_1 + 776 | 0) >> 2] = (HEAP32[($5_1 + 776 | 0) >> 2] | 0) + 1 | 0;
            continue label$71;
           };
          }
          HEAP32[($5_1 + 492 | 0) >> 2] = HEAP32[($5_1 + 496 | 0) >> 2] | 0;
          $1383($5_1 + 784 | 0 | 0, $5_1 + 492 | 0 | 0);
          HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + 1 | 0;
          HEAPF32[($5_1 + 780 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($5_1 + 780 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($5_1 + 496 | 0) >> 2] | 0) + 20 | 0 | 0, Math_imul((HEAP32[((HEAP32[($5_1 + 580 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - 1 | 0, HEAP32[(0 + 13520 | 0) >> 2] | 0) | 0) | 0) >> 2]))));
          break label$60;
         }
         $477($5_1 + 784 | 0 | 0);
         $111($5_1 + 480 | 0 | 0, 5974 | 0, 0 & 1 | 0 | 0) | 0;
         $111($5_1 + 464 | 0 | 0, HEAP32[((HEAP32[($5_1 + 580 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
         $1555($6_1 | 0, 0 | 0, $5_1 + 480 | 0 | 0, $5_1 + 464 | 0 | 0);
         $112($5_1 + 464 | 0 | 0) | 0;
         $112($5_1 + 480 | 0 | 0) | 0;
         HEAP32[($5_1 + 812 | 0) >> 2] = 0;
         HEAP32[($5_1 + 668 | 0) >> 2] = 1;
         break label$29;
        }
       }
       HEAP32[($5_1 + 580 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 580 | 0) >> 2] | 0) >> 2] | 0;
       continue label$55;
      };
     }
     HEAP32[($5_1 + 732 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 732 | 0) >> 2] | 0) >> 2] | 0;
     continue label$52;
    };
   }
   label$72 : {
    label$73 : {
     if (!((HEAP32[($5_1 + 756 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$73
     }
     $856_1 = HEAP32[((HEAP32[($5_1 + 756 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     break label$72;
    }
    $856_1 = 0;
   }
   HEAP32[($5_1 + 724 | 0) >> 2] = $856_1;
   label$74 : {
    label$75 : while (1) {
     if (!((HEAP32[($5_1 + 724 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$74
     }
     $866_1 = HEAP32[($5_1 + 800 | 0) >> 2] | 0;
     $111($5_1 + 448 | 0 | 0, HEAP32[((HEAP32[($5_1 + 724 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
     $878_1 = $1515($866_1 | 0, $5_1 + 448 | 0 | 0) | 0;
     $112($5_1 + 448 | 0 | 0) | 0;
     HEAP32[($5_1 + 460 | 0) >> 2] = $878_1;
     $885_1 = $1655(40 | 0, 2841 | 0, 960 | 0) | 0;
     $986($885_1 | 0, HEAP32[((HEAP32[($5_1 + 724 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($5_1 + 444 | 0) >> 2] = $885_1;
     HEAP32[($5_1 + 776 | 0) >> 2] = 0;
     label$76 : {
      label$77 : while (1) {
       if (!((HEAP32[($5_1 + 776 | 0) >> 2] | 0) >>> 0 < ($1215((HEAP32[($5_1 + 800 | 0) >> 2] | 0) + 100 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
        break label$76
       }
       label$78 : {
        if (!((HEAP32[($5_1 + 460 | 0) >> 2] | 0 | 0) == (HEAP32[($1217((HEAP32[($5_1 + 800 | 0) >> 2] | 0) + 100 | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$78
        }
        HEAP32[((HEAP32[($5_1 + 444 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($5_1 + 776 | 0) >> 2] | 0;
        break label$76;
       }
       HEAP32[($5_1 + 776 | 0) >> 2] = (HEAP32[($5_1 + 776 | 0) >> 2] | 0) + 1 | 0;
       continue label$77;
      };
     }
     HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 724 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     HEAP32[($5_1 + 776 | 0) >> 2] = 0;
     label$79 : {
      label$80 : while (1) {
       if (!((HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$79
       }
       $990(HEAP32[($5_1 + 444 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5070 | 0, Math_fround(Math_fround(0 | 0))))), Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1232 | 0, Math_fround(Math_fround(1.0))))), Math_fround(Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1721 | 0, Math_fround(Math_fround(0 | 0)))) * Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]))), ($998(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 4612 | 0, 1 | 0) | 0 ? 1 : -1) | 0, ($998(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1712 | 0, 0 | 0) | 0 ? 1 : 0) & 1 | 0 | 0, ($998(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 4134 | 0, 0 | 0) | 0 ? 1 : 0) & 1 | 0 | 0);
       $1572(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 444 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0);
       HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 772 | 0) >> 2] | 0) >> 2] | 0;
       HEAP32[($5_1 + 776 | 0) >> 2] = (HEAP32[($5_1 + 776 | 0) >> 2] | 0) + 1 | 0;
       continue label$80;
      };
     }
     HEAP32[($5_1 + 440 | 0) >> 2] = HEAP32[($5_1 + 444 | 0) >> 2] | 0;
     $1383($5_1 + 784 | 0 | 0, $5_1 + 440 | 0 | 0);
     HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + 1 | 0;
     HEAPF32[($5_1 + 780 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($5_1 + 780 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($5_1 + 444 | 0) >> 2] | 0) + 20 | 0 | 0, Math_imul((HEAP32[((HEAP32[($5_1 + 724 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - 1 | 0, HEAP32[(0 + 10036 | 0) >> 2] | 0) | 0) | 0) >> 2]))));
     HEAP32[($5_1 + 724 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 724 | 0) >> 2] | 0) >> 2] | 0;
     continue label$75;
    };
   }
   label$81 : {
    label$82 : {
     if (!((HEAP32[($5_1 + 752 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$82
     }
     $1001_1 = HEAP32[((HEAP32[($5_1 + 752 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     break label$81;
    }
    $1001_1 = 0;
   }
   HEAP32[($5_1 + 724 | 0) >> 2] = $1001_1;
   label$83 : {
    label$84 : while (1) {
     if (!((HEAP32[($5_1 + 724 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$83
     }
     $1011_1 = HEAP32[($5_1 + 800 | 0) >> 2] | 0;
     $111($5_1 + 424 | 0 | 0, HEAP32[((HEAP32[($5_1 + 724 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
     $1023_1 = $1517($1011_1 | 0, $5_1 + 424 | 0 | 0) | 0;
     $112($5_1 + 424 | 0 | 0) | 0;
     HEAP32[($5_1 + 436 | 0) >> 2] = $1023_1;
     $1030_1 = $1655(40 | 0, 2841 | 0, 982 | 0) | 0;
     $1700($1030_1 | 0, HEAP32[((HEAP32[($5_1 + 724 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($5_1 + 420 | 0) >> 2] = $1030_1;
     HEAP32[($5_1 + 776 | 0) >> 2] = 0;
     label$85 : {
      label$86 : while (1) {
       if (!((HEAP32[($5_1 + 776 | 0) >> 2] | 0) >>> 0 < ($1219((HEAP32[($5_1 + 800 | 0) >> 2] | 0) + 116 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
        break label$85
       }
       label$87 : {
        if (!((HEAP32[($5_1 + 436 | 0) >> 2] | 0 | 0) == (HEAP32[($1221((HEAP32[($5_1 + 800 | 0) >> 2] | 0) + 116 | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$87
        }
        HEAP32[((HEAP32[($5_1 + 420 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($5_1 + 776 | 0) >> 2] | 0;
        break label$85;
       }
       HEAP32[($5_1 + 776 | 0) >> 2] = (HEAP32[($5_1 + 776 | 0) >> 2] | 0) + 1 | 0;
       continue label$86;
      };
     }
     HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 724 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     HEAP32[($5_1 + 776 | 0) >> 2] = 0;
     label$88 : {
      label$89 : while (1) {
       if (!((HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$88
       }
       $1703(HEAP32[($5_1 + 420 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5070 | 0, Math_fround(Math_fround(0 | 0))))), Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1259 | 0, Math_fround(Math_fround(1.0))))), Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1269 | 0, Math_fround(Math_fround(1.0))))), Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1282 | 0, Math_fround(Math_fround(1.0))))), Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1250 | 0, Math_fround(Math_fround(1.0))))));
       $1572(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 420 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0);
       HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 772 | 0) >> 2] | 0) >> 2] | 0;
       HEAP32[($5_1 + 776 | 0) >> 2] = (HEAP32[($5_1 + 776 | 0) >> 2] | 0) + 1 | 0;
       continue label$89;
      };
     }
     HEAP32[($5_1 + 416 | 0) >> 2] = HEAP32[($5_1 + 420 | 0) >> 2] | 0;
     $1383($5_1 + 784 | 0 | 0, $5_1 + 416 | 0 | 0);
     HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + 1 | 0;
     HEAPF32[($5_1 + 780 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($5_1 + 780 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($5_1 + 420 | 0) >> 2] | 0) + 20 | 0 | 0, Math_imul((HEAP32[((HEAP32[($5_1 + 724 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - 1 | 0, HEAP32[(0 + 13436 | 0) >> 2] | 0) | 0) | 0) >> 2]))));
     HEAP32[($5_1 + 724 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 724 | 0) >> 2] | 0) >> 2] | 0;
     continue label$84;
    };
   }
   label$90 : {
    label$91 : {
     if (!((HEAP32[($5_1 + 748 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$91
     }
     $1124_1 = HEAP32[((HEAP32[($5_1 + 748 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     break label$90;
    }
    $1124_1 = 0;
   }
   HEAP32[($5_1 + 724 | 0) >> 2] = $1124_1;
   label$92 : {
    label$93 : while (1) {
     if (!((HEAP32[($5_1 + 724 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$92
     }
     HEAP32[($5_1 + 412 | 0) >> 2] = 0;
     $1135_1 = HEAP32[($5_1 + 800 | 0) >> 2] | 0;
     $111($5_1 + 384 | 0 | 0, HEAP32[((HEAP32[($5_1 + 724 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
     $1147_1 = $1519($1135_1 | 0, $5_1 + 384 | 0 | 0) | 0;
     $112($5_1 + 384 | 0 | 0) | 0;
     HEAP32[($5_1 + 400 | 0) >> 2] = $1147_1;
     label$94 : {
      if ((HEAP32[($5_1 + 400 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$94
      }
      $477($5_1 + 784 | 0 | 0);
      $111($5_1 + 368 | 0 | 0, 6152 | 0, 0 & 1 | 0 | 0) | 0;
      $111($5_1 + 352 | 0 | 0, HEAP32[((HEAP32[($5_1 + 724 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
      $1555($6_1 | 0, 0 | 0, $5_1 + 368 | 0 | 0, $5_1 + 352 | 0 | 0);
      $112($5_1 + 352 | 0 | 0) | 0;
      $112($5_1 + 368 | 0 | 0) | 0;
      HEAP32[($5_1 + 812 | 0) >> 2] = 0;
      HEAP32[($5_1 + 668 | 0) >> 2] = 1;
      break label$29;
     }
     HEAP32[($5_1 + 408 | 0) >> 2] = 0;
     label$95 : {
      label$96 : while (1) {
       if (!((HEAP32[($5_1 + 408 | 0) >> 2] | 0) >>> 0 < ($1223((HEAP32[($5_1 + 800 | 0) >> 2] | 0) + 132 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
        break label$95
       }
       label$97 : {
        if (!((HEAP32[($1225((HEAP32[($5_1 + 800 | 0) >> 2] | 0) + 132 | 0 | 0, HEAP32[($5_1 + 408 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 400 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$97
        }
        HEAP32[($5_1 + 412 | 0) >> 2] = HEAP32[($5_1 + 408 | 0) >> 2] | 0;
        break label$95;
       }
       HEAP32[($5_1 + 408 | 0) >> 2] = (HEAP32[($5_1 + 408 | 0) >> 2] | 0) + 1 | 0;
       continue label$96;
      };
     }
     HEAP32[($5_1 + 404 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 724 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     label$98 : {
      label$99 : while (1) {
       if (!((HEAP32[($5_1 + 404 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$98
       }
       HEAP32[($5_1 + 348 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 404 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
       label$100 : {
        label$101 : {
         label$102 : {
          if (!($1926(HEAP32[($5_1 + 348 | 0) >> 2] | 0 | 0, 3903 | 0) | 0)) {
           break label$102
          }
          if ($1926(HEAP32[($5_1 + 348 | 0) >> 2] | 0 | 0, 4570 | 0) | 0) {
           break label$101
          }
         }
         HEAPF32[($5_1 + 340 | 0) >> 2] = Math_fround(1.0);
         label$103 : {
          label$104 : {
           if ($1926(HEAP32[($5_1 + 348 | 0) >> 2] | 0 | 0, 4570 | 0) | 0) {
            break label$104
           }
           $1241_1 = $1655(40 | 0, 2841 | 0, 1026 | 0) | 0;
           $1145($1241_1 | 0, HEAP32[((HEAP32[($5_1 + 404 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
           HEAP32[($5_1 + 344 | 0) >> 2] = $1241_1;
           label$105 : {
            label$106 : {
             if (!(HEAP32[((HEAP32[($5_1 + 400 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0)) {
              break label$106
             }
             if (!((HEAP32[((HEAP32[($5_1 + 400 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
              break label$105
             }
            }
            HEAPF32[($5_1 + 340 | 0) >> 2] = Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]);
           }
           break label$103;
          }
          $1257_1 = $1655(40 | 0, 2841 | 0, 1032 | 0) | 0;
          $1135($1257_1 | 0, HEAP32[((HEAP32[($5_1 + 404 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($5_1 + 344 | 0) >> 2] = $1257_1;
          label$107 : {
           if (HEAP32[((HEAP32[($5_1 + 400 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
            break label$107
           }
           HEAPF32[($5_1 + 340 | 0) >> 2] = Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]);
          }
         }
         HEAP32[((HEAP32[($5_1 + 344 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($5_1 + 412 | 0) >> 2] | 0;
         HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 404 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
         HEAP32[($5_1 + 776 | 0) >> 2] = 0;
         label$108 : {
          label$109 : while (1) {
           if (!((HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break label$108
           }
           $1140(HEAP32[($5_1 + 344 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5070 | 0, Math_fround(Math_fround(0 | 0))))), Math_fround(Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 348 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(0 | 0)))) * Math_fround(HEAPF32[($5_1 + 340 | 0) >> 2]))));
           $1572(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 344 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0);
           HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 772 | 0) >> 2] | 0) >> 2] | 0;
           HEAP32[($5_1 + 776 | 0) >> 2] = (HEAP32[($5_1 + 776 | 0) >> 2] | 0) + 1 | 0;
           continue label$109;
          };
         }
         HEAP32[($5_1 + 336 | 0) >> 2] = HEAP32[($5_1 + 344 | 0) >> 2] | 0;
         $1383($5_1 + 784 | 0 | 0, $5_1 + 336 | 0 | 0);
         HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + 1 | 0;
         HEAPF32[($5_1 + 780 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($5_1 + 780 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($5_1 + 344 | 0) >> 2] | 0) + 20 | 0 | 0, Math_imul((HEAP32[((HEAP32[($5_1 + 404 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - 1 | 0, HEAP32[(0 + 10624 | 0) >> 2] | 0) | 0) | 0) >> 2]))));
         break label$100;
        }
        label$110 : {
         if ($1926(HEAP32[($5_1 + 348 | 0) >> 2] | 0 | 0, 1232 | 0) | 0) {
          break label$110
         }
         $1317_1 = $1655(40 | 0, 2841 | 0, 1050 | 0) | 0;
         $1124($1317_1 | 0, HEAP32[((HEAP32[($5_1 + 404 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
         HEAP32[($5_1 + 332 | 0) >> 2] = $1317_1;
         HEAP32[((HEAP32[($5_1 + 332 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($5_1 + 412 | 0) >> 2] | 0;
         HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 404 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
         HEAP32[($5_1 + 776 | 0) >> 2] = 0;
         label$111 : {
          label$112 : while (1) {
           if (!((HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break label$111
           }
           $1128(HEAP32[($5_1 + 332 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5070 | 0, Math_fround(Math_fround(0 | 0))))), Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1259 | 0, Math_fround(Math_fround(1.0))))), Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1269 | 0, Math_fround(Math_fround(1.0))))));
           $1572(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 332 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0);
           HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 772 | 0) >> 2] | 0) >> 2] | 0;
           HEAP32[($5_1 + 776 | 0) >> 2] = (HEAP32[($5_1 + 776 | 0) >> 2] | 0) + 1 | 0;
           continue label$112;
          };
         }
         HEAP32[($5_1 + 328 | 0) >> 2] = HEAP32[($5_1 + 332 | 0) >> 2] | 0;
         $1383($5_1 + 784 | 0 | 0, $5_1 + 328 | 0 | 0);
         HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + 1 | 0;
         HEAPF32[($5_1 + 780 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($5_1 + 780 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($5_1 + 332 | 0) >> 2] | 0) + 20 | 0 | 0, Math_imul((HEAP32[((HEAP32[($5_1 + 404 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - 1 | 0, HEAP32[(0 + 10544 | 0) >> 2] | 0) | 0) | 0) >> 2]))));
        }
       }
       HEAP32[($5_1 + 404 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 404 | 0) >> 2] | 0) >> 2] | 0;
       continue label$99;
      };
     }
     HEAP32[($5_1 + 724 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 724 | 0) >> 2] | 0) >> 2] | 0;
     continue label$93;
    };
   }
   label$113 : {
    label$114 : {
     if (!((HEAP32[($5_1 + 744 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$114
     }
     $1383_1 = HEAP32[((HEAP32[($5_1 + 744 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     break label$113;
    }
    $1383_1 = 0;
   }
   HEAP32[($5_1 + 724 | 0) >> 2] = $1383_1;
   label$115 : {
    label$116 : while (1) {
     if (!((HEAP32[($5_1 + 724 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$115
     }
     $1393_1 = HEAP32[($5_1 + 800 | 0) >> 2] | 0;
     $111($5_1 + 312 | 0 | 0, HEAP32[((HEAP32[($5_1 + 724 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
     $1405_1 = $1509($1393_1 | 0, $5_1 + 312 | 0 | 0) | 0;
     $112($5_1 + 312 | 0 | 0) | 0;
     HEAP32[($5_1 + 324 | 0) >> 2] = $1405_1;
     HEAP32[($5_1 + 728 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 724 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     label$117 : {
      label$118 : while (1) {
       if (!((HEAP32[($5_1 + 728 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$117
       }
       $1418_1 = HEAP32[($5_1 + 800 | 0) >> 2] | 0;
       $111($5_1 + 296 | 0 | 0, HEAP32[((HEAP32[($5_1 + 728 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
       $1430_1 = $1507($1418_1 | 0, $5_1 + 296 | 0 | 0) | 0;
       $112($5_1 + 296 | 0 | 0) | 0;
       HEAP32[($5_1 + 308 | 0) >> 2] = $1430_1;
       HEAP32[($5_1 + 292 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 728 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       label$119 : {
        label$120 : while (1) {
         if (!((HEAP32[($5_1 + 292 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$119
         }
         $1443_1 = HEAP32[($5_1 + 324 | 0) >> 2] | 0;
         $1444_1 = HEAP32[($5_1 + 308 | 0) >> 2] | 0;
         $111($5_1 + 264 | 0 | 0, HEAP32[((HEAP32[($5_1 + 292 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
         $1456_1 = $1610($1443_1 | 0, $1444_1 | 0, $5_1 + 264 | 0 | 0) | 0;
         $112($5_1 + 264 | 0 | 0) | 0;
         HEAP32[($5_1 + 276 | 0) >> 2] = $1456_1;
         label$121 : {
          label$122 : {
           if ((HEAP32[($5_1 + 276 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
            break label$122
           }
           $477($5_1 + 784 | 0 | 0);
           break label$121;
          }
          HEAP32[($5_1 + 260 | 0) >> 2] = HEAP32[($5_1 + 276 | 0) >> 2] | 0;
          HEAP32[($5_1 + 284 | 0) >> 2] = ($857((HEAP32[($5_1 + 260 | 0) >> 2] | 0) + 20 | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0;
          HEAP32[($5_1 + 256 | 0) >> 2] = (HEAP32[($5_1 + 260 | 0) >> 2] | 0) + 36 | 0;
          label$123 : {
           label$124 : {
            if (!(HEAP32[($5_1 + 284 | 0) >> 2] | 0)) {
             break label$124
            }
            $1491_1 = ((($488(HEAP32[($5_1 + 256 | 0) >> 2] | 0 | 0) | 0) >>> 0) / (3 >>> 0) | 0) << 1 | 0;
            break label$123;
           }
           $1491_1 = $488(HEAP32[($5_1 + 256 | 0) >> 2] | 0 | 0) | 0;
          }
          HEAP32[($5_1 + 280 | 0) >> 2] = $1491_1;
          $1498_1 = $1655(60 | 0, 2841 | 0, 1090 | 0) | 0;
          $848($1498_1 | 0, HEAP32[((HEAP32[($5_1 + 292 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($5_1 + 288 | 0) >> 2] = $1498_1;
          HEAP32[((HEAP32[($5_1 + 288 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($5_1 + 308 | 0) >> 2] | 0;
          HEAP32[((HEAP32[($5_1 + 288 | 0) >> 2] | 0) + 56 | 0) >> 2] = HEAP32[($5_1 + 260 | 0) >> 2] | 0;
          HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 292 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
          HEAP32[($5_1 + 776 | 0) >> 2] = 0;
          label$125 : {
           label$126 : while (1) {
            if (!((HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break label$125
            }
            HEAP32[($5_1 + 252 | 0) >> 2] = $994(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1794 | 0) | 0;
            $502($5_1 + 232 | 0 | 0) | 0;
            label$127 : {
             label$128 : {
              if ((HEAP32[($5_1 + 252 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
               break label$128
              }
              label$129 : {
               label$130 : {
                if (!(HEAP32[($5_1 + 284 | 0) >> 2] | 0)) {
                 break label$130
                }
                $1529_1 = HEAP32[($5_1 + 280 | 0) >> 2] | 0;
                HEAPF32[($5_1 + 228 | 0) >> 2] = Math_fround(0 | 0);
                $573($5_1 + 232 | 0 | 0, $1529_1 | 0, $5_1 + 228 | 0 | 0);
                break label$129;
               }
               $1057($5_1 + 232 | 0 | 0, (HEAP32[($5_1 + 260 | 0) >> 2] | 0) + 36 | 0 | 0);
              }
              break label$127;
             }
             HEAP32[($5_1 + 220 | 0) >> 2] = $998(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1646 | 0, 0 | 0) | 0;
             $1547_1 = HEAP32[($5_1 + 280 | 0) >> 2] | 0;
             HEAPF32[($5_1 + 212 | 0) >> 2] = Math_fround(0 | 0);
             $573($5_1 + 232 | 0 | 0, $1547_1 | 0, $5_1 + 212 | 0 | 0);
             label$131 : {
              label$132 : {
               if (!(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) == Math_fround(1.0) & 1 | 0)) {
                break label$132
               }
               HEAP32[($5_1 + 216 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 252 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
               HEAP32[($5_1 + 224 | 0) >> 2] = HEAP32[($5_1 + 220 | 0) >> 2] | 0;
               label$133 : {
                label$134 : while (1) {
                 if (!((HEAP32[($5_1 + 216 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                  break label$133
                 }
                 $2253 = Math_fround(HEAPF32[((HEAP32[($5_1 + 216 | 0) >> 2] | 0) + 24 | 0) >> 2]);
                 HEAPF32[($15($5_1 + 232 | 0 | 0, HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0) | 0) >> 2] = $2253;
                 HEAP32[($5_1 + 216 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 216 | 0) >> 2] | 0) >> 2] | 0;
                 HEAP32[($5_1 + 224 | 0) >> 2] = (HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 1 | 0;
                 continue label$134;
                };
               }
               break label$131;
              }
              HEAP32[($5_1 + 216 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 252 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
              HEAP32[($5_1 + 224 | 0) >> 2] = HEAP32[($5_1 + 220 | 0) >> 2] | 0;
              label$135 : {
               label$136 : while (1) {
                if (!((HEAP32[($5_1 + 216 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                 break label$135
                }
                $2256 = Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 216 | 0) >> 2] | 0) + 24 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]));
                HEAPF32[($15($5_1 + 232 | 0 | 0, HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0) | 0) >> 2] = $2256;
                HEAP32[($5_1 + 216 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 216 | 0) >> 2] | 0) >> 2] | 0;
                HEAP32[($5_1 + 224 | 0) >> 2] = (HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 1 | 0;
                continue label$136;
               };
              }
             }
             label$137 : {
              if (HEAP32[($5_1 + 284 | 0) >> 2] | 0) {
               break label$137
              }
              HEAP32[($5_1 + 208 | 0) >> 2] = (HEAP32[($5_1 + 260 | 0) >> 2] | 0) + 36 | 0;
              HEAP32[($5_1 + 224 | 0) >> 2] = 0;
              label$138 : {
               label$139 : while (1) {
                if (!((HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 280 | 0) >> 2] | 0 | 0) & 1 | 0)) {
                 break label$138
                }
                $2257 = Math_fround(HEAPF32[($15(HEAP32[($5_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0) | 0) >> 2]);
                $1619_1 = $15($5_1 + 232 | 0 | 0, HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0) | 0;
                HEAPF32[$1619_1 >> 2] = Math_fround(Math_fround(HEAPF32[$1619_1 >> 2]) + $2257);
                HEAP32[($5_1 + 224 | 0) >> 2] = (HEAP32[($5_1 + 224 | 0) >> 2] | 0) + 1 | 0;
                continue label$139;
               };
              }
             }
            }
            $860(HEAP32[($5_1 + 288 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5070 | 0, Math_fround(Math_fround(0 | 0))))), $5_1 + 232 | 0 | 0);
            $1572(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 288 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0);
            $504($5_1 + 232 | 0 | 0) | 0;
            HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 772 | 0) >> 2] | 0) >> 2] | 0;
            HEAP32[($5_1 + 776 | 0) >> 2] = (HEAP32[($5_1 + 776 | 0) >> 2] | 0) + 1 | 0;
            continue label$126;
           };
          }
          HEAP32[($5_1 + 204 | 0) >> 2] = HEAP32[($5_1 + 288 | 0) >> 2] | 0;
          $1383($5_1 + 784 | 0 | 0, $5_1 + 204 | 0 | 0);
          HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + 1 | 0;
          HEAPF32[($5_1 + 780 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($5_1 + 780 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($5_1 + 288 | 0) >> 2] | 0) + 24 | 0 | 0, (HEAP32[((HEAP32[($5_1 + 292 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]))));
         }
         HEAP32[($5_1 + 292 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 292 | 0) >> 2] | 0) >> 2] | 0;
         continue label$120;
        };
       }
       HEAP32[($5_1 + 728 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 728 | 0) >> 2] | 0) >> 2] | 0;
       continue label$118;
      };
     }
     HEAP32[($5_1 + 724 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 724 | 0) >> 2] | 0) >> 2] | 0;
     continue label$116;
    };
   }
   label$140 : {
    if (!((HEAP32[($5_1 + 740 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$140
    }
    $1676_1 = $1655(36 | 0, 2841 | 0, 1137 | 0) | 0;
    $877($1676_1 | 0, HEAP32[((HEAP32[($5_1 + 740 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 200 | 0) >> 2] = $1676_1;
    HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 740 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 776 | 0) >> 2] = 0;
    label$141 : {
     label$142 : while (1) {
      if (!((HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$141
      }
      $500($5_1 + 176 | 0 | 0) | 0;
      HEAP32[($5_1 + 172 | 0) >> 2] = $994(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1704 | 0) | 0;
      label$143 : {
       label$144 : {
        if (!((HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$144
        }
        $500($5_1 + 152 | 0 | 0) | 0;
        $893($5_1 + 152 | 0 | 0, ($1213((HEAP32[($5_1 + 800 | 0) >> 2] | 0) + 32 | 0 | 0) | 0) - (HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) | 0 | 0);
        $1721_1 = ($1213((HEAP32[($5_1 + 800 | 0) >> 2] | 0) + 32 | 0 | 0) | 0) - (HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) | 0;
        HEAP32[($5_1 + 148 | 0) >> 2] = 0;
        $595($5_1 + 152 | 0 | 0, $1721_1 | 0, $5_1 + 148 | 0 | 0);
        HEAP32[($5_1 + 144 | 0) >> 2] = 0;
        HEAP32[($5_1 + 140 | 0) >> 2] = 0;
        $893($5_1 + 176 | 0 | 0, $1213((HEAP32[($5_1 + 800 | 0) >> 2] | 0) + 32 | 0 | 0) | 0 | 0);
        $1741_1 = $1213((HEAP32[($5_1 + 800 | 0) >> 2] | 0) + 32 | 0 | 0) | 0;
        HEAP32[($5_1 + 136 | 0) >> 2] = 0;
        $595($5_1 + 176 | 0 | 0, $1741_1 | 0, $5_1 + 136 | 0 | 0);
        HEAP32[($5_1 + 196 | 0) >> 2] = ($1213((HEAP32[($5_1 + 800 | 0) >> 2] | 0) + 32 | 0 | 0) | 0) - 1 | 0;
        label$145 : {
         label$146 : while (1) {
          if (!((HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
           break label$145
          }
          HEAP32[($574($5_1 + 176 | 0 | 0, HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0) | 0) >> 2] = -1;
          HEAP32[($5_1 + 196 | 0) >> 2] = (HEAP32[($5_1 + 196 | 0) >> 2] | 0) + -1 | 0;
          continue label$146;
         };
        }
        HEAP32[($5_1 + 168 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        label$147 : {
         label$148 : {
          label$149 : while (1) {
           if (!((HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break label$148
           }
           $1780_1 = HEAP32[($5_1 + 800 | 0) >> 2] | 0;
           $111($5_1 + 120 | 0 | 0, $996(HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0, 1365 | 0, 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
           $1794_1 = $1507($1780_1 | 0, $5_1 + 120 | 0 | 0) | 0;
           $112($5_1 + 120 | 0 | 0) | 0;
           HEAP32[($5_1 + 132 | 0) >> 2] = $1794_1;
           label$150 : {
            if (!((HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
             break label$150
            }
            $477($5_1 + 784 | 0 | 0);
            $111($5_1 + 104 | 0 | 0, 6064 | 0, 0 & 1 | 0 | 0) | 0;
            $111($5_1 + 88 | 0 | 0, $996(HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0, 1365 | 0, 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
            $1555($6_1 | 0, 0 | 0, $5_1 + 104 | 0 | 0, $5_1 + 88 | 0 | 0);
            $112($5_1 + 88 | 0 | 0) | 0;
            $112($5_1 + 104 | 0 | 0) | 0;
            HEAP32[($5_1 + 812 | 0) >> 2] = 0;
            HEAP32[($5_1 + 668 | 0) >> 2] = 1;
            break label$147;
           }
           label$151 : {
            label$152 : while (1) {
             if (!((HEAP32[($5_1 + 144 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$151
             }
             $1847_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
             HEAP32[($5_1 + 144 | 0) >> 2] = $1847_1 + 1 | 0;
             $1850_1 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
             HEAP32[($5_1 + 140 | 0) >> 2] = $1850_1 + 1 | 0;
             HEAP32[($574($5_1 + 152 | 0 | 0, $1850_1 | 0) | 0) >> 2] = $1847_1;
             continue label$152;
            };
           }
           $1857_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
           HEAP32[($574($5_1 + 176 | 0 | 0, (HEAP32[($5_1 + 144 | 0) >> 2] | 0) + ($998(HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0, 1646 | 0, 0 | 0) | 0) | 0 | 0) | 0) >> 2] = $1857_1;
           HEAP32[($5_1 + 144 | 0) >> 2] = (HEAP32[($5_1 + 144 | 0) >> 2] | 0) + 1 | 0;
           HEAP32[($5_1 + 168 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 168 | 0) >> 2] | 0) >> 2] | 0;
           continue label$149;
          };
         }
         label$153 : {
          label$154 : while (1) {
           if (!((HEAP32[($5_1 + 144 | 0) >> 2] | 0) >>> 0 < ($1213((HEAP32[($5_1 + 800 | 0) >> 2] | 0) + 32 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
            break label$153
           }
           $1883_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
           HEAP32[($5_1 + 144 | 0) >> 2] = $1883_1 + 1 | 0;
           $1886_1 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
           HEAP32[($5_1 + 140 | 0) >> 2] = $1886_1 + 1 | 0;
           HEAP32[($574($5_1 + 152 | 0 | 0, $1886_1 | 0) | 0) >> 2] = $1883_1;
           continue label$154;
          };
         }
         HEAP32[($5_1 + 196 | 0) >> 2] = ($1213((HEAP32[($5_1 + 800 | 0) >> 2] | 0) + 32 | 0 | 0) | 0) - 1 | 0;
         label$155 : {
          label$156 : while (1) {
           if (!((HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
            break label$155
           }
           label$157 : {
            if (!((HEAP32[($574($5_1 + 176 | 0 | 0, HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
             break label$157
            }
            $1920_1 = (HEAP32[($5_1 + 140 | 0) >> 2] | 0) + -1 | 0;
            HEAP32[($5_1 + 140 | 0) >> 2] = $1920_1;
            $1925_1 = HEAP32[($574($5_1 + 152 | 0 | 0, $1920_1 | 0) | 0) >> 2] | 0;
            HEAP32[($574($5_1 + 176 | 0 | 0, HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0) | 0) >> 2] = $1925_1;
           }
           HEAP32[($5_1 + 196 | 0) >> 2] = (HEAP32[($5_1 + 196 | 0) >> 2] | 0) + -1 | 0;
           continue label$156;
          };
         }
         HEAP32[($5_1 + 668 | 0) >> 2] = 0;
        }
        $506($5_1 + 152 | 0 | 0) | 0;
        if (HEAP32[($5_1 + 668 | 0) >> 2] | 0) {
         break label$143
        }
       }
       $891(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5070 | 0, Math_fround(Math_fround(0 | 0))))), $5_1 + 176 | 0 | 0);
       HEAP32[($5_1 + 668 | 0) >> 2] = 0;
      }
      $506($5_1 + 176 | 0 | 0) | 0;
      if (HEAP32[($5_1 + 668 | 0) >> 2] | 0) {
       break label$29
      }
      HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 772 | 0) >> 2] | 0) >> 2] | 0;
      HEAP32[($5_1 + 776 | 0) >> 2] = (HEAP32[($5_1 + 776 | 0) >> 2] | 0) + 1 | 0;
      continue label$142;
     };
    }
    HEAP32[($5_1 + 84 | 0) >> 2] = HEAP32[($5_1 + 200 | 0) >> 2] | 0;
    $1383($5_1 + 784 | 0 | 0, $5_1 + 84 | 0 | 0);
    HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + 1 | 0;
    HEAPF32[($5_1 + 780 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($5_1 + 780 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($5_1 + 200 | 0) >> 2] | 0) + 4 | 0 | 0, (HEAP32[((HEAP32[($5_1 + 740 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]))));
   }
   label$158 : {
    if (!((HEAP32[($5_1 + 736 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$158
    }
    $1983_1 = $1655(36 | 0, 2841 | 0, 1185 | 0) | 0;
    $917($1983_1 | 0, HEAP32[((HEAP32[($5_1 + 736 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 80 | 0) >> 2] = $1983_1;
    HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 736 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 776 | 0) >> 2] = 0;
    label$159 : {
     label$160 : while (1) {
      if (!((HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$159
      }
      $1996_1 = HEAP32[($5_1 + 800 | 0) >> 2] | 0;
      $111($5_1 + 56 | 0 | 0, $996(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5075 | 0, 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
      $2010_1 = $1511($1996_1 | 0, $5_1 + 56 | 0 | 0) | 0;
      $112($5_1 + 56 | 0 | 0) | 0;
      HEAP32[($5_1 + 72 | 0) >> 2] = $2010_1;
      label$161 : {
       if ((HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$161
       }
       $477($5_1 + 784 | 0 | 0);
       $111($5_1 + 40 | 0 | 0, 6211 | 0, 0 & 1 | 0 | 0) | 0;
       $111($5_1 + 24 | 0 | 0, $996(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5075 | 0, 0 | 0) | 0 | 0, 0 & 1 | 0 | 0) | 0;
       $1555($6_1 | 0, 0 | 0, $5_1 + 40 | 0 | 0, $5_1 + 24 | 0 | 0);
       $112($5_1 + 24 | 0 | 0) | 0;
       $112($5_1 + 40 | 0 | 0) | 0;
       HEAP32[($5_1 + 812 | 0) >> 2] = 0;
       HEAP32[($5_1 + 668 | 0) >> 2] = 1;
       break label$29;
      }
      $2059 = $1655(40 | 0, 2841 | 0, 1196 | 0) | 0;
      $906($2059 | 0, Math_fround(Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5070 | 0, Math_fround(Math_fround(0 | 0))))), HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($5_1 + 76 | 0) >> 2] = $2059;
      $2068 = $998(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1438 | 0, HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 12 | 0) >> 2] = $2068;
      $2273 = Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 1660 | 0, Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 20 | 0) >> 2]))));
      HEAPF32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] = $2273;
      $2080 = $996(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 4554 | 0, $125((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 24 | 0 | 0) | 0 | 0) | 0;
      $1348((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 20 | 0 | 0, $2080 | 0) | 0;
      label$162 : {
       if (($1356((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 36 | 0 | 0) | 0) & 1 | 0) {
        break label$162
       }
       $2275 = Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5063 | 0, Math_fround(Math_fround(1.0))));
       HEAPF32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 32 | 0) >> 2] = $2275;
       $2277 = Math_fround($997(HEAP32[($5_1 + 772 | 0) >> 2] | 0 | 0, 5239 | 0, Math_fround(Math_fround(0 | 0))));
       HEAPF32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 36 | 0) >> 2] = $2277;
      }
      $928(HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 776 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0);
      HEAP32[($5_1 + 772 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 772 | 0) >> 2] | 0) >> 2] | 0;
      HEAP32[($5_1 + 776 | 0) >> 2] = (HEAP32[($5_1 + 776 | 0) >> 2] | 0) + 1 | 0;
      continue label$160;
     };
    }
    HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[($5_1 + 80 | 0) >> 2] | 0;
    $1383($5_1 + 784 | 0 | 0, $5_1 + 20 | 0 | 0);
    HEAP32[($5_1 + 768 | 0) >> 2] = (HEAP32[($5_1 + 768 | 0) >> 2] | 0) + 1 | 0;
    HEAPF32[($5_1 + 780 | 0) >> 2] = Math_fround($579(Math_fround(Math_fround(HEAPF32[($5_1 + 780 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15((HEAP32[($5_1 + 80 | 0) >> 2] | 0) + 4 | 0 | 0, (HEAP32[((HEAP32[($5_1 + 736 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2]))));
   }
   $2126 = $1655(48 | 0, 2841 | 0, 1211 | 0) | 0;
   $111($5_1 + 8 | 0 | 0, HEAP32[((HEAP32[($5_1 + 804 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
   $464($2126 | 0, $5_1 + 8 | 0 | 0, $5_1 + 784 | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 780 | 0) >> 2]))) | 0;
   HEAP32[($5_1 + 812 | 0) >> 2] = $2126;
   $112($5_1 + 8 | 0 | 0) | 0;
   HEAP32[($5_1 + 668 | 0) >> 2] = 1;
  }
  $479($5_1 + 784 | 0 | 0) | 0;
  $2148 = HEAP32[($5_1 + 812 | 0) >> 2] | 0;
  global$0 = $5_1 + 816 | 0;
  return $2148 | 0;
 }
 
 function $1570($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 12664 + 8 | 0;
  $1573($4_1 + 4 | 0 | 0) | 0;
  $502($4_1 + 20 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1571($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 12664 + 8 | 0;
  $504($4_1 + 20 | 0 | 0) | 0;
  $1574($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1572($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $994(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, 4606 | 0) | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 10116 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    if ($1926(HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 5266 | 0) | 0) {
     break label$3
    }
    $841(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround($997(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, 4606 | 0, Math_fround(Math_fround(0 | 0))));
   HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround($997(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, 5570 | 0, Math_fround(Math_fround(0 | 0))));
   HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround($997(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, 5567 | 0, Math_fround(Math_fround(1.0))));
   HEAPF32[$5_1 >> 2] = Math_fround($997(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, 5555 | 0, Math_fround(Math_fround(1.0))));
   $842(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[$5_1 >> 2])));
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $1573($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 12712 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1574($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 12712 + 8 | 0;
  $1059($4_1 | 0);
  $1577($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1575($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1576($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1571($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1577($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1579(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1578($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1574($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1579($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1580($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 12760 + 8 | 0;
  $1581($4_1 + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1581($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 12864 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1582($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $21_1 = 0, $50_1 = 0, $54_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($6_1 + 56 | 0) >> 2] | 0) >>> 0 >= ($1306($7_1 + 4 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $21_1 = (HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 1 | 0;
   $1583($6_1 + 32 | 0 | 0) | 0;
   $1584($7_1 + 4 | 0 | 0, $21_1 | 0, $6_1 + 32 | 0 | 0);
   $1585($6_1 + 32 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 28 | 0) >> 2] = $1307($7_1 + 4 | 0 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1586($7_1 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) | 0;
  $714(HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0);
  label$2 : {
   label$3 : {
    if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$3
    }
    $1587(HEAP32[(($1309(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0) + 16 | 0) >> 2] | 0 | 0);
    $50_1 = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
    HEAP32[(($1309(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0) + 16 | 0) >> 2] = $50_1;
    break label$2;
   }
   $54_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   $1588($6_1 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) | 0;
   $1589($54_1 | 0, $6_1 | 0);
   $1305($6_1 | 0) | 0;
  }
  global$0 = $6_1 + 64 | 0;
  return;
 }
 
 function $1583($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 12948 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1584($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $75_1 = Math_fround(0), $31_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 >= 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5689 | 0, 4142 | 0, 76 | 0, 4598 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$2 : {
   if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   $75_1 = Math_fround(Math_fround((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
   label$3 : {
    label$4 : {
     if (!(Math_fround(Math_abs($75_1)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $31_1 = ~~$75_1;
     break label$3;
    }
    $31_1 = -2147483648;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $31_1;
   label$5 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = 8;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $1590(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 82 | 0) | 0;
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$6
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$7
     }
     $1591($6_1 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 4 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $1585($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 12948 + 8 | 0;
  $1592($4_1 | 0);
  $1593($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1586($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $29_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < ($1308(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!(($627(($1309(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 4 | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      break label$1;
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = -1;
  }
  $29_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $29_1 | 0;
 }
 
 function $1587($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   $715(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
   if ($713(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) {
    break label$1
   }
   $14_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   label$3 : {
    if (($14_1 | 0) == (0 | 0) & 1 | 0) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$14_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($14_1);
   }
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1588($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  $124($7_1 + 4 | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $1589($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $55_1 = Math_fround(0), $18_1 = 0, $35_1 = 0, $44_1 = 0, $34_1 = 0, $43_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $1304($4_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    $55_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($55_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $18_1 = ~~$55_1;
      break label$3;
     }
     $18_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $18_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $1594(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $34_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $35_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $35_1 + 1 | 0;
    $1595($5_1 | 0, $34_1 + Math_imul($35_1, 20) | 0 | 0, $4_1 | 0);
    $1305($4_1 | 0) | 0;
    break label$1;
   }
   $43_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $44_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $44_1 + 1 | 0;
   $1595($5_1 | 0, $43_1 + Math_imul($44_1, 20) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $1590($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 4 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1591($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $1622($1656(16 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1592($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1597($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + Math_imul(((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0, 20) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1593($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1626(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1594($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, Math_imul(HEAP32[($6_1 + 8 | 0) >> 2] | 0, 20), HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1595($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $1304(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1596($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $37_1 = 0, $40_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0) >>> 0 >= ($1306($6_1 + 4 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $1586($6_1 | 0, $1307($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
      break label$4
     }
     $37_1 = HEAP32[(($1309($1307($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 16 | 0) >> 2] | 0;
     break label$3;
    }
    $37_1 = 0;
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = $37_1;
  }
  $40_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $40_1 | 0;
 }
 
 function $1597($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $1305(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1598($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  $1599($0_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1599($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $1600($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  $113($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 12776 + 8 | 0;
  $124($5_1 + 4 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  FUNCTION_TABLE[345 | 0]($5_1 + 16 | 0) | 0;
  $967($5_1 + 36 | 0 | 0) | 0;
  $1601($5_1 + 52 | 0 | 0) | 0;
  label$1 : {
   if (($131($5_1 + 4 | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5608 | 0, 3119 | 0, 96 | 0, 4008 | 0);
   wasm2js_trap();
  }
  $32_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $32_1 | 0;
 }
 
 function $1601($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 13024 + 8 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1602($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $34_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 40 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
  HEAP32[($3_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[$4_1 >> 2] = 12776 + 8 | 0;
  $1598($3_1 + 24 | 0 | 0, $4_1 + 16 | 0 | 0);
  label$1 : {
   label$2 : while (1) {
    if (!(($1302($3_1 + 24 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    $1304($3_1 | 0, $1303($3_1 + 24 | 0 | 0) | 0 | 0) | 0;
    $1587(HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0);
    $1305($3_1 | 0) | 0;
    continue label$2;
   };
  }
  $1603($4_1 + 52 | 0 | 0) | 0;
  $976($4_1 + 36 | 0 | 0) | 0;
  $1604($4_1 + 16 | 0 | 0) | 0;
  $112($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  $34_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
  global$0 = $3_1 + 48 | 0;
  return $34_1 | 0;
 }
 
 function $1603($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 13024 + 8 | 0;
  $1605($4_1 | 0);
  $1606($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1604($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 12760 + 8 | 0;
  $1607($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1605($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1628($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1606($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1629(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1607($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 12864 + 8 | 0;
  $1617($4_1 | 0);
  $1618($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1608($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[346 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1609($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[$6_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$1
   }
   fimport$0(1449 | 0, 3119 | 0, 108 | 0, 1515 | 0);
   wasm2js_trap();
  }
  $1582($7_1 + 16 | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0);
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $1610($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $11_1 = $1596((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $1611($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0;
 }
 
 function $1612($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  $1598($0_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1613($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = $1292(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0;
  $1612($5_1 + 16 | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
  label$1 : {
   label$2 : while (1) {
    if (!(($1302($5_1 + 16 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $1303($5_1 + 16 | 0 | 0) | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($82(HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    label$3 : {
     if (!(($1637(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) == (HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[$5_1 >> 2] = $1610($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
     label$4 : {
      if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$4
      }
      $1632(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     }
    }
    continue label$2;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $1614($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0 | 0;
 }
 
 function $1615($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 52 | 0 | 0;
 }
 
 function $1616($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1604($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1617($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1619($4_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 4 | 0) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1618($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1620(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 206 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1619($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0 | 0]($5_1) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1620($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1621($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1607($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1622($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  $113($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 12948 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $1623($5_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[$4_1 >> 2] = 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4_1 >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$2
     }
     $1595($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + Math_imul(HEAP32[$4_1 >> 2] | 0, 20) | 0 | 0, (HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + Math_imul(HEAP32[$4_1 >> 2] | 0, 20) | 0 | 0);
     HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
  }
  $45_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $45_1 | 0;
 }
 
 function $1623($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5602 | 0, 4142 | 0, 195 | 0, 4679 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $1624(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 197 | 0) | 0;
  label$2 : {
   if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$2
   }
   fimport$0(1829 | 0, 4142 | 0, 199 | 0, 4679 | 0);
   wasm2js_trap();
  }
  $31_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $31_1 | 0;
 }
 
 function $1624($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $14_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  $14_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($6_1, Math_imul(HEAP32[($5_1 + 12 | 0) >> 2] | 0, 20), HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $1625($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1585($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1626($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1627($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1603($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1628($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1629($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1630($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $5_1 = 0, $29_1 = Math_fround(0), $30_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $113($6_1 | 0) | 0;
  HEAP32[$6_1 >> 2] = 13092 + 8 | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $760(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $29_1 = Math_fround(1.0);
  $1043($6_1 + 16 | 0 | 0, Math_fround($29_1), Math_fround($29_1), Math_fround($29_1), Math_fround($29_1)) | 0;
  $30_1 = Math_fround(0 | 0);
  $1043($6_1 + 36 | 0 | 0, Math_fround($30_1), Math_fround($30_1), Math_fround($30_1), Math_fround($30_1)) | 0;
  HEAP8[($6_1 + 56 | 0) >> 0] = ($1647(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  HEAPF32[($6_1 + 64 | 0) >> 2] = Math_fround(0 | 0);
  $502($6_1 + 68 | 0 | 0) | 0;
  $1631($6_1 | 0);
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1631($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $812($4_1 + 16 | 0 | 0, $1645(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1649(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(($131(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 60 | 0) >> 2] = 0;
    $1632($4_1 | 0, $1287(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $1642(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
    break label$1;
   }
   $1632($4_1 | 0, 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1632($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAPF32[($5_1 + 64 | 0) >> 2] = Math_fround($1295(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0));
   $508($5_1 + 68 | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1633($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1634($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $1635($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0;
 }
 
 function $1636($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0 | 0;
 }
 
 function $1637($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0;
 }
 
 function $1638($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 68 | 0 | 0;
 }
 
 function $1639($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 13092 + 8 | 0;
  $504($4_1 + 68 | 0 | 0) | 0;
  $815($4_1 + 36 | 0 | 0) | 0;
  $815($4_1 + 16 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1640($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1639($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1641($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $7_1 = 0, $6_1 = 0, $52_1 = Math_fround(0), $53_1 = Math_fround(0), $49_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  $113($7_1 | 0) | 0;
  HEAP32[$7_1 >> 2] = 13136 + 8 | 0;
  HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  $124($7_1 + 8 | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $52_1 = Math_fround(1.0);
  $1043($7_1 + 24 | 0 | 0, Math_fround($52_1), Math_fround($52_1), Math_fround($52_1), Math_fround($52_1)) | 0;
  $53_1 = Math_fround(0 | 0);
  $1043($7_1 + 44 | 0 | 0, Math_fround($53_1), Math_fround($53_1), Math_fround($53_1), Math_fround($53_1)) | 0;
  HEAP8[($7_1 + 64 | 0) >> 0] = 0;
  $674($7_1 + 68 | 0 | 0) | 0;
  HEAP32[($7_1 + 80 | 0) >> 2] = 0;
  label$1 : {
   if ((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0) {
    break label$1
   }
   fimport$0(5677 | 0, 3487 | 0, 48 | 0, 5329 | 0);
   wasm2js_trap();
  }
  label$2 : {
   if (($131($7_1 + 8 | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    break label$2
   }
   fimport$0(5608 | 0, 3487 | 0, 49 | 0, 5329 | 0);
   wasm2js_trap();
  }
  $49_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $49_1 | 0;
 }
 
 function $1642($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1643($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0;
 }
 
 function $1644($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0;
 }
 
 function $1645($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0 | 0;
 }
 
 function $1646($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 44 | 0 | 0;
 }
 
 function $1647($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 64 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $1648($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  HEAP8[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 64 | 0) >> 0] = (HEAPU8[($4_1 + 11 | 0) >> 0] | 0) & 1 | 0;
  return;
 }
 
 function $1649($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 68 | 0 | 0;
 }
 
 function $1650($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $652((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 68 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1651($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0 | 0;
 }
 
 function $1652($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 13136 + 8 | 0;
  $112($4_1 + 68 | 0 | 0) | 0;
  $815($4_1 + 44 | 0 | 0) | 0;
  $815($4_1 + 24 | 0 | 0) | 0;
  $112($4_1 + 8 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1653($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1652($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1654($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $931() | 0;
  $10_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($4_1, HEAP32[($3_1 + 12 | 0) >> 2] | 0, 2552, 40) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $1655($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  $12_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $12_1 | 0;
 }
 
 function $1656($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $1657($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = $931() | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $1658($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $1657(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 2552 | 0, 62 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1659($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $1660($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[360 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1661() {
  $1159(26544 | 0, 5054 | 0) | 0;
  $1797(362 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1662($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26544 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1663($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26544 | 0;
 }
 
 function $1664($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 13232 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1665($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1666($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  wasm2js_trap();
 }
 
 function $1667() {
  $1661();
  return;
 }
 
 function $1668() {
  $1160(26556 | 0, 1394 | 0, 26604 | 0) | 0;
  $1797(366 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1669($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26556 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1670($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26556 | 0;
 }
 
 function $1671($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $55_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $6_1;
  $1757($6_1 | 0) | 0;
  HEAP32[$6_1 >> 2] = 13292 + 8 | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  $753($6_1 + 8 | 0 | 0) | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1281(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $777($1688(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0;
  HEAPF32[($6_1 + 28 | 0) >> 2] = Math_fround($1689(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0));
  HEAPF32[($6_1 + 32 | 0) >> 2] = Math_fround($1690(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0));
  HEAPF32[($6_1 + 36 | 0) >> 2] = Math_fround($1691(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0));
  HEAPF32[($6_1 + 40 | 0) >> 2] = Math_fround($1692(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0));
  HEAP8[($6_1 + 44 | 0) >> 0] = 0;
  $951($6_1 + 8 | 0 | 0, $950($1687(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < ($950($1687(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($952($1687(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $1281(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $777(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
    $953($6_1 + 8 | 0 | 0, $5_1 + 4 | 0 | 0);
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $55_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $55_1 | 0;
 }
 
 function $1672($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($1694(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if (!(($1693(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
       break label$4
      }
      $1673($4_1 | 0);
      break label$3;
     }
     $1674($4_1 | 0);
    }
    break label$1;
   }
   label$5 : {
    label$6 : {
     if (!(($1693(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
      break label$6
     }
     $1675($4_1 | 0);
     break label$5;
    }
    $1676($4_1 | 0);
   }
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1673($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
  HEAPF32[($3_1 + 56 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
  HEAPF32[($3_1 + 52 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
  HEAPF32[($3_1 + 48 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
  HEAPF32[($3_1 + 44 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
  HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAPU8[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 88 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $769(HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($3_1 + 36 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($3_1 + 36 | 0) >> 2] | 0) >>> 0 < ($956($4_1 + 8 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 32 | 0) >> 2] = HEAP32[($139($4_1 + 8 | 0 | 0, HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
    label$4 : {
     if ((HEAPU8[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 88 | 0) >> 0] | 0) & 1 | 0) {
      break label$4
     }
     $769(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0);
    }
    HEAPF32[($3_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 68 | 0) >> 2]);
    label$5 : {
     if (!(Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAPF32[($3_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 68 | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 60 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]));
    }
    HEAPF32[($3_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2]);
    HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 64 | 0) >> 2]);
    label$6 : {
     if (!(Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAPF32[($3_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 60 | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 64 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]));
     HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 64 | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 68 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]));
    }
    HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 72 | 0) >> 2]);
    HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 76 | 0) >> 2]);
    label$7 : {
     if (!(Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0)) {
      break label$7
     }
     label$8 : {
      if (!(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) > Math_fround(9.999999747378752e-06) & 1 | 0)) {
       break label$8
      }
      HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 72 | 0) >> 2]) - Math_fround(1.0)) + Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 72 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2])) + Math_fround(1.0)));
     }
     label$9 : {
      if (!(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) > Math_fround(9.999999747378752e-06) & 1 | 0)) {
       break label$9
      }
      HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 76 | 0) >> 2]) - Math_fround(1.0)) + Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 76 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2])) + Math_fround(1.0)));
     }
    }
    HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 84 | 0) >> 2]);
    label$10 : {
     if (!(Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0)) {
      break label$10
     }
     HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 84 | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 80 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]));
    }
    $756(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 80 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2])));
    HEAP32[($3_1 + 36 | 0) >> 2] = (HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  global$0 = $3_1 + 64 | 0;
  return;
 }
 
 function $1674($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $203_1 = 0.0, $42_1 = 0, $208_1 = 0.0, $85_1 = 0, $92_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 76 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
  HEAPF32[($3_1 + 72 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
  HEAPF32[($3_1 + 68 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
  HEAPF32[($3_1 + 64 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
  HEAPF32[($3_1 + 60 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
  HEAP32[($3_1 + 56 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAPU8[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 88 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $769(HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($3_1 + 52 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($3_1 + 52 | 0) >> 2] | 0) >>> 0 < ($956($4_1 + 8 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 48 | 0) >> 2] = HEAP32[($139($4_1 + 8 | 0 | 0, HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($3_1 + 44 | 0) >> 2] = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
    label$4 : {
     if ((HEAPU8[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 88 | 0) >> 0] | 0) & 1 | 0) {
      break label$4
     }
     $769(HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0);
    }
    HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 68 | 0) >> 2]);
    label$5 : {
     if (!(Math_fround(HEAPF32[($3_1 + 72 | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAPF32[($3_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 68 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 60 | 0) >> 2]));
     $203_1 = 16384.499999999996 - +Math_fround(Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]) / Math_fround(360.0));
     label$6 : {
      label$7 : {
       if (!(Math_abs($203_1) < 2147483648.0)) {
        break label$7
       }
       $42_1 = ~~$203_1;
       break label$6;
      }
      $42_1 = -2147483648;
     }
     HEAPF32[($3_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]) - Math_fround(Math_imul(16384 - $42_1 | 0, 360) | 0));
     HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 72 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]));
    }
    HEAPF32[($3_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 60 | 0) >> 2]);
    HEAPF32[($3_1 + 28 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 64 | 0) >> 2]);
    label$8 : {
     if (!(Math_fround(HEAPF32[($3_1 + 68 | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0)) {
      break label$8
     }
     HEAPF32[($3_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 60 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 64 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 68 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]));
     HEAPF32[($3_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 64 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 68 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 68 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]));
    }
    HEAPF32[($3_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 72 | 0) >> 2]);
    HEAPF32[($3_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 76 | 0) >> 2]);
    label$9 : {
     if (!(Math_fround(HEAPF32[($3_1 + 64 | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0)) {
      break label$9
     }
     label$10 : {
      if (!(Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) > Math_fround(9.999999747378752e-06) & 1 | 0)) {
       break label$10
      }
      HEAPF32[($3_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 72 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 72 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 64 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2])) / Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]));
     }
     label$11 : {
      if (!(Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]) > Math_fround(9.999999747378752e-06) & 1 | 0)) {
       break label$11
      }
      HEAPF32[($3_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 76 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 76 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 64 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2])) / Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]));
     }
    }
    HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 84 | 0) >> 2]);
    label$12 : {
     if (!(Math_fround(HEAPF32[($3_1 + 60 | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0)) {
      break label$12
     }
     HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 84 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 80 | 0) >> 2]));
     $208_1 = 16384.499999999996 - +Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) / Math_fround(360.0));
     label$13 : {
      label$14 : {
       if (!(Math_abs($208_1) < 2147483648.0)) {
        break label$14
       }
       $85_1 = ~~$208_1;
       break label$13;
      }
      $85_1 = -2147483648;
     }
     HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) - Math_fround(Math_imul(16384 - $85_1 | 0, 360) | 0));
     $92_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     HEAPF32[($92_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 60 | 0) >> 2])) + Math_fround(HEAPF32[($92_1 + 56 | 0) >> 2]));
    }
    $756(HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 80 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2])));
    HEAP32[($3_1 + 52 | 0) >> 2] = (HEAP32[($3_1 + 52 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  global$0 = $3_1 + 80 | 0;
  return;
 }
 
 function $1675($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $133_1 = Math_fround(0), $71_1 = 0, $72_1 = 0, $79_1 = 0, $80_1 = 0, $82_1 = 0, $83_1 = 0, $286_1 = Math_fround(0), $306_1 = Math_fround(0), $310_1 = Math_fround(0);
  $3_1 = global$0 - 128 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 124 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
  HEAPF32[($3_1 + 120 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
  HEAPF32[($3_1 + 116 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
  HEAPF32[($3_1 + 112 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
  HEAPF32[($3_1 + 108 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
  HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAPF32[($3_1 + 100 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 92 | 0) >> 2]);
  HEAPF32[($3_1 + 96 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 96 | 0) >> 2]);
  HEAPF32[($3_1 + 92 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 104 | 0) >> 2]);
  HEAPF32[($3_1 + 88 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 108 | 0) >> 2]);
  label$1 : {
   label$2 : {
    if (!(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 100 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($3_1 + 96 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 92 | 0) >> 2])))) > Math_fround(0 | 0) & 1 | 0)) {
     break label$2
    }
    $133_1 = Math_fround(HEAPF32[(0 + 10188 | 0) >> 2]);
    break label$1;
   }
   $133_1 = Math_fround(-Math_fround(HEAPF32[(0 + 10188 | 0) >> 2]));
  }
  HEAPF32[($3_1 + 84 | 0) >> 2] = $133_1;
  HEAPF32[($3_1 + 80 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 60 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 84 | 0) >> 2]));
  HEAPF32[($3_1 + 76 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 80 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 84 | 0) >> 2]));
  HEAP32[($3_1 + 72 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($3_1 + 72 | 0) >> 2] | 0) >>> 0 < ($956($4_1 + 8 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[($139($4_1 + 8 | 0 | 0, HEAP32[($3_1 + 72 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($3_1 + 64 | 0) >> 2] = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
    HEAP8[($3_1 + 63 | 0) >> 0] = 0;
    label$5 : {
     if (!(Math_fround(HEAPF32[($3_1 + 120 | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAPF32[($3_1 + 56 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 92 | 0) >> 2]);
     HEAPF32[($3_1 + 52 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 96 | 0) >> 2]);
     HEAPF32[($3_1 + 48 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 104 | 0) >> 2]);
     HEAPF32[($3_1 + 44 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 108 | 0) >> 2]);
     HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(Math_fround($1019(Math_fround(Math_fround(HEAPF32[($3_1 + 92 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 100 | 0) >> 2])))) + Math_fround(HEAPF32[($3_1 + 80 | 0) >> 2]));
     label$6 : {
      label$7 : {
       if (!(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) > Math_fround(HEAPF32[(0 + 10180 | 0) >> 2]) & 1 | 0)) {
        break label$7
       }
       HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) - Math_fround(HEAPF32[(0 + 10184 | 0) >> 2]));
       break label$6;
      }
      label$8 : {
       if (!(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) < Math_fround(-Math_fround(HEAPF32[(0 + 10180 | 0) >> 2])) & 1 | 0)) {
        break label$8
       }
       HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) + Math_fround(HEAPF32[(0 + 10184 | 0) >> 2]));
      }
     }
     HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 120 | 0) >> 2]));
     HEAPF32[($3_1 + 36 | 0) >> 2] = Math_fround($1021(Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]))));
     HEAPF32[($3_1 + 32 | 0) >> 2] = Math_fround($1023(Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]))));
     HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 92 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]))));
     HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 96 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]))));
     HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 104 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2])));
     HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 108 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2])));
     HEAP8[($3_1 + 63 | 0) >> 0] = 1;
    }
    label$9 : {
     if (!(Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0)) {
      break label$9
     }
     $758(HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 64 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 68 | 0) >> 2])), $3_1 + 28 | 0 | 0, $3_1 + 24 | 0 | 0);
     $71_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
     HEAPF32[($71_1 + 100 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2])) + Math_fround(HEAPF32[($71_1 + 100 | 0) >> 2]));
     $72_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
     HEAPF32[($72_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2])) + Math_fround(HEAPF32[($72_1 + 112 | 0) >> 2]));
     HEAP8[($3_1 + 63 | 0) >> 0] = 1;
    }
    label$10 : {
     if (!(Math_fround(HEAPF32[($3_1 + 112 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
      break label$10
     }
     HEAPF32[($3_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 100 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 100 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 92 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 92 | 0) >> 2])))))) - Math_fround(1.0)) + Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 72 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 112 | 0) >> 2])) + Math_fround(1.0));
     $79_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
     HEAPF32[($79_1 + 92 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($79_1 + 92 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]));
     $80_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
     HEAPF32[($80_1 + 104 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($80_1 + 104 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]));
     HEAPF32[($3_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 96 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 96 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2])))))) - Math_fround(1.0)) + Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 76 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 112 | 0) >> 2])) + Math_fround(1.0));
     $82_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
     HEAPF32[($82_1 + 96 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($82_1 + 96 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]));
     $83_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
     HEAPF32[($83_1 + 108 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($83_1 + 108 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]));
     HEAP8[($3_1 + 63 | 0) >> 0] = 1;
    }
    label$11 : {
     if (!(Math_fround(HEAPF32[($3_1 + 108 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
      break label$11
     }
     HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(Math_fround($1019(Math_fround(Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 96 | 0) >> 2])))) - Math_fround($1019(Math_fround(Math_fround(HEAPF32[($3_1 + 92 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 100 | 0) >> 2])))));
     label$12 : {
      label$13 : {
       if (!(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) > Math_fround(HEAPF32[(0 + 10180 | 0) >> 2]) & 1 | 0)) {
        break label$13
       }
       HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) - Math_fround(HEAPF32[(0 + 10184 | 0) >> 2]));
       break label$12;
      }
      label$14 : {
       if (!(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) < Math_fround(-Math_fround(HEAPF32[(0 + 10180 | 0) >> 2])) & 1 | 0)) {
        break label$14
       }
       HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) + Math_fround(HEAPF32[(0 + 10184 | 0) >> 2]));
      }
     }
     HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 96 | 0) >> 2]);
     HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 108 | 0) >> 2]);
     $286_1 = Math_fround($1019(Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
     HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) - Math_fround(Math_fround(HEAPF32[(0 + 10180 | 0) >> 2]) / Math_fround(2.0))) + Math_fround(HEAPF32[($3_1 + 76 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 108 | 0) >> 2])) + $286_1);
     HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]))))));
     $306_1 = Math_fround($1021(Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]))));
     HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 96 | 0) >> 2] = Math_fround($306_1 * Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]));
     $310_1 = Math_fround($1023(Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]))));
     HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 108 | 0) >> 2] = Math_fround($310_1 * Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]));
     HEAP8[($3_1 + 63 | 0) >> 0] = 1;
    }
    label$15 : {
     if (!((HEAPU8[($3_1 + 63 | 0) >> 0] | 0) & 1 | 0)) {
      break label$15
     }
     HEAP8[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 88 | 0) >> 0] = 0;
    }
    HEAP32[($3_1 + 72 | 0) >> 2] = (HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  global$0 = $3_1 + 128 | 0;
  return;
 }
 
 function $1676($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $150_1 = Math_fround(0), $72_1 = 0, $74_1 = 0, $88_1 = 0, $89_1 = 0, $98_1 = 0, $99_1 = 0, $253_1 = Math_fround(0), $287_1 = Math_fround(0), $358_1 = Math_fround(0), $362_1 = Math_fround(0);
  $3_1 = global$0 - 128 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 124 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
  HEAPF32[($3_1 + 120 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
  HEAPF32[($3_1 + 116 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
  HEAPF32[($3_1 + 112 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
  HEAPF32[($3_1 + 108 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
  HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAPF32[($3_1 + 100 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 92 | 0) >> 2]);
  HEAPF32[($3_1 + 96 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 96 | 0) >> 2]);
  HEAPF32[($3_1 + 92 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 104 | 0) >> 2]);
  HEAPF32[($3_1 + 88 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 108 | 0) >> 2]);
  label$1 : {
   label$2 : {
    if (!(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 100 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($3_1 + 96 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 92 | 0) >> 2])))) > Math_fround(0 | 0) & 1 | 0)) {
     break label$2
    }
    $150_1 = Math_fround(HEAPF32[(0 + 10188 | 0) >> 2]);
    break label$1;
   }
   $150_1 = Math_fround(-Math_fround(HEAPF32[(0 + 10188 | 0) >> 2]));
  }
  HEAPF32[($3_1 + 84 | 0) >> 2] = $150_1;
  HEAPF32[($3_1 + 80 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 60 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 84 | 0) >> 2]));
  HEAPF32[($3_1 + 76 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 80 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 84 | 0) >> 2]));
  HEAP32[($3_1 + 72 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($3_1 + 72 | 0) >> 2] | 0) >>> 0 < ($956($4_1 + 8 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[($139($4_1 + 8 | 0 | 0, HEAP32[($3_1 + 72 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($3_1 + 64 | 0) >> 2] = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
    HEAP8[($3_1 + 63 | 0) >> 0] = 0;
    label$5 : {
     if (!(Math_fround(HEAPF32[($3_1 + 120 | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAPF32[($3_1 + 56 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 92 | 0) >> 2]);
     HEAPF32[($3_1 + 52 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 96 | 0) >> 2]);
     HEAPF32[($3_1 + 48 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 104 | 0) >> 2]);
     HEAPF32[($3_1 + 44 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 108 | 0) >> 2]);
     HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($1019(Math_fround(Math_fround(HEAPF32[($3_1 + 92 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 100 | 0) >> 2])))) - Math_fround($1019(Math_fround(Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2]))))) + Math_fround(HEAPF32[($3_1 + 80 | 0) >> 2]));
     label$6 : {
      label$7 : {
       if (!(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) > Math_fround(HEAPF32[(0 + 10180 | 0) >> 2]) & 1 | 0)) {
        break label$7
       }
       HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) - Math_fround(HEAPF32[(0 + 10184 | 0) >> 2]));
       break label$6;
      }
      label$8 : {
       if (!(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) < Math_fround(-Math_fround(HEAPF32[(0 + 10180 | 0) >> 2])) & 1 | 0)) {
        break label$8
       }
       HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) + Math_fround(HEAPF32[(0 + 10184 | 0) >> 2]));
      }
     }
     HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 120 | 0) >> 2]));
     HEAPF32[($3_1 + 36 | 0) >> 2] = Math_fround($1021(Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]))));
     HEAPF32[($3_1 + 32 | 0) >> 2] = Math_fround($1023(Math_fround(Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]))));
     HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 92 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]))));
     HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 96 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]))));
     HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 104 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2])));
     HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 108 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2])));
     HEAP8[($3_1 + 63 | 0) >> 0] = 1;
    }
    label$9 : {
     if (!(Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0)) {
      break label$9
     }
     $758(HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 64 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 68 | 0) >> 2])), $3_1 + 28 | 0 | 0, $3_1 + 24 | 0 | 0);
     $72_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
     HEAPF32[($72_1 + 100 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 100 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2])) + Math_fround(HEAPF32[($72_1 + 100 | 0) >> 2]));
     $74_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
     HEAPF32[($74_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 112 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2])) + Math_fround(HEAPF32[($74_1 + 112 | 0) >> 2]));
     HEAP8[($3_1 + 63 | 0) >> 0] = 1;
    }
    label$10 : {
     if (!(Math_fround(HEAPF32[($3_1 + 112 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
      break label$10
     }
     HEAPF32[($3_1 + 20 | 0) >> 2] = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 92 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 92 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 104 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 104 | 0) >> 2]))))));
     label$11 : {
      if (!(Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]) > Math_fround(9.999999747378752e-06) & 1 | 0)) {
       break label$11
      }
      $253_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
      HEAPF32[($3_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 100 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 100 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 92 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 92 | 0) >> 2])))))) - Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 72 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 112 | 0) >> 2])) + $253_1) / Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]));
     }
     $88_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
     HEAPF32[($88_1 + 92 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($88_1 + 92 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]));
     $89_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
     HEAPF32[($89_1 + 104 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($89_1 + 104 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]));
     HEAPF32[($3_1 + 20 | 0) >> 2] = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 96 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 96 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 108 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 108 | 0) >> 2]))))));
     label$12 : {
      if (!(Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]) > Math_fround(9.999999747378752e-06) & 1 | 0)) {
       break label$12
      }
      $287_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
      HEAPF32[($3_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 96 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 96 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2])))))) - Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 76 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 112 | 0) >> 2])) + $287_1) / Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]));
     }
     $98_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
     HEAPF32[($98_1 + 96 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($98_1 + 96 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]));
     $99_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
     HEAPF32[($99_1 + 108 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($99_1 + 108 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]));
     HEAP8[($3_1 + 63 | 0) >> 0] = 1;
    }
    label$13 : {
     if (!(Math_fround(HEAPF32[($3_1 + 108 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
      break label$13
     }
     HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 96 | 0) >> 2]);
     HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 108 | 0) >> 2]);
     HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround($1019(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]))));
     HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround($1019(Math_fround(Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 96 | 0) >> 2])))) - Math_fround($1019(Math_fround(Math_fround(HEAPF32[($3_1 + 92 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 100 | 0) >> 2]))))) - Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) - Math_fround($1019(Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 104 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 92 | 0) >> 2]))))));
     label$14 : {
      label$15 : {
       if (!(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) > Math_fround(HEAPF32[(0 + 10180 | 0) >> 2]) & 1 | 0)) {
        break label$15
       }
       HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[(0 + 10184 | 0) >> 2]));
       break label$14;
      }
      label$16 : {
       if (!(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) < Math_fround(-Math_fround(HEAPF32[(0 + 10180 | 0) >> 2])) & 1 | 0)) {
        break label$16
       }
       HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[(0 + 10184 | 0) >> 2]));
      }
     }
     HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($3_1 + 76 | 0) >> 2])) * Math_fround(HEAPF32[($3_1 + 108 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]));
     HEAPF32[$3_1 >> 2] = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))))));
     $358_1 = Math_fround($1021(Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]))));
     HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 96 | 0) >> 2] = Math_fround($358_1 * Math_fround(HEAPF32[$3_1 >> 2]));
     $362_1 = Math_fround($1023(Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]))));
     HEAPF32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 108 | 0) >> 2] = Math_fround($362_1 * Math_fround(HEAPF32[$3_1 >> 2]));
     HEAP8[($3_1 + 63 | 0) >> 0] = 1;
    }
    label$17 : {
     if (!((HEAPU8[($3_1 + 63 | 0) >> 0] | 0) & 1 | 0)) {
      break label$17
     }
     HEAP8[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 88 | 0) >> 0] = 0;
    }
    HEAP32[($3_1 + 72 | 0) >> 2] = (HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  global$0 = $3_1 + 128 | 0;
  return;
 }
 
 function $1677($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $831(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1678($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1679($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0;
 }
 
 function $1680($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $1681($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $1682($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  HEAP8[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 0] = (HEAPU8[($4_1 + 11 | 0) >> 0] | 0) & 1 | 0;
  return;
 }
 
 function $1683($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 13292 + 8 | 0;
  $140($4_1 + 8 | 0 | 0) | 0;
  $1758($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1684($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1683($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1685() {
  $1668();
  return;
 }
 
 function $1686($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $827($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 13372 + 8 | 0;
  $967($5_1 + 24 | 0 | 0) | 0;
  HEAP32[($5_1 + 40 | 0) >> 2] = 0;
  HEAPF32[($5_1 + 44 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 48 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 52 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 56 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 60 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 64 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 68 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 72 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 76 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 80 | 0) >> 2] = Math_fround(0 | 0);
  HEAP8[($5_1 + 84 | 0) >> 0] = 0;
  HEAP8[($5_1 + 85 | 0) >> 0] = 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1687($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0 | 0;
 }
 
 function $1688($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0;
 }
 
 function $1689($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 2]));
 }
 
 function $1690($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2]));
 }
 
 function $1691($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 52 | 0) >> 2]));
 }
 
 function $1692($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 56 | 0) >> 2]));
 }
 
 function $1693($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 84 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $1694($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 85 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $1695($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 13372 + 8 | 0;
  $976($4_1 + 24 | 0 | 0) | 0;
  $828($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1696($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1695($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1697() {
  $1160(26568 | 0, 4795 | 0, 26308 | 0) | 0;
  $1797(376 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1698($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26568 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1699($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26568 | 0;
 }
 
 function $1700($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $838($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 13440 + 8 | 0;
  $502($5_1 + 20 | 0 | 0) | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = 0;
  $17_1 = Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 5);
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
  $573($5_1 + 20 | 0 | 0, $17_1 | 0, $4_1 + 4 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1701($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $19_1 = 0, $32_1 = 0, $49_1 = 0, $53_1 = 0, $57_1 = 0, $61_1 = 0, $183_1 = 0, $185_1 = 0, $187_1 = 0, $189_1 = 0;
  $10_1 = global$0 - 80 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 72 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 68 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 60 | 0) >> 2] = $4_1;
  HEAPF32[($10_1 + 56 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 52 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 48 | 0) >> 2] = $7_1;
  $11_1 = HEAP32[($10_1 + 76 | 0) >> 2] | 0;
  HEAP32[($10_1 + 44 | 0) >> 2] = HEAP32[($1239((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 72 | 0 | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($10_1 + 40 | 0) >> 2] = HEAP32[($10_1 + 44 | 0) >> 2] | 0;
  $19_1 = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($19_1) | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2]) < Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$3
    }
    $32_1 = HEAP32[($10_1 + 52 | 0) >> 2] | 0;
    label$4 : {
     switch ($32_1 | 0) {
     case 0:
      HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 28 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 44 | 0) >> 2]);
      HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 32 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 48 | 0) >> 2]);
      HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 36 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 52 | 0) >> 2]);
      HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 40 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 56 | 0) >> 2]);
      break label$1;
     case 1:
      $49_1 = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
      HEAPF32[($49_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 44 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 28 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[($49_1 + 28 | 0) >> 2]));
      $53_1 = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
      HEAPF32[($53_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 48 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 32 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[($53_1 + 32 | 0) >> 2]));
      $57_1 = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
      HEAPF32[($57_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 52 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 36 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[($57_1 + 36 | 0) >> 2]));
      $61_1 = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
      HEAPF32[($61_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 56 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 40 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[($61_1 + 40 | 0) >> 2]));
      break label$1;
     default:
      break label$4;
     };
    }
    break label$1;
   }
   label$7 : {
    label$8 : {
     if (!(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2]) >= Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) - 5 | 0 | 0) | 0) >> 2]) & 1 | 0)) {
      break label$8
     }
     HEAP32[($10_1 + 20 | 0) >> 2] = $488($11_1 + 20 | 0 | 0) | 0;
     HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + -4 | 0 | 0) | 0) >> 2]);
     HEAPF32[($10_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + -3 | 0 | 0) | 0) >> 2]);
     HEAPF32[($10_1 + 28 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + -2 | 0 | 0) | 0) >> 2]);
     HEAPF32[($10_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + -1 | 0 | 0) | 0) >> 2]);
     break label$7;
    }
    HEAP32[($10_1 + 16 | 0) >> 2] = $487($11_1 + 20 | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2])), 5 | 0) | 0;
    HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + -4 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + -3 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 28 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + -2 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + -1 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 8 | 0) >> 2] = Math_fround($843($11_1 | 0, ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) / (5 | 0) | 0) - 1 | 0 | 0, Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2])) / Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + -5 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2])))))));
    HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]));
    HEAPF32[($10_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]));
    HEAPF32[($10_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + 3 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]));
    HEAPF32[($10_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + 4 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]));
   }
   label$9 : {
    if (HEAP32[($10_1 + 52 | 0) >> 2] | 0) {
     break label$9
    }
    HEAP32[($10_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 44 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 44 | 0) >> 2]));
    HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 48 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 48 | 0) >> 2]));
    HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 52 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 52 | 0) >> 2]));
    HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2]));
    break label$1;
   }
   $183_1 = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
   HEAPF32[($183_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 28 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[($183_1 + 28 | 0) >> 2]));
   $185_1 = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
   HEAPF32[($185_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 32 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[($185_1 + 32 | 0) >> 2]));
   $187_1 = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
   HEAPF32[($187_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 36 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[($187_1 + 36 | 0) >> 2]));
   $189_1 = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
   HEAPF32[($189_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 40 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) + Math_fround(HEAPF32[($189_1 + 40 | 0) >> 2]));
  }
  global$0 = $10_1 + 80 | 0;
  return;
 }
 
 function $1702($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 167772160 | 0 | 0;
 }
 
 function $1703($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  $5_1 = Math_fround($5_1);
  $6_1 = Math_fround($6_1);
  var $9_1 = 0, $10_1 = 0, $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47_1 = Math_fround(0), $48_1 = Math_fround(0);
  $9_1 = global$0 - 32 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($9_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($9_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($9_1 + 12 | 0) >> 2] = $4_1;
  HEAPF32[($9_1 + 8 | 0) >> 2] = $5_1;
  HEAPF32[($9_1 + 4 | 0) >> 2] = $6_1;
  $10_1 = HEAP32[($9_1 + 28 | 0) >> 2] | 0;
  HEAP32[($9_1 + 24 | 0) >> 2] = Math_imul(HEAP32[($9_1 + 24 | 0) >> 2] | 0, 5);
  $44_1 = Math_fround(HEAPF32[($9_1 + 20 | 0) >> 2]);
  HEAPF32[($15($10_1 + 20 | 0 | 0, HEAP32[($9_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] = $44_1;
  $45_1 = Math_fround(HEAPF32[($9_1 + 16 | 0) >> 2]);
  HEAPF32[($15($10_1 + 20 | 0 | 0, (HEAP32[($9_1 + 24 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $45_1;
  $46_1 = Math_fround(HEAPF32[($9_1 + 12 | 0) >> 2]);
  HEAPF32[($15($10_1 + 20 | 0 | 0, (HEAP32[($9_1 + 24 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2] = $46_1;
  $47_1 = Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]);
  HEAPF32[($15($10_1 + 20 | 0 | 0, (HEAP32[($9_1 + 24 | 0) >> 2] | 0) + 3 | 0 | 0) | 0) >> 2] = $47_1;
  $48_1 = Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]);
  HEAPF32[($15($10_1 + 20 | 0 | 0, (HEAP32[($9_1 + 24 | 0) >> 2] | 0) + 4 | 0 | 0) | 0) >> 2] = $48_1;
  global$0 = $9_1 + 32 | 0;
  return;
 }
 
 function $1704($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 13440 + 8 | 0;
  $504($4_1 + 20 | 0 | 0) | 0;
  $839($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1705($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1704($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1706() {
  $1697();
  return;
 }
 
 function $1707() {
  $1160(26580 | 0, 5031 | 0, 26308 | 0) | 0;
  $1797(382 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1708($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26580 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1709($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26580 | 0;
 }
 
 function $1710($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $838($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 13544 + 8 | 0;
  $502($5_1 + 20 | 0 | 0) | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = 0;
  $729($5_1 + 20 | 0 | 0, Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 3) | 0);
  $22_1 = Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 3);
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
  $573($5_1 + 20 | 0 | 0, $22_1 | 0, $4_1 + 4 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1711($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 13544 + 8 | 0;
  $504($4_1 + 20 | 0 | 0) | 0;
  $839($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1712($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[383 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1713($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $30_1 = 0, $41_1 = 0, $45_1 = 0, $116_1 = 0, $127_1 = 0, $131_1 = 0, $132_1 = 0, $133_1 = 0;
  $10_1 = global$0 - 64 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 56 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 52 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 44 | 0) >> 2] = $4_1;
  HEAPF32[($10_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 32 | 0) >> 2] = $7_1;
  $11_1 = HEAP32[($10_1 + 60 | 0) >> 2] | 0;
  HEAP32[($10_1 + 28 | 0) >> 2] = HEAP32[($139((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($10_1 + 24 | 0) >> 2] = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAPU8[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 117 | 0) >> 0] | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) < Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$3
    }
    $30_1 = HEAP32[($10_1 + 36 | 0) >> 2] | 0;
    label$4 : {
     switch ($30_1 | 0) {
     case 0:
      HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 28 | 0) >> 2]);
      HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 32 | 0) >> 2]);
      break label$1;
     case 1:
      $41_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
      HEAPF32[($41_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 28 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($41_1 + 32 | 0) >> 2]));
      $45_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
      HEAPF32[($45_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 32 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($45_1 + 36 | 0) >> 2]));
      break;
     default:
      break label$4;
     };
    }
    break label$1;
   }
   label$7 : {
    label$8 : {
     if (!(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) >= Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) - 3 | 0 | 0) | 0) >> 2]) & 1 | 0)) {
      break label$8
     }
     HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + -2 | 0 | 0) | 0) >> 2]);
     HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) | 0) >> 2]);
     break label$7;
    }
    HEAP32[($10_1 + 12 | 0) >> 2] = $487($11_1 + 20 | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2])), 3 | 0) | 0;
    HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + -2 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + -1 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 4 | 0) >> 2] = Math_fround($843($11_1 | 0, ((HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) / (3 | 0) | 0) - 1 | 0 | 0, Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])) / Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + -3 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2])))))));
    HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]));
    HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]));
   }
   $116_1 = HEAP32[($10_1 + 36 | 0) >> 2] | 0;
   label$9 : {
    switch ($116_1 | 0) {
    case 0:
     HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 28 | 0) >> 2]));
     HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 32 | 0) >> 2]));
     break label$1;
    case 1:
    case 2:
     $127_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
     HEAPF32[($127_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 28 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($127_1 + 32 | 0) >> 2]));
     $131_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
     HEAPF32[($131_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 32 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2])) - Math_fround(HEAPF32[((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($131_1 + 36 | 0) >> 2]));
     break label$1;
    case 3:
     break label$9;
    default:
     break label$1;
    };
   }
   $132_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
   HEAPF32[($132_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($132_1 + 32 | 0) >> 2]));
   $133_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
   HEAPF32[($133_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) + Math_fround(HEAPF32[($133_1 + 36 | 0) >> 2]));
  }
  global$0 = $10_1 + 64 | 0;
  return;
 }
 
 function $1714($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 16777216 | 0 | 0;
 }
 
 function $1715($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  var $7_1 = 0, $8_1 = 0, $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0);
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  HEAP32[($7_1 + 24 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 24 | 0) >> 2] | 0, 3);
  $30_1 = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
  HEAPF32[($15($8_1 + 20 | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] = $30_1;
  $31_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
  HEAPF32[($15($8_1 + 20 | 0 | 0, (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $31_1;
  $32_1 = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
  HEAPF32[($15($8_1 + 20 | 0 | 0, (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2] = $32_1;
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $1716() {
  $1707();
  return;
 }
 
 function $1717($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 13612 + 8 | 0;
  $1438($4_1 + 4 | 0 | 0);
  $1442($4_1 + 20 | 0 | 0);
  $1441($4_1 + 104 | 0 | 0) | 0;
  $1437($4_1 + 84 | 0 | 0) | 0;
  $506($4_1 + 68 | 0 | 0) | 0;
  $1431($4_1 + 52 | 0 | 0) | 0;
  $506($4_1 + 36 | 0 | 0) | 0;
  $1425($4_1 + 20 | 0 | 0) | 0;
  $1419($4_1 + 4 | 0 | 0) | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1718($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[388 | 0]($4_1) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1719($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $256_1 = 0, $15_1 = 0, $16_1 = 0, $29_1 = 0, $40_1 = 0, $41_1 = 0, $59_1 = 0, $263_1 = 0, $273_1 = 0, $298_1 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 120 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
  HEAP32[($4_1 + 116 | 0) >> 2] = ($488(HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0) | 0) >>> 1 | 0;
  HEAP32[($4_1 + 112 | 0) >> 2] = $5_1 + 36 | 0;
  $512(HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0);
  $893(HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0);
  $15_1 = HEAP32[($4_1 + 112 | 0) >> 2] | 0;
  $16_1 = HEAP32[($4_1 + 116 | 0) >> 2] | 0;
  HEAP32[($4_1 + 108 | 0) >> 2] = 0;
  $595($15_1 | 0, $16_1 | 0, $4_1 + 108 | 0 | 0);
  HEAP32[($4_1 + 104 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 104 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 116 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $29_1 = HEAP32[($4_1 + 104 | 0) >> 2] | 0;
    HEAP32[($574(HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 104 | 0) >> 2] | 0 | 0) | 0) >> 2] = $29_1;
    HEAP32[($4_1 + 104 | 0) >> 2] = (HEAP32[($4_1 + 104 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 100 | 0) >> 2] = $5_1 + 52 | 0;
  $1720(HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0);
  $40_1 = HEAP32[($4_1 + 100 | 0) >> 2] | 0;
  $41_1 = HEAP32[($4_1 + 116 | 0) >> 2] | 0;
  HEAP8[($4_1 + 99 | 0) >> 0] = 0;
  $1721($40_1 | 0, $41_1 | 0, $4_1 + 99 | 0 | 0);
  HEAP32[($4_1 + 92 | 0) >> 2] = 0;
  HEAP32[($4_1 + 88 | 0) >> 2] = HEAP32[($4_1 + 116 | 0) >> 2] | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 92 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 88 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    $59_1 = $1722(HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0) | 0;
    HEAP8[($1723(HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 0] = $59_1 & 1 | 0;
    HEAP32[($4_1 + 92 | 0) >> 2] = (HEAP32[($4_1 + 92 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[($4_1 + 84 | 0) >> 2] = $5_1 + 68 | 0;
  $512(HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0);
  $893(HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0, ($1724(0 | 0, (HEAP32[($4_1 + 116 | 0) >> 2] | 0) - 2 | 0 | 0) | 0) << 2 | 0 | 0);
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($4_1 + 116 | 0) >> 2] | 0) >>> 0 > 3 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($4_1 + 80 | 0) >> 2] = (HEAP32[($4_1 + 116 | 0) >> 2] | 0) - 1 | 0;
    HEAP32[($4_1 + 76 | 0) >> 2] = 0;
    HEAP32[($4_1 + 72 | 0) >> 2] = 1;
    label$7 : {
     label$8 : while (1) {
      label$9 : {
       label$10 : {
        if ((HEAPU8[($1723(HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) | 0) >> 0] | 0) & 1 | 0) {
         break label$10
        }
        HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[($574(HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 80 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) << 1 | 0;
        HEAP32[($4_1 + 64 | 0) >> 2] = (HEAP32[($574(HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) << 1 | 0;
        HEAP32[($4_1 + 60 | 0) >> 2] = (HEAP32[($574(HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) << 1 | 0;
        HEAPF32[($4_1 + 56 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) | 0) >> 2]);
        HEAPF32[($4_1 + 52 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
        HEAPF32[($4_1 + 48 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) | 0) >> 2]);
        HEAPF32[($4_1 + 44 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
        HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) | 0) >> 2]);
        HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
        HEAP32[($4_1 + 32 | 0) >> 2] = (((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 1 | 0) >>> 0) % ((HEAP32[($4_1 + 116 | 0) >> 2] | 0) >>> 0) | 0;
        label$11 : {
         label$12 : while (1) {
          if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 80 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$11
          }
          label$13 : {
           label$14 : {
            if ((HEAPU8[($1723(HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) | 0) >> 0] | 0) & 1 | 0) {
             break label$14
            }
            break label$13;
           }
           HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($574(HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) << 1 | 0;
           HEAP32[($4_1 + 24 | 0) >> 2] = $15(HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
           HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
           label$15 : {
            if (!(($1725(Math_fround(Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]))) | 0) & 1 | 0)) {
             break label$15
            }
            label$16 : {
             if (!(($1725(Math_fround(Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]))) | 0) & 1 | 0)) {
              break label$16
             }
             label$17 : {
              if (!(($1725(Math_fround(Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]))) | 0) & 1 | 0)) {
               break label$17
              }
              break label$9;
             }
            }
           }
          }
          HEAP32[($4_1 + 32 | 0) >> 2] = (((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0) >>> 0) % ((HEAP32[($4_1 + 116 | 0) >> 2] | 0) >>> 0) | 0;
          continue label$12;
         };
        }
        break label$7;
       }
      }
      label$18 : {
       if (HEAP32[($4_1 + 72 | 0) >> 2] | 0) {
        break label$18
       }
       label$19 : {
        label$20 : while (1) {
         label$21 : {
          if ((HEAPU8[($1723(HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) | 0) >> 0] | 0) & 1 | 0) {
           break label$21
          }
          break label$19;
         }
         HEAP32[($4_1 + 76 | 0) >> 2] = (HEAP32[($4_1 + 76 | 0) >> 2] | 0) + -1 | 0;
         if ((HEAP32[($4_1 + 76 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
          continue label$20
         }
         break label$20;
        };
       }
       break label$7;
      }
      HEAP32[($4_1 + 80 | 0) >> 2] = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
      HEAP32[($4_1 + 76 | 0) >> 2] = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
      HEAP32[($4_1 + 72 | 0) >> 2] = (((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 1 | 0) >>> 0) % ((HEAP32[($4_1 + 116 | 0) >> 2] | 0) >>> 0) | 0;
      continue label$8;
     };
    }
    $894(HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0, $574(HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0, ((((HEAP32[($4_1 + 116 | 0) >> 2] | 0) + (HEAP32[($4_1 + 76 | 0) >> 2] | 0) | 0) - 1 | 0) >>> 0) % ((HEAP32[($4_1 + 116 | 0) >> 2] | 0) >>> 0) | 0 | 0) | 0 | 0);
    $894(HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0, $574(HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) | 0 | 0);
    $894(HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0, $574(HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0, (((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 1 | 0) >>> 0) % ((HEAP32[($4_1 + 116 | 0) >> 2] | 0) >>> 0) | 0 | 0) | 0 | 0);
    $1726(HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0);
    $1727(HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 116 | 0) >> 2] = (HEAP32[($4_1 + 116 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($4_1 + 16 | 0) >> 2] = ((((HEAP32[($4_1 + 116 | 0) >> 2] | 0) + (HEAP32[($4_1 + 76 | 0) >> 2] | 0) | 0) - 1 | 0) >>> 0) % ((HEAP32[($4_1 + 116 | 0) >> 2] | 0) >>> 0) | 0;
    label$22 : {
     label$23 : {
      if (!((HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$23
      }
      $256_1 = 0;
      break label$22;
     }
     $256_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $256_1;
    $263_1 = $1722(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0) | 0;
    HEAP8[($1723(HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 0] = $263_1 & 1 | 0;
    $273_1 = $1722(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0) | 0;
    HEAP8[($1723(HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 0] = $273_1 & 1 | 0;
    continue label$6;
   };
  }
  label$24 : {
   if (!((HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
    break label$24
   }
   $894(HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0, $574(HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0, 2 | 0) | 0 | 0);
   $894(HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0, $574(HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0, 0 | 0) | 0 | 0);
   $894(HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0, $574(HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0, 1 | 0) | 0 | 0);
  }
  $298_1 = HEAP32[($4_1 + 84 | 0) >> 2] | 0;
  global$0 = $4_1 + 128 | 0;
  return $298_1 | 0;
 }
 
 function $1720($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $1728(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 94 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1721($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $73_1 = Math_fround(0), $31_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 >= 0 >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(5689 | 0, 4142 | 0, 76 | 0, 4598 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$2 : {
   if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$2
   }
   $73_1 = Math_fround(Math_fround((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
   label$3 : {
    label$4 : {
     if (!(Math_fround(Math_abs($73_1)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $31_1 = ~~$73_1;
     break label$3;
    }
    $31_1 = -2147483648;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $31_1;
   label$5 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = 8;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $1728(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 82 | 0) | 0;
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$6
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$7
     }
     $1729($6_1 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $1722($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $63_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($574(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, (((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + (HEAP32[($6_1 + 28 | 0) >> 2] | 0) | 0) - 1 | 0 | 0) % (HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >> 2] | 0) << 1 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[($574(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) << 1 | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[($574(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 1 | 0 | 0) % (HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >> 2] | 0) << 1 | 0;
  $63_1 = (($1725(Math_fround(Math_fround(HEAPF32[($15(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 4 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]))) | 0) ^ -1 | 0) & 1 | 0;
  global$0 = $6_1 + 32 | 0;
  return $63_1 | 0;
 }
 
 function $1723($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $19_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 162 | 0, 5372 | 0);
   wasm2js_trap();
  }
  $19_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $19_1 | 0;
 }
 
 function $1724($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) > (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $13_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    break label$1;
   }
   $13_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  return $13_1 | 0;
 }
 
 function $1725($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  $5_1 = Math_fround($5_1);
  var $8_1 = 0;
  $8_1 = global$0 - 32 | 0;
  HEAPF32[($8_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($8_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($8_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($8_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($8_1 + 12 | 0) >> 2] = $4_1;
  HEAPF32[($8_1 + 8 | 0) >> 2] = $5_1;
  return Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]) * Math_fround(Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]))) + Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 28 | 0) >> 2]) * Math_fround(Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]))) + Math_fround(Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]) * Math_fround(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]))))) >= Math_fround(0 | 0) & 1 | 0 | 0;
 }
 
 function $1726($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $521($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1727($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
    break label$1
   }
   fimport$0(4582 | 0, 4142 | 0, 126 | 0, 1666 | 0);
   wasm2js_trap();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP8[($4_1 + 3 | 0) >> 0] = (HEAPU8[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0) & 1 | 0;
     HEAP8[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0) >> 0] = (HEAPU8[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) | 0) >> 0] | 0) & 1 | 0;
     HEAP8[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) | 0) >> 0] = (HEAPU8[($4_1 + 3 | 0) >> 0] | 0) & 1 | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
  }
  $1435($5_1 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1728($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1729($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP8[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 0] | 0) & 1 | 0;
  return;
 }
 
 function $1730($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $488_1 = 0;
  $5_1 = global$0 - 240 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 236 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 232 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 228 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 236 | 0) >> 2] | 0;
  HEAP32[($5_1 + 224 | 0) >> 2] = $6_1 + 4 | 0;
  HEAP32[($5_1 + 220 | 0) >> 2] = 0;
  HEAP32[($5_1 + 216 | 0) >> 2] = $1412(HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 220 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 216 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $1731($6_1 + 84 | 0 | 0, HEAP32[($1413(HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 220 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0);
    HEAP32[($5_1 + 220 | 0) >> 2] = (HEAP32[($5_1 + 220 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $1420(HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 212 | 0) >> 2] = $6_1 + 20 | 0;
  HEAP32[($5_1 + 208 | 0) >> 2] = 0;
  HEAP32[($5_1 + 204 | 0) >> 2] = $1444(HEAP32[($5_1 + 212 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($5_1 + 208 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 204 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    $1732($6_1 + 104 | 0 | 0, HEAP32[($1445(HEAP32[($5_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 208 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0);
    HEAP32[($5_1 + 208 | 0) >> 2] = (HEAP32[($5_1 + 208 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $1426(HEAP32[($5_1 + 212 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 200 | 0) >> 2] = $1733($6_1 + 104 | 0 | 0) | 0;
  $512(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 196 | 0) >> 2] = $1734($6_1 + 84 | 0 | 0) | 0;
  $508(HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 192 | 0) >> 2] = -1;
  HEAP32[($5_1 + 188 | 0) >> 2] = 0;
  HEAP32[($5_1 + 184 | 0) >> 2] = 0;
  HEAP32[($5_1 + 180 | 0) >> 2] = $888(HEAP32[($5_1 + 228 | 0) >> 2] | 0 | 0) | 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($5_1 + 184 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 180 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($5_1 + 176 | 0) >> 2] = (HEAP32[($574(HEAP32[($5_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 184 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) << 1 | 0;
    HEAP32[($5_1 + 172 | 0) >> 2] = (HEAP32[($574(HEAP32[($5_1 + 228 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] | 0) << 1 | 0;
    HEAP32[($5_1 + 168 | 0) >> 2] = (HEAP32[($574(HEAP32[($5_1 + 228 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2] | 0) << 1 | 0;
    HEAPF32[($5_1 + 164 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 176 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($5_1 + 160 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 176 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
    HEAPF32[($5_1 + 156 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($5_1 + 152 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
    HEAPF32[($5_1 + 148 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($5_1 + 144 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 168 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
    HEAP8[($5_1 + 143 | 0) >> 0] = 0;
    label$7 : {
     if (!((HEAP32[($5_1 + 192 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[($5_1 + 136 | 0) >> 2] = ($488(HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0) | 0) - 4 | 0;
     HEAP32[($5_1 + 132 | 0) >> 2] = HEAP32[($5_1 + 196 | 0) >> 2] | 0;
     HEAP32[($5_1 + 128 | 0) >> 2] = $1735(Math_fround(Math_fround(HEAPF32[($15(HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15(HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15(HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15(HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 3 | 0 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 148 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 144 | 0) >> 2]))) | 0;
     HEAP32[($5_1 + 124 | 0) >> 2] = $1735(Math_fround(Math_fround(HEAPF32[($5_1 + 148 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 144 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15(HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0, 0 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15(HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0, 1 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15(HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0, 2 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($15(HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0, 3 | 0) | 0) >> 2]))) | 0;
     label$8 : {
      if (!((HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 188 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$8
      }
      if (!((HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 188 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$8
      }
      $862(HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0, $5_1 + 148 | 0 | 0);
      $862(HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0, $5_1 + 144 | 0 | 0);
      $894(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0, $5_1 + 168 | 0 | 0);
      HEAP8[($5_1 + 143 | 0) >> 0] = 1;
     }
    }
    label$9 : {
     if ((HEAPU8[($5_1 + 143 | 0) >> 0] | 0) & 1 | 0) {
      break label$9
     }
     label$10 : {
      label$11 : {
       if (!(($488(HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
        break label$11
       }
       $1736(HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0, $5_1 + 196 | 0 | 0);
       $1737(HEAP32[($5_1 + 212 | 0) >> 2] | 0 | 0, $5_1 + 200 | 0 | 0);
       break label$10;
      }
      $1731($6_1 + 84 | 0 | 0, HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0);
      $1732($6_1 + 104 | 0 | 0, HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($5_1 + 196 | 0) >> 2] = $1734($6_1 + 84 | 0 | 0) | 0;
     $508(HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0);
     $862(HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0, $5_1 + 164 | 0 | 0);
     $862(HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0, $5_1 + 160 | 0 | 0);
     $862(HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0, $5_1 + 156 | 0 | 0);
     $862(HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0, $5_1 + 152 | 0 | 0);
     $862(HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0, $5_1 + 148 | 0 | 0);
     $862(HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0, $5_1 + 144 | 0 | 0);
     HEAP32[($5_1 + 200 | 0) >> 2] = $1733($6_1 + 104 | 0 | 0) | 0;
     $512(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0);
     $894(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0, $5_1 + 176 | 0 | 0);
     $894(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0, $5_1 + 172 | 0 | 0);
     $894(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0, $5_1 + 168 | 0 | 0);
     HEAP32[($5_1 + 188 | 0) >> 2] = $1735(Math_fround(Math_fround(HEAPF32[($5_1 + 164 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 160 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 156 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 152 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 148 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 144 | 0) >> 2]))) | 0;
     HEAP32[($5_1 + 192 | 0) >> 2] = HEAP32[($5_1 + 176 | 0) >> 2] | 0;
    }
    HEAP32[($5_1 + 184 | 0) >> 2] = (HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 3 | 0;
    continue label$6;
   };
  }
  label$12 : {
   if (!(($488(HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$12
   }
   $1736(HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0, $5_1 + 196 | 0 | 0);
   $1737(HEAP32[($5_1 + 212 | 0) >> 2] | 0 | 0, $5_1 + 200 | 0 | 0);
  }
  HEAP32[($5_1 + 120 | 0) >> 2] = 0;
  HEAP32[($5_1 + 116 | 0) >> 2] = $1412(HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0) | 0;
  label$13 : {
   label$14 : while (1) {
    if (!((HEAP32[($5_1 + 120 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 116 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$13
    }
    HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($1445(HEAP32[($5_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 120 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    label$15 : {
     label$16 : {
      if ($888(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0) | 0) {
       break label$16
      }
      break label$15;
     }
     HEAP32[($5_1 + 112 | 0) >> 2] = HEAP32[($574(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0) | 0) >> 2] | 0;
     HEAP32[($5_1 + 108 | 0) >> 2] = HEAP32[($574(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0, ($888(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0) | 0) >> 2] | 0;
     HEAP32[($5_1 + 196 | 0) >> 2] = HEAP32[($1413(HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 120 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     HEAP32[($5_1 + 104 | 0) >> 2] = ($488(HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0) | 0) - 4 | 0;
     HEAP32[($5_1 + 100 | 0) >> 2] = HEAP32[($5_1 + 196 | 0) >> 2] | 0;
     HEAPF32[($5_1 + 96 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0) | 0) >> 2]);
     HEAPF32[($5_1 + 92 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 104 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
     HEAPF32[($5_1 + 88 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 104 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2]);
     HEAPF32[($5_1 + 84 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 104 | 0) >> 2] | 0) + 3 | 0 | 0) | 0) >> 2]);
     HEAPF32[($5_1 + 80 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, 0 | 0) | 0) >> 2]);
     HEAPF32[($5_1 + 76 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, 1 | 0) | 0) >> 2]);
     HEAPF32[($5_1 + 72 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, 2 | 0) | 0) >> 2]);
     HEAPF32[($5_1 + 68 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0, 3 | 0) | 0) >> 2]);
     HEAP32[($5_1 + 64 | 0) >> 2] = $1735(Math_fround(Math_fround(HEAPF32[($5_1 + 96 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 92 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 88 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 84 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 80 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 76 | 0) >> 2]))) | 0;
     HEAP32[($5_1 + 60 | 0) >> 2] = 0;
     label$17 : {
      label$18 : while (1) {
       if (!((HEAP32[($5_1 + 60 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 116 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$17
       }
       label$19 : {
        label$20 : {
         if (!((HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$20
         }
         break label$19;
        }
        HEAP32[($5_1 + 56 | 0) >> 2] = HEAP32[($1445(HEAP32[($5_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
        HEAP32[($5_1 + 52 | 0) >> 2] = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
        label$21 : {
         if (!(($888(HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) | 0 | 0) != (3 | 0) & 1 | 0)) {
          break label$21
         }
         break label$19;
        }
        HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[($574(HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0, 0 | 0) | 0) >> 2] | 0;
        HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($574(HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0, 1 | 0) | 0) >> 2] | 0;
        HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[($574(HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0, 2 | 0) | 0) >> 2] | 0;
        HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[($1413(HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
        HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
        HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0, ($488(HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) | 0) - 2 | 0 | 0) | 0) >> 2]);
        HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0, ($488(HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0) | 0) >> 2]);
        label$22 : {
         label$23 : {
          if ((HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0) {
           break label$23
          }
          if (!((HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$22
          }
         }
         break label$19;
        }
        HEAP32[($5_1 + 20 | 0) >> 2] = $1735(Math_fround(Math_fround(HEAPF32[($5_1 + 96 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 92 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 88 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 84 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]))) | 0;
        HEAP32[($5_1 + 16 | 0) >> 2] = $1735(Math_fround(Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 80 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 76 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 72 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 68 | 0) >> 2]))) | 0;
        label$24 : {
         if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$24
         }
         if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$24
         }
         $508(HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
         $512(HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0);
         $862(HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0, $5_1 + 28 | 0 | 0);
         $862(HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0, $5_1 + 24 | 0 | 0);
         $894(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0, $5_1 + 40 | 0 | 0);
         HEAPF32[($5_1 + 96 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 88 | 0) >> 2]);
         HEAPF32[($5_1 + 92 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 84 | 0) >> 2]);
         HEAPF32[($5_1 + 88 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]);
         HEAPF32[($5_1 + 84 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
         HEAP32[($5_1 + 60 | 0) >> 2] = 0;
        }
       }
       HEAP32[($5_1 + 60 | 0) >> 2] = (HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 1 | 0;
       continue label$18;
      };
     }
    }
    HEAP32[($5_1 + 120 | 0) >> 2] = (HEAP32[($5_1 + 120 | 0) >> 2] | 0) + 1 | 0;
    continue label$14;
   };
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = ($1412(HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0) | 0) - 1 | 0;
  label$25 : {
   label$26 : while (1) {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$25
    }
    HEAP32[($5_1 + 196 | 0) >> 2] = HEAP32[($1413(HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    label$27 : {
     if ($488(HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0) | 0) {
      break label$27
     }
     $1440(HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
     $1731($6_1 + 84 | 0 | 0, HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($1445(HEAP32[($5_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     $1446(HEAP32[($5_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
     $1732($6_1 + 104 | 0 | 0, HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + -1 | 0;
    continue label$26;
   };
  }
  $488_1 = HEAP32[($5_1 + 224 | 0) >> 2] | 0;
  global$0 = $5_1 + 240 | 0;
  return $488_1 | 0;
 }
 
 function $1731($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($1738($5_1 + 4 | 0 | 0, $4_1 + 8 | 0 | 0) | 0) & 1 | 0) {
    break label$1
   }
   $1736($5_1 + 4 | 0 | 0, $4_1 + 8 | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1732($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($1739($5_1 + 4 | 0 | 0, $4_1 + 8 | 0 | 0) | 0) & 1 | 0) {
    break label$1
   }
   $1737($5_1 + 4 | 0 | 0, $4_1 + 8 | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1733($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $35_1 = 0, $37_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($1444($4_1 + 4 | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 20 | 0) >> 2] = $1445($4_1 + 4 | 0 | 0, ($1444($4_1 + 4 | 0 | 0) | 0) - 1 | 0 | 0) | 0;
    HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
    $1446($4_1 + 4 | 0 | 0, ($1444($4_1 + 4 | 0 | 0) | 0) - 1 | 0 | 0);
    HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
    break label$1;
   }
   $35_1 = $1655(16 | 0, 4301 | 0, 57 | 0) | 0;
   $500($35_1 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = $35_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  }
  $37_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $37_1 | 0;
 }
 
 function $1734($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $35_1 = 0, $37_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($1412($4_1 + 4 | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 20 | 0) >> 2] = $1413($4_1 + 4 | 0 | 0, ($1412($4_1 + 4 | 0 | 0) | 0) - 1 | 0 | 0) | 0;
    HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
    $1440($4_1 + 4 | 0 | 0, ($1412($4_1 + 4 | 0 | 0) | 0) - 1 | 0 | 0);
    HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
    break label$1;
   }
   $35_1 = $1655(16 | 0, 4301 | 0, 57 | 0) | 0;
   $502($35_1 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = $35_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  }
  $37_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $37_1 | 0;
 }
 
 function $1735($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  $5_1 = Math_fround($5_1);
  var $8_1 = 0;
  $8_1 = global$0 - 32 | 0;
  HEAPF32[($8_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($8_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($8_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($8_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($8_1 + 12 | 0) >> 2] = $4_1;
  HEAPF32[($8_1 + 8 | 0) >> 2] = $5_1;
  HEAPF32[($8_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 28 | 0) >> 2]));
  HEAPF32[$8_1 >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]));
  return (Math_fround(Math_fround(Math_fround(-Math_fround(HEAPF32[($8_1 + 28 | 0) >> 2])) * Math_fround(HEAPF32[$8_1 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[$8_1 >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2])))))) >= Math_fround(0 | 0) & 1 | 0 ? 1 : -1) | 0;
 }
 
 function $1736($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $1740(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $1741($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $1741($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1737($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $57_1 = Math_fround(0), $19_1 = 0, $36_1 = 0, $46_1 = 0, $35_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $57_1 = Math_fround(Math_fround((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) * Math_fround(1.75));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($57_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $19_1 = ~~$57_1;
      break label$3;
     }
     $19_1 = -2147483648;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $19_1;
    label$5 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = 8;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $1742(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 4142 | 0, 106 | 0) | 0;
    $35_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $36_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $36_1 + 1 | 0;
    $1743($5_1 | 0, $35_1 + ($36_1 << 2 | 0) | 0 | 0, $4_1 + 4 | 0 | 0);
    break label$1;
   }
   $45_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $46_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $46_1 + 1 | 0;
   $1743($5_1 | 0, $45_1 + ($46_1 << 2 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1738($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4_1 >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP8[($4_1 + 15 | 0) >> 0] = 1 & 1 | 0;
      break label$1;
     }
     HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP8[($4_1 + 15 | 0) >> 0] = 0 & 1 | 0;
  }
  return (HEAPU8[($4_1 + 15 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $1739($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4_1 >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP8[($4_1 + 15 | 0) >> 0] = 1 & 1 | 0;
      break label$1;
     }
     HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP8[($4_1 + 15 | 0) >> 0] = 0 & 1 | 0;
  }
  return (HEAPU8[($4_1 + 15 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $1740($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1741($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1742($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = $931() | 0;
  $16_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($7_1, HEAP32[($6_1 + 12 | 0) >> 2] | 0, (HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $1743($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $1744() {
  $1160(26592 | 0, 4877 | 0, 26308 | 0) | 0;
  $1797(390 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1745($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26592 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1746($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26592 | 0;
 }
 
 function $1747($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $838($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 13668 + 8 | 0;
  $502($5_1 + 20 | 0 | 0) | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = 0;
  $729($5_1 + 20 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0 | 0);
  $22_1 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0;
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
  $573($5_1 + 20 | 0 | 0, $22_1 | 0, $4_1 + 4 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1748($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $20_1 = 0, $33_1 = 0, $51_1 = 0, $56_1 = 0, $61_1 = 0, $66_1 = 0, $73_1 = 0, $78_1 = 0, $83_1 = 0, $285_1 = Math_fround(0), $292_1 = Math_fround(0), $299_1 = Math_fround(0), $306_1 = Math_fround(0), $313_1 = Math_fround(0), $320_1 = Math_fround(0), $327_1 = Math_fround(0);
  $10_1 = global$0 - 112 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 104 | 0) >> 2] = $1_1;
  HEAPF32[($10_1 + 100 | 0) >> 2] = $2_1;
  HEAPF32[($10_1 + 96 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 92 | 0) >> 2] = $4_1;
  HEAPF32[($10_1 + 88 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 84 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 80 | 0) >> 2] = $7_1;
  $11_1 = HEAP32[($10_1 + 108 | 0) >> 2] | 0;
  HEAP32[($10_1 + 76 | 0) >> 2] = HEAP32[($82((HEAP32[($10_1 + 104 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($10_1 + 72 | 0) >> 2] = HEAP32[($10_1 + 76 | 0) >> 2] | 0;
  $20_1 = HEAP32[((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$20_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($20_1) | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!(Math_fround(HEAPF32[($10_1 + 96 | 0) >> 2]) < Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, 0 | 0) | 0) >> 2]) & 1 | 0)) {
     break label$3
    }
    $33_1 = HEAP32[($10_1 + 84 | 0) >> 2] | 0;
    label$4 : {
     switch ($33_1 | 0) {
     case 0:
      $812($1635(HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) | 0 | 0, $1645($1633(HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0;
      $812($1636(HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) | 0 | 0, $1646($1633(HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0;
      break label$1;
     case 1:
      HEAP32[($10_1 + 68 | 0) >> 2] = $1635(HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) | 0;
      $285_1 = Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 68 | 0) >> 2] | 0) + 4 | 0) >> 2]) - Math_fround(HEAPF32[(($1645(HEAP32[((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2]));
      $51_1 = HEAP32[($10_1 + 68 | 0) >> 2] | 0;
      HEAPF32[($51_1 + 4 | 0) >> 2] = Math_fround(Math_fround($285_1 * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2])) + Math_fround(HEAPF32[($51_1 + 4 | 0) >> 2]));
      $292_1 = Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 68 | 0) >> 2] | 0) + 8 | 0) >> 2]) - Math_fround(HEAPF32[(($1645(HEAP32[((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2]));
      $56_1 = HEAP32[($10_1 + 68 | 0) >> 2] | 0;
      HEAPF32[($56_1 + 8 | 0) >> 2] = Math_fround(Math_fround($292_1 * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2])) + Math_fround(HEAPF32[($56_1 + 8 | 0) >> 2]));
      $299_1 = Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 68 | 0) >> 2] | 0) + 12 | 0) >> 2]) - Math_fround(HEAPF32[(($1645(HEAP32[((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) + 12 | 0) >> 2]));
      $61_1 = HEAP32[($10_1 + 68 | 0) >> 2] | 0;
      HEAPF32[($61_1 + 12 | 0) >> 2] = Math_fround(Math_fround($299_1 * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2])) + Math_fround(HEAPF32[($61_1 + 12 | 0) >> 2]));
      $306_1 = Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 68 | 0) >> 2] | 0) + 16 | 0) >> 2]) - Math_fround(HEAPF32[(($1645(HEAP32[((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) + 16 | 0) >> 2]));
      $66_1 = HEAP32[($10_1 + 68 | 0) >> 2] | 0;
      HEAPF32[($66_1 + 16 | 0) >> 2] = Math_fround(Math_fround($306_1 * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2])) + Math_fround(HEAPF32[($66_1 + 16 | 0) >> 2]));
      HEAP32[($10_1 + 64 | 0) >> 2] = $1636(HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) | 0;
      $313_1 = Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2]) - Math_fround(HEAPF32[(($1646(HEAP32[((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2]));
      $73_1 = HEAP32[($10_1 + 64 | 0) >> 2] | 0;
      HEAPF32[($73_1 + 4 | 0) >> 2] = Math_fround(Math_fround($313_1 * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2])) + Math_fround(HEAPF32[($73_1 + 4 | 0) >> 2]));
      $320_1 = Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 64 | 0) >> 2] | 0) + 8 | 0) >> 2]) - Math_fround(HEAPF32[(($1646(HEAP32[((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2]));
      $78_1 = HEAP32[($10_1 + 64 | 0) >> 2] | 0;
      HEAPF32[($78_1 + 8 | 0) >> 2] = Math_fround(Math_fround($320_1 * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2])) + Math_fround(HEAPF32[($78_1 + 8 | 0) >> 2]));
      $327_1 = Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 64 | 0) >> 2] | 0) + 12 | 0) >> 2]) - Math_fround(HEAPF32[(($1646(HEAP32[((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) + 12 | 0) >> 2]));
      $83_1 = HEAP32[($10_1 + 64 | 0) >> 2] | 0;
      HEAPF32[($83_1 + 12 | 0) >> 2] = Math_fround(Math_fround($327_1 * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2])) + Math_fround(HEAPF32[($83_1 + 12 | 0) >> 2]));
      break label$1;
     default:
      break label$4;
     };
    }
    break label$1;
   }
   label$7 : {
    label$8 : {
     if (!(Math_fround(HEAPF32[($10_1 + 96 | 0) >> 2]) >= Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, ($488($11_1 + 20 | 0 | 0) | 0) - 8 | 0 | 0) | 0) >> 2]) & 1 | 0)) {
      break label$8
     }
     HEAP32[($10_1 + 32 | 0) >> 2] = $488($11_1 + 20 | 0 | 0) | 0;
     HEAPF32[($10_1 + 60 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 32 | 0) >> 2] | 0) + -7 | 0 | 0) | 0) >> 2]);
     HEAPF32[($10_1 + 56 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 32 | 0) >> 2] | 0) + -6 | 0 | 0) | 0) >> 2]);
     HEAPF32[($10_1 + 52 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 32 | 0) >> 2] | 0) + -5 | 0 | 0) | 0) >> 2]);
     HEAPF32[($10_1 + 48 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 32 | 0) >> 2] | 0) + -4 | 0 | 0) | 0) >> 2]);
     HEAPF32[($10_1 + 44 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 32 | 0) >> 2] | 0) + -3 | 0 | 0) | 0) >> 2]);
     HEAPF32[($10_1 + 40 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 32 | 0) >> 2] | 0) + -2 | 0 | 0) | 0) >> 2]);
     HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 32 | 0) >> 2] | 0) + -1 | 0 | 0) | 0) >> 2]);
     break label$7;
    }
    HEAP32[($10_1 + 28 | 0) >> 2] = $487($11_1 + 20 | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 96 | 0) >> 2])), 8 | 0) | 0;
    HEAPF32[($10_1 + 60 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + -7 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 56 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + -6 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 52 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + -5 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 48 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + -4 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 44 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + -3 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 40 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + -2 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + -1 | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2]);
    HEAPF32[($10_1 + 20 | 0) >> 2] = Math_fround($843($11_1 | 0, ((HEAP32[($10_1 + 28 | 0) >> 2] | 0) >>> 3 | 0) - 1 | 0 | 0, Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 96 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2])) / Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + -8 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2])))))));
    HEAPF32[($10_1 + 60 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]));
    HEAPF32[($10_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2]));
    HEAPF32[($10_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 3 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2]));
    HEAPF32[($10_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 4 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]));
    HEAPF32[($10_1 + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 5 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2]));
    HEAPF32[($10_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 6 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]));
    HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15($11_1 + 20 | 0 | 0, (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 7 | 0 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) + Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]));
   }
   label$9 : {
    if (!(Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]) == Math_fround(1.0) & 1 | 0)) {
     break label$9
    }
    HEAP32[($10_1 + 16 | 0) >> 2] = $1635(HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) | 0;
    $816(HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]))) | 0;
    HEAP32[($10_1 + 12 | 0) >> 2] = $1636(HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) | 0;
    $816(HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2])), Math_fround(Math_fround(1.0))) | 0;
    break label$1;
   }
   HEAP32[($10_1 + 8 | 0) >> 2] = (HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 16 | 0;
   HEAP32[($10_1 + 4 | 0) >> 2] = (HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 36 | 0;
   label$10 : {
    if (HEAP32[($10_1 + 84 | 0) >> 2] | 0) {
     break label$10
    }
    $812(HEAP32[($10_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 24 | 0 | 0) | 0;
    $812(HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 44 | 0 | 0) | 0;
   }
   $814(HEAP32[($10_1 + 8 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2])))) | 0;
   $814(HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2])) * Math_fround(HEAPF32[($10_1 + 88 | 0) >> 2]))), Math_fround(Math_fround(0 | 0))) | 0;
  }
  global$0 = $10_1 + 112 | 0;
  return;
 }
 
 function $1749($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 234881024 | 0 | 0;
 }
 
 function $1750($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  $5_1 = Math_fround($5_1);
  $6_1 = Math_fround($6_1);
  $7_1 = Math_fround($7_1);
  $8_1 = Math_fround($8_1);
  $9_1 = Math_fround($9_1);
  var $12_1 = 0, $13_1 = 0, $65_1 = Math_fround(0), $66_1 = Math_fround(0), $67_1 = Math_fround(0), $68_1 = Math_fround(0), $69_1 = Math_fround(0), $70_1 = Math_fround(0), $71_1 = Math_fround(0), $72_1 = Math_fround(0);
  $12_1 = global$0 - 48 | 0;
  global$0 = $12_1;
  HEAP32[($12_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($12_1 + 40 | 0) >> 2] = $1_1;
  HEAPF32[($12_1 + 36 | 0) >> 2] = $2_1;
  HEAPF32[($12_1 + 32 | 0) >> 2] = $3_1;
  HEAPF32[($12_1 + 28 | 0) >> 2] = $4_1;
  HEAPF32[($12_1 + 24 | 0) >> 2] = $5_1;
  HEAPF32[($12_1 + 20 | 0) >> 2] = $6_1;
  HEAPF32[($12_1 + 16 | 0) >> 2] = $7_1;
  HEAPF32[($12_1 + 12 | 0) >> 2] = $8_1;
  HEAPF32[($12_1 + 8 | 0) >> 2] = $9_1;
  $13_1 = HEAP32[($12_1 + 44 | 0) >> 2] | 0;
  HEAP32[($12_1 + 40 | 0) >> 2] = (HEAP32[($12_1 + 40 | 0) >> 2] | 0) << 3 | 0;
  $65_1 = Math_fround(HEAPF32[($12_1 + 36 | 0) >> 2]);
  HEAPF32[($15($13_1 + 20 | 0 | 0, HEAP32[($12_1 + 40 | 0) >> 2] | 0 | 0) | 0) >> 2] = $65_1;
  $66_1 = Math_fround(HEAPF32[($12_1 + 32 | 0) >> 2]);
  HEAPF32[($15($13_1 + 20 | 0 | 0, (HEAP32[($12_1 + 40 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2] = $66_1;
  $67_1 = Math_fround(HEAPF32[($12_1 + 28 | 0) >> 2]);
  HEAPF32[($15($13_1 + 20 | 0 | 0, (HEAP32[($12_1 + 40 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2] = $67_1;
  $68_1 = Math_fround(HEAPF32[($12_1 + 24 | 0) >> 2]);
  HEAPF32[($15($13_1 + 20 | 0 | 0, (HEAP32[($12_1 + 40 | 0) >> 2] | 0) + 3 | 0 | 0) | 0) >> 2] = $68_1;
  $69_1 = Math_fround(HEAPF32[($12_1 + 20 | 0) >> 2]);
  HEAPF32[($15($13_1 + 20 | 0 | 0, (HEAP32[($12_1 + 40 | 0) >> 2] | 0) + 4 | 0 | 0) | 0) >> 2] = $69_1;
  $70_1 = Math_fround(HEAPF32[($12_1 + 16 | 0) >> 2]);
  HEAPF32[($15($13_1 + 20 | 0 | 0, (HEAP32[($12_1 + 40 | 0) >> 2] | 0) + 5 | 0 | 0) | 0) >> 2] = $70_1;
  $71_1 = Math_fround(HEAPF32[($12_1 + 12 | 0) >> 2]);
  HEAPF32[($15($13_1 + 20 | 0 | 0, (HEAP32[($12_1 + 40 | 0) >> 2] | 0) + 6 | 0 | 0) | 0) >> 2] = $71_1;
  $72_1 = Math_fround(HEAPF32[($12_1 + 8 | 0) >> 2]);
  HEAPF32[($15($13_1 + 20 | 0 | 0, (HEAP32[($12_1 + 40 | 0) >> 2] | 0) + 7 | 0 | 0) | 0) >> 2] = $72_1;
  global$0 = $12_1 + 48 | 0;
  return;
 }
 
 function $1751($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 13668 + 8 | 0;
  $504($4_1 + 20 | 0 | 0) | 0;
  $839($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1752($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1751($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1753() {
  $1744();
  return;
 }
 
 function $1754() {
  $1159(26604 | 0, 5134 | 0) | 0;
  $1797(396 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1755($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26604 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1756($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26604 | 0;
 }
 
 function $1757($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 13736 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1758($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1759($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  wasm2js_trap();
 }
 
 function $1760() {
  $1754();
  return;
 }
 
 function $1761() {
  $1160(26616 | 0, 1482 | 0, 26208 | 0) | 0;
  $1797(400 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $1762($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $462(26616 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1763($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 26616 | 0;
 }
 
 function $1764($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $709($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 13800 + 8 | 0;
  $1573($5_1 + 20 | 0 | 0) | 0;
  $502($5_1 + 36 | 0 | 0) | 0;
  HEAP32[($5_1 + 52 | 0) >> 2] = 0;
  HEAP32[($5_1 + 56 | 0) >> 2] = $5_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $1765() | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1765() {
  var $1_1 = 0;
  $1_1 = HEAP32[(0 + 26628 | 0) >> 2] | 0;
  HEAP32[(0 + 26628 | 0) >> 2] = $1_1 + 1 | 0;
  return ($1_1 & 65535 | 0) << 11 | 0 | 0;
 }
 
 function $1766($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 13800 + 8 | 0;
  $504($4_1 + 36 | 0 | 0) | 0;
  $1574($4_1 + 20 | 0 | 0) | 0;
  $710($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1767($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  wasm2js_trap();
 }
 
 function $1768($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0;
  $9_1 = global$0 - 32 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 8 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 4 | 0) >> 2] = $6_1;
  $1769(HEAP32[($9_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0, $858(HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($9_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $9_1 + 32 | 0;
  return;
 }
 
 function $1769($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $10_1 = 0, $124_1 = 0, $204_1 = 0, $123_1 = 0, $203_1 = 0;
  $9_1 = global$0 - 192 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 184 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 176 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 172 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 168 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 164 | 0) >> 2] = $6_1;
  $10_1 = HEAP32[($9_1 + 188 | 0) >> 2] | 0;
  HEAP32[($9_1 + 176 | 0) >> 2] = (HEAP32[($9_1 + 168 | 0) >> 2] | 0) + Math_imul((HEAP32[($9_1 + 176 | 0) >> 2] | 0) >>> 1 | 0, HEAP32[($9_1 + 164 | 0) >> 2] | 0) | 0;
  HEAP32[($9_1 + 160 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($9_1 + 184 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP32[($9_1 + 156 | 0) >> 2] = $1638(HEAP32[($9_1 + 184 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($9_1 + 152 | 0) >> 2] = $10_1 + 36 | 0;
  HEAP32[($9_1 + 148 | 0) >> 2] = $10_1 + 20 | 0;
  label$1 : {
   label$2 : {
    if ($857(HEAP32[($9_1 + 148 | 0) >> 2] | 0 | 0) | 0) {
     break label$2
    }
    label$3 : {
     if (!(($488(HEAP32[($9_1 + 156 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($9_1 + 152 | 0) >> 2] = HEAP32[($9_1 + 156 | 0) >> 2] | 0;
    }
    HEAP32[($9_1 + 144 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 184 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    HEAPF32[($9_1 + 140 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($9_1 + 144 | 0) >> 2] | 0) + 100 | 0) >> 2]);
    HEAPF32[($9_1 + 136 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($9_1 + 144 | 0) >> 2] | 0) + 112 | 0) >> 2]);
    HEAPF32[($9_1 + 132 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($9_1 + 144 | 0) >> 2] | 0) + 92 | 0) >> 2]);
    HEAPF32[($9_1 + 128 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($9_1 + 144 | 0) >> 2] | 0) + 96 | 0) >> 2]);
    HEAPF32[($9_1 + 124 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($9_1 + 144 | 0) >> 2] | 0) + 104 | 0) >> 2]);
    HEAPF32[($9_1 + 120 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($9_1 + 144 | 0) >> 2] | 0) + 108 | 0) >> 2]);
    HEAP32[($9_1 + 116 | 0) >> 2] = HEAP32[($9_1 + 180 | 0) >> 2] | 0;
    HEAP32[($9_1 + 112 | 0) >> 2] = HEAP32[($9_1 + 168 | 0) >> 2] | 0;
    label$4 : {
     label$5 : while (1) {
      if (!((HEAP32[($9_1 + 112 | 0) >> 2] | 0) >>> 0 < (HEAP32[($9_1 + 176 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$4
      }
      HEAPF32[($9_1 + 108 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($9_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 116 | 0) >> 2] | 0 | 0) | 0) >> 2]);
      HEAPF32[($9_1 + 104 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($9_1 + 152 | 0) >> 2] | 0 | 0, (HEAP32[($9_1 + 116 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
      HEAPF32[((HEAP32[($9_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 112 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($9_1 + 108 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 132 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($9_1 + 104 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 128 | 0) >> 2]))) + Math_fround(HEAPF32[($9_1 + 140 | 0) >> 2]));
      HEAPF32[((HEAP32[($9_1 + 172 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 112 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($9_1 + 108 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 124 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($9_1 + 104 | 0) >> 2]) * Math_fround(HEAPF32[($9_1 + 120 | 0) >> 2]))) + Math_fround(HEAPF32[($9_1 + 136 | 0) >> 2]));
      HEAP32[($9_1 + 116 | 0) >> 2] = (HEAP32[($9_1 + 116 | 0) >> 2] | 0) + 2 | 0;
      HEAP32[($9_1 + 112 | 0) >> 2] = (HEAP32[($9_1 + 112 | 0) >> 2] | 0) + (HEAP32[($9_1 + 164 | 0) >> 2] | 0) | 0;
      continue label$5;
     };
    }
    break label$1;
   }
   HEAP32[($9_1 + 100 | 0) >> 2] = 0;
   HEAP32[($9_1 + 96 | 0) >> 2] = 0;
   HEAP32[($9_1 + 92 | 0) >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($9_1 + 92 | 0) >> 2] | 0) >>> 0 < (HEAP32[($9_1 + 180 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$6
     }
     HEAP32[($9_1 + 88 | 0) >> 2] = HEAP32[($1071(HEAP32[($9_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
     HEAP32[($9_1 + 100 | 0) >> 2] = (HEAP32[($9_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 88 | 0) >> 2] | 0) + 1 | 0) | 0;
     HEAP32[($9_1 + 96 | 0) >> 2] = (HEAP32[($9_1 + 96 | 0) >> 2] | 0) + (HEAP32[($9_1 + 88 | 0) >> 2] | 0) | 0;
     HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 2 | 0;
     continue label$7;
    };
   }
   HEAP32[($9_1 + 84 | 0) >> 2] = $1291(HEAP32[($9_1 + 160 | 0) >> 2] | 0 | 0) | 0;
   label$8 : {
    if ($488(HEAP32[($9_1 + 156 | 0) >> 2] | 0 | 0) | 0) {
     break label$8
    }
    HEAP32[($9_1 + 80 | 0) >> 2] = HEAP32[($9_1 + 168 | 0) >> 2] | 0;
    HEAP32[($9_1 + 76 | 0) >> 2] = Math_imul(HEAP32[($9_1 + 96 | 0) >> 2] | 0, 3);
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($9_1 + 80 | 0) >> 2] | 0) >>> 0 < (HEAP32[($9_1 + 176 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$9
      }
      HEAPF32[($9_1 + 72 | 0) >> 2] = Math_fround(0 | 0);
      HEAPF32[($9_1 + 68 | 0) >> 2] = Math_fround(0 | 0);
      $123_1 = HEAP32[($9_1 + 148 | 0) >> 2] | 0;
      $124_1 = HEAP32[($9_1 + 100 | 0) >> 2] | 0;
      HEAP32[($9_1 + 100 | 0) >> 2] = $124_1 + 1 | 0;
      HEAP32[($9_1 + 64 | 0) >> 2] = HEAP32[($1071($123_1 | 0, $124_1 | 0) | 0) >> 2] | 0;
      HEAP32[($9_1 + 64 | 0) >> 2] = (HEAP32[($9_1 + 64 | 0) >> 2] | 0) + (HEAP32[($9_1 + 100 | 0) >> 2] | 0) | 0;
      label$11 : {
       label$12 : while (1) {
        if (!((HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$11
        }
        HEAP32[($9_1 + 60 | 0) >> 2] = HEAP32[($139(HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($1071(HEAP32[($9_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
        HEAP32[($9_1 + 56 | 0) >> 2] = HEAP32[($9_1 + 60 | 0) >> 2] | 0;
        HEAPF32[($9_1 + 52 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($9_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0 | 0) | 0) >> 2]);
        HEAPF32[($9_1 + 48 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($9_1 + 152 | 0) >> 2] | 0 | 0, (HEAP32[($9_1 + 76 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]);
        HEAPF32[($9_1 + 44 | 0) >> 2] = Math_fround(HEAPF32[($15(HEAP32[($9_1 + 152 | 0) >> 2] | 0 | 0, (HEAP32[($9_1 + 76 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2]);
        HEAPF32[($9_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($9_1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 92 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($9_1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 96 | 0) >> 2]))) + Math_fround(HEAPF32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 100 | 0) >> 2])) * Math_fround(HEAPF32[($9_1 + 44 | 0) >> 2])) + Math_fround(HEAPF32[($9_1 + 72 | 0) >> 2]));
        HEAPF32[($9_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($9_1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 104 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($9_1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 108 | 0) >> 2]))) + Math_fround(HEAPF32[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + 112 | 0) >> 2])) * Math_fround(HEAPF32[($9_1 + 44 | 0) >> 2])) + Math_fround(HEAPF32[($9_1 + 68 | 0) >> 2]));
        HEAP32[($9_1 + 100 | 0) >> 2] = (HEAP32[($9_1 + 100 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($9_1 + 76 | 0) >> 2] = (HEAP32[($9_1 + 76 | 0) >> 2] | 0) + 3 | 0;
        continue label$12;
       };
      }
      HEAPF32[((HEAP32[($9_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($9_1 + 72 | 0) >> 2]);
      HEAPF32[((HEAP32[($9_1 + 172 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 80 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($9_1 + 68 | 0) >> 2]);
      HEAP32[($9_1 + 80 | 0) >> 2] = (HEAP32[($9_1 + 80 | 0) >> 2] | 0) + (HEAP32[($9_1 + 164 | 0) >> 2] | 0) | 0;
      continue label$10;
     };
    }
    break label$1;
   }
   HEAP32[($9_1 + 40 | 0) >> 2] = HEAP32[($9_1 + 168 | 0) >> 2] | 0;
   HEAP32[($9_1 + 36 | 0) >> 2] = Math_imul(HEAP32[($9_1 + 96 | 0) >> 2] | 0, 3);
   HEAP32[($9_1 + 32 | 0) >> 2] = (HEAP32[($9_1 + 96 | 0) >> 2] | 0) << 1 | 0;
   label$13 : {
    label$14 : while (1) {
     if (!((HEAP32[($9_1 + 40 | 0) >> 2] | 0) >>> 0 < (HEAP32[($9_1 + 176 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$13
     }
     HEAPF32[($9_1 + 28 | 0) >> 2] = Math_fround(0 | 0);
     HEAPF32[($9_1 + 24 | 0) >> 2] = Math_fround(0 | 0);
     $203_1 = HEAP32[($9_1 + 148 | 0) >> 2] | 0;
     $204_1 = HEAP32[($9_1 + 100 | 0) >> 2] | 0;
     HEAP32[($9_1 + 100 | 0) >> 2] = $204_1 + 1 | 0;
     HEAP32[($9_1 + 20 | 0) >> 2] = HEAP32[($1071($203_1 | 0, $204_1 | 0) | 0) >> 2] | 0;
     HEAP32[($9_1 + 20 | 0) >> 2] = (HEAP32[($9_1 + 20 | 0) >> 2] | 0) + (HEAP32[($9_1 + 100 | 0) >> 2] | 0) | 0;
     label$15 : {
      label$16 : while (1) {
       if (!((HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
       HEAP32[($9_1 + 16 | 0) >> 2] = HEAP32[($139(HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($1071(HEAP32[($9_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
       HEAP32[($9_1 + 12 | 0) >> 2] = HEAP32[($9_1 + 16 | 0) >> 2] | 0;
       HEAPF32[($9_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($15(HEAP32[($9_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2]) + Math_fround(HEAPF32[($15(HEAP32[($9_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0) | 0) >> 2]));
       HEAPF32[($9_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($15(HEAP32[($9_1 + 152 | 0) >> 2] | 0 | 0, (HEAP32[($9_1 + 36 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]) + Math_fround(HEAPF32[($15(HEAP32[($9_1 + 156 | 0) >> 2] | 0 | 0, (HEAP32[($9_1 + 32 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) >> 2]));
       HEAPF32[$9_1 >> 2] = Math_fround(HEAPF32[($15(HEAP32[($9_1 + 152 | 0) >> 2] | 0 | 0, (HEAP32[($9_1 + 36 | 0) >> 2] | 0) + 2 | 0 | 0) | 0) >> 2]);
       HEAPF32[($9_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + 92 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + 96 | 0) >> 2]))) + Math_fround(HEAPF32[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + 100 | 0) >> 2])) * Math_fround(HEAPF32[$9_1 >> 2])) + Math_fround(HEAPF32[($9_1 + 28 | 0) >> 2]));
       HEAPF32[($9_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + 104 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + 108 | 0) >> 2]))) + Math_fround(HEAPF32[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + 112 | 0) >> 2])) * Math_fround(HEAPF32[$9_1 >> 2])) + Math_fround(HEAPF32[($9_1 + 24 | 0) >> 2]));
       HEAP32[($9_1 + 100 | 0) >> 2] = (HEAP32[($9_1 + 100 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($9_1 + 36 | 0) >> 2] = (HEAP32[($9_1 + 36 | 0) >> 2] | 0) + 3 | 0;
       HEAP32[($9_1 + 32 | 0) >> 2] = (HEAP32[($9_1 + 32 | 0) >> 2] | 0) + 2 | 0;
       continue label$16;
      };
     }
     HEAPF32[((HEAP32[($9_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($9_1 + 28 | 0) >> 2]);
     HEAPF32[((HEAP32[($9_1 + 172 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 40 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($9_1 + 24 | 0) >> 2]);
     HEAP32[($9_1 + 40 | 0) >> 2] = (HEAP32[($9_1 + 40 | 0) >> 2] | 0) + (HEAP32[($9_1 + 164 | 0) >> 2] | 0) | 0;
     continue label$14;
    };
   }
  }
  global$0 = $9_1 + 192 | 0;
  return;
 }
 
 function $1770($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 20 | 0 | 0;
 }
 
 function $1771($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0 | 0;
 }
 
 function $1772($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0;
 }
 
 function $1773($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 52 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function $1774($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1056((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 20 | 0 | 0, $5_1 + 20 | 0 | 0);
  $1057((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 36 | 0 | 0, $5_1 + 36 | 0 | 0);
  HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 52 | 0) >> 2] = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 56 | 0) >> 2] = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1775() {
  $1761();
  return;
 }
 
 function $1776($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $1777($6_1 | 0) | 0;
  HEAP32[$6_1 >> 2] = 13864 + 8 | 0;
  HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
  HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1777($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 14036 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1778($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $1779($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $16_1 = Math_fround(0), $22_1 = Math_fround(0);
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
  HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
  $16_1 = Math_fround($1034(Math_fround(Math_fround(-Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]))), Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]))));
  $7_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  HEAPF32[$7_1 >> 2] = Math_fround(Math_fround(HEAPF32[$7_1 >> 2]) + $16_1);
  $22_1 = Math_fround($1034(Math_fround(Math_fround(-Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]))), Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]))));
  $8_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  HEAPF32[$8_1 >> 2] = Math_fround(Math_fround(HEAPF32[$8_1 >> 2]) + $22_1);
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $1780($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $1781($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  return;
 }
 
 function $1782($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  return;
 }
 
 function $1783($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $1777($6_1 | 0) | 0;
  HEAP32[$6_1 >> 2] = 13892 + 8 | 0;
  HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($6_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
  HEAPF32[($6_1 + 16 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($6_1 + 20 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($6_1 + 24 | 0) >> 2] = Math_fround(0 | 0);
  HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1784($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(Math_fround($1296(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0)) + Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]));
  HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(Math_fround($1297(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0)) + Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $1785($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(HEAP32[($5_1 + 40 | 0) >> 2] | 0) >> 2]) - Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]));
  HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 2]) - Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]));
  HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround($1025(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]))))));
  label$1 : {
   if (!(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) < Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) & 1 | 0)) {
    break label$1
   }
   $12_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$12_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($12_1, Math_fround(0 | 0), Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]), Math_fround(Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2])) / Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]))));
   HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround($1021(Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]))));
   HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround($1023(Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]))));
   HEAPF32[(HEAP32[($5_1 + 40 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2])))) + Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]));
   HEAPF32[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]))) + Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]));
  }
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $1786($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $1787($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  return;
 }
 
 function $1788($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  return;
 }
 
 function $1789($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  return;
 }
 
 function $1790($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[(0 + 10188 | 0) >> 2]));
  return;
 }
 
 function $1791($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1792($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1792($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1659($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1793($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1791($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1794($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1792($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1795($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1794($4_1 | 0) | 0;
  $1658($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $1796($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  wasm2js_trap();
 }
 
 function $1797($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return 0 | 0;
 }
 
 function $1798($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$5($0_1 | 0, $1_1 | 0, $2_1 | 0);
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ($0_1 & 3 | 0) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if ($2_1) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (!($2_1 & 3 | 0)) {
       break label$4
      }
      if ($2_1 >>> 0 < $3_1 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $1799($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $6$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = $1_1;
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $1800($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1801($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1802($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, $7_1 = 0, $2_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
    $3_1 = $2_1 << 1 | 0;
    if (!$3_1) {
     break label$2
    }
    $4_1 = $1803(Math_fround($1_1)) | 0;
    $5_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
    $6_1 = ($5_1 >>> 23 | 0) & 255 | 0;
    if (($6_1 | 0) == (255 | 0)) {
     break label$2
    }
    if (($4_1 & 2147483647 | 0) >>> 0 < 2139095041 >>> 0) {
     break label$1
    }
   }
   $1_1 = Math_fround($0_1 * $1_1);
   return Math_fround(Math_fround($1_1 / $1_1));
  }
  label$3 : {
   $4_1 = $5_1 << 1 | 0;
   if ($4_1 >>> 0 > $3_1 >>> 0) {
    break label$3
   }
   return Math_fround(($4_1 | 0) == ($3_1 | 0) ? Math_fround($0_1 * Math_fround(0.0)) : $0_1);
  }
  $4_1 = ($2_1 >>> 23 | 0) & 255 | 0;
  label$4 : {
   label$5 : {
    if ($6_1) {
     break label$5
    }
    $6_1 = 0;
    label$6 : {
     $3_1 = $5_1 << 9 | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$6
     }
     label$7 : while (1) {
      $6_1 = $6_1 + -1 | 0;
      $3_1 = $3_1 << 1 | 0;
      if (($3_1 | 0) > (-1 | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    $3_1 = $5_1 << (1 - $6_1 | 0) | 0;
    break label$4;
   }
   $3_1 = $5_1 & 8388607 | 0 | 8388608 | 0;
  }
  label$8 : {
   label$9 : {
    if ($4_1) {
     break label$9
    }
    $4_1 = 0;
    label$10 : {
     $7_1 = $2_1 << 9 | 0;
     if (($7_1 | 0) < (0 | 0)) {
      break label$10
     }
     label$11 : while (1) {
      $4_1 = $4_1 + -1 | 0;
      $7_1 = $7_1 << 1 | 0;
      if (($7_1 | 0) > (-1 | 0)) {
       continue label$11
      }
      break label$11;
     };
    }
    $2_1 = $2_1 << (1 - $4_1 | 0) | 0;
    break label$8;
   }
   $2_1 = $2_1 & 8388607 | 0 | 8388608 | 0;
  }
  label$12 : {
   if (($6_1 | 0) <= ($4_1 | 0)) {
    break label$12
   }
   label$13 : while (1) {
    label$14 : {
     $7_1 = $3_1 - $2_1 | 0;
     if (($7_1 | 0) < (0 | 0)) {
      break label$14
     }
     $3_1 = $7_1;
     if ($3_1) {
      break label$14
     }
     return Math_fround(Math_fround($0_1 * Math_fround(0.0)));
    }
    $3_1 = $3_1 << 1 | 0;
    $6_1 = $6_1 + -1 | 0;
    if (($6_1 | 0) > ($4_1 | 0)) {
     continue label$13
    }
    break label$13;
   };
   $6_1 = $4_1;
  }
  label$15 : {
   $4_1 = $3_1 - $2_1 | 0;
   if (($4_1 | 0) < (0 | 0)) {
    break label$15
   }
   $3_1 = $4_1;
   if ($3_1) {
    break label$15
   }
   return Math_fround(Math_fround($0_1 * Math_fround(0.0)));
  }
  label$16 : {
   label$17 : {
    if ($3_1 >>> 0 <= 8388607 >>> 0) {
     break label$17
    }
    $7_1 = $3_1;
    break label$16;
   }
   label$18 : while (1) {
    $6_1 = $6_1 + -1 | 0;
    $4_1 = $3_1 >>> 0 < 4194304 >>> 0;
    $7_1 = $3_1 << 1 | 0;
    $3_1 = $7_1;
    if ($4_1) {
     continue label$18
    }
    break label$18;
   };
  }
  $3_1 = $5_1 & -2147483648 | 0;
  label$19 : {
   label$20 : {
    if (($6_1 | 0) < (1 | 0)) {
     break label$20
    }
    $6_1 = $7_1 + -8388608 | 0 | ($6_1 << 23 | 0) | 0;
    break label$19;
   }
   $6_1 = $7_1 >>> (1 - $6_1 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $6_1 | $3_1 | 0), wasm2js_scratch_load_f32()));
 }
 
 function $1803($0_1) {
  $0_1 = Math_fround($0_1);
  return (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) | 0;
 }
 
 function $1804($0_1) {
  $0_1 = +$0_1;
  $0_1 = $0_1 - $0_1;
  return +($0_1 / $0_1);
 }
 
 function $1805($0_1) {
  $0_1 = $0_1 | 0;
  return +(+$1906($0_1 | 0, +(3105036184601417870297958.0e207)));
 }
 
 function $1806($0_1) {
  $0_1 = $0_1 | 0;
  return +(+$1906($0_1 | 0, +(1.2882297539194267e-231)));
 }
 
 function $1807($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11_1 = 0.0, $9_1 = 0, $9$hi = 0, i64toi32_i32$4 = 0, $8$hi = 0, $8_1 = 0, i64toi32_i32$5 = 0, $7_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $24_1 = 0, $10_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $12_1 = 0.0, $10$hi = 0, $55_1 = 0.0, $57_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1808(+$0_1) | 0;
  $4_1 = $1808(+$1_1) | 0;
  $5_1 = $4_1 & 2047 | 0;
  $6_1 = $5_1 + -1086 | 0;
  wasm2js_scratch_store_f64(+$1_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $8_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $8$hi = i64toi32_i32$0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $9_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $9$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($3_1 + -2047 | 0) >>> 0 < -2046 >>> 0) {
      break label$3
     }
     $7_1 = 0;
     if ($6_1 >>> 0 > -129 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$0 = $8$hi;
     if (!($1809($8_1 | 0, i64toi32_i32$0 | 0) | 0)) {
      break label$4
     }
     $11_1 = 1.0;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$1 = 1072693248;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$3 = $8_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $24_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $24_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $10_1 = $24_1;
     $10$hi = i64toi32_i32$0;
     if (!($10_1 | i64toi32_i32$0 | 0)) {
      break label$1
     }
     label$5 : {
      label$6 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$2 = $9_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 1;
       i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $25_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $25_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       }
       $9_1 = $25_1;
       $9$hi = i64toi32_i32$3;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$2 = -2097152;
       i64toi32_i32$1 = 0;
       if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
        break label$6
       }
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$1 = $10_1;
       i64toi32_i32$3 = -2097152;
       i64toi32_i32$2 = 1;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$5
       }
      }
      $11_1 = $0_1 + $1_1;
      break label$1;
     }
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$0 = 2145386496;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     $55_1 = $1_1 * $1_1;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$1 = 2145386495;
     i64toi32_i32$0 = -1;
     $57_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$0 = $8_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$3 | 0) > (i64toi32_i32$2 | 0)) {
      $26_1 = 1
     } else {
      if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$1 >>> 0) {
        $27_1 = 0
       } else {
        $27_1 = 1
       }
       $28_1 = $27_1;
      } else {
       $28_1 = 0
      }
      $26_1 = $28_1;
     }
     $11_1 = $57_1 ^ $26_1 | 0 ? 0.0 : $55_1;
     break label$1;
    }
    label$7 : {
     i64toi32_i32$0 = $9$hi;
     if (!($1809($9_1 | 0, i64toi32_i32$0 | 0) | 0)) {
      break label$7
     }
     $11_1 = $0_1 * $0_1;
     label$8 : {
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = -1;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
       $29_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$2 >>> 0) {
         $30_1 = 0
        } else {
         $30_1 = 1
        }
        $31_1 = $30_1;
       } else {
        $31_1 = 0
       }
       $29_1 = $31_1;
      }
      if ($29_1) {
       break label$8
      }
      i64toi32_i32$1 = $8$hi;
      $11_1 = ($1810($8_1 | 0, i64toi32_i32$1 | 0) | 0 | 0) == (1 | 0) ? -$11_1 : $11_1;
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$2 = $8_1;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
      $32_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $33_1 = 0
       } else {
        $33_1 = 1
       }
       $34_1 = $33_1;
      } else {
       $34_1 = 0
      }
      $32_1 = $34_1;
     }
     if ($32_1) {
      break label$1
     }
     $11_1 = +$1811(+(1.0 / $11_1));
     break label$1;
    }
    $7_1 = 0;
    label$9 : {
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$0 = -1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
      $35_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $36_1 = 0
       } else {
        $36_1 = 1
       }
       $37_1 = $36_1;
      } else {
       $37_1 = 0
      }
      $35_1 = $37_1;
     }
     if ($35_1) {
      break label$9
     }
     label$10 : {
      i64toi32_i32$3 = $8$hi;
      $7_1 = $1810($8_1 | 0, i64toi32_i32$3 | 0) | 0;
      if ($7_1) {
       break label$10
      }
      $11_1 = +$1804(+$0_1);
      break label$1;
     }
     $3_1 = $3_1 & 2047 | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $9_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $9$hi = i64toi32_i32$2;
     $7_1 = (($7_1 | 0) == (1 | 0)) << 18 | 0;
    }
    label$11 : {
     if ($6_1 >>> 0 > -129 >>> 0) {
      break label$11
     }
     $11_1 = 1.0;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$0 = 1072693248;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     label$12 : {
      if ($5_1 >>> 0 > 957 >>> 0) {
       break label$12
      }
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$2 = 1072693248;
      i64toi32_i32$0 = 0;
      $11_1 = (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0 ? $1_1 : -$1_1) + 1.0;
      break label$1;
     }
     label$13 : {
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$0 = $9_1;
      i64toi32_i32$3 = 1072693248;
      i64toi32_i32$2 = 1;
      if (($4_1 >>> 0 < 2048 >>> 0 | 0) == (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0 | 0)) {
       break label$13
      }
      $11_1 = +$1805(0 | 0);
      break label$1;
     }
     $11_1 = +$1806(0 | 0);
     break label$1;
    }
    if ($3_1) {
     break label$2
    }
    wasm2js_scratch_store_f64(+($0_1 * 4503599627370496.0));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = -54525952;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    $9$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$1 = $8_1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = -134217728;
   i64toi32_i32$0 = $8$hi & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 & i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $11_1 = +wasm2js_scratch_load_f64();
   i64toi32_i32$0 = $9$hi;
   $12_1 = +$1812($9_1 | 0, i64toi32_i32$0 | 0, $2_1 + 8 | 0 | 0);
   wasm2js_scratch_store_f64(+$12_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$5 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -134217728;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 & i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
   $11_1 = +$1813(+($11_1 * $0_1), +(($1_1 - $11_1) * $0_1 + (+HEAPF64[($2_1 + 8 | 0) >> 3] + ($12_1 - $0_1)) * $1_1), $7_1 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return +$11_1;
 }
 
 function $1808($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $6_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $6_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return $6_1 | 0;
 }
 
 function $1809($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $8_1 = 0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 1;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  i64toi32_i32$0 = $8_1;
  i64toi32_i32$2 = 2097152;
  i64toi32_i32$3 = 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$0 = 2097152;
  i64toi32_i32$3 = 1;
  return i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0 | 0;
 }
 
 function $1810($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0, $14_1 = 0, $15_1 = 0, $3_1 = 0, $3$hi = 0, $14$hi = 0, $17$hi = 0;
  $1_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $14_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $14_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $14_1 & 2047 | 0;
   if ($2_1 >>> 0 < 1023 >>> 0) {
    break label$1
   }
   $1_1 = 2;
   if ($2_1 >>> 0 > 1075 >>> 0) {
    break label$1
   }
   $1_1 = 0;
   i64toi32_i32$1 = 0;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$3 = 1075 - $2_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $15_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $15_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $3_1 = $15_1;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = -1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $17$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$5 = $17$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $1_1 = !(i64toi32_i32$3 & i64toi32_i32$2 | 0 | i64toi32_i32$1 | 0) ? 2 : 1;
  }
  return $1_1 | 0;
 }
 
 function $1811($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1;
  return +(+HEAPF64[($1_1 + 8 | 0) >> 3]);
 }
 
 function $1812($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $3_1 = 0.0, $6_1 = 0.0, i64toi32_i32$4 = 0, $5_1 = 0.0, $7_1 = 0.0, $9_1 = 0, $2_1 = 0, $2$hi = 0, $27_1 = 0, $29_1 = 0, $8_1 = 0.0, $10_1 = 0, $19_1 = 0.0, $28_1 = 0.0, $31_1 = 0, $31$hi = 0, $61_1 = 0.0, $85_1 = 0.0, $93_1 = 0.0, $123_1 = 0.0;
  $10_1 = $1_1;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = -1072076117;
  i64toi32_i32$3 = 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $2_1 = i64toi32_i32$4;
  $2$hi = i64toi32_i32$5;
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
   $27_1 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
   $27_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $3_1 = +($27_1 | 0);
  $19_1 = $3_1 * +HEAPF64[(0 + 16232 | 0) >> 3];
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$5 = $2_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 45;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $29_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $9_1 = ($29_1 & 127 | 0) << 5 | 0;
  $28_1 = $19_1 + +HEAPF64[($9_1 + 16320 | 0) >> 3];
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$5 = -1048576;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
  $31_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $31$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $0$hi;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$2 = $31$hi;
  i64toi32_i32$3 = $31_1;
  i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
  i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
  $0_1 = i64toi32_i32$1;
  $0$hi = i64toi32_i32$4;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$5 = -1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$3 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
  $4_1 = +wasm2js_scratch_load_f64();
  $5_1 = +HEAPF64[($9_1 + 16296 | 0) >> 3];
  $6_1 = $4_1 * $5_1 + -1.0;
  i64toi32_i32$5 = $0$hi;
  wasm2js_scratch_store_i32(0 | 0, $0_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
  $5_1 = (+wasm2js_scratch_load_f64() - $4_1) * $5_1;
  $4_1 = $6_1 + $5_1;
  $3_1 = $3_1 * +HEAPF64[(0 + 16224 | 0) >> 3] + +HEAPF64[($9_1 + 16312 | 0) >> 3];
  $61_1 = $3_1;
  $3_1 = $4_1 + $3_1;
  $7_1 = +HEAPF64[(0 + 16240 | 0) >> 3];
  $8_1 = $4_1 * $7_1;
  $7_1 = $6_1 * $7_1;
  $6_1 = $6_1 * $7_1;
  $85_1 = $6_1;
  $6_1 = $3_1 + $6_1;
  $93_1 = $28_1 + ($4_1 + ($61_1 - $3_1)) + $5_1 * ($8_1 + $7_1) + ($85_1 + ($3_1 - $6_1));
  $3_1 = $4_1 * $8_1;
  $4_1 = $93_1 + $4_1 * $3_1 * ($3_1 * ($3_1 * ($4_1 * +HEAPF64[(0 + 16288 | 0) >> 3] + +HEAPF64[(0 + 16280 | 0) >> 3]) + ($4_1 * +HEAPF64[(0 + 16272 | 0) >> 3] + +HEAPF64[(0 + 16264 | 0) >> 3])) + ($4_1 * +HEAPF64[(0 + 16256 | 0) >> 3] + +HEAPF64[(0 + 16248 | 0) >> 3]));
  $123_1 = $4_1;
  $4_1 = $6_1 + $4_1;
  HEAPF64[$10_1 >> 3] = $123_1 + ($6_1 - $4_1);
  return +$4_1;
 }
 
 function $1813($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $4_1 = 0, $6_1 = 0.0, $3_1 = 0, $8$hi = 0, $8_1 = 0, $9$hi = 0, $5_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $7_1 = 0.0, $27_1 = 0, $9_1 = 0, $73_1 = 0.0, $80_1 = 0.0, $96_1 = 0, $96$hi = 0, $99$hi = 0, $101$hi = 0;
  label$1 : {
   $3_1 = ($1808(+$0_1) | 0) & 2047 | 0;
   $4_1 = $1808(+(5.551115123125783e-17)) | 0;
   $5_1 = $3_1 - $4_1 | 0;
   if ($5_1 >>> 0 < (($1808(+(512.0)) | 0) - $4_1 | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    if (($5_1 | 0) > (-1 | 0)) {
     break label$2
    }
    $0_1 = $0_1 + 1.0;
    return +($2_1 ? -$0_1 : $0_1);
   }
   $4_1 = $3_1 >>> 0 < ($1808(+(1024.0)) | 0) >>> 0;
   $3_1 = 0;
   if ($4_1) {
    break label$1
   }
   label$3 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
     $24_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $25_1 = 0
      } else {
       $25_1 = 1
      }
      $26_1 = $25_1;
     } else {
      $26_1 = 0
     }
     $24_1 = $26_1;
    }
    if ($24_1) {
     break label$3
    }
    return +(+$1806($2_1 | 0));
   }
   return +(+$1805($2_1 | 0));
  }
  $6_1 = +HEAPF64[(0 + 14072 | 0) >> 3];
  $7_1 = +HEAPF64[(0 + 14064 | 0) >> 3] * $0_1 + $6_1;
  $6_1 = $7_1 - $6_1;
  $0_1 = $6_1 * +HEAPF64[(0 + 14088 | 0) >> 3] + ($6_1 * +HEAPF64[(0 + 14080 | 0) >> 3] + $0_1) + $1_1;
  $1_1 = $0_1 * $0_1;
  $73_1 = $1_1 * $1_1 * ($0_1 * +HEAPF64[(0 + 14120 | 0) >> 3] + +HEAPF64[(0 + 14112 | 0) >> 3]);
  $80_1 = $1_1 * ($0_1 * +HEAPF64[(0 + 14104 | 0) >> 3] + +HEAPF64[(0 + 14096 | 0) >> 3]);
  wasm2js_scratch_store_f64(+$7_1);
  i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $8_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $8$hi = i64toi32_i32$2;
  $4_1 = ($8_1 << 4 | 0) & 2032 | 0;
  $0_1 = $73_1 + ($80_1 + (+HEAPF64[($4_1 + 14176 | 0) >> 3] + $0_1));
  i64toi32_i32$3 = $4_1 + 14184 | 0;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
  $96_1 = i64toi32_i32$2;
  $96$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$0 = 0;
  $99$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$3 = $8_1;
  i64toi32_i32$2 = $99$hi;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = 45;
  i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27_1 = 0;
  } else {
   i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $27_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $101$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $96$hi;
  i64toi32_i32$5 = $96_1;
  i64toi32_i32$0 = $101$hi;
  i64toi32_i32$1 = $27_1;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $9_1 = i64toi32_i32$2;
  $9$hi = i64toi32_i32$4;
  label$4 : {
   if ($3_1) {
    break label$4
   }
   i64toi32_i32$4 = $9$hi;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$4 = $9$hi;
   i64toi32_i32$5 = $8$hi;
   return +(+$1814(+$0_1, $9_1 | 0, i64toi32_i32$4 | 0, $8_1 | 0, i64toi32_i32$5 | 0));
  }
  i64toi32_i32$5 = $9$hi;
  wasm2js_scratch_store_i32(0 | 0, $9_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
  $1_1 = +wasm2js_scratch_load_f64();
  return +($1_1 * $0_1 + $1_1);
 }
 
 function $1814($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $3_1 = 0.0, $5_1 = 0.0, $4_1 = 0.0, $6_1 = 0.0, wasm2js_f64$0 = 0.0, wasm2js_f64$1 = 0.0, wasm2js_i32$0 = 0;
  label$1 : {
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = -1058013184;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$4 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
   $3_1 = +wasm2js_scratch_load_f64();
   return +(($3_1 * $0_1 + $3_1) * 5486124068793688683255936.0e279);
  }
  label$2 : {
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$3 = 1071644672;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$4;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
   $3_1 = +wasm2js_scratch_load_f64();
   $4_1 = $3_1 * $0_1;
   $0_1 = $4_1 + $3_1;
   if (!(+$1908(+$0_1) < 1.0)) {
    break label$2
   }
   $1815(+(+$1811(+(2.2250738585072014e-308)) * 2.2250738585072014e-308));
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$0 = -2147483648;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 & i64toi32_i32$2 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $5_1 = $0_1 < 0.0 ? -1.0 : 1.0;
   $6_1 = $0_1 + $5_1;
   $0_1 = $6_1 + ($4_1 + ($3_1 - $0_1) + ($0_1 + ($5_1 - $6_1))) - $5_1;
   $0_1 = (wasm2js_f64$0 = +wasm2js_scratch_load_f64(), wasm2js_f64$1 = $0_1, wasm2js_i32$0 = $0_1 == 0.0, wasm2js_i32$0 ? wasm2js_f64$0 : wasm2js_f64$1);
  }
  return +($0_1 * 2.2250738585072014e-308);
 }
 
 function $1815($0_1) {
  $0_1 = +$0_1;
  HEAPF64[((global$0 - 16 | 0) + 8 | 0) >> 3] = $0_1;
 }
 
 function $1816($0_1) {
  $0_1 = Math_fround($0_1);
  $0_1 = Math_fround($0_1 - $0_1);
  return Math_fround(Math_fround($0_1 / $0_1));
 }
 
 function $1817($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround($1909($0_1 | 0, Math_fround(Math_fround(1584563250285286751870879.0e5)))));
 }
 
 function $1818($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround($1909($0_1 | 0, Math_fround(Math_fround(2.524354896707238e-29)))));
 }
 
 function $1819($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1951(25752 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1820($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     if ($1_1 >>> 0 >= 2047 >>> 0) {
      break label$3
     }
     $1_1 = $1_1 + -1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   label$4 : {
    if ($1_1 >>> 0 <= -1992 >>> 0) {
     break label$4
    }
    $1_1 = $1_1 + 969 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   $1_1 = (($1_1 | 0) > (-2960 | 0) ? $1_1 : -2960) + 1938 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $1821($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($1_1 & 3 | 0)) {
     break label$2
    }
    $1_1 = $0_1;
    label$3 : while (1) {
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     $1_1 = $1_1 + 1 | 0;
     if ($1_1 & 3 | 0) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$4
    }
    break label$4;
   };
   label$5 : while (1) {
    $1_1 = $2_1;
    $2_1 = $1_1 + 1 | 0;
    if (HEAPU8[$1_1 >> 0] | 0) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1822($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $1823($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($1822($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP32[($2_1 + 80 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break label$5
     }
     $3_1 = 0;
     break label$4;
    }
    $4_1 = $1_1;
    label$6 : while (1) {
     label$7 : {
      $3_1 = $4_1;
      if ($3_1) {
       break label$7
      }
      $3_1 = 0;
      break label$4;
     }
     $4_1 = $3_1 + -1 | 0;
     if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $0_1 = $0_1 + $3_1 | 0;
    $1_1 = $1_1 - $3_1 | 0;
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
   }
   $1798($5_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $3_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $1824($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = Math_imul($2_1, $1_1);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0_1 = $1823($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $5_1 = $1800($3_1 | 0) | 0;
   $0_1 = $1823($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   $1801($3_1 | 0);
  }
  label$3 : {
   if (($0_1 | 0) != ($4_1 | 0)) {
    break label$3
   }
   return ($1_1 ? $2_1 : 0) | 0;
  }
  return ($0_1 >>> 0) / ($1_1 >>> 0) | 0 | 0;
 }
 
 function $1825($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $2_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $2_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $2$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $13_1 & 32767 | 0;
    if (($3_1 | 0) == (32767 | 0)) {
     break label$2
    }
    $4_1 = 4;
    if ($3_1) {
     break label$1
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $4_1 | 0;
 }
 
 function $1826($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10_1 = 0, $9$hi = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, i64toi32_i32$6 = 0, $11$hi = 0, $64_1 = 0, $7_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $70_1 = 0, $11_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $52_1 = 0, $52$hi = 0, $55$hi = 0, $57_1 = 0, $57$hi = 0, $59_1 = 0, $59$hi = 0, $60_1 = 0, $60$hi = 0, $67$hi = 0, $69_1 = 0, $69$hi = 0, $131$hi = 0, $134_1 = 0, $135$hi = 0, $156_1 = 0, $156$hi = 0, $158$hi = 0, $161_1 = 0, $161$hi = 0, $163$hi = 0, $175$hi = 0, $178_1 = 0, $179$hi = 0, $208_1 = 0, $208$hi = 0, $210$hi = 0, $219_1 = 0, $220_1 = 0, $220$hi = 0, $222_1 = 0, $222$hi = 0, $228$hi = 0, $229_1 = 0, $229$hi = 0, $236_1 = 0, $236$hi = 0, $241$hi = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($1833($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     $6_1 = $1825($3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $64_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $64_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $64_1;
     $8_1 = $7_1 & 32767 | 0;
     if (($8_1 | 0) == (32767 | 0)) {
      break label$3
     }
     if ($6_1) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $1838($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $1836($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    $52_1 = $1_1;
    $52$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $65_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $65_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $55$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $57_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $57$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $55$hi;
    i64toi32_i32$1 = $65_1;
    i64toi32_i32$3 = $57$hi;
    i64toi32_i32$0 = $57_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $9_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$3;
    $59_1 = $9_1;
    $59$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $60_1 = $3_1;
    $60$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $66_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $66_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $66_1 & 32767 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $67_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $67_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $67$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $69_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $69$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $67$hi;
    i64toi32_i32$2 = $67_1;
    i64toi32_i32$1 = $69$hi;
    i64toi32_i32$0 = $69_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $52$hi;
    i64toi32_i32$2 = $59$hi;
    i64toi32_i32$3 = $60$hi;
    i64toi32_i32$0 = $10$hi;
    if (($1833($52_1 | 0, i64toi32_i32$1 | 0, $59_1 | 0, i64toi32_i32$2 | 0, $60_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $10$hi;
     if (!($1833($1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    $1838($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $5_1 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   label$6 : {
    label$7 : {
     if (!$8_1) {
      break label$7
     }
     i64toi32_i32$0 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$0;
     break label$6;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1081540608;
    $1838($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $68_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $68_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $68_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($6_1) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1081540608;
    $1838($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $70_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $70_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $70_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $9_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$0;
   label$9 : {
    if (($8_1 | 0) <= ($6_1 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$1 = $9_1;
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$3 = $11_1;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
       $131$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $134_1 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$0 = 0;
       $135$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $131$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $135$hi;
       i64toi32_i32$1 = $134_1;
       i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       $10_1 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $71_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
          $72_1 = 0
         } else {
          $72_1 = 1
         }
         $73_1 = $72_1;
        } else {
         $73_1 = 0
        }
        $71_1 = $73_1;
       }
       if ($71_1) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        $1838($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$1 = $5_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break label$1;
       }
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$1 = $10_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $74_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $74_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $156_1 = $74_1;
       $156$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $75_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $75_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       $158$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $156$hi;
       i64toi32_i32$3 = $156_1;
       i64toi32_i32$0 = $158$hi;
       i64toi32_i32$2 = $75_1;
       i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
       $9$hi = i64toi32_i32$0;
       break label$11;
      }
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $76_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $76_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $161_1 = $76_1;
      $161$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $77_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $77_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $163$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $161$hi;
      i64toi32_i32$3 = $161_1;
      i64toi32_i32$0 = $163$hi;
      i64toi32_i32$2 = $77_1;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $9$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $78_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $78_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $78_1;
     $4$hi = i64toi32_i32$3;
     $8_1 = $8_1 + -1 | 0;
     if (($8_1 | 0) > ($6_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $8_1 = $6_1;
   }
   label$14 : {
    label$15 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $175$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $178_1 = $4$hi >>> 0 < i64toi32_i32$0 >>> 0 | (($4$hi | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $179$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $175$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $179$hi;
     i64toi32_i32$0 = $178_1;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $79_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        $80_1 = 0
       } else {
        $80_1 = 1
       }
       $81_1 = $80_1;
      } else {
       $81_1 = 0
      }
      $79_1 = $81_1;
     }
     if ($79_1) {
      break label$15
     }
     i64toi32_i32$3 = $9$hi;
     $10_1 = $9_1;
     $10$hi = i64toi32_i32$3;
     break label$14;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    $1838($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = $5_1 + 56 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$16 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$16
    }
    label$17 : while (1) {
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $82_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $82_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $82_1;
     $3$hi = i64toi32_i32$3;
     $8_1 = $8_1 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $83_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $83_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $4_1 = $83_1;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $208_1 = $3_1;
     $208$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $84_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $84_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $210$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $208$hi;
     i64toi32_i32$1 = $208_1;
     i64toi32_i32$3 = $210$hi;
     i64toi32_i32$2 = $84_1;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $10_1;
     i64toi32_i32$1 = 65536;
     i64toi32_i32$2 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $6_1 = $7_1 & 32768 | 0;
   label$18 : {
    if (($8_1 | 0) > (0 | 0)) {
     break label$18
    }
    $219_1 = $5_1 + 64 | 0;
    i64toi32_i32$0 = $4$hi;
    $220_1 = $4_1;
    $220$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $222_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $222$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $8_1 + 120 | 0 | $6_1 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $85_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $85_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $228$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $222$hi;
    i64toi32_i32$3 = $222_1;
    i64toi32_i32$0 = $228$hi;
    i64toi32_i32$1 = $85_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $229_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $229$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $220$hi;
    i64toi32_i32$3 = $229$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1065811968;
    $1838($219_1 | 0, $220_1 | 0, i64toi32_i32$0 | 0, $229_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 72 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$0 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $236_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $236$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = $8_1 | $6_1 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $86_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $86_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $241$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $236$hi;
   i64toi32_i32$2 = $236_1;
   i64toi32_i32$1 = $241$hi;
   i64toi32_i32$0 = $86_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $2$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 128 | 0;
 }
 
 function $1827($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0, $2_1 = 0, $11_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $1_1 = 0, $79_1 = 0, $92_1 = 0, $103_1 = 0, $111_1 = 0, $119_1 = 0, $209_1 = 0, $220_1 = 0, $228_1 = 0, $236_1 = 0, $271_1 = 0, $338_1 = 0, $345_1 = 0, $352_1 = 0, $443_1 = 0, $454_1 = 0, $462_1 = 0, $470_1 = 0, $1156_1 = 0, $1163_1 = 0, $1170_1 = 0, $1292_1 = 0, $1294_1 = 0, $1354_1 = 0, $1361_1 = 0, $1368_1 = 0, $1599_1 = 0, $1606_1 = 0, $1613_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if ($0_1 >>> 0 > 244 >>> 0) {
               break label$12
              }
              label$13 : {
               $2_1 = HEAP32[(0 + 26632 | 0) >> 2] | 0;
               $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
               $4_1 = $3_1 >>> 3 | 0;
               $0_1 = $2_1 >>> $4_1 | 0;
               if (!($0_1 & 3 | 0)) {
                break label$13
               }
               label$14 : {
                label$15 : {
                 $5_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
                 $4_1 = $5_1 << 3 | 0;
                 $0_1 = $4_1 + 26672 | 0;
                 $4_1 = HEAP32[($4_1 + 26680 | 0) >> 2] | 0;
                 $3_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 if (($0_1 | 0) != ($3_1 | 0)) {
                  break label$15
                 }
                 HEAP32[(0 + 26632 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
                 break label$14;
                }
                HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
                HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
               }
               $0_1 = $4_1 + 8 | 0;
               $5_1 = $5_1 << 3 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
               $4_1 = $4_1 + $5_1 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
               break label$1;
              }
              $6_1 = HEAP32[(0 + 26640 | 0) >> 2] | 0;
              if ($3_1 >>> 0 <= $6_1 >>> 0) {
               break label$11
              }
              label$16 : {
               if (!$0_1) {
                break label$16
               }
               label$17 : {
                label$18 : {
                 $79_1 = $0_1 << $4_1 | 0;
                 $0_1 = 2 << $4_1 | 0;
                 $0_1 = $79_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                 $0_1 = ($0_1 + -1 | 0) & ($0_1 ^ -1 | 0) | 0;
                 $92_1 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $4_1 = $92_1 >>> $0_1 | 0;
                 $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                 $103_1 = $5_1 | $0_1 | 0;
                 $0_1 = $4_1 >>> $5_1 | 0;
                 $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $111_1 = $103_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $119_1 = $111_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $4_1 = ($119_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                 $0_1 = $4_1 << 3 | 0;
                 $5_1 = $0_1 + 26672 | 0;
                 $0_1 = HEAP32[($0_1 + 26680 | 0) >> 2] | 0;
                 $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                 if (($5_1 | 0) != ($7_1 | 0)) {
                  break label$18
                 }
                 $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
                 HEAP32[(0 + 26632 | 0) >> 2] = $2_1;
                 break label$17;
                }
                HEAP32[($7_1 + 12 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 8 | 0) >> 2] = $7_1;
               }
               HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               $7_1 = $0_1 + $3_1 | 0;
               $4_1 = $4_1 << 3 | 0;
               $5_1 = $4_1 - $3_1 | 0;
               HEAP32[($7_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
               HEAP32[($0_1 + $4_1 | 0) >> 2] = $5_1;
               label$19 : {
                if (!$6_1) {
                 break label$19
                }
                $3_1 = ($6_1 & -8 | 0) + 26672 | 0;
                $4_1 = HEAP32[(0 + 26652 | 0) >> 2] | 0;
                label$20 : {
                 label$21 : {
                  $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
                  if ($2_1 & $8_1 | 0) {
                   break label$21
                  }
                  HEAP32[(0 + 26632 | 0) >> 2] = $2_1 | $8_1 | 0;
                  $8_1 = $3_1;
                  break label$20;
                 }
                 $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                }
                HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
               }
               $0_1 = $0_1 + 8 | 0;
               HEAP32[(0 + 26652 | 0) >> 2] = $7_1;
               HEAP32[(0 + 26640 | 0) >> 2] = $5_1;
               break label$1;
              }
              $9_1 = HEAP32[(0 + 26636 | 0) >> 2] | 0;
              if (!$9_1) {
               break label$11
              }
              $0_1 = ($9_1 + -1 | 0) & ($9_1 ^ -1 | 0) | 0;
              $209_1 = $0_1;
              $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
              $4_1 = $209_1 >>> $0_1 | 0;
              $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
              $220_1 = $5_1 | $0_1 | 0;
              $0_1 = $4_1 >>> $5_1 | 0;
              $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
              $228_1 = $220_1 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
              $236_1 = $228_1 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
              $7_1 = HEAP32[(((($236_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 26936 | 0) >> 2] | 0;
              $4_1 = ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
              $5_1 = $7_1;
              label$22 : {
               label$23 : while (1) {
                label$24 : {
                 $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                 if ($0_1) {
                  break label$24
                 }
                 $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                 if (!$0_1) {
                  break label$22
                 }
                }
                $5_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $271_1 = $5_1;
                $5_1 = $5_1 >>> 0 < $4_1 >>> 0;
                $4_1 = $5_1 ? $271_1 : $4_1;
                $7_1 = $5_1 ? $0_1 : $7_1;
                $5_1 = $0_1;
                continue label$23;
               };
              }
              $10_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
              label$25 : {
               $8_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
               if (($8_1 | 0) == ($7_1 | 0)) {
                break label$25
               }
               $0_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
               HEAP32[(0 + 26648 | 0) >> 2] | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
               HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
               break label$2;
              }
              label$26 : {
               $5_1 = $7_1 + 20 | 0;
               $0_1 = HEAP32[$5_1 >> 2] | 0;
               if ($0_1) {
                break label$26
               }
               $0_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$10
               }
               $5_1 = $7_1 + 16 | 0;
              }
              label$27 : while (1) {
               $11_1 = $5_1;
               $8_1 = $0_1;
               $5_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$5_1 >> 2] | 0;
               if ($0_1) {
                continue label$27
               }
               $5_1 = $8_1 + 16 | 0;
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$27
               }
               break label$27;
              };
              HEAP32[$11_1 >> 2] = 0;
              break label$2;
             }
             $3_1 = -1;
             if ($0_1 >>> 0 > -65 >>> 0) {
              break label$11
             }
             $0_1 = $0_1 + 11 | 0;
             $3_1 = $0_1 & -8 | 0;
             $6_1 = HEAP32[(0 + 26636 | 0) >> 2] | 0;
             if (!$6_1) {
              break label$11
             }
             $11_1 = 0;
             label$28 : {
              if ($3_1 >>> 0 < 256 >>> 0) {
               break label$28
              }
              $11_1 = 31;
              if ($3_1 >>> 0 > 16777215 >>> 0) {
               break label$28
              }
              $0_1 = $0_1 >>> 8 | 0;
              $338_1 = $0_1;
              $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
              $4_1 = $338_1 << $0_1 | 0;
              $345_1 = $4_1;
              $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
              $5_1 = $345_1 << $4_1 | 0;
              $352_1 = $5_1;
              $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
              $0_1 = (($352_1 << $5_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $5_1 | 0) | 0;
              $11_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
             }
             $4_1 = 0 - $3_1 | 0;
             label$29 : {
              label$30 : {
               label$31 : {
                label$32 : {
                 $5_1 = HEAP32[(($11_1 << 2 | 0) + 26936 | 0) >> 2] | 0;
                 if ($5_1) {
                  break label$32
                 }
                 $0_1 = 0;
                 $8_1 = 0;
                 break label$31;
                }
                $0_1 = 0;
                $7_1 = $3_1 << (($11_1 | 0) == (31 | 0) ? 0 : 25 - ($11_1 >>> 1 | 0) | 0) | 0;
                $8_1 = 0;
                label$33 : while (1) {
                 label$34 : {
                  $2_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                  if ($2_1 >>> 0 >= $4_1 >>> 0) {
                   break label$34
                  }
                  $4_1 = $2_1;
                  $8_1 = $5_1;
                  if ($4_1) {
                   break label$34
                  }
                  $4_1 = 0;
                  $8_1 = $5_1;
                  $0_1 = $5_1;
                  break label$30;
                 }
                 $2_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                 $5_1 = HEAP32[(($5_1 + (($7_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                 $0_1 = $2_1 ? (($2_1 | 0) == ($5_1 | 0) ? $0_1 : $2_1) : $0_1;
                 $7_1 = $7_1 << 1 | 0;
                 if ($5_1) {
                  continue label$33
                 }
                 break label$33;
                };
               }
               label$35 : {
                if ($0_1 | $8_1 | 0) {
                 break label$35
                }
                $8_1 = 0;
                $0_1 = 2 << $11_1 | 0;
                $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $6_1 | 0;
                if (!$0_1) {
                 break label$11
                }
                $0_1 = ($0_1 + -1 | 0) & ($0_1 ^ -1 | 0) | 0;
                $443_1 = $0_1;
                $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                $5_1 = $443_1 >>> $0_1 | 0;
                $7_1 = ($5_1 >>> 5 | 0) & 8 | 0;
                $454_1 = $7_1 | $0_1 | 0;
                $0_1 = $5_1 >>> $7_1 | 0;
                $5_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                $462_1 = $454_1 | $5_1 | 0;
                $0_1 = $0_1 >>> $5_1 | 0;
                $5_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                $470_1 = $462_1 | $5_1 | 0;
                $0_1 = $0_1 >>> $5_1 | 0;
                $5_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                $0_1 = HEAP32[(((($470_1 | $5_1 | 0) + ($0_1 >>> $5_1 | 0) | 0) << 2 | 0) + 26936 | 0) >> 2] | 0;
               }
               if (!$0_1) {
                break label$29
               }
              }
              label$36 : while (1) {
               $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $7_1 = $2_1 >>> 0 < $4_1 >>> 0;
               label$37 : {
                $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                if ($5_1) {
                 break label$37
                }
                $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
               }
               $4_1 = $7_1 ? $2_1 : $4_1;
               $8_1 = $7_1 ? $0_1 : $8_1;
               $0_1 = $5_1;
               if ($0_1) {
                continue label$36
               }
               break label$36;
              };
             }
             if (!$8_1) {
              break label$11
             }
             if ($4_1 >>> 0 >= ((HEAP32[(0 + 26640 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
              break label$11
             }
             $11_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
             label$38 : {
              $7_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
              if (($7_1 | 0) == ($8_1 | 0)) {
               break label$38
              }
              $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
              HEAP32[(0 + 26648 | 0) >> 2] | 0;
              HEAP32[($0_1 + 12 | 0) >> 2] = $7_1;
              HEAP32[($7_1 + 8 | 0) >> 2] = $0_1;
              break label$3;
             }
             label$39 : {
              $5_1 = $8_1 + 20 | 0;
              $0_1 = HEAP32[$5_1 >> 2] | 0;
              if ($0_1) {
               break label$39
              }
              $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$9
              }
              $5_1 = $8_1 + 16 | 0;
             }
             label$40 : while (1) {
              $2_1 = $5_1;
              $7_1 = $0_1;
              $5_1 = $0_1 + 20 | 0;
              $0_1 = HEAP32[$5_1 >> 2] | 0;
              if ($0_1) {
               continue label$40
              }
              $5_1 = $7_1 + 16 | 0;
              $0_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
              if ($0_1) {
               continue label$40
              }
              break label$40;
             };
             HEAP32[$2_1 >> 2] = 0;
             break label$3;
            }
            label$41 : {
             $0_1 = HEAP32[(0 + 26640 | 0) >> 2] | 0;
             if ($0_1 >>> 0 < $3_1 >>> 0) {
              break label$41
             }
             $4_1 = HEAP32[(0 + 26652 | 0) >> 2] | 0;
             label$42 : {
              label$43 : {
               $5_1 = $0_1 - $3_1 | 0;
               if ($5_1 >>> 0 < 16 >>> 0) {
                break label$43
               }
               HEAP32[(0 + 26640 | 0) >> 2] = $5_1;
               $7_1 = $4_1 + $3_1 | 0;
               HEAP32[(0 + 26652 | 0) >> 2] = $7_1;
               HEAP32[($7_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
               HEAP32[($4_1 + $0_1 | 0) >> 2] = $5_1;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               break label$42;
              }
              HEAP32[(0 + 26652 | 0) >> 2] = 0;
              HEAP32[(0 + 26640 | 0) >> 2] = 0;
              HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
              $0_1 = $4_1 + $0_1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
             }
             $0_1 = $4_1 + 8 | 0;
             break label$1;
            }
            label$44 : {
             $7_1 = HEAP32[(0 + 26644 | 0) >> 2] | 0;
             if ($7_1 >>> 0 <= $3_1 >>> 0) {
              break label$44
             }
             $4_1 = $7_1 - $3_1 | 0;
             HEAP32[(0 + 26644 | 0) >> 2] = $4_1;
             $0_1 = HEAP32[(0 + 26656 | 0) >> 2] | 0;
             $5_1 = $0_1 + $3_1 | 0;
             HEAP32[(0 + 26656 | 0) >> 2] = $5_1;
             HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
             HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
             $0_1 = $0_1 + 8 | 0;
             break label$1;
            }
            label$45 : {
             label$46 : {
              if (!(HEAP32[(0 + 27104 | 0) >> 2] | 0)) {
               break label$46
              }
              $4_1 = HEAP32[(0 + 27112 | 0) >> 2] | 0;
              break label$45;
             }
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = -1;
             HEAP32[(i64toi32_i32$1 + 27116 | 0) >> 2] = -1;
             HEAP32[(i64toi32_i32$1 + 27120 | 0) >> 2] = i64toi32_i32$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = 4096;
             HEAP32[(i64toi32_i32$1 + 27108 | 0) >> 2] = 4096;
             HEAP32[(i64toi32_i32$1 + 27112 | 0) >> 2] = i64toi32_i32$0;
             HEAP32[(0 + 27104 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
             HEAP32[(0 + 27124 | 0) >> 2] = 0;
             HEAP32[(0 + 27076 | 0) >> 2] = 0;
             $4_1 = 4096;
            }
            $0_1 = 0;
            $6_1 = $3_1 + 47 | 0;
            $2_1 = $4_1 + $6_1 | 0;
            $11_1 = 0 - $4_1 | 0;
            $8_1 = $2_1 & $11_1 | 0;
            if ($8_1 >>> 0 <= $3_1 >>> 0) {
             break label$1
            }
            $0_1 = 0;
            label$47 : {
             $4_1 = HEAP32[(0 + 27072 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$47
             }
             $5_1 = HEAP32[(0 + 27064 | 0) >> 2] | 0;
             $9_1 = $5_1 + $8_1 | 0;
             if ($9_1 >>> 0 <= $5_1 >>> 0) {
              break label$1
             }
             if ($9_1 >>> 0 > $4_1 >>> 0) {
              break label$1
             }
            }
            if ((HEAPU8[(0 + 27076 | 0) >> 0] | 0) & 4 | 0) {
             break label$6
            }
            label$48 : {
             label$49 : {
              label$50 : {
               $4_1 = HEAP32[(0 + 26656 | 0) >> 2] | 0;
               if (!$4_1) {
                break label$50
               }
               $0_1 = 27080;
               label$51 : while (1) {
                label$52 : {
                 $5_1 = HEAP32[$0_1 >> 2] | 0;
                 if ($5_1 >>> 0 > $4_1 >>> 0) {
                  break label$52
                 }
                 if (($5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                  break label$49
                 }
                }
                $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$51
                }
                break label$51;
               };
              }
              $7_1 = $1832(0 | 0) | 0;
              if (($7_1 | 0) == (-1 | 0)) {
               break label$7
              }
              $2_1 = $8_1;
              label$53 : {
               $0_1 = HEAP32[(0 + 27108 | 0) >> 2] | 0;
               $4_1 = $0_1 + -1 | 0;
               if (!($4_1 & $7_1 | 0)) {
                break label$53
               }
               $2_1 = ($8_1 - $7_1 | 0) + (($4_1 + $7_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
              }
              if ($2_1 >>> 0 <= $3_1 >>> 0) {
               break label$7
              }
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              label$54 : {
               $0_1 = HEAP32[(0 + 27072 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$54
               }
               $4_1 = HEAP32[(0 + 27064 | 0) >> 2] | 0;
               $5_1 = $4_1 + $2_1 | 0;
               if ($5_1 >>> 0 <= $4_1 >>> 0) {
                break label$7
               }
               if ($5_1 >>> 0 > $0_1 >>> 0) {
                break label$7
               }
              }
              $0_1 = $1832($2_1 | 0) | 0;
              if (($0_1 | 0) != ($7_1 | 0)) {
               break label$48
              }
              break label$5;
             }
             $2_1 = ($2_1 - $7_1 | 0) & $11_1 | 0;
             if ($2_1 >>> 0 > 2147483646 >>> 0) {
              break label$7
             }
             $7_1 = $1832($2_1 | 0) | 0;
             if (($7_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
              break label$8
             }
             $0_1 = $7_1;
            }
            label$55 : {
             if (($0_1 | 0) == (-1 | 0)) {
              break label$55
             }
             if (($3_1 + 48 | 0) >>> 0 <= $2_1 >>> 0) {
              break label$55
             }
             label$56 : {
              $4_1 = HEAP32[(0 + 27112 | 0) >> 2] | 0;
              $4_1 = (($6_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
              if ($4_1 >>> 0 <= 2147483646 >>> 0) {
               break label$56
              }
              $7_1 = $0_1;
              break label$5;
             }
             label$57 : {
              if (($1832($4_1 | 0) | 0 | 0) == (-1 | 0)) {
               break label$57
              }
              $2_1 = $4_1 + $2_1 | 0;
              $7_1 = $0_1;
              break label$5;
             }
             $1832(0 - $2_1 | 0 | 0) | 0;
             break label$7;
            }
            $7_1 = $0_1;
            if (($0_1 | 0) != (-1 | 0)) {
             break label$5
            }
            break label$7;
           }
           $8_1 = 0;
           break label$2;
          }
          $7_1 = 0;
          break label$3;
         }
         if (($7_1 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 27076 | 0) >> 2] = HEAP32[(0 + 27076 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $7_1 = $1832($8_1 | 0) | 0;
       $0_1 = $1832(0 | 0) | 0;
       if (($7_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if ($7_1 >>> 0 >= $0_1 >>> 0) {
        break label$4
       }
       $2_1 = $0_1 - $7_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0_1 = (HEAP32[(0 + 27064 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 27064 | 0) >> 2] = $0_1;
      label$58 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 27068 | 0) >> 2] | 0) >>> 0) {
        break label$58
       }
       HEAP32[(0 + 27068 | 0) >> 2] = $0_1;
      }
      label$59 : {
       label$60 : {
        label$61 : {
         label$62 : {
          $4_1 = HEAP32[(0 + 26656 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$62
          }
          $0_1 = 27080;
          label$63 : while (1) {
           $5_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($7_1 | 0) == ($5_1 + $8_1 | 0 | 0)) {
            break label$61
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$63
           }
           break label$60;
          };
         }
         label$64 : {
          label$65 : {
           $0_1 = HEAP32[(0 + 26648 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$65
           }
           if ($7_1 >>> 0 >= $0_1 >>> 0) {
            break label$64
           }
          }
          HEAP32[(0 + 26648 | 0) >> 2] = $7_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 27084 | 0) >> 2] = $2_1;
         HEAP32[(0 + 27080 | 0) >> 2] = $7_1;
         HEAP32[(0 + 26664 | 0) >> 2] = -1;
         HEAP32[(0 + 26668 | 0) >> 2] = HEAP32[(0 + 27104 | 0) >> 2] | 0;
         HEAP32[(0 + 27092 | 0) >> 2] = 0;
         label$66 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $5_1 = $4_1 + 26672 | 0;
          HEAP32[($4_1 + 26680 | 0) >> 2] = $5_1;
          HEAP32[($4_1 + 26684 | 0) >> 2] = $5_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label$66
          }
          break label$66;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = ($7_1 + 8 | 0) & 7 | 0 ? (-8 - $7_1 | 0) & 7 | 0 : 0;
         $5_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 26644 | 0) >> 2] = $5_1;
         $4_1 = $7_1 + $4_1 | 0;
         HEAP32[(0 + 26656 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
         HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 26660 | 0) >> 2] = HEAP32[(0 + 27120 | 0) >> 2] | 0;
         break label$59;
        }
        if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$60
        }
        if ($4_1 >>> 0 < $5_1 >>> 0) {
         break label$60
        }
        if ($4_1 >>> 0 >= $7_1 >>> 0) {
         break label$60
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
        $5_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 26656 | 0) >> 2] = $5_1;
        $7_1 = (HEAP32[(0 + 26644 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $7_1 - $0_1 | 0;
        HEAP32[(0 + 26644 | 0) >> 2] = $0_1;
        HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $7_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 26660 | 0) >> 2] = HEAP32[(0 + 27120 | 0) >> 2] | 0;
        break label$59;
       }
       label$67 : {
        $8_1 = HEAP32[(0 + 26648 | 0) >> 2] | 0;
        if ($7_1 >>> 0 >= $8_1 >>> 0) {
         break label$67
        }
        HEAP32[(0 + 26648 | 0) >> 2] = $7_1;
        $8_1 = $7_1;
       }
       $5_1 = $7_1 + $2_1 | 0;
       $0_1 = 27080;
       label$68 : {
        label$69 : {
         label$70 : {
          label$71 : {
           label$72 : {
            label$73 : {
             label$74 : {
              label$75 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
                break label$74
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$75
               }
               break label$73;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$72
             }
            }
            $0_1 = 27080;
            label$76 : while (1) {
             label$77 : {
              $5_1 = HEAP32[$0_1 >> 2] | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$77
              }
              $5_1 = $5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$71
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$76;
            };
           }
           HEAP32[$0_1 >> 2] = $7_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $11_1 = $7_1 + (($7_1 + 8 | 0) & 7 | 0 ? (-8 - $7_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($11_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $2_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           $3_1 = $11_1 + $3_1 | 0;
           $0_1 = $2_1 - $3_1 | 0;
           label$78 : {
            if (($2_1 | 0) != ($4_1 | 0)) {
             break label$78
            }
            HEAP32[(0 + 26656 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 26644 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 26644 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$69;
           }
           label$79 : {
            if (($2_1 | 0) != (HEAP32[(0 + 26652 | 0) >> 2] | 0 | 0)) {
             break label$79
            }
            HEAP32[(0 + 26652 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 26640 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 26640 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($3_1 + $0_1 | 0) >> 2] = $0_1;
            break label$69;
           }
           label$80 : {
            $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
            if (($4_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$80
            }
            $6_1 = $4_1 & -8 | 0;
            label$81 : {
             label$82 : {
              if ($4_1 >>> 0 > 255 >>> 0) {
               break label$82
              }
              $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
              $8_1 = $4_1 >>> 3 | 0;
              $7_1 = ($8_1 << 3 | 0) + 26672 | 0;
              label$83 : {
               $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($4_1 | 0) != ($5_1 | 0)) {
                break label$83
               }
               HEAP32[(0 + 26632 | 0) >> 2] = (HEAP32[(0 + 26632 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0;
               break label$81;
              }
              HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
              break label$81;
             }
             $9_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
             label$84 : {
              label$85 : {
               $7_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($7_1 | 0) == ($2_1 | 0)) {
                break label$85
               }
               $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
               HEAP32[($4_1 + 12 | 0) >> 2] = $7_1;
               HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
               break label$84;
              }
              label$86 : {
               $4_1 = $2_1 + 20 | 0;
               $5_1 = HEAP32[$4_1 >> 2] | 0;
               if ($5_1) {
                break label$86
               }
               $4_1 = $2_1 + 16 | 0;
               $5_1 = HEAP32[$4_1 >> 2] | 0;
               if ($5_1) {
                break label$86
               }
               $7_1 = 0;
               break label$84;
              }
              label$87 : while (1) {
               $8_1 = $4_1;
               $7_1 = $5_1;
               $4_1 = $5_1 + 20 | 0;
               $5_1 = HEAP32[$4_1 >> 2] | 0;
               if ($5_1) {
                continue label$87
               }
               $4_1 = $7_1 + 16 | 0;
               $5_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
               if ($5_1) {
                continue label$87
               }
               break label$87;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$81
             }
             label$88 : {
              label$89 : {
               $5_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
               $4_1 = ($5_1 << 2 | 0) + 26936 | 0;
               if (($2_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
                break label$89
               }
               HEAP32[$4_1 >> 2] = $7_1;
               if ($7_1) {
                break label$88
               }
               HEAP32[(0 + 26636 | 0) >> 2] = (HEAP32[(0 + 26636 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
               break label$81;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $7_1;
              if (!$7_1) {
               break label$81
              }
             }
             HEAP32[($7_1 + 24 | 0) >> 2] = $9_1;
             label$90 : {
              $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$90
              }
              HEAP32[($7_1 + 16 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 24 | 0) >> 2] = $7_1;
             }
             $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$81
             }
             HEAP32[($7_1 + 20 | 0) >> 2] = $4_1;
             HEAP32[($4_1 + 24 | 0) >> 2] = $7_1;
            }
            $0_1 = $6_1 + $0_1 | 0;
            $2_1 = $2_1 + $6_1 | 0;
            $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
           }
           HEAP32[($2_1 + 4 | 0) >> 2] = $4_1 & -2 | 0;
           HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
           HEAP32[($3_1 + $0_1 | 0) >> 2] = $0_1;
           label$91 : {
            if ($0_1 >>> 0 > 255 >>> 0) {
             break label$91
            }
            $4_1 = ($0_1 & -8 | 0) + 26672 | 0;
            label$92 : {
             label$93 : {
              $5_1 = HEAP32[(0 + 26632 | 0) >> 2] | 0;
              $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
              if ($5_1 & $0_1 | 0) {
               break label$93
              }
              HEAP32[(0 + 26632 | 0) >> 2] = $5_1 | $0_1 | 0;
              $0_1 = $4_1;
              break label$92;
             }
             $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
            HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
            HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
            HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
            break label$69;
           }
           $4_1 = 31;
           label$94 : {
            if ($0_1 >>> 0 > 16777215 >>> 0) {
             break label$94
            }
            $4_1 = $0_1 >>> 8 | 0;
            $1156_1 = $4_1;
            $4_1 = (($4_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $5_1 = $1156_1 << $4_1 | 0;
            $1163_1 = $5_1;
            $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $7_1 = $1163_1 << $5_1 | 0;
            $1170_1 = $7_1;
            $7_1 = (($7_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $4_1 = (($1170_1 << $7_1 | 0) >>> 15 | 0) - ($4_1 | $5_1 | 0 | $7_1 | 0) | 0;
            $4_1 = ($4_1 << 1 | 0 | (($0_1 >>> ($4_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($3_1 + 28 | 0) >> 2] = $4_1;
           i64toi32_i32$1 = $3_1;
           i64toi32_i32$0 = 0;
           HEAP32[($3_1 + 16 | 0) >> 2] = 0;
           HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $5_1 = ($4_1 << 2 | 0) + 26936 | 0;
           label$95 : {
            label$96 : {
             $7_1 = HEAP32[(0 + 26636 | 0) >> 2] | 0;
             $8_1 = 1 << $4_1 | 0;
             if ($7_1 & $8_1 | 0) {
              break label$96
             }
             HEAP32[(0 + 26636 | 0) >> 2] = $7_1 | $8_1 | 0;
             HEAP32[$5_1 >> 2] = $3_1;
             HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
             break label$95;
            }
            $4_1 = $0_1 << (($4_1 | 0) == (31 | 0) ? 0 : 25 - ($4_1 >>> 1 | 0) | 0) | 0;
            $7_1 = HEAP32[$5_1 >> 2] | 0;
            label$97 : while (1) {
             $5_1 = $7_1;
             if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
              break label$70
             }
             $7_1 = $4_1 >>> 29 | 0;
             $4_1 = $4_1 << 1 | 0;
             $8_1 = ($5_1 + ($7_1 & 4 | 0) | 0) + 16 | 0;
             $7_1 = HEAP32[$8_1 >> 2] | 0;
             if ($7_1) {
              continue label$97
             }
             break label$97;
            };
            HEAP32[$8_1 >> 2] = $3_1;
            HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
           }
           HEAP32[($3_1 + 12 | 0) >> 2] = $3_1;
           HEAP32[($3_1 + 8 | 0) >> 2] = $3_1;
           break label$69;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($7_1 + 8 | 0) & 7 | 0 ? (-8 - $7_1 | 0) & 7 | 0 : 0;
          $11_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 26644 | 0) >> 2] = $11_1;
          $8_1 = $7_1 + $8_1 | 0;
          HEAP32[(0 + 26656 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $11_1 | 1 | 0;
          HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 26660 | 0) >> 2] = HEAP32[(0 + 27120 | 0) >> 2] | 0;
          $0_1 = ($5_1 + (($5_1 + -39 | 0) & 7 | 0 ? (39 - $5_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 27088 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 27092 | 0) >> 2] | 0;
          $1292_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1292_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 27080 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 27084 | 0) >> 2] | 0;
          $1294_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1294_1;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 27088 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 27084 | 0) >> 2] = $2_1;
          HEAP32[(0 + 27080 | 0) >> 2] = $7_1;
          HEAP32[(0 + 27092 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$98 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $7_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($7_1 >>> 0 < $5_1 >>> 0) {
            continue label$98
           }
           break label$98;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$59
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $7_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $7_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $7_1;
          label$99 : {
           if ($7_1 >>> 0 > 255 >>> 0) {
            break label$99
           }
           $0_1 = ($7_1 & -8 | 0) + 26672 | 0;
           label$100 : {
            label$101 : {
             $5_1 = HEAP32[(0 + 26632 | 0) >> 2] | 0;
             $7_1 = 1 << ($7_1 >>> 3 | 0) | 0;
             if ($5_1 & $7_1 | 0) {
              break label$101
             }
             HEAP32[(0 + 26632 | 0) >> 2] = $5_1 | $7_1 | 0;
             $5_1 = $0_1;
             break label$100;
            }
            $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
           break label$59;
          }
          $0_1 = 31;
          label$102 : {
           if ($7_1 >>> 0 > 16777215 >>> 0) {
            break label$102
           }
           $0_1 = $7_1 >>> 8 | 0;
           $1354_1 = $0_1;
           $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $5_1 = $1354_1 << $0_1 | 0;
           $1361_1 = $5_1;
           $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $8_1 = $1361_1 << $5_1 | 0;
           $1368_1 = $8_1;
           $8_1 = (($8_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1368_1 << $8_1 | 0) >>> 15 | 0) - ($0_1 | $5_1 | 0 | $8_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($7_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          $5_1 = ($0_1 << 2 | 0) + 26936 | 0;
          label$103 : {
           label$104 : {
            $8_1 = HEAP32[(0 + 26636 | 0) >> 2] | 0;
            $2_1 = 1 << $0_1 | 0;
            if ($8_1 & $2_1 | 0) {
             break label$104
            }
            HEAP32[(0 + 26636 | 0) >> 2] = $8_1 | $2_1 | 0;
            HEAP32[$5_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
            break label$103;
           }
           $0_1 = $7_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $8_1 = HEAP32[$5_1 >> 2] | 0;
           label$105 : while (1) {
            $5_1 = $8_1;
            if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($7_1 | 0)) {
             break label$68
            }
            $8_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $2_1 = ($5_1 + ($8_1 & 4 | 0) | 0) + 16 | 0;
            $8_1 = HEAP32[$2_1 >> 2] | 0;
            if ($8_1) {
             continue label$105
            }
            break label$105;
           };
           HEAP32[$2_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$59;
         }
         $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($5_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 24 | 0) >> 2] = 0;
         HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $11_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 26644 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 26644 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 26656 | 0) >> 2] | 0;
      $5_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 26656 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$1;
     }
     HEAP32[($1882() | 0) >> 2] = 48;
     $0_1 = 0;
     break label$1;
    }
    label$106 : {
     if (!$11_1) {
      break label$106
     }
     label$107 : {
      label$108 : {
       $5_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($5_1 << 2 | 0) + 26936 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$108
       }
       HEAP32[$0_1 >> 2] = $7_1;
       if ($7_1) {
        break label$107
       }
       $6_1 = $6_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       HEAP32[(0 + 26636 | 0) >> 2] = $6_1;
       break label$106;
      }
      HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $7_1;
      if (!$7_1) {
       break label$106
      }
     }
     HEAP32[($7_1 + 24 | 0) >> 2] = $11_1;
     label$109 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$109
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $7_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$106
     }
     HEAP32[($7_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $7_1;
    }
    label$110 : {
     label$111 : {
      if ($4_1 >>> 0 > 15 >>> 0) {
       break label$111
      }
      $0_1 = $4_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$110;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     $7_1 = $8_1 + $3_1 | 0;
     HEAP32[($7_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
     HEAP32[($7_1 + $4_1 | 0) >> 2] = $4_1;
     label$112 : {
      if ($4_1 >>> 0 > 255 >>> 0) {
       break label$112
      }
      $0_1 = ($4_1 & -8 | 0) + 26672 | 0;
      label$113 : {
       label$114 : {
        $5_1 = HEAP32[(0 + 26632 | 0) >> 2] | 0;
        $4_1 = 1 << ($4_1 >>> 3 | 0) | 0;
        if ($5_1 & $4_1 | 0) {
         break label$114
        }
        HEAP32[(0 + 26632 | 0) >> 2] = $5_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$113;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $7_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $7_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
      break label$110;
     }
     $0_1 = 31;
     label$115 : {
      if ($4_1 >>> 0 > 16777215 >>> 0) {
       break label$115
      }
      $0_1 = $4_1 >>> 8 | 0;
      $1599_1 = $0_1;
      $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $5_1 = $1599_1 << $0_1 | 0;
      $1606_1 = $5_1;
      $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1606_1 << $5_1 | 0;
      $1613_1 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1613_1 << $3_1 | 0) >>> 15 | 0) - ($0_1 | $5_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($4_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$0 = 0;
     HEAP32[($7_1 + 16 | 0) >> 2] = 0;
     HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $5_1 = ($0_1 << 2 | 0) + 26936 | 0;
     label$116 : {
      label$117 : {
       label$118 : {
        $3_1 = 1 << $0_1 | 0;
        if ($6_1 & $3_1 | 0) {
         break label$118
        }
        HEAP32[(0 + 26636 | 0) >> 2] = $6_1 | $3_1 | 0;
        HEAP32[$5_1 >> 2] = $7_1;
        HEAP32[($7_1 + 24 | 0) >> 2] = $5_1;
        break label$117;
       }
       $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$5_1 >> 2] | 0;
       label$119 : while (1) {
        $5_1 = $3_1;
        if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
         break label$116
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $2_1 = ($5_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$2_1 >> 2] | 0;
        if ($3_1) {
         continue label$119
        }
        break label$119;
       };
       HEAP32[$2_1 >> 2] = $7_1;
       HEAP32[($7_1 + 24 | 0) >> 2] = $5_1;
      }
      HEAP32[($7_1 + 12 | 0) >> 2] = $7_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $7_1;
      break label$110;
     }
     $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $7_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $7_1;
     HEAP32[($7_1 + 24 | 0) >> 2] = 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($7_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$120 : {
    if (!$10_1) {
     break label$120
    }
    label$121 : {
     label$122 : {
      $5_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($5_1 << 2 | 0) + 26936 | 0;
      if (($7_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$122
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$121
      }
      HEAP32[(0 + 26636 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
      break label$120;
     }
     HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($7_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$120
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $10_1;
    label$123 : {
     $0_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$123
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$120
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$124 : {
    label$125 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$125
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($7_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $7_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$124;
    }
    HEAP32[($7_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    $5_1 = $7_1 + $3_1 | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($5_1 + $4_1 | 0) >> 2] = $4_1;
    label$126 : {
     if (!$6_1) {
      break label$126
     }
     $3_1 = ($6_1 & -8 | 0) + 26672 | 0;
     $0_1 = HEAP32[(0 + 26652 | 0) >> 2] | 0;
     label$127 : {
      label$128 : {
       $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
       if ($8_1 & $2_1 | 0) {
        break label$128
       }
       HEAP32[(0 + 26632 | 0) >> 2] = $8_1 | $2_1 | 0;
       $8_1 = $3_1;
       break label$127;
      }
      $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($8_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
    }
    HEAP32[(0 + 26652 | 0) >> 2] = $5_1;
    HEAP32[(0 + 26640 | 0) >> 2] = $4_1;
   }
   $0_1 = $7_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1828($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $6_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $378_1 = 0, $385_1 = 0, $392_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 26648 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if (($1_1 | 0) == (HEAP32[(0 + 26652 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      $5_1 = $2_1 >>> 3 | 0;
      $6_1 = ($5_1 << 3 | 0) + 26672 | 0;
      label$5 : {
       $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($2_1 | 0) != ($4_1 | 0)) {
        break label$5
       }
       HEAP32[(0 + 26632 | 0) >> 2] = (HEAP32[(0 + 26632 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $6_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($1_1 | 0)) {
        break label$7
       }
       $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
       break label$6;
      }
      label$8 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $6_1 = 0;
       break label$6;
      }
      label$9 : while (1) {
       $5_1 = $2_1;
       $6_1 = $4_1;
       $2_1 = $6_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       $2_1 = $6_1 + 16 | 0;
       $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       break label$9;
      };
      HEAP32[$5_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$10 : {
      label$11 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 26936 | 0;
       if (($1_1 | 0) != (HEAP32[$2_1 >> 2] | 0 | 0)) {
        break label$11
       }
       HEAP32[$2_1 >> 2] = $6_1;
       if ($6_1) {
        break label$10
       }
       HEAP32[(0 + 26636 | 0) >> 2] = (HEAP32[(0 + 26636 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$2
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
     label$12 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$12
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 26640 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($1_1 >>> 0 >= $3_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$13 : {
    label$14 : {
     if ($2_1 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if (($3_1 | 0) != (HEAP32[(0 + 26656 | 0) >> 2] | 0 | 0)) {
       break label$15
      }
      HEAP32[(0 + 26656 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 26644 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 26644 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 26652 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 26640 | 0) >> 2] = 0;
      HEAP32[(0 + 26652 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if (($3_1 | 0) != (HEAP32[(0 + 26652 | 0) >> 2] | 0 | 0)) {
       break label$16
      }
      HEAP32[(0 + 26652 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 26640 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 26640 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$17 : {
      label$18 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       $5_1 = $2_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 26672 | 0;
       label$19 : {
        $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($2_1 | 0) != ($4_1 | 0)) {
         break label$19
        }
        HEAP32[(0 + 26632 | 0) >> 2] = (HEAP32[(0 + 26632 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 26648 | 0) >> 2] | 0;
        HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
        break label$20;
       }
       label$22 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $6_1 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5_1 = $2_1;
        $6_1 = $4_1;
        $2_1 = $6_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        $2_1 = $6_1 + 16 | 0;
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 26936 | 0;
        if (($3_1 | 0) != (HEAP32[$2_1 >> 2] | 0 | 0)) {
         break label$25
        }
        HEAP32[$2_1 >> 2] = $6_1;
        if ($6_1) {
         break label$24
        }
        HEAP32[(0 + 26636 | 0) >> 2] = (HEAP32[(0 + 26636 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$17
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$26 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$26
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$17
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 26652 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 26640 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$27 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $2_1 = ($0_1 & -8 | 0) + 26672 | 0;
    label$28 : {
     label$29 : {
      $4_1 = HEAP32[(0 + 26632 | 0) >> 2] | 0;
      $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
      if ($4_1 & $0_1 | 0) {
       break label$29
      }
      HEAP32[(0 + 26632 | 0) >> 2] = $4_1 | $0_1 | 0;
      $0_1 = $2_1;
      break label$28;
     }
     $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $2_1 = 31;
   label$30 : {
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $2_1 = $0_1 >>> 8 | 0;
    $378_1 = $2_1;
    $2_1 = (($2_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $378_1 << $2_1 | 0;
    $385_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $385_1 << $4_1 | 0;
    $392_1 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($392_1 << $6_1 | 0) >>> 15 | 0) - ($2_1 | $4_1 | 0 | $6_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   $4_1 = ($2_1 << 2 | 0) + 26936 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      label$34 : {
       $6_1 = HEAP32[(0 + 26636 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($6_1 & $3_1 | 0) {
        break label$34
       }
       HEAP32[(0 + 26636 | 0) >> 2] = $6_1 | $3_1 | 0;
       HEAP32[$4_1 >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
       break label$33;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $6_1 = HEAP32[$4_1 >> 2] | 0;
      label$35 : while (1) {
       $4_1 = $6_1;
       if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$32
       }
       $6_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
       $6_1 = HEAP32[$3_1 >> 2] | 0;
       if ($6_1) {
        continue label$35
       }
       break label$35;
      };
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$31;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 26664 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 26664 | 0) >> 2] = $1_1 ? $1_1 : -1;
  }
 }
 
 function $1829($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return $1827($1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   HEAP32[($1882() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$3 : {
   $2_1 = $1830($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   return $2_1 + 8 | 0 | 0;
  }
  label$4 : {
   $2_1 = $1827($1_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
  $1798($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $1828($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $1830($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $2_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $8_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = $2_1 & -8 | 0;
  label$1 : {
   label$2 : {
    if ($2_1 & 3 | 0) {
     break label$2
    }
    label$3 : {
     if ($1_1 >>> 0 >= 256 >>> 0) {
      break label$3
     }
     return 0 | 0;
    }
    label$4 : {
     if ($3_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
      break label$4
     }
     $4_1 = $0_1;
     if (($3_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 27112 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$1
     }
    }
    return 0 | 0;
   }
   $5_1 = $0_1 + $3_1 | 0;
   label$5 : {
    label$6 : {
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$6
     }
     $3_1 = $3_1 - $1_1 | 0;
     if ($3_1 >>> 0 < 16 >>> 0) {
      break label$5
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $1_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     $1831($1_1 | 0, $3_1 | 0);
     break label$5;
    }
    $4_1 = 0;
    label$7 : {
     if (($5_1 | 0) != (HEAP32[(0 + 26656 | 0) >> 2] | 0 | 0)) {
      break label$7
     }
     $3_1 = (HEAP32[(0 + 26644 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 <= $1_1 >>> 0) {
      break label$1
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $2_1 = $0_1 + $1_1 | 0;
     $1_1 = $3_1 - $1_1 | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[(0 + 26644 | 0) >> 2] = $1_1;
     HEAP32[(0 + 26656 | 0) >> 2] = $2_1;
     break label$5;
    }
    label$8 : {
     if (($5_1 | 0) != (HEAP32[(0 + 26652 | 0) >> 2] | 0 | 0)) {
      break label$8
     }
     $4_1 = 0;
     $3_1 = (HEAP32[(0 + 26640 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$1
     }
     label$9 : {
      label$10 : {
       $4_1 = $3_1 - $1_1 | 0;
       if ($4_1 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
       $3_1 = $0_1 + $3_1 | 0;
       HEAP32[$3_1 >> 2] = $4_1;
       HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $3_1 | 0 | 2 | 0;
      $1_1 = $0_1 + $3_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $4_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 26652 | 0) >> 2] = $1_1;
     HEAP32[(0 + 26640 | 0) >> 2] = $4_1;
     break label$5;
    }
    $4_1 = 0;
    $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    if ($6_1 & 2 | 0) {
     break label$1
    }
    $7_1 = ($6_1 & -8 | 0) + $3_1 | 0;
    if ($7_1 >>> 0 < $1_1 >>> 0) {
     break label$1
    }
    $8_1 = $7_1 - $1_1 | 0;
    label$11 : {
     label$12 : {
      if ($6_1 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
      $9_1 = $6_1 >>> 3 | 0;
      $6_1 = ($9_1 << 3 | 0) + 26672 | 0;
      label$13 : {
       $4_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($4_1 | 0) != ($3_1 | 0)) {
        break label$13
       }
       HEAP32[(0 + 26632 | 0) >> 2] = (HEAP32[(0 + 26632 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
      break label$11;
     }
     $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     label$14 : {
      label$15 : {
       $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($5_1 | 0)) {
        break label$15
       }
       $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[(0 + 26648 | 0) >> 2] | 0;
       HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
       break label$14;
      }
      label$16 : {
       $3_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$16
       }
       $3_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$16
       }
       $6_1 = 0;
       break label$14;
      }
      label$17 : while (1) {
       $9_1 = $3_1;
       $6_1 = $4_1;
       $3_1 = $6_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        continue label$17
       }
       $3_1 = $6_1 + 16 | 0;
       $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$17
       }
       break label$17;
      };
      HEAP32[$9_1 >> 2] = 0;
     }
     if (!$10_1) {
      break label$11
     }
     label$18 : {
      label$19 : {
       $4_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($4_1 << 2 | 0) + 26936 | 0;
       if (($5_1 | 0) != (HEAP32[$3_1 >> 2] | 0 | 0)) {
        break label$19
       }
       HEAP32[$3_1 >> 2] = $6_1;
       if ($6_1) {
        break label$18
       }
       HEAP32[(0 + 26636 | 0) >> 2] = (HEAP32[(0 + 26636 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$11
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $10_1;
     label$20 : {
      $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$20
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     $3_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$11
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
    }
    label$21 : {
     if ($8_1 >>> 0 > 15 >>> 0) {
      break label$21
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $7_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $7_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$5;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 | 3 | 0;
    $3_1 = $0_1 + $7_1 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $1831($1_1 | 0, $8_1 | 0);
   }
   $4_1 = $0_1;
  }
  return $4_1 | 0;
 }
 
 function $1831($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0, $7_1 = 0, $359_1 = 0, $366_1 = 0, $373_1 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 3 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $3_1 + $1_1 | 0;
    label$3 : {
     label$4 : {
      $0_1 = $0_1 - $3_1 | 0;
      if (($0_1 | 0) == (HEAP32[(0 + 26652 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      label$5 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$5
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       $5_1 = $3_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 26672 | 0;
       $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (($3_1 | 0) != ($4_1 | 0)) {
        break label$3
       }
       HEAP32[(0 + 26632 | 0) >> 2] = (HEAP32[(0 + 26632 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      label$6 : {
       label$7 : {
        $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($0_1 | 0)) {
         break label$7
        }
        $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 26648 | 0) >> 2] | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$6;
       }
       label$8 : {
        $3_1 = $0_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         break label$8
        }
        $3_1 = $0_1 + 16 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         break label$8
        }
        $6_1 = 0;
        break label$6;
       }
       label$9 : while (1) {
        $5_1 = $3_1;
        $6_1 = $4_1;
        $3_1 = $6_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         continue label$9
        }
        $3_1 = $6_1 + 16 | 0;
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$9
        }
        break label$9;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$2
      }
      label$10 : {
       label$11 : {
        $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($4_1 << 2 | 0) + 26936 | 0;
        if (($0_1 | 0) != (HEAP32[$3_1 >> 2] | 0 | 0)) {
         break label$11
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$10
        }
        HEAP32[(0 + 26636 | 0) >> 2] = (HEAP32[(0 + 26636 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$2;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$2
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$12 : {
       $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$12
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$2
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      break label$2;
     }
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
      break label$2
     }
     HEAP32[(0 + 26640 | 0) >> 2] = $1_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[$2_1 >> 2] = $1_1;
     return;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
   }
   label$13 : {
    label$14 : {
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if ($3_1 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if (($2_1 | 0) != (HEAP32[(0 + 26656 | 0) >> 2] | 0 | 0)) {
       break label$15
      }
      HEAP32[(0 + 26656 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 26644 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 26644 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      if (($0_1 | 0) != (HEAP32[(0 + 26652 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 26640 | 0) >> 2] = 0;
      HEAP32[(0 + 26652 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if (($2_1 | 0) != (HEAP32[(0 + 26652 | 0) >> 2] | 0 | 0)) {
       break label$16
      }
      HEAP32[(0 + 26652 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 26640 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 26640 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
      return;
     }
     $1_1 = ($3_1 & -8 | 0) + $1_1 | 0;
     label$17 : {
      label$18 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
       $5_1 = $3_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 26672 | 0;
       label$19 : {
        $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($3_1 | 0) != ($4_1 | 0)) {
         break label$19
        }
        HEAP32[(0 + 26632 | 0) >> 2] = (HEAP32[(0 + 26632 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($2_1 | 0)) {
         break label$21
        }
        $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 26648 | 0) >> 2] | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$20;
       }
       label$22 : {
        $4_1 = $2_1 + 20 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         break label$22
        }
        $4_1 = $2_1 + 16 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         break label$22
        }
        $6_1 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5_1 = $4_1;
        $6_1 = $3_1;
        $4_1 = $3_1 + 20 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         continue label$23
        }
        $4_1 = $6_1 + 16 | 0;
        $3_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($3_1) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($4_1 << 2 | 0) + 26936 | 0;
        if (($2_1 | 0) != (HEAP32[$3_1 >> 2] | 0 | 0)) {
         break label$25
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$24
        }
        HEAP32[(0 + 26636 | 0) >> 2] = (HEAP32[(0 + 26636 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$17
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$26 : {
       $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$26
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$17
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
     if (($0_1 | 0) != (HEAP32[(0 + 26652 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 26640 | 0) >> 2] = $1_1;
     return;
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
   }
   label$27 : {
    if ($1_1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $3_1 = ($1_1 & -8 | 0) + 26672 | 0;
    label$28 : {
     label$29 : {
      $4_1 = HEAP32[(0 + 26632 | 0) >> 2] | 0;
      $1_1 = 1 << ($1_1 >>> 3 | 0) | 0;
      if ($4_1 & $1_1 | 0) {
       break label$29
      }
      HEAP32[(0 + 26632 | 0) >> 2] = $4_1 | $1_1 | 0;
      $1_1 = $3_1;
      break label$28;
     }
     $1_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    return;
   }
   $3_1 = 31;
   label$30 : {
    if ($1_1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $3_1 = $1_1 >>> 8 | 0;
    $359_1 = $3_1;
    $3_1 = (($3_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $359_1 << $3_1 | 0;
    $366_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $366_1 << $4_1 | 0;
    $373_1 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $3_1 = (($373_1 << $6_1 | 0) >>> 15 | 0) - ($3_1 | $4_1 | 0 | $6_1 | 0) | 0;
    $3_1 = ($3_1 << 1 | 0 | (($1_1 >>> ($3_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   $4_1 = ($3_1 << 2 | 0) + 26936 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      $6_1 = HEAP32[(0 + 26636 | 0) >> 2] | 0;
      $2_1 = 1 << $3_1 | 0;
      if ($6_1 & $2_1 | 0) {
       break label$33
      }
      HEAP32[(0 + 26636 | 0) >> 2] = $6_1 | $2_1 | 0;
      HEAP32[$4_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
      break label$32;
     }
     $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
     $6_1 = HEAP32[$4_1 >> 2] | 0;
     label$34 : while (1) {
      $4_1 = $6_1;
      if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
       break label$31
      }
      $6_1 = $3_1 >>> 29 | 0;
      $3_1 = $3_1 << 1 | 0;
      $2_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
      $6_1 = HEAP32[$2_1 >> 2] | 0;
      if ($6_1) {
       continue label$34
      }
      break label$34;
     };
     HEAP32[$2_1 >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $1832($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[(0 + 25744 | 0) >> 2] | 0;
  $2_1 = ($0_1 + 7 | 0) & -8 | 0;
  $0_1 = $1_1 + $2_1 | 0;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    if ($0_1 >>> 0 <= $1_1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0_1 >>> 0 <= ($1974() | 0) >>> 0) {
     break label$3
    }
    if (!(fimport$12($0_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 25744 | 0) >> 2] = $0_1;
   return $1_1 | 0;
  }
  HEAP32[($1882() | 0) >> 2] = 48;
  return -1 | 0;
 }
 
 function $1833($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    $4_1 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4_1 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $1834($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $1835($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $1836($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$6 = 0, $13$hi = 0, $10$hi = 0, $13_1 = 0, $10_1 = 0, $16$hi = 0, $15$hi = 0, $12$hi = 0, $17$hi = 0, $21$hi = 0, $15_1 = 0, $11$hi = 0, $12_1 = 0, $6_1 = 0, $16_1 = 0, $11_1 = 0, $21_1 = 0, $14$hi = 0, $8_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $18_1 = 0, $22_1 = 0, $22$hi = 0, $24$hi = 0, $9_1 = 0, $19_1 = 0, $19$hi = 0, $322_1 = 0, $323_1 = 0, $7_1 = 0, $324_1 = 0, $325_1 = 0, $326_1 = 0, $327_1 = 0, $328_1 = 0, $329_1 = 0, $331_1 = 0, $332_1 = 0, $333_1 = 0, $334_1 = 0, $336_1 = 0, $337_1 = 0, $338_1 = 0, $339_1 = 0, $341_1 = 0, $342_1 = 0, $344_1 = 0, $345_1 = 0, $20_1 = 0, $20$hi = 0, $346_1 = 0, $347_1 = 0, $348_1 = 0, $350_1 = 0, $351_1 = 0, $352_1 = 0, $353_1 = 0, $355_1 = 0, $23_1 = 0, $23$hi = 0, $356_1 = 0, $357_1 = 0, $358_1 = 0, $359_1 = 0, $24_1 = 0, $360_1 = 0, $362_1 = 0, $363_1 = 0, $364_1 = 0, $365_1 = 0, $368_1 = 0, $369_1 = 0, $371_1 = 0, $372_1 = 0, $374_1 = 0, $375_1 = 0, $376_1 = 0, $377_1 = 0, $378_1 = 0, $380_1 = 0, $381_1 = 0, $382_1 = 0, $51_1 = 0, $55_1 = 0, $62_1 = 0, $66_1 = 0, $75_1 = 0, $75$hi = 0, $80_1 = 0, $80$hi = 0, $88_1 = 0, $88$hi = 0, $110_1 = 0, $111_1 = 0, $111$hi = 0, $112_1 = 0, $112$hi = 0, $119$hi = 0, $122$hi = 0, $137_1 = 0, $138_1 = 0, $138$hi = 0, $139_1 = 0, $139$hi = 0, $146$hi = 0, $149$hi = 0, $164_1 = 0, $166_1 = 0, $166$hi = 0, $170$hi = 0, $181_1 = 0, $181$hi = 0, $182$hi = 0, $185_1 = 0, $188_1 = 0, $188$hi = 0, $193$hi = 0, $203_1 = 0, $203$hi = 0, $204$hi = 0, $206_1 = 0, $209_1 = 0, $209$hi = 0, $214$hi = 0, $224_1 = 0, $224$hi = 0, $225$hi = 0, $227_1 = 0, $230_1 = 0, $230$hi = 0, $235$hi = 0, $245_1 = 0, $245$hi = 0, $246$hi = 0, $248_1 = 0, $249_1 = 0, $249$hi = 0, $252_1 = 0, $252$hi = 0, $257$hi = 0, $262_1 = 0, $264$hi = 0, $267_1 = 0, $268_1 = 0, $268$hi = 0, $272_1 = 0, $272$hi = 0, $279_1 = 0, $279$hi = 0, $283_1 = 0, $284$hi = 0, $285$hi = 0, $287_1 = 0, $288$hi = 0, $289$hi = 0, $290$hi = 0, $294$hi = 0, $305_1 = 0, $305$hi = 0, $308_1 = 0, $308$hi = 0, $314$hi = 0, $315_1 = 0, $315$hi = 0, $321_1 = 0, $321$hi = 0, $330_1 = 0, $330$hi = 0, $335_1 = 0, $335$hi = 0, $340_1 = 0, $340$hi = 0, $342$hi = 0, $343_1 = 0, $343$hi = 0, $345$hi = 0, $346$hi = 0, $349_1 = 0, $350$hi = 0, $351$hi = 0, $354_1 = 0, $355$hi = 0, $361_1 = 0, $361$hi = 0, $366_1 = 0, $366$hi = 0, $367_1 = 0, $367$hi = 0, $370_1 = 0, $370$hi = 0, $373_1 = 0, $373$hi = 0, $375$hi = 0, $379_1 = 0, $379$hi = 0, $383_1 = 0, $384$hi = 0, $385$hi = 0, $388_1 = 0, $388$hi = 0, $389_1 = 0, $389$hi = 0, $396_1 = 0, $396$hi = 0, $402_1 = 0, $402$hi = 0, $404$hi = 0, $405_1 = 0, $405$hi = 0, $406_1 = 0, $406$hi = 0, $407_1 = 0, $407$hi = 0, $409$hi = 0, $413_1 = 0, $414$hi = 0, $415_1 = 0, $415$hi = 0, $416_1 = 0, $416$hi = 0, $425_1 = 0, $425$hi = 0, $429_1 = 0, $430_1 = 0, $430$hi = 0, $436_1 = 0, $436$hi = 0, $440_1 = 0, $441$hi = 0, $442$hi = 0, $446_1 = 0, $447$hi = 0, $448_1 = 0, $448$hi = 0, $449_1 = 0, $449$hi = 0, $456_1 = 0, $456$hi = 0, $461_1 = 0, $461$hi = 0, $466_1 = 0, $466$hi = 0, $469_1 = 0, $469$hi = 0, $472_1 = 0, $473$hi = 0, $476_1 = 0, $477$hi = 0, $478$hi = 0, $481_1 = 0, $482$hi = 0, $484$hi = 0, $485_1 = 0, $485$hi = 0, $489_1 = 0, $490$hi = 0, $491_1 = 0, $491$hi = 0, $492_1 = 0, $492$hi = 0, $493_1 = 0, $493$hi = 0, $500_1 = 0, $500$hi = 0, $503_1 = 0, $503$hi = 0, $506_1 = 0, $508$hi = 0, $509_1 = 0, $509$hi = 0, $514_1 = 0, $514$hi = 0, $515_1 = 0, $515$hi = 0, $517$hi = 0, $518$hi = 0, $520_1 = 0, $521$hi = 0, $522$hi = 0, $526_1 = 0, $527$hi = 0, $541$hi = 0, $545_1 = 0, $545$hi = 0, $546$hi = 0, $550_1 = 0, $551$hi = 0, $558_1 = 0, $560_1 = 0, $560$hi = 0, $562$hi = 0, $564_1 = 0, $564$hi = 0, $571$hi = 0, $575_1 = 0, $575$hi = 0, $576$hi = 0, $580_1 = 0, $581$hi = 0, $595_1 = 0, $595$hi = 0, $597$hi = 0, $601$hi = 0, $603_1 = 0, $603$hi = 0, $636_1 = 0, $636$hi = 0, $641_1 = 0, $641$hi = 0, $645$hi = 0, $646_1 = 0, $646$hi = 0, $647_1 = 0, $647$hi = 0, $650_1 = 0, $650$hi = 0, $654_1 = 0, $655$hi = 0, $667_1 = 0, $667$hi = 0, $668_1 = 0, $668$hi = 0, $676_1 = 0, $680_1 = 0, $681$hi = 0, $685_1 = 0, $689_1 = 0, $690$hi = 0, $694_1 = 0, $695$hi = 0, $697_1 = 0, $697$hi = 0, $700_1 = 0, $703_1 = 0, $703$hi = 0, $704_1 = 0, $711_1 = 0, $716_1 = 0, $717$hi = 0, $721_1 = 0, $722$hi = 0, $724_1 = 0, $724$hi = 0, $727_1 = 0, $730_1 = 0, $730$hi = 0, $731_1 = 0, $737_1 = 0, $742_1 = 0, $743$hi = 0, $747_1 = 0, $748$hi = 0, $749$hi = 0;
  $5_1 = global$0 - 336 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $322_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $322_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $322_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $323_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $323_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $323_1 & 32767 | 0;
     if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$0 = $1$hi;
     $51_1 = !($1_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $13_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     $55_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $51_1 : $55_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $12$hi = i64toi32_i32$0;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$0 = $3$hi;
     $62_1 = !($3_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     $66_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $62_1 : $66_1) {
      break label$5
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $75_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
     $75$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = $75$hi;
     i64toi32_i32$2 = $75_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $80_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $80$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $80$hi;
      i64toi32_i32$0 = $80_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 2147450880;
      $12_1 = 0;
      $12$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$3;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $88_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $88$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $88$hi;
     i64toi32_i32$0 = $88_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$9 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$9
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = !(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = 2147450880;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$0 = i64toi32_i32$4 ? 0 : $12_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
     $12_1 = i64toi32_i32$0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$3 = $12_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    $8_1 = 0;
    label$11 : {
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$4 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$11
     }
     $110_1 = $5_1 + 320 | 0;
     i64toi32_i32$1 = $1$hi;
     $111_1 = $1_1;
     $111$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     $112_1 = $11_1;
     $112$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $11$hi;
     $8_1 = !($11_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$2 = $8_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$3 = i64toi32_i32$2 ? $1_1 : $11_1;
     i64toi32_i32$4 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$0;
     i64toi32_i32$0 = Math_clz32(i64toi32_i32$4);
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) == (32 | 0)) {
      $324_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $324_1 = i64toi32_i32$0
     }
     $119$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $122$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $119$hi;
     i64toi32_i32$3 = $324_1;
     i64toi32_i32$4 = $122$hi;
     i64toi32_i32$0 = $8_1 << 6 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$1;
     i64toi32_i32$5 = $111$hi;
     i64toi32_i32$3 = $112$hi;
     $1835($110_1 | 0, $111_1 | 0, i64toi32_i32$5 | 0, $112_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$1 | 0;
     i64toi32_i32$2 = $5_1 + 328 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 320 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 324 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$5;
     $1$hi = i64toi32_i32$3;
    }
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$2
    }
    $137_1 = $5_1 + 304 | 0;
    i64toi32_i32$2 = $3$hi;
    $138_1 = $3_1;
    $138$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    $139_1 = $10_1;
    $139$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    $9_1 = !($10_1 | i64toi32_i32$2 | 0);
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $10_1;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
    i64toi32_i32$3 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$3 | 0) == (32 | 0)) {
     $325_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
    } else {
     $325_1 = i64toi32_i32$3
    }
    $146$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $149$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $146$hi;
    i64toi32_i32$5 = $325_1;
    i64toi32_i32$0 = $149$hi;
    i64toi32_i32$3 = $9_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $9_1 = i64toi32_i32$2;
    i64toi32_i32$1 = $138$hi;
    i64toi32_i32$5 = $139$hi;
    $1835($137_1 | 0, $138_1 | 0, i64toi32_i32$1 | 0, $139_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = (i64toi32_i32$2 + $8_1 | 0) + -16 | 0;
    i64toi32_i32$4 = $5_1 + 312 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$5;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$5;
   }
   $164_1 = $5_1 + 288 | 0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 49;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $326_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    $326_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $166_1 = $326_1;
   $166$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$5 = $10_1;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $14_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$4;
   i64toi32_i32$1 = $14_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 15;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $327_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $327_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $170$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $166$hi;
   i64toi32_i32$4 = $166_1;
   i64toi32_i32$1 = $170$hi;
   i64toi32_i32$3 = $327_1;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 1963258675;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = 0;
   $1839($164_1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$5 = ($5_1 + 288 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $181_1 = i64toi32_i32$3;
   $181$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $181$hi;
   i64toi32_i32$2 = $181_1;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
   $182$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $182$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = 0;
   $1839($5_1 + 272 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $185_1 = $5_1 + 256 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 63;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $328_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    $328_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $188_1 = $328_1;
   $188$hi = i64toi32_i32$2;
   i64toi32_i32$1 = ($5_1 + 272 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
    $329_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $329_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
   }
   $193$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $188$hi;
   i64toi32_i32$5 = $188_1;
   i64toi32_i32$1 = $193$hi;
   i64toi32_i32$0 = $329_1;
   i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = 0;
   $1839($185_1 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$5 = ($5_1 + 256 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $203_1 = i64toi32_i32$0;
   $203$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $203$hi;
   i64toi32_i32$1 = $203_1;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
   $204$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $204$hi;
   i64toi32_i32$1 = 0;
   $1839($5_1 + 240 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   $206_1 = $5_1 + 224 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 63;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $331_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $331_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $209_1 = $331_1;
   $209$hi = i64toi32_i32$1;
   i64toi32_i32$2 = ($5_1 + 240 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $332_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $332_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $214$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $209$hi;
   i64toi32_i32$5 = $209_1;
   i64toi32_i32$2 = $214$hi;
   i64toi32_i32$4 = $332_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$4 = 0;
   $1839($206_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$5 = ($5_1 + 224 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $224_1 = i64toi32_i32$4;
   $224$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $224$hi;
   i64toi32_i32$2 = $224_1;
   i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   $225$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $225$hi;
   i64toi32_i32$2 = 0;
   $1839($5_1 + 208 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $227_1 = $5_1 + 192 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 208 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 212 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $333_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $333_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $230_1 = $333_1;
   $230$hi = i64toi32_i32$2;
   i64toi32_i32$1 = ($5_1 + 208 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $334_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $334_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $235$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $230$hi;
   i64toi32_i32$5 = $230_1;
   i64toi32_i32$1 = $235$hi;
   i64toi32_i32$3 = $334_1;
   i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = 0;
   $1839($227_1 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$5 = ($5_1 + 192 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $245_1 = i64toi32_i32$3;
   $245$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $245$hi;
   i64toi32_i32$1 = $245_1;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
   i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
   $246$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $246$hi;
   i64toi32_i32$1 = 0;
   $1839($5_1 + 176 | 0 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   $248_1 = $5_1 + 160 | 0;
   i64toi32_i32$1 = $2$hi;
   $249_1 = $2_1;
   $249$hi = i64toi32_i32$1;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 63;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $336_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $336_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $252_1 = $336_1;
   $252$hi = i64toi32_i32$1;
   i64toi32_i32$2 = ($5_1 + 176 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $337_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $337_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $257$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $252$hi;
   i64toi32_i32$5 = $252_1;
   i64toi32_i32$2 = $257$hi;
   i64toi32_i32$0 = $337_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $249$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = 0;
   $1839($248_1 | 0, $249_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $262_1 = $5_1 + 144 | 0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
    $338_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
    $338_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
   }
   $264$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $264$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$4 = 0;
   $1839($262_1 | 0, $338_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
   $267_1 = $5_1 + 112 | 0;
   i64toi32_i32$4 = i64toi32_i32$0;
   $268_1 = $4_1;
   $268$hi = i64toi32_i32$0;
   i64toi32_i32$1 = ($5_1 + 160 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $272_1 = i64toi32_i32$4;
   $272$hi = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $279_1 = i64toi32_i32$4;
   $279$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$4 = $279$hi;
   i64toi32_i32$2 = $279_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   $283_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $284$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $272$hi;
   i64toi32_i32$2 = $272_1;
   i64toi32_i32$3 = $284$hi;
   i64toi32_i32$1 = $283_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $285$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   $287_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $288$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $285$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$5 = $288$hi;
   i64toi32_i32$2 = $287_1;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $289$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $289$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   $290$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $268$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = $290$hi;
   i64toi32_i32$2 = 0;
   $1839($267_1 | 0, $268_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $294$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $294$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = 0;
   $1839($5_1 + 128 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
   label$12 : {
    label$13 : {
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $339_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $339_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $16_1 = $339_1;
     $16$hi = i64toi32_i32$3;
     $305_1 = $16_1;
     $305$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $341_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $341_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $308_1 = $341_1;
     $308$hi = i64toi32_i32$3;
     i64toi32_i32$0 = ($5_1 + 128 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $342_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $342_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $314$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $308$hi;
     i64toi32_i32$2 = $308_1;
     i64toi32_i32$0 = $314$hi;
     i64toi32_i32$5 = $342_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $315_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $315$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $305$hi;
     i64toi32_i32$3 = $305_1;
     i64toi32_i32$2 = $315$hi;
     i64toi32_i32$5 = $315_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $13_1 = i64toi32_i32$4;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = -13927;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $18_1 = i64toi32_i32$2;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $344_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $344_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $2_1 = $344_1;
     $2$hi = i64toi32_i32$0;
     $321_1 = $2_1;
     $321$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$1 = 65536;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $19_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $19$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $19_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $345_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $345_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $20_1 = $345_1;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$1 = $20_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $346_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $346_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $4_1 = $346_1;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $321$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = __wasm_i64_mul($321_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$0;
     $330_1 = i64toi32_i32$1;
     $330$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      $347_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $347_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $22_1 = $347_1;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $22_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $348_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $348_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $10_1 = $348_1;
     $10$hi = i64toi32_i32$4;
     $335_1 = $10_1;
     $335$hi = i64toi32_i32$4;
     i64toi32_i32$1 = ($5_1 + 112 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      $350_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $350_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
     }
     $340_1 = $350_1;
     $340$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$0 = $15_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $351_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $351_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $342$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $340$hi;
     i64toi32_i32$4 = $340_1;
     i64toi32_i32$0 = $342$hi;
     i64toi32_i32$5 = $351_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $343_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $343$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$1 = $17_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $352_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $352_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $345$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $343$hi;
     i64toi32_i32$0 = $343_1;
     i64toi32_i32$1 = $345$hi;
     i64toi32_i32$5 = $352_1;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $346$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$5 = $16_1;
     $349_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $350$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $346$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$2 = $350$hi;
     i64toi32_i32$0 = $349_1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $351$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$4 = $18_1;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$0 = $13_1;
     $354_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $355$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $351$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $355$hi;
     i64toi32_i32$5 = $354_1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $353_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $353_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     $13_1 = $353_1;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $335$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = __wasm_i64_mul($335_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $361_1 = i64toi32_i32$1;
     $361$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $330$hi;
     i64toi32_i32$2 = $330_1;
     i64toi32_i32$1 = $361$hi;
     i64toi32_i32$5 = $361_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16_1 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$5 = $21_1;
     i64toi32_i32$4 = 0;
     $366_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     $366$hi = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$3;
     $367_1 = i64toi32_i32$0;
     $367$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $15_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $15_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $15$hi = i64toi32_i32$3;
     $370_1 = $15_1;
     $370$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $355_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
      $355_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $23_1 = $355_1;
     $23$hi = i64toi32_i32$5;
     $373_1 = $23_1;
     $373$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      $356_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
      $356_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
     }
     $375$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $373$hi;
     i64toi32_i32$5 = $373_1;
     i64toi32_i32$3 = $375$hi;
     i64toi32_i32$2 = $356_1;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $370$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = __wasm_i64_mul($370_1 | 0, i64toi32_i32$5 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $379_1 = i64toi32_i32$4;
     $379$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $367$hi;
     i64toi32_i32$3 = $367_1;
     i64toi32_i32$4 = $379$hi;
     i64toi32_i32$2 = $379_1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $17_1 = i64toi32_i32$1;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16_1;
     $383_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $384$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $366$hi;
     i64toi32_i32$2 = $366_1;
     i64toi32_i32$0 = $384$hi;
     i64toi32_i32$3 = $383_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $385$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $388_1 = i64toi32_i32$2;
     $388$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $385$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $388$hi;
     i64toi32_i32$3 = $388_1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $389_1 = i64toi32_i32$0;
     $389$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $396_1 = i64toi32_i32$5;
     $396$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$1 = $21_1;
     i64toi32_i32$5 = $396$hi;
     i64toi32_i32$3 = $396_1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $16_1 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$3 = $21_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $357_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
      $357_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $402_1 = $357_1;
     $402$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $358_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      $358_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
     }
     $404$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $402$hi;
     i64toi32_i32$0 = $402_1;
     i64toi32_i32$4 = $404$hi;
     i64toi32_i32$1 = $358_1;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $405_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $405$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $389$hi;
     i64toi32_i32$3 = $389_1;
     i64toi32_i32$0 = $405$hi;
     i64toi32_i32$1 = $405_1;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $406_1 = i64toi32_i32$5;
     $406$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $17$hi;
     $407_1 = $17_1;
     $407$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
      $359_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
      $359_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
     }
     $409$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $407$hi;
     i64toi32_i32$2 = $407_1;
     i64toi32_i32$4 = $409$hi;
     i64toi32_i32$1 = $359_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $16_1 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$1 = $17_1;
     $413_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $414$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $406$hi;
     i64toi32_i32$1 = $406_1;
     i64toi32_i32$5 = $414$hi;
     i64toi32_i32$2 = $413_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $415_1 = i64toi32_i32$4;
     $415$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     $416_1 = $16_1;
     $416$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $18_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$3;
     $21$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $425_1 = i64toi32_i32$3;
     $425$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$0 = $21_1;
     i64toi32_i32$3 = $425$hi;
     i64toi32_i32$2 = $425_1;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $17_1 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$2 = $21_1;
     $429_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $430_1 = $429_1;
     $430$hi = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$2 = $22_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = -2;
     i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
     $21_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $436_1 = i64toi32_i32$2;
     $436$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $436$hi;
     i64toi32_i32$0 = $436_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $24_1 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$0 = $17_1;
     $440_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $441$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $430$hi;
     i64toi32_i32$0 = $430_1;
     i64toi32_i32$5 = $441$hi;
     i64toi32_i32$1 = $440_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $442$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $416$hi;
     i64toi32_i32$4 = $416_1;
     i64toi32_i32$0 = $442$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $17_1 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$1 = $16_1;
     $446_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $447$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $415$hi;
     i64toi32_i32$1 = $415_1;
     i64toi32_i32$2 = $447$hi;
     i64toi32_i32$4 = $446_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $448_1 = i64toi32_i32$0;
     $448$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     $449_1 = $17_1;
     $449$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $456_1 = i64toi32_i32$1;
     $456$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = $16_1;
     i64toi32_i32$1 = $456$hi;
     i64toi32_i32$4 = $456_1;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $461_1 = i64toi32_i32$3;
     $461$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$3 = $461$hi;
     i64toi32_i32$4 = $461_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $13_1 = i64toi32_i32$1;
     $13$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $466_1 = i64toi32_i32$5;
     $466$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$5 = $466$hi;
     i64toi32_i32$4 = $466_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $360_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $360_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
     }
     $469_1 = $360_1;
     $469$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     $472_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $473$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$2 = $4_1;
     $476_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $477$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $473$hi;
     i64toi32_i32$2 = $472_1;
     i64toi32_i32$1 = $477$hi;
     i64toi32_i32$0 = $476_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $478$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$4 = $15_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$0 = $13_1;
     $481_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $482$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $478$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$3 = $482$hi;
     i64toi32_i32$2 = $481_1;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      $362_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
      $362_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $484$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $469$hi;
     i64toi32_i32$5 = $469_1;
     i64toi32_i32$4 = $484$hi;
     i64toi32_i32$2 = $362_1;
     i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
     $485_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $485$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $449$hi;
     i64toi32_i32$0 = $449_1;
     i64toi32_i32$5 = $485$hi;
     i64toi32_i32$2 = $485_1;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$2 = $17_1;
     $489_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $490$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $448$hi;
     i64toi32_i32$2 = $448_1;
     i64toi32_i32$1 = $490$hi;
     i64toi32_i32$0 = $489_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $491_1 = i64toi32_i32$5;
     $491$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $492_1 = $4_1;
     $492$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $24$hi;
     $493_1 = $24_1;
     $493$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $500_1 = i64toi32_i32$2;
     $500$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = $500$hi;
     i64toi32_i32$0 = $500_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $363_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $363_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
     }
     $503_1 = $363_1;
     $503$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     $506_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = $506_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      $364_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
      $364_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
     }
     $508$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $503$hi;
     i64toi32_i32$5 = $503_1;
     i64toi32_i32$0 = $508$hi;
     i64toi32_i32$3 = $364_1;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $509_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $509$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $493$hi;
     i64toi32_i32$4 = $493_1;
     i64toi32_i32$5 = $509$hi;
     i64toi32_i32$3 = $509_1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $24$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$3 = $24_1;
     i64toi32_i32$0 = 0;
     $514_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     $514$hi = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$1;
     $515_1 = i64toi32_i32$2;
     $515$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $365_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $365_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $517$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $515$hi;
     i64toi32_i32$0 = $515_1;
     i64toi32_i32$3 = $517$hi;
     i64toi32_i32$4 = $365_1;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $518$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $518$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $2_1;
     $520_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $521$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $514$hi;
     i64toi32_i32$4 = $514_1;
     i64toi32_i32$2 = $521$hi;
     i64toi32_i32$0 = $520_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $522$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $492$hi;
     i64toi32_i32$1 = $492_1;
     i64toi32_i32$4 = $522$hi;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4_1;
     $526_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $527$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $491$hi;
     i64toi32_i32$0 = $491_1;
     i64toi32_i32$3 = $527$hi;
     i64toi32_i32$1 = $526_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$0 = 131071;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$13
     }
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$1 = $20_1;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$0 = $23_1;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $19_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $19$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$0 = $14$hi;
     $1839($5_1 + 80 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 49;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      $368_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $368_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
     }
     $541$hi = i64toi32_i32$5;
     i64toi32_i32$0 = ($5_1 + 80 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $545_1 = i64toi32_i32$5;
     $545$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $541$hi;
     i64toi32_i32$0 = $368_1;
     i64toi32_i32$5 = $545$hi;
     i64toi32_i32$2 = $545_1;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     $546$hi = i64toi32_i32$4;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     $550_1 = (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$1 = 0;
     $551$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $546$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$0 = $551$hi;
     i64toi32_i32$4 = $550_1;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
     $13_1 = i64toi32_i32$5;
     $13$hi = i64toi32_i32$3;
     $6_1 = $6_1 + 16382 | 0;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$5;
     break label$12;
    }
    $558_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $369_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $369_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $560_1 = $369_1;
    $560$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
     $371_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $371_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    }
    $562$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $560$hi;
    i64toi32_i32$1 = $560_1;
    i64toi32_i32$5 = $562$hi;
    i64toi32_i32$4 = $371_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$5;
    $564_1 = $2_1;
    $564$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $372_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $372_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4_1 = $372_1;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$1 = $564$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $14$hi;
    $1839($558_1 | 0, $564_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $374_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
     $374_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $571$hi = i64toi32_i32$5;
    i64toi32_i32$4 = ($5_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $575_1 = i64toi32_i32$5;
    $575$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $571$hi;
    i64toi32_i32$4 = $374_1;
    i64toi32_i32$5 = $575$hi;
    i64toi32_i32$1 = $575_1;
    i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    $576$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$4;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    $580_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $581$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $576$hi;
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$4 = $581$hi;
    i64toi32_i32$0 = $580_1;
    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    $13_1 = i64toi32_i32$5;
    $13$hi = i64toi32_i32$2;
    $6_1 = $6_1 + 16383 | 0;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    $10_1 = i64toi32_i32$4;
    $10$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    $22_1 = $1_1;
    $22$hi = i64toi32_i32$5;
   }
   label$14 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $12_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $12$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$3;
    break label$1;
   }
   label$15 : {
    label$16 : {
     if (($6_1 | 0) < (1 | 0)) {
      break label$16
     }
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$5 = $13_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $375_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
      $375_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $595_1 = $375_1;
     $595$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 63;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $376_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $376_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $597$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $595$hi;
     i64toi32_i32$2 = $595_1;
     i64toi32_i32$3 = $597$hi;
     i64toi32_i32$0 = $376_1;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $13_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $13$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $377_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
      $377_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $601$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $603_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $603$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $601$hi;
     i64toi32_i32$2 = $377_1;
     i64toi32_i32$3 = $603$hi;
     i64toi32_i32$0 = $603_1;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $15_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $15$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $378_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
      $378_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $4_1 = $378_1;
     $4$hi = i64toi32_i32$2;
     break label$15;
    }
    label$17 : {
     if (($6_1 | 0) > (-113 | 0)) {
      break label$17
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$5 = $4$hi;
    $1837($5_1 + 64 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$2 = $19$hi;
    $1835($5_1 + 48 | 0 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$2 | 0, $6_1 + 112 | 0 | 0);
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$5;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$5;
    $15$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $15$hi;
    $1839($5_1 + 32 | 0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $636_1 = i64toi32_i32$0;
    $636$hi = i64toi32_i32$3;
    i64toi32_i32$5 = ($5_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     $380_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
     $380_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
    }
    $641_1 = $380_1;
    $641$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $381_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     $381_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
    }
    $645$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $641$hi;
    i64toi32_i32$5 = $641_1;
    i64toi32_i32$0 = $645$hi;
    i64toi32_i32$2 = $381_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $646_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $646$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $636$hi;
    i64toi32_i32$3 = $636_1;
    i64toi32_i32$5 = $646$hi;
    i64toi32_i32$2 = $646_1;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
    $647_1 = i64toi32_i32$1;
    $647$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$3;
    $650_1 = i64toi32_i32$4;
    $650$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     $382_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
     $382_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    }
    $1_1 = $382_1;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $650$hi;
    i64toi32_i32$3 = $650_1;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    $654_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $655$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $647$hi;
    i64toi32_i32$2 = $647_1;
    i64toi32_i32$4 = $655$hi;
    i64toi32_i32$0 = $654_1;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $13_1 = i64toi32_i32$5;
    $13$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   $1839($5_1 + 16 | 0 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$3 | 0, 3 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   $1839($5_1 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0, 5 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$5 = $15$hi;
   $667_1 = $15_1;
   $667$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   $668_1 = $2_1;
   $668$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
   $1_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$0 = $3_1;
   $676_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$5 = $1_1;
   $680_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $681$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $13$hi;
   i64toi32_i32$5 = $13_1;
   i64toi32_i32$3 = $681$hi;
   i64toi32_i32$4 = $680_1;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$4 = $14_1;
   $685_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$5 = $14_1;
   $689_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $676_1 : $685_1;
   i64toi32_i32$4 = 0;
   $690$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $668$hi;
   i64toi32_i32$5 = $668_1;
   i64toi32_i32$0 = $690$hi;
   i64toi32_i32$2 = $689_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = $2_1;
   $694_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $695$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $667$hi;
   i64toi32_i32$2 = $667_1;
   i64toi32_i32$1 = $695$hi;
   i64toi32_i32$5 = $694_1;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$3;
   $697_1 = i64toi32_i32$0;
   $697$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$2 = 2147418112;
   i64toi32_i32$5 = 0;
   $700_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
   $703_1 = i64toi32_i32$4;
   $703$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$4 = $703$hi;
   i64toi32_i32$2 = $703_1;
   $704_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$2 = ($5_1 + 16 | 0) + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2_1;
   $711_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$5 = $2_1;
   $716_1 = $700_1 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) | 0 ? $704_1 : $711_1) | 0;
   i64toi32_i32$4 = 0;
   $717$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$2 = $717$hi;
   i64toi32_i32$3 = $716_1;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3_1;
   $721_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $722$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $697$hi;
   i64toi32_i32$3 = $697_1;
   i64toi32_i32$0 = $722$hi;
   i64toi32_i32$5 = $721_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $3_1 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$1;
   $724_1 = i64toi32_i32$2;
   $724$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$5 = 0;
   $727_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $730_1 = i64toi32_i32$4;
   $730$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$4 = $730$hi;
   i64toi32_i32$3 = $730_1;
   $731_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$3 = $5_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   $737_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = $4_1;
   $742_1 = $727_1 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $731_1 : $737_1) | 0;
   i64toi32_i32$4 = 0;
   $743$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = $743$hi;
   i64toi32_i32$1 = $742_1;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2_1;
   $747_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $748$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $724$hi;
   i64toi32_i32$1 = $724_1;
   i64toi32_i32$2 = $748$hi;
   i64toi32_i32$5 = $747_1;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $749$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$0 = $749$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $12_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $12$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $12$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $12_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 336 | 0;
 }
 
 function $1837($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $1838($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $14$hi = 0, $5_1 = 0, $11$hi = 0, $11_1 = 0, $14_1 = 0, $12$hi = 0, $6_1 = 0, $18$hi = 0, $12_1 = 0, $16$hi = 0, $10$hi = 0, $8_1 = 0, $10_1 = 0, $18_1 = 0, $20$hi = 0, $16_1 = 0, $7_1 = 0, $17$hi = 0, $13_1 = 0, $13$hi = 0, $15$hi = 0, $17_1 = 0, $20_1 = 0, $15_1 = 0, $9_1 = 0, $19$hi = 0, $21$hi = 0, $22$hi = 0, $23$hi = 0, $24$hi = 0, $220_1 = 0, $221_1 = 0, $223_1 = 0, $224_1 = 0, $226_1 = 0, $228_1 = 0, $229_1 = 0, $230_1 = 0, $231_1 = 0, $232_1 = 0, $19_1 = 0, $233_1 = 0, $234_1 = 0, $235_1 = 0, $237_1 = 0, $21_1 = 0, $239_1 = 0, $22_1 = 0, $240_1 = 0, $24_1 = 0, $241_1 = 0, $242_1 = 0, $243_1 = 0, $245_1 = 0, $246_1 = 0, $247_1 = 0, $248_1 = 0, $250_1 = 0, $251_1 = 0, $252_1 = 0, $253_1 = 0, $254_1 = 0, $255_1 = 0, $256_1 = 0, $257_1 = 0, $258_1 = 0, $53_1 = 0, $57_1 = 0, $64_1 = 0, $68_1 = 0, $77_1 = 0, $77$hi = 0, $89_1 = 0, $89$hi = 0, $111_1 = 0, $112_1 = 0, $112$hi = 0, $113_1 = 0, $113$hi = 0, $120$hi = 0, $123$hi = 0, $140_1 = 0, $141_1 = 0, $141$hi = 0, $142_1 = 0, $142$hi = 0, $149$hi = 0, $152$hi = 0, $170_1 = 0, $170$hi = 0, $175_1 = 0, $175$hi = 0, $182_1 = 0, $182$hi = 0, $189_1 = 0, $189$hi = 0, $194_1 = 0, $194$hi = 0, $203_1 = 0, $203$hi = 0, $205_1 = 0, $205$hi = 0, $207_1 = 0, $207$hi = 0, $215_1 = 0, $215$hi = 0, $217_1 = 0, $217$hi = 0, $219_1 = 0, $219$hi = 0, $222_1 = 0, $224$hi = 0, $225_1 = 0, $225$hi = 0, $227_1 = 0, $227$hi = 0, $236_1 = 0, $236$hi = 0, $238_1 = 0, $238$hi = 0, $244_1 = 0, $244$hi = 0, $249_1 = 0, $249$hi = 0, $252$hi = 0, $23_1 = 0, $268_1 = 0, $268$hi = 0, $272_1 = 0, $273_1 = 0, $273$hi = 0, $277_1 = 0, $277$hi = 0, $281_1 = 0, $282$hi = 0, $283$hi = 0, $286_1 = 0, $286$hi = 0, $287_1 = 0, $287$hi = 0, $288_1 = 0, $288$hi = 0, $291_1 = 0, $292$hi = 0, $295_1 = 0, $296$hi = 0, $297$hi = 0, $301_1 = 0, $302$hi = 0, $303_1 = 0, $303$hi = 0, $310_1 = 0, $310$hi = 0, $314_1 = 0, $316_1 = 0, $316$hi = 0, $318$hi = 0, $319_1 = 0, $319$hi = 0, $320_1 = 0, $320$hi = 0, $321_1 = 0, $321$hi = 0, $323$hi = 0, $327_1 = 0, $328$hi = 0, $329_1 = 0, $329$hi = 0, $330_1 = 0, $330$hi = 0, $332_1 = 0, $332$hi = 0, $335_1 = 0, $336$hi = 0, $339_1 = 0, $340$hi = 0, $341$hi = 0, $344_1 = 0, $345$hi = 0, $347$hi = 0, $348_1 = 0, $348$hi = 0, $352_1 = 0, $353$hi = 0, $354_1 = 0, $354$hi = 0, $355_1 = 0, $355$hi = 0, $358_1 = 0, $359$hi = 0, $362_1 = 0, $363$hi = 0, $364$hi = 0, $368_1 = 0, $369$hi = 0, $379_1 = 0, $379$hi = 0, $381$hi = 0, $384_1 = 0, $384$hi = 0, $386$hi = 0, $390_1 = 0, $390$hi = 0, $392$hi = 0, $426_1 = 0, $426$hi = 0, $428_1 = 0, $428$hi = 0, $429_1 = 0, $429$hi = 0, $431_1 = 0, $431$hi = 0, $435_1 = 0, $435$hi = 0, $437_1 = 0, $438$hi = 0, $443_1 = 0, $443$hi = 0, $447_1 = 0, $447$hi = 0, $456$hi = 0, $458_1 = 0, $458$hi = 0, $464_1 = 0, $470_1 = 0, $470$hi = 0, $475_1 = 0, $476$hi = 0, $480_1 = 0, $480$hi = 0, $484_1 = 0, $484$hi = 0, $487_1 = 0, $487$hi = 0, $491_1 = 0, $492$hi = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $11_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $12_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $220_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $220_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $13_1 = $220_1;
  $13$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $221_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $221_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $221_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $223_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $223_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $223_1 & 32767 | 0;
     if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$1 = $1$hi;
     $53_1 = !($1_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $14_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     $57_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $53_1 : $57_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$1;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$1 = $3$hi;
     $64_1 = !($3_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     $68_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0 ? $64_1 : $68_1) {
      break label$5
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$2 = $14_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $77_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $77$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$2 = $77$hi;
     i64toi32_i32$0 = $77_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$0 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $89_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
     $89$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$2 = $89$hi;
     i64toi32_i32$1 = $89_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $14$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$0 = $14_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     label$9 : {
      i64toi32_i32$2 = $2$hi;
      if (!!($2_1 | i64toi32_i32$2 | 0)) {
       break label$9
      }
      i64toi32_i32$2 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$3 = $14$hi;
     i64toi32_i32$0 = $14_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    $8_1 = 0;
    label$12 : {
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$2 = $14_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$12
     }
     $111_1 = $5_1 + 80 | 0;
     i64toi32_i32$2 = $1$hi;
     $112_1 = $1_1;
     $112$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $12$hi;
     $113_1 = $12_1;
     $113$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $12$hi;
     $8_1 = !($12_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $12_1;
     i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$1;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$0);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $224_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $224_1 = i64toi32_i32$1
     }
     $120$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $123$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $120$hi;
     i64toi32_i32$3 = $224_1;
     i64toi32_i32$0 = $123$hi;
     i64toi32_i32$1 = $8_1 << 6 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$2;
     i64toi32_i32$5 = $112$hi;
     i64toi32_i32$3 = $113$hi;
     $1835($111_1 | 0, $112_1 | 0, i64toi32_i32$5 | 0, $113_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$2 | 0;
     i64toi32_i32$4 = $5_1 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $12_1 = i64toi32_i32$3;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $226_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $226_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $13_1 = $226_1;
     $13$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 80 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$2
    }
    $140_1 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $141_1 = $3_1;
    $141$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $142_1 = $10_1;
    $142$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $10$hi;
    $9_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$3 = i64toi32_i32$0 ? $3_1 : $10_1;
    i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$4 | 0) == (32 | 0)) {
     $228_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $228_1 = i64toi32_i32$4
    }
    $149$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $152$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $149$hi;
    i64toi32_i32$3 = $228_1;
    i64toi32_i32$1 = $152$hi;
    i64toi32_i32$4 = $9_1 << 6 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $9_1 = i64toi32_i32$5;
    i64toi32_i32$2 = $141$hi;
    i64toi32_i32$3 = $142$hi;
    $1835($140_1 | 0, $141_1 | 0, i64toi32_i32$2 | 0, $142_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$5 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$5 | 0) + 16 | 0;
    i64toi32_i32$0 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$3;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    $229_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
    $229_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   }
   $14_1 = $229_1;
   $14$hi = i64toi32_i32$2;
   i64toi32_i32$3 = $14_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -32768;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   $2$hi = i64toi32_i32$0;
   $170_1 = $2_1;
   $170$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $230_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    $230_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
   }
   $4_1 = $230_1;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $170$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($170_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $15_1 = i64toi32_i32$2;
   $15$hi = i64toi32_i32$3;
   $175_1 = i64toi32_i32$2;
   $175$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $231_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $231_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   $14_1 = $231_1;
   $14$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $182_1 = i64toi32_i32$3;
   $182$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $175$hi;
   i64toi32_i32$2 = $175_1;
   i64toi32_i32$3 = $182$hi;
   i64toi32_i32$4 = $182_1;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $16_1 = i64toi32_i32$1;
   $16$hi = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $232_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $232_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $17_1 = $232_1;
   $17$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $189_1 = i64toi32_i32$0;
   $189$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $17$hi;
   i64toi32_i32$5 = $17_1;
   i64toi32_i32$0 = $189$hi;
   i64toi32_i32$4 = $189_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $18_1 = i64toi32_i32$3;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $17$hi;
   i64toi32_i32$1 = $18$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = $17$hi;
   i64toi32_i32$4 = $17_1;
   i64toi32_i32$2 = 0;
   $194_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   $194$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $12$hi;
   i64toi32_i32$4 = $12_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $12_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $12_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $19_1 = i64toi32_i32$4;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $203_1 = i64toi32_i32$4;
   $203$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$4 = $203$hi;
   i64toi32_i32$5 = $203_1;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $17_1 = i64toi32_i32$0;
   $17$hi = i64toi32_i32$3;
   $205_1 = i64toi32_i32$0;
   $205$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 49;
   i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $233_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    $233_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $207_1 = $233_1;
   $207$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    $234_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $234_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
   }
   $20_1 = $234_1;
   $20$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $207$hi;
   i64toi32_i32$2 = $207_1;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$5 = $20_1;
   i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $215_1 = i64toi32_i32$1;
   $215$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $205$hi;
   i64toi32_i32$3 = $205_1;
   i64toi32_i32$1 = $215$hi;
   i64toi32_i32$5 = $215_1;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $10_1 = i64toi32_i32$4;
   $10$hi = i64toi32_i32$0;
   $217_1 = i64toi32_i32$4;
   $217$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$2 = $16_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $235_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    $235_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
   }
   $219_1 = $235_1;
   $219$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$0 = $16_1;
   i64toi32_i32$2 = $15$hi;
   i64toi32_i32$5 = $15_1;
   $222_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = $222_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = 32;
   i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
    $237_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
    $237_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   }
   $224$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $219$hi;
   i64toi32_i32$0 = $219_1;
   i64toi32_i32$5 = $224$hi;
   i64toi32_i32$2 = $237_1;
   i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $225_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $225$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $217$hi;
   i64toi32_i32$3 = $217_1;
   i64toi32_i32$0 = $225$hi;
   i64toi32_i32$2 = $225_1;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $15_1 = i64toi32_i32$1;
   $15$hi = i64toi32_i32$4;
   $227_1 = i64toi32_i32$1;
   $227$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $13$hi;
   i64toi32_i32$5 = $13_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $16_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
   $16$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$5 = $16$hi;
   i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $21_1 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $236_1 = i64toi32_i32$5;
   $236$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$4 = $21_1;
   i64toi32_i32$5 = $236$hi;
   i64toi32_i32$2 = $236_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $13_1 = i64toi32_i32$0;
   $13$hi = i64toi32_i32$1;
   $238_1 = i64toi32_i32$0;
   $238$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 32;
   i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $239_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
    $239_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
   }
   i64toi32_i32$1 = $239_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = -2147483648;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $244_1 = i64toi32_i32$1;
   $244$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $238$hi;
   i64toi32_i32$4 = $238_1;
   i64toi32_i32$1 = $244$hi;
   i64toi32_i32$2 = $244_1;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $20_1 = i64toi32_i32$5;
   $20$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $249_1 = i64toi32_i32$4;
   $249$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$4 = $249$hi;
   i64toi32_i32$2 = $249_1;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $22_1 = i64toi32_i32$1;
   $22$hi = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = 32;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $240_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $240_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $252$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $227$hi;
   i64toi32_i32$5 = $227_1;
   i64toi32_i32$0 = $252$hi;
   i64toi32_i32$2 = $240_1;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $23_1 = i64toi32_i32$4;
   $23$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $194$hi;
   i64toi32_i32$3 = $194_1;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$4;
   $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
   label$13 : {
    label$14 : {
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $24_1 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $14$hi;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$4 = $14$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$4 | 0, $16_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $268_1 = i64toi32_i32$3;
     $268$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$1 = $24_1;
     i64toi32_i32$3 = $268$hi;
     i64toi32_i32$2 = $268_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $4_1 = i64toi32_i32$5;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = $24$hi;
     i64toi32_i32$2 = $24_1;
     $272_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $273_1 = $272_1;
     $273$hi = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $277_1 = i64toi32_i32$0;
     $277$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$0 = $277$hi;
     i64toi32_i32$1 = $277_1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $14_1 = i64toi32_i32$3;
     $14$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = $4_1;
     $281_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $282$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $273$hi;
     i64toi32_i32$1 = $273_1;
     i64toi32_i32$5 = $282$hi;
     i64toi32_i32$2 = $281_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $283$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $286_1 = i64toi32_i32$1;
     $286$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $283$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$1 = $286$hi;
     i64toi32_i32$2 = $286_1;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $287_1 = i64toi32_i32$5;
     $287$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $14$hi;
     $288_1 = $14_1;
     $288$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$3 = $17_1;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$2 = $19_1;
     $291_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $292$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$2 = $10_1;
     i64toi32_i32$4 = $17_1;
     $295_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $296$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $292$hi;
     i64toi32_i32$4 = $291_1;
     i64toi32_i32$3 = $296$hi;
     i64toi32_i32$0 = $295_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $297$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $288$hi;
     i64toi32_i32$2 = $288_1;
     i64toi32_i32$4 = $297$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$0 = $14_1;
     $301_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $302$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $287$hi;
     i64toi32_i32$0 = $287_1;
     i64toi32_i32$1 = $302$hi;
     i64toi32_i32$2 = $301_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $303_1 = i64toi32_i32$4;
     $303$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $310_1 = i64toi32_i32$0;
     $310$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$0 = $310$hi;
     i64toi32_i32$2 = $310_1;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $314_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = $314_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      $241_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $241_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     }
     $316_1 = $241_1;
     $316$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $242_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $242_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $318$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $316$hi;
     i64toi32_i32$4 = $316_1;
     i64toi32_i32$3 = $318$hi;
     i64toi32_i32$5 = $242_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $319_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $319$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $303$hi;
     i64toi32_i32$2 = $303_1;
     i64toi32_i32$4 = $319$hi;
     i64toi32_i32$5 = $319_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $320_1 = i64toi32_i32$0;
     $320$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     $321_1 = $4_1;
     $321$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $243_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $243_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $323$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $321$hi;
     i64toi32_i32$1 = $321_1;
     i64toi32_i32$3 = $323$hi;
     i64toi32_i32$5 = $243_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$5 = $4_1;
     $327_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $328$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $320$hi;
     i64toi32_i32$5 = $320_1;
     i64toi32_i32$0 = $328$hi;
     i64toi32_i32$1 = $327_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $329_1 = i64toi32_i32$3;
     $329$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     $330_1 = $2_1;
     $330$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$2 = $22_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $245_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $245_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
     }
     $332_1 = $245_1;
     $332$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$1 = $21_1;
     $335_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $336$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$1 = $20_1;
     i64toi32_i32$2 = $13_1;
     $339_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $340$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $336$hi;
     i64toi32_i32$2 = $335_1;
     i64toi32_i32$4 = $340$hi;
     i64toi32_i32$5 = $339_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $341$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$5 = $20_1;
     $344_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $345$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $341$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$3 = $345$hi;
     i64toi32_i32$2 = $344_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      $246_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $246_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
     }
     $347$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $332$hi;
     i64toi32_i32$0 = $332_1;
     i64toi32_i32$1 = $347$hi;
     i64toi32_i32$2 = $246_1;
     i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     $348_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $348$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $330$hi;
     i64toi32_i32$5 = $330_1;
     i64toi32_i32$0 = $348$hi;
     i64toi32_i32$2 = $348_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$2 = $2_1;
     $352_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $353$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $329$hi;
     i64toi32_i32$2 = $329_1;
     i64toi32_i32$4 = $353$hi;
     i64toi32_i32$5 = $352_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $354_1 = i64toi32_i32$0;
     $354$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $355_1 = $4_1;
     $355$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$1 = $15_1;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$5 = $10_1;
     $358_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $359$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$5 = $23_1;
     i64toi32_i32$2 = $15_1;
     $362_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $363$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $359$hi;
     i64toi32_i32$2 = $358_1;
     i64toi32_i32$1 = $363$hi;
     i64toi32_i32$3 = $362_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $364$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $355$hi;
     i64toi32_i32$5 = $355_1;
     i64toi32_i32$2 = $364$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     $368_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $369$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $354$hi;
     i64toi32_i32$3 = $354_1;
     i64toi32_i32$4 = $369$hi;
     i64toi32_i32$5 = $368_1;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = 65536;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$5 | 0 | i64toi32_i32$3 | 0)) {
      break label$14
     }
     $6_1 = $6_1 + 1 | 0;
     break label$13;
    }
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$1 = $18_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 63;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $247_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $247_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $247_1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $248_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $248_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $379_1 = $248_1;
    $379$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 63;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $250_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $250_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $381$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $379$hi;
    i64toi32_i32$1 = $379_1;
    i64toi32_i32$0 = $381$hi;
    i64toi32_i32$5 = $250_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $251_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $251_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $384_1 = $251_1;
    $384$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 63;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $252_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $252_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $386$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $384$hi;
    i64toi32_i32$1 = $384_1;
    i64toi32_i32$0 = $386$hi;
    i64toi32_i32$5 = $252_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$3 = $18_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $253_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $253_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $18_1 = $253_1;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    $390_1 = $3_1;
    $390$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $254_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $254_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $392$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $390$hi;
    i64toi32_i32$1 = $390_1;
    i64toi32_i32$0 = $392$hi;
    i64toi32_i32$5 = $254_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $1$hi = i64toi32_i32$0;
   }
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$3 = $11_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $11_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$17
     }
     label$18 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 < 128 >>> 0) {
       break label$18
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $1$hi;
     $6_1 = $6_1 + 127 | 0;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     $1835($5_1 + 48 | 0 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $6_1 | 0);
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     $1835($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0);
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     $1837($5_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0);
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     $1837($5_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $426_1 = i64toi32_i32$1;
     $426$hi = i64toi32_i32$3;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     $428_1 = i64toi32_i32$3;
     $428$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $426$hi;
     i64toi32_i32$0 = $426_1;
     i64toi32_i32$3 = $428$hi;
     i64toi32_i32$5 = $428_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $429_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $429$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
     $431_1 = i64toi32_i32$3;
     $431$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 48 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $435_1 = i64toi32_i32$0;
     $435$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $431$hi;
     i64toi32_i32$1 = $431_1;
     i64toi32_i32$0 = $435$hi;
     i64toi32_i32$5 = $435_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 0;
     $437_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = 0;
     $438$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $429$hi;
     i64toi32_i32$5 = $429_1;
     i64toi32_i32$0 = $438$hi;
     i64toi32_i32$1 = $437_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$3 = ($5_1 + 32 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $443_1 = i64toi32_i32$0;
     $443$hi = i64toi32_i32$5;
     i64toi32_i32$3 = ($5_1 + 16 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $447_1 = i64toi32_i32$5;
     $447$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $443$hi;
     i64toi32_i32$3 = $443_1;
     i64toi32_i32$5 = $447$hi;
     i64toi32_i32$1 = $447_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $1_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $5_1 + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$5;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$3;
     $2$hi = i64toi32_i32$5;
     break label$16;
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $255_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $255_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $456$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $458_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
    $458$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $456$hi;
    i64toi32_i32$3 = $255_1;
    i64toi32_i32$5 = $458$hi;
    i64toi32_i32$1 = $458_1;
    i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$1 = $11_1;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $11_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $11$hi = i64toi32_i32$3;
   label$19 : {
    i64toi32_i32$3 = $18$hi;
    $464_1 = !($18_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$3 | 0) > (i64toi32_i32$0 | 0)) {
     $256_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $257_1 = 0
      } else {
       $257_1 = 1
      }
      $258_1 = $257_1;
     } else {
      $258_1 = 0
     }
     $256_1 = $258_1;
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) | 0 ? $464_1 : $256_1) {
     break label$19
    }
    i64toi32_i32$1 = $11$hi;
    $470_1 = $11_1;
    $470$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $1_1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    $475_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $476$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $470$hi;
    i64toi32_i32$3 = $470_1;
    i64toi32_i32$2 = $476$hi;
    i64toi32_i32$0 = $475_1;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $11_1 = i64toi32_i32$5;
    $11$hi = i64toi32_i32$4;
    break label$1;
   }
   label$20 : {
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
    $480_1 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $480$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$4 = $18_1;
    i64toi32_i32$1 = $480$hi;
    i64toi32_i32$0 = $480_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) | 0) {
     break label$20
    }
    i64toi32_i32$3 = $2$hi;
    $1_1 = $2_1;
    $1$hi = i64toi32_i32$3;
    break label$1;
   }
   i64toi32_i32$3 = $11$hi;
   $484_1 = $11_1;
   $484$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $487_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $487$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = $487$hi;
   i64toi32_i32$4 = $487_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = $2_1;
   $491_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $492$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $484$hi;
   i64toi32_i32$4 = $484_1;
   i64toi32_i32$5 = $492$hi;
   i64toi32_i32$3 = $491_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $11_1 = i64toi32_i32$0;
   $11$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $11$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$2;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $1839($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $46_1;
  $2$hi = i64toi32_i32$2;
  $16_1 = $2_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $48_1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $1_1 = i64toi32_i32$4;
  $1$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $1840($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $3_1 = -1;
    if ($1822($0_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if (($4_1 | 0) == ($3_1 | 0)) {
     break label$3
    }
    $3_1 = $1_1 & 255 | 0;
    if ((HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
     break label$3
    }
    HEAP32[($0_1 + 20 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[$4_1 >> 0] = $1_1;
    break label$1;
   }
   $3_1 = -1;
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, $2_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $3_1 = HEAPU8[($2_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1841($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1842($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1842($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
    if (($2_1 | 0) < (0 | 0)) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    if (($2_1 & -1073741825 | 0 | 0) != (HEAP32[(($1958() | 0) + 16 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
   }
   label$3 : {
    $2_1 = $0_1 & 255 | 0;
    if (($2_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (($3_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    return $2_1 | 0;
   }
   return $1840($1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  return $1843($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1843($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = $1_1 + 76 | 0;
   if (!($1844($2_1 | 0) | 0)) {
    break label$1
   }
   $1800($1_1 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    $3_1 = $0_1 & 255 | 0;
    if (($3_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (($4_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[$4_1 >> 0] = $0_1;
    break label$2;
   }
   $3_1 = $1840($1_1 | 0, $3_1 | 0) | 0;
  }
  label$4 : {
   if (!(($1845($2_1 | 0) | 0) & 1073741824 | 0)) {
    break label$4
   }
   $1846($2_1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $1844($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1 ? $1_1 : 1073741823;
  return $1_1 | 0;
 }
 
 function $1845($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1846($0_1) {
  $0_1 = $0_1 | 0;
  $1905($0_1 | 0, 1 | 0) | 0;
 }
 
 function $1847($0_1) {
  $0_1 = $0_1 | 0;
  global$1 = $0_1;
 }
 
 function $1848() {
  return global$1 | 0;
 }
 
 function $1849() {
  return global$0 | 0;
 }
 
 function $1850($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $1851($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $1852() {
  global$3 = 5271136;
  global$2 = (28256 + 15 | 0) & -16 | 0;
 }
 
 function $1853() {
  return global$0 - global$2 | 0 | 0;
 }
 
 function $1854() {
  return global$3 | 0;
 }
 
 function $1855() {
  return global$2 | 0;
 }
 
 function $1856() {
  return 0 | 0;
 }
 
 function $1857() {
  return 0 | 0;
 }
 
 function $1858($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $10$hi = 0, $10_1 = 0, $6_1 = 0, $9$hi = 0, $7_1 = 0, $5_1 = 0, $9_1 = 0, $12$hi = 0, $11$hi = 0, i64toi32_i32$6 = 0, $11_1 = 0, $8_1 = 0, $12_1 = 0, $135_1 = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $144_1 = 0, $145_1 = 0, $146_1 = 0, $147_1 = 0, $148_1 = 0, $149_1 = 0, $150_1 = 0, $151_1 = 0, $152_1 = 0, $153_1 = 0, $154_1 = 0, $155_1 = 0, $156_1 = 0, $157_1 = 0, $158_1 = 0, $20_1 = 0, $25_1 = 0, $30_1 = 0, $34_1 = 0, $40_1 = 0, $48_1 = 0, $50_1 = 0, $58_1 = 0, $58$hi = 0, $64_1 = 0, $64$hi = 0, $68_1 = 0, $68$hi = 0, $78_1 = 0, $78$hi = 0, $106_1 = 0, $109_1 = 0, $136_1 = 0, $137_1 = 0, $137$hi = 0, $138_1 = 0, $138$hi = 0, $145$hi = 0, $148$hi = 0, $168_1 = 0, $169_1 = 0, $169$hi = 0, $170_1 = 0, $170$hi = 0, $177$hi = 0, $180$hi = 0, $193_1 = 0, $193$hi = 0, $195$hi = 0, $199_1 = 0, $199$hi = 0, $201$hi = 0, $228_1 = 0, $228$hi = 0, $230_1 = 0, $230$hi = 0, $234_1 = 0, $234$hi = 0, $236_1 = 0, $237$hi = 0, $251_1 = 0, $251$hi = 0, $254_1 = 0, $254$hi = 0, $262$hi = 0, $265_1 = 0, $266$hi = 0, $271_1 = 0, $272_1 = 0, $272$hi = 0, $273_1 = 0, $273$hi = 0, $280$hi = 0, $283$hi = 0, $298_1 = 0, $298$hi = 0, $304_1 = 0, $305$hi = 0, $311_1 = 0, $311$hi = 0, $313$hi = 0, $314_1 = 0, $314$hi = 0, $316_1 = 0, $316$hi = 0, $343_1 = 0, $343$hi = 0, $345_1 = 0, $345$hi = 0, $349_1 = 0, $349$hi = 0, $351_1 = 0, $352$hi = 0, $358_1 = 0, $358$hi = 0, $360$hi = 0, $364_1 = 0, $364$hi = 0, $367_1 = 0, $367$hi = 0, $368$hi = 0, $375_1 = 0, $375$hi = 0, $379$hi = 0, $383_1 = 0, $384$hi = 0, $389_1 = 0, $389$hi = 0, $397_1 = 0, $398$hi = 0, $400_1 = 0, $400$hi = 0, $406_1 = 0, $407$hi = 0, $411_1 = 0, $412$hi = 0, $415_1 = 0, $415$hi = 0, $421_1 = 0, $422$hi = 0, $426_1 = 0, $427$hi = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     $6_1 = !($1_1 | i64toi32_i32$1 | 0);
     $20_1 = $6_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $10_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$0 = -2147418112;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$3 = 0;
     $25_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = $10$hi;
     if (!($10_1 | i64toi32_i32$2 | 0) ? $20_1 : $25_1) {
      break label$3
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 0;
     $30_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = -2147418112;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$5 = 0;
     $34_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$4 = -2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $30_1 : $34_1) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$4 = 0;
     $40_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $10_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $6_1 : $40_1) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$1 = $3$hi;
     $48_1 = !($3_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$5 = 0;
     $50_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48_1 : $50_1) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
     $58_1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     $58$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $58$hi;
     i64toi32_i32$1 = $58_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
     $64_1 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
     $64$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$3 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $68_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $68$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $64$hi;
     i64toi32_i32$1 = $64_1;
     i64toi32_i32$5 = $68$hi;
     i64toi32_i32$4 = $68_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$1 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$2 ? 0 : $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$1;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$1 = i64toi32_i32$5 ? 0 : $1_1;
     i64toi32_i32$2 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$5 = $9_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $78_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
    $78$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$5 = $78$hi;
    i64toi32_i32$4 = $78_1;
    i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    if (!(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$4 = $10_1;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $3_1 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$5 = $4_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $4_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $4$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    if (!!(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0)) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$5;
    break label$1;
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = $1_1;
   $106_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$2 = $10_1;
   $109_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$2 = $9_1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = $10_1;
   $7_1 = (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0 ? $106_1 : $109_1;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3 ? $3_1 : $1_1;
   i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$4;
   $9_1 = i64toi32_i32$1;
   $9$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$2 ? $4_1 : $2_1;
   i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$1;
   $11_1 = i64toi32_i32$4;
   $11$hi = i64toi32_i32$3;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   $10_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$3 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$2;
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $135_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    $135_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $8_1 = $135_1 & 32767 | 0;
   label$8 : {
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $11_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $139_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $139_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $139_1 & 32767 | 0;
    if ($6_1) {
     break label$8
    }
    $136_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $9$hi;
    $137_1 = $9_1;
    $137$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $138_1 = $10_1;
    $138$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $10$hi;
    $6_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$2 = i64toi32_i32$4 ? $9_1 : $10_1;
    i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$5 : i64toi32_i32$3;
    i64toi32_i32$3 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$3 | 0) == (32 | 0)) {
     $140_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
    } else {
     $140_1 = i64toi32_i32$3
    }
    $145$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $148$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $145$hi;
    i64toi32_i32$2 = $140_1;
    i64toi32_i32$1 = $148$hi;
    i64toi32_i32$3 = $6_1 << 6 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $6_1 = i64toi32_i32$5;
    i64toi32_i32$0 = $137$hi;
    i64toi32_i32$2 = $138$hi;
    $1835($136_1 | 0, $137_1 | 0, i64toi32_i32$0 | 0, $138_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$5 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$5 | 0;
    i64toi32_i32$4 = $5_1 + 104 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$2;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 96 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 100 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$0;
    $9$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$3 = i64toi32_i32$1 ? $1_1 : $3_1;
   i64toi32_i32$4 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$0;
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$3 = 65535;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
   $4_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $4$hi = i64toi32_i32$3;
   label$9 : {
    if ($8_1) {
     break label$9
    }
    $168_1 = $5_1 + 80 | 0;
    i64toi32_i32$3 = $3$hi;
    $169_1 = $3_1;
    $169$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    $170_1 = $4_1;
    $170$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    $7_1 = !($4_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = i64toi32_i32$2 ? $3_1 : $4_1;
    i64toi32_i32$4 = i64toi32_i32$2 ? i64toi32_i32$3 : i64toi32_i32$1;
    i64toi32_i32$1 = Math_clz32(i64toi32_i32$4);
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$1 | 0) == (32 | 0)) {
     $141_1 = Math_clz32(i64toi32_i32$0) + 32 | 0
    } else {
     $141_1 = i64toi32_i32$1
    }
    $177$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $180$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $177$hi;
    i64toi32_i32$0 = $141_1;
    i64toi32_i32$4 = $180$hi;
    i64toi32_i32$1 = $7_1 << 6 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $7_1 = i64toi32_i32$3;
    i64toi32_i32$5 = $169$hi;
    i64toi32_i32$0 = $170$hi;
    $1835($168_1 | 0, $169_1 | 0, i64toi32_i32$5 | 0, $170_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$3 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$3 | 0;
    i64toi32_i32$2 = $5_1 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$5;
    $3$hi = i64toi32_i32$0;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 3;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $142_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $142_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $193_1 = $142_1;
   $193$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 61;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $143_1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    $143_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $195$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $193$hi;
   i64toi32_i32$5 = $193_1;
   i64toi32_i32$0 = $195$hi;
   i64toi32_i32$1 = $143_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   i64toi32_i32$5 = 524288;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $1$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$0 = $10_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 3;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $144_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $144_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $199_1 = $144_1;
   $199$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 61;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $145_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $145_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $201$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $199$hi;
   i64toi32_i32$2 = $199_1;
   i64toi32_i32$5 = $201$hi;
   i64toi32_i32$1 = $145_1;
   i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 3;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $146_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $146_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $10_1 = $146_1;
   $10$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$5 = $11_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $3_1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
   $3$hi = i64toi32_i32$0;
   label$10 : {
    if (($6_1 | 0) == ($8_1 | 0)) {
     break label$10
    }
    label$11 : {
     $7_1 = $6_1 - $8_1 | 0;
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $10_1 = 1;
     $10$hi = i64toi32_i32$0;
     break label$10;
    }
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$5 = $1$hi;
    $1835($5_1 + 64 | 0 | 0, $10_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$5 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    $1837($5_1 + 48 | 0 | 0, $10_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0);
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
    $228_1 = i64toi32_i32$0;
    $228$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
    $230_1 = i64toi32_i32$5;
    $230$hi = i64toi32_i32$0;
    i64toi32_i32$2 = (i64toi32_i32$2 + 64 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $234_1 = i64toi32_i32$0;
    $234$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $230$hi;
    i64toi32_i32$2 = $230_1;
    i64toi32_i32$0 = $234$hi;
    i64toi32_i32$1 = $234_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 0;
    $236_1 = (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$5 = 0;
    $237$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $228$hi;
    i64toi32_i32$1 = $228_1;
    i64toi32_i32$0 = $237$hi;
    i64toi32_i32$2 = $236_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $10_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$0 = 524288;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $12_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$1 = $9_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 3;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $147_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $147_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $9_1 = $147_1;
   $9$hi = i64toi32_i32$5;
   label$12 : {
    label$13 : {
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$5 | 0) > (i64toi32_i32$1 | 0)) {
      $148_1 = 1
     } else {
      if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0) {
        $149_1 = 0
       } else {
        $149_1 = 1
       }
       $150_1 = $149_1;
      } else {
       $150_1 = 0
      }
      $148_1 = $150_1;
     }
     if ($148_1) {
      break label$13
     }
     i64toi32_i32$0 = 0;
     $3_1 = 0;
     $3$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $251_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
     $251$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$0 = $12_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $254_1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $254$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $251$hi;
     i64toi32_i32$5 = $251_1;
     i64toi32_i32$0 = $254$hi;
     i64toi32_i32$1 = $254_1;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     if (!(i64toi32_i32$5 | i64toi32_i32$1 | 0 | i64toi32_i32$0 | 0)) {
      break label$1
     }
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$0 = $12_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $262$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $9$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$4 = $9$hi;
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$1 = $10_1;
     $265_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $266$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $262$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $266$hi;
     i64toi32_i32$0 = $265_1;
     i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$1 = 524287;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$12
     }
     $271_1 = $5_1 + 32 | 0;
     i64toi32_i32$3 = $2$hi;
     $272_1 = $2_1;
     $272$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $273_1 = $4_1;
     $273$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     $7_1 = !($4_1 | i64toi32_i32$3 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$4 ? $2_1 : $4_1;
     i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$5;
     i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$5 | 0) == (32 | 0)) {
      $151_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
     } else {
      $151_1 = i64toi32_i32$5
     }
     $280$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $283$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $280$hi;
     i64toi32_i32$1 = $151_1;
     i64toi32_i32$0 = $283$hi;
     i64toi32_i32$5 = $7_1 << 6 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $7_1 = i64toi32_i32$3 + -12 | 0;
     i64toi32_i32$2 = $272$hi;
     i64toi32_i32$1 = $273$hi;
     $1835($271_1 | 0, $272_1 | 0, i64toi32_i32$2 | 0, $273_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$4 = $5_1 + 40 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$1;
     break label$12;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$2 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $298_1 = i64toi32_i32$0;
    $298$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$4 = $9$hi;
    i64toi32_i32$5 = $9_1;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $2_1 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$5 = $10_1;
    $304_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $305$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $298$hi;
    i64toi32_i32$5 = $298_1;
    i64toi32_i32$0 = $305$hi;
    i64toi32_i32$1 = $304_1;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$5 = 1048576;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    if (!(i64toi32_i32$4 & i64toi32_i32$1 | 0 | i64toi32_i32$5 | 0)) {
     break label$12
    }
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $152_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $152_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
    }
    $311_1 = $152_1;
    $311$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $153_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
     $153_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $313$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $311$hi;
    i64toi32_i32$3 = $311_1;
    i64toi32_i32$5 = $313$hi;
    i64toi32_i32$1 = $153_1;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $314_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $314$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
    $316_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $316$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $314$hi;
    i64toi32_i32$5 = $314_1;
    i64toi32_i32$2 = $316$hi;
    i64toi32_i32$1 = $316_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $2_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $2$hi = i64toi32_i32$2;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $154_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $154_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $4_1 = $154_1;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
   $10_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $10$hi = i64toi32_i32$3;
   label$14 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$2;
    break label$1;
   }
   $7_1 = 0;
   label$15 : {
    label$16 : {
     if (($6_1 | 0) <= (0 | 0)) {
      break label$16
     }
     $7_1 = $6_1;
     break label$15;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$5 = $4$hi;
    $1835($5_1 + 16 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    $1837($5_1 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $343_1 = i64toi32_i32$2;
    $343$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
    $345_1 = i64toi32_i32$5;
    $345$hi = i64toi32_i32$2;
    i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $349_1 = i64toi32_i32$2;
    $349$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $345$hi;
    i64toi32_i32$3 = $345_1;
    i64toi32_i32$2 = $349$hi;
    i64toi32_i32$1 = $349_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 0;
    $351_1 = (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$5 = 0;
    $352$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $343$hi;
    i64toi32_i32$1 = $343_1;
    i64toi32_i32$2 = $352$hi;
    i64toi32_i32$3 = $351_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$5 = $5_1 + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 3;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $155_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    $155_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $358_1 = $155_1;
   $358$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 61;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $156_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $156_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $360$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $358$hi;
   i64toi32_i32$2 = $358_1;
   i64toi32_i32$1 = $360$hi;
   i64toi32_i32$3 = $156_1;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $3_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    $157_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $157_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   }
   $364_1 = $157_1;
   $364$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 3;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $158_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $158_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
   }
   i64toi32_i32$2 = $158_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $367_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   $367$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $364$hi;
   i64toi32_i32$5 = $364_1;
   i64toi32_i32$2 = $367$hi;
   i64toi32_i32$3 = $367_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $368$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$2 = $368$hi;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   $6_1 = $2_1 & 7 | 0;
   label$17 : {
    label$18 : {
     label$19 : {
      switch ($1856() | 0 | 0) {
      case 0:
       i64toi32_i32$5 = $4$hi;
       $375_1 = $4_1;
       $375$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = 0;
       $379$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$1 = $379$hi;
       i64toi32_i32$3 = $6_1 >>> 0 > 4 >>> 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $10_1 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $383_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $384$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $375$hi;
       i64toi32_i32$3 = $375_1;
       i64toi32_i32$4 = $384$hi;
       i64toi32_i32$2 = $383_1;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $4_1 = i64toi32_i32$1;
       $4$hi = i64toi32_i32$0;
       label$22 : {
        if (($6_1 | 0) == (4 | 0)) {
         break label$22
        }
        i64toi32_i32$0 = $10$hi;
        $3_1 = $10_1;
        $3$hi = i64toi32_i32$0;
        break label$18;
       }
       i64toi32_i32$0 = $4$hi;
       $389_1 = $4_1;
       $389$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$5 = $10_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
       $1_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
       $1$hi = i64toi32_i32$3;
       i64toi32_i32$3 = i64toi32_i32$0;
       i64toi32_i32$3 = $1$hi;
       i64toi32_i32$0 = $1_1;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$2 = $10_1;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $3_1 = i64toi32_i32$4;
       $3$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1$hi;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$0 = $1$hi;
       i64toi32_i32$2 = $1_1;
       $397_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
       i64toi32_i32$3 = 0;
       $398$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $389$hi;
       i64toi32_i32$2 = $389_1;
       i64toi32_i32$1 = $398$hi;
       i64toi32_i32$0 = $397_1;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $4_1 = i64toi32_i32$5;
       $4$hi = i64toi32_i32$4;
       break label$17;
      case 1:
       i64toi32_i32$4 = $4$hi;
       $400_1 = $4_1;
       $400$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$3 = $10_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 0;
       $406_1 = ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | 0) & ($6_1 | 0) != (0 | 0) | 0;
       i64toi32_i32$3 = 0;
       $407$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$0 = $3_1;
       i64toi32_i32$4 = $407$hi;
       i64toi32_i32$2 = $406_1;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $10_1 = i64toi32_i32$1;
       $10$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$3 = i64toi32_i32$1;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$2 = $3_1;
       $411_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
       i64toi32_i32$3 = 0;
       $412$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $400$hi;
       i64toi32_i32$2 = $400_1;
       i64toi32_i32$5 = $412$hi;
       i64toi32_i32$0 = $411_1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $4_1 = i64toi32_i32$4;
       $4$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $10$hi;
       $3_1 = $10_1;
       $3$hi = i64toi32_i32$1;
       break label$18;
      case 2:
       break label$19;
      default:
       break label$18;
      };
     }
     i64toi32_i32$1 = $4$hi;
     $415_1 = $4_1;
     $415$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $10$hi;
     $421_1 = !($10_1 | i64toi32_i32$1 | 0) & ($6_1 | 0) != (0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $422$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $422$hi;
     i64toi32_i32$0 = $421_1;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $3_1;
     $426_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $427$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $415$hi;
     i64toi32_i32$0 = $415_1;
     i64toi32_i32$4 = $427$hi;
     i64toi32_i32$3 = $426_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     $3_1 = $10_1;
     $3$hi = i64toi32_i32$5;
    }
    if (!$6_1) {
     break label$1
    }
   }
   $1857() | 0;
  }
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $4$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $1859($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $14_1 = 0, $14$hi = 0, $20_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  $1858($5_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$3;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1860($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $4$hi = 0, $5$hi = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $17_1 = 0, $17$hi = 0, $19$hi = 0, $33_1 = 0, $33$hi = 0, $36_1 = 0, $38_1 = 0, $43_1 = 0, $43$hi = 0, $45$hi = 0, $73_1 = 0, $73$hi = 0, $77$hi = 0, $80_1 = 0, $80$hi = 0, $82_1 = 0, $82$hi = 0, $86_1 = 0, $86$hi = 0, $88_1 = 0, $89$hi = 0, $98$hi = 0, $105_1 = 0, $105$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $44_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $44_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $44_1;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $45_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $45_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $45_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $33_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
    $33$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = $33$hi;
    i64toi32_i32$5 = $33_1;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $36_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$5 = 0;
    $38_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $36_1 : $38_1) {
     break label$4
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $46_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
     $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
    }
    $43_1 = $46_1;
    $43$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
     $47_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
     $47_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    }
    $45$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $43$hi;
    i64toi32_i32$0 = $43_1;
    i64toi32_i32$5 = $45$hi;
    i64toi32_i32$4 = $47_1;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    i64toi32_i32$2 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $5_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $5$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 2146435072;
   $5_1 = 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$5 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $5_1 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $48_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $48_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $48_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $4$hi;
   $1835($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   $1837($2_1 | 0, $0_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 60;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $49_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $49_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $73_1 = $49_1;
   $73$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 4;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $50_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $50_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $77$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $73$hi;
   i64toi32_i32$4 = $73_1;
   i64toi32_i32$2 = $77$hi;
   i64toi32_i32$5 = $50_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $5$hi = i64toi32_i32$2;
   label$5 : {
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    $80_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $80$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $82_1 = i64toi32_i32$4;
    $82$hi = i64toi32_i32$0;
    i64toi32_i32$2 = (i64toi32_i32$2 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $86_1 = i64toi32_i32$0;
    $86$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $82$hi;
    i64toi32_i32$2 = $82_1;
    i64toi32_i32$0 = $86$hi;
    i64toi32_i32$5 = $86_1;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    $88_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$4 = 0;
    $89$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $80$hi;
    i64toi32_i32$5 = $80_1;
    i64toi32_i32$0 = $89$hi;
    i64toi32_i32$2 = $88_1;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$2 = 1;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5_1 = i64toi32_i32$3;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$2 = 134217728;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $98$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$1 = $98$hi;
   i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5_1 = i64toi32_i32$0;
   $5$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$4 = -2147483648;
  i64toi32_i32$2 = 0;
  i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
  $105_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $105$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$1 = $105$hi;
  i64toi32_i32$2 = $105_1;
  i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$2 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $1861($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $3_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $30_1 = 0, $38_1 = 0, $38$hi = 0, $42$hi = 0, $48_1 = 0, $49_1 = 0, $49$hi = 0, $53$hi = 0, $54_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
    $4_1 = $3_1 & 2147483647 | 0;
    if (($4_1 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $24_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $24_1;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$5;
    break label$1;
   }
   label$3 : {
    if ($4_1 >>> 0 < 2139095040 >>> 0) {
     break label$3
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $25_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $25_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $25_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    break label$1;
   }
   label$4 : {
    if ($4_1) {
     break label$4
    }
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   $30_1 = $4_1;
   $4_1 = Math_clz32($4_1);
   i64toi32_i32$5 = 0;
   $1835($2_1 | 0, $30_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 + 81 | 0 | 0);
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $38_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $4_1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $26_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $26_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $42$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $38$hi;
   i64toi32_i32$5 = $38_1;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$3 = $26_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $48_1 = i64toi32_i32$1;
  i64toi32_i32$5 = $5$hi;
  $49_1 = $5_1;
  $49$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $3_1 & -2147483648 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $27_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $53$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$5 = $49_1;
  i64toi32_i32$0 = $53$hi;
  i64toi32_i32$3 = $27_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $54_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $48_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $54_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1862($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $21_1 = 0, $22_1 = 0, $19_1 = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $32_1 = 0, $32$hi = 0, $36$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 ^ $3_1 | 0) - $3_1 | 0;
   i64toi32_i32$0 = 0;
   $19_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $1835($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27_1;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32_1 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1_1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32_1;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1863($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $6_1 = 0, $6$hi = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $3_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $33$hi = 0, $37_1 = 0, $50_1 = 0, $50$hi = 0, $54$hi = 0, $63_1 = 0, $63$hi = 0, $64_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $26_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $26_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $6_1 = $26_1;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $27_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $27_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $27_1;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$2;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $28_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $28_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $6_1 = $28_1;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $29_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $29_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $5$hi;
    if (!!($5_1 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   $32_1 = $2_1;
   i64toi32_i32$3 = $5$hi;
   $33_1 = $5_1;
   $33$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   $37_1 = Math_clz32($4_1) + 32 | 0;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $30_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $30_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $3_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37_1 : Math_clz32($30_1);
   i64toi32_i32$3 = $33$hi;
   i64toi32_i32$4 = 0;
   $1835($32_1 | 0, $33_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = $2_1 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $50_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $50$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $3_1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $31_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $31_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $54$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $50$hi;
   i64toi32_i32$4 = $50_1;
   i64toi32_i32$3 = $54$hi;
   i64toi32_i32$0 = $31_1;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$3;
   $6$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$5 = $4_1;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $63_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $63$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = $63$hi;
  i64toi32_i32$0 = $63_1;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $64_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0_1;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1864($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $11_1 = 0, $19_1 = 0, $19$hi = 0, $23$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $1_1;
   $1_1 = Math_clz32($1_1);
   i64toi32_i32$1 = 0;
   $1835($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $1_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $19_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19_1;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $17_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1865($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $5$hi = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $20_1 = 0, $24_1 = 0, $34_1 = 0, $34$hi = 0, $42_1 = 0, $44_1 = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $93_1 = 0, $97_1 = 0, $105_1 = 0, $105$hi = 0, $114_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = $1_1 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1065418752;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = -1082064896;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 25;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $37_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $37_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $3_1 = $37_1;
    label$3 : {
     i64toi32_i32$4 = $0$hi;
     $20_1 = !($0_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $5_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $5$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 16777216;
     $24_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 16777216;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $20_1 : $24_1) {
      break label$3
     }
     $4_1 = $3_1 + 1073741825 | 0;
     break label$1;
    }
    $4_1 = $3_1 + 1073741824 | 0;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    $34_1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $34$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$5 = $34$hi;
    i64toi32_i32$3 = $34_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$1
    }
    $4_1 = $4_1 + ($3_1 & 1 | 0) | 0;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $42_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$1 = 0;
    $44_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $42_1 : $44_1) {
     break label$4
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 25;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $38_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $38_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $4_1 = $38_1 & 4194303 | 0 | 2143289344 | 0;
    break label$1;
   }
   $4_1 = 2139095040;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$5 = 1082064895;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $39_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    $39_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $3_1 = $39_1;
   if ($3_1 >>> 0 < 16145 >>> 0) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   $1835($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$3 | 0, $3_1 + -16129 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   $1837($2_1 | 0, $0_1 | 0, i64toi32_i32$3 | 0, $5_1 | 0, i64toi32_i32$1 | 0, 16257 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$1;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 25;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $40_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $40_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $4_1 = $40_1;
   label$5 : {
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $81_1 = i64toi32_i32$1;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$1;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$3 = $83_1;
    i64toi32_i32$1 = $87$hi;
    i64toi32_i32$5 = $87_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$5 = $81_1;
    i64toi32_i32$1 = $90$hi;
    i64toi32_i32$3 = $89_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $0_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$1;
    $93_1 = !($0_1 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 33554431;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $5_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    $97_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 16777216;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $93_1 : $97_1) {
     break label$5
    }
    $4_1 = $4_1 + 1 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 16777216;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $105_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $105$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$4 = $105$hi;
   i64toi32_i32$5 = $105_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
    break label$1
   }
   $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
  }
  global$0 = $2_1 + 32 | 0;
  $114_1 = $4_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $41_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   $41_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $114_1 | ($41_1 & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
 }
 
 function $1866($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = Math_fround(0), $2_1 = 0, $1_1 = 0, $4_1 = Math_fround(0);
  label$1 : {
   $1_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
   $2_1 = $1_1 & 2147483647 | 0;
   if ($2_1 >>> 0 < 1065353216 >>> 0) {
    break label$1
   }
   label$2 : {
    if (($2_1 | 0) != (1065353216 | 0)) {
     break label$2
    }
    return Math_fround(($1_1 | 0) > (-1 | 0) ? Math_fround(0.0) : Math_fround(3.141592502593994));
   }
   return Math_fround(Math_fround(Math_fround(0.0) / Math_fround($0_1 - $0_1)));
  }
  label$3 : {
   label$4 : {
    if ($2_1 >>> 0 > 1056964607 >>> 0) {
     break label$4
    }
    $3_1 = Math_fround(1.570796251296997);
    if ($2_1 >>> 0 < 847249409 >>> 0) {
     break label$3
    }
    return Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(7.549789415861596e-08) - Math_fround($0_1 * Math_fround($1867(Math_fround(Math_fround($0_1 * $0_1)))))) - $0_1) + Math_fround(1.570796251296997)));
   }
   label$5 : {
    if (($1_1 | 0) > (-1 | 0)) {
     break label$5
    }
    $0_1 = Math_fround(Math_fround($0_1 + Math_fround(1.0)) * Math_fround(.5));
    $3_1 = Math_fround($1868(Math_fround($0_1)));
    $0_1 = Math_fround(Math_fround(1.570796251296997) - Math_fround($3_1 + Math_fround(Math_fround($3_1 * Math_fround($1867(Math_fround($0_1)))) + Math_fround(-7.549789415861596e-08))));
    return Math_fround(Math_fround($0_1 + $0_1));
   }
   $3_1 = Math_fround(Math_fround(Math_fround(1.0) - $0_1) * Math_fround(.5));
   $4_1 = Math_fround($1868(Math_fround($3_1)));
   $0_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($4_1), wasm2js_scratch_load_i32(2)) & -4096 | 0), wasm2js_scratch_load_f32());
   $0_1 = Math_fround(Math_fround(Math_fround($4_1 * Math_fround($1867(Math_fround($3_1)))) + Math_fround(Math_fround($3_1 - Math_fround($0_1 * $0_1)) / Math_fround($4_1 + $0_1))) + $0_1);
   $3_1 = Math_fround($0_1 + $0_1);
  }
  return Math_fround($3_1);
 }
 
 function $1867($0_1) {
  $0_1 = Math_fround($0_1);
  return Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($0_1 * Math_fround(Math_fround($0_1 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593)) * $0_1) / Math_fround(Math_fround($0_1 * Math_fround(-.7066296339035034)) + Math_fround(1.0))));
 }
 
 function $1868($0_1) {
  $0_1 = Math_fround($0_1);
  return Math_fround(Math_fround(Math_sqrt($0_1)));
 }
 
 function $1869($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $4_1 = 0, $6_1 = Math_fround(0), $5_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if ((($1870(Math_fround($1_1)) | 0) & 2147483647 | 0) >>> 0 > 2139095040 >>> 0) {
     break label$2
    }
    if ((($1870(Math_fround($0_1)) | 0) & 2147483647 | 0) >>> 0 < 2139095041 >>> 0) {
     break label$1
    }
   }
   return Math_fround(Math_fround($0_1 + $1_1));
  }
  label$3 : {
   $2_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
   if (($2_1 | 0) != (1065353216 | 0)) {
    break label$3
   }
   return Math_fround(Math_fround($1871(Math_fround($0_1))));
  }
  $3_1 = ($2_1 >>> 30 | 0) & 2 | 0;
  $4_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  $5_1 = $3_1 | ($4_1 >>> 31 | 0) | 0;
  label$4 : {
   label$5 : {
    label$6 : {
     $4_1 = $4_1 & 2147483647 | 0;
     if ($4_1) {
      break label$6
     }
     $6_1 = $0_1;
     label$7 : {
      switch ($5_1 | 0) {
      case 2:
       return Math_fround(Math_fround(3.1415927410125732));
      case 3:
       break label$7;
      default:
       break label$5;
      };
     }
     return Math_fround(Math_fround(-3.1415927410125732));
    }
    label$9 : {
     $2_1 = $2_1 & 2147483647 | 0;
     if (($2_1 | 0) == (2139095040 | 0)) {
      break label$9
     }
     label$10 : {
      if ($2_1) {
       break label$10
      }
      return Math_fround((wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32(Math_fround(1.5707963705062866)), wasm2js_scratch_load_i32(2)) & 2147483647 | 0 | ((wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
     }
     label$11 : {
      label$12 : {
       if (($4_1 | 0) == (2139095040 | 0)) {
        break label$12
       }
       if (($2_1 + 218103808 | 0) >>> 0 >= $4_1 >>> 0) {
        break label$11
       }
      }
      return Math_fround((wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32(Math_fround(1.5707963705062866)), wasm2js_scratch_load_i32(2)) & 2147483647 | 0 | ((wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
     }
     label$13 : {
      label$14 : {
       if (!$3_1) {
        break label$14
       }
       $6_1 = Math_fround(0.0);
       if (($4_1 + 218103808 | 0) >>> 0 < $2_1 >>> 0) {
        break label$13
       }
      }
      $6_1 = Math_fround($1871(Math_fround(Math_fround($1872(Math_fround(Math_fround($0_1 / $1_1)))))));
     }
     label$15 : {
      switch ($5_1 | 0) {
      case 1:
       return Math_fround(Math_fround(-$6_1));
      case 2:
       return Math_fround(Math_fround(Math_fround(3.1415927410125732) - Math_fround($6_1 + Math_fround(8.742277657347586e-08))));
      case 0:
       break label$5;
      default:
       break label$15;
      };
     }
     return Math_fround(Math_fround(Math_fround($6_1 + Math_fround(8.742277657347586e-08)) + Math_fround(-3.1415927410125732)));
    }
    if (($4_1 | 0) == (2139095040 | 0)) {
     break label$4
    }
    $6_1 = Math_fround(HEAPF32[(($5_1 << 2 | 0) + 20736 | 0) >> 2]);
   }
   return Math_fround($6_1);
  }
  return Math_fround(Math_fround(HEAPF32[(($5_1 << 2 | 0) + 20720 | 0) >> 2]));
 }
 
 function $1870($0_1) {
  $0_1 = Math_fround($0_1);
  return (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) | 0;
 }
 
 function $1871($0_1) {
  $0_1 = Math_fround($0_1);
  var $2_1 = 0, $5_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0), $1_1 = 0, $6_1 = Math_fround(0);
  label$1 : {
   $1_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
   $2_1 = $1_1 & 2147483647 | 0;
   if ($2_1 >>> 0 < 1283457024 >>> 0) {
    break label$1
   }
   return Math_fround((($1873(Math_fround($0_1)) | 0) & 2147483647 | 0) >>> 0 > 2139095040 >>> 0 ? $0_1 : (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32(Math_fround(1.570796251296997)), wasm2js_scratch_load_i32(2)) & 2147483647 | 0 | ((wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
  }
  label$2 : {
   label$3 : {
    label$4 : {
     if ($2_1 >>> 0 > 1054867455 >>> 0) {
      break label$4
     }
     $3_1 = -1;
     if ($2_1 >>> 0 >= 964689920 >>> 0) {
      break label$3
     }
     break label$2;
    }
    $0_1 = Math_fround($1872(Math_fround($0_1)));
    label$5 : {
     if ($2_1 >>> 0 > 1066926079 >>> 0) {
      break label$5
     }
     label$6 : {
      if ($2_1 >>> 0 > 1060110335 >>> 0) {
       break label$6
      }
      $0_1 = Math_fround(Math_fround(Math_fround($0_1 + $0_1) + Math_fround(-1.0)) / Math_fround($0_1 + Math_fround(2.0)));
      $3_1 = 0;
      break label$3;
     }
     $0_1 = Math_fround(Math_fround($0_1 + Math_fround(-1.0)) / Math_fround($0_1 + Math_fround(1.0)));
     $3_1 = 1;
     break label$3;
    }
    label$7 : {
     if ($2_1 >>> 0 > 1075576831 >>> 0) {
      break label$7
     }
     $0_1 = Math_fround(Math_fround($0_1 + Math_fround(-1.5)) / Math_fround(Math_fround($0_1 * Math_fround(1.5)) + Math_fround(1.0)));
     $3_1 = 2;
     break label$3;
    }
    $0_1 = Math_fround(Math_fround(-1.0) / $0_1);
    $3_1 = 3;
   }
   $4_1 = Math_fround($0_1 * $0_1);
   $5_1 = Math_fround($4_1 * $4_1);
   $6_1 = Math_fround($5_1 * Math_fround(Math_fround($5_1 * Math_fround(-.106480173766613)) + Math_fround(-.19999158382415771)));
   $5_1 = Math_fround($4_1 * Math_fround(Math_fround($5_1 * Math_fround(Math_fround($5_1 * Math_fround(.06168760731816292)) + Math_fround(.14253635704517365))) + Math_fround(.333333283662796)));
   label$8 : {
    if ($2_1 >>> 0 > 1054867455 >>> 0) {
     break label$8
    }
    return Math_fround(Math_fround($0_1 - Math_fround($0_1 * Math_fround($6_1 + $5_1))));
   }
   $2_1 = $3_1 << 2 | 0;
   $0_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 20752 | 0) >> 2]) - Math_fround(Math_fround(Math_fround($0_1 * Math_fround($6_1 + $5_1)) - Math_fround(HEAPF32[($2_1 + 20768 | 0) >> 2])) - $0_1));
   $0_1 = ($1_1 | 0) < (0 | 0) ? Math_fround(-$0_1) : $0_1;
  }
  return Math_fround($0_1);
 }
 
 function $1872($0_1) {
  $0_1 = Math_fround($0_1);
  return Math_fround(Math_fround(Math_abs($0_1)));
 }
 
 function $1873($0_1) {
  $0_1 = Math_fround($0_1);
  return (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) | 0;
 }
 
 function $1874($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0.0;
  $0_1 = $0_1 * $0_1;
  $1_1 = $0_1 * $0_1;
  return Math_fround(Math_fround($0_1 * $1_1 * ($0_1 * 2.439044879627741e-05 + -.001388676377460993) + ($1_1 * .04166662332373906 + ($0_1 * -.499999997251031 + 1.0))));
 }
 
 function $1875($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0.0, $2_1 = 0.0;
  $1_1 = $0_1 * $0_1;
  $2_1 = $1_1 * $0_1;
  return Math_fround(Math_fround($2_1 * ($1_1 * $1_1) * ($1_1 * 2.718311493989822e-06 + -1.9839334836096632e-04) + ($2_1 * ($1_1 * .008333329385889463 + -.16666666641626524) + $0_1)));
 }
 
 function $1876($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $22_1 = 0.0, $11_1 = 0, $6_1 = 0, $5_1 = 0, $23_1 = 0.0, $14_1 = 0, $9_1 = 0, $10_1 = 0, $8_1 = 0, $21_1 = 0, $19_1 = 0, $12_1 = 0, $18_1 = 0, $24_1 = 0.0, $7_1 = 0, $13_1 = 0, $16_1 = 0, $20_1 = 0, $15_1 = 0, $17_1 = 0, $207_1 = 0, $210_1 = 0, $521_1 = 0.0, $555_1 = 0.0;
  $5_1 = global$0 - 560 | 0;
  global$0 = $5_1;
  $6_1 = ($2_1 + -3 | 0 | 0) / (24 | 0) | 0;
  $7_1 = ($6_1 | 0) > (0 | 0) ? $6_1 : 0;
  $8_1 = Math_imul($7_1, -24) + $2_1 | 0;
  label$1 : {
   $9_1 = HEAP32[(($4_1 << 2 | 0) + 20784 | 0) >> 2] | 0;
   $10_1 = $3_1 + -1 | 0;
   if (($9_1 + $10_1 | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $11_1 = $9_1 + $3_1 | 0;
   $2_1 = $7_1 - $10_1 | 0;
   $6_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (($2_1 | 0) >= (0 | 0)) {
       break label$4
      }
      $22_1 = 0.0;
      break label$3;
     }
     $22_1 = +(HEAP32[(($2_1 << 2 | 0) + 20800 | 0) >> 2] | 0 | 0);
    }
    HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = $22_1;
    $2_1 = $2_1 + 1 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) != ($11_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $12_1 = $8_1 + -24 | 0;
  $11_1 = 0;
  $13_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
  $14_1 = ($3_1 | 0) < (1 | 0);
  label$5 : while (1) {
   label$6 : {
    label$7 : {
     if (!$14_1) {
      break label$7
     }
     $22_1 = 0.0;
     break label$6;
    }
    $6_1 = $11_1 + $10_1 | 0;
    $2_1 = 0;
    $22_1 = 0.0;
    label$8 : while (1) {
     $22_1 = +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3] + $22_1;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($3_1 | 0)) {
      continue label$8
     }
     break label$8;
    };
   }
   HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $22_1;
   $2_1 = ($11_1 | 0) == ($13_1 | 0);
   $11_1 = $11_1 + 1 | 0;
   if (!$2_1) {
    continue label$5
   }
   break label$5;
  };
  $15_1 = 47 - $8_1 | 0;
  $16_1 = 48 - $8_1 | 0;
  $17_1 = $8_1 + -25 | 0;
  $11_1 = $9_1;
  label$9 : {
   label$10 : while (1) {
    $22_1 = +HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3];
    $2_1 = 0;
    $6_1 = $11_1;
    label$11 : {
     $18_1 = ($11_1 | 0) < (1 | 0);
     if ($18_1) {
      break label$11
     }
     label$12 : while (1) {
      $14_1 = $2_1 << 2 | 0;
      label$13 : {
       label$14 : {
        $23_1 = $22_1 * 5.9604644775390625e-08;
        if (!(Math_abs($23_1) < 2147483648.0)) {
         break label$14
        }
        $10_1 = ~~$23_1;
        break label$13;
       }
       $10_1 = -2147483648;
      }
      $14_1 = ($5_1 + 480 | 0) + $14_1 | 0;
      label$15 : {
       label$16 : {
        $23_1 = +($10_1 | 0);
        $22_1 = $23_1 * -16777216.0 + $22_1;
        if (!(Math_abs($22_1) < 2147483648.0)) {
         break label$16
        }
        $10_1 = ~~$22_1;
        break label$15;
       }
       $10_1 = -2147483648;
      }
      HEAP32[$14_1 >> 2] = $10_1;
      $6_1 = $6_1 + -1 | 0;
      $22_1 = +HEAPF64[($5_1 + ($6_1 << 3 | 0) | 0) >> 3] + $23_1;
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != ($11_1 | 0)) {
       continue label$12
      }
      break label$12;
     };
    }
    $22_1 = +$1820(+$22_1, $12_1 | 0);
    label$17 : {
     label$18 : {
      $22_1 = $22_1 + +$1877(+($22_1 * .125)) * -8.0;
      if (!(Math_abs($22_1) < 2147483648.0)) {
       break label$18
      }
      $19_1 = ~~$22_1;
      break label$17;
     }
     $19_1 = -2147483648;
    }
    $22_1 = $22_1 - +($19_1 | 0);
    label$19 : {
     label$20 : {
      label$21 : {
       label$22 : {
        label$23 : {
         $20_1 = ($12_1 | 0) < (1 | 0);
         if ($20_1) {
          break label$23
         }
         $2_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
         $207_1 = $2_1;
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         $210_1 = $2_1;
         $2_1 = $2_1 >> $16_1 | 0;
         $6_1 = $210_1 - ($2_1 << $16_1 | 0) | 0;
         HEAP32[$207_1 >> 2] = $6_1;
         $21_1 = $6_1 >> $15_1 | 0;
         $19_1 = $2_1 + $19_1 | 0;
         break label$22;
        }
        if ($12_1) {
         break label$21
        }
        $21_1 = (HEAP32[((($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0) >> 2] | 0) >> 23 | 0;
       }
       if (($21_1 | 0) < (1 | 0)) {
        break label$19
       }
       break label$20;
      }
      $21_1 = 2;
      if ($22_1 >= .5) {
       break label$20
      }
      $21_1 = 0;
      break label$19;
     }
     $2_1 = 0;
     $10_1 = 0;
     label$24 : {
      if ($18_1) {
       break label$24
      }
      label$25 : while (1) {
       $18_1 = ($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0;
       $6_1 = HEAP32[$18_1 >> 2] | 0;
       $14_1 = 16777215;
       label$26 : {
        label$27 : {
         if ($10_1) {
          break label$27
         }
         $14_1 = 16777216;
         if ($6_1) {
          break label$27
         }
         $10_1 = 0;
         break label$26;
        }
        HEAP32[$18_1 >> 2] = $14_1 - $6_1 | 0;
        $10_1 = 1;
       }
       $2_1 = $2_1 + 1 | 0;
       if (($2_1 | 0) != ($11_1 | 0)) {
        continue label$25
       }
       break label$25;
      };
     }
     label$28 : {
      if ($20_1) {
       break label$28
      }
      $2_1 = 8388607;
      label$29 : {
       switch ($17_1 | 0) {
       case 1:
        $2_1 = 4194303;
        break;
       case 0:
        break label$29;
       default:
        break label$28;
       };
      }
      $6_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
      HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) & $2_1 | 0;
     }
     $19_1 = $19_1 + 1 | 0;
     if (($21_1 | 0) != (2 | 0)) {
      break label$19
     }
     $22_1 = 1.0 - $22_1;
     $21_1 = 2;
     if (!$10_1) {
      break label$19
     }
     $22_1 = $22_1 - +$1820(+(1.0), $12_1 | 0);
    }
    label$31 : {
     if ($22_1 != 0.0) {
      break label$31
     }
     $2_1 = 1;
     $14_1 = 0;
     $6_1 = $11_1;
     label$32 : {
      if (($11_1 | 0) <= ($9_1 | 0)) {
       break label$32
      }
      label$33 : while (1) {
       $6_1 = $6_1 + -1 | 0;
       $14_1 = HEAP32[(($5_1 + 480 | 0) + ($6_1 << 2 | 0) | 0) >> 2] | 0 | $14_1 | 0;
       if (($6_1 | 0) > ($9_1 | 0)) {
        continue label$33
       }
       break label$33;
      };
      if (!$14_1) {
       break label$32
      }
      $8_1 = $12_1;
      label$34 : while (1) {
       $8_1 = $8_1 + -24 | 0;
       $11_1 = $11_1 + -1 | 0;
       if (!(HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] | 0)) {
        continue label$34
       }
       break label$9;
      };
     }
     label$35 : while (1) {
      $6_1 = $2_1;
      $2_1 = $2_1 + 1 | 0;
      if (!(HEAP32[(($5_1 + 480 | 0) + (($9_1 - $6_1 | 0) << 2 | 0) | 0) >> 2] | 0)) {
       continue label$35
      }
      break label$35;
     };
     $14_1 = $6_1 + $11_1 | 0;
     label$36 : while (1) {
      $6_1 = $11_1 + $3_1 | 0;
      $11_1 = $11_1 + 1 | 0;
      HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = +(HEAP32[((($11_1 + $7_1 | 0) << 2 | 0) + 20800 | 0) >> 2] | 0 | 0);
      $2_1 = 0;
      $22_1 = 0.0;
      label$37 : {
       if (($3_1 | 0) < (1 | 0)) {
        break label$37
       }
       label$38 : while (1) {
        $22_1 = +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3] + $22_1;
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) != ($3_1 | 0)) {
         continue label$38
        }
        break label$38;
       };
      }
      HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $22_1;
      if (($11_1 | 0) < ($14_1 | 0)) {
       continue label$36
      }
      break label$36;
     };
     $11_1 = $14_1;
     continue label$10;
    }
    break label$10;
   };
   label$39 : {
    label$40 : {
     $22_1 = +$1820(+$22_1, 24 - $8_1 | 0 | 0);
     if (!($22_1 >= 16777216.0)) {
      break label$40
     }
     $3_1 = $11_1 << 2 | 0;
     label$41 : {
      label$42 : {
       $23_1 = $22_1 * 5.9604644775390625e-08;
       if (!(Math_abs($23_1) < 2147483648.0)) {
        break label$42
       }
       $2_1 = ~~$23_1;
       break label$41;
      }
      $2_1 = -2147483648;
     }
     $3_1 = ($5_1 + 480 | 0) + $3_1 | 0;
     label$43 : {
      label$44 : {
       $22_1 = +($2_1 | 0) * -16777216.0 + $22_1;
       if (!(Math_abs($22_1) < 2147483648.0)) {
        break label$44
       }
       $6_1 = ~~$22_1;
       break label$43;
      }
      $6_1 = -2147483648;
     }
     HEAP32[$3_1 >> 2] = $6_1;
     $11_1 = $11_1 + 1 | 0;
     break label$39;
    }
    label$45 : {
     label$46 : {
      if (!(Math_abs($22_1) < 2147483648.0)) {
       break label$46
      }
      $2_1 = ~~$22_1;
      break label$45;
     }
     $2_1 = -2147483648;
    }
    $8_1 = $12_1;
   }
   HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] = $2_1;
  }
  $22_1 = +$1820(+(1.0), $8_1 | 0);
  label$47 : {
   if (($11_1 | 0) < (0 | 0)) {
    break label$47
   }
   $3_1 = $11_1;
   label$48 : while (1) {
    $2_1 = $3_1;
    HEAPF64[($5_1 + ($2_1 << 3 | 0) | 0) >> 3] = $22_1 * +(HEAP32[(($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
    $3_1 = $2_1 + -1 | 0;
    $22_1 = $22_1 * 5.9604644775390625e-08;
    if ($2_1) {
     continue label$48
    }
    break label$48;
   };
   $9_1 = 0;
   $6_1 = $11_1;
   label$49 : while (1) {
    $0_1 = $13_1 >>> 0 < $9_1 >>> 0 ? $13_1 : $9_1;
    $2_1 = 0;
    $22_1 = 0.0;
    label$50 : while (1) {
     $22_1 = +HEAPF64[(($2_1 << 3 | 0) + 23568 | 0) >> 3] * +HEAPF64[($5_1 + (($2_1 + $6_1 | 0) << 3 | 0) | 0) >> 3] + $22_1;
     $3_1 = ($2_1 | 0) != ($0_1 | 0);
     $2_1 = $2_1 + 1 | 0;
     if ($3_1) {
      continue label$50
     }
     break label$50;
    };
    HEAPF64[(($5_1 + 160 | 0) + (($11_1 - $6_1 | 0) << 3 | 0) | 0) >> 3] = $22_1;
    $6_1 = $6_1 + -1 | 0;
    $2_1 = ($9_1 | 0) != ($11_1 | 0);
    $9_1 = $9_1 + 1 | 0;
    if ($2_1) {
     continue label$49
    }
    break label$49;
   };
  }
  label$51 : {
   label$52 : {
    label$53 : {
     switch ($4_1 | 0) {
     case 3:
      $24_1 = 0.0;
      label$56 : {
       if (($11_1 | 0) < (1 | 0)) {
        break label$56
       }
       $0_1 = ($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0;
       $22_1 = +HEAPF64[$0_1 >> 3];
       $2_1 = $11_1;
       label$57 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $23_1 = +HEAPF64[$6_1 >> 3];
        $521_1 = $23_1;
        $23_1 = $23_1 + $22_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $22_1 + ($521_1 - $23_1);
        HEAPF64[$6_1 >> 3] = $23_1;
        $6_1 = $2_1 >>> 0 > 1 >>> 0;
        $22_1 = $23_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label$57
        }
        break label$57;
       };
       if (($11_1 | 0) < (2 | 0)) {
        break label$56
       }
       $22_1 = +HEAPF64[$0_1 >> 3];
       $2_1 = $11_1;
       label$58 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $23_1 = +HEAPF64[$6_1 >> 3];
        $555_1 = $23_1;
        $23_1 = $23_1 + $22_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $22_1 + ($555_1 - $23_1);
        HEAPF64[$6_1 >> 3] = $23_1;
        $6_1 = $2_1 >>> 0 > 2 >>> 0;
        $22_1 = $23_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label$58
        }
        break label$58;
       };
       $24_1 = 0.0;
       label$59 : while (1) {
        $24_1 = $24_1 + +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
        $2_1 = ($11_1 | 0) > (2 | 0);
        $11_1 = $11_1 + -1 | 0;
        if ($2_1) {
         continue label$59
        }
        break label$59;
       };
      }
      $22_1 = +HEAPF64[($5_1 + 160 | 0) >> 3];
      if ($21_1) {
       break label$52
      }
      HEAPF64[$1_1 >> 3] = $22_1;
      $22_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
      HEAPF64[($1_1 + 16 | 0) >> 3] = $24_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $22_1;
      break label$51;
     case 0:
      $22_1 = 0.0;
      label$60 : {
       if (($11_1 | 0) < (0 | 0)) {
        break label$60
       }
       label$61 : while (1) {
        $2_1 = $11_1;
        $11_1 = $2_1 + -1 | 0;
        $22_1 = $22_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
        if ($2_1) {
         continue label$61
        }
        break label$61;
       };
      }
      HEAPF64[$1_1 >> 3] = $21_1 ? -$22_1 : $22_1;
      break label$51;
     case 1:
     case 2:
      break label$53;
     default:
      break label$51;
     };
    }
    $22_1 = 0.0;
    label$62 : {
     if (($11_1 | 0) < (0 | 0)) {
      break label$62
     }
     $3_1 = $11_1;
     label$63 : while (1) {
      $2_1 = $3_1;
      $3_1 = $2_1 + -1 | 0;
      $22_1 = $22_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      if ($2_1) {
       continue label$63
      }
      break label$63;
     };
    }
    HEAPF64[$1_1 >> 3] = $21_1 ? -$22_1 : $22_1;
    $22_1 = +HEAPF64[($5_1 + 160 | 0) >> 3] - $22_1;
    $2_1 = 1;
    label$64 : {
     if (($11_1 | 0) < (1 | 0)) {
      break label$64
     }
     label$65 : while (1) {
      $22_1 = $22_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      $3_1 = ($2_1 | 0) != ($11_1 | 0);
      $2_1 = $2_1 + 1 | 0;
      if ($3_1) {
       continue label$65
      }
      break label$65;
     };
    }
    HEAPF64[($1_1 + 8 | 0) >> 3] = $21_1 ? -$22_1 : $22_1;
    break label$51;
   }
   HEAPF64[$1_1 >> 3] = -$22_1;
   $22_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
   HEAPF64[($1_1 + 16 | 0) >> 3] = -$24_1;
   HEAPF64[($1_1 + 8 | 0) >> 3] = -$22_1;
  }
  global$0 = $5_1 + 560 | 0;
  return $19_1 & 7 | 0 | 0;
 }
 
 function $1877($0_1) {
  $0_1 = +$0_1;
  return +Math_floor($0_1);
 }
 
 function $1878($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0.0, $2_1 = 0, $3_1 = 0, $6_1 = 0.0, $8_1 = 0.0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
    $4_1 = $3_1 & 2147483647 | 0;
    if ($4_1 >>> 0 > 1305022426 >>> 0) {
     break label$2
    }
    $6_1 = +$0_1;
    $7_1 = $6_1 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $8_1 = $6_1 + $7_1 * -1.5707963109016418 + $7_1 * -1.5893254773528196e-08;
    HEAPF64[$1_1 >> 3] = $8_1;
    $3_1 = $8_1 < -.7853981852531433;
    label$3 : {
     label$4 : {
      if (!(Math_abs($7_1) < 2147483648.0)) {
       break label$4
      }
      $4_1 = ~~$7_1;
      break label$3;
     }
     $4_1 = -2147483648;
    }
    label$5 : {
     if (!$3_1) {
      break label$5
     }
     $7_1 = $7_1 + -1.0;
     HEAPF64[$1_1 >> 3] = $6_1 + $7_1 * -1.5707963109016418 + $7_1 * -1.5893254773528196e-08;
     $4_1 = $4_1 + -1 | 0;
     break label$1;
    }
    if (!($8_1 > .7853981852531433)) {
     break label$1
    }
    $7_1 = $7_1 + 1.0;
    HEAPF64[$1_1 >> 3] = $6_1 + $7_1 * -1.5707963109016418 + $7_1 * -1.5893254773528196e-08;
    $4_1 = $4_1 + 1 | 0;
    break label$1;
   }
   label$6 : {
    if ($4_1 >>> 0 < 2139095040 >>> 0) {
     break label$6
    }
    HEAPF64[$1_1 >> 3] = +Math_fround($0_1 - $0_1);
    $4_1 = 0;
    break label$1;
   }
   $5_1 = ($4_1 >>> 23 | 0) + -150 | 0;
   HEAPF64[($2_1 + 8 | 0) >> 3] = +(wasm2js_scratch_store_i32(2, $4_1 - ($5_1 << 23 | 0) | 0), wasm2js_scratch_load_f32());
   $4_1 = $1876($2_1 + 8 | 0 | 0, $2_1 | 0, $5_1 | 0, 1 | 0, 0 | 0) | 0;
   $7_1 = +HEAPF64[$2_1 >> 3];
   label$7 : {
    if (($3_1 | 0) > (-1 | 0)) {
     break label$7
    }
    HEAPF64[$1_1 >> 3] = -$7_1;
    $4_1 = 0 - $4_1 | 0;
    break label$1;
   }
   HEAPF64[$1_1 >> 3] = $7_1;
  }
  global$0 = $2_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1879($0_1) {
  $0_1 = Math_fround($0_1);
  var $4_1 = Math_fround(0), $1_1 = 0, $3_1 = 0, $2_1 = 0, $5_1 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
    $3_1 = $2_1 & 2147483647 | 0;
    if ($3_1 >>> 0 > 1061752794 >>> 0) {
     break label$2
    }
    $4_1 = Math_fround(1.0);
    if ($3_1 >>> 0 < 964689920 >>> 0) {
     break label$1
    }
    $4_1 = Math_fround($1874(+(+$0_1)));
    break label$1;
   }
   label$3 : {
    if ($3_1 >>> 0 > 1081824209 >>> 0) {
     break label$3
    }
    label$4 : {
     if ($3_1 >>> 0 < 1075235812 >>> 0) {
      break label$4
     }
     $4_1 = Math_fround(-Math_fround($1874(+((($2_1 | 0) < (0 | 0) ? 3.141592653589793 : -3.141592653589793) + +$0_1))));
     break label$1;
    }
    $5_1 = +$0_1;
    label$5 : {
     if (($2_1 | 0) > (-1 | 0)) {
      break label$5
     }
     $4_1 = Math_fround($1875(+($5_1 + 1.5707963267948966)));
     break label$1;
    }
    $4_1 = Math_fround($1875(+(1.5707963267948966 - $5_1)));
    break label$1;
   }
   label$6 : {
    if ($3_1 >>> 0 > 1088565717 >>> 0) {
     break label$6
    }
    label$7 : {
     if ($3_1 >>> 0 < 1085271520 >>> 0) {
      break label$7
     }
     $4_1 = Math_fround($1874(+((($2_1 | 0) < (0 | 0) ? 6.283185307179586 : -6.283185307179586) + +$0_1)));
     break label$1;
    }
    label$8 : {
     if (($2_1 | 0) > (-1 | 0)) {
      break label$8
     }
     $4_1 = Math_fround($1875(+(-4.71238898038469 - +$0_1)));
     break label$1;
    }
    $4_1 = Math_fround($1875(+(+$0_1 + -4.71238898038469)));
    break label$1;
   }
   label$9 : {
    if ($3_1 >>> 0 < 2139095040 >>> 0) {
     break label$9
    }
    $4_1 = Math_fround($0_1 - $0_1);
    break label$1;
   }
   label$10 : {
    switch (($1878(Math_fround($0_1), $1_1 + 8 | 0 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $4_1 = Math_fround($1874(+(+HEAPF64[($1_1 + 8 | 0) >> 3])));
     break label$1;
    case 1:
     $4_1 = Math_fround($1875(+-+HEAPF64[($1_1 + 8 | 0) >> 3]));
     break label$1;
    case 2:
     $4_1 = Math_fround(-Math_fround($1874(+(+HEAPF64[($1_1 + 8 | 0) >> 3]))));
     break label$1;
    default:
     break label$10;
    };
   }
   $4_1 = Math_fround($1875(+(+HEAPF64[($1_1 + 8 | 0) >> 3])));
  }
  global$0 = $1_1 + 16 | 0;
  return Math_fround($4_1);
 }
 
 function $1880($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1_1 = 1;
    break label$1;
   }
   $1_1 = !($1800($0_1 | 0) | 0);
  }
  $2_1 = $1881($0_1 | 0) | 0;
  $3_1 = FUNCTION_TABLE[HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0]($0_1) | 0;
  label$3 : {
   if ($1_1) {
    break label$3
   }
   $1801($0_1 | 0);
  }
  label$4 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 1 | 0) {
    break label$4
   }
   label$5 : {
    $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$5
    }
    HEAP32[($1_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   }
   label$6 : {
    $4_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$6
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = $1_1;
   }
   label$7 : {
    if ((HEAP32[(0 + 27132 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$7
    }
    HEAP32[(0 + 27132 | 0) >> 2] = $4_1;
   }
   $1828(HEAP32[($0_1 + 96 | 0) >> 2] | 0 | 0);
   $1828($0_1 | 0);
  }
  return $3_1 | $2_1 | 0 | 0;
 }
 
 function $1881($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $1_1 = 0;
    label$3 : {
     if (!(HEAP32[(0 + 25896 | 0) >> 2] | 0)) {
      break label$3
     }
     $1_1 = $1881(HEAP32[(0 + 25896 | 0) >> 2] | 0 | 0) | 0;
    }
    label$4 : {
     if (!(HEAP32[(0 + 26160 | 0) >> 2] | 0)) {
      break label$4
     }
     $1_1 = $1881(HEAP32[(0 + 26160 | 0) >> 2] | 0 | 0) | 0 | $1_1 | 0;
    }
    $0_1 = HEAP32[(0 + 27132 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$1
    }
    label$5 : while (1) {
     $2_1 = 0;
     label$6 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$6
      }
      $2_1 = $1800($0_1 | 0) | 0;
     }
     label$7 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
       break label$7
      }
      $1_1 = $1881($0_1 | 0) | 0 | $1_1 | 0;
     }
     label$8 : {
      if (!$2_1) {
       break label$8
      }
      $1801($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$5
     }
     break label$1;
    };
   }
   $2_1 = 0;
   label$9 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$9
    }
    $2_1 = $1800($0_1 | 0) | 0;
   }
   label$10 : {
    label$11 : {
     if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
      break label$11
     }
     FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
     if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
      break label$11
     }
     $1_1 = -1;
     if ($2_1) {
      break label$10
     }
     break label$1;
    }
    label$12 : {
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (($1_1 | 0) == ($3_1 | 0)) {
      break label$12
     }
     i64toi32_i32$1 = $1_1 - $3_1 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    }
    $1_1 = 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$1 = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$1 = 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
    if (!$2_1) {
     break label$1
    }
   }
   $1801($0_1 | 0);
  }
  return $1_1 | 0;
 }
 
 function $1882() {
  return 27128 | 0;
 }
 
 function $1883($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 2;
  label$1 : {
   if ($1884($0_1 | 0, 43 | 0) | 0) {
    break label$1
   }
   $1_1 = (HEAPU8[$0_1 >> 0] | 0 | 0) != (114 | 0);
  }
  $1_1 = $1884($0_1 | 0, 120 | 0) | 0 ? $1_1 | 128 | 0 : $1_1;
  $1_1 = $1884($0_1 | 0, 101 | 0) | 0 ? $1_1 | 524288 | 0 : $1_1;
  $0_1 = HEAPU8[$0_1 >> 0] | 0;
  $1_1 = ($0_1 | 0) == (114 | 0) ? $1_1 : $1_1 | 64 | 0;
  $1_1 = ($0_1 | 0) == (119 | 0) ? $1_1 | 512 | 0 : $1_1;
  return (($0_1 | 0) == (97 | 0) ? $1_1 | 1024 | 0 : $1_1) | 0;
 }
 
 function $1884($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $1925($0_1 | 0, $1_1 | 0) | 0;
  return ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0) ? $0_1 : 0) | 0;
 }
 
 function $1885($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $4_1 = 0;
  $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($5_1 | 0) != (0 | 0)) | 0;
  $6_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
  $5_1 = 32;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1886(fimport$9(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
      break label$3
     }
     $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (($5_1 | 0) > (0 | 0)) {
      break label$2
     }
     $5_1 = $5_1 ? 32 : 16;
    }
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | $5_1 | 0;
    break label$1;
   }
   $4_1 = $5_1;
   $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   if ($5_1 >>> 0 <= $6_1 >>> 0) {
    break label$1
   }
   $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $4_1 + ($5_1 - $6_1 | 0) | 0;
   label$4 : {
    if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[(($2_1 + $1_1 | 0) + -1 | 0) >> 0] = HEAPU8[$4_1 >> 0] | 0;
   }
   $4_1 = $2_1;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $1886($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[($1882() | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $1887($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $7_1 = 2;
  $1_1 = $3_1 + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       label$6 : {
        if ($1886(fimport$10(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
         break label$6
        }
        $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($4_1 | 0)) {
         break label$5
        }
        if (($4_1 | 0) > (-1 | 0)) {
         break label$4
        }
        break label$2;
       }
       if (($6_1 | 0) != (-1 | 0)) {
        break label$2
       }
      }
      $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
      HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
      $4_1 = $2_1;
      break label$1;
     }
     $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $5_1 = $4_1 >>> 0 > $8_1 >>> 0;
     $9_1 = $1_1 + ($5_1 << 3 | 0) | 0;
     $8_1 = $4_1 - ($5_1 ? $8_1 : 0) | 0;
     HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) + $8_1 | 0;
     $1_1 = $1_1 + ($5_1 ? 12 : 4) | 0;
     HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) - $8_1 | 0;
     $6_1 = $6_1 - $4_1 | 0;
     $7_1 = $7_1 - $5_1 | 0;
     $1_1 = $9_1;
     continue label$3;
    };
   }
   $4_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break label$1
   }
   $4_1 = $2_1 - (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $1888($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $1889(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1889($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$0 = $1$hi;
  $2_1 = $1886($2058($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1_1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  global$0 = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $2_1 ? -1 : $1_1;
  i64toi32_i32$2 = $2_1 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function $1890($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$11(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1891($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $34_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1884(5325 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
       break label$4
      }
      HEAP32[($1882() | 0) >> 2] = 28;
      break label$3;
     }
     $3_1 = $1827(1176 | 0) | 0;
     if ($3_1) {
      break label$2
     }
    }
    $3_1 = 0;
    break label$1;
   }
   $1799($3_1 | 0, 0 | 0, 144 | 0) | 0;
   label$5 : {
    if ($1884($1_1 | 0, 43 | 0) | 0) {
     break label$5
    }
    HEAP32[$3_1 >> 2] = (HEAPU8[$1_1 >> 0] | 0 | 0) == (114 | 0) ? 8 : 4;
   }
   label$6 : {
    label$7 : {
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (97 | 0)) {
      break label$7
     }
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     break label$6;
    }
    label$8 : {
     $1_1 = fimport$7($0_1 | 0, 3 | 0, 0 | 0) | 0;
     if ($1_1 & 1024 | 0) {
      break label$8
     }
     i64toi32_i32$1 = $1_1 | 1024 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $34_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 16 | 0) >> 2] = $34_1;
     HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     fimport$7($0_1 | 0, 4 | 0, $2_1 + 16 | 0 | 0) | 0;
    }
    $1_1 = HEAP32[$3_1 >> 2] | 0 | 128 | 0;
    HEAP32[$3_1 >> 2] = $1_1;
   }
   HEAP32[($3_1 + 80 | 0) >> 2] = -1;
   HEAP32[($3_1 + 48 | 0) >> 2] = 1024;
   HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $3_1 + 152 | 0;
   label$9 : {
    if ($1_1 & 8 | 0) {
     break label$9
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $2_1;
    HEAP32[$2_1 >> 2] = $2_1 + 24 | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    if (fimport$8($0_1 | 0, 21523 | 0, $2_1 | 0) | 0) {
     break label$9
    }
    HEAP32[($3_1 + 80 | 0) >> 2] = 10;
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = 416;
   HEAP32[($3_1 + 36 | 0) >> 2] = 417;
   HEAP32[($3_1 + 32 | 0) >> 2] = 418;
   HEAP32[($3_1 + 12 | 0) >> 2] = 419;
   label$10 : {
    if (HEAPU8[(0 + 28185 | 0) >> 0] | 0) {
     break label$10
    }
    HEAP32[($3_1 + 76 | 0) >> 2] = -1;
   }
   $3_1 = $1892($3_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $1892($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[(0 + 27132 | 0) >> 2] | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   HEAP32[($1_1 + 52 | 0) >> 2] = $0_1;
  }
  HEAP32[(0 + 27132 | 0) >> 2] = $0_1;
  return $0_1 | 0;
 }
 
 function $1893($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1884(5325 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
      break label$3
     }
     HEAP32[($1882() | 0) >> 2] = 28;
     break label$2;
    }
    $3_1 = $1883($1_1 | 0) | 0;
    HEAP32[$2_1 >> 2] = 438;
    HEAP32[($2_1 + 4 | 0) >> 2] = 0;
    $4_1 = 0;
    $0_1 = $1894(fimport$6(-100 | 0, $0_1 | 0, $3_1 | 32768 | 0 | 0, $2_1 | 0) | 0 | 0) | 0;
    if (($0_1 | 0) < (0 | 0)) {
     break label$1
    }
    $4_1 = $1891($0_1 | 0, $1_1 | 0) | 0;
    if ($4_1) {
     break label$1
    }
    fimport$11($0_1 | 0) | 0;
   }
   $4_1 = 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1894($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 < -4095 >>> 0) {
    break label$1
   }
   HEAP32[($1882() | 0) >> 2] = 0 - $0_1 | 0;
   $0_1 = -1;
  }
  return $0_1 | 0;
 }
 
 function $1895($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $1896($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $5_1 = 0, $4_1 = 0;
  $4_1 = 0;
  label$1 : {
   if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4_1 = $1800($3_1 | 0) | 0;
  }
  $5_1 = Math_imul($2_1, $1_1);
  $6_1 = HEAP32[($3_1 + 72 | 0) >> 2] | 0;
  HEAP32[($3_1 + 72 | 0) >> 2] = $6_1 + -1 | 0 | $6_1 | 0;
  label$2 : {
   label$3 : {
    $6_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    if (($6_1 | 0) != ($7_1 | 0)) {
     break label$3
    }
    $6_1 = $5_1;
    break label$2;
   }
   $7_1 = $7_1 - $6_1 | 0;
   $7_1 = $7_1 >>> 0 < $5_1 >>> 0 ? $7_1 : $5_1;
   $1798($0_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + $7_1 | 0;
   $6_1 = $5_1 - $7_1 | 0;
   $0_1 = $0_1 + $7_1 | 0;
  }
  label$4 : {
   if (!$6_1) {
    break label$4
   }
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      if ($1895($3_1 | 0) | 0) {
       break label$7
      }
      $7_1 = FUNCTION_TABLE[HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0]($3_1, $0_1, $6_1) | 0;
      if ($7_1) {
       break label$6
      }
     }
     label$8 : {
      if (!$4_1) {
       break label$8
      }
      $1801($3_1 | 0);
     }
     return (($5_1 - $6_1 | 0) >>> 0) / ($1_1 >>> 0) | 0 | 0;
    }
    $0_1 = $0_1 + $7_1 | 0;
    $6_1 = $6_1 - $7_1 | 0;
    if ($6_1) {
     continue label$5
    }
    break label$5;
   };
  }
  $0_1 = $1_1 ? $2_1 : 0;
  label$9 : {
   if (!$4_1) {
    break label$9
   }
   $1801($3_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1897($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $15$hi = 0;
  label$1 : {
   if (($2_1 | 0) != (1 | 0)) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $3_1 - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $15_1 = i64toi32_i32$1;
   $15$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$3 = $15_1;
   i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$5;
  }
  label$2 : {
   label$3 : {
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    if (!(HEAP32[($0_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$5 = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1, i64toi32_i32$5, $2_1) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
    $12_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $13_1 = 0
     } else {
      $13_1 = 1
     }
     $14_1 = $13_1;
    } else {
     $14_1 = 0
    }
    $12_1 = $14_1;
   }
   if ($12_1) {
    break label$2
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -17 | 0;
   return 0 | 0;
  }
  return -1 | 0;
 }
 
 function $1898($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   return $1897($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0 | 0;
  }
  $3_1 = $1800($0_1 | 0) | 0;
  i64toi32_i32$0 = $1$hi;
  $2_1 = $1897($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  label$2 : {
   if (!$3_1) {
    break label$2
   }
   $1801($0_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $1899($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  return $1898($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1900($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $3$hi = 0, $3_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, i64toi32_i32$4 = 0, $1_1 = 0, $39_1 = 0, $39$hi = 0;
  $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $2_1 = 1;
  label$1 : {
   if (!((HEAPU8[$0_1 >> 0] | 0) & 128 | 0)) {
    break label$1
   }
   $2_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) ? 1 : 2;
  }
  label$2 : {
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = FUNCTION_TABLE[$1_1 | 0]($0_1, 0, i64toi32_i32$0, $2_1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $3_1 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $13_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $14_1 = 0
     } else {
      $14_1 = 1
     }
     $15_1 = $14_1;
    } else {
     $15_1 = 0
    }
    $13_1 = $15_1;
   }
   if ($13_1) {
    break label$2
   }
   label$3 : {
    label$4 : {
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$4
     }
     $0_1 = $0_1 + 4 | 0;
     break label$3;
    }
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    $0_1 = $0_1 + 20 | 0;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = (HEAP32[$0_1 >> 2] | 0) - $2_1 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $39_1 = i64toi32_i32$1;
   $39$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $39$hi;
   i64toi32_i32$0 = $39_1;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $3_1 = i64toi32_i32$4;
   $3$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$3 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$3 | 0;
 }
 
 function $1901($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $2_1 = 0, $2$hi = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1900($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
   return i64toi32_i32$0 | 0;
  }
  $1_1 = $1800($0_1 | 0) | 0;
  i64toi32_i32$0 = $1900($0_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  label$2 : {
   if (!$1_1) {
    break label$2
   }
   $1801($0_1 | 0);
  }
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1902($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $1_1 = 0, $1$hi = 0, i64toi32_i32$3 = 0;
  label$1 : {
   i64toi32_i32$0 = $1901($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -2147483648;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $7_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $8_1 = 0
     } else {
      $8_1 = 1
     }
     $9_1 = $8_1;
    } else {
     $9_1 = 0
    }
    $7_1 = $9_1;
   }
   if ($7_1) {
    break label$1
   }
   HEAP32[($1882() | 0) >> 2] = 61;
   return -1 | 0;
  }
  i64toi32_i32$2 = $1$hi;
  return $1_1 | 0;
 }
 
 function $1903($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $1904($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 < 4 >>> 0) {
      break label$3
     }
     if (($1_1 | $0_1 | 0) & 3 | 0) {
      break label$2
     }
     label$4 : while (1) {
      if ((HEAP32[$0_1 >> 2] | 0 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
       break label$2
      }
      $1_1 = $1_1 + 4 | 0;
      $0_1 = $0_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       continue label$4
      }
      break label$4;
     };
    }
    $3_1 = 0;
    break label$1;
   }
   $3_1 = 1;
  }
  label$5 : while (1) {
   label$6 : {
    label$7 : {
     switch ($3_1 | 0) {
     case 0:
      if ($2_1) {
       break label$6
      }
      return 0 | 0;
     default:
      break label$7;
     };
    }
    label$9 : {
     label$10 : {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      $4_1 = HEAPU8[$1_1 >> 0] | 0;
      if (($3_1 | 0) != ($4_1 | 0)) {
       break label$10
      }
      $1_1 = $1_1 + 1 | 0;
      $0_1 = $0_1 + 1 | 0;
      $2_1 = $2_1 + -1 | 0;
      break label$9;
     }
     return $3_1 - $4_1 | 0 | 0;
    }
    $3_1 = 0;
    continue label$5;
   }
   $3_1 = 1;
   continue label$5;
  };
 }
 
 function $1905($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $1906($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  return +(+$1907(+($0_1 ? -$1_1 : $1_1)) * $1_1);
 }
 
 function $1907($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1;
  return +(+HEAPF64[($1_1 + 8 | 0) >> 3]);
 }
 
 function $1908($0_1) {
  $0_1 = +$0_1;
  return +Math_abs($0_1);
 }
 
 function $1909($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  return Math_fround(Math_fround(Math_fround($1910(Math_fround($0_1 ? Math_fround(-$1_1) : $1_1))) * $1_1));
 }
 
 function $1910($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF32[($1_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]));
 }
 
 function $1911($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $3_1 = 0, $6_1 = Math_fround(0), $2_1 = 0, $5_1 = 0, $7_1 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0;
  $2_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
  $3_1 = $1912($2_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $4_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
       if (($4_1 + -2139095040 | 0) >>> 0 < -2130706432 >>> 0) {
        break label$5
       }
       $5_1 = 0;
       if ($3_1) {
        break label$4
       }
       break label$2;
      }
      if (!$3_1) {
       break label$3
      }
     }
     $6_1 = Math_fround(1.0);
     if (($4_1 | 0) == (1065353216 | 0)) {
      break label$1
     }
     $3_1 = $2_1 << 1 | 0;
     if (!$3_1) {
      break label$1
     }
     label$6 : {
      label$7 : {
       $4_1 = $4_1 << 1 | 0;
       if ($4_1 >>> 0 > -16777216 >>> 0) {
        break label$7
       }
       if ($3_1 >>> 0 < -16777215 >>> 0) {
        break label$6
       }
      }
      return Math_fround(Math_fround($0_1 + $1_1));
     }
     if (($4_1 | 0) == (2130706432 | 0)) {
      break label$1
     }
     return Math_fround($4_1 >>> 0 > 2130706431 >>> 0 ^ ($2_1 | 0) > (-1 | 0) | 0 ? Math_fround(0.0) : Math_fround($1_1 * $1_1));
    }
    label$8 : {
     if (!($1912($4_1 | 0) | 0)) {
      break label$8
     }
     $6_1 = Math_fround($0_1 * $0_1);
     label$9 : {
      if (($4_1 | 0) > (-1 | 0)) {
       break label$9
      }
      $6_1 = ($1913($2_1 | 0) | 0 | 0) == (1 | 0) ? Math_fround(-$6_1) : $6_1;
     }
     if (($2_1 | 0) > (-1 | 0)) {
      break label$1
     }
     return Math_fround(Math_fround($1914(Math_fround(Math_fround(Math_fround(1.0) / $6_1)))));
    }
    $5_1 = 0;
    label$10 : {
     if (($4_1 | 0) > (-1 | 0)) {
      break label$10
     }
     label$11 : {
      $3_1 = $1913($2_1 | 0) | 0;
      if ($3_1) {
       break label$11
      }
      return Math_fround(Math_fround($1816(Math_fround($0_1))));
     }
     $4_1 = $4_1 & 2147483647 | 0;
     $5_1 = (($3_1 | 0) == (1 | 0)) << 16 | 0;
    }
    if ($4_1 >>> 0 > 8388607 >>> 0) {
     break label$2
    }
    $4_1 = ((wasm2js_scratch_store_f32(Math_fround($0_1 * Math_fround(8388608.0))), wasm2js_scratch_load_i32(2)) & 2147483647 | 0) + -192937984 | 0;
   }
   label$12 : {
    $7_1 = +$1915($4_1 | 0) * +$1_1;
    wasm2js_scratch_store_f64(+$7_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 2147450880;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 1079967744;
    i64toi32_i32$3 = 1;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$12
    }
    label$13 : {
     if (!($7_1 > 127.99999995700433)) {
      break label$13
     }
     return Math_fround(Math_fround($1817($5_1 | 0)));
    }
    if (!($7_1 <= -150.0)) {
     break label$12
    }
    return Math_fround(Math_fround($1818($5_1 | 0)));
   }
   $6_1 = Math_fround($1916(+$7_1, $5_1 | 0));
  }
  return Math_fround($6_1);
 }
 
 function $1912($0_1) {
  $0_1 = $0_1 | 0;
  return (($0_1 << 1 | 0) + 16777216 | 0) >>> 0 < 16777217 >>> 0 | 0;
 }
 
 function $1913($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   $2_1 = ($0_1 >>> 23 | 0) & 255 | 0;
   if ($2_1 >>> 0 < 127 >>> 0) {
    break label$1
   }
   $1_1 = 2;
   if ($2_1 >>> 0 > 150 >>> 0) {
    break label$1
   }
   $1_1 = 0;
   $2_1 = 1 << (150 - $2_1 | 0) | 0;
   if (($2_1 + -1 | 0) & $0_1 | 0) {
    break label$1
   }
   $1_1 = $2_1 & $0_1 | 0 ? 1 : 2;
  }
  return $1_1 | 0;
 }
 
 function $1914($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF32[($1_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]));
 }
 
 function $1915($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0.0, $1_1 = 0, $3_1 = 0.0, $11_1 = 0.0;
  $1_1 = $0_1 + -1060306944 | 0;
  $11_1 = +(wasm2js_scratch_store_i32(2, $0_1 - ($1_1 & -8388608 | 0) | 0), wasm2js_scratch_load_f32());
  $0_1 = ($1_1 >>> 15 | 0) & 240 | 0;
  $2_1 = $11_1 * +HEAPF64[($0_1 + 23632 | 0) >> 3] + -1.0;
  $3_1 = $2_1 * $2_1;
  return +(($2_1 * .288457581109214 + -.36092606229713164) * ($3_1 * $3_1) + (($2_1 * .480898481472577 + -.7213474675006291) * $3_1 + ($2_1 * 1.4426950408774342 + (+HEAPF64[($0_1 + 23640 | 0) >> 3] + +($1_1 >> 23 | 0 | 0)))));
 }
 
 function $1916($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $2_1 = 0.0, $3_1 = 0.0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $27_1 = 0.0, $32$hi = 0, $34$hi = 0, $40_1 = 0, $40$hi = 0;
  $2_1 = +HEAPF64[(0 + 20648 | 0) >> 3];
  $3_1 = $2_1 + $0_1;
  $0_1 = $0_1 - ($3_1 - $2_1);
  $27_1 = (+HEAPF64[(0 + 20656 | 0) >> 3] * $0_1 + +HEAPF64[(0 + 20664 | 0) >> 3]) * ($0_1 * $0_1) + (+HEAPF64[(0 + 20672 | 0) >> 3] * $0_1 + 1.0);
  wasm2js_scratch_store_f64(+$3_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $32$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = $32$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
   $17_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
  }
  $34$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$5 = (($4_1 & 31 | 0) << 3 | 0) + 20392 | 0;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
  $40_1 = i64toi32_i32$2;
  $40$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $34$hi;
  i64toi32_i32$5 = $17_1;
  i64toi32_i32$2 = $40$hi;
  i64toi32_i32$3 = $40_1;
  i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
  return Math_fround(Math_fround($27_1 * +wasm2js_scratch_load_f64()));
 }
 
 function $1917() {
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $7_1 = 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 27136 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 27140 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  i64toi32_i32$0 = 1481765933;
  i64toi32_i32$0 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$1 | 0, 1284865837 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$2 + 27136 | 0) >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 27140 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 33;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $6_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
   $6_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  return $6_1 | 0;
 }
 
 function $1918($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0, $3_1 = 0, $4_1 = 0.0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
    $3_1 = $2_1 & 2147483647 | 0;
    if ($3_1 >>> 0 > 1061752794 >>> 0) {
     break label$2
    }
    if ($3_1 >>> 0 < 964689920 >>> 0) {
     break label$1
    }
    $0_1 = Math_fround($1875(+(+$0_1)));
    break label$1;
   }
   label$3 : {
    if ($3_1 >>> 0 > 1081824209 >>> 0) {
     break label$3
    }
    $4_1 = +$0_1;
    label$4 : {
     if ($3_1 >>> 0 > 1075235811 >>> 0) {
      break label$4
     }
     label$5 : {
      if (($2_1 | 0) > (-1 | 0)) {
       break label$5
      }
      $0_1 = Math_fround(-Math_fround($1874(+($4_1 + 1.5707963267948966))));
      break label$1;
     }
     $0_1 = Math_fround($1874(+($4_1 + -1.5707963267948966)));
     break label$1;
    }
    $0_1 = Math_fround($1875(+-((($2_1 | 0) > (-1 | 0) ? -3.141592653589793 : 3.141592653589793) + $4_1)));
    break label$1;
   }
   label$6 : {
    if ($3_1 >>> 0 > 1088565717 >>> 0) {
     break label$6
    }
    label$7 : {
     if ($3_1 >>> 0 > 1085271519 >>> 0) {
      break label$7
     }
     $4_1 = +$0_1;
     label$8 : {
      if (($2_1 | 0) > (-1 | 0)) {
       break label$8
      }
      $0_1 = Math_fround($1874(+($4_1 + 4.71238898038469)));
      break label$1;
     }
     $0_1 = Math_fround(-Math_fround($1874(+($4_1 + -4.71238898038469))));
     break label$1;
    }
    $0_1 = Math_fround($1875(+((($2_1 | 0) < (0 | 0) ? 6.283185307179586 : -6.283185307179586) + +$0_1)));
    break label$1;
   }
   label$9 : {
    if ($3_1 >>> 0 < 2139095040 >>> 0) {
     break label$9
    }
    $0_1 = Math_fround($0_1 - $0_1);
    break label$1;
   }
   label$10 : {
    switch (($1878(Math_fround($0_1), $1_1 + 8 | 0 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $0_1 = Math_fround($1875(+(+HEAPF64[($1_1 + 8 | 0) >> 3])));
     break label$1;
    case 1:
     $0_1 = Math_fround($1874(+(+HEAPF64[($1_1 + 8 | 0) >> 3])));
     break label$1;
    case 2:
     $0_1 = Math_fround($1875(+-+HEAPF64[($1_1 + 8 | 0) >> 3]));
     break label$1;
    default:
     break label$10;
    };
   }
   $0_1 = Math_fround(-Math_fround($1874(+(+HEAPF64[($1_1 + 8 | 0) >> 3]))));
  }
  global$0 = $1_1 + 16 | 0;
  return Math_fround($0_1);
 }
 
 function $1919($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $1920($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1920($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  $3_1 = $1799($3_1 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($3_1 + 76 | 0) >> 2] = -1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = 420;
  HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
  $0_1 = $1969($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 144 | 0;
  return $0_1 | 0;
 }
 
 function $1921($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1922($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $1923($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0;
  $2_1 = 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     if (!$4_1) {
      break label$2
     }
     label$4 : {
      $5_1 = $3_1 & 255 | 0;
      if (($5_1 | 0) == ($4_1 | 0)) {
       break label$4
      }
      if (($1924($5_1 | 0) | 0 | 0) != ($1924($4_1 | 0) | 0 | 0)) {
       break label$2
      }
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
     $0_1 = $0_1 + 1 | 0;
     if ($3_1) {
      continue label$3
     }
     break label$1;
    };
   }
   $2_1 = $3_1;
  }
  return ($1924($2_1 & 255 | 0 | 0) | 0) - ($1924(HEAPU8[$1_1 >> 0] | 0 | 0) | 0) | 0 | 0;
 }
 
 function $1924($0_1) {
  $0_1 = $0_1 | 0;
  return ($1936($0_1 | 0) | 0 ? $0_1 | 32 | 0 : $0_1) | 0;
 }
 
 function $1925($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = $1_1 & 255 | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      if (!$3_1) {
       break label$1
      }
      if (($3_1 | 0) == ($1_1 & 255 | 0 | 0)) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2_1 = Math_imul($2_1, 16843009);
     label$6 : while (1) {
      $3_1 = $3_1 ^ $2_1 | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $0_1 = $0_1 + 4 | 0;
      if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3_1 = $0_1;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!$2_1) {
       break label$7
      }
      $0_1 = $3_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3_1 | 0;
   }
   return $0_1 + ($1821($0_1 | 0) | 0) | 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1926($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $1927($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(($1_1 ^ $0_1 | 0) & 3 | 0)) {
      break label$3
     }
     $2_1 = HEAPU8[$1_1 >> 0] | 0;
     break label$2;
    }
    label$4 : {
     if (!($1_1 & 3 | 0)) {
      break label$4
     }
     label$5 : while (1) {
      $2_1 = HEAPU8[$1_1 >> 0] | 0;
      HEAP8[$0_1 >> 0] = $2_1;
      if (!$2_1) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      if ($1_1 & 3 | 0) {
       continue label$5
      }
      break label$5;
     };
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    if ((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
     break label$2
    }
    label$6 : while (1) {
     HEAP32[$0_1 >> 2] = $2_1;
     $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $0_1 = $0_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     if (!((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
      continue label$6
     }
     break label$6;
    };
   }
   HEAP8[$0_1 >> 0] = $2_1;
   if (!($2_1 & 255 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
 }
 
 function $1928($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1927($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1929($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = $0_1 + ($1821($0_1 | 0) | 0) | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   label$2 : while (1) {
    $4_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$4_1) {
     break label$1
    }
    HEAP8[$3_1 >> 0] = $4_1;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP8[$3_1 >> 0] = 0;
  return $0_1 | 0;
 }
 
 function $1930($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  $3_1 = 0;
  label$2 : {
   $4_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$4_1) {
    break label$2
   }
   label$3 : {
    label$4 : while (1) {
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if (!$5_1) {
      break label$3
     }
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break label$3
     }
     if (($4_1 & 255 | 0 | 0) != ($5_1 | 0)) {
      break label$3
     }
     $1_1 = $1_1 + 1 | 0;
     $4_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
     $0_1 = $0_1 + 1 | 0;
     if ($4_1) {
      continue label$4
     }
     break label$2;
    };
   }
   $3_1 = $4_1;
  }
  return ($3_1 & 255 | 0) - (HEAPU8[$1_1 >> 0] | 0) | 0 | 0;
 }
 
 function $1931($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $1_1 = $1_1 & 255 | 0;
  label$1 : while (1) {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    return 0 | 0;
   }
   $2_1 = $2_1 + -1 | 0;
   $3_1 = $0_1 + $2_1 | 0;
   if ((HEAPU8[$3_1 >> 0] | 0 | 0) != ($1_1 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return $3_1 | 0;
 }
 
 function $1932($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1931($0_1 | 0, $1_1 | 0, ($1821($0_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0;
 }
 
 function $1933($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $1934($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
  return i64toi32_i32$0 | 0;
 }
 
 function $1934($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $6_1 = 0, $12$hi = 0, $8_1 = 0, $11$hi = 0, $11_1 = 0, $12_1 = 0, $5_1 = 0, $4_1 = 0, $10_1 = 0, $9_1 = 0, $13$hi = 0, $13_1 = 0, $14$hi = 0, $14_1 = 0, $102_1 = 0, $102$hi = 0, $147$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($2_1 | 0) > (36 | 0)) {
       break label$4
      }
      $5_1 = 0;
      $6_1 = HEAPU8[$0_1 >> 0] | 0;
      if ($6_1) {
       break label$3
      }
      $7_1 = $0_1;
      break label$2;
     }
     HEAP32[($1882() | 0) >> 2] = 28;
     i64toi32_i32$0 = 0;
     $3_1 = 0;
     $3$hi = i64toi32_i32$0;
     break label$1;
    }
    $7_1 = $0_1;
    label$5 : {
     label$6 : while (1) {
      if (!($1903(($6_1 << 24 | 0) >> 24 | 0 | 0) | 0)) {
       break label$5
      }
      $6_1 = HEAPU8[($7_1 + 1 | 0) >> 0] | 0;
      $8_1 = $7_1 + 1 | 0;
      $7_1 = $8_1;
      if ($6_1) {
       continue label$6
      }
      break label$6;
     };
     $7_1 = $8_1;
     break label$2;
    }
    label$7 : {
     $6_1 = $6_1 & 255 | 0;
     switch ($6_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$7;
     default:
      break label$2;
     };
    }
    $5_1 = ($6_1 | 0) == (45 | 0) ? -1 : 0;
    $7_1 = $7_1 + 1 | 0;
   }
   label$8 : {
    label$9 : {
     if (($2_1 | 16 | 0 | 0) != (16 | 0)) {
      break label$9
     }
     if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (48 | 0)) {
      break label$9
     }
     $9_1 = 1;
     label$10 : {
      if (((HEAPU8[($7_1 + 1 | 0) >> 0] | 0) & 223 | 0 | 0) != (88 | 0)) {
       break label$10
      }
      $7_1 = $7_1 + 2 | 0;
      $10_1 = 16;
      break label$8;
     }
     $7_1 = $7_1 + 1 | 0;
     $10_1 = $2_1 ? $2_1 : 8;
     break label$8;
    }
    $10_1 = $2_1 ? $2_1 : 10;
    $9_1 = 0;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $10_1;
   $11$hi = i64toi32_i32$0;
   $2_1 = 0;
   i64toi32_i32$0 = 0;
   $12_1 = 0;
   $12$hi = i64toi32_i32$0;
   label$11 : {
    label$12 : while (1) {
     $6_1 = -48;
     label$13 : {
      $8_1 = HEAP8[$7_1 >> 0] | 0;
      if ((($8_1 + -48 | 0) & 255 | 0) >>> 0 < 10 >>> 0) {
       break label$13
      }
      $6_1 = -87;
      if ((($8_1 + -97 | 0) & 255 | 0) >>> 0 < 26 >>> 0) {
       break label$13
      }
      $6_1 = -55;
      if ((($8_1 + -65 | 0) & 255 | 0) >>> 0 > 25 >>> 0) {
       break label$11
      }
     }
     $8_1 = $6_1 + $8_1 | 0;
     if (($8_1 | 0) >= ($10_1 | 0)) {
      break label$11
     }
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$3 = 0;
     $1839($4_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $12_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
     $6_1 = 1;
     label$14 : {
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$14
      }
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$2 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $13_1 = i64toi32_i32$2;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $14_1 = $8_1;
      $14$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $8_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
      $102_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
      $102$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$0 = $102$hi;
      i64toi32_i32$3 = $102_1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$14
      }
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$0 = $14_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $12_1 = i64toi32_i32$4;
      $12$hi = i64toi32_i32$5;
      $9_1 = 1;
      $6_1 = $2_1;
     }
     $7_1 = $7_1 + 1 | 0;
     $2_1 = $6_1;
     continue label$12;
    };
   }
   label$15 : {
    if (!$1_1) {
     break label$15
    }
    HEAP32[$1_1 >> 2] = $9_1 ? $7_1 : $0_1;
   }
   label$16 : {
    label$17 : {
     label$18 : {
      if (!$2_1) {
       break label$18
      }
      HEAP32[($1882() | 0) >> 2] = 68;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $11_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $11$hi = i64toi32_i32$3;
      $5_1 = !($11_1 | i64toi32_i32$3 | 0) ? $5_1 : 0;
      i64toi32_i32$3 = i64toi32_i32$5;
      $12_1 = i64toi32_i32$1;
      $12$hi = i64toi32_i32$3;
      break label$17;
     }
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$5 = $12_1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$16
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $11_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$3;
    }
    label$19 : {
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$19
     }
     if ($5_1) {
      break label$19
     }
     HEAP32[($1882() | 0) >> 2] = 68;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$4;
     break label$1;
    }
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$0 = $3_1;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$16
    }
    HEAP32[($1882() | 0) >> 2] = 68;
    break label$1;
   }
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
   $11_1 = i64toi32_i32$4;
   $11$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$0 = $12_1;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$1 = $11_1;
   i64toi32_i32$4 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
   $147$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$4 = $147$hi;
   i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
   i64toi32_i32$2 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$2;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$5 | 0;
 }
 
 function $1935($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $1934($0_1 | 0, $1_1 | 0, $2_1 | 0, -2147483648 | 0, i64toi32_i32$0 | 0) | 0;
  return i64toi32_i32$0 | 0;
 }
 
 function $1936($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -65 | 0) >>> 0 < 26 >>> 0 | 0;
 }
 
 function $1937($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $1938($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = ($1_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!($0_1 & 3 | 0)) {
       break label$4
      }
      if (!$1_1) {
       break label$4
      }
      label$5 : while (1) {
       $3_1 = HEAPU8[$0_1 >> 0] | 0;
       if (!$3_1) {
        break label$3
       }
       $1_1 = $1_1 + -1 | 0;
       $2_1 = ($1_1 | 0) != (0 | 0);
       $0_1 = $0_1 + 1 | 0;
       if (!($0_1 & 3 | 0)) {
        break label$4
       }
       if ($1_1) {
        continue label$5
       }
       break label$5;
      };
     }
     if (!$2_1) {
      break label$1
     }
     label$6 : {
      label$7 : {
       if (!(HEAPU8[$0_1 >> 0] | 0)) {
        break label$7
       }
       if ($1_1 >>> 0 < 4 >>> 0) {
        break label$7
       }
       label$8 : while (1) {
        $2_1 = HEAP32[$0_1 >> 2] | 0;
        if ((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
         break label$6
        }
        $0_1 = $0_1 + 4 | 0;
        $1_1 = $1_1 + -4 | 0;
        if ($1_1 >>> 0 > 3 >>> 0) {
         continue label$8
        }
        break label$8;
       };
      }
      if (!$1_1) {
       break label$1
      }
     }
     $2_1 = 0;
     break label$2;
    }
    $2_1 = 1;
   }
   label$9 : while (1) {
    label$10 : {
     switch ($2_1 | 0) {
     case 0:
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      $2_1 = 1;
      continue label$9;
     default:
      break label$10;
     };
    }
    label$12 : {
     if ($3_1 & 255 | 0) {
      break label$12
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + -1 | 0;
    if (!$1_1) {
     break label$1
    }
    $2_1 = 0;
    continue label$9;
   };
  }
  return 0 | 0;
 }
 
 function $1939($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1938($0_1 | 0, $1_1 | 0) | 0;
  return ($2_1 ? $2_1 - $0_1 | 0 : $1_1) | 0;
 }
 
 function $1940($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $10_1 = 0, $2$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3_1 = $10_1 & 2047 | 0;
   if (($3_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $3_1 = 0;
      break label$3;
     }
     $0_1 = +$1940(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $3_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $3_1 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $1941($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $6_1 = 0;
  $1799($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1942(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $4_1 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $6_1 = $1800($0_1 | 0) | 0;
   }
   $7_1 = HEAP32[$0_1 >> 2] | 0;
   label$4 : {
    if ((HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0_1 >> 2] = $7_1 & -33 | 0;
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       if (HEAP32[($0_1 + 48 | 0) >> 2] | 0) {
        break label$8
       }
       HEAP32[($0_1 + 48 | 0) >> 2] = 80;
       HEAP32[($0_1 + 28 | 0) >> 2] = 0;
       i64toi32_i32$0 = 0;
       HEAP32[($0_1 + 16 | 0) >> 2] = 0;
       HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
       $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
       HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
       break label$7;
      }
      $8_1 = 0;
      if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
       break label$6
      }
     }
     $2_1 = -1;
     if ($1822($0_1 | 0) | 0) {
      break label$5
     }
    }
    $2_1 = $1942($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   }
   $4_1 = $7_1 & 32 | 0;
   label$9 : {
    if (!$8_1) {
     break label$9
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $8_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    $2_1 = $3_1 ? $2_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $4_1 | 0;
   $4_1 = $3_1 & 32 | 0 ? -1 : $2_1;
   if (!$6_1) {
    break label$1
   }
   $1801($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $4_1 | 0;
 }
 
 function $1942($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $15_1 = 0, $20_1 = 0, i64toi32_i32$1 = 0, $17_1 = 0, $14_1 = 0, $18_1 = 0, $13_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $11_1 = 0, $16_1 = 0, $19_1 = 0, $22_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $24_1 = 0, $10_1 = 0, $25_1 = 0, $25$hi = 0, $21_1 = 0, $23_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $8_1 = 0, $272_1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $12_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       $13_1 = $1_1;
       if (($12_1 | 0) > ($11_1 ^ 2147483647 | 0 | 0)) {
        break label$4
       }
       $11_1 = $12_1 + $11_1 | 0;
       $12_1 = $13_1;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            $14_1 = HEAPU8[$12_1 >> 0] | 0;
            if (!$14_1) {
             break label$10
            }
            label$11 : while (1) {
             label$12 : {
              label$13 : {
               label$14 : {
                $14_1 = $14_1 & 255 | 0;
                if ($14_1) {
                 break label$14
                }
                $1_1 = $12_1;
                break label$13;
               }
               if (($14_1 | 0) != (37 | 0)) {
                break label$12
               }
               $14_1 = $12_1;
               label$15 : while (1) {
                label$16 : {
                 if ((HEAPU8[($14_1 + 1 | 0) >> 0] | 0 | 0) == (37 | 0)) {
                  break label$16
                 }
                 $1_1 = $14_1;
                 break label$13;
                }
                $12_1 = $12_1 + 1 | 0;
                $15_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
                $1_1 = $14_1 + 2 | 0;
                $14_1 = $1_1;
                if (($15_1 | 0) == (37 | 0)) {
                 continue label$15
                }
                break label$15;
               };
              }
              $12_1 = $12_1 - $13_1 | 0;
              $14_1 = $11_1 ^ 2147483647 | 0;
              if (($12_1 | 0) > ($14_1 | 0)) {
               break label$4
              }
              label$17 : {
               if (!$0_1) {
                break label$17
               }
               $1943($0_1 | 0, $13_1 | 0, $12_1 | 0);
              }
              if ($12_1) {
               continue label$5
              }
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              $12_1 = $1_1 + 1 | 0;
              $16_1 = -1;
              label$18 : {
               $15_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
               if (!($1937($15_1 | 0) | 0)) {
                break label$18
               }
               if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$18
               }
               $12_1 = $1_1 + 3 | 0;
               $16_1 = $15_1 + -48 | 0;
               $10_1 = 1;
              }
              HEAP32[($7_1 + 76 | 0) >> 2] = $12_1;
              $17_1 = 0;
              label$19 : {
               label$20 : {
                $18_1 = HEAP8[$12_1 >> 0] | 0;
                $1_1 = $18_1 + -32 | 0;
                if ($1_1 >>> 0 <= 31 >>> 0) {
                 break label$20
                }
                $15_1 = $12_1;
                break label$19;
               }
               $17_1 = 0;
               $15_1 = $12_1;
               $1_1 = 1 << $1_1 | 0;
               if (!($1_1 & 75913 | 0)) {
                break label$19
               }
               label$21 : while (1) {
                $15_1 = $12_1 + 1 | 0;
                HEAP32[($7_1 + 76 | 0) >> 2] = $15_1;
                $17_1 = $1_1 | $17_1 | 0;
                $18_1 = HEAP8[($12_1 + 1 | 0) >> 0] | 0;
                $1_1 = $18_1 + -32 | 0;
                if ($1_1 >>> 0 >= 32 >>> 0) {
                 break label$19
                }
                $12_1 = $15_1;
                $1_1 = 1 << $1_1 | 0;
                if ($1_1 & 75913 | 0) {
                 continue label$21
                }
                break label$21;
               };
              }
              label$22 : {
               label$23 : {
                if (($18_1 | 0) != (42 | 0)) {
                 break label$23
                }
                label$24 : {
                 label$25 : {
                  $12_1 = HEAP8[($15_1 + 1 | 0) >> 0] | 0;
                  if (!($1937($12_1 | 0) | 0)) {
                   break label$25
                  }
                  if ((HEAPU8[($15_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                   break label$25
                  }
                  HEAP32[((($12_1 << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
                  $18_1 = $15_1 + 3 | 0;
                  $19_1 = HEAP32[((((HEAP8[($15_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
                  $10_1 = 1;
                  break label$24;
                 }
                 if ($10_1) {
                  break label$9
                 }
                 $18_1 = $15_1 + 1 | 0;
                 label$26 : {
                  if ($0_1) {
                   break label$26
                  }
                  HEAP32[($7_1 + 76 | 0) >> 2] = $18_1;
                  $10_1 = 0;
                  $19_1 = 0;
                  break label$22;
                 }
                 $12_1 = HEAP32[$2_1 >> 2] | 0;
                 HEAP32[$2_1 >> 2] = $12_1 + 4 | 0;
                 $19_1 = HEAP32[$12_1 >> 2] | 0;
                 $10_1 = 0;
                }
                HEAP32[($7_1 + 76 | 0) >> 2] = $18_1;
                if (($19_1 | 0) > (-1 | 0)) {
                 break label$22
                }
                $19_1 = 0 - $19_1 | 0;
                $17_1 = $17_1 | 8192 | 0;
                break label$22;
               }
               $19_1 = $1944($7_1 + 76 | 0 | 0) | 0;
               if (($19_1 | 0) < (0 | 0)) {
                break label$4
               }
               $18_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              }
              $12_1 = 0;
              $20_1 = -1;
              label$27 : {
               label$28 : {
                if ((HEAPU8[$18_1 >> 0] | 0 | 0) == (46 | 0)) {
                 break label$28
                }
                $1_1 = $18_1;
                $21_1 = 0;
                break label$27;
               }
               label$29 : {
                if ((HEAPU8[($18_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
                 break label$29
                }
                label$30 : {
                 label$31 : {
                  $15_1 = HEAP8[($18_1 + 2 | 0) >> 0] | 0;
                  if (!($1937($15_1 | 0) | 0)) {
                   break label$31
                  }
                  if ((HEAPU8[($18_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                   break label$31
                  }
                  HEAP32[((($15_1 << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
                  $1_1 = $18_1 + 4 | 0;
                  $20_1 = HEAP32[((((HEAP8[($18_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
                  break label$30;
                 }
                 if ($10_1) {
                  break label$9
                 }
                 $1_1 = $18_1 + 2 | 0;
                 label$32 : {
                  if ($0_1) {
                   break label$32
                  }
                  $20_1 = 0;
                  break label$30;
                 }
                 $15_1 = HEAP32[$2_1 >> 2] | 0;
                 HEAP32[$2_1 >> 2] = $15_1 + 4 | 0;
                 $20_1 = HEAP32[$15_1 >> 2] | 0;
                }
                HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                $21_1 = ($20_1 ^ -1 | 0) >>> 31 | 0;
                break label$27;
               }
               HEAP32[($7_1 + 76 | 0) >> 2] = $18_1 + 1 | 0;
               $21_1 = 1;
               $20_1 = $1944($7_1 + 76 | 0 | 0) | 0;
               $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              }
              label$33 : while (1) {
               $15_1 = $12_1;
               $22_1 = 28;
               $18_1 = $1_1;
               $12_1 = HEAP8[$18_1 >> 0] | 0;
               if (($12_1 + -123 | 0) >>> 0 < -58 >>> 0) {
                break label$3
               }
               $1_1 = $18_1 + 1 | 0;
               $12_1 = HEAPU8[(($12_1 + Math_imul($15_1, 58) | 0) + 23871 | 0) >> 0] | 0;
               if (($12_1 + -1 | 0) >>> 0 < 8 >>> 0) {
                continue label$33
               }
               break label$33;
              };
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              label$34 : {
               label$35 : {
                label$36 : {
                 if (($12_1 | 0) == (27 | 0)) {
                  break label$36
                 }
                 if (!$12_1) {
                  break label$3
                 }
                 label$37 : {
                  if (($16_1 | 0) < (0 | 0)) {
                   break label$37
                  }
                  HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $12_1;
                  i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $272_1 = i64toi32_i32$0;
                  i64toi32_i32$0 = $7_1;
                  HEAP32[($7_1 + 64 | 0) >> 2] = $272_1;
                  HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
                  break label$35;
                 }
                 if (!$0_1) {
                  break label$6
                 }
                 $1945($7_1 + 64 | 0 | 0, $12_1 | 0, $2_1 | 0, $6_1 | 0);
                 break label$34;
                }
                if (($16_1 | 0) > (-1 | 0)) {
                 break label$3
                }
               }
               $12_1 = 0;
               if (!$0_1) {
                continue label$5
               }
              }
              $23_1 = $17_1 & -65537 | 0;
              $17_1 = $17_1 & 8192 | 0 ? $23_1 : $17_1;
              $16_1 = 0;
              $24_1 = 1295;
              $22_1 = $9_1;
              label$38 : {
               label$39 : {
                label$40 : {
                 label$41 : {
                  label$42 : {
                   label$43 : {
                    label$44 : {
                     label$45 : {
                      label$46 : {
                       label$47 : {
                        label$48 : {
                         label$49 : {
                          label$50 : {
                           label$51 : {
                            label$52 : {
                             label$53 : {
                              $12_1 = HEAP8[$18_1 >> 0] | 0;
                              $12_1 = $15_1 ? (($12_1 & 15 | 0 | 0) == (3 | 0) ? $12_1 & -33 | 0 : $12_1) : $12_1;
                              switch ($12_1 + -88 | 0 | 0) {
                              case 11:
                               break label$38;
                              case 9:
                              case 13:
                              case 14:
                              case 15:
                               break label$39;
                              case 27:
                               break label$44;
                              case 12:
                              case 17:
                               break label$47;
                              case 23:
                               break label$48;
                              case 0:
                              case 32:
                               break label$49;
                              case 24:
                               break label$50;
                              case 22:
                               break label$51;
                              case 29:
                               break label$52;
                              case 1:
                              case 2:
                              case 3:
                              case 4:
                              case 5:
                              case 6:
                              case 7:
                              case 8:
                              case 10:
                              case 16:
                              case 18:
                              case 19:
                              case 20:
                              case 21:
                              case 25:
                              case 26:
                              case 28:
                              case 30:
                              case 31:
                               break label$7;
                              default:
                               break label$53;
                              };
                             }
                             $22_1 = $9_1;
                             label$54 : {
                              switch ($12_1 + -65 | 0 | 0) {
                              case 0:
                              case 4:
                              case 5:
                              case 6:
                               break label$39;
                              case 2:
                               break label$42;
                              case 1:
                              case 3:
                               break label$7;
                              default:
                               break label$54;
                              };
                             }
                             if (($12_1 | 0) == (83 | 0)) {
                              break label$43
                             }
                             break label$8;
                            }
                            $16_1 = 0;
                            $24_1 = 1295;
                            i64toi32_i32$2 = $7_1;
                            i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                            i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                            $25_1 = i64toi32_i32$1;
                            $25$hi = i64toi32_i32$0;
                            break label$46;
                           }
                           $12_1 = 0;
                           label$55 : {
                            switch ($15_1 & 255 | 0 | 0) {
                            case 0:
                             HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                             continue label$5;
                            case 1:
                             HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                             continue label$5;
                            case 2:
                             i64toi32_i32$1 = $11_1;
                             i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                             i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                             HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                             HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                             continue label$5;
                            case 3:
                             HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
                             continue label$5;
                            case 4:
                             HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
                             continue label$5;
                            case 6:
                             HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                             continue label$5;
                            case 7:
                             break label$55;
                            default:
                             continue label$5;
                            };
                           }
                           i64toi32_i32$1 = $11_1;
                           i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                           i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                           HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                           continue label$5;
                          }
                          $20_1 = $20_1 >>> 0 > 8 >>> 0 ? $20_1 : 8;
                          $17_1 = $17_1 | 8 | 0;
                          $12_1 = 120;
                         }
                         i64toi32_i32$2 = $7_1;
                         i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                         $13_1 = $1946(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $12_1 & 32 | 0 | 0) | 0;
                         $16_1 = 0;
                         $24_1 = 1295;
                         i64toi32_i32$2 = $7_1;
                         i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                         if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                          break label$45
                         }
                         if (!($17_1 & 8 | 0)) {
                          break label$45
                         }
                         $24_1 = ($12_1 >>> 4 | 0) + 1295 | 0;
                         $16_1 = 2;
                         break label$45;
                        }
                        $16_1 = 0;
                        $24_1 = 1295;
                        i64toi32_i32$2 = $7_1;
                        i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                        $13_1 = $1947(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0) | 0;
                        if (!($17_1 & 8 | 0)) {
                         break label$45
                        }
                        $12_1 = $9_1 - $13_1 | 0;
                        $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1 + 1 | 0;
                        break label$45;
                       }
                       label$62 : {
                        i64toi32_i32$2 = $7_1;
                        i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                        $25_1 = i64toi32_i32$1;
                        $25$hi = i64toi32_i32$0;
                        i64toi32_i32$2 = i64toi32_i32$1;
                        i64toi32_i32$1 = -1;
                        i64toi32_i32$3 = -1;
                        if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                         $33_1 = 1
                        } else {
                         if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                          if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                           $34_1 = 0
                          } else {
                           $34_1 = 1
                          }
                          $35_1 = $34_1;
                         } else {
                          $35_1 = 0
                         }
                         $33_1 = $35_1;
                        }
                        if ($33_1) {
                         break label$62
                        }
                        i64toi32_i32$2 = $25$hi;
                        i64toi32_i32$2 = 0;
                        i64toi32_i32$3 = 0;
                        i64toi32_i32$0 = $25$hi;
                        i64toi32_i32$1 = $25_1;
                        i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                        $25_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                        $25$hi = i64toi32_i32$5;
                        i64toi32_i32$3 = $7_1;
                        HEAP32[($7_1 + 64 | 0) >> 2] = $25_1;
                        HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
                        $16_1 = 1;
                        $24_1 = 1295;
                        break label$46;
                       }
                       label$63 : {
                        if (!($17_1 & 2048 | 0)) {
                         break label$63
                        }
                        $16_1 = 1;
                        $24_1 = 1296;
                        break label$46;
                       }
                       $16_1 = $17_1 & 1 | 0;
                       $24_1 = $16_1 ? 1297 : 1295;
                      }
                      i64toi32_i32$5 = $25$hi;
                      $13_1 = $1948($25_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                     }
                     label$64 : {
                      if (!$21_1) {
                       break label$64
                      }
                      if (($20_1 | 0) < (0 | 0)) {
                       break label$4
                      }
                     }
                     $17_1 = $21_1 ? $17_1 & -65537 | 0 : $17_1;
                     label$65 : {
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      $25_1 = i64toi32_i32$5;
                      $25$hi = i64toi32_i32$3;
                      i64toi32_i32$2 = i64toi32_i32$5;
                      i64toi32_i32$5 = 0;
                      i64toi32_i32$1 = 0;
                      if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
                       break label$65
                      }
                      if ($20_1) {
                       break label$65
                      }
                      $13_1 = $9_1;
                      $22_1 = $13_1;
                      $20_1 = 0;
                      break label$7;
                     }
                     i64toi32_i32$2 = $25$hi;
                     $12_1 = ($9_1 - $13_1 | 0) + !($25_1 | i64toi32_i32$2 | 0) | 0;
                     $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1;
                     break label$8;
                    }
                    $12_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                    $13_1 = $12_1 ? $12_1 : 5774;
                    $12_1 = $1939($13_1 | 0, ($20_1 >>> 0 < 2147483647 >>> 0 ? $20_1 : 2147483647) | 0) | 0;
                    $22_1 = $13_1 + $12_1 | 0;
                    label$66 : {
                     if (($20_1 | 0) <= (-1 | 0)) {
                      break label$66
                     }
                     $17_1 = $23_1;
                     $20_1 = $12_1;
                     break label$7;
                    }
                    $17_1 = $23_1;
                    $20_1 = $12_1;
                    if (HEAPU8[$22_1 >> 0] | 0) {
                     break label$4
                    }
                    break label$7;
                   }
                   label$67 : {
                    if (!$20_1) {
                     break label$67
                    }
                    $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                    break label$41;
                   }
                   $12_1 = 0;
                   $1949($0_1 | 0, 32 | 0, $19_1 | 0, 0 | 0, $17_1 | 0);
                   break label$40;
                  }
                  HEAP32[($7_1 + 12 | 0) >> 2] = 0;
                  i64toi32_i32$1 = $7_1;
                  i64toi32_i32$2 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                  HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$2;
                  HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
                  $14_1 = $7_1 + 8 | 0;
                  $20_1 = -1;
                 }
                 $12_1 = 0;
                 label$68 : {
                  label$69 : while (1) {
                   $15_1 = HEAP32[$14_1 >> 2] | 0;
                   if (!$15_1) {
                    break label$68
                   }
                   label$70 : {
                    $15_1 = $1950($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                    $13_1 = ($15_1 | 0) < (0 | 0);
                    if ($13_1) {
                     break label$70
                    }
                    if ($15_1 >>> 0 > ($20_1 - $12_1 | 0) >>> 0) {
                     break label$70
                    }
                    $14_1 = $14_1 + 4 | 0;
                    $12_1 = $15_1 + $12_1 | 0;
                    if ($20_1 >>> 0 > $12_1 >>> 0) {
                     continue label$69
                    }
                    break label$68;
                   }
                   break label$69;
                  };
                  if ($13_1) {
                   break label$2
                  }
                 }
                 $22_1 = 61;
                 if (($12_1 | 0) < (0 | 0)) {
                  break label$3
                 }
                 $1949($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 | 0);
                 label$71 : {
                  if ($12_1) {
                   break label$71
                  }
                  $12_1 = 0;
                  break label$40;
                 }
                 $15_1 = 0;
                 $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 label$72 : while (1) {
                  $13_1 = HEAP32[$14_1 >> 2] | 0;
                  if (!$13_1) {
                   break label$40
                  }
                  $13_1 = $1950($7_1 + 4 | 0 | 0, $13_1 | 0) | 0;
                  $15_1 = $13_1 + $15_1 | 0;
                  if ($15_1 >>> 0 > $12_1 >>> 0) {
                   break label$40
                  }
                  $1943($0_1 | 0, $7_1 + 4 | 0 | 0, $13_1 | 0);
                  $14_1 = $14_1 + 4 | 0;
                  if ($15_1 >>> 0 < $12_1 >>> 0) {
                   continue label$72
                  }
                  break label$72;
                 };
                }
                $1949($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 ^ 8192 | 0 | 0);
                $12_1 = ($19_1 | 0) > ($12_1 | 0) ? $19_1 : $12_1;
                continue label$5;
               }
               label$73 : {
                if (!$21_1) {
                 break label$73
                }
                if (($20_1 | 0) < (0 | 0)) {
                 break label$4
                }
               }
               $22_1 = 61;
               $12_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $19_1, $20_1, $17_1, $12_1) | 0;
               if (($12_1 | 0) >= (0 | 0)) {
                continue label$5
               }
               break label$3;
              }
              i64toi32_i32$1 = $7_1;
              i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
              HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$3;
              $20_1 = 1;
              $13_1 = $8_1;
              $22_1 = $9_1;
              $17_1 = $23_1;
              break label$7;
             }
             $14_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
             $12_1 = $12_1 + 1 | 0;
             continue label$11;
            };
           }
           if ($0_1) {
            break label$1
           }
           if (!$10_1) {
            break label$6
           }
           $12_1 = 1;
           label$74 : {
            label$75 : while (1) {
             $14_1 = HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0;
             if (!$14_1) {
              break label$74
             }
             $1945($3_1 + ($12_1 << 3 | 0) | 0 | 0, $14_1 | 0, $2_1 | 0, $6_1 | 0);
             $11_1 = 1;
             $12_1 = $12_1 + 1 | 0;
             if (($12_1 | 0) != (10 | 0)) {
              continue label$75
             }
             break label$1;
            };
           }
           $11_1 = 1;
           if ($12_1 >>> 0 >= 10 >>> 0) {
            break label$1
           }
           label$76 : while (1) {
            if (HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0) {
             break label$9
            }
            $11_1 = 1;
            $12_1 = $12_1 + 1 | 0;
            if (($12_1 | 0) == (10 | 0)) {
             break label$1
            }
            continue label$76;
           };
          }
          $22_1 = 28;
          break label$3;
         }
         $22_1 = $9_1;
        }
        $18_1 = $22_1 - $13_1 | 0;
        $20_1 = ($20_1 | 0) > ($18_1 | 0) ? $20_1 : $18_1;
        if (($20_1 | 0) > ($16_1 ^ 2147483647 | 0 | 0)) {
         break label$4
        }
        $22_1 = 61;
        $15_1 = $16_1 + $20_1 | 0;
        $12_1 = ($19_1 | 0) > ($15_1 | 0) ? $19_1 : $15_1;
        if (($12_1 | 0) > ($14_1 | 0)) {
         break label$3
        }
        $1949($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 | 0);
        $1943($0_1 | 0, $24_1 | 0, $16_1 | 0);
        $1949($0_1 | 0, 48 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 65536 | 0 | 0);
        $1949($0_1 | 0, 48 | 0, $20_1 | 0, $18_1 | 0, 0 | 0);
        $1943($0_1 | 0, $13_1 | 0, $18_1 | 0);
        $1949($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 8192 | 0 | 0);
        continue label$5;
       }
       break label$5;
      };
      $11_1 = 0;
      break label$1;
     }
     $22_1 = 61;
    }
    HEAP32[($1882() | 0) >> 2] = $22_1;
   }
   $11_1 = -1;
  }
  global$0 = $7_1 + 80 | 0;
  return $11_1 | 0;
 }
 
 function $1943($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $1823($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $1944($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $4_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = HEAP8[$1_1 >> 0] | 0;
    if (!($1937($3_1 | 0) | 0)) {
     break label$1
    }
    $4_1 = -1;
    label$3 : {
     if ($2_1 >>> 0 > 214748364 >>> 0) {
      break label$3
     }
     $4_1 = $3_1 + -48 | 0;
     $2_1 = Math_imul($2_1, 10);
     $4_1 = ($4_1 | 0) > ($2_1 ^ 2147483647 | 0 | 0) ? -1 : $4_1 + $2_1 | 0;
    }
    $1_1 = $1_1 + 1 | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    $2_1 = $4_1;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1945($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21_1 = 0, $29_1 = 0, $37_1 = 0, $45_1 = 0, $55_1 = 0, $63_1 = 0, $71_1 = 0, $79_1 = 0, $87_1 = 0, $97_1 = 0, $105_1 = 0, $115_1 = 0, $125_1 = 0, $133_1 = 0, $141_1 = 0;
  label$1 : {
   switch ($1_1 + -9 | 0 | 0) {
   case 0:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    return;
   case 1:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $21_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $21_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 2:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $29_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $29_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 4:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $37_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $37_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 5:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $45_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $45_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 3:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $55_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $55_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 6:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $63_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $63_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 7:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
    i64toi32_i32$1 = 0;
    $71_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $71_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 8:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $79_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $79_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 9:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
    i64toi32_i32$1 = 0;
    $87_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $87_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 10:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $97_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $97_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 11:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $105_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $105_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 12:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $115_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $115_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 13:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $125_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $125_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 14:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $133_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $133_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 15:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $141_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $141_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 16:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
    return;
   case 17:
    FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
    break;
   default:
    break label$1;
   };
  }
 }
 
 function $1946($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10_1 = 0, $3_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 24400 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 15;
    $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $10_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $10_1;
    $0$hi = i64toi32_i32$0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $1947($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9_1 = 0, $2_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 7;
    $2_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $9_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $1948($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$5 = 0, $2$hi = 0, i64toi32_i32$4 = 0, $4_1 = 0, $11_1 = 0, $15$hi = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $2_1 = $0_1;
    $2$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $11_1 = $1_1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, 246 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $15$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $15$hi;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$4 = i64toi32_i32$3 + $0_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < $0_1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    HEAP8[$11_1 >> 0] = i64toi32_i32$4 | 48 | 0;
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $3_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $2$hi;
    $0_1 = $2_1;
    $0$hi = i64toi32_i32$2;
    if ($3_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $2$hi;
   $3_1 = $2_1;
   if (!$3_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $4_1 = ($3_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = Math_imul($4_1, 246) + $3_1 | 0 | 48 | 0;
    $5_1 = $3_1 >>> 0 > 9 >>> 0;
    $3_1 = $4_1;
    if ($5_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $1949($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  label$1 : {
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   if ($4_1 & 73728 | 0) {
    break label$1
   }
   $3_1 = $2_1 - $3_1 | 0;
   $2_1 = $3_1 >>> 0 < 256 >>> 0;
   $1799($5_1 | 0, $1_1 & 255 | 0 | 0, ($2_1 ? $3_1 : 256) | 0) | 0;
   label$2 : {
    if ($2_1) {
     break label$2
    }
    label$3 : while (1) {
     $1943($0_1 | 0, $5_1 | 0, 256 | 0);
     $3_1 = $3_1 + -256 | 0;
     if ($3_1 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $1943($0_1 | 0, $5_1 | 0, $3_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $1950($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $1973($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1951($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1941($0_1 | 0, $1_1 | 0, $2_1 | 0, 421 | 0, 422 | 0) | 0 | 0;
 }
 
 function $1952($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $18_1 = 0, $21_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $15_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $22_1 = 0, $23_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $17_1 = 0, $19_1 = 0, $8_1 = 0, $27_1 = 0.0, $13_1 = 0, $24_1 = 0, $14_1 = 0, $16_1 = 0, $24$hi = 0, $9_1 = 0, $20_1 = 0, $7_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $25$hi = 0, $46_1 = 0, $26$hi = 0, $25_1 = 0, $168_1 = 0, $170$hi = 0, $172$hi = 0, $174_1 = 0, $174$hi = 0, $179$hi = 0, $392_1 = 0.0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1954(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $43_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $44_1 = 0
      } else {
       $44_1 = 1
      }
      $45_1 = $44_1;
     } else {
      $45_1 = 0
     }
     $43_1 = $45_1;
    }
    if ($43_1) {
     break label$2
    }
    $8_1 = 1;
    $9_1 = 1305;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $1954(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 2048 | 0)) {
     break label$3
    }
    $8_1 = 1;
    $9_1 = 1308;
    break label$1;
   }
   $8_1 = $4_1 & 1 | 0;
   $9_1 = $8_1 ? 1311 : 1306;
   $7_1 = !$8_1;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $10_1 = $8_1 + 3 | 0;
    $1949($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
    $1943($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $11_1 = $5_1 & 32 | 0;
    $1943($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 4031 : 5411) : $11_1 ? 4578 : 5521) | 0, 3 | 0);
    $1949($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    $12_1 = ($10_1 | 0) > ($2_1 | 0) ? $10_1 : $2_1;
    break label$4;
   }
   $13_1 = $6_1 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1_1 = +$1940(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$9
       }
       $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $10_1 + -1 | 0;
       $14_1 = $5_1 | 32 | 0;
       if (($14_1 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $14_1 = $5_1 | 32 | 0;
      if (($14_1 | 0) == (97 | 0)) {
       break label$6
      }
      $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $16_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $16_1 = $10_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $16_1;
     $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $17_1 = ($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? 0 : 288) | 0;
    $11_1 = $17_1;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$12
       }
       $10_1 = ~~$1_1 >>> 0;
       break label$11;
      }
      $10_1 = 0;
     }
     HEAP32[$11_1 >> 2] = $10_1;
     $11_1 = $11_1 + 4 | 0;
     $1_1 = ($1_1 - +($10_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($16_1 | 0) >= (1 | 0)) {
       break label$14
      }
      $3_1 = $16_1;
      $10_1 = $11_1;
      $18_1 = $17_1;
      break label$13;
     }
     $18_1 = $17_1;
     $3_1 = $16_1;
     label$15 : while (1) {
      $3_1 = ($3_1 | 0) < (29 | 0) ? $3_1 : 29;
      label$16 : {
       $10_1 = $11_1 + -4 | 0;
       if ($10_1 >>> 0 < $18_1 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $25_1 = $3_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label$17 : while (1) {
        $168_1 = $10_1;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = HEAP32[$10_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $170$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $25$hi;
        i64toi32_i32$2 = $170$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$3 = $25_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $46_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $46_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $172$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$2 = $24_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $174_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $174$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $172$hi;
        i64toi32_i32$1 = $46_1;
        i64toi32_i32$2 = $174$hi;
        i64toi32_i32$3 = $174_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $26$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, -1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $179$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $26$hi;
        i64toi32_i32$5 = $179$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $26$hi;
        i64toi32_i32$3 = i64toi32_i32$4;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        HEAP32[$168_1 >> 2] = i64toi32_i32$2;
        $10_1 = $10_1 + -4 | 0;
        if ($10_1 >>> 0 >= $18_1 >>> 0) {
         continue label$17
        }
        break label$17;
       };
       i64toi32_i32$4 = $24$hi;
       $10_1 = $24_1;
       if (!$10_1) {
        break label$16
       }
       $18_1 = $18_1 + -4 | 0;
       HEAP32[$18_1 >> 2] = $10_1;
      }
      label$18 : {
       label$19 : while (1) {
        $10_1 = $11_1;
        if ($10_1 >>> 0 <= $18_1 >>> 0) {
         break label$18
        }
        $11_1 = $10_1 + -4 | 0;
        if (!(HEAP32[$11_1 >> 2] | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $11_1 = $10_1;
      if (($3_1 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    label$20 : {
     if (($3_1 | 0) > (-1 | 0)) {
      break label$20
     }
     $19_1 = ((($15_1 + 25 | 0) >>> 0) / (9 >>> 0) | 0) + 1 | 0;
     $20_1 = ($14_1 | 0) == (102 | 0);
     label$21 : while (1) {
      $11_1 = 0 - $3_1 | 0;
      $21_1 = ($11_1 | 0) < (9 | 0) ? $11_1 : 9;
      label$22 : {
       label$23 : {
        if ($18_1 >>> 0 < $10_1 >>> 0) {
         break label$23
        }
        $11_1 = HEAP32[$18_1 >> 2] | 0;
        break label$22;
       }
       $22_1 = 1e9 >>> $21_1 | 0;
       $23_1 = (-1 << $21_1 | 0) ^ -1 | 0;
       $3_1 = 0;
       $11_1 = $18_1;
       label$24 : while (1) {
        $12_1 = HEAP32[$11_1 >> 2] | 0;
        HEAP32[$11_1 >> 2] = ($12_1 >>> $21_1 | 0) + $3_1 | 0;
        $3_1 = Math_imul($12_1 & $23_1 | 0, $22_1);
        $11_1 = $11_1 + 4 | 0;
        if ($11_1 >>> 0 < $10_1 >>> 0) {
         continue label$24
        }
        break label$24;
       };
       $11_1 = HEAP32[$18_1 >> 2] | 0;
       if (!$3_1) {
        break label$22
       }
       HEAP32[$10_1 >> 2] = $3_1;
       $10_1 = $10_1 + 4 | 0;
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $21_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $18_1 = $18_1 + (!$11_1 << 2 | 0) | 0;
      $11_1 = $20_1 ? $17_1 : $18_1;
      $10_1 = (($10_1 - $11_1 | 0) >> 2 | 0 | 0) > ($19_1 | 0) ? $11_1 + ($19_1 << 2 | 0) | 0 : $10_1;
      if (($3_1 | 0) < (0 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    $3_1 = 0;
    label$25 : {
     if ($18_1 >>> 0 >= $10_1 >>> 0) {
      break label$25
     }
     $3_1 = Math_imul(($17_1 - $18_1 | 0) >> 2 | 0, 9);
     $11_1 = 10;
     $12_1 = HEAP32[$18_1 >> 2] | 0;
     if ($12_1 >>> 0 < 10 >>> 0) {
      break label$25
     }
     label$26 : while (1) {
      $3_1 = $3_1 + 1 | 0;
      $11_1 = Math_imul($11_1, 10);
      if ($12_1 >>> 0 >= $11_1 >>> 0) {
       continue label$26
      }
      break label$26;
     };
    }
    label$27 : {
     $11_1 = ($15_1 - (($14_1 | 0) == (102 | 0) ? 0 : $3_1) | 0) - (($15_1 | 0) != (0 | 0) & ($14_1 | 0) == (103 | 0) | 0) | 0;
     if (($11_1 | 0) >= (Math_imul(($10_1 - $17_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$27
     }
     $12_1 = $11_1 + 9216 | 0;
     $22_1 = ($12_1 | 0) / (9 | 0) | 0;
     $21_1 = (($22_1 << 2 | 0) + (($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? 4 : 292) | 0) | 0) + -4096 | 0;
     $11_1 = 10;
     label$28 : {
      $12_1 = Math_imul($22_1, -9) + $12_1 | 0;
      if (($12_1 | 0) > (7 | 0)) {
       break label$28
      }
      label$29 : while (1) {
       $11_1 = Math_imul($11_1, 10);
       $12_1 = $12_1 + 1 | 0;
       if (($12_1 | 0) != (8 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $23_1 = $21_1 + 4 | 0;
     label$30 : {
      label$31 : {
       $12_1 = HEAP32[$21_1 >> 2] | 0;
       $19_1 = ($12_1 >>> 0) / ($11_1 >>> 0) | 0;
       $22_1 = Math_imul($19_1, $11_1);
       if (($12_1 | 0) != ($22_1 | 0)) {
        break label$31
       }
       if (($23_1 | 0) == ($10_1 | 0)) {
        break label$30
       }
      }
      $12_1 = $12_1 - $22_1 | 0;
      label$32 : {
       label$33 : {
        if ($19_1 & 1 | 0) {
         break label$33
        }
        $1_1 = 9007199254740992.0;
        if (($11_1 | 0) != (1e9 | 0)) {
         break label$32
        }
        if ($21_1 >>> 0 <= $18_1 >>> 0) {
         break label$32
        }
        if (!((HEAPU8[($21_1 + -4 | 0) >> 0] | 0) & 1 | 0)) {
         break label$32
        }
       }
       $1_1 = 9007199254740994.0;
      }
      $392_1 = ($23_1 | 0) == ($10_1 | 0) ? 1.0 : 1.5;
      $23_1 = $11_1 >>> 1 | 0;
      $27_1 = $12_1 >>> 0 < $23_1 >>> 0 ? .5 : ($12_1 | 0) == ($23_1 | 0) ? $392_1 : 1.5;
      label$34 : {
       if ($7_1) {
        break label$34
       }
       if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$34
       }
       $27_1 = -$27_1;
       $1_1 = -$1_1;
      }
      HEAP32[$21_1 >> 2] = $22_1;
      if ($1_1 + $27_1 == $1_1) {
       break label$30
      }
      $11_1 = $22_1 + $11_1 | 0;
      HEAP32[$21_1 >> 2] = $11_1;
      label$35 : {
       if ($11_1 >>> 0 < 1e9 >>> 0) {
        break label$35
       }
       label$36 : while (1) {
        HEAP32[$21_1 >> 2] = 0;
        label$37 : {
         $21_1 = $21_1 + -4 | 0;
         if ($21_1 >>> 0 >= $18_1 >>> 0) {
          break label$37
         }
         $18_1 = $18_1 + -4 | 0;
         HEAP32[$18_1 >> 2] = 0;
        }
        $11_1 = (HEAP32[$21_1 >> 2] | 0) + 1 | 0;
        HEAP32[$21_1 >> 2] = $11_1;
        if ($11_1 >>> 0 > 999999999 >>> 0) {
         continue label$36
        }
        break label$36;
       };
      }
      $3_1 = Math_imul(($17_1 - $18_1 | 0) >> 2 | 0, 9);
      $11_1 = 10;
      $12_1 = HEAP32[$18_1 >> 2] | 0;
      if ($12_1 >>> 0 < 10 >>> 0) {
       break label$30
      }
      label$38 : while (1) {
       $3_1 = $3_1 + 1 | 0;
       $11_1 = Math_imul($11_1, 10);
       if ($12_1 >>> 0 >= $11_1 >>> 0) {
        continue label$38
       }
       break label$38;
      };
     }
     $11_1 = $21_1 + 4 | 0;
     $10_1 = $10_1 >>> 0 > $11_1 >>> 0 ? $11_1 : $10_1;
    }
    label$39 : {
     label$40 : while (1) {
      $11_1 = $10_1;
      $12_1 = $10_1 >>> 0 <= $18_1 >>> 0;
      if ($12_1) {
       break label$39
      }
      $10_1 = $11_1 + -4 | 0;
      if (!(HEAP32[$10_1 >> 2] | 0)) {
       continue label$40
      }
      break label$40;
     };
    }
    label$41 : {
     label$42 : {
      if (($14_1 | 0) == (103 | 0)) {
       break label$42
      }
      $21_1 = $4_1 & 8 | 0;
      break label$41;
     }
     $10_1 = $15_1 ? $15_1 : 1;
     $21_1 = ($10_1 | 0) > ($3_1 | 0) & ($3_1 | 0) > (-5 | 0) | 0;
     $15_1 = ($21_1 ? $3_1 ^ -1 | 0 : -1) + $10_1 | 0;
     $5_1 = ($21_1 ? -1 : -2) + $5_1 | 0;
     $21_1 = $4_1 & 8 | 0;
     if ($21_1) {
      break label$41
     }
     $10_1 = -9;
     label$43 : {
      if ($12_1) {
       break label$43
      }
      $21_1 = HEAP32[($11_1 + -4 | 0) >> 2] | 0;
      if (!$21_1) {
       break label$43
      }
      $12_1 = 10;
      $10_1 = 0;
      if (($21_1 >>> 0) % (10 >>> 0) | 0) {
       break label$43
      }
      label$44 : while (1) {
       $22_1 = $10_1;
       $10_1 = $10_1 + 1 | 0;
       $12_1 = Math_imul($12_1, 10);
       if (!(($21_1 >>> 0) % ($12_1 >>> 0) | 0)) {
        continue label$44
       }
       break label$44;
      };
      $10_1 = $22_1 ^ -1 | 0;
     }
     $12_1 = Math_imul(($11_1 - $17_1 | 0) >> 2 | 0, 9);
     label$45 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break label$45
      }
      $21_1 = 0;
      $10_1 = ($12_1 + $10_1 | 0) + -9 | 0;
      $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
      $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
      break label$41;
     }
     $21_1 = 0;
     $10_1 = (($3_1 + $12_1 | 0) + $10_1 | 0) + -9 | 0;
     $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
     $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
    }
    $12_1 = -1;
    $22_1 = $15_1 | $21_1 | 0;
    if (($15_1 | 0) > (($22_1 ? 2147483645 : 2147483646) | 0)) {
     break label$4
    }
    $23_1 = ($15_1 + (($22_1 | 0) != (0 | 0)) | 0) + 1 | 0;
    label$46 : {
     label$47 : {
      $20_1 = $5_1 & -33 | 0;
      if (($20_1 | 0) != (70 | 0)) {
       break label$47
      }
      if (($3_1 | 0) > ($23_1 ^ 2147483647 | 0 | 0)) {
       break label$4
      }
      $10_1 = ($3_1 | 0) > (0 | 0) ? $3_1 : 0;
      break label$46;
     }
     label$48 : {
      $10_1 = $3_1 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $10_1 = $1948(($3_1 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$4 | 0, $13_1 | 0) | 0;
      if (($13_1 - $10_1 | 0 | 0) > (1 | 0)) {
       break label$48
      }
      label$49 : while (1) {
       $10_1 = $10_1 + -1 | 0;
       HEAP8[$10_1 >> 0] = 48;
       if (($13_1 - $10_1 | 0 | 0) < (2 | 0)) {
        continue label$49
       }
       break label$49;
      };
     }
     $19_1 = $10_1 + -2 | 0;
     HEAP8[$19_1 >> 0] = $5_1;
     $12_1 = -1;
     HEAP8[($10_1 + -1 | 0) >> 0] = ($3_1 | 0) < (0 | 0) ? 45 : 43;
     $10_1 = $13_1 - $19_1 | 0;
     if (($10_1 | 0) > ($23_1 ^ 2147483647 | 0 | 0)) {
      break label$4
     }
    }
    $12_1 = -1;
    $10_1 = $10_1 + $23_1 | 0;
    if (($10_1 | 0) > ($8_1 ^ 2147483647 | 0 | 0)) {
     break label$4
    }
    $23_1 = $10_1 + $8_1 | 0;
    $1949($0_1 | 0, 32 | 0, $2_1 | 0, $23_1 | 0, $4_1 | 0);
    $1943($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $1949($0_1 | 0, 48 | 0, $2_1 | 0, $23_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$50 : {
     label$51 : {
      label$52 : {
       label$53 : {
        if (($20_1 | 0) != (70 | 0)) {
         break label$53
        }
        $21_1 = $6_1 + 16 | 0 | 8 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $12_1 = $18_1 >>> 0 > $17_1 >>> 0 ? $17_1 : $18_1;
        $18_1 = $12_1;
        label$54 : while (1) {
         i64toi32_i32$5 = $18_1;
         i64toi32_i32$4 = HEAP32[$18_1 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $10_1 = $1948(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
         label$55 : {
          label$56 : {
           if (($18_1 | 0) == ($12_1 | 0)) {
            break label$56
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$55
           }
           label$57 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$57
            }
            break label$55;
           };
          }
          if (($10_1 | 0) != ($3_1 | 0)) {
           break label$55
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $10_1 = $21_1;
         }
         $1943($0_1 | 0, $10_1 | 0, $3_1 - $10_1 | 0 | 0);
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 <= $17_1 >>> 0) {
          continue label$54
         }
         break label$54;
        };
        label$58 : {
         if (!$22_1) {
          break label$58
         }
         $1943($0_1 | 0, 5772 | 0, 1 | 0);
        }
        if ($18_1 >>> 0 >= $11_1 >>> 0) {
         break label$52
        }
        if (($15_1 | 0) < (1 | 0)) {
         break label$52
        }
        label$59 : while (1) {
         label$60 : {
          i64toi32_i32$5 = $18_1;
          i64toi32_i32$0 = HEAP32[$18_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $10_1 = $1948(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $3_1 | 0) | 0;
          if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$60
          }
          label$61 : while (1) {
           $10_1 = $10_1 + -1 | 0;
           HEAP8[$10_1 >> 0] = 48;
           if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$61
           }
           break label$61;
          };
         }
         $1943($0_1 | 0, $10_1 | 0, (($15_1 | 0) < (9 | 0) ? $15_1 : 9) | 0);
         $10_1 = $15_1 + -9 | 0;
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 >= $11_1 >>> 0) {
          break label$51
         }
         $12_1 = ($15_1 | 0) > (9 | 0);
         $15_1 = $10_1;
         if ($12_1) {
          continue label$59
         }
         break label$51;
        };
       }
       label$62 : {
        if (($15_1 | 0) < (0 | 0)) {
         break label$62
        }
        $22_1 = $11_1 >>> 0 > $18_1 >>> 0 ? $11_1 : $18_1 + 4 | 0;
        $17_1 = $6_1 + 16 | 0 | 8 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $11_1 = $18_1;
        label$63 : while (1) {
         label$64 : {
          i64toi32_i32$5 = $11_1;
          i64toi32_i32$4 = HEAP32[$11_1 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $10_1 = $1948(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
          if (($10_1 | 0) != ($3_1 | 0)) {
           break label$64
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $10_1 = $17_1;
         }
         label$65 : {
          label$66 : {
           if (($11_1 | 0) == ($18_1 | 0)) {
            break label$66
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$65
           }
           label$67 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$67
            }
            break label$65;
           };
          }
          $1943($0_1 | 0, $10_1 | 0, 1 | 0);
          $10_1 = $10_1 + 1 | 0;
          if (!($15_1 | $21_1 | 0)) {
           break label$65
          }
          $1943($0_1 | 0, 5772 | 0, 1 | 0);
         }
         $12_1 = $3_1 - $10_1 | 0;
         $1943($0_1 | 0, $10_1 | 0, (($15_1 | 0) < ($12_1 | 0) ? $15_1 : $12_1) | 0);
         $15_1 = $15_1 - $12_1 | 0;
         $11_1 = $11_1 + 4 | 0;
         if ($11_1 >>> 0 >= $22_1 >>> 0) {
          break label$62
         }
         if (($15_1 | 0) > (-1 | 0)) {
          continue label$63
         }
         break label$63;
        };
       }
       $1949($0_1 | 0, 48 | 0, $15_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $1943($0_1 | 0, $19_1 | 0, $13_1 - $19_1 | 0 | 0);
       break label$50;
      }
      $10_1 = $15_1;
     }
     $1949($0_1 | 0, 48 | 0, $10_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $1949($0_1 | 0, 32 | 0, $2_1 | 0, $23_1 | 0, $4_1 ^ 8192 | 0 | 0);
    $12_1 = ($23_1 | 0) > ($2_1 | 0) ? $23_1 : $2_1;
    break label$4;
   }
   $23_1 = $9_1 + ((($5_1 << 26 | 0) >> 31 | 0) & 9 | 0) | 0;
   label$68 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$68
    }
    $10_1 = 12 - $3_1 | 0;
    $27_1 = 16.0;
    label$69 : while (1) {
     $27_1 = $27_1 * 16.0;
     $10_1 = $10_1 + -1 | 0;
     if ($10_1) {
      continue label$69
     }
     break label$69;
    };
    label$70 : {
     if ((HEAPU8[$23_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$70
     }
     $1_1 = -($27_1 + (-$1_1 - $27_1));
     break label$68;
    }
    $1_1 = $1_1 + $27_1 - $27_1;
   }
   label$71 : {
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $10_1 = $11_1 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $10_1 = $1948(($11_1 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$0 | 0, $13_1 | 0) | 0;
    if (($10_1 | 0) != ($13_1 | 0)) {
     break label$71
    }
    HEAP8[($6_1 + 15 | 0) >> 0] = 48;
    $10_1 = $6_1 + 15 | 0;
   }
   $21_1 = $8_1 | 2 | 0;
   $18_1 = $5_1 & 32 | 0;
   $22_1 = $10_1 + -2 | 0;
   HEAP8[$22_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($10_1 + -1 | 0) >> 0] = ($11_1 | 0) < (0 | 0) ? 45 : 43;
   $12_1 = $4_1 & 8 | 0;
   $11_1 = $6_1 + 16 | 0;
   label$72 : while (1) {
    $10_1 = $11_1;
    label$73 : {
     label$74 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$74
      }
      $11_1 = ~~$1_1;
      break label$73;
     }
     $11_1 = -2147483648;
    }
    HEAP8[$10_1 >> 0] = HEAPU8[($11_1 + 24400 | 0) >> 0] | 0 | $18_1 | 0;
    $1_1 = ($1_1 - +($11_1 | 0)) * 16.0;
    label$75 : {
     $11_1 = $10_1 + 1 | 0;
     if (($11_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$75
     }
     label$76 : {
      if ($12_1) {
       break label$76
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$76
      }
      if ($1_1 == 0.0) {
       break label$75
      }
     }
     HEAP8[($10_1 + 1 | 0) >> 0] = 46;
     $11_1 = $10_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$72
    }
    break label$72;
   };
   $12_1 = -1;
   $19_1 = $13_1 - $22_1 | 0;
   $10_1 = $21_1 + $19_1 | 0;
   if ((2147483645 - $10_1 | 0 | 0) < ($3_1 | 0)) {
    break label$4
   }
   label$77 : {
    label$78 : {
     if (!$3_1) {
      break label$78
     }
     $18_1 = $11_1 - ($6_1 + 16 | 0) | 0;
     if (($18_1 + -2 | 0 | 0) >= ($3_1 | 0)) {
      break label$78
     }
     $11_1 = $3_1 + 2 | 0;
     break label$77;
    }
    $18_1 = $11_1 - ($6_1 + 16 | 0) | 0;
    $11_1 = $18_1;
   }
   $10_1 = $10_1 + $11_1 | 0;
   $1949($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
   $1943($0_1 | 0, $23_1 | 0, $21_1 | 0);
   $1949($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $1943($0_1 | 0, $6_1 + 16 | 0 | 0, $18_1 | 0);
   $1949($0_1 | 0, 48 | 0, $11_1 - $18_1 | 0 | 0, 0 | 0, 0 | 0);
   $1943($0_1 | 0, $22_1 | 0, $19_1 | 0);
   $1949($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
   $12_1 = ($10_1 | 0) > ($2_1 | 0) ? $10_1 : $2_1;
  }
  global$0 = $6_1 + 560 | 0;
  return $12_1 | 0;
 }
 
 function $1953($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $15_1 = 0, $15$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 7 | 0) & -8 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $15$hi;
  HEAPF64[$0_1 >> 3] = +$1860($12_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $1954($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $1955($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  label$1 : {
   if ($1895($0_1 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1956($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $21$hi = 0, i64toi32_i32$3 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = (HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0) - $2_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $13_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $13_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   if (!($1_1 | $1$hi | 0)) {
    break label$1
   }
   i64toi32_i32$1 = $3_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $21$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $21$hi;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $11_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
      $12_1 = 0
     } else {
      $12_1 = 1
     }
     $14_1 = $12_1;
    } else {
     $14_1 = 0
    }
    $11_1 = $14_1;
   }
   if ($11_1) {
    break label$1
   }
   i64toi32_i32$2 = $1$hi;
   $3_1 = $2_1 + $1_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
 }
 
 function $1957($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $1_1 = 0, $4$hi = 0, $5$hi = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $7_1 = 0, $7$hi = 0, $15_1 = 0, $15$hi = 0, $35_1 = 0, $40_1 = 0, $40$hi = 0, $59_1 = 0, $59$hi = 0, $67_1 = 0, $74_1 = 0, $74$hi = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  $1_1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2_1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
  i64toi32_i32$0 = $1_1 - $2_1 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $15_1 = i64toi32_i32$0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$0 = $15$hi;
  i64toi32_i32$3 = $15_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $4_1 = i64toi32_i32$4;
  $4$hi = i64toi32_i32$5;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$5;
     $5$hi = i64toi32_i32$2;
     if (!(i64toi32_i32$5 | i64toi32_i32$2 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$5 = $5$hi;
     i64toi32_i32$3 = $5_1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
      $26_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        $27_1 = 0
       } else {
        $27_1 = 1
       }
       $28_1 = $27_1;
      } else {
       $28_1 = 0
      }
      $26_1 = $28_1;
     }
     if ($26_1) {
      break label$2
     }
    }
    $2_1 = $1955($0_1 | 0) | 0;
    if (($2_1 | 0) > (-1 | 0)) {
     break label$1
    }
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = -1;
   HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] = $1_1;
   $35_1 = i64toi32_i32$2;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = $2_1 - $1_1 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
   $40_1 = i64toi32_i32$2;
   $40$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$2 = $40$hi;
   i64toi32_i32$5 = $40_1;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$3 = $35_1;
   HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] = i64toi32_i32$4;
   return -1 | 0;
  }
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = 1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $4_1 = i64toi32_i32$2;
  $4$hi = i64toi32_i32$0;
  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  label$4 : {
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
    break label$4
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$2 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$3;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$5 = $3_1 - $1_1 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
   $59_1 = i64toi32_i32$5;
   $59$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $59$hi;
   i64toi32_i32$0 = $59_1;
   if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
    $29_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      $30_1 = 0
     } else {
      $30_1 = 1
     }
     $31_1 = $30_1;
    } else {
     $31_1 = 0
    }
    $29_1 = $31_1;
   }
   if ($29_1) {
    break label$4
   }
   i64toi32_i32$4 = $5$hi;
   $3_1 = $1_1 + $5_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
  $67_1 = $0_1;
  i64toi32_i32$4 = $4$hi;
  $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  i64toi32_i32$2 = $3_1 - $1_1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
  $74_1 = i64toi32_i32$2;
  $74$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $74$hi;
  i64toi32_i32$5 = $74_1;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  i64toi32_i32$0 = $67_1;
  HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] = i64toi32_i32$3;
  label$5 : {
   if ($1_1 >>> 0 > $3_1 >>> 0) {
    break label$5
   }
   HEAP8[($1_1 + -1 | 0) >> 0] = $2_1;
  }
  return $2_1 | 0;
 }
 
 function $1958() {
  return 25900 | 0;
 }
 
 function $1959($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $2_1 ? $2_1 : 28240;
  $2_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1_1) {
       break label$4
      }
      if ($2_1) {
       break label$3
      }
      $2_1 = 0;
      break label$1;
     }
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     $1_1 = ($5_1 << 24 | 0) >> 24 | 0;
     $0_1 = $0_1 ? $0_1 : $3_1 + 12 | 0;
     label$5 : {
      if ($2_1) {
       break label$5
      }
      label$6 : {
       if (($1_1 | 0) < (0 | 0)) {
        break label$6
       }
       HEAP32[$0_1 >> 2] = $5_1;
       $2_1 = ($1_1 | 0) != (0 | 0);
       break label$1;
      }
      label$7 : {
       if (HEAP32[(HEAP32[(0 + 25988 | 0) >> 2] | 0) >> 2] | 0) {
        break label$7
       }
       HEAP32[$0_1 >> 2] = $1_1 & 57343 | 0;
       $2_1 = 1;
       break label$1;
      }
      $2_1 = $5_1 + -194 | 0;
      if ($2_1 >>> 0 > 50 >>> 0) {
       break label$3
      }
      $2_1 = HEAP32[(($2_1 << 2 | 0) + 24768 | 0) >> 2] | 0;
      break label$2;
     }
     $1_1 = ($1_1 & 248 | 0) >>> 3 | 0;
     if (($1_1 + -16 | 0 | (($2_1 >> 26 | 0) + $1_1 | 0) | 0) >>> 0 > 7 >>> 0) {
      break label$3
     }
     $2_1 = $5_1 + -128 | 0 | ($2_1 << 6 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$2
     }
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$0_1 >> 2] = $2_1;
     $2_1 = 1;
     break label$1;
    }
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[($1882() | 0) >> 2] = 25;
    $2_1 = -1;
    break label$1;
   }
   HEAP32[$4_1 >> 2] = $2_1;
   $2_1 = -2;
  }
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1960($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $1961($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $8$hi = 0, $5_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0, $9$hi = 0, $6_1 = 0, $10$hi = 0, $9_1 = 0, $10_1 = 0, $11$hi = 0, $11_1 = 0, $2_1 = 0, $4_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $7_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $183_1 = 0, $183$hi = 0, $240_1 = 0, $240$hi = 0, $387$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1882() | 0) >> 2] = 28;
    i64toi32_i32$0 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$0;
    break label$1;
   }
   label$3 : while (1) {
    label$4 : {
     label$5 : {
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($3_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
      $3_1 = HEAPU8[$3_1 >> 0] | 0;
      break label$4;
     }
     $3_1 = $1957($0_1 | 0) | 0;
    }
    if ($1903($3_1 | 0) | 0) {
     continue label$3
    }
    break label$3;
   };
   $4_1 = 0;
   label$6 : {
    label$7 : {
     switch ($3_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$7;
     default:
      break label$6;
     };
    }
    $4_1 = ($3_1 | 0) == (45 | 0) ? -1 : 0;
    label$8 : {
     $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($3_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
      break label$8
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
     $3_1 = HEAPU8[$3_1 >> 0] | 0;
     break label$6;
    }
    $3_1 = $1957($0_1 | 0) | 0;
   }
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       label$13 : {
        if (($1_1 | 0) != (0 | 0) & ($1_1 | 0) != (16 | 0) | 0) {
         break label$13
        }
        if (($3_1 | 0) != (48 | 0)) {
         break label$13
        }
        label$14 : {
         label$15 : {
          $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($3_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$15
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
          $3_1 = HEAPU8[$3_1 >> 0] | 0;
          break label$14;
         }
         $3_1 = $1957($0_1 | 0) | 0;
        }
        label$16 : {
         if (($3_1 & -33 | 0 | 0) != (88 | 0)) {
          break label$16
         }
         label$17 : {
          label$18 : {
           $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($3_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$18
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
           $3_1 = HEAPU8[$3_1 >> 0] | 0;
           break label$17;
          }
          $3_1 = $1957($0_1 | 0) | 0;
         }
         $1_1 = 16;
         if ((HEAPU8[($3_1 + 24417 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
          break label$11
         }
         i64toi32_i32$0 = 0;
         $8_1 = 0;
         $8$hi = i64toi32_i32$0;
         label$19 : {
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
          i64toi32_i32$2 = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = 0;
          if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
           $27_1 = 1
          } else {
           if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
            if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
             $28_1 = 0
            } else {
             $28_1 = 1
            }
            $29_1 = $28_1;
           } else {
            $29_1 = 0
           }
           $27_1 = $29_1;
          }
          if ($27_1) {
           break label$19
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         i64toi32_i32$2 = 0;
         $1956($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
         break label$1;
        }
        if ($1_1) {
         break label$12
        }
        $1_1 = 8;
        break label$11;
       }
       $1_1 = $1_1 ? $1_1 : 10;
       if ($1_1 >>> 0 > (HEAPU8[($3_1 + 24417 | 0) >> 0] | 0) >>> 0) {
        break label$12
       }
       i64toi32_i32$2 = 0;
       $8_1 = 0;
       $8$hi = i64toi32_i32$2;
       label$20 : {
        i64toi32_i32$3 = $0_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $30_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
           $31_1 = 0
          } else {
           $31_1 = 1
          }
          $32_1 = $31_1;
         } else {
          $32_1 = 0
         }
         $30_1 = $32_1;
        }
        if ($30_1) {
         break label$20
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       i64toi32_i32$3 = 0;
       $1956($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
       HEAP32[($1882() | 0) >> 2] = 28;
       break label$1;
      }
      if (($1_1 | 0) != (10 | 0)) {
       break label$11
      }
      i64toi32_i32$3 = 0;
      $8_1 = 0;
      $8$hi = i64toi32_i32$3;
      label$21 : {
       $5_1 = $3_1 + -48 | 0;
       if ($5_1 >>> 0 > 9 >>> 0) {
        break label$21
       }
       $1_1 = 0;
       label$22 : while (1) {
        $1_1 = Math_imul($1_1, 10);
        label$23 : {
         label$24 : {
          $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($3_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$24
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
          $3_1 = HEAPU8[$3_1 >> 0] | 0;
          break label$23;
         }
         $3_1 = $1957($0_1 | 0) | 0;
        }
        $1_1 = $1_1 + $5_1 | 0;
        label$25 : {
         $5_1 = $3_1 + -48 | 0;
         if ($5_1 >>> 0 > 9 >>> 0) {
          break label$25
         }
         if ($1_1 >>> 0 < 429496729 >>> 0) {
          continue label$22
         }
        }
        break label$22;
       };
       i64toi32_i32$3 = 0;
       $8_1 = $1_1;
       $8$hi = i64toi32_i32$3;
      }
      label$26 : {
       if ($5_1 >>> 0 > 9 >>> 0) {
        break label$26
       }
       i64toi32_i32$3 = $8$hi;
       i64toi32_i32$1 = 0;
       i64toi32_i32$1 = __wasm_i64_mul($8_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $9_1 = i64toi32_i32$1;
       $9$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       $10_1 = $5_1;
       $10$hi = i64toi32_i32$3;
       label$27 : while (1) {
        label$28 : {
         label$29 : {
          $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($3_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$29
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
          $3_1 = HEAPU8[$3_1 >> 0] | 0;
          break label$28;
         }
         $3_1 = $1957($0_1 | 0) | 0;
        }
        i64toi32_i32$3 = $9$hi;
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$3 = $9$hi;
        i64toi32_i32$0 = $9_1;
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$2 = $10_1;
        i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $8_1 = i64toi32_i32$4;
        $8$hi = i64toi32_i32$5;
        $5_1 = $3_1 + -48 | 0;
        if ($5_1 >>> 0 > 9 >>> 0) {
         break label$26
        }
        i64toi32_i32$5 = $8$hi;
        i64toi32_i32$3 = $8_1;
        i64toi32_i32$0 = 429496729;
        i64toi32_i32$2 = -1717986918;
        if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
         break label$26
        }
        i64toi32_i32$3 = $8$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_mul($8_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $9_1 = i64toi32_i32$5;
        $9$hi = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        $10_1 = $5_1;
        $10$hi = i64toi32_i32$3;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$5 = -1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
        $183_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
        $183$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$3 = $9_1;
        i64toi32_i32$2 = $183$hi;
        i64toi32_i32$0 = $183_1;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
         continue label$27
        }
        break label$27;
       };
       $1_1 = 10;
       break label$10;
      }
      $1_1 = 10;
      if ($5_1 >>> 0 <= 9 >>> 0) {
       break label$10
      }
      break label$9;
     }
     label$30 : {
      if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
       break label$30
      }
      i64toi32_i32$3 = 0;
      $8_1 = 0;
      $8$hi = i64toi32_i32$3;
      label$31 : {
       $6_1 = HEAPU8[($3_1 + 24417 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $6_1 >>> 0) {
        break label$31
       }
       $5_1 = 0;
       label$32 : while (1) {
        $5_1 = Math_imul($5_1, $1_1);
        label$33 : {
         label$34 : {
          $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($3_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$34
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
          $3_1 = HEAPU8[$3_1 >> 0] | 0;
          break label$33;
         }
         $3_1 = $1957($0_1 | 0) | 0;
        }
        $5_1 = $6_1 + $5_1 | 0;
        label$35 : {
         $6_1 = HEAPU8[($3_1 + 24417 | 0) >> 0] | 0;
         if ($1_1 >>> 0 <= $6_1 >>> 0) {
          break label$35
         }
         if ($5_1 >>> 0 < 119304647 >>> 0) {
          continue label$32
         }
        }
        break label$32;
       };
       i64toi32_i32$3 = 0;
       $8_1 = $5_1;
       $8$hi = i64toi32_i32$3;
      }
      if ($1_1 >>> 0 <= $6_1 >>> 0) {
       break label$10
      }
      i64toi32_i32$3 = 0;
      $9_1 = $1_1;
      $9$hi = i64toi32_i32$3;
      label$36 : while (1) {
       i64toi32_i32$3 = $8$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $8$hi;
       i64toi32_i32$5 = $9$hi;
       i64toi32_i32$5 = __wasm_i64_mul($8_1 | 0, i64toi32_i32$3 | 0, $9_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $10_1 = i64toi32_i32$5;
       $10$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 255;
       i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
       $11_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
       $11$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $11_1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$2 = -1;
       i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
       $240_1 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
       $240$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$5 = $10_1;
       i64toi32_i32$3 = $240$hi;
       i64toi32_i32$2 = $240_1;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$10
       }
       label$37 : {
        label$38 : {
         $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($3_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$38
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
         $3_1 = HEAPU8[$3_1 >> 0] | 0;
         break label$37;
        }
        $3_1 = $1957($0_1 | 0) | 0;
       }
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$2 = $10_1;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$3 = $11_1;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $8_1 = i64toi32_i32$1;
       $8$hi = i64toi32_i32$4;
       $6_1 = HEAPU8[($3_1 + 24417 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $6_1 >>> 0) {
        break label$10
       }
       i64toi32_i32$4 = $9$hi;
       i64toi32_i32$4 = $8$hi;
       i64toi32_i32$4 = $9$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = $8$hi;
       i64toi32_i32$3 = 0;
       $1839($2_1 | 0, $9_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, $8_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = $2_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$10
       }
       continue label$36;
      };
     }
     $7_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 24673 | 0) >> 0] | 0;
     i64toi32_i32$2 = 0;
     $8_1 = 0;
     $8$hi = i64toi32_i32$2;
     label$39 : {
      $5_1 = HEAPU8[($3_1 + 24417 | 0) >> 0] | 0;
      if ($1_1 >>> 0 <= $5_1 >>> 0) {
       break label$39
      }
      $6_1 = 0;
      label$40 : while (1) {
       $6_1 = $6_1 << $7_1 | 0;
       label$41 : {
        label$42 : {
         $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($3_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$42
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
         $3_1 = HEAPU8[$3_1 >> 0] | 0;
         break label$41;
        }
        $3_1 = $1957($0_1 | 0) | 0;
       }
       $6_1 = $5_1 | $6_1 | 0;
       label$43 : {
        $5_1 = HEAPU8[($3_1 + 24417 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $5_1 >>> 0) {
         break label$43
        }
        if ($6_1 >>> 0 < 134217728 >>> 0) {
         continue label$40
        }
       }
       break label$40;
      };
      i64toi32_i32$2 = 0;
      $8_1 = $6_1;
      $8$hi = i64toi32_i32$2;
     }
     if ($1_1 >>> 0 <= $5_1 >>> 0) {
      break label$10
     }
     i64toi32_i32$2 = 0;
     $10_1 = $7_1;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$2 = -1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $33_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $33_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $11_1 = $33_1;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $8$hi;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$4 = $8$hi;
     i64toi32_i32$3 = $8_1;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$10
     }
     label$44 : while (1) {
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$3 = $8_1;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$4 = $10_1;
      i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $34_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $34_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $8_1 = $34_1;
      $8$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 255;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $9_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
      $9$hi = i64toi32_i32$3;
      label$45 : {
       label$46 : {
        $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($3_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$46
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
        $3_1 = HEAPU8[$3_1 >> 0] | 0;
        break label$45;
       }
       $3_1 = $1957($0_1 | 0) | 0;
      }
      i64toi32_i32$3 = $8$hi;
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$3 = $8$hi;
      i64toi32_i32$5 = $8_1;
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$4 = $9_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $8_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $8$hi = i64toi32_i32$2;
      $5_1 = HEAPU8[($3_1 + 24417 | 0) >> 0] | 0;
      if ($1_1 >>> 0 <= $5_1 >>> 0) {
       break label$10
      }
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$3 = $8_1;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$4 = $11_1;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
       continue label$44
      }
      break label$44;
     };
    }
    if ($1_1 >>> 0 <= (HEAPU8[($3_1 + 24417 | 0) >> 0] | 0) >>> 0) {
     break label$9
    }
    label$47 : while (1) {
     label$48 : {
      label$49 : {
       $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($3_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$49
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
       $3_1 = HEAPU8[$3_1 >> 0] | 0;
       break label$48;
      }
      $3_1 = $1957($0_1 | 0) | 0;
     }
     if ($1_1 >>> 0 > (HEAPU8[($3_1 + 24417 | 0) >> 0] | 0) >>> 0) {
      continue label$47
     }
     break label$47;
    };
    HEAP32[($1882() | 0) >> 2] = 68;
    i64toi32_i32$3 = -1;
    $8_1 = -1;
    $8$hi = i64toi32_i32$3;
    $4_1 = 0;
   }
   label$50 : {
    i64toi32_i32$4 = $0_1;
    i64toi32_i32$3 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
      if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$5 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$50
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
   $9_1 = i64toi32_i32$2;
   $9$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$5 = $8_1;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$3 = $9_1;
   i64toi32_i32$2 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   $387$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$2 = $387$hi;
   i64toi32_i32$4 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   i64toi32_i32$1 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$5 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
   $8_1 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$1;
  }
  global$0 = $2_1 + 16 | 0;
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$4 = $8_1;
  i64toi32_i32$HIGH_BITS = $8$hi;
  return i64toi32_i32$4 | 0;
 }
 
 function $1962($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11_1 | ($23_1 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $1963($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $20_1 = 0, $70_1 = 0, $71_1 = 0, $71$hi = 0, $72_1 = 0, $72$hi = 0, $76$hi = 0, $80_1 = 0, $83_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $1838($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     if ($3_1 >>> 0 >= 32767 >>> 0) {
      break label$3
     }
     $3_1 = $3_1 + -16383 | 0;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $1838($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = (($3_1 | 0) < (49149 | 0) ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 7471104;
   $1838($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    if ($3_1 >>> 0 <= -32652 >>> 0) {
     break label$4
    }
    $3_1 = $3_1 + 16269 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 7471104;
   $1838($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = (($3_1 | 0) > (-48920 | 0) ? $3_1 : -48920) + 32538 | 0;
   i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $70_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $71_1 = $1_1;
  $71$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $72_1 = $2_1;
  $72$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $76$hi;
  $1838($70_1 | 0, $71_1 | 0, i64toi32_i32$1 | 0, $72_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $83_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 80 | 0;
 }
 
 function $1964($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $1965($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $7_1 = 0, $3_1 = 0, $8_1 = 0, $8$hi = 0, $9_1 = 0, $9$hi = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  i64toi32_i32$0 = 0;
  $8_1 = 0;
  $8$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $2_1 = $2_1 << 2 | 0;
    $4_1 = HEAP32[($2_1 + 24748 | 0) >> 2] | 0;
    $5_1 = HEAP32[($2_1 + 24736 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$4;
      }
      $2_1 = $1957($1_1 | 0) | 0;
     }
     if ($1903($2_1 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $6_1 = 1;
    label$6 : {
     label$7 : {
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $6_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
     label$8 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$8
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$6;
     }
     $2_1 = $1957($1_1 | 0) | 0;
    }
    $7_1 = 0;
    label$9 : {
     label$10 : {
      label$11 : while (1) {
       if (($2_1 | 32 | 0 | 0) != (HEAP8[($7_1 + 1181 | 0) >> 0] | 0 | 0)) {
        break label$10
       }
       label$12 : {
        if ($7_1 >>> 0 > 6 >>> 0) {
         break label$12
        }
        label$13 : {
         $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
         if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$13
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
         $2_1 = HEAPU8[$2_1 >> 0] | 0;
         break label$12;
        }
        $2_1 = $1957($1_1 | 0) | 0;
       }
       $7_1 = $7_1 + 1 | 0;
       if (($7_1 | 0) != (8 | 0)) {
        continue label$11
       }
       break label$9;
      };
     }
     label$14 : {
      label$15 : {
       label$16 : {
        label$17 : {
         label$18 : {
          switch ($7_1 | 0) {
          case 3:
           i64toi32_i32$2 = $1_1;
           i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 0;
           if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
            $16_1 = 1
           } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
             if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
              $17_1 = 0
             } else {
              $17_1 = 1
             }
             $18_1 = $17_1;
            } else {
             $18_1 = 0
            }
            $16_1 = $18_1;
           }
           if ($16_1) {
            break label$9
           }
           HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
           break label$9;
          case 0:
           label$21 : while (1) {
            if (($2_1 | 32 | 0 | 0) != (HEAP8[($7_1 + 4031 | 0) >> 0] | 0 | 0)) {
             break label$17
            }
            label$22 : {
             if ($7_1 >>> 0 > 1 >>> 0) {
              break label$22
             }
             label$23 : {
              $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
              if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
               break label$23
              }
              HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
              $2_1 = HEAPU8[$2_1 >> 0] | 0;
              break label$22;
             }
             $2_1 = $1957($1_1 | 0) | 0;
            }
            $7_1 = $7_1 + 1 | 0;
            if (($7_1 | 0) != (3 | 0)) {
             continue label$21
            }
            break label$16;
           };
          case 1:
          case 2:
           break label$17;
          default:
           break label$18;
          };
         }
         if (($7_1 | 0) == (8 | 0)) {
          break label$9
         }
        }
        label$24 : {
         switch ($7_1 | 0) {
         default:
          i64toi32_i32$2 = 0;
          $8_1 = 0;
          $8$hi = i64toi32_i32$2;
          label$26 : {
           i64toi32_i32$3 = $1_1;
           i64toi32_i32$2 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
           i64toi32_i32$3 = i64toi32_i32$2;
           i64toi32_i32$2 = 0;
           i64toi32_i32$0 = 0;
           if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
            $19_1 = 1
           } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
             if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
              $20_1 = 0
             } else {
              $20_1 = 1
             }
             $21_1 = $20_1;
            } else {
             $21_1 = 0
            }
            $19_1 = $21_1;
           }
           if ($19_1) {
            break label$26
           }
           HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          HEAP32[($1882() | 0) >> 2] = 28;
          break label$15;
         case 3:
          break label$16;
         case 0:
          break label$24;
         };
        }
        label$27 : {
         if (($2_1 | 0) != (48 | 0)) {
          break label$27
         }
         label$28 : {
          label$29 : {
           $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$29
           }
           HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
           $7_1 = HEAPU8[$7_1 >> 0] | 0;
           break label$28;
          }
          $7_1 = $1957($1_1 | 0) | 0;
         }
         label$30 : {
          if (($7_1 & -33 | 0 | 0) != (88 | 0)) {
           break label$30
          }
          $1966($3_1 + 16 | 0 | 0, $1_1 | 0, $5_1 | 0, $4_1 | 0, $6_1 | 0);
          i64toi32_i32$0 = $3_1 + 24 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
          $9_1 = i64toi32_i32$3;
          $9$hi = i64toi32_i32$1;
          i64toi32_i32$0 = $3_1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
          $8_1 = i64toi32_i32$1;
          $8$hi = i64toi32_i32$3;
          break label$1;
         }
         i64toi32_i32$0 = $1_1;
         i64toi32_i32$3 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
         i64toi32_i32$0 = i64toi32_i32$3;
         i64toi32_i32$3 = 0;
         i64toi32_i32$2 = 0;
         if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
          $22_1 = 1
         } else {
          if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
           if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
            $23_1 = 0
           } else {
            $23_1 = 1
           }
           $24_1 = $23_1;
          } else {
           $24_1 = 0
          }
          $22_1 = $24_1;
         }
         if ($22_1) {
          break label$27
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        $1967($3_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $5_1 | 0, $4_1 | 0, $6_1 | 0);
        i64toi32_i32$2 = $3_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $9_1 = i64toi32_i32$0;
        $9$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $8_1 = i64toi32_i32$1;
        $8$hi = i64toi32_i32$0;
        break label$1;
       }
       label$31 : {
        label$32 : {
         $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
         if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$32
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
         $2_1 = HEAPU8[$2_1 >> 0] | 0;
         break label$31;
        }
        $2_1 = $1957($1_1 | 0) | 0;
       }
       if (($2_1 | 0) != (40 | 0)) {
        break label$14
       }
       label$33 : while (1) {
        label$34 : {
         label$35 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$35
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$34;
         }
         $2_1 = $1957($1_1 | 0) | 0;
        }
        $7_1 = $2_1 + -65 | 0;
        if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
         continue label$33
        }
        if ($7_1 >>> 0 < 26 >>> 0) {
         continue label$33
        }
        $7_1 = $2_1 + -97 | 0;
        if (($2_1 | 0) == (95 | 0)) {
         continue label$33
        }
        if ($7_1 >>> 0 < 26 >>> 0) {
         continue label$33
        }
        break label$33;
       };
       i64toi32_i32$0 = 2147450880;
       $9_1 = 0;
       $9$hi = i64toi32_i32$0;
       if (($2_1 | 0) == (41 | 0)) {
        break label$1
       }
       i64toi32_i32$0 = 0;
       $8_1 = 0;
       $8$hi = i64toi32_i32$0;
       label$36 : {
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
         $25_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $26_1 = 0
          } else {
           $26_1 = 1
          }
          $27_1 = $26_1;
         } else {
          $27_1 = 0
         }
         $25_1 = $27_1;
        }
        if ($25_1) {
         break label$36
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       HEAP32[($1882() | 0) >> 2] = 28;
      }
      i64toi32_i32$2 = $8$hi;
      $1956($1_1 | 0, $8_1 | 0, i64toi32_i32$2 | 0);
      break label$2;
     }
     i64toi32_i32$2 = 0;
     $8_1 = 0;
     $8$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 2147450880;
     $9_1 = 0;
     $9$hi = i64toi32_i32$2;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$2 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
      $28_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
        $29_1 = 0
       } else {
        $29_1 = 1
       }
       $30_1 = $29_1;
      } else {
       $30_1 = 0
      }
      $28_1 = $30_1;
     }
     if ($28_1) {
      break label$1
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     break label$1;
    }
    $1861($3_1 | 0, Math_fround(Math_fround(Math_fround($6_1 | 0) * Math_fround(infinity))));
    i64toi32_i32$0 = $3_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$3;
    $9$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $8_1 = i64toi32_i32$1;
    $8$hi = i64toi32_i32$3;
    break label$1;
   }
   i64toi32_i32$3 = 0;
   $9_1 = 0;
   $9$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $8$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $8_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $9$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $9_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $3_1 + 48 | 0;
 }
 
 function $1966($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $7_1 = 0, $15$hi = 0, $19$hi = 0, $15_1 = 0, $16$hi = 0, $19_1 = 0, $14$hi = 0, $16_1 = 0, $6_1 = 0, $17$hi = 0, $18$hi = 0, $14_1 = 0, $9_1 = 0, $17_1 = 0, $18_1 = 0, $8_1 = 0, $11_1 = 0, $20$hi = 0, $10_1 = 0, $20_1 = 0, $12_1 = 0, $13_1 = 0, $106_1 = 0, $107_1 = 0, $108_1 = 0, $109_1 = 0, $110_1 = 0, $111_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $124_1 = 0, $126_1 = 0, $127_1 = 0, $128_1 = 0, $125_1 = 0, $125$hi = 0, $129_1 = 0, $129$hi = 0, $140_1 = 0, $140$hi = 0, $144_1 = 0, $144$hi = 0, $162_1 = 0, $162$hi = 0, $166_1 = 0, $166$hi = 0, $248$hi = 0, $255$hi = 0, $264_1 = 0, $264$hi = 0, $268_1 = 0, $268$hi = 0, $272_1 = 0, $272$hi = 0, $276_1 = 0, $276$hi = 0, $286_1 = 0, $286$hi = 0, $303_1 = 0, $303$hi = 0, $307_1 = 0, $307$hi = 0, $312_1 = 0, $312$hi = 0, $314_1 = 0, $314$hi = 0, $332$hi = 0, $340_1 = 0, $341_1 = 0, $344$hi = 0, $368_1 = 0, $368$hi = 0, $372_1 = 0, $372$hi = 0, $408_1 = 0, $408$hi = 0, $412_1 = 0, $412$hi = 0, $416_1 = 0, $416$hi = 0, $420_1 = 0, $420$hi = 0, $429_1 = 0, $429$hi = 0, $432_1 = 0, $432$hi = 0, $436_1 = 0, $436$hi = 0, $440_1 = 0, $440$hi = 0, $442_1 = 0, $442$hi = 0, $446_1 = 0, $446$hi = 0, $450_1 = 0, $450$hi = 0, $454_1 = 0, $454$hi = 0, $486_1 = 0, $486$hi = 0, $490_1 = 0, $490$hi = 0, $494_1 = 0, $494$hi = 0, $498_1 = 0, $498$hi = 0;
  $5_1 = global$0 - 432 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if (($6_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
     $7_1 = HEAPU8[$6_1 >> 0] | 0;
     $8_1 = 0;
     break label$2;
    }
    $8_1 = 0;
    $6_1 = 0;
    break label$1;
   }
   $6_1 = 1;
  }
  label$4 : {
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           label$13 : {
            switch ($6_1 | 0) {
            case 0:
             $7_1 = $1957($1_1 | 0) | 0;
             break label$12;
            default:
             break label$13;
            };
           }
           label$15 : {
            if (($7_1 | 0) == (48 | 0)) {
             break label$15
            }
            i64toi32_i32$0 = 1073676288;
            $14_1 = 0;
            $14$hi = i64toi32_i32$0;
            $9_1 = 0;
            if (($7_1 | 0) == (46 | 0)) {
             break label$10
            }
            i64toi32_i32$0 = 0;
            $15_1 = 0;
            $15$hi = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            $16_1 = 0;
            $16$hi = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            $17_1 = 0;
            $17$hi = i64toi32_i32$0;
            $10_1 = 0;
            $11_1 = 0;
            break label$9;
           }
           $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if (($6_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$11
           }
           $8_1 = 1;
           HEAP32[($1_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
           $7_1 = HEAPU8[$6_1 >> 0] | 0;
          }
          $6_1 = 1;
          continue label$5;
         }
         $8_1 = 1;
         break label$6;
        }
        label$16 : {
         label$17 : {
          $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$17
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
          $7_1 = HEAPU8[$7_1 >> 0] | 0;
          break label$16;
         }
         $7_1 = $1957($1_1 | 0) | 0;
        }
        i64toi32_i32$0 = 0;
        $15_1 = 0;
        $15$hi = i64toi32_i32$0;
        if (($7_1 | 0) == (48 | 0)) {
         break label$8
        }
        $11_1 = 1;
        i64toi32_i32$0 = 0;
        $16_1 = 0;
        $16$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $17_1 = 0;
        $17$hi = i64toi32_i32$0;
        $10_1 = 0;
       }
       i64toi32_i32$0 = 0;
       $18_1 = 0;
       $18$hi = i64toi32_i32$0;
       break label$7;
      }
      i64toi32_i32$0 = 0;
      $18_1 = 0;
      $18$hi = i64toi32_i32$0;
      label$18 : while (1) {
       label$19 : {
        label$20 : {
         $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
         if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$20
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
         $7_1 = HEAPU8[$7_1 >> 0] | 0;
         break label$19;
        }
        $7_1 = $1957($1_1 | 0) | 0;
       }
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$2 = $18_1;
       i64toi32_i32$1 = -1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $18_1 = i64toi32_i32$4;
       $18$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       $15_1 = 0;
       $15$hi = i64toi32_i32$5;
       $11_1 = 1;
       if (($7_1 | 0) == (48 | 0)) {
        continue label$18
       }
       break label$18;
      };
      i64toi32_i32$5 = 0;
      $16_1 = 0;
      $16$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $17_1 = 0;
      $17$hi = i64toi32_i32$5;
      $10_1 = 0;
      $8_1 = 1;
     }
     i64toi32_i32$5 = 0;
     $19_1 = 0;
     $19$hi = i64toi32_i32$5;
     label$21 : while (1) {
      $6_1 = $7_1 | 32 | 0;
      label$22 : {
       label$23 : {
        $12_1 = $7_1 + -48 | 0;
        if ($12_1 >>> 0 < 10 >>> 0) {
         break label$23
        }
        label$24 : {
         if (($6_1 + -97 | 0) >>> 0 < 6 >>> 0) {
          break label$24
         }
         if (($7_1 | 0) == (46 | 0)) {
          break label$24
         }
         $13_1 = $7_1;
         break label$4;
        }
        $13_1 = 46;
        if (($7_1 | 0) != (46 | 0)) {
         break label$23
        }
        if ($11_1) {
         break label$4
        }
        $11_1 = 1;
        i64toi32_i32$5 = $19$hi;
        $18_1 = $19_1;
        $18$hi = i64toi32_i32$5;
        break label$22;
       }
       $7_1 = ($7_1 | 0) > (57 | 0) ? $6_1 + -87 | 0 : $12_1;
       label$25 : {
        label$26 : {
         i64toi32_i32$5 = $19$hi;
         i64toi32_i32$0 = $19_1;
         i64toi32_i32$2 = 0;
         i64toi32_i32$3 = 7;
         if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
          $106_1 = 1
         } else {
          if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
           if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
            $107_1 = 0
           } else {
            $107_1 = 1
           }
           $108_1 = $107_1;
          } else {
           $108_1 = 0
          }
          $106_1 = $108_1;
         }
         if ($106_1) {
          break label$26
         }
         $9_1 = $7_1 + ($9_1 << 4 | 0) | 0;
         break label$25;
        }
        label$27 : {
         i64toi32_i32$0 = $19$hi;
         i64toi32_i32$3 = $19_1;
         i64toi32_i32$5 = 0;
         i64toi32_i32$2 = 28;
         if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
          break label$27
         }
         $1862($5_1 + 48 | 0 | 0, $7_1 | 0);
         i64toi32_i32$3 = $17$hi;
         i64toi32_i32$3 = $14$hi;
         i64toi32_i32$3 = $17$hi;
         i64toi32_i32$0 = $14$hi;
         i64toi32_i32$2 = 0;
         i64toi32_i32$5 = 1073414144;
         $1838($5_1 + 32 | 0 | 0, $17_1 | 0, i64toi32_i32$3 | 0, $14_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
         i64toi32_i32$0 = $5_1;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
         $125_1 = i64toi32_i32$5;
         $125$hi = i64toi32_i32$2;
         i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
         i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
         $129_1 = i64toi32_i32$2;
         $129$hi = i64toi32_i32$5;
         i64toi32_i32$0 = $5_1;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
         $17_1 = i64toi32_i32$5;
         $17$hi = i64toi32_i32$2;
         i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
         i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
         $14_1 = i64toi32_i32$2;
         $14$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $125$hi;
         i64toi32_i32$2 = $129$hi;
         i64toi32_i32$0 = $17$hi;
         i64toi32_i32$3 = $14$hi;
         $1838($5_1 + 16 | 0 | 0, $125_1 | 0, i64toi32_i32$5 | 0, $129_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
         i64toi32_i32$2 = $5_1;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
         $140_1 = i64toi32_i32$3;
         $140$hi = i64toi32_i32$0;
         i64toi32_i32$2 = (i64toi32_i32$2 + 16 | 0) + 8 | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $144_1 = i64toi32_i32$0;
         $144$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $15$hi;
         i64toi32_i32$3 = $16$hi;
         i64toi32_i32$3 = $140$hi;
         i64toi32_i32$0 = $144$hi;
         i64toi32_i32$2 = $15$hi;
         i64toi32_i32$5 = $16$hi;
         $1858($5_1 | 0, $140_1 | 0, i64toi32_i32$3 | 0, $144_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$2 | 0, $16_1 | 0, i64toi32_i32$5 | 0);
         i64toi32_i32$0 = $5_1 + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
         $16_1 = i64toi32_i32$5;
         $16$hi = i64toi32_i32$2;
         i64toi32_i32$0 = $5_1;
         i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
         $15_1 = i64toi32_i32$2;
         $15$hi = i64toi32_i32$5;
         break label$25;
        }
        if (!$7_1) {
         break label$25
        }
        if ($10_1) {
         break label$25
        }
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$5 = $14$hi;
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$2 = $14$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 1073610752;
        $1838($5_1 + 80 | 0 | 0, $17_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
        $162_1 = i64toi32_i32$3;
        $162$hi = i64toi32_i32$0;
        i64toi32_i32$2 = (i64toi32_i32$2 + 80 | 0) + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $166_1 = i64toi32_i32$0;
        $166$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $15$hi;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$3 = $162$hi;
        i64toi32_i32$0 = $166$hi;
        i64toi32_i32$2 = $15$hi;
        i64toi32_i32$5 = $16$hi;
        $1858($5_1 + 64 | 0 | 0, $162_1 | 0, i64toi32_i32$3 | 0, $166_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$2 | 0, $16_1 | 0, i64toi32_i32$5 | 0);
        i64toi32_i32$0 = ($5_1 + 64 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$5;
        $16$hi = i64toi32_i32$2;
        $10_1 = 1;
        i64toi32_i32$0 = $5_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
        $15_1 = i64toi32_i32$2;
        $15$hi = i64toi32_i32$5;
       }
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$0 = $19_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 1;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $19_1 = i64toi32_i32$1;
       $19$hi = i64toi32_i32$4;
       $8_1 = 1;
      }
      label$28 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$28
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$21;
      }
      $7_1 = $1957($1_1 | 0) | 0;
      continue label$21;
     };
    }
    $6_1 = 0;
    continue label$5;
   };
  }
  label$29 : {
   label$30 : {
    if ($8_1) {
     break label$30
    }
    label$31 : {
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
      $109_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
       if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $110_1 = 0
       } else {
        $110_1 = 1
       }
       $111_1 = $110_1;
      } else {
       $111_1 = 0
      }
      $109_1 = $111_1;
     }
     if ($109_1) {
      break label$31
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$5 = 0;
    $1956($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
    $1863($5_1 + 96 | 0 | 0, +(+($4_1 | 0) * 0.0));
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$0;
    $15$hi = i64toi32_i32$5;
    break label$29;
   }
   label$32 : {
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$3 = $19_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 7;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $112_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0) {
       $113_1 = 0
      } else {
       $113_1 = 1
      }
      $114_1 = $113_1;
     } else {
      $114_1 = 0
     }
     $112_1 = $114_1;
    }
    if ($112_1) {
     break label$32
    }
    i64toi32_i32$3 = $19$hi;
    $14_1 = $19_1;
    $14$hi = i64toi32_i32$3;
    label$33 : while (1) {
     $9_1 = $9_1 << 4 | 0;
     i64toi32_i32$3 = $14$hi;
     i64toi32_i32$4 = $14_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $14_1 = i64toi32_i32$2;
     $14$hi = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 8;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
      continue label$33
     }
     break label$33;
    };
   }
   label$34 : {
    label$35 : {
     if (($13_1 & -33 | 0 | 0) != (80 | 0)) {
      break label$35
     }
     i64toi32_i32$3 = $1968($1_1 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $14_1 = i64toi32_i32$3;
     $14$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$3 = -2147483648;
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$34
     }
     i64toi32_i32$0 = 0;
     $15_1 = 0;
     $15$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1956($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
     i64toi32_i32$0 = 0;
     $19_1 = 0;
     $19$hi = i64toi32_i32$0;
     break label$29;
    }
    i64toi32_i32$0 = 0;
    $14_1 = 0;
    $14$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $115_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $116_1 = 0
      } else {
       $116_1 = 1
      }
      $117_1 = $116_1;
     } else {
      $117_1 = 0
     }
     $115_1 = $117_1;
    }
    if ($115_1) {
     break label$34
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   label$36 : {
    if ($9_1) {
     break label$36
    }
    $1863($5_1 + 112 | 0 | 0, +(+($4_1 | 0) * 0.0));
    i64toi32_i32$3 = $5_1 + 120 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$1;
    $15$hi = i64toi32_i32$4;
    break label$29;
   }
   label$37 : {
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$5 = $11_1;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$0 = i64toi32_i32$5 ? $18_1 : $19_1;
    i64toi32_i32$3 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$1;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 2;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $118_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $118_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $248$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$0 = $248$hi;
    i64toi32_i32$3 = $118_1;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$1 = $14_1;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = -32;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $255$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$0 = $255$hi;
    i64toi32_i32$1 = 0 - $3_1 | 0;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
     $119_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
       $120_1 = 0
      } else {
       $120_1 = 1
      }
      $121_1 = $120_1;
     } else {
      $121_1 = 0
     }
     $119_1 = $121_1;
    }
    if ($119_1) {
     break label$37
    }
    HEAP32[($1882() | 0) >> 2] = 68;
    $1862($5_1 + 160 | 0 | 0, $4_1 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$2 = HEAP32[($5_1 + 160 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($5_1 + 164 | 0) >> 2] | 0;
    $264_1 = i64toi32_i32$2;
    $264$hi = i64toi32_i32$4;
    i64toi32_i32$1 = ($5_1 + 160 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $268_1 = i64toi32_i32$4;
    $268$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $264$hi;
    i64toi32_i32$4 = $268$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = 2147418111;
    $1838($5_1 + 144 | 0 | 0, $264_1 | 0, i64toi32_i32$2 | 0, $268_1 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 144 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 148 | 0) >> 2] | 0;
    $272_1 = i64toi32_i32$0;
    $272$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 144 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $276_1 = i64toi32_i32$1;
    $276$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $272$hi;
    i64toi32_i32$1 = $276$hi;
    i64toi32_i32$4 = -1;
    i64toi32_i32$2 = 2147418111;
    $1838($5_1 + 128 | 0 | 0, $272_1 | 0, i64toi32_i32$0 | 0, $276_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$1 = ($5_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = HEAP32[($5_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($5_1 + 132 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$4;
    $15$hi = i64toi32_i32$2;
    break label$29;
   }
   label$38 : {
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$4 = $3_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
    $286_1 = i64toi32_i32$4;
    $286$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$1 = $19_1;
    i64toi32_i32$4 = $286$hi;
    i64toi32_i32$0 = $286_1;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$4 | 0)) {
     $122_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0) {
       $123_1 = 0
      } else {
       $123_1 = 1
      }
      $124_1 = $123_1;
     } else {
      $124_1 = 0
     }
     $122_1 = $124_1;
    }
    if ($122_1) {
     break label$38
    }
    label$39 : {
     if (($9_1 | 0) <= (-1 | 0)) {
      break label$39
     }
     label$40 : while (1) {
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = -1073807360;
      $1858($5_1 + 416 | 0 | 0, $15_1 | 0, i64toi32_i32$1 | 0, $16_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 1073610752;
      $7_1 = $1834($15_1 | 0, i64toi32_i32$4 | 0, $16_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 416 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 420 | 0) >> 2] | 0;
      $303_1 = i64toi32_i32$1;
      $303$hi = i64toi32_i32$2;
      $1_1 = ($7_1 | 0) < (0 | 0);
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$1 = $303$hi;
      i64toi32_i32$4 = i64toi32_i32$3 ? $15_1 : $303_1;
      i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$1;
      $307_1 = i64toi32_i32$4;
      $307$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = ($5_1 + 416 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $312_1 = i64toi32_i32$0;
      $312$hi = i64toi32_i32$4;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$0 = $312$hi;
      i64toi32_i32$1 = i64toi32_i32$2 ? $16_1 : $312_1;
      i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
      $314_1 = i64toi32_i32$1;
      $314$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $307$hi;
      i64toi32_i32$0 = $314$hi;
      $1858($5_1 + 400 | 0 | 0, $15_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$4 | 0, $307_1 | 0, i64toi32_i32$2 | 0, $314_1 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$1 = $19_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$5;
      i64toi32_i32$0 = ($5_1 + 400 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$5;
      $16$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 400 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 404 | 0) >> 2] | 0;
      $15_1 = i64toi32_i32$1;
      $15$hi = i64toi32_i32$5;
      $9_1 = $9_1 << 1 | 0 | ($7_1 | 0) > (-1 | 0) | 0;
      if (($9_1 | 0) > (-1 | 0)) {
       continue label$40
      }
      break label$40;
     };
    }
    label$41 : {
     label$42 : {
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $332$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$1 = $332$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
      i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$2;
      $7_1 = i64toi32_i32$1;
      $340_1 = (i64toi32_i32$1 | 0) > (0 | 0) ? i64toi32_i32$1 : 0;
      $341_1 = $2_1;
      i64toi32_i32$2 = 0;
      $344$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$5 = $344$hi;
      i64toi32_i32$3 = $2_1;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
       $126_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $127_1 = 0
        } else {
         $127_1 = 1
        }
        $128_1 = $127_1;
       } else {
        $128_1 = 0
       }
       $126_1 = $128_1;
      }
      $7_1 = $126_1 ? $340_1 : $341_1;
      if (($7_1 | 0) < (113 | 0)) {
       break label$42
      }
      $1862($5_1 + 384 | 0 | 0, $4_1 | 0);
      i64toi32_i32$3 = $5_1 + 392 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$4;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $14_1 = 0;
      $14$hi = i64toi32_i32$2;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 384 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 388 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$2;
      $17$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $20_1 = 0;
      $20$hi = i64toi32_i32$4;
      break label$41;
     }
     $1863($5_1 + 352 | 0 | 0, +(+$1820(+(1.0), 144 - $7_1 | 0 | 0)));
     $1862($5_1 + 336 | 0 | 0, $4_1 | 0);
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 352 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 356 | 0) >> 2] | 0;
     $368_1 = i64toi32_i32$4;
     $368$hi = i64toi32_i32$2;
     i64toi32_i32$3 = (i64toi32_i32$3 + 352 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $372_1 = i64toi32_i32$2;
     $372$hi = i64toi32_i32$4;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 336 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 340 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$4;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$3 = (i64toi32_i32$3 + 336 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$2;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $368$hi;
     i64toi32_i32$2 = $372$hi;
     i64toi32_i32$3 = $17$hi;
     i64toi32_i32$5 = $18$hi;
     $1962($5_1 + 368 | 0 | 0, $368_1 | 0, i64toi32_i32$4 | 0, $372_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$3 | 0, $18_1 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$2 = ($5_1 + 368 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 368 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 372 | 0) >> 2] | 0;
     $14_1 = i64toi32_i32$3;
     $14$hi = i64toi32_i32$5;
    }
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 0;
    $7_1 = (($7_1 | 0) < (32 | 0) & ($1833($15_1 | 0, i64toi32_i32$5 | 0, $16_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0 | 0) != (0 | 0) | 0) & !($9_1 & 1 | 0) | 0;
    $1864($5_1 + 320 | 0 | 0, $9_1 + $7_1 | 0 | 0);
    i64toi32_i32$4 = $17$hi;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
    $408_1 = i64toi32_i32$4;
    $408$hi = i64toi32_i32$2;
    i64toi32_i32$3 = (i64toi32_i32$3 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $412_1 = i64toi32_i32$2;
    $412$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $17$hi;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$3 = $408$hi;
    i64toi32_i32$5 = $412$hi;
    $1838($5_1 + 304 | 0 | 0, $17_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $408_1 | 0, i64toi32_i32$3 | 0, $412_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 304 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 308 | 0) >> 2] | 0;
    $416_1 = i64toi32_i32$5;
    $416$hi = i64toi32_i32$3;
    i64toi32_i32$2 = (i64toi32_i32$2 + 304 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $420_1 = i64toi32_i32$3;
    $420$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = $416$hi;
    i64toi32_i32$3 = $420$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$4 = $20$hi;
    $1858($5_1 + 272 | 0 | 0, $416_1 | 0, i64toi32_i32$5 | 0, $420_1 | 0, i64toi32_i32$3 | 0, $14_1 | 0, i64toi32_i32$2 | 0, $20_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $17$hi;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = $15$hi;
    i64toi32_i32$5 = i64toi32_i32$0 ? 0 : $15_1;
    i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$2;
    $429_1 = i64toi32_i32$5;
    $429$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$2 = i64toi32_i32$0 ? 0 : $16_1;
    i64toi32_i32$0 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$5;
    $432_1 = i64toi32_i32$2;
    $432$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$4 = $429$hi;
    i64toi32_i32$5 = $432$hi;
    $1838($5_1 + 288 | 0 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $429_1 | 0, i64toi32_i32$4 | 0, $432_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 288 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 292 | 0) >> 2] | 0;
    $436_1 = i64toi32_i32$5;
    $436$hi = i64toi32_i32$4;
    i64toi32_i32$2 = (i64toi32_i32$2 + 288 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $440_1 = i64toi32_i32$4;
    $440$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 272 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 276 | 0) >> 2] | 0;
    $442_1 = i64toi32_i32$5;
    $442$hi = i64toi32_i32$4;
    i64toi32_i32$2 = (i64toi32_i32$2 + 272 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $446_1 = i64toi32_i32$4;
    $446$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $436$hi;
    i64toi32_i32$4 = $440$hi;
    i64toi32_i32$2 = $442$hi;
    i64toi32_i32$0 = $446$hi;
    $1858($5_1 + 256 | 0 | 0, $436_1 | 0, i64toi32_i32$5 | 0, $440_1 | 0, i64toi32_i32$4 | 0, $442_1 | 0, i64toi32_i32$2 | 0, $446_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 256 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 260 | 0) >> 2] | 0;
    $450_1 = i64toi32_i32$0;
    $450$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 256 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $454_1 = i64toi32_i32$2;
    $454$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$0 = $20$hi;
    i64toi32_i32$0 = $450$hi;
    i64toi32_i32$2 = $454$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$5 = $20$hi;
    $1859($5_1 + 240 | 0 | 0, $450_1 | 0, i64toi32_i32$0 | 0, $454_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
    label$43 : {
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 240 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 244 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$5;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$2 = (i64toi32_i32$2 + 240 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$4;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ($1833($15_1 | 0, i64toi32_i32$5 | 0, $16_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0) {
      break label$43
     }
     HEAP32[($1882() | 0) >> 2] = 68;
    }
    i64toi32_i32$0 = $15$hi;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$0 = $15$hi;
    i64toi32_i32$2 = $16$hi;
    $1963($5_1 + 224 | 0 | 0, $15_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $19_1 | 0);
    i64toi32_i32$4 = ($5_1 + 224 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 224 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 228 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$0;
    $15$hi = i64toi32_i32$2;
    break label$29;
   }
   HEAP32[($1882() | 0) >> 2] = 68;
   $1862($5_1 + 208 | 0 | 0, $4_1 | 0);
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 208 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 212 | 0) >> 2] | 0;
   $486_1 = i64toi32_i32$2;
   $486$hi = i64toi32_i32$0;
   i64toi32_i32$4 = (i64toi32_i32$4 + 208 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $490_1 = i64toi32_i32$0;
   $490$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $486$hi;
   i64toi32_i32$0 = $490$hi;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 65536;
   $1838($5_1 + 192 | 0 | 0, $486_1 | 0, i64toi32_i32$2 | 0, $490_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 192 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 196 | 0) >> 2] | 0;
   $494_1 = i64toi32_i32$5;
   $494$hi = i64toi32_i32$4;
   i64toi32_i32$0 = (i64toi32_i32$0 + 192 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $498_1 = i64toi32_i32$4;
   $498$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $494$hi;
   i64toi32_i32$4 = $498$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 65536;
   $1838($5_1 + 176 | 0 | 0, $494_1 | 0, i64toi32_i32$5 | 0, $498_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$4 = ($5_1 + 176 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$2;
   $19$hi = i64toi32_i32$0;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
   $15_1 = i64toi32_i32$0;
   $15$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $15$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $15_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $19$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  global$0 = $5_1 + 432 | 0;
 }
 
 function $1967($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $18$hi = 0, $18_1 = 0, $13_1 = 0, $19$hi = 0, i64toi32_i32$4 = 0, $12_1 = 0, $7_1 = 0, $19_1 = 0, $10_1 = 0, $14_1 = 0, $21$hi = 0, $15_1 = 0, $20$hi = 0, $21_1 = 0, $11_1 = 0, $20_1 = 0, $8_1 = 0, $16_1 = 0, $22$hi = 0, $23$hi = 0, $22_1 = 0, $23_1 = 0, $9_1 = 0, $168_1 = 0, $169_1 = 0, $170_1 = 0, $171_1 = 0, $172_1 = 0, $173_1 = 0, $174_1 = 0, $175_1 = 0, $176_1 = 0, $177_1 = 0, $178_1 = 0, $179_1 = 0, $180_1 = 0, $17_1 = 0, $24_1 = 0.0, $126_1 = 0, $223_1 = 0, $223$hi = 0, $227_1 = 0, $227$hi = 0, $229_1 = 0, $229$hi = 0, $233_1 = 0, $233$hi = 0, $243$hi = 0, $252_1 = 0, $252$hi = 0, $256_1 = 0, $256$hi = 0, $260_1 = 0, $260$hi = 0, $264_1 = 0, $264$hi = 0, $274_1 = 0, $274$hi = 0, $283_1 = 0, $283$hi = 0, $287_1 = 0, $287$hi = 0, $291_1 = 0, $291$hi = 0, $295_1 = 0, $295$hi = 0, $344_1 = 0, $344$hi = 0, $348_1 = 0, $348$hi = 0, $350_1 = 0, $350$hi = 0, $354_1 = 0, $354$hi = 0, $373_1 = 0, $373$hi = 0, $377_1 = 0, $377$hi = 0, $379_1 = 0, $379$hi = 0, $383_1 = 0, $383$hi = 0, $394_1 = 0, $394$hi = 0, $398_1 = 0, $398$hi = 0, $400_1 = 0, $400$hi = 0, $404_1 = 0, $404$hi = 0, $432_1 = 0, $432$hi = 0, $436_1 = 0, $436$hi = 0, $438_1 = 0, $438$hi = 0, $442_1 = 0, $442$hi = 0, $452_1 = 0, $452$hi = 0, $456_1 = 0, $456$hi = 0, $458_1 = 0, $458$hi = 0, $462_1 = 0, $462$hi = 0, $501_1 = 0, $579$hi = 0, $581$hi = 0, $588$hi = 0, $635_1 = 0, $637_1 = 0, $731_1 = 0, $731$hi = 0, $735_1 = 0, $735$hi = 0, $737_1 = 0, $737$hi = 0, $741_1 = 0, $741$hi = 0, $760_1 = 0, $760$hi = 0, $764_1 = 0, $764$hi = 0, $806_1 = 0, $867_1 = 0, $867$hi = 0, $871_1 = 0, $871$hi = 0, $890_1 = 0, $890$hi = 0, $894_1 = 0, $894$hi = 0, $912_1 = 0, $912$hi = 0, $916_1 = 0, $916$hi = 0, $953_1 = 0, $953$hi = 0, $957_1 = 0, $957$hi = 0, $976_1 = 0, $976$hi = 0, $980_1 = 0, $980$hi = 0, $1003_1 = 0, $1003$hi = 0, $1007_1 = 0, $1007$hi = 0, $1023_1 = 0, $1023$hi = 0, $1027_1 = 0, $1027$hi = 0, $1041_1 = 0, $1041$hi = 0, $1045_1 = 0, $1045$hi = 0, $1066_1 = 0, $1066$hi = 0, $1070_1 = 0, $1070$hi = 0, $1093_1 = 0, $1093$hi = 0, $1097_1 = 0, $1097$hi = 0, $1103_1 = 0, $1103$hi = 0, $1110_1 = 0, $1110$hi = 0;
  $6_1 = global$0 - 8976 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  $8_1 = 0 - $4_1 | 0;
  $9_1 = $8_1 - $3_1 | 0;
  i64toi32_i32$0 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$0;
  $10_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2_1 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2_1 | 0) != (46 | 0)) {
        break label$1
       }
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$3
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       $10_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       continue label$4;
      }
      $10_1 = 1;
      $2_1 = $1957($1_1 | 0) | 0;
      continue label$4;
     };
    }
    $2_1 = $1957($1_1 | 0) | 0;
   }
   $7_1 = 1;
   i64toi32_i32$0 = 0;
   $18_1 = 0;
   $18$hi = i64toi32_i32$0;
   if (($2_1 | 0) != (48 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$9
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$8;
     }
     $2_1 = $1957($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$2 = $18_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    if (($2_1 | 0) == (48 | 0)) {
     continue label$7
    }
    break label$7;
   };
   $10_1 = 1;
   $7_1 = 1;
  }
  $11_1 = 0;
  HEAP32[($6_1 + 784 | 0) >> 2] = 0;
  $12_1 = $2_1 + -48 | 0;
  label$10 : {
   label$11 : {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         label$17 : {
          $13_1 = ($2_1 | 0) == (46 | 0);
          if ($13_1) {
           break label$17
          }
          i64toi32_i32$5 = 0;
          $19_1 = 0;
          $19$hi = i64toi32_i32$5;
          if ($12_1 >>> 0 <= 9 >>> 0) {
           break label$17
          }
          $14_1 = 0;
          $15_1 = 0;
          break label$16;
         }
         i64toi32_i32$5 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$5;
         $15_1 = 0;
         $14_1 = 0;
         $11_1 = 0;
         label$18 : while (1) {
          label$19 : {
           label$20 : {
            if (!($13_1 & 1 | 0)) {
             break label$20
            }
            label$21 : {
             if ($7_1) {
              break label$21
             }
             i64toi32_i32$5 = $19$hi;
             $18_1 = $19_1;
             $18$hi = i64toi32_i32$5;
             $7_1 = 1;
             break label$19;
            }
            $13_1 = !$10_1;
            break label$15;
           }
           i64toi32_i32$5 = $19$hi;
           i64toi32_i32$0 = $19_1;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 1;
           i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           $19_1 = i64toi32_i32$1;
           $19$hi = i64toi32_i32$4;
           label$22 : {
            if (($14_1 | 0) > (2044 | 0)) {
             break label$22
            }
            $10_1 = ($2_1 | 0) == (48 | 0);
            i64toi32_i32$4 = $19$hi;
            $16_1 = $19_1;
            $13_1 = ($6_1 + 784 | 0) + ($14_1 << 2 | 0) | 0;
            label$23 : {
             if (!$15_1) {
              break label$23
             }
             $12_1 = ($2_1 + Math_imul(HEAP32[$13_1 >> 2] | 0, 10) | 0) + -48 | 0;
            }
            $11_1 = $10_1 ? $11_1 : $16_1;
            HEAP32[$13_1 >> 2] = $12_1;
            $10_1 = 1;
            $2_1 = $15_1 + 1 | 0;
            $126_1 = $2_1;
            $2_1 = ($2_1 | 0) == (9 | 0);
            $15_1 = $2_1 ? 0 : $126_1;
            $14_1 = $14_1 + $2_1 | 0;
            break label$19;
           }
           if (($2_1 | 0) == (48 | 0)) {
            break label$19
           }
           HEAP32[($6_1 + 8960 | 0) >> 2] = HEAP32[($6_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
           $11_1 = 18396;
          }
          label$24 : {
           label$25 : {
            $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
             break label$25
            }
            HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
            $2_1 = HEAPU8[$2_1 >> 0] | 0;
            break label$24;
           }
           $2_1 = $1957($1_1 | 0) | 0;
          }
          $12_1 = $2_1 + -48 | 0;
          $13_1 = ($2_1 | 0) == (46 | 0);
          if ($13_1) {
           continue label$18
          }
          if ($12_1 >>> 0 < 10 >>> 0) {
           continue label$18
          }
          break label$18;
         };
        }
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$2 = $7_1;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$3 = i64toi32_i32$2 ? $18_1 : $19_1;
        i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
        $18_1 = i64toi32_i32$3;
        $18$hi = i64toi32_i32$5;
        label$26 : {
         if (!$10_1) {
          break label$26
         }
         if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
          break label$26
         }
         i64toi32_i32$5 = $1968($1_1 | 0) | 0;
         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
         $20_1 = i64toi32_i32$5;
         $20$hi = i64toi32_i32$3;
         i64toi32_i32$2 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$0 = 0;
         if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) | 0) {
          break label$11
         }
         if (!$10_1) {
          break label$13
         }
         i64toi32_i32$2 = $20$hi;
         i64toi32_i32$2 = $18$hi;
         i64toi32_i32$2 = $20$hi;
         i64toi32_i32$0 = $20_1;
         i64toi32_i32$3 = $18$hi;
         i64toi32_i32$5 = $18_1;
         i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
         i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
         }
         $18_1 = i64toi32_i32$4;
         $18$hi = i64toi32_i32$1;
         break label$12;
        }
        $13_1 = !$10_1;
        if (($2_1 | 0) < (0 | 0)) {
         break label$14
        }
       }
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$5 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $168_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$5 >>> 0) {
          $169_1 = 0
         } else {
          $169_1 = 1
         }
         $170_1 = $169_1;
        } else {
         $170_1 = 0
        }
        $168_1 = $170_1;
       }
       if ($168_1) {
        break label$14
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      if (!$13_1) {
       break label$12
      }
     }
     HEAP32[($1882() | 0) >> 2] = 28;
     break label$11;
    }
    label$27 : {
     $1_1 = HEAP32[($6_1 + 784 | 0) >> 2] | 0;
     if ($1_1) {
      break label$27
     }
     $1863($6_1 | 0, +(+($5_1 | 0) * 0.0));
     i64toi32_i32$5 = $6_1 + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$0;
     $18$hi = i64toi32_i32$2;
     break label$10;
    }
    label$28 : {
     i64toi32_i32$2 = $19$hi;
     i64toi32_i32$5 = $19_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 9;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
      $171_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$1 >>> 0) {
        $172_1 = 0
       } else {
        $172_1 = 1
       }
       $173_1 = $172_1;
      } else {
       $173_1 = 0
      }
      $171_1 = $173_1;
     }
     if ($171_1) {
      break label$28
     }
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$2 = $19$hi;
     i64toi32_i32$0 = $19_1;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$28
     }
     label$29 : {
      if (($3_1 | 0) > (30 | 0)) {
       break label$29
      }
      if ($1_1 >>> $3_1 | 0) {
       break label$28
      }
     }
     $1862($6_1 + 48 | 0 | 0, $5_1 | 0);
     $1864($6_1 + 32 | 0 | 0, $1_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
     $223_1 = i64toi32_i32$1;
     $223$hi = i64toi32_i32$5;
     i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $227_1 = i64toi32_i32$5;
     $227$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $229_1 = i64toi32_i32$1;
     $229$hi = i64toi32_i32$5;
     i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $233_1 = i64toi32_i32$5;
     $233$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $223$hi;
     i64toi32_i32$5 = $227$hi;
     i64toi32_i32$0 = $229$hi;
     i64toi32_i32$2 = $233$hi;
     $1838($6_1 + 16 | 0 | 0, $223_1 | 0, i64toi32_i32$1 | 0, $227_1 | 0, i64toi32_i32$5 | 0, $229_1 | 0, i64toi32_i32$0 | 0, $233_1 | 0, i64toi32_i32$2 | 0);
     i64toi32_i32$5 = ($6_1 + 16 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$0 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$0;
     $18$hi = i64toi32_i32$2;
     break label$10;
    }
    label$30 : {
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = 0;
     $243$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$5 = $18_1;
     i64toi32_i32$0 = $243$hi;
     i64toi32_i32$1 = $8_1 >>> 1 | 0;
     if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
      $174_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0) {
        $175_1 = 0
       } else {
        $175_1 = 1
       }
       $176_1 = $175_1;
      } else {
       $176_1 = 0
      }
      $174_1 = $176_1;
     }
     if ($174_1) {
      break label$30
     }
     HEAP32[($1882() | 0) >> 2] = 68;
     $1862($6_1 + 96 | 0 | 0, $5_1 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$5 = HEAP32[($6_1 + 96 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($6_1 + 100 | 0) >> 2] | 0;
     $252_1 = i64toi32_i32$5;
     $252$hi = i64toi32_i32$2;
     i64toi32_i32$1 = ($6_1 + 96 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $256_1 = i64toi32_i32$2;
     $256$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $252$hi;
     i64toi32_i32$2 = $256$hi;
     i64toi32_i32$1 = -1;
     i64toi32_i32$0 = 2147418111;
     $1838($6_1 + 80 | 0 | 0, $252_1 | 0, i64toi32_i32$5 | 0, $256_1 | 0, i64toi32_i32$2 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0);
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$0 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
     $260_1 = i64toi32_i32$0;
     $260$hi = i64toi32_i32$1;
     i64toi32_i32$2 = ($6_1 + 80 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $264_1 = i64toi32_i32$1;
     $264$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $260$hi;
     i64toi32_i32$1 = $264$hi;
     i64toi32_i32$2 = -1;
     i64toi32_i32$5 = 2147418111;
     $1838($6_1 + 64 | 0 | 0, $260_1 | 0, i64toi32_i32$0 | 0, $264_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0, -1 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$1 = ($6_1 + 64 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$5;
     $19$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$2 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$2;
     $18$hi = i64toi32_i32$5;
     break label$10;
    }
    label$31 : {
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$2 = $4_1 + -226 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $274_1 = i64toi32_i32$2;
     $274$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$2 = $274$hi;
     i64toi32_i32$0 = $274_1;
     if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
      $177_1 = 1
     } else {
      if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
        $178_1 = 0
       } else {
        $178_1 = 1
       }
       $179_1 = $178_1;
      } else {
       $179_1 = 0
      }
      $177_1 = $179_1;
     }
     if ($177_1) {
      break label$31
     }
     HEAP32[($1882() | 0) >> 2] = 68;
     $1862($6_1 + 144 | 0 | 0, $5_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] | 0;
     $283_1 = i64toi32_i32$1;
     $283$hi = i64toi32_i32$5;
     i64toi32_i32$0 = (i64toi32_i32$0 + 144 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $287_1 = i64toi32_i32$5;
     $287$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $283$hi;
     i64toi32_i32$5 = $287$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 65536;
     $1838($6_1 + 128 | 0 | 0, $283_1 | 0, i64toi32_i32$1 | 0, $287_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$2 = HEAP32[($6_1 + 128 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($6_1 + 132 | 0) >> 2] | 0;
     $291_1 = i64toi32_i32$2;
     $291$hi = i64toi32_i32$0;
     i64toi32_i32$5 = ($6_1 + 128 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $295_1 = i64toi32_i32$0;
     $295$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $291$hi;
     i64toi32_i32$0 = $295$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 65536;
     $1838($6_1 + 112 | 0 | 0, $291_1 | 0, i64toi32_i32$2 | 0, $295_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$0 = ($6_1 + 112 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$5;
     $18$hi = i64toi32_i32$1;
     break label$10;
    }
    label$32 : {
     if (!$15_1) {
      break label$32
     }
     label$33 : {
      if (($15_1 | 0) > (8 | 0)) {
       break label$33
      }
      $2_1 = ($6_1 + 784 | 0) + ($14_1 << 2 | 0) | 0;
      $1_1 = HEAP32[$2_1 >> 2] | 0;
      label$34 : while (1) {
       $1_1 = Math_imul($1_1, 10);
       $15_1 = $15_1 + 1 | 0;
       if (($15_1 | 0) != (9 | 0)) {
        continue label$34
       }
       break label$34;
      };
      HEAP32[$2_1 >> 2] = $1_1;
     }
     $14_1 = $14_1 + 1 | 0;
    }
    i64toi32_i32$1 = $18$hi;
    $7_1 = $18_1;
    label$35 : {
     if (($11_1 | 0) > (8 | 0)) {
      break label$35
     }
     if (($11_1 | 0) > ($7_1 | 0)) {
      break label$35
     }
     if (($7_1 | 0) > (17 | 0)) {
      break label$35
     }
     label$36 : {
      if (($7_1 | 0) != (9 | 0)) {
       break label$36
      }
      $1862($6_1 + 192 | 0 | 0, $5_1 | 0);
      $1864($6_1 + 176 | 0 | 0, HEAP32[($6_1 + 784 | 0) >> 2] | 0 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 192 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 196 | 0) >> 2] | 0;
      $344_1 = i64toi32_i32$1;
      $344$hi = i64toi32_i32$5;
      i64toi32_i32$0 = (i64toi32_i32$0 + 192 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $348_1 = i64toi32_i32$5;
      $348$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] | 0;
      $350_1 = i64toi32_i32$1;
      $350$hi = i64toi32_i32$5;
      i64toi32_i32$0 = (i64toi32_i32$0 + 176 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $354_1 = i64toi32_i32$5;
      $354$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $344$hi;
      i64toi32_i32$5 = $348$hi;
      i64toi32_i32$0 = $350$hi;
      i64toi32_i32$2 = $354$hi;
      $1838($6_1 + 160 | 0 | 0, $344_1 | 0, i64toi32_i32$1 | 0, $348_1 | 0, i64toi32_i32$5 | 0, $350_1 | 0, i64toi32_i32$0 | 0, $354_1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$5 = ($6_1 + 160 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$0 = HEAP32[($6_1 + 160 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($6_1 + 164 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$2;
      break label$10;
     }
     label$37 : {
      if (($7_1 | 0) > (8 | 0)) {
       break label$37
      }
      $1862($6_1 + 272 | 0 | 0, $5_1 | 0);
      $1864($6_1 + 256 | 0 | 0, HEAP32[($6_1 + 784 | 0) >> 2] | 0 | 0);
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$2 = HEAP32[($6_1 + 272 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 276 | 0) >> 2] | 0;
      $373_1 = i64toi32_i32$2;
      $373$hi = i64toi32_i32$0;
      i64toi32_i32$5 = ($6_1 + 272 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $377_1 = i64toi32_i32$0;
      $377$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$2 = HEAP32[($6_1 + 256 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 260 | 0) >> 2] | 0;
      $379_1 = i64toi32_i32$2;
      $379$hi = i64toi32_i32$0;
      i64toi32_i32$5 = ($6_1 + 256 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $383_1 = i64toi32_i32$0;
      $383$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $373$hi;
      i64toi32_i32$0 = $377$hi;
      i64toi32_i32$5 = $379$hi;
      i64toi32_i32$1 = $383$hi;
      $1838($6_1 + 240 | 0 | 0, $373_1 | 0, i64toi32_i32$2 | 0, $377_1 | 0, i64toi32_i32$0 | 0, $379_1 | 0, i64toi32_i32$5 | 0, $383_1 | 0, i64toi32_i32$1 | 0);
      $1862($6_1 + 224 | 0 | 0, HEAP32[(((8 - $7_1 | 0) << 2 | 0) + 24704 | 0) >> 2] | 0 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 240 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 244 | 0) >> 2] | 0;
      $394_1 = i64toi32_i32$1;
      $394$hi = i64toi32_i32$5;
      i64toi32_i32$0 = (i64toi32_i32$0 + 240 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $398_1 = i64toi32_i32$5;
      $398$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 224 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 228 | 0) >> 2] | 0;
      $400_1 = i64toi32_i32$1;
      $400$hi = i64toi32_i32$5;
      i64toi32_i32$0 = (i64toi32_i32$0 + 224 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $404_1 = i64toi32_i32$5;
      $404$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $394$hi;
      i64toi32_i32$5 = $398$hi;
      i64toi32_i32$0 = $400$hi;
      i64toi32_i32$2 = $404$hi;
      $1836($6_1 + 208 | 0 | 0, $394_1 | 0, i64toi32_i32$1 | 0, $398_1 | 0, i64toi32_i32$5 | 0, $400_1 | 0, i64toi32_i32$0 | 0, $404_1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$5 = ($6_1 + 208 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$0 = HEAP32[($6_1 + 208 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($6_1 + 212 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$2;
      break label$10;
     }
     $1_1 = HEAP32[($6_1 + 784 | 0) >> 2] | 0;
     label$38 : {
      $2_1 = ($3_1 + Math_imul($7_1, -3) | 0) + 27 | 0;
      if (($2_1 | 0) > (30 | 0)) {
       break label$38
      }
      if ($1_1 >>> $2_1 | 0) {
       break label$35
      }
     }
     $1862($6_1 + 352 | 0 | 0, $5_1 | 0);
     $1864($6_1 + 336 | 0 | 0, $1_1 | 0);
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$2 = HEAP32[($6_1 + 352 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($6_1 + 356 | 0) >> 2] | 0;
     $432_1 = i64toi32_i32$2;
     $432$hi = i64toi32_i32$0;
     i64toi32_i32$5 = ($6_1 + 352 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $436_1 = i64toi32_i32$0;
     $436$hi = i64toi32_i32$2;
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$2 = HEAP32[($6_1 + 336 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($6_1 + 340 | 0) >> 2] | 0;
     $438_1 = i64toi32_i32$2;
     $438$hi = i64toi32_i32$0;
     i64toi32_i32$5 = ($6_1 + 336 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $442_1 = i64toi32_i32$0;
     $442$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $432$hi;
     i64toi32_i32$0 = $436$hi;
     i64toi32_i32$5 = $438$hi;
     i64toi32_i32$1 = $442$hi;
     $1838($6_1 + 320 | 0 | 0, $432_1 | 0, i64toi32_i32$2 | 0, $436_1 | 0, i64toi32_i32$0 | 0, $438_1 | 0, i64toi32_i32$5 | 0, $442_1 | 0, i64toi32_i32$1 | 0);
     $1862($6_1 + 304 | 0 | 0, HEAP32[(($7_1 << 2 | 0) + 24664 | 0) >> 2] | 0 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 320 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 324 | 0) >> 2] | 0;
     $452_1 = i64toi32_i32$1;
     $452$hi = i64toi32_i32$5;
     i64toi32_i32$0 = (i64toi32_i32$0 + 320 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $456_1 = i64toi32_i32$5;
     $456$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 304 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 308 | 0) >> 2] | 0;
     $458_1 = i64toi32_i32$1;
     $458$hi = i64toi32_i32$5;
     i64toi32_i32$0 = (i64toi32_i32$0 + 304 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $462_1 = i64toi32_i32$5;
     $462$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $452$hi;
     i64toi32_i32$5 = $456$hi;
     i64toi32_i32$0 = $458$hi;
     i64toi32_i32$2 = $462$hi;
     $1838($6_1 + 288 | 0 | 0, $452_1 | 0, i64toi32_i32$1 | 0, $456_1 | 0, i64toi32_i32$5 | 0, $458_1 | 0, i64toi32_i32$0 | 0, $462_1 | 0, i64toi32_i32$2 | 0);
     i64toi32_i32$5 = ($6_1 + 288 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$0 = HEAP32[($6_1 + 288 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($6_1 + 292 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$0;
     $18$hi = i64toi32_i32$2;
     break label$10;
    }
    label$39 : while (1) {
     $2_1 = $14_1;
     $14_1 = $2_1 + -1 | 0;
     if (!(HEAP32[(($6_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] | 0)) {
      continue label$39
     }
     break label$39;
    };
    label$40 : {
     label$41 : {
      $1_1 = ($7_1 | 0) % (9 | 0) | 0;
      if ($1_1) {
       break label$41
      }
      $15_1 = 0;
      $13_1 = 0;
      break label$40;
     }
     $15_1 = 0;
     $8_1 = ($7_1 | 0) < (0 | 0) ? $1_1 + 9 | 0 : $1_1;
     label$42 : {
      label$43 : {
       if ($2_1) {
        break label$43
       }
       $13_1 = 0;
       $2_1 = 0;
       break label$42;
      }
      $10_1 = HEAP32[(((8 - $8_1 | 0) << 2 | 0) + 24704 | 0) >> 2] | 0;
      $16_1 = (1e9 | 0) / ($10_1 | 0) | 0;
      $12_1 = 0;
      $1_1 = 0;
      $13_1 = 0;
      label$44 : while (1) {
       $14_1 = ($6_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
       $501_1 = $14_1;
       $14_1 = HEAP32[$14_1 >> 2] | 0;
       $11_1 = ($14_1 >>> 0) / ($10_1 >>> 0) | 0;
       $12_1 = $11_1 + $12_1 | 0;
       HEAP32[$501_1 >> 2] = $12_1;
       $12_1 = ($1_1 | 0) == ($13_1 | 0) & !$12_1 | 0;
       $13_1 = $12_1 ? ($13_1 + 1 | 0) & 2047 | 0 : $13_1;
       $7_1 = $12_1 ? $7_1 + -9 | 0 : $7_1;
       $12_1 = Math_imul($16_1, $14_1 - Math_imul($11_1, $10_1) | 0);
       $1_1 = $1_1 + 1 | 0;
       if (($1_1 | 0) != ($2_1 | 0)) {
        continue label$44
       }
       break label$44;
      };
      if (!$12_1) {
       break label$42
      }
      HEAP32[(($6_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $12_1;
      $2_1 = $2_1 + 1 | 0;
     }
     $7_1 = ($7_1 - $8_1 | 0) + 9 | 0;
    }
    label$45 : while (1) {
     $16_1 = ($6_1 + 784 | 0) + ($13_1 << 2 | 0) | 0;
     $11_1 = ($7_1 | 0) < (36 | 0);
     label$46 : {
      label$47 : while (1) {
       label$48 : {
        if ($11_1) {
         break label$48
        }
        if (($7_1 | 0) != (36 | 0)) {
         break label$46
        }
        if ((HEAP32[$16_1 >> 2] | 0) >>> 0 <= 10384592 >>> 0) {
         break label$48
        }
        $7_1 = 36;
        break label$46;
       }
       $10_1 = $2_1 + 2047 | 0;
       $12_1 = 0;
       label$49 : while (1) {
        label$50 : {
         label$51 : {
          $1_1 = $10_1 & 2047 | 0;
          $10_1 = ($6_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
          i64toi32_i32$2 = 0;
          i64toi32_i32$5 = HEAP32[$10_1 >> 2] | 0;
          i64toi32_i32$0 = 0;
          i64toi32_i32$1 = 29;
          i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
           i64toi32_i32$0 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
           $180_1 = 0;
          } else {
           i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
           $180_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
          }
          $579$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $581$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $579$hi;
          i64toi32_i32$2 = $180_1;
          i64toi32_i32$5 = $581$hi;
          i64toi32_i32$1 = $12_1;
          i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
          i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
          if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $18_1 = i64toi32_i32$3;
          $18$hi = i64toi32_i32$4;
          i64toi32_i32$0 = i64toi32_i32$3;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = 1000000001;
          if (i64toi32_i32$4 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
           break label$51
          }
          $12_1 = 0;
          break label$50;
         }
         i64toi32_i32$0 = $18$hi;
         i64toi32_i32$4 = 0;
         i64toi32_i32$4 = __wasm_i64_udiv($18_1 | 0, i64toi32_i32$0 | 0, 1e9 | 0, i64toi32_i32$4 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $19_1 = i64toi32_i32$4;
         $19$hi = i64toi32_i32$0;
         i64toi32_i32$4 = -1;
         i64toi32_i32$4 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$0 | 0, -1e9 | 0, i64toi32_i32$4 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $588$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $18$hi;
         i64toi32_i32$0 = $588$hi;
         i64toi32_i32$1 = i64toi32_i32$4;
         i64toi32_i32$4 = $18$hi;
         i64toi32_i32$2 = $18_1;
         i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
         i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
         if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
         }
         $18_1 = i64toi32_i32$5;
         $18$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $19$hi;
         $12_1 = $19_1;
        }
        i64toi32_i32$3 = $18$hi;
        $14_1 = $18_1;
        HEAP32[$10_1 >> 2] = $18_1;
        $2_1 = ($1_1 | 0) != (($2_1 + -1 | 0) & 2047 | 0 | 0) ? $2_1 : ($1_1 | 0) == ($13_1 | 0) ? $2_1 : $18_1 ? $2_1 : $1_1;
        $10_1 = $1_1 + -1 | 0;
        if (($1_1 | 0) != ($13_1 | 0)) {
         continue label$49
        }
        break label$49;
       };
       $15_1 = $15_1 + -29 | 0;
       if (!$12_1) {
        continue label$47
       }
       break label$47;
      };
      label$52 : {
       $13_1 = ($13_1 + -1 | 0) & 2047 | 0;
       if (($13_1 | 0) != ($2_1 | 0)) {
        break label$52
       }
       $1_1 = ($6_1 + 784 | 0) + ((($2_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
       $635_1 = $1_1;
       $637_1 = HEAP32[$1_1 >> 2] | 0;
       $1_1 = ($2_1 + -1 | 0) & 2047 | 0;
       HEAP32[$635_1 >> 2] = $637_1 | (HEAP32[(($6_1 + 784 | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0) | 0;
       $2_1 = $1_1;
      }
      $7_1 = $7_1 + 9 | 0;
      HEAP32[(($6_1 + 784 | 0) + ($13_1 << 2 | 0) | 0) >> 2] = $12_1;
      continue label$45;
     }
     break label$45;
    };
    label$53 : {
     label$54 : while (1) {
      $17_1 = ($2_1 + 1 | 0) & 2047 | 0;
      $8_1 = ($6_1 + 784 | 0) + ((($2_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
      label$55 : while (1) {
       $14_1 = ($7_1 | 0) > (45 | 0) ? 9 : 1;
       label$56 : {
        label$57 : while (1) {
         $10_1 = $13_1;
         $1_1 = 0;
         label$58 : {
          label$59 : {
           label$60 : while (1) {
            $13_1 = ($1_1 + $10_1 | 0) & 2047 | 0;
            if (($13_1 | 0) == ($2_1 | 0)) {
             break label$59
            }
            $13_1 = HEAP32[(($6_1 + 784 | 0) + ($13_1 << 2 | 0) | 0) >> 2] | 0;
            $12_1 = HEAP32[(($1_1 << 2 | 0) + 24688 | 0) >> 2] | 0;
            if ($13_1 >>> 0 < $12_1 >>> 0) {
             break label$59
            }
            if ($13_1 >>> 0 > $12_1 >>> 0) {
             break label$58
            }
            $1_1 = $1_1 + 1 | 0;
            if (($1_1 | 0) != (4 | 0)) {
             continue label$60
            }
            break label$60;
           };
          }
          if (($7_1 | 0) != (36 | 0)) {
           break label$58
          }
          i64toi32_i32$3 = 0;
          $18_1 = 0;
          $18$hi = i64toi32_i32$3;
          $1_1 = 0;
          i64toi32_i32$3 = 0;
          $19_1 = 0;
          $19$hi = i64toi32_i32$3;
          label$61 : while (1) {
           label$62 : {
            $13_1 = ($1_1 + $10_1 | 0) & 2047 | 0;
            if (($13_1 | 0) != ($2_1 | 0)) {
             break label$62
            }
            $2_1 = ($2_1 + 1 | 0) & 2047 | 0;
            HEAP32[((($2_1 << 2 | 0) + ($6_1 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
           }
           $1864($6_1 + 768 | 0 | 0, HEAP32[(($6_1 + 784 | 0) + ($13_1 << 2 | 0) | 0) >> 2] | 0 | 0);
           i64toi32_i32$3 = $18$hi;
           i64toi32_i32$3 = $19$hi;
           i64toi32_i32$3 = $18$hi;
           i64toi32_i32$1 = $19$hi;
           i64toi32_i32$0 = 0;
           i64toi32_i32$2 = 1075633366;
           $1838($6_1 + 752 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 1342177280 | 0, i64toi32_i32$2 | 0);
           i64toi32_i32$1 = $6_1;
           i64toi32_i32$2 = HEAP32[($6_1 + 752 | 0) >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($6_1 + 756 | 0) >> 2] | 0;
           $731_1 = i64toi32_i32$2;
           $731$hi = i64toi32_i32$0;
           i64toi32_i32$1 = ($6_1 + 752 | 0) + 8 | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
           i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
           $735_1 = i64toi32_i32$0;
           $735$hi = i64toi32_i32$2;
           i64toi32_i32$1 = $6_1;
           i64toi32_i32$2 = HEAP32[($6_1 + 768 | 0) >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($6_1 + 772 | 0) >> 2] | 0;
           $737_1 = i64toi32_i32$2;
           $737$hi = i64toi32_i32$0;
           i64toi32_i32$1 = ($6_1 + 768 | 0) + 8 | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
           i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
           $741_1 = i64toi32_i32$0;
           $741$hi = i64toi32_i32$2;
           i64toi32_i32$2 = $731$hi;
           i64toi32_i32$0 = $735$hi;
           i64toi32_i32$1 = $737$hi;
           i64toi32_i32$3 = $741$hi;
           $1858($6_1 + 736 | 0 | 0, $731_1 | 0, i64toi32_i32$2 | 0, $735_1 | 0, i64toi32_i32$0 | 0, $737_1 | 0, i64toi32_i32$1 | 0, $741_1 | 0, i64toi32_i32$3 | 0);
           i64toi32_i32$0 = ($6_1 + 736 | 0) + 8 | 0;
           i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
           $19_1 = i64toi32_i32$3;
           $19$hi = i64toi32_i32$1;
           i64toi32_i32$0 = $6_1;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 736 | 0) >> 2] | 0;
           i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 740 | 0) >> 2] | 0;
           $18_1 = i64toi32_i32$1;
           $18$hi = i64toi32_i32$3;
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (4 | 0)) {
            continue label$61
           }
           break label$61;
          };
          $1862($6_1 + 720 | 0 | 0, $5_1 | 0);
          i64toi32_i32$3 = $18$hi;
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$0 = $6_1;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 720 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 724 | 0) >> 2] | 0;
          $760_1 = i64toi32_i32$3;
          $760$hi = i64toi32_i32$1;
          i64toi32_i32$0 = (i64toi32_i32$0 + 720 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
          $764_1 = i64toi32_i32$1;
          $764$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $18$hi;
          i64toi32_i32$1 = $19$hi;
          i64toi32_i32$0 = $760$hi;
          i64toi32_i32$2 = $764$hi;
          $1838($6_1 + 704 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $760_1 | 0, i64toi32_i32$0 | 0, $764_1 | 0, i64toi32_i32$2 | 0);
          i64toi32_i32$1 = ($6_1 + 704 | 0) + 8 | 0;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$2;
          $19$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $18_1 = 0;
          $18$hi = i64toi32_i32$0;
          i64toi32_i32$1 = $6_1;
          i64toi32_i32$0 = HEAP32[($6_1 + 704 | 0) >> 2] | 0;
          i64toi32_i32$2 = HEAP32[($6_1 + 708 | 0) >> 2] | 0;
          $20_1 = i64toi32_i32$0;
          $20$hi = i64toi32_i32$2;
          $12_1 = $15_1 + 113 | 0;
          $1_1 = $12_1 - $4_1 | 0;
          $14_1 = ($1_1 | 0) < ($3_1 | 0);
          $13_1 = $14_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
          if (($13_1 | 0) <= (112 | 0)) {
           break label$56
          }
          i64toi32_i32$2 = 0;
          $21_1 = 0;
          $21$hi = i64toi32_i32$2;
          i64toi32_i32$2 = 0;
          $22_1 = 0;
          $22$hi = i64toi32_i32$2;
          i64toi32_i32$2 = 0;
          $23_1 = 0;
          $23$hi = i64toi32_i32$2;
          break label$53;
         }
         $15_1 = $14_1 + $15_1 | 0;
         $13_1 = $2_1;
         if (($10_1 | 0) == ($2_1 | 0)) {
          continue label$57
         }
         break label$57;
        };
        $11_1 = 1e9 >>> $14_1 | 0;
        $16_1 = (-1 << $14_1 | 0) ^ -1 | 0;
        $1_1 = 0;
        $13_1 = $10_1;
        label$63 : while (1) {
         $12_1 = ($6_1 + 784 | 0) + ($10_1 << 2 | 0) | 0;
         $806_1 = $12_1;
         $12_1 = HEAP32[$12_1 >> 2] | 0;
         $1_1 = ($12_1 >>> $14_1 | 0) + $1_1 | 0;
         HEAP32[$806_1 >> 2] = $1_1;
         $1_1 = ($10_1 | 0) == ($13_1 | 0) & !$1_1 | 0;
         $13_1 = $1_1 ? ($13_1 + 1 | 0) & 2047 | 0 : $13_1;
         $7_1 = $1_1 ? $7_1 + -9 | 0 : $7_1;
         $1_1 = Math_imul($12_1 & $16_1 | 0, $11_1);
         $10_1 = ($10_1 + 1 | 0) & 2047 | 0;
         if (($10_1 | 0) != ($2_1 | 0)) {
          continue label$63
         }
         break label$63;
        };
        if (!$1_1) {
         continue label$55
        }
        label$64 : {
         if (($17_1 | 0) == ($13_1 | 0)) {
          break label$64
         }
         HEAP32[(($6_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $1_1;
         $2_1 = $17_1;
         continue label$54;
        }
        HEAP32[$8_1 >> 2] = HEAP32[$8_1 >> 2] | 0 | 1 | 0;
        continue label$55;
       }
       break label$55;
      };
      break label$54;
     };
     $1863($6_1 + 656 | 0 | 0, +(+$1820(+(1.0), 225 - $13_1 | 0 | 0)));
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$2 = HEAP32[($6_1 + 656 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($6_1 + 660 | 0) >> 2] | 0;
     $867_1 = i64toi32_i32$2;
     $867$hi = i64toi32_i32$0;
     i64toi32_i32$1 = ($6_1 + 656 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $871_1 = i64toi32_i32$0;
     $871$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $19$hi;
     i64toi32_i32$2 = $867$hi;
     i64toi32_i32$0 = $871$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$3 = $19$hi;
     $1962($6_1 + 688 | 0 | 0, $867_1 | 0, i64toi32_i32$2 | 0, $871_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$0 = ($6_1 + 688 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $23_1 = i64toi32_i32$3;
     $23$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 688 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 692 | 0) >> 2] | 0;
     $22_1 = i64toi32_i32$1;
     $22$hi = i64toi32_i32$3;
     $1863(i64toi32_i32$0 + 640 | 0 | 0, +(+$1820(+(1.0), 113 - $13_1 | 0 | 0)));
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 640 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 644 | 0) >> 2] | 0;
     $890_1 = i64toi32_i32$3;
     $890$hi = i64toi32_i32$1;
     i64toi32_i32$0 = (i64toi32_i32$0 + 640 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $894_1 = i64toi32_i32$1;
     $894$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$1 = $19$hi;
     i64toi32_i32$0 = $890$hi;
     i64toi32_i32$2 = $894$hi;
     $1826($6_1 + 672 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $890_1 | 0, i64toi32_i32$0 | 0, $894_1 | 0, i64toi32_i32$2 | 0);
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$2 = HEAP32[($6_1 + 672 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($6_1 + 676 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$2;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$1 = ($6_1 + 672 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$0;
     $21$hi = i64toi32_i32$2;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$3 = $21$hi;
     $1859($6_1 + 624 | 0 | 0, $20_1 | 0, i64toi32_i32$2 | 0, $19_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$3 = $23$hi;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 624 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 628 | 0) >> 2] | 0;
     $912_1 = i64toi32_i32$3;
     $912$hi = i64toi32_i32$1;
     i64toi32_i32$0 = (i64toi32_i32$0 + 624 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $916_1 = i64toi32_i32$1;
     $916$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$0 = $912$hi;
     i64toi32_i32$2 = $916$hi;
     $1858($6_1 + 608 | 0 | 0, $22_1 | 0, i64toi32_i32$3 | 0, $23_1 | 0, i64toi32_i32$1 | 0, $912_1 | 0, i64toi32_i32$0 | 0, $916_1 | 0, i64toi32_i32$2 | 0);
     i64toi32_i32$1 = ($6_1 + 608 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$0 = HEAP32[($6_1 + 608 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($6_1 + 612 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$0;
     $20$hi = i64toi32_i32$2;
    }
    label$65 : {
     $7_1 = ($10_1 + 4 | 0) & 2047 | 0;
     if (($7_1 | 0) == ($2_1 | 0)) {
      break label$65
     }
     label$66 : {
      label$67 : {
       $7_1 = HEAP32[(($6_1 + 784 | 0) + ($7_1 << 2 | 0) | 0) >> 2] | 0;
       if ($7_1 >>> 0 > 499999999 >>> 0) {
        break label$67
       }
       label$68 : {
        if ($7_1) {
         break label$68
        }
        if ((($10_1 + 5 | 0) & 2047 | 0 | 0) == ($2_1 | 0)) {
         break label$66
        }
       }
       $1863($6_1 + 496 | 0 | 0, +(+($5_1 | 0) * .25));
       i64toi32_i32$2 = $18$hi;
       i64toi32_i32$2 = $21$hi;
       i64toi32_i32$1 = $6_1;
       i64toi32_i32$2 = HEAP32[($6_1 + 496 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6_1 + 500 | 0) >> 2] | 0;
       $953_1 = i64toi32_i32$2;
       $953$hi = i64toi32_i32$0;
       i64toi32_i32$1 = ($6_1 + 496 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $957_1 = i64toi32_i32$0;
       $957$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $18$hi;
       i64toi32_i32$0 = $21$hi;
       i64toi32_i32$1 = $953$hi;
       i64toi32_i32$3 = $957$hi;
       $1858($6_1 + 480 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $21_1 | 0, i64toi32_i32$0 | 0, $953_1 | 0, i64toi32_i32$1 | 0, $957_1 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$0 = ($6_1 + 480 | 0) + 8 | 0;
       i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $21_1 = i64toi32_i32$3;
       $21$hi = i64toi32_i32$1;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 480 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 484 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$1;
       $18$hi = i64toi32_i32$3;
       break label$66;
      }
      label$69 : {
       if (($7_1 | 0) == (5e8 | 0)) {
        break label$69
       }
       $1863($6_1 + 592 | 0 | 0, +(+($5_1 | 0) * .75));
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$3 = $21$hi;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 592 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 596 | 0) >> 2] | 0;
       $976_1 = i64toi32_i32$3;
       $976$hi = i64toi32_i32$1;
       i64toi32_i32$0 = (i64toi32_i32$0 + 592 | 0) + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $980_1 = i64toi32_i32$1;
       $980$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$1 = $21$hi;
       i64toi32_i32$0 = $976$hi;
       i64toi32_i32$2 = $980$hi;
       $1858($6_1 + 576 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $976_1 | 0, i64toi32_i32$0 | 0, $980_1 | 0, i64toi32_i32$2 | 0);
       i64toi32_i32$1 = ($6_1 + 576 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $21_1 = i64toi32_i32$2;
       $21$hi = i64toi32_i32$0;
       i64toi32_i32$1 = $6_1;
       i64toi32_i32$0 = HEAP32[($6_1 + 576 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($6_1 + 580 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$0;
       $18$hi = i64toi32_i32$2;
       break label$66;
      }
      $24_1 = +($5_1 | 0);
      label$70 : {
       if ((($10_1 + 5 | 0) & 2047 | 0 | 0) != ($2_1 | 0)) {
        break label$70
       }
       $1863($6_1 + 528 | 0 | 0, +($24_1 * .5));
       i64toi32_i32$2 = $18$hi;
       i64toi32_i32$2 = $21$hi;
       i64toi32_i32$1 = $6_1;
       i64toi32_i32$2 = HEAP32[($6_1 + 528 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6_1 + 532 | 0) >> 2] | 0;
       $1003_1 = i64toi32_i32$2;
       $1003$hi = i64toi32_i32$0;
       i64toi32_i32$1 = ($6_1 + 528 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $1007_1 = i64toi32_i32$0;
       $1007$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $18$hi;
       i64toi32_i32$0 = $21$hi;
       i64toi32_i32$1 = $1003$hi;
       i64toi32_i32$3 = $1007$hi;
       $1858($6_1 + 512 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $21_1 | 0, i64toi32_i32$0 | 0, $1003_1 | 0, i64toi32_i32$1 | 0, $1007_1 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$0 = ($6_1 + 512 | 0) + 8 | 0;
       i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $21_1 = i64toi32_i32$3;
       $21$hi = i64toi32_i32$1;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 512 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 516 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$1;
       $18$hi = i64toi32_i32$3;
       break label$66;
      }
      $1863($6_1 + 560 | 0 | 0, +($24_1 * .75));
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 560 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 564 | 0) >> 2] | 0;
      $1023_1 = i64toi32_i32$3;
      $1023$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 560 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $1027_1 = i64toi32_i32$1;
      $1027$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$0 = $1023$hi;
      i64toi32_i32$2 = $1027$hi;
      $1858($6_1 + 544 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $1023_1 | 0, i64toi32_i32$0 | 0, $1027_1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$1 = ($6_1 + 544 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$2;
      $21$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$0 = HEAP32[($6_1 + 544 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($6_1 + 548 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$2;
     }
     if (($13_1 | 0) > (111 | 0)) {
      break label$65
     }
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 1073676288;
     $1826($6_1 + 464 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $21_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 464 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 468 | 0) >> 2] | 0;
     $1041_1 = i64toi32_i32$3;
     $1041$hi = i64toi32_i32$1;
     i64toi32_i32$0 = (i64toi32_i32$0 + 464 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $1045_1 = i64toi32_i32$1;
     $1045$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1041$hi;
     i64toi32_i32$1 = $1045$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ($1833($1041_1 | 0, i64toi32_i32$3 | 0, $1045_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0) | 0) {
      break label$65
     }
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 1073676288;
     $1858($6_1 + 448 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $21_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$0 = ($6_1 + 448 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$3;
     $21$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 448 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 452 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$1;
     $18$hi = i64toi32_i32$3;
    }
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$2 = $21$hi;
    $1858($6_1 + 432 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $21_1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$2 = HEAP32[($6_1 + 432 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($6_1 + 436 | 0) >> 2] | 0;
    $1066_1 = i64toi32_i32$2;
    $1066$hi = i64toi32_i32$0;
    i64toi32_i32$1 = ($6_1 + 432 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1070_1 = i64toi32_i32$0;
    $1070$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $22$hi;
    i64toi32_i32$2 = $23$hi;
    i64toi32_i32$2 = $1066$hi;
    i64toi32_i32$0 = $1070$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$3 = $23$hi;
    $1859($6_1 + 416 | 0 | 0, $1066_1 | 0, i64toi32_i32$2 | 0, $1070_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = ($6_1 + 416 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$3;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 416 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 420 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$3;
    label$71 : {
     if (($12_1 & 2147483647 | 0 | 0) <= ($9_1 + -2 | 0 | 0)) {
      break label$71
     }
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$1 = $19$hi;
     $1964($6_1 + 400 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$1 = $19$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1073610752;
     $1838($6_1 + 384 | 0 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
     i64toi32_i32$3 = $6_1;
     i64toi32_i32$2 = HEAP32[($6_1 + 400 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($6_1 + 404 | 0) >> 2] | 0;
     $1093_1 = i64toi32_i32$2;
     $1093$hi = i64toi32_i32$0;
     i64toi32_i32$3 = ($6_1 + 400 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $1097_1 = i64toi32_i32$0;
     $1097$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1093$hi;
     i64toi32_i32$0 = $1097$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 1081081856;
     $2_1 = $1834($1093_1 | 0, i64toi32_i32$2 | 0, $1097_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$1 = $19$hi;
     i64toi32_i32$0 = ($6_1 + 384 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $1103_1 = i64toi32_i32$1;
     $1103$hi = i64toi32_i32$3;
     $12_1 = ($2_1 | 0) < (0 | 0);
     i64toi32_i32$4 = $12_1;
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$1 = $1103$hi;
     i64toi32_i32$2 = i64toi32_i32$4 ? $19_1 : $1103_1;
     i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$1;
     $19_1 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$4 = $6_1;
     i64toi32_i32$0 = HEAP32[($6_1 + 384 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($6_1 + 388 | 0) >> 2] | 0;
     $1110_1 = i64toi32_i32$0;
     $1110$hi = i64toi32_i32$2;
     i64toi32_i32$3 = $12_1;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$0 = $1110$hi;
     i64toi32_i32$1 = i64toi32_i32$3 ? $20_1 : $1110_1;
     i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$0;
     $20_1 = i64toi32_i32$1;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $18$hi;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $18$hi;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     $10_1 = $1833($18_1 | 0, $18$hi | 0, $21_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
     label$72 : {
      $15_1 = $15_1 + (($2_1 | 0) > (-1 | 0)) | 0;
      if (($15_1 + 110 | 0 | 0) > ($9_1 | 0)) {
       break label$72
      }
      if (!(($12_1 ? $14_1 : $14_1 & ($13_1 | 0) != ($1_1 | 0) | 0) & ($10_1 | 0) != (0 | 0) | 0)) {
       break label$71
      }
     }
     HEAP32[($1882() | 0) >> 2] = 68;
    }
    i64toi32_i32$0 = $20$hi;
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$0 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    $1963($6_1 + 368 | 0 | 0, $20_1 | 0, i64toi32_i32$0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0);
    i64toi32_i32$1 = ($6_1 + 368 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$3;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = HEAP32[($6_1 + 368 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($6_1 + 372 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$0;
    $18$hi = i64toi32_i32$3;
    break label$10;
   }
   i64toi32_i32$3 = 0;
   $18_1 = 0;
   $18$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   $1956($1_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = 0;
   $19_1 = 0;
   $19$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $19$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $18$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $18_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $6_1 + 8976 | 0;
 }
 
 function $1968($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5$hi = 0, $5_1 = 0, $2_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $69$hi = 0, $71_1 = 0, $71$hi = 0, $120$hi = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    $1_1 = HEAPU8[$1_1 >> 0] | 0;
    break label$1;
   }
   $1_1 = $1957($0_1 | 0) | 0;
  }
  $2_1 = 0;
  $3_1 = 0;
  label$3 : {
   label$4 : {
    switch ($1_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break label$4;
    default:
     break label$3;
    };
   }
   $3_1 = ($1_1 | 0) == (45 | 0);
   label$5 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
     break label$5
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    $1_1 = HEAPU8[$1_1 >> 0] | 0;
    break label$3;
   }
   $1_1 = $1957($0_1 | 0) | 0;
  }
  label$6 : {
   label$7 : {
    if (($1_1 + -58 | 0) >>> 0 <= -11 >>> 0) {
     break label$7
    }
    label$8 : while (1) {
     $2_1 = $1_1 + Math_imul($2_1, 10) | 0;
     label$9 : {
      label$10 : {
       $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$10
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
       $1_1 = HEAPU8[$1_1 >> 0] | 0;
       break label$9;
      }
      $1_1 = $1957($0_1 | 0) | 0;
     }
     $2_1 = $2_1 + -48 | 0;
     label$11 : {
      $4_1 = $1_1 + -48 | 0;
      if ($4_1 >>> 0 > 9 >>> 0) {
       break label$11
      }
      if (($2_1 | 0) < (214748364 | 0)) {
       continue label$8
      }
     }
     break label$8;
    };
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $5_1 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$0;
    label$12 : {
     if ($4_1 >>> 0 >= 10 >>> 0) {
      break label$12
     }
     label$13 : while (1) {
      i64toi32_i32$0 = 0;
      $69$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $71_1 = i64toi32_i32$1;
      $71$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $69$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = $71$hi;
      i64toi32_i32$3 = $71_1;
      i64toi32_i32$4 = $1_1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $5_1 = i64toi32_i32$4;
      $5$hi = i64toi32_i32$5;
      label$14 : {
       label$15 : {
        $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$15
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
        $1_1 = HEAPU8[$1_1 >> 0] | 0;
        break label$14;
       }
       $1_1 = $1957($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $5$hi;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -48;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $5_1 = i64toi32_i32$1;
      $5$hi = i64toi32_i32$4;
      $4_1 = $1_1 + -48 | 0;
      if ($4_1 >>> 0 > 9 >>> 0) {
       break label$12
      }
      i64toi32_i32$4 = $5$hi;
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$0 = 21474836;
      i64toi32_i32$3 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
       $17_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $18_1 = 0
        } else {
         $18_1 = 1
        }
        $19_1 = $18_1;
       } else {
        $19_1 = 0
       }
       $17_1 = $19_1;
      }
      if ($17_1) {
       continue label$13
      }
      break label$13;
     };
    }
    label$16 : {
     if ($4_1 >>> 0 >= 10 >>> 0) {
      break label$16
     }
     label$17 : while (1) {
      label$18 : {
       label$19 : {
        $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$19
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
        $1_1 = HEAPU8[$1_1 >> 0] | 0;
        break label$18;
       }
       $1_1 = $1957($0_1 | 0) | 0;
      }
      if (($1_1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$17
      }
      break label$17;
     };
    }
    label$20 : {
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$5 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
      $20_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
        $21_1 = 0
       } else {
        $21_1 = 1
       }
       $22_1 = $21_1;
      } else {
       $22_1 = 0
      }
      $20_1 = $22_1;
     }
     if ($20_1) {
      break label$20
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    i64toi32_i32$1 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $120$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $3_1;
    i64toi32_i32$1 = $120$hi;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$5;
    i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
    $5_1 = i64toi32_i32$5;
    $5$hi = i64toi32_i32$3;
    break label$6;
   }
   i64toi32_i32$3 = -2147483648;
   $5_1 = 0;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$3 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$5 | 0) < (i64toi32_i32$3 | 0)) {
    $23_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$3 | 0)) {
     if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$0 >>> 0) {
      $24_1 = 0
     } else {
      $24_1 = 1
     }
     $25_1 = $24_1;
    } else {
     $25_1 = 0
    }
    $23_1 = $25_1;
   }
   if ($23_1) {
    break label$6
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$4 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
   return i64toi32_i32$5 | 0;
  }
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$4 | 0;
 }
 
 function $1969($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $11_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$5 = 0, $3_1 = 0, $10_1 = 0, $16_1 = 0, $9_1 = 0, $15_1 = 0, $5_1 = 0, $19$hi = 0, $13_1 = 0, $14_1 = 0, $20$hi = 0, $17_1 = 0, $19_1 = 0, $12_1 = 0, $20_1 = 0, $21$hi = 0, $7_1 = 0, $21_1 = 0, $18_1 = 0, i64toi32_i32$6 = 0, $4_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $8_1 = 0, $78$hi = 0, $80$hi = 0, $85_1 = 0, $85$hi = 0, $144$hi = 0, $146$hi = 0, $152_1 = 0, $152$hi = 0, $275$hi = 0, $277$hi = 0, $282_1 = 0, $282$hi = 0, $322_1 = 0, $322$hi = 0, $328_1 = 0, $328$hi = 0, $329$hi = 0, $428_1 = 0, $428$hi = 0, $434_1 = 0, $434$hi = 0, $435$hi = 0, $653_1 = 0, $653$hi = 0, $658_1 = 0, $658$hi = 0, $684$hi = 0, $686$hi = 0, $692_1 = 0, $692$hi = 0;
  $3_1 = global$0 - 304 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4_1 = $1800($0_1 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
       break label$5
      }
      $1895($0_1 | 0) | 0;
      if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
       break label$5
      }
      $5_1 = 0;
      break label$4;
     }
     label$6 : {
      $6_1 = HEAPU8[$1_1 >> 0] | 0;
      if ($6_1) {
       break label$6
      }
      $7_1 = 0;
      break label$2;
     }
     $8_1 = $3_1 + 16 | 0;
     i64toi32_i32$0 = 0;
     $19_1 = 0;
     $19$hi = i64toi32_i32$0;
     $7_1 = 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : while (1) {
           label$13 : {
            label$14 : {
             $6_1 = $6_1 & 255 | 0;
             if (!($1903($6_1 | 0) | 0)) {
              break label$14
             }
             label$15 : while (1) {
              $6_1 = $1_1;
              $1_1 = $1_1 + 1 | 0;
              if ($1903(HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
               continue label$15
              }
              break label$15;
             };
             i64toi32_i32$0 = 0;
             $1956($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
             label$16 : while (1) {
              label$17 : {
               label$18 : {
                $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                 break label$18
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                $1_1 = HEAPU8[$1_1 >> 0] | 0;
                break label$17;
               }
               $1_1 = $1957($0_1 | 0) | 0;
              }
              if ($1903($1_1 | 0) | 0) {
               continue label$16
              }
              break label$16;
             };
             $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             label$19 : {
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
               $62_1 = 1
              } else {
               if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
                 $63_1 = 0
                } else {
                 $63_1 = 1
                }
                $64_1 = $63_1;
               } else {
                $64_1 = 0
               }
               $62_1 = $64_1;
              }
              if ($62_1) {
               break label$19
              }
              $1_1 = $1_1 + -1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
             }
             i64toi32_i32$3 = $0_1;
             i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
             $78$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $19$hi;
             i64toi32_i32$1 = $78$hi;
             i64toi32_i32$3 = i64toi32_i32$2;
             i64toi32_i32$2 = $19$hi;
             i64toi32_i32$0 = $19_1;
             i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
             i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
             if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $80$hi = i64toi32_i32$5;
             i64toi32_i32$3 = $1_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
             $85_1 = i64toi32_i32$3;
             $85$hi = i64toi32_i32$5;
             i64toi32_i32$5 = $80$hi;
             i64toi32_i32$1 = i64toi32_i32$4;
             i64toi32_i32$3 = $85$hi;
             i64toi32_i32$0 = $85_1;
             i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
             i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
             }
             $19_1 = i64toi32_i32$2;
             $19$hi = i64toi32_i32$4;
             break label$13;
            }
            label$20 : {
             label$21 : {
              label$22 : {
               label$23 : {
                if (($6_1 | 0) != (37 | 0)) {
                 break label$23
                }
                $6_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                if (($6_1 | 0) == (42 | 0)) {
                 break label$22
                }
                if (($6_1 | 0) != (37 | 0)) {
                 break label$21
                }
               }
               i64toi32_i32$4 = 0;
               $1956($0_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
               label$24 : {
                label$25 : {
                 if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (37 | 0)) {
                  break label$25
                 }
                 label$26 : while (1) {
                  label$27 : {
                   label$28 : {
                    $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                    if (($6_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                     break label$28
                    }
                    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                    $6_1 = HEAPU8[$6_1 >> 0] | 0;
                    break label$27;
                   }
                   $6_1 = $1957($0_1 | 0) | 0;
                  }
                  if ($1903($6_1 | 0) | 0) {
                   continue label$26
                  }
                  break label$26;
                 };
                 $1_1 = $1_1 + 1 | 0;
                 break label$24;
                }
                label$29 : {
                 $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if (($6_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$29
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                 $6_1 = HEAPU8[$6_1 >> 0] | 0;
                 break label$24;
                }
                $6_1 = $1957($0_1 | 0) | 0;
               }
               label$30 : {
                if (($6_1 | 0) == (HEAPU8[$1_1 >> 0] | 0 | 0)) {
                 break label$30
                }
                label$31 : {
                 i64toi32_i32$5 = $0_1;
                 i64toi32_i32$4 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
                 i64toi32_i32$5 = i64toi32_i32$4;
                 i64toi32_i32$4 = 0;
                 i64toi32_i32$0 = 0;
                 if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
                  $65_1 = 1
                 } else {
                  if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
                   if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
                    $66_1 = 0
                   } else {
                    $66_1 = 1
                   }
                   $67_1 = $66_1;
                  } else {
                   $67_1 = 0
                  }
                  $65_1 = $67_1;
                 }
                 if ($65_1) {
                  break label$31
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                }
                if (($6_1 | 0) > (-1 | 0)) {
                 break label$2
                }
                $5_1 = 0;
                if ($7_1) {
                 break label$2
                }
                break label$4;
               }
               i64toi32_i32$0 = $0_1;
               i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
               $144$hi = i64toi32_i32$1;
               i64toi32_i32$1 = $19$hi;
               i64toi32_i32$1 = $144$hi;
               i64toi32_i32$0 = i64toi32_i32$5;
               i64toi32_i32$5 = $19$hi;
               i64toi32_i32$4 = $19_1;
               i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
               i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
               if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
               }
               $146$hi = i64toi32_i32$2;
               i64toi32_i32$0 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
               i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
               $152_1 = i64toi32_i32$0;
               $152$hi = i64toi32_i32$2;
               i64toi32_i32$2 = $146$hi;
               i64toi32_i32$1 = i64toi32_i32$3;
               i64toi32_i32$0 = $152$hi;
               i64toi32_i32$4 = $152_1;
               i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
               i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
               if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
               }
               $19_1 = i64toi32_i32$5;
               $19$hi = i64toi32_i32$3;
               $6_1 = $1_1;
               break label$13;
              }
              $1_1 = $1_1 + 2 | 0;
              $9_1 = 0;
              break label$20;
             }
             label$32 : {
              if (!($1937($6_1 | 0) | 0)) {
               break label$32
              }
              if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
               break label$32
              }
              $1_1 = $1_1 + 3 | 0;
              $9_1 = $1970($2_1 | 0, $6_1 + -48 | 0 | 0) | 0;
              break label$20;
             }
             $1_1 = $1_1 + 1 | 0;
             $9_1 = HEAP32[$2_1 >> 2] | 0;
             $2_1 = $2_1 + 4 | 0;
            }
            $10_1 = 0;
            label$33 : {
             label$34 : while (1) {
              $11_1 = HEAPU8[$1_1 >> 0] | 0;
              if (!($1937($11_1 | 0) | 0)) {
               break label$33
              }
              $1_1 = $1_1 + 1 | 0;
              $10_1 = (Math_imul($10_1, 10) + $11_1 | 0) + -48 | 0;
              continue label$34;
             };
            }
            $12_1 = 0;
            label$35 : {
             label$36 : {
              if (($11_1 | 0) == (109 | 0)) {
               break label$36
              }
              $13_1 = $1_1;
              break label$35;
             }
             $13_1 = $1_1 + 1 | 0;
             $14_1 = 0;
             $12_1 = ($9_1 | 0) != (0 | 0);
             $11_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
             $15_1 = 0;
            }
            $6_1 = $13_1 + 1 | 0;
            $16_1 = 3;
            $5_1 = $12_1;
            label$37 : {
             label$38 : {
              switch (($11_1 & 255 | 0) + -65 | 0 | 0) {
              case 39:
               $1_1 = (HEAPU8[($13_1 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
               $6_1 = $1_1 ? $13_1 + 2 | 0 : $6_1;
               $16_1 = $1_1 ? -2 : -1;
               break label$37;
              case 43:
               $1_1 = (HEAPU8[($13_1 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
               $6_1 = $1_1 ? $13_1 + 2 | 0 : $6_1;
               $16_1 = $1_1 ? 3 : 1;
               break label$37;
              case 51:
              case 57:
               $16_1 = 1;
               break label$37;
              case 11:
               $16_1 = 2;
               break label$37;
              case 41:
               break label$37;
              case 0:
              case 2:
              case 4:
              case 5:
              case 6:
              case 18:
              case 23:
              case 26:
              case 32:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 40:
              case 45:
              case 46:
              case 47:
              case 50:
              case 52:
              case 55:
               break label$38;
              default:
               break label$7;
              };
             }
             $16_1 = 0;
             $6_1 = $13_1;
            }
            $1_1 = HEAPU8[$6_1 >> 0] | 0;
            $11_1 = ($1_1 & 47 | 0 | 0) == (3 | 0);
            $5_1 = $11_1 ? 1 : $16_1;
            label$43 : {
             $17_1 = $11_1 ? $1_1 | 32 | 0 : $1_1;
             if (($17_1 | 0) == (91 | 0)) {
              break label$43
             }
             label$44 : {
              label$45 : {
               if (($17_1 | 0) == (110 | 0)) {
                break label$45
               }
               if (($17_1 | 0) != (99 | 0)) {
                break label$44
               }
               $10_1 = ($10_1 | 0) > (1 | 0) ? $10_1 : 1;
               break label$43;
              }
              i64toi32_i32$3 = $19$hi;
              $1971($9_1 | 0, $5_1 | 0, $19_1 | 0, i64toi32_i32$3 | 0);
              break label$13;
             }
             i64toi32_i32$3 = 0;
             $1956($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
             label$46 : while (1) {
              label$47 : {
               label$48 : {
                $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                 break label$48
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                $1_1 = HEAPU8[$1_1 >> 0] | 0;
                break label$47;
               }
               $1_1 = $1957($0_1 | 0) | 0;
              }
              if ($1903($1_1 | 0) | 0) {
               continue label$46
              }
              break label$46;
             };
             $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             label$49 : {
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$3 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$2 = i64toi32_i32$3;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
               $68_1 = 1
              } else {
               if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
                if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$4 >>> 0) {
                 $69_1 = 0
                } else {
                 $69_1 = 1
                }
                $70_1 = $69_1;
               } else {
                $70_1 = 0
               }
               $68_1 = $70_1;
              }
              if ($68_1) {
               break label$49
              }
              $1_1 = $1_1 + -1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
             }
             i64toi32_i32$4 = $0_1;
             i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
             $275$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $19$hi;
             i64toi32_i32$1 = $275$hi;
             i64toi32_i32$4 = i64toi32_i32$2;
             i64toi32_i32$2 = $19$hi;
             i64toi32_i32$3 = $19_1;
             i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
             i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
             if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $277$hi = i64toi32_i32$5;
             i64toi32_i32$4 = $1_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
             $282_1 = i64toi32_i32$4;
             $282$hi = i64toi32_i32$5;
             i64toi32_i32$5 = $277$hi;
             i64toi32_i32$1 = i64toi32_i32$0;
             i64toi32_i32$4 = $282$hi;
             i64toi32_i32$3 = $282_1;
             i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
             i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
             }
             $19_1 = i64toi32_i32$2;
             $19$hi = i64toi32_i32$0;
            }
            i64toi32_i32$1 = $10_1;
            i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
            $20_1 = i64toi32_i32$1;
            $20$hi = i64toi32_i32$0;
            $1956($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
            label$50 : {
             label$51 : {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
               break label$51
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
              break label$50;
             }
             if (($1957($0_1 | 0) | 0 | 0) < (0 | 0)) {
              break label$8
             }
            }
            label$52 : {
             i64toi32_i32$5 = $0_1;
             i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
             i64toi32_i32$5 = i64toi32_i32$0;
             i64toi32_i32$0 = 0;
             i64toi32_i32$3 = 0;
             if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
              $71_1 = 1
             } else {
              if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
               if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
                $72_1 = 0
               } else {
                $72_1 = 1
               }
               $73_1 = $72_1;
              } else {
               $73_1 = 0
              }
              $71_1 = $73_1;
             }
             if ($71_1) {
              break label$52
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
            }
            $1_1 = 16;
            label$53 : {
             label$54 : {
              label$55 : {
               label$56 : {
                label$57 : {
                 switch ($17_1 + -88 | 0 | 0) {
                 default:
                  $1_1 = $17_1 + -65 | 0;
                  if ($1_1 >>> 0 > 6 >>> 0) {
                   break label$53
                  }
                  if (!((1 << $1_1 | 0) & 113 | 0)) {
                   break label$53
                  }
                 case 9:
                 case 13:
                 case 14:
                 case 15:
                  $1965($3_1 + 8 | 0 | 0, $0_1 | 0, $5_1 | 0);
                  i64toi32_i32$3 = $0_1;
                  i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                  $322_1 = i64toi32_i32$5;
                  $322$hi = i64toi32_i32$1;
                  i64toi32_i32$5 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
                  i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
                  $328_1 = i64toi32_i32$5;
                  $328$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$5 = $328$hi;
                  i64toi32_i32$0 = $328_1;
                  i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                  i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
                  i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                  i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
                  $329$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $322$hi;
                  i64toi32_i32$1 = $322_1;
                  i64toi32_i32$3 = $329$hi;
                  i64toi32_i32$0 = i64toi32_i32$4;
                  if ((i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
                   break label$55
                  }
                  break label$9;
                 case 3:
                 case 11:
                 case 27:
                  label$63 : {
                   if (($17_1 | 16 | 0 | 0) != (115 | 0)) {
                    break label$63
                   }
                   $1799($3_1 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                   HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                   if (($17_1 | 0) != (115 | 0)) {
                    break label$54
                   }
                   HEAP8[($3_1 + 65 | 0) >> 0] = 0;
                   HEAP8[($3_1 + 46 | 0) >> 0] = 0;
                   $74_1 = 0;
                   HEAP16[($3_1 + 42 | 0) >> 1] = $74_1;
                   HEAP16[($3_1 + 44 | 0) >> 1] = $74_1 >>> 16 | 0;
                   break label$54;
                  }
                  $16_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                  $1_1 = ($16_1 | 0) == (94 | 0);
                  $1799($3_1 + 32 | 0 | 0, $1_1 | 0, 257 | 0) | 0;
                  HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                  $11_1 = $1_1 ? $6_1 + 2 | 0 : $6_1 + 1 | 0;
                  label$64 : {
                   label$65 : {
                    label$66 : {
                     label$67 : {
                      $1_1 = HEAPU8[($6_1 + ($1_1 ? 2 : 1) | 0) >> 0] | 0;
                      if (($1_1 | 0) == (45 | 0)) {
                       break label$67
                      }
                      if (($1_1 | 0) == (93 | 0)) {
                       break label$66
                      }
                      $16_1 = ($16_1 | 0) != (94 | 0);
                      $6_1 = $11_1;
                      break label$64;
                     }
                     $16_1 = ($16_1 | 0) != (94 | 0);
                     HEAP8[($3_1 + 78 | 0) >> 0] = $16_1;
                     break label$65;
                    }
                    $16_1 = ($16_1 | 0) != (94 | 0);
                    HEAP8[($3_1 + 126 | 0) >> 0] = $16_1;
                   }
                   $6_1 = $11_1 + 1 | 0;
                  }
                  label$68 : while (1) {
                   label$69 : {
                    label$70 : {
                     $11_1 = HEAPU8[$6_1 >> 0] | 0;
                     if (($11_1 | 0) == (45 | 0)) {
                      break label$70
                     }
                     if (!$11_1) {
                      break label$8
                     }
                     if (($11_1 | 0) == (93 | 0)) {
                      break label$54
                     }
                     break label$69;
                    }
                    $11_1 = 45;
                    $18_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                    if (!$18_1) {
                     break label$69
                    }
                    if (($18_1 | 0) == (93 | 0)) {
                     break label$69
                    }
                    $13_1 = $6_1 + 1 | 0;
                    label$71 : {
                     label$72 : {
                      $1_1 = HEAPU8[($6_1 + -1 | 0) >> 0] | 0;
                      if ($1_1 >>> 0 < $18_1 >>> 0) {
                       break label$72
                      }
                      $11_1 = $18_1;
                      break label$71;
                     }
                     label$73 : while (1) {
                      $1_1 = $1_1 + 1 | 0;
                      HEAP8[(($3_1 + 32 | 0) + $1_1 | 0) >> 0] = $16_1;
                      $11_1 = HEAPU8[$13_1 >> 0] | 0;
                      if ($1_1 >>> 0 < $11_1 >>> 0) {
                       continue label$73
                      }
                      break label$73;
                     };
                    }
                    $6_1 = $13_1;
                   }
                   HEAP8[(($11_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] = $16_1;
                   $6_1 = $6_1 + 1 | 0;
                   continue label$68;
                  };
                 case 23:
                  $1_1 = 8;
                  break label$56;
                 case 12:
                 case 29:
                  $1_1 = 10;
                  break label$56;
                 case 1:
                 case 2:
                 case 4:
                 case 5:
                 case 6:
                 case 7:
                 case 8:
                 case 10:
                 case 16:
                 case 18:
                 case 19:
                 case 20:
                 case 21:
                 case 22:
                 case 25:
                 case 26:
                 case 28:
                 case 30:
                 case 31:
                  break label$53;
                 case 0:
                 case 24:
                 case 32:
                  break label$56;
                 case 17:
                  break label$57;
                 };
                }
                $1_1 = 0;
               }
               i64toi32_i32$1 = $1961($0_1 | 0, $1_1 | 0) | 0;
               i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
               $20_1 = i64toi32_i32$1;
               $20$hi = i64toi32_i32$2;
               i64toi32_i32$0 = $0_1;
               i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
               $428_1 = i64toi32_i32$2;
               $428$hi = i64toi32_i32$1;
               i64toi32_i32$2 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
               i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
               $434_1 = i64toi32_i32$2;
               $434$hi = i64toi32_i32$1;
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               i64toi32_i32$2 = $434$hi;
               i64toi32_i32$3 = $434_1;
               i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
               i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
               i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
               i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
               $435$hi = i64toi32_i32$4;
               i64toi32_i32$4 = $428$hi;
               i64toi32_i32$1 = $428_1;
               i64toi32_i32$0 = $435$hi;
               i64toi32_i32$3 = i64toi32_i32$5;
               if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) | 0) {
                break label$9
               }
               label$74 : {
                if (($17_1 | 0) != (112 | 0)) {
                 break label$74
                }
                if (!$9_1) {
                 break label$74
                }
                i64toi32_i32$1 = $20$hi;
                HEAP32[$9_1 >> 2] = $20_1;
                break label$53;
               }
               i64toi32_i32$1 = $20$hi;
               $1971($9_1 | 0, $5_1 | 0, $20_1 | 0, i64toi32_i32$1 | 0);
               break label$53;
              }
              if (!$9_1) {
               break label$53
              }
              i64toi32_i32$3 = $8_1;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $20_1 = i64toi32_i32$1;
              $20$hi = i64toi32_i32$4;
              i64toi32_i32$3 = $3_1;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
              $21_1 = i64toi32_i32$4;
              $21$hi = i64toi32_i32$1;
              label$75 : {
               switch ($5_1 | 0) {
               case 0:
                i64toi32_i32$1 = $21$hi;
                i64toi32_i32$1 = $20$hi;
                i64toi32_i32$1 = $21$hi;
                i64toi32_i32$4 = $20$hi;
                HEAPF32[$9_1 >> 2] = Math_fround($1865($21_1 | 0, i64toi32_i32$1 | 0, $20_1 | 0, i64toi32_i32$4 | 0));
                break label$53;
               case 1:
                i64toi32_i32$4 = $21$hi;
                i64toi32_i32$4 = $20$hi;
                i64toi32_i32$4 = $21$hi;
                i64toi32_i32$1 = $20$hi;
                HEAPF64[$9_1 >> 3] = +$1860($21_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0);
                break label$53;
               case 2:
                break label$75;
               default:
                break label$53;
               };
              }
              i64toi32_i32$1 = $21$hi;
              i64toi32_i32$4 = $9_1;
              HEAP32[i64toi32_i32$4 >> 2] = $21_1;
              HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$1 = $20$hi;
              HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $20_1;
              HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
              break label$53;
             }
             $16_1 = ($17_1 | 0) == (99 | 0);
             $10_1 = $16_1 ? $10_1 + 1 | 0 : 31;
             label$78 : {
              label$79 : {
               if (($5_1 | 0) != (1 | 0)) {
                break label$79
               }
               $11_1 = $9_1;
               label$80 : {
                if (!$12_1) {
                 break label$80
                }
                $11_1 = $1827($10_1 << 2 | 0 | 0) | 0;
                if (!$11_1) {
                 break label$10
                }
               }
               i64toi32_i32$4 = $3_1;
               i64toi32_i32$1 = 0;
               HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
               HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$1;
               $1_1 = 0;
               $13_1 = ($12_1 | 0) != (0 | 0);
               label$81 : while (1) {
                $15_1 = $11_1;
                label$82 : {
                 label$83 : while (1) {
                  label$84 : {
                   label$85 : {
                    $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                    if (($11_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                     break label$85
                    }
                    HEAP32[($0_1 + 4 | 0) >> 2] = $11_1 + 1 | 0;
                    $11_1 = HEAPU8[$11_1 >> 0] | 0;
                    break label$84;
                   }
                   $11_1 = $1957($0_1 | 0) | 0;
                  }
                  if (!(HEAPU8[(($11_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                   break label$82
                  }
                  HEAP8[($3_1 + 27 | 0) >> 0] = $11_1;
                  $11_1 = $1959($3_1 + 28 | 0 | 0, $3_1 + 27 | 0 | 0, $3_1 + 296 | 0 | 0) | 0;
                  if (($11_1 | 0) == (-2 | 0)) {
                   continue label$83
                  }
                  $14_1 = 0;
                  if (($11_1 | 0) == (-1 | 0)) {
                   break label$8
                  }
                  label$86 : {
                   if (!$15_1) {
                    break label$86
                   }
                   HEAP32[($15_1 + ($1_1 << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                   $1_1 = $1_1 + 1 | 0;
                  }
                  if (($13_1 & ($1_1 | 0) == ($10_1 | 0) | 0 | 0) != (1 | 0)) {
                   continue label$83
                  }
                  break label$83;
                 };
                 $5_1 = 1;
                 $1_1 = $10_1;
                 $11_1 = $1_1 << 1 | 0 | 1 | 0;
                 $10_1 = $11_1;
                 $11_1 = $1829($15_1 | 0, $11_1 << 2 | 0 | 0) | 0;
                 if ($11_1) {
                  continue label$81
                 }
                 break label$7;
                }
                break label$81;
               };
               $14_1 = 0;
               $10_1 = $15_1;
               if (!($1960($3_1 + 296 | 0 | 0) | 0)) {
                break label$8
               }
               break label$78;
              }
              label$87 : {
               if (!$12_1) {
                break label$87
               }
               $1_1 = 0;
               $11_1 = $1827($10_1 | 0) | 0;
               if (!$11_1) {
                break label$10
               }
               label$88 : while (1) {
                $15_1 = $11_1;
                label$89 : while (1) {
                 label$90 : {
                  label$91 : {
                   $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                   if (($11_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                    break label$91
                   }
                   HEAP32[($0_1 + 4 | 0) >> 2] = $11_1 + 1 | 0;
                   $11_1 = HEAPU8[$11_1 >> 0] | 0;
                   break label$90;
                  }
                  $11_1 = $1957($0_1 | 0) | 0;
                 }
                 label$92 : {
                  if (HEAPU8[(($11_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                   break label$92
                  }
                  $10_1 = 0;
                  $14_1 = $15_1;
                  break label$78;
                 }
                 HEAP8[($15_1 + $1_1 | 0) >> 0] = $11_1;
                 $1_1 = $1_1 + 1 | 0;
                 if (($1_1 | 0) != ($10_1 | 0)) {
                  continue label$89
                 }
                 break label$89;
                };
                $5_1 = 1;
                $1_1 = $10_1;
                $11_1 = $1_1 << 1 | 0 | 1 | 0;
                $10_1 = $11_1;
                $11_1 = $1829($15_1 | 0, $11_1 | 0) | 0;
                if ($11_1) {
                 continue label$88
                }
                break label$88;
               };
               $14_1 = $15_1;
               $15_1 = 0;
               break label$7;
              }
              $1_1 = 0;
              label$93 : {
               if (!$9_1) {
                break label$93
               }
               label$94 : while (1) {
                label$95 : {
                 label$96 : {
                  $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                  if (($11_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                   break label$96
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = $11_1 + 1 | 0;
                  $11_1 = HEAPU8[$11_1 >> 0] | 0;
                  break label$95;
                 }
                 $11_1 = $1957($0_1 | 0) | 0;
                }
                label$97 : {
                 if (HEAPU8[(($11_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                  break label$97
                 }
                 $10_1 = 0;
                 $15_1 = $9_1;
                 $14_1 = $9_1;
                 break label$78;
                }
                HEAP8[($9_1 + $1_1 | 0) >> 0] = $11_1;
                $1_1 = $1_1 + 1 | 0;
                continue label$94;
               };
              }
              label$98 : while (1) {
               label$99 : {
                label$100 : {
                 $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$100
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                 $1_1 = HEAPU8[$1_1 >> 0] | 0;
                 break label$99;
                }
                $1_1 = $1957($0_1 | 0) | 0;
               }
               if (HEAPU8[(($1_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                continue label$98
               }
               break label$98;
              };
              $15_1 = 0;
              $14_1 = 0;
              $10_1 = 0;
              $1_1 = 0;
             }
             $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             label$101 : {
              i64toi32_i32$3 = $0_1;
              i64toi32_i32$1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$3 = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 0;
              if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
               $75_1 = 1
              } else {
               if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
                if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
                 $76_1 = 0
                } else {
                 $76_1 = 1
                }
                $77_1 = $76_1;
               } else {
                $77_1 = 0
               }
               $75_1 = $77_1;
              }
              if ($75_1) {
               break label$101
              }
              $11_1 = $11_1 + -1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $11_1;
             }
             i64toi32_i32$0 = $0_1;
             i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
             i64toi32_i32$4 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
             $653_1 = i64toi32_i32$3;
             $653$hi = i64toi32_i32$4;
             i64toi32_i32$3 = $11_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$4 = i64toi32_i32$3 >> 31 | 0;
             $658_1 = i64toi32_i32$3;
             $658$hi = i64toi32_i32$4;
             i64toi32_i32$4 = $653$hi;
             i64toi32_i32$0 = $653_1;
             i64toi32_i32$3 = $658$hi;
             i64toi32_i32$1 = $658_1;
             i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
             i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $21_1 = i64toi32_i32$2;
             $21$hi = i64toi32_i32$5;
             if (!(i64toi32_i32$2 | i64toi32_i32$5 | 0)) {
              break label$11
             }
             label$102 : {
              if (($17_1 | 0) != (99 | 0)) {
               break label$102
              }
              i64toi32_i32$5 = $21$hi;
              i64toi32_i32$5 = $20$hi;
              i64toi32_i32$5 = $21$hi;
              i64toi32_i32$4 = $21_1;
              i64toi32_i32$0 = $20$hi;
              i64toi32_i32$1 = $20_1;
              if ((i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0) {
               break label$11
              }
             }
             label$103 : {
              if (!$12_1) {
               break label$103
              }
              HEAP32[$9_1 >> 2] = $15_1;
             }
             label$104 : {
              if ($16_1) {
               break label$104
              }
              label$105 : {
               if (!$10_1) {
                break label$105
               }
               HEAP32[($10_1 + ($1_1 << 2 | 0) | 0) >> 2] = 0;
              }
              label$106 : {
               if ($14_1) {
                break label$106
               }
               $14_1 = 0;
               break label$104;
              }
              HEAP8[($14_1 + $1_1 | 0) >> 0] = 0;
             }
             $15_1 = $10_1;
            }
            i64toi32_i32$1 = $0_1;
            i64toi32_i32$4 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
            i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
            $684$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $19$hi;
            i64toi32_i32$5 = $684$hi;
            i64toi32_i32$1 = i64toi32_i32$4;
            i64toi32_i32$4 = $19$hi;
            i64toi32_i32$0 = $19_1;
            i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
            i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
             i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
            }
            $686$hi = i64toi32_i32$2;
            i64toi32_i32$1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
            i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
            $692_1 = i64toi32_i32$1;
            $692$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $686$hi;
            i64toi32_i32$5 = i64toi32_i32$3;
            i64toi32_i32$1 = $692$hi;
            i64toi32_i32$0 = $692_1;
            i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
            i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
            if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
            }
            $19_1 = i64toi32_i32$4;
            $19$hi = i64toi32_i32$3;
            $7_1 = $7_1 + (($9_1 | 0) != (0 | 0)) | 0;
           }
           $1_1 = $6_1 + 1 | 0;
           $6_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
           if ($6_1) {
            continue label$12
           }
           break label$2;
          };
         }
         $15_1 = $10_1;
         break label$9;
        }
        $5_1 = 1;
        $14_1 = 0;
        $15_1 = 0;
        break label$7;
       }
       $5_1 = $12_1;
       break label$3;
      }
      $5_1 = $12_1;
     }
     if ($7_1) {
      break label$3
     }
    }
    $7_1 = -1;
   }
   if (!$5_1) {
    break label$2
   }
   $1828($14_1 | 0);
   $1828($15_1 | 0);
  }
  label$107 : {
   if (!$4_1) {
    break label$107
   }
   $1801($0_1 | 0);
  }
  global$0 = $3_1 + 304 | 0;
  return $7_1 | 0;
 }
 
 function $1970($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $1_1 = $0_1 + ($1_1 >>> 0 > 1 >>> 0 ? ($1_1 << 2 | 0) + -4 | 0 : 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = $1_1 + 4 | 0;
  return HEAP32[$1_1 >> 2] | 0 | 0;
 }
 
 function $1971($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + 2 | 0 | 0) {
    case 0:
     i64toi32_i32$0 = $2$hi;
     HEAP8[$0_1 >> 0] = $2_1;
     return;
    case 1:
     i64toi32_i32$0 = $2$hi;
     HEAP16[$0_1 >> 1] = $2_1;
     return;
    case 2:
    case 3:
     i64toi32_i32$0 = $2$hi;
     HEAP32[$0_1 >> 2] = $2_1;
     return;
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   i64toi32_i32$0 = $2$hi;
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $1972($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $4_1 = $2_1 + 256 | 0;
  $5_1 = $1938($3_1 | 0, $4_1 | 0) | 0;
  $4_1 = $5_1 ? $5_1 - $3_1 | 0 : $4_1;
  $2_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
  $1798($1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
  $4_1 = $3_1 + $4_1 | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + $2_1 | 0;
  return $2_1 | 0;
 }
 
 function $1973($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 <= 127 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (HEAP32[(HEAP32[(0 + 25988 | 0) >> 2] | 0) >> 2] | 0) {
      break label$3
     }
     if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
      break label$1
     }
     HEAP32[($1882() | 0) >> 2] = 25;
     break label$2;
    }
    label$4 : {
     if ($1_1 >>> 0 > 2047 >>> 0) {
      break label$4
     }
     HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
     HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
     return 2 | 0;
    }
    label$5 : {
     label$6 : {
      if ($1_1 >>> 0 < 55296 >>> 0) {
       break label$6
      }
      if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
       break label$5
      }
     }
     HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
     HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
     HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
     return 3 | 0;
    }
    label$7 : {
     if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
      break label$7
     }
     HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
     HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
     HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
     HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
     return 4 | 0;
    }
    HEAP32[($1882() | 0) >> 2] = 25;
   }
   return -1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $1974() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function $1975($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1 ? $0_1 : 1;
  label$1 : {
   label$2 : while (1) {
    $0_1 = $1827($1_1 | 0) | 0;
    if ($0_1) {
     break label$1
    }
    label$3 : {
     $0_1 = $1976() | 0;
     if (!$0_1) {
      break label$3
     }
     FUNCTION_TABLE[$0_1 | 0]();
     continue label$2;
    }
    break label$2;
   };
   fimport$13();
   wasm2js_trap();
  }
  return $0_1 | 0;
 }
 
 function $1976() {
  return $2012() | 0 | 0;
 }
 
 function $1977($0_1) {
  $0_1 = $0_1 | 0;
  return $1975($0_1 | 0) | 0 | 0;
 }
 
 function $1978($0_1) {
  $0_1 = $0_1 | 0;
  $1828($0_1 | 0);
 }
 
 function $1979($0_1) {
  $0_1 = $0_1 | 0;
  $1978($0_1 | 0);
 }
 
 function $1980($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 25648;
  return $0_1 | 0;
 }
 
 function $1981($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $1821($1_1 | 0) | 0;
  $3_1 = $1975($2_1 + 13 | 0 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$3_1 >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1798($1982($3_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1982($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 12 | 0 | 0;
 }
 
 function $1983($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $1980($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 25436;
  $1981($0_1 + 4 | 0 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1984($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 10;
  label$1 : {
   if (!($31($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = ($1985($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $1985($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($34($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $1986($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($31($0_1 | 0) | 0)) {
    break label$1
   }
   return $1987($0_1 | 0) | 0 | 0;
  }
  return $1988($0_1 | 0) | 0 | 0;
 }
 
 function $1987($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($46($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1988($0_1) {
  $0_1 = $0_1 | 0;
  return $46($0_1 | 0) | 0 | 0;
 }
 
 function $1989($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $1990($0_1 | 0);
  label$1 : {
   if ((-18 - $1_1 | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $8_1 = $1986($0_1 | 0) | 0;
   $9_1 = -17;
   label$2 : {
    if ($1_1 >>> 0 > 2147483622 >>> 0) {
     break label$2
    }
    HEAP32[($7_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
    HEAP32[($7_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
    $9_1 = ($1991(HEAP32[($245($7_1 + 12 | 0 | 0, $7_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $2_1 = $1992($9_1 | 0) | 0;
   label$3 : {
    if (!$4_1) {
     break label$3
    }
    $1993($2_1 | 0, $8_1 | 0, $4_1 | 0) | 0;
   }
   label$4 : {
    if (!$5_1) {
     break label$4
    }
    $1993($2_1 + $4_1 | 0 | 0, $6_1 | 0, $5_1 | 0) | 0;
   }
   label$5 : {
    if (($3_1 | 0) == ($4_1 | 0)) {
     break label$5
    }
    $1993(($2_1 + $4_1 | 0) + $5_1 | 0 | 0, $8_1 + $4_1 | 0 | 0, $3_1 - $4_1 | 0 | 0) | 0;
   }
   label$6 : {
    $4_1 = $1_1 + 1 | 0;
    if (($4_1 | 0) == (11 | 0)) {
     break label$6
    }
    $1994($8_1 | 0, $4_1 | 0);
   }
   $1995($0_1 | 0, $2_1 | 0);
   $1996($0_1 | 0, $9_1 | 0);
   $4_1 = $5_1 + $3_1 | 0;
   $1997($0_1 | 0, $4_1 | 0);
   $1998($2_1 + $4_1 | 0 | 0, 0 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $1999();
  wasm2js_trap();
 }
 
 function $1990($0_1) {
  $0_1 = $0_1 | 0;
  $325($0_1 | 0) | 0;
 }
 
 function $1991($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 10;
  label$1 : {
   if ($0_1 >>> 0 < 11 >>> 0) {
    break label$1
   }
   $0_1 = $2000($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (11 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $1992($0_1) {
  $0_1 = $0_1 | 0;
  return $2001($0_1 | 0) | 0 | 0;
 }
 
 function $1993($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $1798($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1994($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2002($0_1 | 0, $1_1 | 0);
 }
 
 function $1995($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($46($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $1996($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($46($0_1 | 0) | 0) + 8 | 0) >> 2] = $1_1 | -2147483648 | 0;
 }
 
 function $1997($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($46($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $1998($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0_1 >> 0] = $1_1;
 }
 
 function $1999() {
  $259(4548 | 0);
  wasm2js_trap();
 }
 
 function $2000($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 15 | 0) & -16 | 0 | 0;
 }
 
 function $2001($0_1) {
  $0_1 = $0_1 | 0;
  return $273($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $2002($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $196($0_1 | 0, $1_1 | 0, 1 | 0);
 }
 
 function $2003($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $1990($0_1 | 0);
  label$1 : {
   if ($3_1 >>> 0 >= -16 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($2004($3_1 | 0) | 0)) {
      break label$3
     }
     $2005($0_1 | 0, $2_1 | 0);
     $3_1 = $1988($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = ($1991($3_1 | 0) | 0) + 1 | 0;
    $3_1 = $1992($4_1 | 0) | 0;
    $1995($0_1 | 0, $3_1 | 0);
    $1996($0_1 | 0, $4_1 | 0);
    $1997($0_1 | 0, $2_1 | 0);
   }
   $1998(($1993($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0) + $2_1 | 0 | 0, 0 | 0);
   return;
  }
  $1999();
  wasm2js_trap();
 }
 
 function $2004($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 >>> 0 < 11 >>> 0 | 0;
 }
 
 function $2005($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[(($46($0_1 | 0) | 0) + 11 | 0) >> 0] = $1_1;
 }
 
 function $2006($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($31($0_1 | 0) | 0)) {
    break label$1
   }
   $1994($1987($0_1 | 0) | 0 | 0, $1985($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $2007($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($31($0_1 | 0) | 0)) {
    break label$1
   }
   $1997($0_1 | 0, $1_1 | 0);
   return;
  }
  $2005($0_1 | 0, $1_1 | 0);
 }
 
 function $2008($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $1990($0_1 | 0);
  label$1 : {
   if ($2_1 >>> 0 >= -16 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($2004($2_1 | 0) | 0)) {
      break label$3
     }
     $2005($0_1 | 0, $2_1 | 0);
     $3_1 = $1988($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = ($1991($2_1 | 0) | 0) + 1 | 0;
    $3_1 = $1992($4_1 | 0) | 0;
    $1995($0_1 | 0, $3_1 | 0);
    $1996($0_1 | 0, $4_1 | 0);
    $1997($0_1 | 0, $2_1 | 0);
   }
   $1998(($1993($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0) + $2_1 | 0 | 0, 0 | 0);
   return;
  }
  $1999();
  wasm2js_trap();
 }
 
 function $2009($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($2004($2_1 | 0) | 0)) {
      break label$3
     }
     $3_1 = $1988($0_1 | 0) | 0;
     $2005($0_1 | 0, $2_1 | 0);
     break label$2;
    }
    $1990($0_1 | 0);
    if ($2_1 >>> 0 >= -16 >>> 0) {
     break label$1
    }
    $4_1 = ($1991($2_1 | 0) | 0) + 1 | 0;
    $3_1 = $1992($4_1 | 0) | 0;
    $1995($0_1 | 0, $3_1 | 0);
    $1996($0_1 | 0, $4_1 | 0);
    $1997($0_1 | 0, $2_1 | 0);
   }
   $1993($3_1 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
   return;
  }
  $1999();
  wasm2js_trap();
 }
 
 function $2010($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = $1984($0_1 | 0) | 0;
    $4_1 = $23($0_1 | 0) | 0;
    if (($3_1 - $4_1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    $3_1 = $1986($0_1 | 0) | 0;
    $1993($3_1 + $4_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $4_1 + $2_1 | 0;
    $2007($0_1 | 0, $2_1 | 0);
    $1998($3_1 + $2_1 | 0 | 0, 0 | 0);
    return $0_1 | 0;
   }
   $1989($0_1 | 0, $3_1 | 0, ($4_1 + $2_1 | 0) - $3_1 | 0 | 0, $4_1 | 0, $4_1 | 0, $2_1 | 0, $1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $2011($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1824(5936 | 0, 11 | 0, 1 | 0, 26016 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1951(26016 | 0, 5817 | 0, $1_1 | 0) | 0;
  $1841(10 | 0, 26016 | 0) | 0;
  fimport$13();
  wasm2js_trap();
 }
 
 function $2012() {
  return HEAP32[(0 + 28252 | 0) >> 2] | 0 | 0;
 }
 
 function $2013() {
  var $0_1 = 0;
  $2011($0_1 | 0, 0 | 0);
  wasm2js_trap();
 }
 
 function $2014($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2015($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2016($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2017($0_1) {
  $0_1 = $0_1 | 0;
  $1978($0_1 | 0);
 }
 
 function $2018($0_1) {
  $0_1 = $0_1 | 0;
  $1978($0_1 | 0);
 }
 
 function $2019($0_1) {
  $0_1 = $0_1 | 0;
  $1978($0_1 | 0);
 }
 
 function $2020($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  label$1 : {
   if ($2021($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   $4_1 = 0;
   $1_1 = $2022($1_1 | 0, 25008 | 0, 25056 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   $1799($3_1 + 8 | 0 | 4 | 0 | 0, 0 | 0, 52 | 0) | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = 1;
   HEAP32[($3_1 + 20 | 0) >> 2] = -1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2] | 0, 1);
   label$2 : {
    $4_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
    if (($4_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   }
   $4_1 = ($4_1 | 0) == (1 | 0);
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $2021($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  }
  label$2 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break label$2
   }
   return 1 | 0;
  }
  return !($1926(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0) | 0;
 }
 
 function $2022($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $5_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  $6_1 = HEAP32[($5_1 + -4 | 0) >> 2] | 0;
  $5_1 = HEAP32[($5_1 + -8 | 0) >> 2] | 0;
  i64toi32_i32$1 = $4_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 55 | 0;
  i64toi32_i32$0 = 0;
  $9_1 = 0;
  HEAP8[i64toi32_i32$1 >> 0] = $9_1;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $9_1 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $9_1 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $9_1 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
  $0_1 = $0_1 + $5_1 | 0;
  $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!($2021($6_1 | 0, $2_1 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, $0_1, 1, 0);
    $3_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) ? $0_1 : 0;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, 1, 0);
   label$3 : {
    switch (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) {
    case 0:
     $3_1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($4_1 + 28 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$1;
    case 1:
     break label$3;
    default:
     break label$1;
    };
   }
   label$5 : {
    if ((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$5
    }
    if (HEAP32[($4_1 + 48 | 0) >> 2] | 0) {
     break label$1
    }
    if ((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $3_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 64 | 0;
  return $3_1 | 0;
 }
 
 function $2023($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($2021($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $2024($1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $2024($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  HEAP8[($0_1 + 53 | 0) >> 0] = 1;
  label$1 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
    break label$1
   }
   HEAP8[($0_1 + 52 | 0) >> 0] = 1;
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if ($2_1) {
      break label$3
     }
     HEAP32[($0_1 + 36 | 0) >> 2] = 1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
     if (($3_1 | 0) != (1 | 0)) {
      break label$1
     }
     if ((HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    label$4 : {
     if (($2_1 | 0) != ($1_1 | 0)) {
      break label$4
     }
     label$5 : {
      $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      if (($2_1 | 0) != (2 | 0)) {
       break label$5
      }
      HEAP32[($0_1 + 24 | 0) >> 2] = $3_1;
      $2_1 = $3_1;
     }
     if ((HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
     }
     if (($2_1 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    HEAP32[($0_1 + 36 | 0) >> 2] = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP8[($0_1 + 54 | 0) >> 0] = 1;
  }
 }
 
 function $2025($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($2021($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $2026($1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($2021($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     HEAP16[($1_1 + 52 | 0) >> 1] = 0;
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
     label$7 : {
      if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($1_1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
       break label$6
      }
      break label$2;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1);
  }
 }
 
 function $2026($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
    break label$1
   }
   if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  }
 }
 
 function $2027($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($2021($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2028($1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $2028($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if ($3_1) {
    break label$1
   }
   HEAP32[($0_1 + 36 | 0) >> 2] = 1;
   HEAP32[($0_1 + 24 | 0) >> 2] = $2_1;
   HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
   return;
  }
  label$2 : {
   label$3 : {
    if (($3_1 | 0) != ($1_1 | 0)) {
     break label$3
    }
    if ((HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($0_1 + 24 | 0) >> 2] = $2_1;
    return;
   }
   HEAP8[($0_1 + 54 | 0) >> 0] = 1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 2;
   HEAP32[($0_1 + 36 | 0) >> 2] = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $2029($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($2021($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2028($1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $2030($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   label$2 : {
    if ($3_1) {
     break label$2
    }
    $5_1 = 0;
    break label$1;
   }
   $5_1 = $1_1 >> 8 | 0;
   if (!($1_1 & 1 | 0)) {
    break label$1
   }
   $5_1 = $2031(HEAP32[$3_1 >> 2] | 0 | 0, $5_1 | 0) | 0;
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $2_1, $3_1 + $5_1 | 0, $1_1 & 2 | 0 ? $4_1 : 2);
 }
 
 function $2031($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[($0_1 + $1_1 | 0) >> 2] | 0 | 0;
 }
 
 function $2032($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($2021($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2028($1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $5_1 = $0_1 + 16 | 0;
  $2030(HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  label$2 : {
   $0_1 = $0_1 + 24 | 0;
   $4_1 = $5_1 + ($4_1 << 3 | 0) | 0;
   if ($0_1 >>> 0 >= $4_1 >>> 0) {
    break label$2
   }
   label$3 : while (1) {
    $2030(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    $0_1 = $0_1 + 8 | 0;
    if ($0_1 >>> 0 < $4_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function $2033($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   if (!($2021($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $2026($1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($2021($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     $5_1 = $0_1 + 16 | 0;
     $3_1 = $5_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
     $6_1 = 0;
     $7_1 = 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : while (1) {
         if ($5_1 >>> 0 >= $3_1 >>> 0) {
          break label$9
         }
         HEAP16[($1_1 + 52 | 0) >> 1] = 0;
         $2034(HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, $2_1 | 0, 1 | 0, $4_1 | 0);
         if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
          break label$9
         }
         label$11 : {
          if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
           break label$11
          }
          label$12 : {
           if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
            break label$12
           }
           $8_1 = 1;
           if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
            break label$8
           }
           $6_1 = 1;
           $7_1 = 1;
           $8_1 = 1;
           if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
            break label$11
           }
           break label$8;
          }
          $6_1 = 1;
          $8_1 = $7_1;
          if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
           break label$8
          }
         }
         $5_1 = $5_1 + 8 | 0;
         continue label$10;
        };
       }
       $5_1 = 4;
       $8_1 = $7_1;
       if (!($6_1 & 1 | 0)) {
        break label$7
       }
      }
      $5_1 = 3;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = $5_1;
     if ($8_1 & 1 | 0) {
      break label$2
     }
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $8_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $6_1 = $0_1 + 16 | 0;
   $2035(HEAP32[$6_1 >> 2] | 0 | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   $5_1 = $0_1 + 24 | 0;
   $8_1 = $6_1 + ($8_1 << 3 | 0) | 0;
   if ($5_1 >>> 0 >= $8_1 >>> 0) {
    break label$2
   }
   label$13 : {
    label$14 : {
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if ($0_1 & 2 | 0) {
      break label$14
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$13
     }
    }
    label$15 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     $2035(HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$15
     }
     break label$2;
    };
   }
   label$16 : {
    if ($0_1 & 1 | 0) {
     break label$16
    }
    label$17 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     $2035(HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$17
     }
     break label$2;
    };
   }
   label$18 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$19 : {
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$19
     }
     if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
    }
    $2035(HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
    $5_1 = $5_1 + 8 | 0;
    if ($5_1 >>> 0 < $8_1 >>> 0) {
     continue label$18
    }
    break label$18;
   };
  }
 }
 
 function $2034($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = $1_1 >> 8 | 0;
  label$1 : {
   if (!($1_1 & 1 | 0)) {
    break label$1
   }
   $7_1 = $2031(HEAP32[$4_1 >> 2] | 0 | 0, $7_1 | 0) | 0;
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $2_1, $3_1, $4_1 + $7_1 | 0, $1_1 & 2 | 0 ? $5_1 : 2, $6_1);
 }
 
 function $2035($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = $1_1 >> 8 | 0;
  label$1 : {
   if (!($1_1 & 1 | 0)) {
    break label$1
   }
   $6_1 = $2031(HEAP32[$3_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $2_1, $3_1 + $6_1 | 0, $1_1 & 2 | 0 ? $4_1 : 2, $5_1);
 }
 
 function $2036($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($2021($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $2026($1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   if (!($2021($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$4
     }
     if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function $2037($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, $12_1 = 0, $7_1 = 0, $10_1 = 0, $11_1 = 0, $9_1 = 0;
  label$1 : {
   if (!($2021($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $2024($1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $6_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 0;
  $8_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = 0;
  $9_1 = $0_1 + 16 | 0;
  $2034(HEAP32[$9_1 >> 2] | 0 | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $6_1 = $6_1 | $10_1 | 0;
  $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  $8_1 = $8_1 | $11_1 | 0;
  label$2 : {
   $12_1 = $0_1 + 24 | 0;
   $7_1 = $9_1 + ($7_1 << 3 | 0) | 0;
   if ($12_1 >>> 0 >= $7_1 >>> 0) {
    break label$2
   }
   label$3 : while (1) {
    $8_1 = $8_1 & 1 | 0;
    $6_1 = $6_1 & 1 | 0;
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if (!($11_1 & 255 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break label$2
      }
      if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
       break label$4
      }
      break label$2;
     }
     if (!($10_1 & 255 | 0)) {
      break label$4
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP16[($1_1 + 52 | 0) >> 1] = 0;
    $2034(HEAP32[$12_1 >> 2] | 0 | 0, HEAP32[($12_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
    $6_1 = $10_1 | $6_1 | 0;
    $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
    $8_1 = $11_1 | $8_1 | 0;
    $12_1 = $12_1 + 8 | 0;
    if ($12_1 >>> 0 < $7_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP8[($1_1 + 53 | 0) >> 0] = ($6_1 & 255 | 0 | 0) != (0 | 0);
  HEAP8[($1_1 + 52 | 0) >> 0] = ($8_1 & 255 | 0 | 0) != (0 | 0);
 }
 
 function $2038($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($2021($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $2024($1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
 }
 
 function $2039($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return ($2022($0_1 | 0, 25008 | 0, 25152 | 0, 0 | 0) | 0 | 0) != (0 | 0) | 0;
 }
 
 function $2040($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2041($0_1) {
  $0_1 = $0_1 | 0;
  $1978($0_1 | 0);
 }
 
 function $2042($0_1) {
  $0_1 = $0_1 | 0;
  return 3888 | 0;
 }
 
 function $2043($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1980($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 25316;
  return $0_1 | 0;
 }
 
 function $2044($0_1) {
  $0_1 = $0_1 | 0;
  $1978($0_1 | 0);
 }
 
 function $2045($0_1) {
  $0_1 = $0_1 | 0;
  return 5307 | 0;
 }
 
 function $2046($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $2043($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 25336;
  return $0_1 | 0;
 }
 
 function $2047($0_1) {
  $0_1 = $0_1 | 0;
  $2040($0_1 | 0) | 0;
  $1978($0_1 | 0);
 }
 
 function $2048($0_1) {
  $0_1 = $0_1 | 0;
  return 4086 | 0;
 }
 
 function $2049($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 25436;
  $2050($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $2050($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = $2051(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($2052($1_1 + 8 | 0 | 0) | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $1978($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $2051($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + -12 | 0 | 0;
 }
 
 function $2052($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $2053($0_1) {
  $0_1 = $0_1 | 0;
  $1978($2049($0_1 | 0) | 0 | 0);
 }
 
 function $2054($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $2055($0_1) {
  $0_1 = $0_1 | 0;
  $2049($0_1 | 0) | 0;
  $1978($0_1 | 0);
 }
 
 function $2056($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $2057($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $2056($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $1847($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $2058($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$14($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              i64toi32_i32$1 = var$1$hi;
              var$3 = var$1;
              if (!var$3) {
               break label$11
              }
              i64toi32_i32$1 = var$1$hi;
              i64toi32_i32$0 = var$1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
               i64toi32_i32$2 = 0;
               $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
               i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              var$4 = $38_1;
              if (!var$4) {
               break label$9
              }
              var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
              if (var$2 >>> 0 <= 31 >>> 0) {
               break label$8
              }
              break label$2;
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      i64toi32_i32$2 = var$1$hi;
      i64toi32_i32$1 = var$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      var$8 = i64toi32_i32$4;
      var$8$hi = i64toi32_i32$5;
      label$15 : while (1) {
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$2 = var$5;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        $45_1 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
        $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       }
       $140_1 = $45_1;
       $140$hi = i64toi32_i32$1;
       i64toi32_i32$1 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
       }
       $142$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $140$hi;
       i64toi32_i32$1 = $140_1;
       i64toi32_i32$5 = $142$hi;
       i64toi32_i32$0 = $46_1;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       var$5$hi = i64toi32_i32$5;
       $144_1 = var$5;
       $144$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$2 = var$8;
       i64toi32_i32$1 = var$5$hi;
       i64toi32_i32$0 = var$5;
       i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
       }
       var$6 = $47_1;
       var$6$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$2 = var$6$hi;
       i64toi32_i32$4 = var$6;
       i64toi32_i32$5 = var$1$hi;
       i64toi32_i32$0 = var$1;
       i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
       $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
       $151$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $144$hi;
       i64toi32_i32$2 = $144_1;
       i64toi32_i32$4 = $151$hi;
       i64toi32_i32$0 = $151_1;
       i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
       var$5 = i64toi32_i32$1;
       var$5$hi = i64toi32_i32$3;
       i64toi32_i32$3 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        $48_1 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
       }
       $154$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$7$hi;
       i64toi32_i32$2 = $154$hi;
       i64toi32_i32$3 = $48_1;
       i64toi32_i32$5 = var$7$hi;
       i64toi32_i32$0 = var$7;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       var$0$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$6$hi;
       i64toi32_i32$2 = var$6;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
       var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       var$6$hi = i64toi32_i32$3;
       var$7 = var$6;
       var$7$hi = i64toi32_i32$3;
       var$2 = var$2 + -1 | 0;
       if (var$2) {
        continue label$15
       }
       break label$15;
      };
      break label$13;
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = Table([null, $5, $8, $1, $16, $6, $10, $694, $696, $698, $699, $700, $701, $702, $11, $54, $2049, $2040, $112, $170, $132, $318, $140, $322, $442, $443, $444, $446, $2013, $445, $447, $448, $449, $450, $452, $451, $453, $455, $456, $457, $458, $454, $476, $484, $479, $491, $478, $492, $495, $496, $497, $503, $526, $523, $528, $554, $498, $515, $514, $516, $535, $599, $532, $563, $562, $564, $507, $600, $506, $601, $505, $602, $504, $603, $529, $607, $558, $610, $557, $611, $625, $628, $630, $618, $631, $629, $633, $634, $635, $656, $671, $680, $681, $682, $683, $684, $685, $662, $686, $661, $687, $693, $9, $704, $703, $707, $710, $711, $708, $718, $721, $722, $719, $725, $739, $741, $726, $734, $736, $740, $746, $749, $772, $773, $750, $755, $770, $771, $789, $790, $792, $794, $796, $797, $793, $795, $800, $802, $804, $805, $801, $803, $808, $820, $821, $809, $811, $818, $815, $822, $825, $828, $829, $836, $839, $840, $837, $846, $863, $865, $847, $855, $859, $864, $870, $875, $895, $897, $876, $884, $890, $896, $902, $908, $909, $912, $913, $915, $921, $924, $916, $925, $927, $935, $932, $933, $936, $937, $938, $939, $940, $941, $945, $963, $964, $946, $955, $961, $962, $957, $975, $977, $976, $980, $984, $991, $992, $985, $987, $989, $1001, $1008, $1012, $1013, $1039, $1044, $1041, $1049, $1040, $1064, $1048, $1050, $1045, $1066, $1082, $1084, $1089, $1090, $1083, $1088, $1093, $1107, $1108, $1094, $1096, $1105, $1106, $1101, $1119, $1120, $1122, $1129, $1130, $1123, $1125, $1127, $1133, $1136, $1137, $1134, $1138, $1139, $1143, $1148, $1149, $1144, $1146, $1147, $1152, $1154, $1156, $1157, $1153, $1155, $462, $1163, $1165, $1167, $1174, $1175, $1166, $1173, $1176, $1177, $1180, $1186, $1187, $1181, $1183, $1184, $1190, $1195, $1196, $1191, $1193, $1194, $1199, $1204, $1205, $1200, $1202, $1203, $1243, $1265, $1252, $1310, $1251, $1311, $1250, $1312, $1249, $1313, $1323, $1389, $1332, $1399, $1400, $1326, $1401, $1417, $1418, $1419, $1422, $1425, $1428, $1431, $1434, $1437, $1439, $1441, $1443, $1456, $1500, $1473, $1527, $1472, $1528, $1471, $1529, $1470, $1530, $1469, $1531, $1468, $1532, $1467, $1533, $1466, $1534, $1552, $1553, $1571, $1576, $1574, $1578, $1580, $1602, $1604, $1616, $1608, $1607, $1621, $1585, $1625, $1603, $1627, $1639, $1640, $1652, $1653, $1659, $1660, $1662, $1665, $1666, $1663, $1669, $1683, $1684, $1670, $1672, $1681, $1682, $1677, $1695, $1696, $1698, $1704, $1705, $1699, $1701, $1702, $1708, $1711, $1712, $1709, $1713, $1714, $1717, $1718, $1745, $1751, $1752, $1746, $1748, $1749, $1755, $1758, $1759, $1756, $1762, $1766, $1767, $1763, $1791, $1793, $1778, $1779, $1780, $1794, $1795, $1784, $1785, $1786, $1792, $1796, $1888, $1887, $1885, $1890, $1972, $1952, $1953, $1921, $1922, $2014, $2019, $2015, $2016, $2020, $2037, $2033, $2032, $2044, $2045, $2047, $2048, $2053, $2054, $2055, $2017, $2038, $2036, $2029, $2018, $2023, $2025, $2027, $2041, $2042]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": $0, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "spineWasmInstanceInit": $405, 
  "spineWasmInstanceDestroy": $406, 
  "queryStoreMemory": $407, 
  "createSkeletonObject": $408, 
  "setSkeletonData": $409, 
  "setAnimation": $410, 
  "clearTrack": $411, 
  "clearTracks": $412, 
  "setToSetupPose": $413, 
  "setSlotsToSetupPose": $414, 
  "setBonesToSetupPose": $415, 
  "setTimeScale": $416, 
  "setSkin": $417, 
  "updateAnimation": $418, 
  "updateRenderData": $419, 
  "getDrawOrderSize": $420, 
  "getSlotNameByOrder": $421, 
  "getBoneMatrix": $422, 
  "setDefaultScale": $423, 
  "setVertexEffect": $424, 
  "createJitterVertexEffect": $425, 
  "updateJitterParameters": $426, 
  "createSwirlVertexEffect": $427, 
  "updateSwirlParameters": $431, 
  "setMix": $432, 
  "setPremultipliedAlpha": $433, 
  "setColor": $434, 
  "setAttachment": $435, 
  "destroyInstance": $436, 
  "initSkeletonData": $437, 
  "retainSkeletonDataByUUID": $438, 
  "recordSkeletonDataUUID": $439, 
  "queryMemory": $440, 
  "freeMemory": $441, 
  "malloc": $1827, 
  "__errno_location": $1882, 
  "fflush": $1881, 
  "setTempRet0": $1847, 
  "getTempRet0": $1848, 
  "emscripten_stack_init": $1852, 
  "emscripten_stack_get_free": $1853, 
  "emscripten_stack_get_base": $1854, 
  "emscripten_stack_get_end": $1855, 
  "stackSave": $1849, 
  "stackRestore": $1850, 
  "stackAlloc": $1851, 
  "__cxa_is_pointer_type": $2039, 
  "dynCall_jiji": $2057
 };
}

  return asmFunc(info);
}

)(info);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module, info)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly != 'object') {
  abort('no native wasm support detected');
}

// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed' + (text ? ': ' + text : ''));
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.
function _free() {
  // Show a helpful error since we used to include free by default in the past.
  abort("free() called but not included in the build - add '_free' to EXPORTED_FUNCTIONS");
}

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.
/**
 * heapOrArray is either a regular array, or a JavaScript typed array view.
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
    return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
  }
  var str = '';
  // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
  while (idx < endPtr) {
    // For UTF8 byte structure, see:
    // http://en.wikipedia.org/wiki/UTF-8#Description
    // https://www.ietf.org/rfc/rfc2279.txt
    // https://tools.ietf.org/html/rfc3629
    var u0 = heapOrArray[idx++];
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    var u1 = heapOrArray[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    var u2 = heapOrArray[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
      u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
    }

    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u > 0x10FFFF) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var c = str.charCodeAt(i); // possibly a lead surrogate
    if (c <= 0x7F) {
      len++;
    } else if (c <= 0x7FF) {
      len += 2;
    } else if (c >= 0xD800 && c <= 0xDFFF) {
      len += 4; ++i;
    } else {
      len += 3;
    }
  }
  return len;
}

// end include: runtime_strings.js
// Memory management

var HEAP,
/** @type {!ArrayBuffer} */
  buffer,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/** @type {!Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 268435456;legacyModuleProp('INITIAL_MEMORY', 'INITIAL_MEMORY');

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array != 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536,
      'maximum': INITIAL_MEMORY / 65536
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  HEAPU32[((max)>>2)] = 0x2135467;
  HEAPU32[(((max)+(4))>>2)] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAPU32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[((max)>>2)];
  var cookie2 = HEAPU32[(((max)+(4))>>2)];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten at 0x' + max.toString(16) + ', expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' 0x' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAPU32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;

function keepRuntimeAlive() {
  return noExitRuntime;
}

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  checkStackCookie();

  
if (!Module["noFSInit"] && !FS.init.initialized)
  FS.init();
FS.ignorePermissions = false;

TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval != 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  {
    if (Module['onAbort']) {
      Module['onAbort'](what);
    }
  }

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // defintion for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  readyPromiseReject(e);
  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// include: URIUtils.js


// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
/** @param {boolean=} fixedasm */
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile;
  wasmBinaryFile = 'spine.wasm';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    }
    throw "both async and sync fetching of the wasm failed";
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch == 'function'
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');

  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(function (instance) {
      return instance;
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
      }
      abort(reason);
    });
  }

  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming == 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch == 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        // Suppress closure warning here since the upstream definition for
        // instantiateStreaming only allows Promise<Repsponse> rather than
        // an actual Response.
        // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.
        /** @suppress {checkTypes} */
        var result = WebAssembly.instantiateStreaming(response, info);

        return result.then(
          receiveInstantiationResult,
          function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiationResult);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiationResult);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  // Also pthreads and wasm workers initialize the wasm instance through this path.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
        // If instantiation fails, reject the module ready promise.
        readyPromiseReject(e);
    }
  }

  // If instantiation fails, reject the module ready promise.
  instantiateAsync().catch(readyPromiseReject);
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};






  /** @constructor */
  function ExitStatus(status) {
      this.name = 'ExitStatus';
      this.message = 'Program terminated with exit(' + status + ')';
      this.status = status;
    }

  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        // Pass the module as the first argument.
        callbacks.shift()(Module);
      }
    }

  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
      if (type.endsWith('*')) type = '*';
      switch (type) {
        case 'i1': return HEAP8[((ptr)>>0)];
        case 'i8': return HEAP8[((ptr)>>0)];
        case 'i16': return HEAP16[((ptr)>>1)];
        case 'i32': return HEAP32[((ptr)>>2)];
        case 'i64': return HEAP32[((ptr)>>2)];
        case 'float': return HEAPF32[((ptr)>>2)];
        case 'double': return HEAPF64[((ptr)>>3)];
        case '*': return HEAPU32[((ptr)>>2)];
        default: abort('invalid type for getValue: ' + type);
      }
      return null;
    }

  function intArrayToString(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      var chr = array[i];
      if (chr > 0xFF) {
        if (ASSERTIONS) {
          assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
        }
        chr &= 0xFF;
      }
      ret.push(String.fromCharCode(chr));
    }
    return ret.join('');
  }

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
      if (type.endsWith('*')) type = '*';
      switch (type) {
        case 'i1': HEAP8[((ptr)>>0)] = value; break;
        case 'i8': HEAP8[((ptr)>>0)] = value; break;
        case 'i16': HEAP16[((ptr)>>1)] = value; break;
        case 'i32': HEAP32[((ptr)>>2)] = value; break;
        case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
        case 'float': HEAPF32[((ptr)>>2)] = value; break;
        case 'double': HEAPF64[((ptr)>>3)] = value; break;
        case '*': HEAPU32[((ptr)>>2)] = value; break;
        default: abort('invalid type for setValue: ' + type);
      }
    }

  function warnOnce(text) {
      if (!warnOnce.shown) warnOnce.shown = {};
      if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        err(text);
      }
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      // Thrown object is prepended by exception metadata block
      return _malloc(size + 24) + 24;
    }

  /** @constructor */
  function ExceptionInfo(excPtr) {
      this.excPtr = excPtr;
      this.ptr = excPtr - 24;
  
      this.set_type = function(type) {
        HEAPU32[(((this.ptr)+(4))>>2)] = type;
      };
  
      this.get_type = function() {
        return HEAPU32[(((this.ptr)+(4))>>2)];
      };
  
      this.set_destructor = function(destructor) {
        HEAPU32[(((this.ptr)+(8))>>2)] = destructor;
      };
  
      this.get_destructor = function() {
        return HEAPU32[(((this.ptr)+(8))>>2)];
      };
  
      this.set_refcount = function(refcount) {
        HEAP32[((this.ptr)>>2)] = refcount;
      };
  
      this.set_caught = function (caught) {
        caught = caught ? 1 : 0;
        HEAP8[(((this.ptr)+(12))>>0)] = caught;
      };
  
      this.get_caught = function () {
        return HEAP8[(((this.ptr)+(12))>>0)] != 0;
      };
  
      this.set_rethrown = function (rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[(((this.ptr)+(13))>>0)] = rethrown;
      };
  
      this.get_rethrown = function () {
        return HEAP8[(((this.ptr)+(13))>>0)] != 0;
      };
  
      // Initialize native structure fields. Should be called once after allocated.
      this.init = function(type, destructor) {
        this.set_adjusted_ptr(0);
        this.set_type(type);
        this.set_destructor(destructor);
        this.set_refcount(0);
        this.set_caught(false);
        this.set_rethrown(false);
      }
  
      this.add_ref = function() {
        var value = HEAP32[((this.ptr)>>2)];
        HEAP32[((this.ptr)>>2)] = value + 1;
      };
  
      // Returns true if last reference released.
      this.release_ref = function() {
        var prev = HEAP32[((this.ptr)>>2)];
        HEAP32[((this.ptr)>>2)] = prev - 1;
        assert(prev > 0);
        return prev === 1;
      };
  
      this.set_adjusted_ptr = function(adjustedPtr) {
        HEAPU32[(((this.ptr)+(16))>>2)] = adjustedPtr;
      };
  
      this.get_adjusted_ptr = function() {
        return HEAPU32[(((this.ptr)+(16))>>2)];
      };
  
      // Get pointer which is expected to be received by catch clause in C++ code. It may be adjusted
      // when the pointer is casted to some of the exception object base classes (e.g. when virtual
      // inheritance is used). When a pointer is thrown this method should return the thrown pointer
      // itself.
      this.get_exception_ptr = function() {
        // Work around a fastcomp bug, this code is still included for some reason in a build without
        // exceptions support.
        var isPointer = ___cxa_is_pointer_type(this.get_type());
        if (isPointer) {
          return HEAPU32[((this.excPtr)>>2)];
        }
        var adjusted = this.get_adjusted_ptr();
        if (adjusted !== 0) return adjusted;
        return this.excPtr;
      };
    }
  
  var exceptionLast = 0;
  
  var uncaughtExceptionCount = 0;
  function ___cxa_throw(ptr, type, destructor) {
      var info = new ExceptionInfo(ptr);
      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
      info.init(type, destructor);
      exceptionLast = ptr;
      uncaughtExceptionCount++;
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -sNO_DISABLE_EXCEPTION_CATCHING or -sEXCEPTION_CATCHING_ALLOWED=[..] to catch.";
    }

  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)] = value;
      return value;
    }
  
  var PATH = {isAbs:(path) => path.charAt(0) === '/',splitPath:(filename) => {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:(parts, allowAboveRoot) => {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:(path) => {
        var isAbsolute = PATH.isAbs(path),
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter((p) => !!p), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:(path) => {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:(path) => {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },join:function() {
        var paths = Array.prototype.slice.call(arguments);
        return PATH.normalize(paths.join('/'));
      },join2:(l, r) => {
        return PATH.normalize(l + '/' + r);
      }};
  
  function getRandomDevice() {
      if (typeof crypto == 'object' && typeof crypto['getRandomValues'] == 'function') {
        // for modern web browsers
        var randomBuffer = new Uint8Array(1);
        return () => { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
      } else
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      return () => abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };");
    }
  
  var PATH_FS = {resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path != 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = PATH.isAbs(path);
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter((p) => !!p), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:(from, to) => {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  /** @type {function(string, boolean=, number=)} */
  function intArrayFromString(stringy, dontAddNull, length) {
    var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
    var u8array = new Array(len);
    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
    if (dontAddNull) u8array.length = numBytesWritten;
    return u8array;
  }
  var TTY = {ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.fsync(stream.tty);
        },fsync:function(stream) {
          stream.tty.ops.fsync(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },fsync:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },fsync:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  function zeroMemory(address, size) {
      HEAPU8.fill(0, address, address + size);
      return address;
    }
  
  function alignMemory(size, alignment) {
      assert(alignment, "alignment argument is required");
      return Math.ceil(size / alignment) * alignment;
    }
  function mmapAlloc(size) {
      abort('internal error: mmapAlloc called but `emscripten_builtin_memalign` native symbol not exported');
    }
  var MEMFS = {ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.timestamp = node.timestamp;
        }
        return node;
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.parent.timestamp = Date.now()
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          new_dir.timestamp = old_node.parent.timestamp;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  /** @param {boolean=} noRunDep */
  function asyncLoad(url, onload, onerror, noRunDep) {
      var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
      readAsync(url, (arrayBuffer) => {
        assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
        onload(new Uint8Array(arrayBuffer));
        if (dep) removeRunDependency(dep);
      }, (event) => {
        if (onerror) {
          onerror();
        } else {
          throw 'Loading data file "' + url + '" failed.';
        }
      });
      if (dep) addRunDependency(dep);
    }
  
  var ERRNO_MESSAGES = {0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES = {};
  
  function withStackSave(f) {
      var stack = stackSave();
      var ret = f();
      stackRestore(stack);
      return ret;
    }
  function demangle(func) {
      warnOnce('warning: build with -sDEMANGLE_SUPPORT to link in libcxxabi demangling');
      return func;
    }
  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }
  var FS = {root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(path, opts = {}) => {
        path = PATH_FS.resolve(FS.cwd(), path);
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        opts = Object.assign(defaults, opts)
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter((p) => !!p), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count + 1 });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:(node) => {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:(parentid, name) => {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:(node) => {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:(node) => {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:(parent, name) => {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:(parent, name, mode, rdev) => {
        assert(typeof parent == 'object')
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:(node) => {
        FS.hashRemoveNode(node);
      },isRoot:(node) => {
        return node === node.parent;
      },isMountpoint:(node) => {
        return !!node.mounted;
      },isFile:(mode) => {
        return (mode & 61440) === 32768;
      },isDir:(mode) => {
        return (mode & 61440) === 16384;
      },isLink:(mode) => {
        return (mode & 61440) === 40960;
      },isChrdev:(mode) => {
        return (mode & 61440) === 8192;
      },isBlkdev:(mode) => {
        return (mode & 61440) === 24576;
      },isFIFO:(mode) => {
        return (mode & 61440) === 4096;
      },isSocket:(mode) => {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:(str) => {
        var flags = FS.flagModes[str];
        if (typeof flags == 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:(flag) => {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:(node, perms) => {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.includes('r') && !(node.mode & 292)) {
          return 2;
        } else if (perms.includes('w') && !(node.mode & 146)) {
          return 2;
        } else if (perms.includes('x') && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:(dir) => {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:(dir, name) => {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:(dir, name, isdir) => {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:(node, flags) => {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:(fd_start = 0, fd_end = FS.MAX_OPEN_FDS) => {
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:(fd) => FS.streams[fd],createStream:(stream, fd_start, fd_end) => {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function() {
            this.shared = { };
          };
          FS.FSStream.prototype = {};
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              /** @this {FS.FSStream} */
              get: function() { return this.node; },
              /** @this {FS.FSStream} */
              set: function(val) { this.node = val; }
            },
            isRead: {
              /** @this {FS.FSStream} */
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              /** @this {FS.FSStream} */
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              /** @this {FS.FSStream} */
              get: function() { return (this.flags & 1024); }
            },
            flags: {
              /** @this {FS.FSStream} */
              get: function() { return this.shared.flags; },
              /** @this {FS.FSStream} */
              set: function(val) { this.shared.flags = val; },
            },
            position : {
              /** @this {FS.FSStream} */
              get: function() { return this.shared.position; },
              /** @this {FS.FSStream} */
              set: function(val) { this.shared.position = val; },
            },
          });
        }
        // clone it, so we can return an instance of FSStream
        stream = Object.assign(new FS.FSStream(), stream);
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:(fd) => {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:(stream) => {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:() => {
          throw new FS.ErrnoError(70);
        }},major:(dev) => ((dev) >> 8),minor:(dev) => ((dev) & 0xff),makedev:(ma, mi) => ((ma) << 8 | (mi)),registerDevice:(dev, ops) => {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:(dev) => FS.devices[dev],getMounts:(mount) => {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:(populate, callback) => {
        if (typeof populate == 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach((mount) => {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:(type, opts, mountpoint) => {
        if (typeof type == 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:(mountpoint) => {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach((hash) => {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.includes(current.mount)) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:(parent, name) => {
        return parent.node_ops.lookup(parent, name);
      },mknod:(path, mode, dev) => {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:(path, mode) => {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:(path, mode) => {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:(path, mode) => {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:(path, mode, dev) => {
        if (typeof dev == 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:(oldpath, newpath) => {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:(old_path, new_path) => {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existant directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:(path) => {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:(path) => {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:(path) => {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:(path) => {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:(path, dontFollow) => {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:(path) => {
        return FS.stat(path, true);
      },chmod:(path, mode, dontFollow) => {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:(path, mode) => {
        FS.chmod(path, mode, true);
      },fchmod:(fd, mode) => {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:(path, uid, gid, dontFollow) => {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:(path, uid, gid) => {
        FS.chown(path, uid, gid, true);
      },fchown:(fd, uid, gid) => {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:(path, len) => {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:(fd, len) => {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:(path, atime, mtime) => {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:(path, flags, mode) => {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags == 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode == 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path == 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512) && !created) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        });
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
          }
        }
        return stream;
      },close:(stream) => {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:(stream) => {
        return stream.fd === null;
      },llseek:(stream, offset, whence) => {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:(stream, buffer, offset, length, position) => {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:(stream, buffer, offset, length, position, canOwn) => {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:(stream, offset, length) => {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:(stream, length, position, prot, flags) => {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, length, position, prot, flags);
      },msync:(stream, buffer, offset, length, mmapFlags) => {
        if (!stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:(stream) => 0,ioctl:(stream, cmd, arg) => {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:(path, opts = {}) => {
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:(path, data, opts = {}) => {
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data == 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:() => FS.currentPath,chdir:(path) => {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:() => {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:() => {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: () => 0,
          write: (stream, buffer, offset, length, pos) => length,
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device = getRandomDevice();
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:() => {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: () => {
            var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: (parent, name) => {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: () => stream.path },
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:() => {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:() => {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach((code) => {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:() => {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:(input, output, error) => {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:() => {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        _fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:(canRead, canWrite) => {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },findObject:(path, dontResolveLastLink) => {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (!ret.exists) {
          return null;
        }
        return ret.object;
      },analyzePath:(path, dontResolveLastLink) => {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createPath:(parent, path, canRead, canWrite) => {
        parent = typeof parent == 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:(parent, name, properties, canRead, canWrite) => {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:(parent, name, data, canRead, canWrite, canOwn) => {
        var path = name;
        if (parent) {
          parent = typeof parent == 'string' ? parent : FS.getPath(parent);
          path = name ? PATH.join2(parent, name) : parent;
        }
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data == 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:(parent, name, input, output) => {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: (stream) => {
            stream.seekable = false;
          },
          close: (stream) => {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: (stream, buffer, offset, length, pos /* ignored */) => {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: (stream, buffer, offset, length, pos) => {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },forceLoadFile:(obj) => {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest != 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
      },createLazyFile:(parent, name, url, canRead, canWrite) => {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (from, to) => {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            }
            return intArrayFromString(xhr.responseText || '', true);
          };
          var lazyArray = this;
          lazyArray.setDataGetter((chunkNum) => {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof lazyArray.chunks[chunkNum] == 'undefined') {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof lazyArray.chunks[chunkNum] == 'undefined') throw new Error('doXHR failed!');
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest != 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach((key) => {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            FS.forceLoadFile(node);
            return fn.apply(null, arguments);
          };
        });
        function writeChunks(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        }
        // use a custom read function
        stream_ops.read = (stream, buffer, offset, length, position) => {
          FS.forceLoadFile(node);
          return writeChunks(stream, buffer, offset, length, position)
        };
        // use a custom mmap function
        stream_ops.mmap = (stream, length, position, prot, flags) => {
          FS.forceLoadFile(node);
          var ptr = mmapAlloc(length);
          if (!ptr) {
            throw new FS.ErrnoError(48);
          }
          writeChunks(stream, HEAP8, ptr, length, position);
          return { ptr: ptr, allocated: true };
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          if (Browser.handledByPreloadPlugin(byteArray, fullname, finish, () => {
            if (onerror) onerror();
            removeRunDependency(dep);
          })) {
            return;
          }
          finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          asyncLoad(url, (byteArray) => processData(byteArray), onerror);
        } else {
          processData(url);
        }
      },indexedDB:() => {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:() => {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(paths, onload, onerror) => {
        onload = onload || (() => {});
        onerror = onerror || (() => {});
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = () => {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = () => {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach((path) => {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = () => { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = () => { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:(paths, onload, onerror) => {
        onload = onload || (() => {});
        onerror = onerror || (() => {});
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = () => {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach((path) => {
            var getRequest = files.get(path);
            getRequest.onsuccess = () => {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = () => { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },absolutePath:() => {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },createFolder:() => {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },createLink:() => {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },joinPath:() => {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },mmapAlloc:() => {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },standardizePath:() => {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      }};
  var SYSCALLS = {DEFAULT_POLLMASK:5,calculateAt:function(dirfd, path, allowEmpty) {
        if (PATH.isAbs(path)) {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = SYSCALLS.getStreamFromFD(dirfd);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return PATH.join2(dir, path);
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(8))>>2)] = stat.ino;
        HEAP32[(((buf)+(12))>>2)] = stat.mode;
        HEAPU32[(((buf)+(16))>>2)] = stat.nlink;
        HEAP32[(((buf)+(20))>>2)] = stat.uid;
        HEAP32[(((buf)+(24))>>2)] = stat.gid;
        HEAP32[(((buf)+(28))>>2)] = stat.rdev;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
        HEAP32[(((buf)+(48))>>2)] = 4096;
        HEAP32[(((buf)+(52))>>2)] = stat.blocks;
        (tempI64 = [Math.floor(stat.atime.getTime() / 1000)>>>0,(tempDouble=Math.floor(stat.atime.getTime() / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(56))>>2)] = tempI64[0],HEAP32[(((buf)+(60))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(64))>>2)] = 0;
        (tempI64 = [Math.floor(stat.mtime.getTime() / 1000)>>>0,(tempDouble=Math.floor(stat.mtime.getTime() / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(72))>>2)] = tempI64[0],HEAP32[(((buf)+(76))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(80))>>2)] = 0;
        (tempI64 = [Math.floor(stat.ctime.getTime() / 1000)>>>0,(tempDouble=Math.floor(stat.ctime.getTime() / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(88))>>2)] = tempI64[0],HEAP32[(((buf)+(92))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(96))>>2)] = 0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(104))>>2)] = tempI64[0],HEAP32[(((buf)+(108))>>2)] = tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        if (!FS.isFile(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (flags & 2) {
          // MAP_PRIVATE calls need not to be synced back to underlying fs
          return 0;
        }
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      }};
  function ___syscall_fcntl64(fd, cmd, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.createStream(stream, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 5:
        /* case 5: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)] = 2;
          return 0;
        }
        case 6:
        case 7:
        /* case 6: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 7: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fcntl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
    return -e.errno;
  }
  }

  function ___syscall_ioctl(fd, op, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)] = 0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: return -28; // not supported
      }
    } catch (e) {
    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
    return -e.errno;
  }
  }

  function ___syscall_openat(dirfd, path, flags, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      var mode = varargs ? SYSCALLS.get() : 0;
      return FS.open(path, flags, mode).fd;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
    return -e.errno;
  }
  }

  function _abort() {
      abort('native code called abort()');
    }

  /** @type {function(...*):?} */
  function _consoleInfo(
  ) {
  err('missing function: consoleInfo'); abort(-1);
  }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function getHeapMax() {
      return HEAPU8.length;
    }
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with -sINITIAL_MEMORY=X with X higher than the current value ' + HEAP8.length + ', (2) compile with -sALLOW_MEMORY_GROWTH which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with -sABORTING_MALLOC=0');
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  function _fd_close(fd) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
    return e.errno;
  }
  }

  /** @param {number=} offset */
  function doReadv(stream, iov, iovcnt, offset) {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.read(stream, HEAP8,ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) break; // nothing more to read
      }
      return ret;
    }
  function _fd_read(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doReadv(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
    return e.errno;
  }
  }

  function convertI32PairToI53Checked(lo, hi) {
      assert(lo == (lo >>> 0) || lo == (lo|0)); // lo should either be a i32 or a u32
      assert(hi === (hi|0));                    // hi should be a i32
      return ((hi + 0x200000) >>> 0 < 0x400001 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;
    }
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
  try {
  
      var offset = convertI32PairToI53Checked(offset_low, offset_high); if (isNaN(offset)) return 61;
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
    return e.errno;
  }
  }

  /** @param {number=} offset */
  function doWritev(stream, iov, iovcnt, offset) {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.write(stream, HEAP8,ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
      }
      return ret;
    }
  function _fd_write(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doWritev(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
    return e.errno;
  }
  }

  /** @type {function(...*):?} */
  function _jsReadFile(
  ) {
  err('missing function: jsReadFile'); abort(-1);
  }

  var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();;
ERRNO_CODES = {
      'EPERM': 63,
      'ENOENT': 44,
      'ESRCH': 71,
      'EINTR': 27,
      'EIO': 29,
      'ENXIO': 60,
      'E2BIG': 1,
      'ENOEXEC': 45,
      'EBADF': 8,
      'ECHILD': 12,
      'EAGAIN': 6,
      'EWOULDBLOCK': 6,
      'ENOMEM': 48,
      'EACCES': 2,
      'EFAULT': 21,
      'ENOTBLK': 105,
      'EBUSY': 10,
      'EEXIST': 20,
      'EXDEV': 75,
      'ENODEV': 43,
      'ENOTDIR': 54,
      'EISDIR': 31,
      'EINVAL': 28,
      'ENFILE': 41,
      'EMFILE': 33,
      'ENOTTY': 59,
      'ETXTBSY': 74,
      'EFBIG': 22,
      'ENOSPC': 51,
      'ESPIPE': 70,
      'EROFS': 69,
      'EMLINK': 34,
      'EPIPE': 64,
      'EDOM': 18,
      'ERANGE': 68,
      'ENOMSG': 49,
      'EIDRM': 24,
      'ECHRNG': 106,
      'EL2NSYNC': 156,
      'EL3HLT': 107,
      'EL3RST': 108,
      'ELNRNG': 109,
      'EUNATCH': 110,
      'ENOCSI': 111,
      'EL2HLT': 112,
      'EDEADLK': 16,
      'ENOLCK': 46,
      'EBADE': 113,
      'EBADR': 114,
      'EXFULL': 115,
      'ENOANO': 104,
      'EBADRQC': 103,
      'EBADSLT': 102,
      'EDEADLOCK': 16,
      'EBFONT': 101,
      'ENOSTR': 100,
      'ENODATA': 116,
      'ETIME': 117,
      'ENOSR': 118,
      'ENONET': 119,
      'ENOPKG': 120,
      'EREMOTE': 121,
      'ENOLINK': 47,
      'EADV': 122,
      'ESRMNT': 123,
      'ECOMM': 124,
      'EPROTO': 65,
      'EMULTIHOP': 36,
      'EDOTDOT': 125,
      'EBADMSG': 9,
      'ENOTUNIQ': 126,
      'EBADFD': 127,
      'EREMCHG': 128,
      'ELIBACC': 129,
      'ELIBBAD': 130,
      'ELIBSCN': 131,
      'ELIBMAX': 132,
      'ELIBEXEC': 133,
      'ENOSYS': 52,
      'ENOTEMPTY': 55,
      'ENAMETOOLONG': 37,
      'ELOOP': 32,
      'EOPNOTSUPP': 138,
      'EPFNOSUPPORT': 139,
      'ECONNRESET': 15,
      'ENOBUFS': 42,
      'EAFNOSUPPORT': 5,
      'EPROTOTYPE': 67,
      'ENOTSOCK': 57,
      'ENOPROTOOPT': 50,
      'ESHUTDOWN': 140,
      'ECONNREFUSED': 14,
      'EADDRINUSE': 3,
      'ECONNABORTED': 13,
      'ENETUNREACH': 40,
      'ENETDOWN': 38,
      'ETIMEDOUT': 73,
      'EHOSTDOWN': 142,
      'EHOSTUNREACH': 23,
      'EINPROGRESS': 26,
      'EALREADY': 7,
      'EDESTADDRREQ': 17,
      'EMSGSIZE': 35,
      'EPROTONOSUPPORT': 66,
      'ESOCKTNOSUPPORT': 137,
      'EADDRNOTAVAIL': 4,
      'ENETRESET': 39,
      'EISCONN': 30,
      'ENOTCONN': 53,
      'ETOOMANYREFS': 141,
      'EUSERS': 136,
      'EDQUOT': 19,
      'ESTALE': 72,
      'ENOTSUP': 138,
      'ENOMEDIUM': 148,
      'EILSEQ': 25,
      'EOVERFLOW': 61,
      'ECANCELED': 11,
      'ENOTRECOVERABLE': 56,
      'EOWNERDEAD': 62,
      'ESTRPIPE': 135,
    };;
var ASSERTIONS = true;

// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob == 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


function checkIncomingModuleAPI() {
  ignoredModuleProp('fetchSettings');
}
var asmLibraryArg = Module['asmLibraryArg1'];
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _spineWasmInstanceInit = Module["_spineWasmInstanceInit"] = createExportWrapper("spineWasmInstanceInit");

/** @type {function(...*):?} */
var _spineWasmInstanceDestroy = Module["_spineWasmInstanceDestroy"] = createExportWrapper("spineWasmInstanceDestroy");

/** @type {function(...*):?} */
var _queryStoreMemory = Module["_queryStoreMemory"] = createExportWrapper("queryStoreMemory");

/** @type {function(...*):?} */
var _createSkeletonObject = Module["_createSkeletonObject"] = createExportWrapper("createSkeletonObject");

/** @type {function(...*):?} */
var _setSkeletonData = Module["_setSkeletonData"] = createExportWrapper("setSkeletonData");

/** @type {function(...*):?} */
var _setAnimation = Module["_setAnimation"] = createExportWrapper("setAnimation");

/** @type {function(...*):?} */
var _clearTrack = Module["_clearTrack"] = createExportWrapper("clearTrack");

/** @type {function(...*):?} */
var _clearTracks = Module["_clearTracks"] = createExportWrapper("clearTracks");

/** @type {function(...*):?} */
var _setToSetupPose = Module["_setToSetupPose"] = createExportWrapper("setToSetupPose");

/** @type {function(...*):?} */
var _setSlotsToSetupPose = Module["_setSlotsToSetupPose"] = createExportWrapper("setSlotsToSetupPose");

/** @type {function(...*):?} */
var _setBonesToSetupPose = Module["_setBonesToSetupPose"] = createExportWrapper("setBonesToSetupPose");

/** @type {function(...*):?} */
var _setTimeScale = Module["_setTimeScale"] = createExportWrapper("setTimeScale");

/** @type {function(...*):?} */
var _setSkin = Module["_setSkin"] = createExportWrapper("setSkin");

/** @type {function(...*):?} */
var _updateAnimation = Module["_updateAnimation"] = createExportWrapper("updateAnimation");

/** @type {function(...*):?} */
var _updateRenderData = Module["_updateRenderData"] = createExportWrapper("updateRenderData");

/** @type {function(...*):?} */
var _getDrawOrderSize = Module["_getDrawOrderSize"] = createExportWrapper("getDrawOrderSize");

/** @type {function(...*):?} */
var _getSlotNameByOrder = Module["_getSlotNameByOrder"] = createExportWrapper("getSlotNameByOrder");

/** @type {function(...*):?} */
var _getBoneMatrix = Module["_getBoneMatrix"] = createExportWrapper("getBoneMatrix");

/** @type {function(...*):?} */
var _setDefaultScale = Module["_setDefaultScale"] = createExportWrapper("setDefaultScale");

/** @type {function(...*):?} */
var _setVertexEffect = Module["_setVertexEffect"] = createExportWrapper("setVertexEffect");

/** @type {function(...*):?} */
var _createJitterVertexEffect = Module["_createJitterVertexEffect"] = createExportWrapper("createJitterVertexEffect");

/** @type {function(...*):?} */
var _updateJitterParameters = Module["_updateJitterParameters"] = createExportWrapper("updateJitterParameters");

/** @type {function(...*):?} */
var _createSwirlVertexEffect = Module["_createSwirlVertexEffect"] = createExportWrapper("createSwirlVertexEffect");

/** @type {function(...*):?} */
var _updateSwirlParameters = Module["_updateSwirlParameters"] = createExportWrapper("updateSwirlParameters");

/** @type {function(...*):?} */
var _setMix = Module["_setMix"] = createExportWrapper("setMix");

/** @type {function(...*):?} */
var _setPremultipliedAlpha = Module["_setPremultipliedAlpha"] = createExportWrapper("setPremultipliedAlpha");

/** @type {function(...*):?} */
var _setColor = Module["_setColor"] = createExportWrapper("setColor");

/** @type {function(...*):?} */
var _setAttachment = Module["_setAttachment"] = createExportWrapper("setAttachment");

/** @type {function(...*):?} */
var _destroyInstance = Module["_destroyInstance"] = createExportWrapper("destroyInstance");

/** @type {function(...*):?} */
var _initSkeletonData = Module["_initSkeletonData"] = createExportWrapper("initSkeletonData");

/** @type {function(...*):?} */
var _retainSkeletonDataByUUID = Module["_retainSkeletonDataByUUID"] = createExportWrapper("retainSkeletonDataByUUID");

/** @type {function(...*):?} */
var _recordSkeletonDataUUID = Module["_recordSkeletonDataUUID"] = createExportWrapper("recordSkeletonDataUUID");

/** @type {function(...*):?} */
var _queryMemory = Module["_queryMemory"] = createExportWrapper("queryMemory");

/** @type {function(...*):?} */
var _freeMemory = Module["_freeMemory"] = createExportWrapper("freeMemory");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var setTempRet0 = Module["setTempRet0"] = createExportWrapper("setTempRet0");

/** @type {function(...*):?} */
var getTempRet0 = Module["getTempRet0"] = createExportWrapper("getTempRet0");

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = function() {
  return (_emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = Module["asm"]["emscripten_stack_get_base"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = createExportWrapper("__cxa_is_pointer_type");

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");





// === Auto-generated postamble setup entry stuff ===


var unexportedRuntimeSymbols = [
  'run',
  'UTF8ArrayToString',
  'UTF8ToString',
  'stringToUTF8Array',
  'stringToUTF8',
  'lengthBytesUTF8',
  'addOnPreRun',
  'addOnInit',
  'addOnPreMain',
  'addOnExit',
  'addOnPostRun',
  'addRunDependency',
  'removeRunDependency',
  'FS_createFolder',
  'FS_createPath',
  'FS_createDataFile',
  'FS_createPreloadedFile',
  'FS_createLazyFile',
  'FS_createLink',
  'FS_createDevice',
  'FS_unlink',
  'getLEB',
  'getFunctionTables',
  'alignFunctionTables',
  'registerFunctions',
  'prettyPrint',
  'getCompilerSetting',
  'print',
  'printErr',
  'callMain',
  'abort',
  'keepRuntimeAlive',
  'wasmMemory',
  'stackAlloc',
  'stackSave',
  'stackRestore',
  'getTempRet0',
  'setTempRet0',
  'writeStackCookie',
  'checkStackCookie',
  'intArrayFromBase64',
  'tryParseAsDataURI',
  'ptrToString',
  'zeroMemory',
  'stringToNewUTF8',
  'exitJS',
  'getHeapMax',
  'abortOnCannotGrowMemory',
  'emscripten_realloc_buffer',
  'ENV',
  'ERRNO_CODES',
  'ERRNO_MESSAGES',
  'setErrNo',
  'inetPton4',
  'inetNtop4',
  'inetPton6',
  'inetNtop6',
  'readSockaddr',
  'writeSockaddr',
  'DNS',
  'getHostByName',
  'Protocols',
  'Sockets',
  'getRandomDevice',
  'warnOnce',
  'traverseStack',
  'UNWIND_CACHE',
  'convertPCtoSourceLocation',
  'readAsmConstArgsArray',
  'readAsmConstArgs',
  'mainThreadEM_ASM',
  'jstoi_q',
  'jstoi_s',
  'getExecutableName',
  'listenOnce',
  'autoResumeAudioContext',
  'dynCallLegacy',
  'getDynCaller',
  'dynCall',
  'handleException',
  'runtimeKeepalivePush',
  'runtimeKeepalivePop',
  'callUserCallback',
  'maybeExit',
  'safeSetTimeout',
  'asmjsMangle',
  'asyncLoad',
  'alignMemory',
  'mmapAlloc',
  'writeI53ToI64',
  'writeI53ToI64Clamped',
  'writeI53ToI64Signaling',
  'writeI53ToU64Clamped',
  'writeI53ToU64Signaling',
  'readI53FromI64',
  'readI53FromU64',
  'convertI32PairToI53',
  'convertI32PairToI53Checked',
  'convertU32PairToI53',
  'getCFunc',
  'ccall',
  'cwrap',
  'uleb128Encode',
  'sigToWasmTypes',
  'generateFuncType',
  'convertJsFunctionToWasm',
  'freeTableIndexes',
  'functionsInTableMap',
  'getEmptyTableSlot',
  'updateTableMap',
  'addFunction',
  'removeFunction',
  'reallyNegative',
  'unSign',
  'strLen',
  'reSign',
  'formatString',
  'setValue',
  'getValue',
  'PATH',
  'PATH_FS',
  'intArrayFromString',
  'intArrayToString',
  'AsciiToString',
  'stringToAscii',
  'UTF16Decoder',
  'UTF16ToString',
  'stringToUTF16',
  'lengthBytesUTF16',
  'UTF32ToString',
  'stringToUTF32',
  'lengthBytesUTF32',
  'allocateUTF8',
  'allocateUTF8OnStack',
  'writeStringToMemory',
  'writeArrayToMemory',
  'writeAsciiToMemory',
  'SYSCALLS',
  'getSocketFromFD',
  'getSocketAddress',
  'JSEvents',
  'registerKeyEventCallback',
  'specialHTMLTargets',
  'maybeCStringToJsString',
  'findEventTarget',
  'findCanvasEventTarget',
  'getBoundingClientRect',
  'fillMouseEventData',
  'registerMouseEventCallback',
  'registerWheelEventCallback',
  'registerUiEventCallback',
  'registerFocusEventCallback',
  'fillDeviceOrientationEventData',
  'registerDeviceOrientationEventCallback',
  'fillDeviceMotionEventData',
  'registerDeviceMotionEventCallback',
  'screenOrientation',
  'fillOrientationChangeEventData',
  'registerOrientationChangeEventCallback',
  'fillFullscreenChangeEventData',
  'registerFullscreenChangeEventCallback',
  'JSEvents_requestFullscreen',
  'JSEvents_resizeCanvasForFullscreen',
  'registerRestoreOldStyle',
  'hideEverythingExceptGivenElement',
  'restoreHiddenElements',
  'setLetterbox',
  'currentFullscreenStrategy',
  'restoreOldWindowedStyle',
  'softFullscreenResizeWebGLRenderTarget',
  'doRequestFullscreen',
  'fillPointerlockChangeEventData',
  'registerPointerlockChangeEventCallback',
  'registerPointerlockErrorEventCallback',
  'requestPointerLock',
  'fillVisibilityChangeEventData',
  'registerVisibilityChangeEventCallback',
  'registerTouchEventCallback',
  'fillGamepadEventData',
  'registerGamepadEventCallback',
  'registerBeforeUnloadEventCallback',
  'fillBatteryEventData',
  'battery',
  'registerBatteryEventCallback',
  'setCanvasElementSize',
  'getCanvasElementSize',
  'demangle',
  'demangleAll',
  'jsStackTrace',
  'stackTrace',
  'ExitStatus',
  'getEnvStrings',
  'checkWasiClock',
  'doReadv',
  'doWritev',
  'dlopenMissingError',
  'createDyncallWrapper',
  'setImmediateWrapped',
  'clearImmediateWrapped',
  'polyfillSetImmediate',
  'uncaughtExceptionCount',
  'exceptionLast',
  'exceptionCaught',
  'ExceptionInfo',
  'exception_addRef',
  'exception_decRef',
  'Browser',
  'setMainLoop',
  'wget',
  'FS',
  'MEMFS',
  'TTY',
  'PIPEFS',
  'SOCKFS',
  '_setNetworkCallback',
  'tempFixedLengthArray',
  'miniTempWebGLFloatBuffers',
  'heapObjectForWebGLType',
  'heapAccessShiftForWebGLHeap',
  'GL',
  'emscriptenWebGLGet',
  'computeUnpackAlignedImageSize',
  'emscriptenWebGLGetTexPixelData',
  'emscriptenWebGLGetUniform',
  'webglGetUniformLocation',
  'webglPrepareUniformLocationsBeforeFirstUse',
  'webglGetLeftBracePos',
  'emscriptenWebGLGetVertexAttrib',
  'writeGLArray',
  'AL',
  'SDL_unicode',
  'SDL_ttfContext',
  'SDL_audio',
  'SDL',
  'SDL_gfx',
  'GLUT',
  'EGL',
  'GLFW_Window',
  'GLFW',
  'GLEW',
  'IDBStore',
  'runAndAbortIfError',
  'ALLOC_NORMAL',
  'ALLOC_STACK',
  'allocate',
];
unexportedRuntimeSymbols.forEach(unexportedRuntimeSymbol);
var missingLibrarySymbols = [
  'ptrToString',
  'stringToNewUTF8',
  'exitJS',
  'emscripten_realloc_buffer',
  'inetPton4',
  'inetNtop4',
  'inetPton6',
  'inetNtop6',
  'readSockaddr',
  'writeSockaddr',
  'getHostByName',
  'traverseStack',
  'convertPCtoSourceLocation',
  'readAsmConstArgs',
  'mainThreadEM_ASM',
  'jstoi_q',
  'jstoi_s',
  'getExecutableName',
  'listenOnce',
  'autoResumeAudioContext',
  'dynCallLegacy',
  'getDynCaller',
  'dynCall',
  'handleException',
  'runtimeKeepalivePush',
  'runtimeKeepalivePop',
  'callUserCallback',
  'maybeExit',
  'safeSetTimeout',
  'asmjsMangle',
  'writeI53ToI64',
  'writeI53ToI64Clamped',
  'writeI53ToI64Signaling',
  'writeI53ToU64Clamped',
  'writeI53ToU64Signaling',
  'readI53FromI64',
  'readI53FromU64',
  'convertI32PairToI53',
  'convertU32PairToI53',
  'getCFunc',
  'ccall',
  'cwrap',
  'uleb128Encode',
  'sigToWasmTypes',
  'generateFuncType',
  'convertJsFunctionToWasm',
  'getEmptyTableSlot',
  'updateTableMap',
  'addFunction',
  'removeFunction',
  'reallyNegative',
  'unSign',
  'strLen',
  'reSign',
  'formatString',
  'AsciiToString',
  'stringToAscii',
  'UTF16ToString',
  'stringToUTF16',
  'lengthBytesUTF16',
  'UTF32ToString',
  'stringToUTF32',
  'lengthBytesUTF32',
  'allocateUTF8',
  'allocateUTF8OnStack',
  'writeStringToMemory',
  'writeArrayToMemory',
  'writeAsciiToMemory',
  'getSocketFromFD',
  'getSocketAddress',
  'registerKeyEventCallback',
  'maybeCStringToJsString',
  'findEventTarget',
  'findCanvasEventTarget',
  'getBoundingClientRect',
  'fillMouseEventData',
  'registerMouseEventCallback',
  'registerWheelEventCallback',
  'registerUiEventCallback',
  'registerFocusEventCallback',
  'fillDeviceOrientationEventData',
  'registerDeviceOrientationEventCallback',
  'fillDeviceMotionEventData',
  'registerDeviceMotionEventCallback',
  'screenOrientation',
  'fillOrientationChangeEventData',
  'registerOrientationChangeEventCallback',
  'fillFullscreenChangeEventData',
  'registerFullscreenChangeEventCallback',
  'JSEvents_requestFullscreen',
  'JSEvents_resizeCanvasForFullscreen',
  'registerRestoreOldStyle',
  'hideEverythingExceptGivenElement',
  'restoreHiddenElements',
  'setLetterbox',
  'softFullscreenResizeWebGLRenderTarget',
  'doRequestFullscreen',
  'fillPointerlockChangeEventData',
  'registerPointerlockChangeEventCallback',
  'registerPointerlockErrorEventCallback',
  'requestPointerLock',
  'fillVisibilityChangeEventData',
  'registerVisibilityChangeEventCallback',
  'registerTouchEventCallback',
  'fillGamepadEventData',
  'registerGamepadEventCallback',
  'registerBeforeUnloadEventCallback',
  'fillBatteryEventData',
  'battery',
  'registerBatteryEventCallback',
  'setCanvasElementSize',
  'getCanvasElementSize',
  'jsStackTrace',
  'stackTrace',
  'getEnvStrings',
  'checkWasiClock',
  'createDyncallWrapper',
  'setImmediateWrapped',
  'clearImmediateWrapped',
  'polyfillSetImmediate',
  'exception_addRef',
  'exception_decRef',
  'setMainLoop',
  '_setNetworkCallback',
  'heapObjectForWebGLType',
  'heapAccessShiftForWebGLHeap',
  'emscriptenWebGLGet',
  'computeUnpackAlignedImageSize',
  'emscriptenWebGLGetTexPixelData',
  'emscriptenWebGLGetUniform',
  'webglGetUniformLocation',
  'webglPrepareUniformLocationsBeforeFirstUse',
  'webglGetLeftBracePos',
  'emscriptenWebGLGetVertexAttrib',
  'writeGLArray',
  'SDL_unicode',
  'SDL_ttfContext',
  'SDL_audio',
  'GLFW_Window',
  'runAndAbortIfError',
  'ALLOC_NORMAL',
  'ALLOC_STACK',
  'allocate',
];
missingLibrarySymbols.forEach(missingLibrarySymbol)


var calledRun;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

    stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    readyPromiseResolve(Module);
    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = (x) => {
    has = true;
  }
  try { // it doesn't matter if it fails
    _fflush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();







  return spineWasm.ready
}
);
})();
export default spineWasm;